package org . apache . camel . component . cxf . feature ; import java . util . concurrent . Executor ; import org . apache . camel . component . cxf . MessageInvoker ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . service . Service ; public class MessageInvokerInterceptor extends AbstractPhaseInterceptor < Message > { public MessageInvokerInterceptor ( ) { super ( Phase . INVOKE ) ; } public void handleMessage ( final Message message ) { final Exchange exchange = message . getExchange ( ) ; final Endpoint endpoint = exchange . get ( Endpoint . class ) ; final Service service = endpoint . getService ( ) ; final MessageInvoker invoker = ( MessageInvoker ) service . getInvoker ( ) ; Runnable invocation = new Runnable ( ) { public void run ( ) { Exchange runableEx = message . getExchange ( ) ; invoker . invoke ( runableEx ) ; if ( ! exchange . isOneWay ( ) ) { Endpoint ep = exchange . get ( Endpoint . class ) ; Message outMessage = runableEx . getOutMessage ( ) ; copyJaxwsProperties ( message , outMessage ) ; if ( outMessage == null ) { outMessage = ep . getBinding ( ) . createMessage ( ) ; exchange . setOutMessage ( outMessage ) ; } } } } ; Executor executor = getExecutor ( endpoint ) ; if ( exchange . get ( Executor . class ) == executor ) { invocation . run ( ) ; } else { exchange . put ( Executor . class , executor ) ; executor . execute ( invocation ) ; } } private Executor getExecutor ( final Endpoint endpoint ) { return endpoint . getService ( ) . getExecutor ( ) ; } private void copyJaxwsProperties ( Message inMsg , Message outMsg ) { outMsg . put ( Message . WSDL_OPERATION , inMsg . get ( Message . WSDL_OPERATION ) ) ; outMsg . put ( Message . WSDL_SERVICE , inMsg . get ( Message . WSDL_SERVICE ) ) ; outMsg . put ( Message . WSDL_INTERFACE , inMsg . get ( Message . WSDL_INTERFACE ) ) ; outMsg . put ( Message . WSDL_PORT , inMsg . get ( Message . WSDL_PORT ) ) ; outMsg . put ( Message . WSDL_DESCRIPTION , inMsg . get ( Message . WSDL_DESCRIPTION ) ) ; } } 	0
package org . apache . camel . view ; import java . io . PrintWriter ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; public class RouteDotGenerator extends GraphGeneratorSupport { public RouteDotGenerator ( String dir ) { super ( dir , ".dot" ) ; } protected void printRoutes ( PrintWriter writer , Map < String , List < RouteType > > map ) { Set < Map . Entry < String , List < RouteType > > > entries = map . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { String group = entry . getKey ( ) ; printRoutes ( writer , group , entry . getValue ( ) ) ; } } protected void printRoutes ( PrintWriter writer , String group , List < RouteType > routes ) { if ( group != null ) { writer . println ( "subgraph cluster_" + ( clusterCounter ++ ) + " {" ) ; writer . println ( "label = \"" + group + "\";" ) ; writer . println ( "color = grey;" ) ; writer . println ( "style = \"dashed\";" ) ; writer . println ( "URL = \"" + group + ".html\";" ) ; writer . println ( ) ; } for ( RouteType route : routes ) { List < FromType > inputs = route . getInputs ( ) ; for ( FromType input : inputs ) { printRoute ( writer , route , input ) ; } writer . println ( ) ; } if ( group != null ) { writer . println ( "}" ) ; writer . println ( ) ; } } protected String escapeNodeId ( String text ) { return text . replace ( '.' , '_' ) . replace ( "$" , "_" ) ; } protected void printRoute ( PrintWriter writer , final RouteType route , FromType input ) { NodeData nodeData = getNodeData ( input ) ; printNode ( writer , nodeData ) ; NodeData from = nodeData ; for ( ProcessorType output : route . getOutputs ( ) ) { NodeData newData = printNode ( writer , from , output ) ; from = newData ; } } protected NodeData printNode ( PrintWriter writer , NodeData fromData , ProcessorType node ) { if ( node instanceof MulticastType ) { List < ProcessorType > outputs = node . getOutputs ( ) ; for ( ProcessorType output : outputs ) { printNode ( writer , fromData , output ) ; } return fromData ; } NodeData toData = getNodeData ( node ) ; printNode ( writer , toData ) ; if ( fromData != null ) { writer . print ( fromData . id ) ; writer . print ( " -> " ) ; writer . print ( toData . id ) ; writer . println ( " [" ) ; String label = fromData . edgeLabel ; if ( isNotNullAndNonEmpty ( label ) ) { writer . println ( "label = \"" + label + "\"" ) ; } writer . println ( "];" ) ; } List < ProcessorType > outputs = toData . outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { NodeData newData = printNode ( writer , toData , output ) ; if ( ! isMulticastNode ( node ) ) { toData = newData ; } } } return toData ; } protected void printNode ( PrintWriter writer , NodeData data ) { if ( ! data . nodeWritten ) { data . nodeWritten = true ; writer . println ( ) ; writer . print ( data . id ) ; writer . println ( " [" ) ; writer . println ( "label = \"" + data . label + "\"" ) ; writer . println ( "tooltip = \"" + data . tooltop + "\"" ) ; if ( data . url != null ) { writer . println ( "URL = \"" + data . url + "\"" ) ; } String image = data . image ; if ( image != null ) { writer . println ( "shapefile = \"" + image + "\"" ) ; writer . println ( "peripheries=0" ) ; } String shape = data . shape ; if ( shape == null && image != null ) { shape = "custom" ; } if ( shape != null ) { writer . println ( "shape = \"" + shape + "\"" ) ; } writer . println ( "];" ) ; writer . println ( ) ; } } protected void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) { writer . println ( "digraph CamelRoutes {" ) ; writer . println ( ) ; writer . println ( "node [style = \"rounded,filled\", fillcolor = yellow, " + "fontname=\"Helvetica-Oblique\"];" ) ; writer . println ( ) ; printRoutes ( writer , map ) ; writer . println ( "}" ) ; } } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "groovy" ) public @ interface Groovy { String value ( ) ; } 	0
package org . apache . camel . processor ; import java . io . Serializable ; import java . util . Random ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RedeliveryPolicy implements Cloneable , Serializable { protected static transient Random randomNumberGenerator ; private static final transient Log LOG = LogFactory . getLog ( RedeliveryPolicy . class ) ; protected int maximumRedeliveries = 6 ; protected long initialRedeliveryDelay = 1000L ; protected long maximumRedeliveryDelay = 60 * 1000L ; protected double backOffMultiplier = 2 ; protected boolean useExponentialBackOff ; protected double collisionAvoidanceFactor = 0.15d ; protected boolean useCollisionAvoidance ; public RedeliveryPolicy ( ) { } @ Override public String toString ( ) { return "RedeliveryPolicy[maximumRedeliveries=" + maximumRedeliveries + "]" ; } public RedeliveryPolicy copy ( ) { try { return ( RedeliveryPolicy ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( "Could not clone: " + e , e ) ; } } public boolean shouldRedeliver ( int redeliveryCounter ) { if ( getMaximumRedeliveries ( ) < 0 ) { return true ; } return redeliveryCounter < getMaximumRedeliveries ( ) ; } public long sleep ( long redeliveryDelay ) { redeliveryDelay = getRedeliveryDelay ( redeliveryDelay ) ; if ( redeliveryDelay > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + redeliveryDelay + " millis until attempting redelivery" ) ; } try { Thread . sleep ( redeliveryDelay ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Thread interrupted: " + e , e ) ; } } } return redeliveryDelay ; } public long getRedeliveryDelay ( long previousDelay ) { long redeliveryDelay ; if ( previousDelay == 0 ) { redeliveryDelay = initialRedeliveryDelay ; } else if ( useExponentialBackOff && backOffMultiplier > 1 ) { redeliveryDelay = Math . round ( backOffMultiplier * previousDelay ) ; } else { redeliveryDelay = previousDelay ; } if ( useCollisionAvoidance ) { Random random = getRandomNumberGenerator ( ) ; double variance = ( random . nextBoolean ( ) ? collisionAvoidanceFactor : - collisionAvoidanceFactor ) * random . nextDouble ( ) ; redeliveryDelay += redeliveryDelay * variance ; } if ( maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay ) { redeliveryDelay = maximumRedeliveryDelay ; } return redeliveryDelay ; } public RedeliveryPolicy maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicy initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicy useCollisionAvoidance ( ) { setUseCollisionAvoidance ( true ) ; return this ; } public RedeliveryPolicy useExponentialBackOff ( ) { setUseExponentialBackOff ( true ) ; return this ; } public RedeliveryPolicy backOffMultiplier ( double multiplier ) { useExponentialBackOff ( ) ; setBackOffMultiplier ( multiplier ) ; return this ; } public RedeliveryPolicy collisionAvoidancePercent ( double collisionAvoidancePercent ) { useCollisionAvoidance ( ) ; setCollisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public RedeliveryPolicy maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { setMaximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public short getCollisionAvoidancePercent ( ) { return ( short ) Math . round ( collisionAvoidanceFactor * 100 ) ; } public void setCollisionAvoidancePercent ( double collisionAvoidancePercent ) { this . collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d ; } public double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public int getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( int maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public long getMaximumRedeliveryDelay ( ) { return maximumRedeliveryDelay ; } public void setMaximumRedeliveryDelay ( long maximumRedeliveryDelay ) { this . maximumRedeliveryDelay = maximumRedeliveryDelay ; } public boolean isUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public boolean isUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } protected static synchronized Random getRandomNumberGenerator ( ) { if ( randomNumberGenerator == null ) { randomNumberGenerator = new Random ( ) ; } return randomNumberGenerator ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import java . io . InterruptedIOException ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . http . Header ; import org . apache . http . HttpEntity ; import org . apache . http . HttpException ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . entity . ByteArrayEntity ; import org . apache . http . impl . DefaultConnectionReuseStrategy ; import org . apache . http . impl . nio . DefaultClientIOEventDispatch ; import org . apache . http . impl . nio . reactor . DefaultConnectingIOReactor ; import org . apache . http . message . BasicHttpEntityEnclosingRequest ; import org . apache . http . message . BasicHttpRequest ; import org . apache . http . nio . NHttpConnection ; import org . apache . http . nio . protocol . BufferingHttpClientHandler ; import org . apache . http . nio . protocol . EventListener ; import org . apache . http . nio . protocol . HttpRequestExecutionHandler ; import org . apache . http . nio . reactor . ConnectingIOReactor ; import org . apache . http . nio . reactor . IOEventDispatch ; import org . apache . http . nio . reactor . SessionRequest ; import org . apache . http . nio . reactor . SessionRequestCallback ; import org . apache . http . params . HttpParams ; import org . apache . http . protocol . BasicHttpProcessor ; import org . apache . http . protocol . HttpContext ; import org . apache . http . protocol . RequestConnControl ; import org . apache . http . protocol . RequestContent ; import org . apache . http . protocol . RequestExpectContinue ; import org . apache . http . protocol . RequestTargetHost ; import org . apache . http . protocol . RequestUserAgent ; import org . apache . http . util . concurrent . ThreadFactory ; public class JhcProducer extends DefaultProducer < JhcExchange > implements AsyncProcessor { public static final String HTTP_RESPONSE_CODE = "http.responseCode" ; public static final Set < String > HEADERS_TO_SKIP = new HashSet < String > ( Arrays . asList ( "content-length" , "content-type" , HTTP_RESPONSE_CODE . toLowerCase ( ) ) ) ; private static final transient Log LOG = LogFactory . getLog ( JhcProducer . class ) ; private int nbThreads = 2 ; private ConnectingIOReactor ioReactor ; private ThreadFactory threadFactory ; private Thread runner ; public JhcProducer ( JhcEndpoint endpoint ) { super ( endpoint ) ; } @ Override public JhcEndpoint getEndpoint ( ) { return ( JhcEndpoint ) super . getEndpoint ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; HttpParams params = getEndpoint ( ) . getParams ( ) ; ioReactor = new DefaultConnectingIOReactor ( nbThreads , threadFactory , params ) ; BasicHttpProcessor httpproc = new BasicHttpProcessor ( ) ; httpproc . addInterceptor ( new RequestContent ( ) ) ; httpproc . addInterceptor ( new RequestTargetHost ( ) ) ; httpproc . addInterceptor ( new RequestConnControl ( ) ) ; httpproc . addInterceptor ( new RequestUserAgent ( ) ) ; httpproc . addInterceptor ( new RequestExpectContinue ( ) ) ; BufferingHttpClientHandler handler = new BufferingHttpClientHandler ( httpproc , new MyHttpRequestExecutionHandler ( ) , new DefaultConnectionReuseStrategy ( ) , params ) ; handler . setEventListener ( new EventLogger ( ) ) ; final IOEventDispatch ioEventDispatch = new DefaultClientIOEventDispatch ( handler , params ) ; runner = new Thread ( new Runnable ( ) { public void run ( ) { try { ioReactor . execute ( ioEventDispatch ) ; } catch ( InterruptedIOException ex ) { LOG . info ( "Interrupted" ) ; } catch ( IOException e ) { LOG . warn ( "I/O error: " + e . getMessage ( ) ) ; } LOG . debug ( "Shutdown" ) ; } } ) ; runner . start ( ) ; } @ Override protected void doStop ( ) throws Exception { ioReactor . shutdown ( ) ; runner . join ( ) ; super . doStop ( ) ; } public void process ( Exchange exchange ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "process: " + exchange ) ; } AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "processAsync: " + exchange ) ; } SocketAddress addr = new InetSocketAddress ( getEndpoint ( ) . getHost ( ) , getEndpoint ( ) . getPort ( ) ) ; exchange . setProperty ( AsyncCallback . class . getName ( ) , callback ) ; SessionRequest req = ioReactor . connect ( addr , null , exchange , new MySessionRequestCallback ( ) ) ; return false ; } protected HttpRequest createRequest ( Exchange exchange ) { String uri = getEndpoint ( ) . getEndpointUri ( ) ; HttpEntity entity = createEntity ( exchange ) ; HttpRequest req ; if ( entity == null ) { req = new BasicHttpRequest ( "GET" , getEndpoint ( ) . getPath ( ) ) ; } else { req = new BasicHttpEntityEnclosingRequest ( "POST" , getEndpoint ( ) . getPath ( ) ) ; ( ( BasicHttpEntityEnclosingRequest ) req ) . setEntity ( entity ) ; } for ( String headerName : exchange . getIn ( ) . getHeaders ( ) . keySet ( ) ) { String headerValue = exchange . getIn ( ) . getHeader ( headerName , String . class ) ; if ( shouldHeaderBePropagated ( headerName , headerValue ) ) { req . addHeader ( headerName , headerValue ) ; } } return req ; } protected HttpEntity createEntity ( Exchange exchange ) { Message in = exchange . getIn ( ) ; HttpEntity entity = in . getBody ( HttpEntity . class ) ; if ( entity == null ) { byte [ ] data = in . getBody ( byte [ ] . class ) ; if ( data == null ) { return null ; } entity = new ByteArrayEntity ( data ) ; String contentType = in . getHeader ( "Content-Type" , String . class ) ; if ( contentType != null ) { ( ( ByteArrayEntity ) entity ) . setContentType ( contentType ) ; } String contentEncoding = in . getHeader ( "Content-Encoding" , String . class ) ; if ( contentEncoding != null ) { ( ( ByteArrayEntity ) entity ) . setContentEncoding ( contentEncoding ) ; } } return entity ; } protected boolean shouldHeaderBePropagated ( String headerName , String headerValue ) { if ( headerValue == null ) { return false ; } if ( headerName . startsWith ( "org.apache.camel" ) ) { return false ; } if ( HEADERS_TO_SKIP . contains ( headerName . toLowerCase ( ) ) ) { return false ; } return true ; } static class MySessionRequestCallback implements SessionRequestCallback { public void completed ( SessionRequest sessionRequest ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Completed" ) ; } } public void failed ( SessionRequest sessionRequest ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Failed" ) ; } } public void timeout ( SessionRequest sessionRequest ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Timeout" ) ; } } public void cancelled ( SessionRequest sessionRequest ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Cancelled" ) ; } } } class MyHttpRequestExecutionHandler implements HttpRequestExecutionHandler { private static final String REQUEST_SENT = "request-sent" ; private static final String RESPONSE_RECEIVED = "response-received" ; public void initalizeContext ( HttpContext httpContext , Object o ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Initialize context" ) ; } httpContext . setAttribute ( Exchange . class . getName ( ) , ( Exchange ) o ) ; } public HttpRequest submitRequest ( HttpContext httpContext ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Submit request: " + httpContext ) ; } Object flag = httpContext . getAttribute ( REQUEST_SENT ) ; if ( flag == null ) { httpContext . setAttribute ( REQUEST_SENT , Boolean . TRUE ) ; Exchange e = ( Exchange ) httpContext . getAttribute ( Exchange . class . getName ( ) ) ; return createRequest ( e ) ; } else { return null ; } } public void handleResponse ( HttpResponse httpResponse , HttpContext httpContext ) throws IOException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Handle response" ) ; } httpContext . setAttribute ( RESPONSE_RECEIVED , Boolean . TRUE ) ; Exchange e = ( Exchange ) httpContext . getAttribute ( Exchange . class . getName ( ) ) ; e . getOut ( ) . setBody ( httpResponse . getEntity ( ) ) ; for ( Iterator it = httpResponse . headerIterator ( ) ; it . hasNext ( ) ; ) { Header h = ( Header ) it . next ( ) ; e . getOut ( ) . setHeader ( h . getName ( ) , h . getValue ( ) ) ; } e . getOut ( ) . setHeader ( HTTP_RESPONSE_CODE , httpResponse . getStatusLine ( ) . getStatusCode ( ) ) ; AsyncCallback callback = ( AsyncCallback ) e . removeProperty ( AsyncCallback . class . getName ( ) ) ; callback . done ( false ) ; } public void finalizeContext ( HttpContext httpContext ) { } } static class EventLogger implements EventListener { public void connectionOpen ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection open: " + conn ) ; } } public void connectionTimeout ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection timed out: " + conn ) ; } } public void connectionClosed ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection closed: " + conn ) ; } } public void fatalIOException ( final IOException ex , final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "I/O error: " + ex . getMessage ( ) ) ; } } public void fatalProtocolException ( final HttpException ex , final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "HTTP error: " + ex . getMessage ( ) ) ; } } } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RecipientList extends ServiceSupport implements Processor { private final Expression < Exchange > expression ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RecipientList ( Expression < Exchange > expression ) { notNull ( expression , "expression" ) ; this . expression = expression ; } @ Override public String toString ( ) { return "RecipientList[" + expression + "]" ; } public void process ( Exchange exchange ) throws Exception { Object receipientList = expression . evaluate ( exchange ) ; Iterator iter = ObjectConverter . iterator ( receipientList ) ; List < Processor > processors = new ArrayList < Processor > ( ) ; while ( iter . hasNext ( ) ) { Object recipient = iter . next ( ) ; Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , recipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; processors . add ( producer ) ; } MulticastProcessor mp = new MulticastProcessor ( processors , new UseLatestAggregationStrategy ( ) ) ; mp . process ( exchange ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } } 	1
package org . apache . camel . bam . model ; import javax . persistence . CascadeType ; import javax . persistence . Entity ; import javax . persistence . FetchType ; import javax . persistence . GeneratedValue ; import javax . persistence . Id ; import javax . persistence . ManyToOne ; import javax . persistence . UniqueConstraint ; @ Entity @ UniqueConstraint ( columnNames = { "name" } ) public class ActivityDefinition extends EntitySupport { private String name ; private ProcessDefinition processDefinition ; @ Override @ Id @ GeneratedValue public Long getId ( ) { return super . getId ( ) ; } @ Override public String toString ( ) { return "Activity[" + getId ( ) + " name: " + getName ( ) + "]" ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } @ ManyToOne ( fetch = FetchType . LAZY , cascade = { CascadeType . PERSIST , CascadeType . MERGE } ) public ProcessDefinition getProcessDefinition ( ) { return processDefinition ; } public void setProcessDefinition ( ProcessDefinition processDefinition ) { this . processDefinition = processDefinition ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "when" ) public class WhenType < Type extends ProcessorType > extends ExpressionNode { public WhenType ( ) { } public WhenType ( Predicate predicate ) { super ( predicate ) ; } public WhenType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "When[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "when" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . util . ObjectHelper ; public abstract class ExpressionSupport < E extends Exchange > implements Expression < E > , Predicate < E > { public boolean matches ( E exchange ) { Object value = evaluate ( exchange ) ; return ObjectHelper . evaluateValuePredicate ( value ) ; } public void assertMatches ( String text , E exchange ) { if ( ! matches ( exchange ) ) { throw new AssertionError ( text + " " + assertionFailureMessage ( exchange ) + " for exchange: " + exchange ) ; } } protected abstract String assertionFailureMessage ( E exchange ) ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . SetHeaderProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setHeader" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetHeaderType extends ExpressionNode { @ XmlAttribute private String headerName ; @ XmlAttribute ( required = false ) private String value ; public SetHeaderType ( ) { } public SetHeaderType ( String headerName , ExpressionType expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , Expression expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , String value ) { super ( ExpressionBuilder . constantExpression ( value ) ) ; setHeaderName ( headerName ) ; } @ Override public String toString ( ) { return "SetHeader[ " + getHeaderName ( ) + ", " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setHeader" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr ; if ( getValue ( ) == null ) { expr = getExpression ( ) . createExpression ( routeContext ) ; } else { expr = ExpressionBuilder . constantExpression ( getValue ( ) ) ; } Processor childProcessor = routeContext . createProcessor ( this ) ; return new SetHeaderProcessor ( getHeaderName ( ) , expr , childProcessor ) ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return headerName ; } public void setValue ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . IOException ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . commons . net . ftp . FTPClient ; public class FtpEndpoint extends RemoteFileEndpoint < RemoteFileExchange > { private static final transient Log LOG = LogFactory . getLog ( FtpEndpoint . class ) ; public FtpEndpoint ( String uri , RemoteFileComponent remoteFileComponent , RemoteFileConfiguration configuration ) { super ( uri , remoteFileComponent , configuration ) ; } public FtpEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public FtpProducer createProducer ( ) throws Exception { return new FtpProducer ( this , createFtpClient ( ) ) ; } public FtpConsumer createConsumer ( Processor processor ) throws Exception { final FtpConsumer consumer = new FtpConsumer ( this , processor , createFtpClient ( ) ) ; configureConsumer ( consumer ) ; return consumer ; } protected FTPClient createFtpClient ( ) { final FTPClient client = new FTPClient ( ) ; return client ; } public void connect ( FTPClient client ) throws IOException { RemoteFileConfiguration config = getConfiguration ( ) ; String host = config . getHost ( ) ; int port = config . getPort ( ) ; client . connect ( host , port ) ; if ( null != config . getUsername ( ) ) { client . login ( config . getUsername ( ) , config . getPassword ( ) ) ; } else { client . login ( "anonymous" , null ) ; } client . setFileType ( config . isBinary ( ) ? FTPClient . BINARY_FILE_TYPE : FTPClient . ASCII_FILE_TYPE ) ; } public void disconnect ( FTPClient client ) throws IOException { client . disconnect ( ) ; } } 	0
package org . apache . camel . converter . stream ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import javax . xml . transform . TransformerException ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . converter . jaxp . XmlConverter ; @ Converter public class StreamCacheConverter { private XmlConverter converter = new XmlConverter ( ) ; @ Converter public StreamCache convertToStreamCache ( StreamSource source ) throws TransformerException { return new StreamSourceCache ( converter . toString ( source ) ) ; } @ Converter public StreamCache convertToStreamCache ( InputStream stream ) throws IOException { return new InputStreamCache ( IOConverter . toBytes ( stream ) ) ; } private class StreamSourceCache extends StringSource implements StreamCache { private static final long serialVersionUID = 4147248494104812945L ; public StreamSourceCache ( String text ) { super ( text ) ; } } private class InputStreamCache extends ByteArrayInputStream implements StreamCache { public InputStreamCache ( byte [ ] data ) { super ( data ) ; } } } 	1
package org . apache . camel . spring ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . EndpointInject ; import org . apache . camel . MessageDriven ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . impl . DefaultProducerTemplate ; import org . apache . camel . spring . util . ReflectionUtils ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . NoSuchBeanDefinitionException ; import org . springframework . beans . factory . config . BeanPostProcessor ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; @ XmlRootElement ( name = "beanPostProcessor" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CamelBeanPostProcessor implements BeanPostProcessor , ApplicationContextAware { private static final transient Log LOG = LogFactory . getLog ( CamelBeanPostProcessor . class ) ; @ XmlTransient private SpringCamelContext camelContext ; @ XmlTransient private ApplicationContext applicationContext ; public CamelBeanPostProcessor ( ) { } public Object postProcessBeforeInitialization ( Object bean , String beanName ) throws BeansException { injectFields ( bean ) ; injectMethods ( bean ) ; if ( bean instanceof CamelContextAware ) { CamelContextAware contextAware = ( CamelContextAware ) bean ; if ( camelContext == null ) { LOG . warn ( "No CamelContext defined yet so cannot inject into: " + bean ) ; } else { contextAware . setCamelContext ( camelContext ) ; } } return bean ; } public Object postProcessAfterInitialization ( Object bean , String beanName ) throws BeansException { return bean ; } public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { this . applicationContext = applicationContext ; } public SpringCamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( SpringCamelContext camelContext ) { this . camelContext = camelContext ; } protected void injectFields ( final Object bean ) { ReflectionUtils . doWithFields ( bean . getClass ( ) , new ReflectionUtils . FieldCallback ( ) { public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { EndpointInject annotation = field . getAnnotation ( EndpointInject . class ) ; if ( annotation != null ) { ReflectionUtils . setField ( field , bean , getEndpointInjectionValue ( annotation , field . getType ( ) , field . getName ( ) ) ) ; } } } ) ; } protected void injectMethods ( final Object bean ) { ReflectionUtils . doWithMethods ( bean . getClass ( ) , new ReflectionUtils . MethodCallback ( ) { @ SuppressWarnings ( "unchecked" ) public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { setterInjection ( method , bean ) ; consumerInjection ( method , bean ) ; } } ) ; } protected void setterInjection ( Method method , Object bean ) { EndpointInject annoation = method . getAnnotation ( EndpointInject . class ) ; if ( annoation != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes != null ) { if ( parameterTypes . length != 1 ) { LOG . warn ( "Ignoring badly annotated method for injection due to incorrect number of parameters: " + method ) ; } else { String propertyName = ObjectHelper . getPropertyName ( method ) ; Object value = getEndpointInjectionValue ( annoation , parameterTypes [ 0 ] , propertyName ) ; ObjectHelper . invokeMethod ( method , bean , value ) ; } } } } protected void consumerInjection ( final Object bean ) { ReflectionUtils . doWithMethods ( bean . getClass ( ) , new ReflectionUtils . MethodCallback ( ) { @ SuppressWarnings ( "unchecked" ) public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { } } ) ; } protected void consumerInjection ( Method method , Object bean ) { MessageDriven annotation = method . getAnnotation ( MessageDriven . class ) ; if ( annotation != null ) { LOG . info ( "Creating a consumer for: " + annotation ) ; String injectionPointName = method . getName ( ) ; Endpoint endpoint = getEndpointInjection ( annotation . uri ( ) , annotation . name ( ) , injectionPointName ) ; if ( endpoint != null ) { try { Processor processor = createConsumerProcessor ( bean , method , endpoint ) ; LOG . info ( "Created processor: " + processor ) ; Consumer consumer = endpoint . createConsumer ( processor ) ; startService ( consumer ) ; } catch ( Exception e ) { LOG . warn ( e ) ; throw new RuntimeCamelException ( e ) ; } } } } protected void startService ( Service service ) throws Exception { camelContext . addService ( service ) ; } protected Processor createConsumerProcessor ( final Object pojo , final Method method , final Endpoint endpoint ) { BeanProcessor answer = new BeanProcessor ( pojo , getCamelContext ( ) ) ; answer . setMethodObject ( method ) ; return answer ; } protected Object getEndpointInjectionValue ( EndpointInject annotation , Class < ? > type , String injectionPointName ) { Endpoint endpoint = getEndpointInjection ( annotation . uri ( ) , annotation . name ( ) , injectionPointName ) ; if ( endpoint != null ) { if ( type . isInstance ( endpoint ) ) { return endpoint ; } else if ( type . isAssignableFrom ( Producer . class ) ) { return createInjectionProducer ( endpoint ) ; } else if ( type . isAssignableFrom ( DefaultProducerTemplate . class ) ) { return new DefaultProducerTemplate ( getCamelContext ( ) , endpoint ) ; } else if ( type . isAssignableFrom ( PollingConsumer . class ) ) { return createInjectionPollingConsumer ( endpoint ) ; } else { throw new IllegalArgumentException ( "Invalid type: " + type . getName ( ) + " which cannot be injected via @EndpointInject for " + endpoint ) ; } } return null ; } protected PollingConsumer createInjectionPollingConsumer ( Endpoint endpoint ) { try { PollingConsumer pollingConsumer = endpoint . createPollingConsumer ( ) ; startService ( pollingConsumer ) ; return pollingConsumer ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } protected Producer createInjectionProducer ( Endpoint endpoint ) { try { Producer producer = endpoint . createProducer ( ) ; startService ( producer ) ; return producer ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } protected Endpoint getEndpointInjection ( String uri , String name , String injectionPointName ) { Endpoint endpoint = null ; if ( isNotNullAndNonEmpty ( uri ) ) { endpoint = camelContext . getEndpoint ( uri ) ; } else { if ( isNullOrBlank ( name ) ) { name = injectionPointName ; } endpoint = ( Endpoint ) applicationContext . getBean ( name ) ; if ( endpoint == null ) { throw new NoSuchBeanDefinitionException ( name ) ; } } return endpoint ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . ObjectInput ; import java . io . ObjectInputStream ; import java . io . ObjectOutput ; import java . io . ObjectOutputStream ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Reader ; import java . io . StringReader ; import java . io . Writer ; import java . net . URL ; import java . util . Properties ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Converter ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class IOConverter { private static final transient Log LOG = LogFactory . getLog ( IOConverter . class ) ; private IOConverter ( ) { } @ Converter public static InputStream toInputStream ( URL url ) throws IOException { return url . openStream ( ) ; } @ Converter public static InputStream toInputStream ( File file ) throws FileNotFoundException { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } @ Converter public static BufferedReader toReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new FileReader ( file ) ) ; } @ Converter public static File toFile ( String name ) throws FileNotFoundException { return new File ( name ) ; } @ Converter public static OutputStream toOutputStream ( File file ) throws FileNotFoundException { return new BufferedOutputStream ( new FileOutputStream ( file ) ) ; } @ Converter public static BufferedWriter toWriter ( File file ) throws IOException { return new BufferedWriter ( new FileWriter ( file ) ) ; } @ Converter public static Reader toReader ( InputStream in ) throws FileNotFoundException { return new InputStreamReader ( in ) ; } @ Converter public static Writer toWriter ( OutputStream out ) throws FileNotFoundException { return new OutputStreamWriter ( out ) ; } @ Converter public static StringReader toReader ( String text ) { return new StringReader ( text ) ; } @ Converter public static InputStream toInputStream ( String text ) { return toInputStream ( text . getBytes ( ) ) ; } @ Converter public static InputStream toInputStream ( BufferedReader buffer ) throws IOException { return toInputStream ( toString ( buffer ) ) ; } @ Converter public static InputStream toInputStrean ( DOMSource source ) throws TransformerException , IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( toString ( source ) . getBytes ( ) ) ; return bais ; } @ Converter public static String toString ( byte [ ] data ) { return new String ( data ) ; } @ Converter public static String toString ( File file ) throws IOException { return toString ( toReader ( file ) ) ; } @ Converter public static String toString ( URL url ) throws IOException { return toString ( toInputStream ( url ) ) ; } @ Converter public static String toString ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toString ( ( BufferedReader ) reader ) ; } else { return toString ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } try { CollectionStringBuffer builder = new CollectionStringBuffer ( "\n" ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { return builder . toString ( ) ; } builder . append ( line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } } @ Converter public static String toString ( InputStream in ) throws IOException { return toString ( toReader ( in ) ) ; } public static String toString ( Source source ) throws TransformerException , IOException { return toString ( source , null ) ; } public static String toString ( Source source , Properties props ) throws TransformerException , IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; StreamResult sr = new StreamResult ( bos ) ; Transformer trans = TransformerFactory . newInstance ( ) . newTransformer ( ) ; if ( props == null ) { props = new Properties ( ) ; props . put ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; } trans . setOutputProperties ( props ) ; trans . transform ( source , sr ) ; bos . close ( ) ; return bos . toString ( ) ; } @ Converter public static InputStream toInputStream ( byte [ ] data ) { return new ByteArrayInputStream ( data ) ; } @ Converter public static ObjectOutput toObjectOutput ( OutputStream stream ) throws IOException { if ( stream instanceof ObjectOutput ) { return ( ObjectOutput ) stream ; } else { return new ObjectOutputStream ( stream ) ; } } @ Converter public static ObjectInput toObjectInput ( InputStream stream ) throws IOException { if ( stream instanceof ObjectInput ) { return ( ObjectInput ) stream ; } else { return new ObjectInputStream ( stream ) ; } } @ Converter public static byte [ ] toBytes ( InputStream stream ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; copy ( stream , bos ) ; return bos . toByteArray ( ) ; } protected static void copy ( InputStream stream , ByteArrayOutputStream bos ) throws IOException { byte [ ] data = new byte [ 4096 ] ; int read = stream . read ( data ) ; while ( read != - 1 ) { bos . write ( data , 0 , read ) ; read = stream . read ( data ) ; } bos . flush ( ) ; } } 	1
package org . apache . camel . component . cxf . feature ; import java . util . logging . Logger ; import org . apache . camel . component . cxf . interceptors . FaultOutInterceptor ; import org . apache . camel . component . cxf . interceptors . RawMessageContentRedirectInterceptor ; import org . apache . cxf . Bus ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . endpoint . Client ; import org . apache . cxf . endpoint . Server ; import org . apache . cxf . phase . Phase ; public class MessageDataFormatFeature extends AbstractDataFormatFeature { private static final Logger LOG = LogUtils . getL7dLogger ( MessageDataFormatFeature . class ) ; private static final String [ ] REMAINING_IN_PHASES = { Phase . RECEIVE , Phase . POST_INVOKE } ; private static final String [ ] REMAINING_OUT_PHASES = { Phase . PREPARE_SEND , Phase . WRITE , Phase . SEND , Phase . PREPARE_SEND_ENDING } ; @ Override public void initialize ( Client client , Bus bus ) { removeInterceptorWhichIsOutThePhases ( client . getInInterceptors ( ) , REMAINING_IN_PHASES ) ; removeInterceptorWhichIsOutThePhases ( client . getEndpoint ( ) . getInInterceptors ( ) , REMAINING_IN_PHASES ) ; client . getEndpoint ( ) . getBinding ( ) . getInInterceptors ( ) . clear ( ) ; removeInterceptorWhichIsOutThePhases ( client . getOutInterceptors ( ) , REMAINING_OUT_PHASES ) ; removeInterceptorWhichIsOutThePhases ( client . getEndpoint ( ) . getOutInterceptors ( ) , REMAINING_OUT_PHASES ) ; client . getEndpoint ( ) . getBinding ( ) . getOutInterceptors ( ) . clear ( ) ; client . getEndpoint ( ) . getOutInterceptors ( ) . add ( new RawMessageContentRedirectInterceptor ( ) ) ; client . getEndpoint ( ) . getBinding ( ) . getOutFaultInterceptors ( ) . add ( new FaultOutInterceptor ( ) ) ; } @ Override public void initialize ( Server server , Bus bus ) { removeInterceptorWhichIsOutThePhases ( server . getEndpoint ( ) . getService ( ) . getInInterceptors ( ) , REMAINING_IN_PHASES ) ; removeInterceptorWhichIsOutThePhases ( server . getEndpoint ( ) . getInInterceptors ( ) , REMAINING_IN_PHASES ) ; server . getEndpoint ( ) . getBinding ( ) . getInInterceptors ( ) . clear ( ) ; removeInterceptorWhichIsOutThePhases ( server . getEndpoint ( ) . getService ( ) . getOutInterceptors ( ) , REMAINING_OUT_PHASES ) ; removeInterceptorWhichIsOutThePhases ( server . getEndpoint ( ) . getOutInterceptors ( ) , REMAINING_OUT_PHASES ) ; server . getEndpoint ( ) . getBinding ( ) . getOutInterceptors ( ) . clear ( ) ; server . getEndpoint ( ) . getBinding ( ) . getOutFaultInterceptors ( ) . add ( new FaultOutInterceptor ( ) ) ; resetServiceInvokerInterceptor ( server ) ; server . getEndpoint ( ) . getOutInterceptors ( ) . add ( new RawMessageContentRedirectInterceptor ( ) ) ; } @ Override protected Logger getLogger ( ) { return LOG ; } } 	0
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; public interface RouteContext { Endpoint < ? extends Exchange > getEndpoint ( ) ; FromType getFrom ( ) ; RouteType getRoute ( ) ; CamelContext getCamelContext ( ) ; Processor createProcessor ( ProcessorType node ) throws Exception ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) ; < T > T lookup ( String name , Class < T > type ) ; void commit ( ) ; void addEventDrivenProcessor ( Processor processor ) ; void intercept ( Intercept interceptor ) ; Processor createProceedProcessor ( ) ; List < InterceptStrategy > getInterceptStrategies ( ) ; void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) ; void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) ; void setIsRouteAdded ( boolean value ) ; boolean isRouteAdded ( ) ; } 	1
package org . apache . camel . spring ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . model . IdentifiedType ; @ XmlRootElement ( name = "export" ) public class CamelServiceExporterType extends IdentifiedType { @ XmlAttribute private String uri ; @ XmlAttribute private String serviceRef ; @ XmlAttribute private Class serviceInterface ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class Throttler extends DelayProcessorSupport { private long maximumRequestsPerPeriod ; private long timePeriodMillis ; private long startTimeMillis ; private long requestCount ; public Throttler ( Processor processor , long maximumRequestsPerPeriod ) { this ( processor , maximumRequestsPerPeriod , 1000 ) ; } public Throttler ( Processor processor , long maximumRequestsPerPeriod , long timePeriodMillis ) { super ( processor ) ; this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; this . timePeriodMillis = timePeriodMillis ; } @ Override public String toString ( ) { return "Throttler[requests: " + maximumRequestsPerPeriod + " per: " + timePeriodMillis + " (ms) to: " + getProcessor ( ) + "]" ; } public long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } public long getRequestCount ( ) { return requestCount ; } public long getStartTimeMillis ( ) { return startTimeMillis ; } protected void delay ( Exchange exchange ) throws Exception { long now = currentSystemTime ( ) ; if ( startTimeMillis == 0 ) { startTimeMillis = now ; } if ( now - startTimeMillis > timePeriodMillis ) { requestCount = 1 ; startTimeMillis = now ; } else { if ( ++ requestCount > maximumRequestsPerPeriod ) { long time = startTimeMillis + timePeriodMillis ; waitUntil ( time , exchange ) ; } } } } 	1
package org . apache . camel . component . rmi ; import java . rmi . NotBoundException ; import java . rmi . RemoteException ; import org . apache . camel . Exchange ; import org . apache . camel . component . bean . BeanExchange ; import org . apache . camel . component . bean . BeanHolder ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . impl . DefaultProducer ; public class RmiProducer extends DefaultProducer < BeanExchange > { private BeanProcessor beanProcessor ; public RmiProducer ( RmiEndpoint endpoint ) throws RemoteException , NotBoundException { super ( endpoint ) ; BeanHolder holder = new RmiRegistryBean ( endpoint . getCamelContext ( ) , endpoint . getName ( ) , endpoint . getRegistry ( ) ) ; beanProcessor = new BeanProcessor ( holder ) ; String method = endpoint . getMethod ( ) ; if ( method != null ) { beanProcessor . setMethod ( method ) ; } } public void process ( Exchange exchange ) throws Exception { beanProcessor . process ( exchange ) ; } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "jaxb" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class JaxbDataFormat extends DataFormatType { @ XmlAttribute ( required = true ) private String contextPath ; @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public JaxbDataFormat ( ) { super ( "org.apache.camel.converter.jaxb.JaxbDataFormat" ) ; } public JaxbDataFormat ( boolean prettyPrint ) { this ( ) ; setPrettyPrint ( prettyPrint ) ; } public String getContextPath ( ) { return contextPath ; } public void setContextPath ( String contextPath ) { this . contextPath = contextPath ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } @ Override protected void configureDataFormat ( DataFormat dataFormat ) { Boolean answer = ObjectHelper . toBoolean ( getPrettyPrint ( ) ) ; if ( answer != null && answer . booleanValue ( ) ) { setProperty ( dataFormat , "prettyPrint" , Boolean . TRUE ) ; } setProperty ( dataFormat , "contextPath" , contextPath ) ; } } 	1
package org . apache . camel . model ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Intercept ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "intercept" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class InterceptType extends OutputType < ProcessorType > { @ XmlTransient private ProceedType proceed = new ProceedType ( ) ; @ XmlTransient private Boolean stop = Boolean . FALSE ; @ XmlTransient private Boolean usePredicate = Boolean . FALSE ; @ Override public String toString ( ) { return "Intercept[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "intercept" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Interceptor interceptor = new Interceptor ( ) ; routeContext . intercept ( interceptor ) ; final Processor interceptRoute = createOutputsProcessor ( routeContext ) ; interceptor . setInterceptorLogic ( interceptRoute ) ; return interceptor ; } public ChoiceType when ( Predicate predicate ) { usePredicate = Boolean . TRUE ; ChoiceType choice = choice ( ) . when ( PredicateBuilder . not ( predicate ) ) ; choice . addOutput ( proceed ) ; return choice . otherwise ( ) ; } public ProceedType getProceed ( ) { return proceed ; } public void stopIntercept ( ) { stop = Boolean . TRUE ; } public InterceptType createProxy ( ) { InterceptType answer = new InterceptType ( ) ; answer . getOutputs ( ) . addAll ( this . getOutputs ( ) ) ; if ( answer . getOutputs ( ) . size ( ) > 0 ) { ChoiceType choice = null ; for ( ProcessorType processor : answer . getOutputs ( ) ) { if ( processor instanceof ChoiceType ) { choice = ( ChoiceType ) processor ; if ( usePredicate . booleanValue ( ) && stop . booleanValue ( ) ) { WhenType when = choice . getWhenClauses ( ) . get ( 0 ) ; when . getOutputs ( ) . remove ( this . getProceed ( ) ) ; } addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , choice . getWhenClauses ( ) . get ( choice . getWhenClauses ( ) . size ( ) - 1 ) , usePredicate . booleanValue ( ) && ! stop . booleanValue ( ) ) ; addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , choice . getOtherwise ( ) , ! stop . booleanValue ( ) ) ; if ( stop . booleanValue ( ) ) { addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , choice . getWhenClauses ( ) . get ( choice . getWhenClauses ( ) . size ( ) - 1 ) , usePredicate . booleanValue ( ) ) ; } break ; } } if ( choice == null ) { addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , answer , ! stop . booleanValue ( ) ) ; } } return answer ; } private void addProceedProxy ( ProceedType orig , ProceedType proxy , ProcessorType < ? > processor , boolean force ) { int index = processor . getOutputs ( ) . indexOf ( orig ) ; if ( index >= 0 ) { processor . addOutput ( proxy ) ; List < ProcessorType < ? > > outs = processor . getOutputs ( ) ; outs . remove ( proxy ) ; outs . set ( index , proxy ) ; } else if ( force ) { processor . addOutput ( proxy ) ; } } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . util . Properties ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . file . strategy . FileProcessStrategySupport ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileEndpoint extends ScheduledPollEndpoint < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileEndpoint . class ) ; private static final String DEFAULT_STRATEGYFACTORY_CLASS = "org.apache.camel.component.file.strategy.FileProcessStrategyFactory" ; private File file ; private FileProcessStrategy fileProcessStrategy ; private boolean autoCreate = true ; private boolean lock = true ; private boolean delete ; private boolean noop ; private boolean append = true ; private String moveNamePrefix ; private String moveNamePostfix ; private String [ ] excludedNamePrefixes = { "." } ; private String [ ] excludedNamePostfixes = { FileProcessStrategySupport . DEFAULT_LOCK_FILE_POSTFIX } ; private int bufferSize = 128 * 1024 ; private boolean ignoreFileNameHeader ; protected FileEndpoint ( File file , String endpointUri , FileComponent component ) { super ( endpointUri , component ) ; this . file = file ; } public FileEndpoint ( String endpointUri , File file ) { super ( endpointUri ) ; this . file = file ; } public FileEndpoint ( File file ) { this . file = file ; } public FileEndpoint ( ) { } public Producer < FileExchange > createProducer ( ) throws Exception { Producer < FileExchange > result = new FileProducer ( this ) ; return result ; } public Consumer < FileExchange > createConsumer ( Processor processor ) throws Exception { Consumer < FileExchange > result = new FileConsumer ( this , processor ) ; configureConsumer ( result ) ; return result ; } public FileExchange createExchange ( File file ) { return new FileExchange ( getCamelContext ( ) , getExchangePattern ( ) , file ) ; } @ Override public FileExchange createExchange ( ) { return createExchange ( getFile ( ) ) ; } @ Override public FileExchange createExchange ( ExchangePattern pattern ) { return new FileExchange ( getCamelContext ( ) , pattern , file ) ; } public String getGeneratedFileName ( Message message ) { return getFileFriendlyMessageId ( message . getMessageId ( ) ) ; } public void configureMessage ( File file , Message message ) { message . setBody ( file ) ; String relativePath = file . getPath ( ) . substring ( getFile ( ) . getPath ( ) . length ( ) ) ; if ( relativePath . startsWith ( File . separator ) || relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } message . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } public File getFile ( ) { ObjectHelper . notNull ( file , "file" ) ; if ( autoCreate && ! file . exists ( ) ) { file . mkdirs ( ) ; } return file ; } public void setFile ( File file ) { this . file = file ; } public boolean isSingleton ( ) { return true ; } public boolean isAutoCreate ( ) { return this . autoCreate ; } public void setAutoCreate ( boolean autoCreate ) { this . autoCreate = autoCreate ; } public FileProcessStrategy getFileStrategy ( ) { if ( fileProcessStrategy == null ) { fileProcessStrategy = createFileStrategy ( ) ; LOG . debug ( "Using file process strategy: " + fileProcessStrategy ) ; } return fileProcessStrategy ; } public void setFileStrategy ( FileProcessStrategy fileProcessStrategy ) { this . fileProcessStrategy = fileProcessStrategy ; } public boolean isDelete ( ) { return delete ; } public void setDelete ( boolean delete ) { this . delete = delete ; } public boolean isLock ( ) { return lock ; } public void setLock ( boolean lock ) { this . lock = lock ; } public String getMoveNamePostfix ( ) { return moveNamePostfix ; } public void setMoveNamePostfix ( String moveNamePostfix ) { this . moveNamePostfix = moveNamePostfix ; } public String getMoveNamePrefix ( ) { return moveNamePrefix ; } public void setMoveNamePrefix ( String moveNamePrefix ) { this . moveNamePrefix = moveNamePrefix ; } public String [ ] getExcludedNamePrefixes ( ) { return excludedNamePrefixes ; } public void setExcludedNamePrefixes ( String [ ] excludedNamePrefixes ) { this . excludedNamePrefixes = excludedNamePrefixes ; } public String [ ] getExcludedNamePostfixes ( ) { return excludedNamePostfixes ; } public void setExcludedNamePostfixes ( String [ ] excludedNamePostfixes ) { this . excludedNamePostfixes = excludedNamePostfixes ; } public boolean isNoop ( ) { return noop ; } public void setNoop ( boolean noop ) { this . noop = noop ; } public boolean isAppend ( ) { return append ; } public void setAppend ( boolean append ) { this . append = append ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public boolean isIgnoreFileNameHeader ( ) { return ignoreFileNameHeader ; } public void setIgnoreFileNameHeader ( boolean ignoreFileNameHeader ) { this . ignoreFileNameHeader = ignoreFileNameHeader ; } protected FileProcessStrategy createFileStrategy ( ) { Class < ? > factory = null ; try { FactoryFinder finder = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; factory = finder . findClass ( "file" , "strategy.factory." ) ; } catch ( ClassNotFoundException e ) { LOG . debug ( "'strategy.factory.class' not found" , e ) ; } catch ( IOException e ) { LOG . debug ( "No strategy factory defined in 'META-INF/services/org/apache/camel/component/file'" , e ) ; } if ( factory == null ) { factory = ObjectHelper . loadClass ( DEFAULT_STRATEGYFACTORY_CLASS ) ; if ( factory == null ) { throw new TypeNotPresentException ( "FileProcessStrategyFactory class not found" , null ) ; } } try { Method factoryMethod = factory . getMethod ( "createFileProcessStrategy" , Properties . class ) ; return ( FileProcessStrategy ) ObjectHelper . invokeMethod ( factoryMethod , null , getParamsAsProperties ( ) ) ; } catch ( NoSuchMethodException e ) { throw new TypeNotPresentException ( factory . getSimpleName ( ) + ".createFileProcessStrategy(Properties params) method not found" , e ) ; } } protected Properties getParamsAsProperties ( ) { Properties params = new Properties ( ) ; if ( isNoop ( ) ) { params . setProperty ( "noop" , Boolean . toString ( true ) ) ; } if ( isDelete ( ) ) { params . setProperty ( "delete" , Boolean . toString ( true ) ) ; } if ( isAppend ( ) ) { params . setProperty ( "append" , Boolean . toString ( true ) ) ; } if ( isLock ( ) ) { params . setProperty ( "lock" , Boolean . toString ( true ) ) ; } if ( moveNamePrefix != null ) { params . setProperty ( "moveNamePrefix" , moveNamePrefix ) ; } if ( moveNamePostfix != null ) { params . setProperty ( "moveNamePostfix" , moveNamePostfix ) ; } return params ; } @ Override protected String createEndpointUri ( ) { return "file://" + getFile ( ) . getAbsolutePath ( ) ; } protected String getFileFriendlyMessageId ( String id ) { return UuidGenerator . generateSanitizedId ( id ) ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ExchangeConverter ; public class DefaultExchangeConverter implements ExchangeConverter { public < T > T convertTo ( Class < T > type , Exchange exchange ) { throw new UnsupportedOperationException ( "Not implemented yet" ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Delayer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "delayer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DelayerType extends ExpressionNode { private Long delay = 0L ; public DelayerType ( ) { } public DelayerType ( Expression processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( ExpressionType processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( Expression processAtExpression , long delay ) { super ( processAtExpression ) ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "delayer" ; } public Long getDelay ( ) { return delay ; } public void setDelay ( Long delay ) { this . delay = delay ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; Expression processAtExpression = getExpression ( ) != null ? getExpression ( ) . createExpression ( routeContext ) : null ; return new Delayer ( childProcessor , processAtExpression , delay ) ; } } 	1
package org . apache . camel . component . jms ; public enum ConsumerType { Simple , Default , ServerSessionPool } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RenameFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( RenameFileProcessStrategy . class ) ; private FileRenamer renamer ; public RenameFileProcessStrategy ( ) { this ( true ) ; } public RenameFileProcessStrategy ( boolean lock ) { this ( lock , ".camel/" , "" ) ; } public RenameFileProcessStrategy ( boolean lock , String namePrefix , String namePostfix ) { this ( lock , new DefaultFileRenamer ( namePrefix , namePostfix ) ) ; } public RenameFileProcessStrategy ( boolean lock , FileRenamer renamer ) { super ( lock ) ; this . renamer = renamer ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { File newName = renamer . renameFile ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Renaming file: " + file + " to: " + newName ) ; } if ( newName . exists ( ) ) { newName . delete ( ) ; } newName . getParentFile ( ) . mkdirs ( ) ; boolean renamed = file . renameTo ( newName ) ; if ( ! renamed ) { LOG . warn ( "Could not rename file from: " + file + " to " + newName ) ; } super . commit ( endpoint , exchange , file ) ; } public FileRenamer getRenamer ( ) { return renamer ; } public void setRenamer ( FileRenamer renamer ) { this . renamer = renamer ; } } 	1
package org . apache . camel . component . irc ; import org . apache . commons . logging . Log ; import org . schwering . irc . lib . IRCEventAdapter ; import org . schwering . irc . lib . IRCModeParser ; import org . schwering . irc . lib . IRCUser ; public class IrcErrorLogger extends IRCEventAdapter { private Log log ; public IrcErrorLogger ( Log log ) { this . log = log ; } @ Override public void onRegistered ( ) { super . onRegistered ( ) ; log . info ( "onRegistered" ) ; } @ Override public void onDisconnected ( ) { super . onDisconnected ( ) ; log . info ( "onDisconnected" ) ; } @ Override public void onMode ( String string , IRCUser ircUser , IRCModeParser ircModeParser ) { super . onMode ( string , ircUser , ircModeParser ) ; log . info ( "onMode.string = " + string ) ; log . info ( "onMode.ircUser = " + ircUser ) ; log . info ( "onMode.ircModeParser = " + ircModeParser ) ; } @ Override public void onMode ( IRCUser ircUser , String string , String string1 ) { super . onMode ( ircUser , string , string1 ) ; log . info ( "onMode.ircUser = " + ircUser ) ; log . info ( "onMode.string = " + string ) ; log . info ( "onMode.string1 = " + string1 ) ; } @ Override public void onPing ( String string ) { super . onPing ( string ) ; log . info ( "onPing.string = " + string ) ; } @ Override public void onError ( String string ) { log . info ( "onError.string = " + string ) ; } @ Override public void onError ( int i , String string ) { super . onError ( i , string ) ; log . error ( "onError.i = " + i ) ; log . error ( "onError.string = " + string ) ; } @ Override public void unknown ( String string , String string1 , String string2 , String string3 ) { super . unknown ( string , string1 , string2 , string3 ) ; log . error ( "unknown.string = " + string ) ; log . error ( "unknown.string1 = " + string1 ) ; log . error ( "unknown.string2 = " + string2 ) ; log . error ( "unknown.string3 = " + string3 ) ; } } 	0
package org . apache . camel . processor . validation ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import javax . xml . XMLConstants ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . validation . Schema ; import javax . xml . validation . SchemaFactory ; import javax . xml . validation . Validator ; import org . xml . sax . SAXException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class ValidatingProcessor implements Processor { private Schema schema ; private ValidatorErrorHandler errorHandler = new DefaultValidationErrorHandler ( ) ; private String schemaLanguage = XMLConstants . W3C_XML_SCHEMA_NS_URI ; private Source schemaSource ; private SchemaFactory schemaFactory ; private URL schemaUrl ; private File schemaFile ; public void process ( Exchange exchange ) throws Exception { Schema schema = getSchema ( ) ; Validator validator = schema . newValidator ( ) ; Source source = exchange . getIn ( ) . getBody ( DOMSource . class ) ; if ( source == null ) { throw new NoXmlBodyValidationException ( exchange ) ; } errorHandler . reset ( ) ; validator . setErrorHandler ( errorHandler ) ; DOMResult result = new DOMResult ( ) ; validator . validate ( source , result ) ; errorHandler . handleErrors ( exchange , schema , result ) ; } public Schema getSchema ( ) throws IOException , SAXException { if ( schema == null ) { schema = createSchema ( ) ; } return schema ; } public void setSchema ( Schema schema ) { this . schema = schema ; } public String getSchemaLanguage ( ) { return schemaLanguage ; } public void setSchemaLanguage ( String schemaLanguage ) { this . schemaLanguage = schemaLanguage ; } public Source getSchemaSource ( ) throws IOException { if ( schemaSource == null ) { schemaSource = createSchemaSource ( ) ; } return schemaSource ; } public void setSchemaSource ( Source schemaSource ) { this . schemaSource = schemaSource ; } public URL getSchemaUrl ( ) { return schemaUrl ; } public void setSchemaUrl ( URL schemaUrl ) { this . schemaUrl = schemaUrl ; } public File getSchemaFile ( ) { return schemaFile ; } public void setSchemaFile ( File schemaFile ) { this . schemaFile = schemaFile ; } public SchemaFactory getSchemaFactory ( ) { if ( schemaFactory == null ) { schemaFactory = createSchemaFactory ( ) ; } return schemaFactory ; } public void setSchemaFactory ( SchemaFactory schemaFactory ) { this . schemaFactory = schemaFactory ; } public ValidatorErrorHandler getErrorHandler ( ) { return errorHandler ; } public void setErrorHandler ( ValidatorErrorHandler errorHandler ) { this . errorHandler = errorHandler ; } protected SchemaFactory createSchemaFactory ( ) { return SchemaFactory . newInstance ( schemaLanguage ) ; } protected Source createSchemaSource ( ) throws IOException { throw new IllegalArgumentException ( "You must specify a schema, " + "schemaFile, schemaSource or schemaUrl property" ) ; } protected Schema createSchema ( ) throws SAXException , IOException { SchemaFactory factory = getSchemaFactory ( ) ; URL url = getSchemaUrl ( ) ; if ( url != null ) { return factory . newSchema ( url ) ; } File file = getSchemaFile ( ) ; if ( file != null ) { return factory . newSchema ( file ) ; } return factory . newSchema ( getSchemaSource ( ) ) ; } } 	1
package org . apache . camel . component . cxf . transport ; import java . io . IOException ; import java . io . OutputStream ; import java . util . List ; import java . util . Map ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . component . cxf . CxfConstants ; import org . apache . camel . component . cxf . CxfSoapBinding ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . cxf . Bus ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . configuration . Configurable ; import org . apache . cxf . configuration . Configurer ; import org . apache . cxf . helpers . CastUtils ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . message . Message ; import org . apache . cxf . service . Service ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . transport . AbstractConduit ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . Destination ; import org . apache . cxf . transport . MessageObserver ; import org . apache . cxf . ws . addressing . EndpointReferenceType ; public class CamelConduit extends AbstractConduit implements Configurable { protected static final String BASE_BEAN_NAME_SUFFIX = ".camel-conduit" ; private static final Logger LOG = LogUtils . getL7dLogger ( CamelConduit . class ) ; private CamelContext camelContext ; private EndpointInfo endpointInfo ; private String targetCamelEndpointUri ; private ProducerTemplate < Exchange > camelTemplate ; private Bus bus ; public CamelConduit ( CamelContext context , Bus b , EndpointInfo endpointInfo ) { this ( context , b , endpointInfo , null ) ; } public CamelConduit ( CamelContext context , Bus b , EndpointInfo epInfo , EndpointReferenceType targetReference ) { super ( targetReference ) ; String address = epInfo . getAddress ( ) ; if ( address != null ) { targetCamelEndpointUri = address . substring ( CxfConstants . CAMEL_TRANSPORT_PREFIX . length ( ) ) ; if ( targetCamelEndpointUri . startsWith ( "//" ) ) { targetCamelEndpointUri = targetCamelEndpointUri . substring ( 2 ) ; } } camelContext = context ; endpointInfo = epInfo ; bus = b ; initConfig ( ) ; } public void setCamelContext ( CamelContext context ) { camelContext = context ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void prepare ( Message message ) throws IOException { getLogger ( ) . log ( Level . FINE , "CamelConduit send message" ) ; message . setContent ( OutputStream . class , new CamelOutputStream ( message ) ) ; } public void close ( ) { getLogger ( ) . log ( Level . FINE , "CamelConduit closed " ) ; } protected Logger getLogger ( ) { return LOG ; } public String getBeanName ( ) { if ( endpointInfo == null || endpointInfo . getName ( ) == null ) { return "default" + BASE_BEAN_NAME_SUFFIX ; } return endpointInfo . getName ( ) . toString ( ) + BASE_BEAN_NAME_SUFFIX ; } private void initConfig ( ) { if ( bus != null ) { Configurer configurer = bus . getExtension ( Configurer . class ) ; if ( null != configurer ) { configurer . configureBean ( this ) ; } } } public ProducerTemplate < Exchange > getCamelTemplate ( ) { if ( camelTemplate == null ) { CamelContext ctx = camelContext != null ? camelContext : new DefaultCamelContext ( ) ; camelTemplate = ctx . createProducerTemplate ( ) ; } return camelTemplate ; } public void setCamelTemplate ( ProducerTemplate < Exchange > template ) { camelTemplate = template ; } private class CamelOutputStream extends CachedOutputStream { private Message outMessage ; private boolean isOneWay ; public CamelOutputStream ( Message m ) { outMessage = m ; } protected void doFlush ( ) throws IOException { } protected void doClose ( ) throws IOException { isOneWay = outMessage . getExchange ( ) . isOneWay ( ) ; commitOutputMessage ( ) ; } protected void onWrite ( ) throws IOException { } private void commitOutputMessage ( ) { ExchangePattern pattern ; if ( isOneWay ) { pattern = ExchangePattern . InOnly ; } else { pattern = ExchangePattern . InOut ; } getLogger ( ) . log ( Level . FINE , "send the message to endpoint" + targetCamelEndpointUri ) ; org . apache . camel . Exchange exchange = getCamelTemplate ( ) . send ( targetCamelEndpointUri , pattern , new Processor ( ) { public void process ( org . apache . camel . Exchange ex ) throws IOException { CachedOutputStream outputStream = ( CachedOutputStream ) outMessage . getContent ( OutputStream . class ) ; Map < String , List < String > > protocolHeader = CastUtils . cast ( ( Map < ? , ? > ) outMessage . get ( Message . PROTOCOL_HEADERS ) ) ; CxfSoapBinding . setProtocolHeader ( ex . getIn ( ) . getHeaders ( ) , protocolHeader ) ; ex . getIn ( ) . setBody ( outputStream . getBytes ( ) ) ; getLogger ( ) . log ( Level . FINE , "template sending request: " , ex . getIn ( ) ) ; } } ) ; exchange . setProperty ( CxfConstants . CXF_EXCHANGE , outMessage . getExchange ( ) ) ; if ( ! isOneWay ) { handleResponse ( exchange ) ; } } private void handleResponse ( org . apache . camel . Exchange exchange ) { org . apache . cxf . message . Message inMessage = CxfSoapBinding . getCxfInMessage ( exchange , true ) ; incomingObserver . onMessage ( inMessage ) ; } } protected class DecoupledDestination implements Destination { protected MessageObserver decoupledMessageObserver ; private EndpointReferenceType address ; DecoupledDestination ( EndpointReferenceType ref , MessageObserver incomingObserver ) { address = ref ; decoupledMessageObserver = incomingObserver ; } public EndpointReferenceType getAddress ( ) { return address ; } public Conduit getBackChannel ( Message inMessage , Message partialResponse , EndpointReferenceType addr ) throws IOException { return null ; } public void shutdown ( ) { } public synchronized void setMessageObserver ( MessageObserver observer ) { decoupledMessageObserver = observer ; } public synchronized MessageObserver getMessageObserver ( ) { return decoupledMessageObserver ; } } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileConsumer extends ScheduledPollConsumer < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileConsumer . class ) ; private FileEndpoint endpoint ; private ConcurrentHashMap < File , File > filesBeingProcessed = new ConcurrentHashMap < File , File > ( ) ; private ConcurrentHashMap < File , Long > fileSizes = new ConcurrentHashMap < File , Long > ( ) ; private ConcurrentHashMap < File , Long > noopMap = new ConcurrentHashMap < File , Long > ( ) ; private boolean generateEmptyExchangeWhenIdle ; private boolean recursive = true ; private String regexPattern = "" ; private long lastPollTime ; private int unchangedDelay ; private boolean unchangedSize ; public FileConsumer ( final FileEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } protected synchronized void poll ( ) throws Exception { int rc = pollFileOrDirectory ( endpoint . getFile ( ) , isRecursive ( ) ) ; if ( rc == 0 && generateEmptyExchangeWhenIdle ) { final FileExchange exchange = endpoint . createExchange ( ( File ) null ) ; getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } lastPollTime = System . currentTimeMillis ( ) ; } protected int pollFileOrDirectory ( File fileOrDirectory , boolean processDir ) { if ( ! fileOrDirectory . isDirectory ( ) ) { return pollFile ( fileOrDirectory ) ; } else if ( processDir ) { int rc = 0 ; if ( isValidFile ( fileOrDirectory ) ) { LOG . debug ( "Polling directory " + fileOrDirectory ) ; File [ ] files = fileOrDirectory . listFiles ( ) ; for ( File file : files ) { rc += pollFileOrDirectory ( file , isRecursive ( ) ) ; } } return rc ; } else { LOG . debug ( "Skipping directory " + fileOrDirectory ) ; return 0 ; } } protected int pollFile ( final File file ) { if ( ! file . exists ( ) ) { return 0 ; } if ( ! isValidFile ( file ) ) { return 0 ; } if ( ! endpoint . isNoop ( ) ) { if ( filesBeingProcessed . contains ( file ) ) { return 1 ; } filesBeingProcessed . put ( file , file ) ; } final FileProcessStrategy processStrategy = endpoint . getFileStrategy ( ) ; final FileExchange exchange = endpoint . createExchange ( file ) ; endpoint . configureMessage ( file , exchange . getIn ( ) ) ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to process file: " + file + " using exchange: " + exchange ) ; } if ( processStrategy . begin ( endpoint , exchange , file ) ) { getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { boolean failed = exchange . isFailed ( ) ; boolean handled = DeadLetterChannel . isFailureHandled ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Done processing file: " + file + ". Status is: " + ( failed ? "failed: " + failed + ", handled by failure processor: " + handled : "OK" ) ) ; } if ( ! failed || handled ) { processStrategyCommit ( processStrategy , exchange , file , handled ) ; } else if ( failed && ! handled ) { handleException ( exchange . getException ( ) ) ; } filesBeingProcessed . remove ( file ) ; } } ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " cannot process file: " + file ) ; } } } catch ( Throwable e ) { handleException ( e ) ; } return 1 ; } protected void processStrategyCommit ( FileProcessStrategy processStrategy , FileExchange exchange , File file , boolean failureHandled ) { try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Committing file strategy: " + processStrategy + " for file: " + file + ( failureHandled ? " that was handled by the failure processor." : "" ) ) ; } processStrategy . commit ( endpoint , exchange , file ) ; } catch ( Exception e ) { LOG . warn ( "Error committing file strategy: " + processStrategy , e ) ; handleException ( e ) ; } } protected boolean isValidFile ( File file ) { boolean result = false ; if ( file != null && file . exists ( ) ) { if ( isMatched ( file ) && isChanged ( file ) ) { result = true ; } } return result ; } protected boolean isChanged ( File file ) { if ( file == null ) { return false ; } else if ( file . isDirectory ( ) ) { return true ; } else { boolean lastModifiedCheck = false ; long modifiedDuration = 0 ; if ( getUnchangedDelay ( ) > 0 ) { modifiedDuration = System . currentTimeMillis ( ) - file . lastModified ( ) ; lastModifiedCheck = modifiedDuration >= getUnchangedDelay ( ) ; } long fileModified = file . lastModified ( ) ; Long previousModified = noopMap . get ( file ) ; noopMap . put ( file , fileModified ) ; if ( previousModified == null || fileModified > previousModified ) { lastModifiedCheck = true ; } boolean sizeCheck = false ; long sizeDifference = 0 ; if ( isUnchangedSize ( ) ) { Long value = fileSizes . get ( file ) ; if ( value == null ) { sizeCheck = true ; } else { sizeCheck = file . length ( ) != value ; } } boolean answer = lastModifiedCheck || sizeCheck ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "file:" + file + " isChanged:" + answer + " " + "sizeCheck:" + sizeCheck + "(" + sizeDifference + ") " + "lastModifiedCheck:" + lastModifiedCheck + "(" + modifiedDuration + ")" ) ; } if ( isUnchangedSize ( ) ) { if ( answer ) { fileSizes . put ( file , file . length ( ) ) ; } else { fileSizes . remove ( file ) ; } } return answer ; } } protected boolean isMatched ( File file ) { String name = file . getName ( ) ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { if ( ! name . matches ( getRegexPattern ( ) ) ) { return false ; } } String [ ] prefixes = endpoint . getExcludedNamePrefixes ( ) ; if ( prefixes != null ) { for ( String prefix : prefixes ) { if ( name . startsWith ( prefix ) ) { return false ; } } } String [ ] postfixes = endpoint . getExcludedNamePostfixes ( ) ; if ( postfixes != null ) { for ( String postfix : postfixes ) { if ( name . endsWith ( postfix ) ) { return false ; } } } return true ; } public boolean isRecursive ( ) { return this . recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public String getRegexPattern ( ) { return this . regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isGenerateEmptyExchangeWhenIdle ( ) { return generateEmptyExchangeWhenIdle ; } public void setGenerateEmptyExchangeWhenIdle ( boolean generateEmptyExchangeWhenIdle ) { this . generateEmptyExchangeWhenIdle = generateEmptyExchangeWhenIdle ; } public int getUnchangedDelay ( ) { return unchangedDelay ; } public void setUnchangedDelay ( int unchangedDelay ) { this . unchangedDelay = unchangedDelay ; } public boolean isUnchangedSize ( ) { return unchangedSize ; } public void setUnchangedSize ( boolean unchangedSize ) { this . unchangedSize = unchangedSize ; } } 	1
package org . apache . camel . component . xmpp ; import org . jivesoftware . smack . XMPPException ; public class RuntimeXmppException extends RuntimeException { private static final long serialVersionUID = - 2141493732308871761L ; public RuntimeXmppException ( XMPPException cause ) { super ( cause ) ; } public RuntimeXmppException ( String message , XMPPException cause ) { super ( message , cause ) ; } } 	0
package org . apache . camel . impl ; import java . net . URI ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import java . util . concurrent . ThreadFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . URISupport ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DefaultComponent < E extends Exchange > extends ServiceSupport implements Component < E > { private static final transient Log LOG = LogFactory . getLog ( DefaultComponent . class ) ; private int defaultThreadPoolSize = 5 ; private CamelContext camelContext ; private ScheduledExecutorService executorService ; public DefaultComponent ( ) { } public DefaultComponent ( CamelContext context ) { this . camelContext = context ; } public Endpoint < E > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; if ( path . startsWith ( "//" ) ) { path = path . substring ( 2 ) ; } int idx = path . indexOf ( '?' ) ; if ( idx > 0 ) { path = path . substring ( 0 , idx ) ; } Map parameters = URISupport . parseParameters ( u ) ; validateURI ( uri , path , parameters ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating endpoint uri=[" + uri + "], path=[" + path + "], parameters=[" + parameters + "]" ) ; } Endpoint < E > endpoint = createEndpoint ( uri , path , parameters ) ; if ( endpoint == null ) { return null ; } if ( parameters != null ) { endpoint . configureProperties ( parameters ) ; if ( useIntrospectionOnEndpoint ( ) ) { setProperties ( endpoint , parameters ) ; } if ( parameters . size ( ) > 0 ) { throw new ResolveEndpointFailedException ( uri , "There are " + parameters . size ( ) + " parameters that couldn't be set on the endpoint." + " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint." + " Unknown parameters=[" + parameters + "]" ) ; } } return endpoint ; } protected void validateURI ( String uri , String path , Map parameters ) throws ResolveEndpointFailedException { if ( uri . contains ( "&" ) && ! uri . contains ( "?" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: no ? marker however the uri " + "has & parameter separators. Check the uri if its missing a ? marker." ) ; } if ( uri . contains ( "&&" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: Double && marker found. " + "Check the uri and remove the duplicate & marker." ) ; } } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext context ) { this . camelContext = context ; } public ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { executorService = createExecutorService ( ) ; } return executorService ; } public void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } protected ScheduledExecutorService createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( defaultThreadPoolSize , new ThreadFactory ( ) { int counter ; public synchronized Thread newThread ( Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "Thread: " + ( ++ counter ) + " " + DefaultComponent . this . toString ( ) ) ; return thread ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { if ( executorService != null ) { executorService . shutdown ( ) ; } } protected abstract Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception ; protected void setProperties ( Object bean , Map parameters ) throws Exception { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , bean , parameters ) ; } protected boolean useIntrospectionOnEndpoint ( ) { return true ; } public < T > T convertTo ( Class < T > type , Object value ) { return CamelContextHelper . convertTo ( getCamelContext ( ) , type , value ) ; } public < T > T mandatoryConvertTo ( Class < T > type , Object value ) { return CamelContextHelper . mandatoryConvertTo ( getCamelContext ( ) , type , value ) ; } public < T > T newInstance ( Class < T > beanType ) { return getCamelContext ( ) . getInjector ( ) . newInstance ( beanType ) ; } public Object lookup ( String name ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name ) ; } public < T > T lookup ( String name , Class < T > beanType ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , beanType ) ; } public Object mandatoryLookup ( String name ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name ) ; } public < T > T mandatoryLookup ( String name , Class < T > beanType ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name , beanType ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type ) { return getAndRemoveParameter ( parameters , key , type , null ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type , T defaultValue ) { Object value = parameters . remove ( key ) ; if ( value == null ) { value = defaultValue ; } if ( value == null ) { return null ; } return convertTo ( type , value ) ; } } 	1
package org . apache . camel . component . cxf ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . AsyncProcessorHelper ; public class AsyncProcessorDecorator implements AsyncProcessor { private final AsyncProcessor processor ; private final Processor before ; private final Processor after ; public AsyncProcessorDecorator ( Processor processor , Processor before , Processor after ) { this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; this . before = before ; this . after = after ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { try { before . process ( exchange ) ; } catch ( Throwable t ) { exchange . setException ( t ) ; callback . done ( true ) ; return true ; } return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { try { after . process ( exchange ) ; callback . done ( doneSynchronously ) ; } catch ( Throwable t ) { exchange . setException ( t ) ; } } } ) ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . RandomAccessFile ; import java . nio . channels . Channel ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . component . file . FileProcessStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class FileProcessStrategySupport implements FileProcessStrategy { public static final String DEFAULT_LOCK_FILE_POSTFIX = ".cameLock" ; private static final transient Log LOG = LogFactory . getLog ( FileProcessStrategySupport . class ) ; private boolean lockFile ; private FileRenamer lockFileRenamer ; protected FileProcessStrategySupport ( ) { this ( true ) ; } protected FileProcessStrategySupport ( boolean lockFile ) { this ( lockFile , new DefaultFileRenamer ( null , DEFAULT_LOCK_FILE_POSTFIX ) ) ; } protected FileProcessStrategySupport ( boolean lockFile , FileRenamer lockFileRenamer ) { this . lockFile = lockFile ; this . lockFileRenamer = lockFileRenamer ; } public boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { File newFile = lockFileRenamer . renameFile ( file ) ; String lockFileName = newFile . getAbsolutePath ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Locking the file: " + file + " using the lock file name: " + lockFileName ) ; } FileChannel channel = new RandomAccessFile ( lockFileName , "rw" ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; if ( lock != null ) { exchange . setProperty ( "org.apache.camel.fileChannel" , channel ) ; exchange . setProperty ( "org.apache.camel.file.lock" , lock ) ; exchange . setProperty ( "org.apache.camel.file.lock.name" , lockFileName ) ; return true ; } return false ; } return true ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { Channel channel = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.fileChannel" , Channel . class ) ; String lockfile = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock.name" , String . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unlocking file: " + file ) ; } channel . close ( ) ; File lock = new File ( lockfile ) ; lock . delete ( ) ; } } public boolean isLockFile ( ) { return lockFile ; } public void setLockFile ( boolean lockFile ) { this . lockFile = lockFile ; } public FileRenamer getLockFileRenamer ( ) { return lockFileRenamer ; } public void setLockFileRenamer ( FileRenamer lockFileRenamer ) { this . lockFileRenamer = lockFileRenamer ; } } 	1
package org . apache . camel . util ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; import java . util . SortedSet ; import java . util . TreeSet ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . TimeUnit ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultTimeoutMap implements TimeoutMap , Runnable { private static final transient Log LOG = LogFactory . getLog ( DefaultTimeoutMap . class ) ; private final Map map = new HashMap ( ) ; private SortedSet index = new TreeSet ( ) ; private ScheduledExecutorService executor ; private long purgePollTime ; public DefaultTimeoutMap ( ) { this ( null , 1000L ) ; } public DefaultTimeoutMap ( ScheduledExecutorService executor , long requestMapPollTimeMillis ) { this . executor = executor ; this . purgePollTime = requestMapPollTimeMillis ; schedulePoll ( ) ; } public Object get ( Object key ) { TimeoutMapEntry entry = null ; synchronized ( map ) { entry = ( TimeoutMapEntry ) map . get ( key ) ; if ( entry == null ) { return null ; } index . remove ( entry ) ; updateExpireTime ( entry ) ; index . add ( entry ) ; } return entry . getValue ( ) ; } public void put ( Object key , Object value , long timeoutMillis ) { TimeoutMapEntry entry = new TimeoutMapEntry ( key , value , timeoutMillis ) ; synchronized ( map ) { Object oldValue = map . put ( key , entry ) ; if ( oldValue != null ) { index . remove ( oldValue ) ; } updateExpireTime ( entry ) ; index . add ( entry ) ; } } public void remove ( Object id ) { synchronized ( map ) { TimeoutMapEntry entry = ( TimeoutMapEntry ) map . remove ( id ) ; if ( entry != null ) { index . remove ( entry ) ; } } } public Object [ ] getKeys ( ) { Object [ ] keys = null ; synchronized ( map ) { Set keySet = map . keySet ( ) ; keys = new Object [ keySet . size ( ) ] ; keySet . toArray ( keys ) ; } return keys ; } public int size ( ) { synchronized ( map ) { return map . size ( ) ; } } public void run ( ) { purge ( ) ; schedulePoll ( ) ; } public void purge ( ) { long now = currentTime ( ) ; synchronized ( map ) { for ( Iterator iter = index . iterator ( ) ; iter . hasNext ( ) ; ) { TimeoutMapEntry entry = ( TimeoutMapEntry ) iter . next ( ) ; if ( entry == null ) { break ; } if ( entry . getExpireTime ( ) < now ) { if ( isValidForEviction ( entry ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Evicting inactive request for correlationID: " + entry ) ; } map . remove ( entry . getKey ( ) ) ; iter . remove ( ) ; } } else { break ; } } } } public long getPurgePollTime ( ) { return purgePollTime ; } public void setPurgePollTime ( long purgePollTime ) { this . purgePollTime = purgePollTime ; } public ScheduledExecutorService getExecutor ( ) { return executor ; } public void setExecutor ( ScheduledExecutorService executor ) { this . executor = executor ; } protected void schedulePoll ( ) { if ( executor != null ) { executor . schedule ( this , purgePollTime , TimeUnit . MILLISECONDS ) ; } } protected boolean isValidForEviction ( TimeoutMapEntry entry ) { return true ; } protected void updateExpireTime ( TimeoutMapEntry entry ) { long now = currentTime ( ) ; entry . setExpireTime ( entry . getTimeout ( ) + now ) ; } protected long currentTime ( ) { return System . currentTimeMillis ( ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . StringTokenizer ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; public final class ExpressionBuilder { private ExpressionBuilder ( ) { } public static < E extends Exchange > Expression < E > headerExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getIn ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "header(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > headersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "headers" ; } } ; } public static < E extends Exchange > Expression < E > outHeaderExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } Object header = out . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "outHeader(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > outHeadersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "outHeaders" ; } } ; } public static < E extends Exchange > Expression < E > propertyExpression ( final String propertyName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperty ( propertyName ) ; } @ Override public String toString ( ) { return "property(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertiesExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperties ( ) ; } @ Override public String toString ( ) { return "properties" ; } } ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName ) { return systemPropertyExpression ( propertyName , null ) ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( propertyName , defaultValue ) ; } @ Override public String toString ( ) { return "systemProperty(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > constantExpression ( final Object value ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return value ; } @ Override public String toString ( ) { return "" + value ; } } ; } public static < E extends Exchange > Expression < E > bodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "body" ; } } ; } public static < E extends Exchange , T > Expression < E > bodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "bodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > outBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( ) ; } @ Override public String toString ( ) { return "outBody" ; } } ; } public static < E extends Exchange , T > Expression < E > outBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( type ) ; } @ Override public String toString ( ) { return "outBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > faultBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "faultBody" ; } } ; } public static < E extends Exchange , T > Expression < E > faultBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "faultBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > exchangeExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange ; } @ Override public String toString ( ) { return "exchange" ; } } ; } public static < E extends Exchange > Expression < E > inMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) ; } @ Override public String toString ( ) { return "inMessage" ; } } ; } public static < E extends Exchange > Expression < E > outMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) ; } @ Override public String toString ( ) { return "outMessage" ; } } ; } public static < E extends Exchange > Expression < E > convertTo ( final Expression expression , final Class type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } @ Override public String toString ( ) { return "" + expression + ".convertTo(" + type . getName ( ) + ".class)" ; } } ; } public static < E extends Exchange > Expression < E > tokenizeExpression ( final Expression < E > expression , final String token ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } StringTokenizer iter = new StringTokenizer ( text , token ) ; List < String > answer = new ArrayList < String > ( ) ; while ( iter . hasMoreTokens ( ) ) { answer . add ( iter . nextToken ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "tokenize(" + expression + ", " + token + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexTokenize ( final Expression < E > expression , String regexTokenizer ) { final Pattern pattern = Pattern . compile ( regexTokenizer ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return Arrays . asList ( pattern . split ( text ) ) ; } @ Override public String toString ( ) { return "regexTokenize(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final String replacement ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final Expression < E > replacementExpression ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; String replacement = evaluateStringExpression ( replacementExpression , exchange ) ; if ( text == null || replacement == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > append ( final Expression < E > left , final Expression < E > right ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return evaluateStringExpression ( left , exchange ) + evaluateStringExpression ( right , exchange ) ; } @ Override public String toString ( ) { return "append(" + left + ", " + right + ")" ; } } ; } public static < E extends Exchange > String evaluateStringExpression ( Expression < E > expression , E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , value ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( name , defaultValue ) ; } } ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions ) { return concatExpression ( expressions , null ) ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions , final String expression ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Expression < E > expression : expressions ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text != null ) { buffer . append ( text ) ; } } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( expression != null ) { return expression ; } else { return "concat" + expressions ; } } } ; } } 	1
package org . apache . camel . spring . factory ; import org . apache . camel . component . bean . BeanEndpoint ; import org . springframework . beans . factory . FactoryBean ; public class BeanEndpointFactory implements FactoryBean { private boolean singleton = true ; public Object getObject ( ) throws Exception { return new BeanEndpoint ( ) ; } public Class getObjectType ( ) { return BeanEndpoint . class ; } public boolean isSingleton ( ) { return singleton ; } protected void setSingleton ( boolean singleton ) { this . singleton = singleton ; } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SedaConsumer extends ServiceSupport implements Consumer , Runnable { private static final transient Log LOG = LogFactory . getLog ( SedaConsumer . class ) ; private SedaEndpoint endpoint ; private AsyncProcessor processor ; private Thread thread ; public SedaConsumer ( SedaEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; } @ Override public String toString ( ) { return "SedaConsumer: " + endpoint . getEndpointUri ( ) ; } public void run ( ) { while ( isRunAllowed ( ) ) { final Exchange exchange ; try { exchange = endpoint . getQueue ( ) . poll ( 1000 , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Interupted: " + e , e ) ; } continue ; } if ( exchange != null && isRunAllowed ( ) ) { try { processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } catch ( Exception e ) { LOG . error ( "Seda queue caught: " + e , e ) ; } } } } protected void doStart ( ) throws Exception { thread = new Thread ( this , getThreadName ( endpoint . getEndpointUri ( ) ) ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { thread . join ( ) ; } } 	1
package org . apache . camel . management ; import java . util . Map ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class InstrumentationInterceptStrategy implements InterceptStrategy { private Map < ProcessorType , PerformanceCounter > counterMap ; public InstrumentationInterceptStrategy ( Map < ProcessorType , PerformanceCounter > counterMap ) { this . counterMap = counterMap ; } public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { Processor retval = target ; PerformanceCounter counter = counterMap . get ( processorType ) ; if ( counter != null ) { InstrumentationProcessor wrapper = new InstrumentationProcessor ( counter ) ; wrapper . setProcessor ( target ) ; retval = wrapper ; } return retval ; } } 	0
package org . apache . camel . model ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "optionalIdentifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class OptionalIdentifiedType < T extends OptionalIdentifiedType > { @ XmlTransient protected static Map < String , AtomicInteger > nodeCounters = new HashMap < String , AtomicInteger > ( ) ; @ XmlAttribute ( required = false ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlElement ( required = false ) private Description description ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Description getDescription ( ) { return description ; } public void setDescription ( Description description ) { this . description = description ; } public String getShortName ( ) { return "node" ; } public T description ( String text ) { if ( description == null ) { description = new Description ( ) ; } description . setText ( text ) ; return ( T ) this ; } public T description ( String text , String lang ) { description ( text ) ; description . setLang ( lang ) ; return ( T ) this ; } public T id ( String id ) { setId ( id ) ; return ( T ) this ; } public String idOrCreate ( ) { if ( id == null ) { setId ( createId ( ) ) ; } return getId ( ) ; } protected String createId ( ) { String key = getShortName ( ) ; return key + getNodeCounter ( key ) . incrementAndGet ( ) ; } protected static synchronized AtomicInteger getNodeCounter ( String key ) { AtomicInteger answer = nodeCounters . get ( key ) ; if ( answer == null ) { answer = new AtomicInteger ( 0 ) ; nodeCounters . put ( key , answer ) ; } return answer ; } } 	1
package org . apache . camel . processor ; import org . apache . camel . Processor ; public interface ErrorHandler extends Processor { } 	0
package org . apache . camel . util ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . lang . annotation . Annotation ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class ObjectHelper { private static final transient Log LOG = LogFactory . getLog ( ObjectHelper . class ) ; private ObjectHelper ( ) { } @ Deprecated public static boolean equals ( Object a , Object b ) { return equal ( a , b ) ; } public static boolean equal ( Object a , Object b ) { if ( a == b ) { return true ; } if ( a instanceof byte [ ] && b instanceof byte [ ] ) { return equalByteArray ( ( byte [ ] ) a , ( byte [ ] ) b ) ; } return a != null && b != null && a . equals ( b ) ; } public static boolean equalByteArray ( byte [ ] a , byte [ ] b ) { if ( a == b ) { return true ; } if ( a != null && b != null && a . length == b . length ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] != b [ i ] ) { return false ; } } return true ; } return false ; } public static boolean isEqualToAny ( Object object , Object ... values ) { for ( Object value : values ) { if ( equal ( object , value ) ) { return true ; } } return false ; } public static int compare ( Object a , Object b ) { if ( a == b ) { return 0 ; } if ( a == null ) { return - 1 ; } if ( b == null ) { return 1 ; } if ( a instanceof Comparable ) { Comparable comparable = ( Comparable ) a ; return comparable . compareTo ( b ) ; } else { int answer = a . getClass ( ) . getName ( ) . compareTo ( b . getClass ( ) . getName ( ) ) ; if ( answer == 0 ) { answer = a . hashCode ( ) - b . hashCode ( ) ; } return answer ; } } public static Boolean toBoolean ( Object value ) { if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return "true" . equalsIgnoreCase ( value . toString ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } if ( value instanceof Integer ) { return ( Integer ) value > 0 ? Boolean . TRUE : Boolean . FALSE ; } return null ; } public static void notNull ( Object value , String name ) { if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified" ) ; } } public static String [ ] splitOnCharacter ( String value , String needle , int count ) { String rc [ ] = new String [ count ] ; rc [ 0 ] = value ; for ( int i = 1 ; i < count ; i ++ ) { String v = rc [ i - 1 ] ; int p = v . indexOf ( needle ) ; if ( p < 0 ) { return rc ; } rc [ i - 1 ] = v . substring ( 0 , p ) ; rc [ i ] = v . substring ( p + 1 ) ; } return rc ; } public static String removeStartingCharacters ( String text , char ch ) { int idx = 0 ; while ( text . charAt ( idx ) == ch ) { idx ++ ; } if ( idx > 0 ) { return text . substring ( idx ) ; } return text ; } public static String capitalize ( String text ) { if ( text == null ) { return null ; } int length = text . length ( ) ; if ( length == 0 ) { return text ; } String answer = text . substring ( 0 , 1 ) . toUpperCase ( ) ; if ( length > 1 ) { answer += text . substring ( 1 , length ) ; } return answer ; } @ SuppressWarnings ( "unchecked" ) public static boolean contains ( Object collectionOrArray , Object value ) { if ( collectionOrArray instanceof Collection ) { Collection collection = ( Collection ) collectionOrArray ; return collection . contains ( value ) ; } else if ( collectionOrArray instanceof String && value instanceof String ) { String str = ( String ) collectionOrArray ; String subStr = ( String ) value ; return str . contains ( subStr ) ; } else { Iterator iter = createIterator ( collectionOrArray ) ; while ( iter . hasNext ( ) ) { if ( equal ( value , iter . next ( ) ) ) { return true ; } } } return false ; } @ SuppressWarnings ( "unchecked" ) public static Iterator createIterator ( Object value ) { if ( value == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . iterator ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { List < Object > list = Arrays . asList ( ( Object [ ] ) value ) ; return list . iterator ( ) ; } else if ( value instanceof NodeList ) { final NodeList nodeList = ( NodeList ) value ; return new Iterator < Node > ( ) { int idx = - 1 ; public boolean hasNext ( ) { return ++ idx < nodeList . getLength ( ) ; } public Node next ( ) { return nodeList . item ( idx ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } else { return Collections . singletonList ( value ) . iterator ( ) ; } } public static boolean matches ( List list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof Boolean ) { Boolean flag = ( Boolean ) value ; return flag . booleanValue ( ) ; } else { return true ; } } return false ; } public static boolean isNotNullAndNonEmpty ( String text ) { return text != null && text . trim ( ) . length ( ) > 0 ; } public static boolean isNullOrBlank ( String text ) { return text == null || text . trim ( ) . length ( ) <= 0 ; } public static String getSystemProperty ( String name , String defaultValue ) { try { return System . getProperty ( name , defaultValue ) ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Caught security exception accessing system property: " + name + ". Reason: " + e , e ) ; } return defaultValue ; } } public static String name ( Class type ) { return type != null ? type . getName ( ) : null ; } public static String className ( Object value ) { return name ( value != null ? value . getClass ( ) : null ) ; } public static Class < ? > loadClass ( String name ) { return loadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } public static Class < ? > loadClass ( String name , ClassLoader loader ) { ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { try { return contextClassLoader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { try { return loader . loadClass ( name ) ; } catch ( ClassNotFoundException e1 ) { LOG . debug ( "Could not find class: " + name + ". Reason: " + e ) ; } } } return null ; } public static InputStream loadResourceAsStream ( String name ) { InputStream in = null ; ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { in = contextClassLoader . getResourceAsStream ( name ) ; } if ( in == null ) { in = ObjectHelper . class . getClassLoader ( ) . getResourceAsStream ( name ) ; } return in ; } public static Object invokeMethod ( Method method , Object instance , Object ... parameters ) { try { return method . invoke ( instance , parameters ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType ) { List < Method > answer = new ArrayList < Method > ( ) ; do { Method [ ] methods = type . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( method . getAnnotation ( annotationType ) != null ) { answer . add ( method ) ; } } type = type . getSuperclass ( ) ; } while ( type != null ) ; return answer ; } public static String asString ( Object [ ] objects ) { if ( objects == null ) { return "null" ; } else { StringBuffer buffer = new StringBuffer ( "{" ) ; int counter = 0 ; for ( Object object : objects ) { if ( counter ++ > 0 ) { buffer . append ( ", " ) ; } String text = ( object == null ) ? "null" : object . toString ( ) ; buffer . append ( text ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } } public static boolean isAssignableFrom ( Class a , Class b ) { a = convertPrimitiveTypeToWrapperType ( a ) ; b = convertPrimitiveTypeToWrapperType ( b ) ; return a . isAssignableFrom ( b ) ; } public static Class convertPrimitiveTypeToWrapperType ( Class type ) { Class rc = type ; if ( type . isPrimitive ( ) ) { if ( type == int . class ) { rc = Integer . class ; } else if ( type == long . class ) { rc = Long . class ; } else if ( type == double . class ) { rc = Double . class ; } else if ( type == float . class ) { rc = Float . class ; } else if ( type == short . class ) { rc = Short . class ; } else if ( type == byte . class ) { rc = Byte . class ; } } return rc ; } public static String getDefaultCharacterSet ( ) { return Charset . defaultCharset ( ) . name ( ) ; } public static String getPropertyName ( Method method ) { String propertyName = method . getName ( ) ; if ( propertyName . startsWith ( "set" ) && method . getParameterTypes ( ) . length == 1 ) { propertyName = propertyName . substring ( 3 , 4 ) . toLowerCase ( ) + propertyName . substring ( 4 ) ; } return propertyName ; } public static boolean hasAnnotation ( Annotation [ ] annotations , Class < ? > type ) { for ( Annotation annotation : annotations ) { if ( type . isInstance ( annotation ) ) { return true ; } } return false ; } public static void close ( Closeable closeable , String name , Log log ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException e ) { if ( log != null ) { log . warn ( "Could not close: " + name + ". Reason: " + e , e ) ; } } } } public static < T > T cast ( Class < T > toType , Object value ) { if ( toType == boolean . class ) { return ( T ) cast ( Boolean . class , value ) ; } else if ( toType . isPrimitive ( ) ) { Class newType = convertPrimitiveTypeToWrapperType ( toType ) ; if ( newType != toType ) { return ( T ) cast ( newType , value ) ; } } try { return toType . cast ( value ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( "Failed to convert: " + value + " to type: " + toType . getName ( ) + " due to: " + e , e ) ; } } public static < T > T newInstance ( Class < T > type ) { try { return type . newInstance ( ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static < T > T newInstance ( Class < ? > actualType , Class < T > expectedType ) { try { Object value = actualType . newInstance ( ) ; return cast ( expectedType , value ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isJavaIdentifier ( String name ) { if ( name == null ) { return false ; } int size = name . length ( ) ; if ( size < 1 ) { return false ; } if ( Character . isJavaIdentifierStart ( name . charAt ( 0 ) ) ) { for ( int i = 1 ; i < size ; i ++ ) { if ( ! Character . isJavaIdentifierPart ( name . charAt ( i ) ) ) { return false ; } } return true ; } return false ; } public static Object type ( Object bean ) { return bean != null ? bean . getClass ( ) : null ; } public static boolean evaluateValuePredicate ( Object value ) { if ( value instanceof Boolean ) { Boolean aBoolean = ( Boolean ) value ; return aBoolean . booleanValue ( ) ; } return value != null ; } } 	1
package org . apache . camel . component . rmi ; import java . rmi . registry . Registry ; import org . apache . camel . CamelContext ; import org . apache . camel . component . bean . ParameterMappingStrategy ; import org . apache . camel . component . bean . RegistryBean ; public class RmiRegistryBean extends RegistryBean { private final Registry registry ; public RmiRegistryBean ( CamelContext context , String name , Registry registry ) { super ( context , name ) ; this . registry = registry ; } public RmiRegistryBean ( CamelContext context , String name , ParameterMappingStrategy parameterMappingStrategy , Registry registry ) { super ( context , name , parameterMappingStrategy ) ; this . registry = registry ; } @ Override protected Object lookupBean ( ) throws Exception { return registry . lookup ( getName ( ) ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; public class MethodInfo { private Class type ; private Method method ; private final List < ParameterInfo > parameters ; private final List < ParameterInfo > bodyParameters ; private final boolean hasCustomAnnotation ; private Expression parametersExpression ; public MethodInfo ( Class type , Method method , List < ParameterInfo > parameters , List < ParameterInfo > bodyParameters , boolean hasCustomAnnotation ) { this . type = type ; this . method = method ; this . parameters = parameters ; this . bodyParameters = bodyParameters ; this . hasCustomAnnotation = hasCustomAnnotation ; this . parametersExpression = createParametersExpression ( ) ; } public String toString ( ) { return method . toString ( ) ; } public MethodInvocation createMethodInvocation ( final Object pojo , final Exchange messageExchange ) { final Object [ ] arguments = ( Object [ ] ) parametersExpression . evaluate ( messageExchange ) ; return new MethodInvocation ( ) { public Method getMethod ( ) { return method ; } public Object [ ] getArguments ( ) { return arguments ; } public Object proceed ( ) throws Throwable { return invoke ( method , pojo , arguments , messageExchange ) ; } public Object getThis ( ) { return pojo ; } public AccessibleObject getStaticPart ( ) { return method ; } } ; } public Class getType ( ) { return type ; } public Method getMethod ( ) { return method ; } public Expression getParametersExpression ( ) { return parametersExpression ; } public List < ParameterInfo > getBodyParameters ( ) { return bodyParameters ; } public Class getBodyParameterType ( ) { ParameterInfo parameterInfo = bodyParameters . get ( 0 ) ; return parameterInfo . getType ( ) ; } public boolean bodyParameterMatches ( Class bodyType ) { Class actualType = getBodyParameterType ( ) ; return actualType != null && ObjectHelper . isAssignableFrom ( bodyType , actualType ) ; } public List < ParameterInfo > getParameters ( ) { return parameters ; } public boolean hasBodyParameter ( ) { return ! bodyParameters . isEmpty ( ) ; } public boolean isHasCustomAnnotation ( ) { return hasCustomAnnotation ; } public boolean isReturnTypeVoid ( ) { return method . getReturnType ( ) . getName ( ) . equals ( "void" ) ; } protected Object invoke ( Method mth , Object pojo , Object [ ] arguments , Exchange exchange ) throws IllegalAccessException , InvocationTargetException { return mth . invoke ( pojo , arguments ) ; } protected Expression createParametersExpression ( ) { final int size = parameters . size ( ) ; final Expression [ ] expressions = new Expression [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Expression parameterExpression = parameters . get ( i ) . getExpression ( ) ; expressions [ i ] = parameterExpression ; } return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object [ ] answer = new Object [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Object value = expressions [ i ] . evaluate ( exchange ) ; Class expectedType = parameters . get ( i ) . getType ( ) ; value = ExchangeHelper . convertToType ( exchange , expectedType , value ) ; answer [ i ] = value ; } return answer ; } @ Override public String toString ( ) { return "ParametersExpression: " + Arrays . asList ( expressions ) ; } } ; } } 	1
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SetHeaderProcessor extends DelegateProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( SetHeaderProcessor . class ) ; private String name ; private Expression expression ; public SetHeaderProcessor ( String name , Expression expression ) { this . name = name ; this . expression = expression ; } public SetHeaderProcessor ( String name , Expression expression , Processor childProcessor ) { super ( childProcessor ) ; this . name = name ; this . expression = expression ; } public void process ( Exchange exchange ) throws Exception { Object value = expression . evaluate ( exchange ) ; if ( value == null ) { LOG . warn ( "Expression: " + expression + " on exchange: " + exchange + " evaluated to null." ) ; } exchange . getIn ( ) . setHeader ( name , value ) ; super . process ( exchange ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . bean . RegistryBean ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "bean" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class BeanRef extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlAttribute ( required = false ) private String method ; @ XmlAttribute ( required = false ) private Class beanType ; @ XmlTransient private Object bean ; public BeanRef ( ) { } public BeanRef ( String ref ) { this . ref = ref ; } public BeanRef ( String ref , String method ) { this . ref = ref ; this . method = method ; } @ Override public String toString ( ) { return "Bean[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "bean" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public void setBean ( Object bean ) { this . bean = bean ; } public Class getBeanType ( ) { return beanType ; } public void setBeanType ( Class beanType ) { this . beanType = beanType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { BeanProcessor answer ; if ( ref != null ) { answer = new BeanProcessor ( new RegistryBean ( routeContext . getCamelContext ( ) , ref ) ) ; } else { if ( bean == null ) { ObjectHelper . notNull ( beanType , "bean, ref or beanType" ) ; bean = CamelContextHelper . newInstance ( routeContext . getCamelContext ( ) , beanType ) ; } answer = new BeanProcessor ( bean , routeContext . getCamelContext ( ) ) ; } if ( method != null ) { answer . setMethod ( method ) ; } return answer ; } @ Override public String getLabel ( ) { if ( ref != null ) { String methodText = "" ; if ( method != null ) { methodText = " method: " + method ; } return "ref: " + ref + methodText ; } else if ( bean != null ) { return bean . toString ( ) ; } else if ( beanType != null ) { return beanType . getName ( ) ; } else { return "" ; } } } 	1
package org . apache . camel . component . validator ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . component . ResourceBasedComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . springframework . core . io . Resource ; public class ValidatorComponent extends ResourceBasedComponent { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { SpringValidator validator = new SpringValidator ( ) ; Resource resource = resolveMandatoryResource ( remaining ) ; validator . setSchemaResource ( resource ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( this + " using schema resource: " + resource ) ; } configureValidator ( validator , uri , remaining , parameters ) ; return new ProcessorEndpoint ( uri , this , validator ) ; } protected void configureValidator ( SpringValidator validator , String uri , String remaining , Map parameters ) throws Exception { setProperties ( validator , parameters ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . Service ; import org . apache . camel . util . ServiceHelper ; public abstract class ServiceSupport implements Service { private static int threadCounter ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private AtomicBoolean starting = new AtomicBoolean ( false ) ; private AtomicBoolean stopping = new AtomicBoolean ( false ) ; private AtomicBoolean stopped = new AtomicBoolean ( false ) ; private Collection childServices ; public void start ( ) throws Exception { if ( started . compareAndSet ( false , true ) ) { starting . set ( true ) ; try { if ( childServices != null ) { ServiceHelper . startServices ( childServices ) ; } doStart ( ) ; } finally { starting . set ( false ) ; } } } public void stop ( ) throws Exception { if ( started . get ( ) && stopping . compareAndSet ( false , true ) ) { try { doStop ( ) ; } finally { if ( childServices != null ) { ServiceHelper . stopServices ( childServices ) ; } stopped . set ( true ) ; started . set ( false ) ; stopping . set ( false ) ; } } } public boolean isStarted ( ) { return started . get ( ) ; } public boolean isStarting ( ) { return starting . get ( ) ; } public boolean isStopping ( ) { return stopping . get ( ) ; } protected boolean isRunAllowed ( ) { return ! ( stopping . get ( ) || stopped . get ( ) ) ; } public boolean isStopped ( ) { return stopped . get ( ) ; } protected abstract void doStart ( ) throws Exception ; protected abstract void doStop ( ) throws Exception ; protected String getThreadName ( String prefix ) { return prefix + " thread:" + nextThreadCounter ( ) ; } protected static synchronized int nextThreadCounter ( ) { return ++ threadCounter ; } protected void addChildService ( Object childService ) { if ( childServices == null ) { childServices = new ArrayList ( ) ; } childServices . add ( childService ) ; } protected boolean removeChildService ( Object childService ) { if ( childServices != null ) { return childServices . remove ( childService ) ; } else { return false ; } } } 	1
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public class ChoiceProcessor extends ServiceSupport implements Processor { private List < FilterProcessor > filters = new ArrayList < FilterProcessor > ( ) ; private Processor otherwise ; public ChoiceProcessor ( List < FilterProcessor > filters , Processor otherwise ) { this . filters = filters ; this . otherwise = otherwise ; } public void process ( Exchange exchange ) throws Exception { for ( FilterProcessor filterProcessor : filters ) { Predicate < Exchange > predicate = filterProcessor . getPredicate ( ) ; if ( predicate != null && predicate . matches ( exchange ) ) { filterProcessor . processNext ( exchange ) ; return ; } } if ( otherwise != null ) { otherwise . process ( exchange ) ; } } @ Override public String toString ( ) { StringBuilder builder = new StringBuilder ( "choice{" ) ; boolean first = true ; for ( FilterProcessor processor : filters ) { if ( first ) { first = false ; } else { builder . append ( ", " ) ; } builder . append ( "when " ) ; builder . append ( processor . getPredicate ( ) . toString ( ) ) ; builder . append ( ": " ) ; builder . append ( processor . getProcessor ( ) ) ; } if ( otherwise != null ) { builder . append ( ", otherwise: " ) ; builder . append ( otherwise ) ; } builder . append ( "}" ) ; return builder . toString ( ) ; } public List < FilterProcessor > getFilters ( ) { return filters ; } public Processor getOtherwise ( ) { return otherwise ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( filters ) ; ServiceHelper . startServices ( otherwise ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( otherwise ) ; ServiceHelper . stopServices ( filters ) ; } } 	0
package org . apache . camel . converter . stream ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public interface StreamCache { } 	1
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class TopicLoadBalancer extends LoadBalancerSupport { public void process ( Exchange exchange ) throws Exception { List < Processor > list = getProcessors ( ) ; for ( Processor processor : list ) { Exchange copy = copyExchangeStrategy ( processor , exchange ) ; processor . process ( copy ) ; } } protected Exchange copyExchangeStrategy ( Processor processor , Exchange exchange ) { return exchange . copy ( ) ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import javax . xml . transform . stream . StreamSource ; public class BytesSource extends StreamSource { private byte [ ] data ; public BytesSource ( byte [ ] data ) { this . data = data ; } public BytesSource ( byte [ ] data , String systemId ) { this . data = data ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { return new ByteArrayInputStream ( data ) ; } public Reader getReader ( ) { return new InputStreamReader ( getInputStream ( ) ) ; } public byte [ ] getData ( ) { return data ; } public String toString ( ) { return "BytesSource[" + new String ( data ) + "]" ; } } 	1
package org . apache . camel . processor ; import java . io . InputStream ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ExchangeHelper ; public class UnmarshalProcessor implements Processor { private final DataFormat dataFormat ; public UnmarshalProcessor ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } public void process ( Exchange exchange ) throws Exception { InputStream stream = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; try { Message out = exchange . getOut ( true ) ; out . copyFrom ( exchange . getIn ( ) ) ; Object result = dataFormat . unmarshal ( exchange , stream ) ; out . setBody ( result ) ; } finally { if ( null != stream ) { stream . close ( ) ; } } } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . Proxy ; import org . apache . camel . Endpoint ; import org . apache . camel . Producer ; public final class ProxyHelper { private ProxyHelper ( ) { } public static Object createProxy ( final Endpoint endpoint , ClassLoader cl , Class interfaces [ ] ) throws Exception { final Producer producer = endpoint . createProducer ( ) ; return Proxy . newProxyInstance ( cl , interfaces , new CamelInvocationHandler ( endpoint , producer ) ) ; } public static Object createProxy ( Endpoint endpoint , Class interfaces [ ] ) throws Exception { if ( interfaces . length < 1 ) { throw new IllegalArgumentException ( "You must provide at least 1 interface class." ) ; } return createProxy ( endpoint , interfaces [ 0 ] . getClassLoader ( ) , interfaces ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , ClassLoader cl , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , cl , new Class [ ] { interfaceClass } ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , new Class [ ] { interfaceClass } ) ; } } 	1
package org . apache . camel . util ; public class ValueHolder < V > { private V value ; public ValueHolder ( ) { } public ValueHolder ( V val ) { value = val ; } public V get ( ) { return value ; } public void set ( V val ) { value = val ; } } 	0
package org . apache . camel . model ; import java . util . Collection ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Aggregator ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "aggregator" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class AggregatorType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private AggregationCollection aggregationCollection ; @ XmlAttribute ( required = false ) private Integer batchSize ; @ XmlAttribute ( required = false ) private Long batchTimeout ; @ XmlAttribute ( required = false ) private String strategyRef ; @ XmlElement ( name = "completedPredicate" , required = false ) private CompletedPredicate completedPredicate ; public AggregatorType ( ) { } public AggregatorType ( Expression correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( ExpressionType correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { super ( correlationExpression ) ; this . aggregationStrategy = aggregationStrategy ; } @ Override public String toString ( ) { return "Aggregator[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "aggregator" ; } @ SuppressWarnings ( "unchecked" ) @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routes , aggregator ) ; } private void doAddRoute ( RouteContext routeContext , Collection < Route > routes , final Aggregator aggregator ) throws Exception { Route route = new Route < Exchange > ( aggregator . getEndpoint ( ) , aggregator ) { @ Override public String toString ( ) { return "AggregatorRoute[" + getEndpoint ( ) + " -> " + aggregator . getProcessor ( ) + "]" ; } } ; routes . add ( route ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routeContext . getCamelContext ( ) . getRoutes ( ) , aggregator ) ; routeContext . setIsRouteAdded ( true ) ; return aggregator ; } protected Aggregator createAggregator ( RouteContext routeContext ) throws Exception { Endpoint from = routeContext . getEndpoint ( ) ; final Processor processor = routeContext . createProcessor ( this ) ; final Aggregator aggregator ; if ( aggregationCollection != null ) { aggregator = new Aggregator ( from , processor , aggregationCollection ) ; } else { AggregationStrategy strategy = getAggregationStrategy ( ) ; if ( strategy == null && strategyRef != null ) { strategy = routeContext . lookup ( strategyRef , AggregationStrategy . class ) ; } if ( strategy == null ) { strategy = new UseLatestAggregationStrategy ( ) ; } Expression aggregateExpression = getExpression ( ) . createExpression ( routeContext ) ; Predicate predicate = null ; if ( completedPredicate != null ) { predicate = completedPredicate . createPredicate ( routeContext ) ; } if ( predicate != null ) { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy , predicate ) ; } else { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy ) ; } } if ( batchSize != null ) { aggregator . setBatchSize ( batchSize ) ; } if ( batchTimeout != null ) { aggregator . setBatchTimeout ( batchTimeout ) ; } return aggregator ; } public AggregationCollection getAggregationCollection ( ) { return aggregationCollection ; } public void setAggregationCollection ( AggregationCollection aggregationCollection ) { this . aggregationCollection = aggregationCollection ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public Integer getBatchSize ( ) { return batchSize ; } public void setBatchSize ( Integer batchSize ) { this . batchSize = batchSize ; } public Long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( Long batchTimeout ) { this . batchTimeout = batchTimeout ; } public String getStrategyRef ( ) { return strategyRef ; } public void setStrategyRef ( String strategyRef ) { this . strategyRef = strategyRef ; } public CompletedPredicate getCompletePredicate ( ) { return completedPredicate ; } public void setCompletePredicate ( CompletedPredicate completedPredicate ) { this . completedPredicate = completedPredicate ; } public AggregatorType batchSize ( int batchSize ) { setBatchSize ( batchSize ) ; return this ; } public AggregatorType batchTimeout ( long batchTimeout ) { setBatchTimeout ( batchTimeout ) ; return this ; } public ExpressionClause < AggregatorType > completedPredicate ( ) { checkNoCompletedPredicate ( ) ; ExpressionClause < AggregatorType > clause = new ExpressionClause < AggregatorType > ( this ) ; completedPredicate = new CompletedPredicate ( clause ) ; return clause ; } public AggregatorType completedPredicate ( Predicate predicate ) { checkNoCompletedPredicate ( ) ; completedPredicate = new CompletedPredicate ( predicate ) ; return this ; } protected void checkNoCompletedPredicate ( ) { if ( completedPredicate != null ) { throw new IllegalArgumentException ( "There already is a completedPredicate defined for this aggregator: " + this ) ; } } } 	1
package org . apache . camel . component . cxf ; import java . io . InputStream ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import javax . xml . transform . Source ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . cxf . helpers . CastUtils ; import org . apache . cxf . message . ExchangeImpl ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . MessageImpl ; public final class CxfSoapBinding { private static final Log LOG = LogFactory . getLog ( CxfSoapBinding . class ) ; private CxfSoapBinding ( ) { } public static org . apache . cxf . message . Message getCxfInMessage ( org . apache . camel . Exchange exchange , boolean isClient ) { MessageImpl answer = new MessageImpl ( ) ; org . apache . cxf . message . Exchange cxfExchange = exchange . getProperty ( CxfConstants . CXF_EXCHANGE , org . apache . cxf . message . Exchange . class ) ; org . apache . camel . Message message = null ; if ( isClient ) { message = exchange . getOut ( ) ; } else { message = exchange . getIn ( ) ; } assert message != null ; if ( cxfExchange == null ) { cxfExchange = new ExchangeImpl ( ) ; exchange . setProperty ( CxfConstants . CXF_EXCHANGE , cxfExchange ) ; } Map < String , Object > headers = null ; if ( isClient ) { headers = exchange . getOut ( ) . getHeaders ( ) ; } else { headers = exchange . getIn ( ) . getHeaders ( ) ; } answer . put ( Message . PROTOCOL_HEADERS , getProtocolHeader ( headers ) ) ; Object body = message . getBody ( InputStream . class ) ; if ( body instanceof InputStream ) { answer . setContent ( InputStream . class , body ) ; } else { LOG . warn ( "Can't get right InputStream object here, the message body is " + message . getBody ( ) ) ; } answer . putAll ( message . getHeaders ( ) ) ; answer . setExchange ( cxfExchange ) ; cxfExchange . setInMessage ( answer ) ; return answer ; } public static org . apache . cxf . message . Message getCxfOutMessage ( org . apache . camel . Exchange exchange , boolean isClient ) { org . apache . cxf . message . Exchange cxfExchange = exchange . getProperty ( CxfConstants . CXF_EXCHANGE , org . apache . cxf . message . Exchange . class ) ; assert cxfExchange != null ; org . apache . cxf . endpoint . Endpoint cxfEndpoint = cxfExchange . get ( org . apache . cxf . endpoint . Endpoint . class ) ; org . apache . cxf . message . Message outMessage = cxfEndpoint . getBinding ( ) . createMessage ( ) ; outMessage . setExchange ( cxfExchange ) ; cxfExchange . setOutMessage ( outMessage ) ; org . apache . camel . Message message = null ; if ( isClient ) { message = exchange . getIn ( ) ; } else { message = exchange . getOut ( ) ; } Map < String , Object > headers = null ; if ( isClient ) { headers = exchange . getIn ( ) . getHeaders ( ) ; } else { headers = exchange . getOut ( ) . getHeaders ( ) ; } outMessage . put ( Message . PROTOCOL_HEADERS , getProtocolHeader ( headers ) ) ; Object body = message . getBody ( Source . class ) ; if ( body instanceof Source ) { outMessage . setContent ( Source . class , body ) ; } else { LOG . warn ( "Can't get right Source object here, the message body is " + message . getBody ( ) ) ; } outMessage . putAll ( message . getHeaders ( ) ) ; return outMessage ; } private static Map < String , List < String > > getProtocolHeader ( Map < String , Object > headers ) { Map < String , List < String > > protocolHeader = new HashMap < String , List < String > > ( ) ; Iterator headersKeySetIterator = headers . keySet ( ) . iterator ( ) ; while ( headersKeySetIterator . hasNext ( ) ) { String key = ( String ) headersKeySetIterator . next ( ) ; Object value = headers . get ( key ) ; if ( value != null ) { protocolHeader . put ( key , Collections . singletonList ( value . toString ( ) ) ) ; } else { protocolHeader . put ( key , null ) ; } } return protocolHeader ; } public static void setProtocolHeader ( Map < String , Object > headers , Map < String , List < String > > protocolHeader ) { if ( protocolHeader != null ) { StringBuilder value = new StringBuilder ( 256 ) ; for ( Map . Entry < String , List < String > > entry : protocolHeader . entrySet ( ) ) { value . setLength ( 0 ) ; boolean first = true ; for ( String s : entry . getValue ( ) ) { if ( ! first ) { value . append ( "; " ) ; } value . append ( s ) ; first = false ; } headers . put ( entry . getKey ( ) , value . toString ( ) ) ; } } } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Method ; public interface MethodInvocation { Method getMethod ( ) ; Object [ ] getArguments ( ) ; Object proceed ( ) throws Throwable ; Object getThis ( ) ; AccessibleObject getStaticPart ( ) ; } 	1
package org . apache . camel . component . ibatis ; import java . io . IOException ; import java . io . InputStream ; import java . util . Map ; import com . ibatis . sqlmap . client . SqlMapClient ; import com . ibatis . sqlmap . client . SqlMapClientBuilder ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . io . ClassPathResource ; import org . springframework . core . io . Resource ; public class IBatisComponent extends DefaultComponent { public static final String DEFAULT_CONFIG_URI = "SqlMapConfig.xml" ; private static final transient Log LOG = LogFactory . getLog ( IBatisComponent . class ) ; private SqlMapClient sqlMapClient ; private Resource sqlMapResource ; public IBatisComponent ( ) { } public IBatisComponent ( SqlMapClient sqlMapClient ) { this . sqlMapClient = sqlMapClient ; } public SqlMapClient getSqlMapClient ( ) throws IOException { if ( sqlMapClient == null ) { sqlMapClient = createSqlMapClient ( ) ; } return sqlMapClient ; } public void setSqlMapClient ( SqlMapClient sqlMapClient ) { this . sqlMapClient = sqlMapClient ; } public Resource getSqlMapResource ( ) { if ( sqlMapResource == null ) { sqlMapResource = new ClassPathResource ( DEFAULT_CONFIG_URI ) ; LOG . debug ( "Defaulting to use the iBatis configuration from: " + sqlMapResource ) ; } return sqlMapResource ; } public void setSqlMapResource ( Resource sqlMapResource ) { this . sqlMapResource = sqlMapResource ; } protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new IBatisEndpoint ( uri , this , remaining ) ; } protected SqlMapClient createSqlMapClient ( ) throws IOException { InputStream in = getSqlMapResource ( ) . getInputStream ( ) ; return SqlMapClientBuilder . buildSqlMapClient ( in ) ; } } 	0
package org . apache . camel . util ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLDecoder ; import java . util . Arrays ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . jar . JarEntry ; import java . util . jar . JarInputStream ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResolverUtil < T > { protected static final transient Log LOG = LogFactory . getLog ( ResolverUtil . class ) ; public static interface Test { boolean matches ( Class type ) ; } public static class IsA implements Test { private Class parent ; public IsA ( Class parentType ) { this . parent = parentType ; } public boolean matches ( Class type ) { return type != null && parent . isAssignableFrom ( type ) ; } @ Override public String toString ( ) { return "is assignable to " + parent . getSimpleName ( ) ; } } public static class AnnotatedWith implements Test { private Class < ? extends Annotation > annotation ; public AnnotatedWith ( Class < ? extends Annotation > annotation ) { this . annotation = annotation ; } public boolean matches ( Class type ) { return type != null && type . isAnnotationPresent ( annotation ) ; } @ Override public String toString ( ) { return "annotated with @" + annotation . getSimpleName ( ) ; } } private Set < Class < ? extends T > > matches = new HashSet < Class < ? extends T > > ( ) ; private Set < ClassLoader > classLoaders ; public Set < Class < ? extends T > > getClasses ( ) { return matches ; } public Set < ClassLoader > getClassLoaders ( ) { if ( classLoaders == null ) { classLoaders = new HashSet < ClassLoader > ( ) ; classLoaders . add ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; classLoaders . add ( ResolverUtil . class . getClassLoader ( ) ) ; } return classLoaders ; } public void setClassLoaders ( Set < ClassLoader > classLoaders ) { this . classLoaders = classLoaders ; } public void findImplementations ( Class parent , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for implementations of " + parent . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new IsA ( parent ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void findAnnotated ( Class < ? extends Annotation > annotation , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for annotations of " + annotation . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new AnnotatedWith ( annotation ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void find ( Test test , String packageName ) { packageName = packageName . replace ( '.' , '/' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; for ( ClassLoader classLoader : set ) { find ( test , packageName , classLoader ) ; } } protected void find ( Test test , String packageName , ClassLoader loader ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching for: " + test + " in package: " + packageName + " using classloader: " + loader . getClass ( ) . getName ( ) ) ; } if ( loader . getClass ( ) . getName ( ) . endsWith ( "org.apache.felix.framework.searchpolicy.ContentClassLoader" ) ) { LOG . trace ( "This is not an URL classloader, skipping" ) ; return ; } try { Method mth = loader . getClass ( ) . getMethod ( "getBundle" , new Class [ ] { } ) ; if ( mth != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from osgi buindle using classloader: " + loader ) ; } loadImplementationsInBundle ( test , packageName , loader , mth ) ; return ; } } catch ( NoSuchMethodException e ) { LOG . trace ( "It's not an osgi bundle classloader" ) ; } Enumeration < URL > urls ; try { urls = getResources ( loader , packageName ) ; if ( ! urls . hasMoreElements ( ) ) { LOG . trace ( "No URLs returned by classloader" ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read package: " + packageName , ioe ) ; return ; } while ( urls . hasMoreElements ( ) ) { URL url = null ; try { url = urls . nextElement ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "URL from classloader: " + url ) ; } String urlPath = url . getFile ( ) ; urlPath = URLDecoder . decode ( urlPath , "UTF-8" ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Decoded urlPath: " + urlPath ) ; } if ( urlPath . startsWith ( "file:" ) ) { urlPath = urlPath . substring ( 5 ) ; } if ( urlPath . startsWith ( "bundle:" ) ) { LOG . trace ( "It's a virtual osgi bundle, skipping" ) ; continue ; } if ( urlPath . indexOf ( '!' ) > 0 ) { urlPath = urlPath . substring ( 0 , urlPath . indexOf ( '!' ) ) ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Scanning for classes in [" + urlPath + "] matching criteria: " + test ) ; } File file = new File ( urlPath ) ; if ( file . isDirectory ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from directory: " + file ) ; } loadImplementationsInDirectory ( test , packageName , file ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from jar: " + file ) ; } loadImplementationsInJar ( test , packageName , file ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read entries in url: " + url , ioe ) ; } } } protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Getting resource URL for package: " + packageName + " with classloader: " + loader ) ; } return loader . getResources ( packageName ) ; } private void loadImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { Set < String > urls = OsgiUtil . getImplementationsInBundle ( test , packageName , loader , mth ) ; if ( urls != null ) { for ( String url : urls ) { addIfMatching ( test , url ) ; } } } private static final class OsgiUtil { private OsgiUtil ( ) { } static Set < String > getImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { try { org . osgi . framework . Bundle bundle = ( org . osgi . framework . Bundle ) mth . invoke ( loader ) ; org . osgi . framework . Bundle [ ] bundles = bundle . getBundleContext ( ) . getBundles ( ) ; Set < String > urls = new HashSet < String > ( ) ; for ( org . osgi . framework . Bundle bd : bundles ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching in bundle:" + bd ) ; } Enumeration < URL > paths = bd . findEntries ( "/" + packageName , "*.class" , true ) ; while ( paths != null && paths . hasMoreElements ( ) ) { URL path = paths . nextElement ( ) ; urls . add ( path . getPath ( ) . substring ( 1 ) ) ; } } return urls ; } catch ( Throwable t ) { LOG . error ( "Could not search osgi bundles for classes matching criteria: " + test + "due to an Exception: " + t . getMessage ( ) ) ; return null ; } } } private void loadImplementationsInDirectory ( Test test , String parent , File location ) { File [ ] files = location . listFiles ( ) ; StringBuilder builder = null ; for ( File file : files ) { builder = new StringBuilder ( 100 ) ; String name = file . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; builder . append ( parent ) . append ( "/" ) . append ( name ) ; String packageOrClass = parent == null ? name : builder . toString ( ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageOrClass , file ) ; } else if ( name . endsWith ( ".class" ) ) { addIfMatching ( test , packageOrClass ) ; } } } } private void loadImplementationsInJar ( Test test , String parent , File jarfile ) { JarInputStream jarStream = null ; try { jarStream = new JarInputStream ( new FileInputStream ( jarfile ) ) ; JarEntry entry ; while ( ( entry = jarStream . getNextJarEntry ( ) ) != null ) { String name = entry . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; if ( ! entry . isDirectory ( ) && name . startsWith ( parent ) && name . endsWith ( ".class" ) ) { addIfMatching ( test , name ) ; } } } } catch ( IOException ioe ) { LOG . error ( "Could not search jar file '" + jarfile + "' for classes matching criteria: " + test + " due to an IOException: " + ioe . getMessage ( ) , ioe ) ; } finally { ObjectHelper . close ( jarStream , jarfile . getPath ( ) , LOG ) ; } } protected void addIfMatching ( Test test , String fqn ) { try { String externalName = fqn . substring ( 0 , fqn . indexOf ( '.' ) ) . replace ( '/' , '.' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; boolean found = false ; for ( ClassLoader classLoader : set ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Testing for class " + externalName + " matches criteria [" + test + "]" ) ; } try { Class type = classLoader . loadClass ( externalName ) ; if ( test . matches ( type ) ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Found class: " + type + " in classloader: " + classLoader ) ; } matches . add ( ( Class < T > ) type ) ; } found = true ; break ; } catch ( ClassNotFoundException e ) { LOG . debug ( "Could not find class '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } catch ( NoClassDefFoundError e ) { LOG . debug ( "Could not find the class defintion '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } } if ( ! found ) { LOG . warn ( "Could not find class '" + fqn + "' in any classloaders: " + set ) ; } } catch ( Throwable t ) { LOG . warn ( "Could not examine class '" + fqn + "' due to a " + t . getClass ( ) . getName ( ) + " with message: " + t . getMessage ( ) , t ) ; } } } 	1
package org . apache . camel . component . bean ; import java . util . Collection ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; public class AmbiguousMethodCallException extends CamelExchangeException { private final Collection < MethodInfo > methods ; public AmbiguousMethodCallException ( Exchange exchange , Collection < MethodInfo > methods ) { super ( "Ambiguous method invocations possible: " + methods , exchange ) ; this . methods = methods ; } public Collection < MethodInfo > getMethods ( ) { return methods ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . UnmarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "unmarshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class UnmarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public UnmarshalType ( ) { } public UnmarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public UnmarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "unmarshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new UnmarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . processor ; import java . io . ByteArrayOutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . spi . DataFormat ; public class MarshalProcessor implements Processor { private final DataFormat dataFormat ; public MarshalProcessor ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } public void process ( Exchange exchange ) throws Exception { ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; Message out = exchange . getOut ( true ) ; out . copyFrom ( in ) ; dataFormat . marshal ( exchange , body , buffer ) ; byte [ ] data = buffer . toByteArray ( ) ; out . setBody ( data ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class BuilderSupport { private CamelContext context ; private ErrorHandlerBuilder errorHandlerBuilder ; private boolean inheritErrorHandler = true ; protected BuilderSupport ( CamelContext context ) { this . context = context ; } protected BuilderSupport ( BuilderSupport parent ) { this . context = parent . getContext ( ) ; this . inheritErrorHandler = parent . inheritErrorHandler ; if ( inheritErrorHandler && parent . errorHandlerBuilder != null ) { this . errorHandlerBuilder = parent . errorHandlerBuilder . copy ( ) ; } } public ValueBuilder header ( String name ) { return Builder . header ( name ) ; } public ValueBuilder body ( ) { return Builder . body ( ) ; } public < T > ValueBuilder body ( Class < T > type ) { return Builder . bodyAs ( type ) ; } public ValueBuilder outBody ( ) { return Builder . outBody ( ) ; } public < T > ValueBuilder outBody ( Class < T > type ) { return Builder . outBodyAs ( type ) ; } public ValueBuilder faultBody ( ) { return Builder . faultBody ( ) ; } public < T > ValueBuilder faultBodyAs ( Class < T > type ) { return Builder . faultBodyAs ( type ) ; } public ValueBuilder systemProperty ( String name ) { return Builder . systemProperty ( name ) ; } public ValueBuilder systemProperty ( String name , String defaultValue ) { return Builder . systemProperty ( name , defaultValue ) ; } public ValueBuilder constant ( Object value ) { return Builder . constant ( value ) ; } public Endpoint endpoint ( String uri ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; Endpoint endpoint = getContext ( ) . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public < T extends Endpoint > T endpoint ( String uri , Class < T > type ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; T endpoint = getContext ( ) . getEndpoint ( uri , type ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public List < Endpoint > endpoints ( String ... uris ) throws NoSuchEndpointException { List < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; for ( String uri : uris ) { endpoints . add ( endpoint ( uri ) ) ; } return endpoints ; } public List < Endpoint > endpoints ( Endpoint ... endpoints ) { List < Endpoint > answer = new ArrayList < Endpoint > ( ) ; answer . addAll ( Arrays . asList ( endpoints ) ) ; return answer ; } public NoErrorHandlerBuilder noErrorHandler ( ) { return new NoErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( ) { return new LoggingErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( String log ) { return loggingErrorHandler ( LogFactory . getLog ( log ) ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log ) { return new LoggingErrorHandlerBuilder ( log ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log , LoggingLevel level ) { return new LoggingErrorHandlerBuilder ( log , level ) ; } public DeadLetterChannelBuilder deadLetterChannel ( ) { return new DeadLetterChannelBuilder ( ) ; } public DeadLetterChannelBuilder deadLetterChannel ( String deadLetterUri ) { return deadLetterChannel ( endpoint ( deadLetterUri ) ) ; } public DeadLetterChannelBuilder deadLetterChannel ( Endpoint deadLetterEndpoint ) { return new DeadLetterChannelBuilder ( new SendProcessor ( deadLetterEndpoint ) ) ; } public CamelContext getContext ( ) { return context ; } public void setContext ( CamelContext context ) { this . context = context ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public boolean isInheritErrorHandler ( ) { return inheritErrorHandler ; } public void setInheritErrorHandler ( boolean inheritErrorHandler ) { this . inheritErrorHandler = inheritErrorHandler ; } } 	1
package org . apache . camel . util ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class PackageHelper { private static final transient Log LOG = LogFactory . getLog ( PackageHelper . class ) ; private PackageHelper ( ) { } public static boolean isValidVersion ( String packageName , double minimumVersion ) { try { Package spring = Package . getPackage ( packageName ) ; String value = spring . getImplementationVersion ( ) ; if ( value != null ) { int idx = value . indexOf ( '.' ) ; if ( idx >= 0 ) { StringBuffer buffer = new StringBuffer ( value . substring ( 0 , ++ idx ) ) ; int i = idx ; for ( int size = value . length ( ) ; i < size ; i ++ ) { char ch = value . charAt ( i ) ; if ( Character . isDigit ( ch ) ) { buffer . append ( ch ) ; } } value = buffer . toString ( ) ; } double number = Double . parseDouble ( value ) ; return number >= minimumVersion ; } } catch ( Exception e ) { LOG . debug ( "Failed to find out " + packageName + " version: " + e , e ) ; } return true ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ThreadProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "thread" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThreadType extends ProcessorType < ProcessorType > { @ XmlAttribute ( required = false ) private Integer coreSize = 1 ; @ XmlAttribute ( required = false ) private Boolean daemon = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Long keepAliveTime ; @ XmlAttribute ( required = false ) private Integer maxSize = 1 ; @ XmlAttribute ( required = false ) private String name = "Thread Processor" ; @ XmlAttribute ( required = false ) private Integer priority = Thread . NORM_PRIORITY ; @ XmlAttribute ( required = false ) private Long stackSize ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private BlockingQueue < Runnable > taskQueue ; @ XmlTransient private ThreadGroup threadGroup ; @ XmlTransient private ThreadPoolExecutor executor ; public ThreadType ( ) { } public ThreadType ( int coreSize ) { this . coreSize = coreSize ; this . maxSize = coreSize ; } public ThreadType ( ThreadPoolExecutor executor ) { this . executor = executor ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } @ Override public String toString ( ) { return "Thread[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "thread" ; } @ Override public String getLabel ( ) { return "coreSize=" + coreSize ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ThreadProcessor thread = new ThreadProcessor ( ) ; thread . setExecutor ( executor ) ; if ( coreSize != null ) { thread . setCoreSize ( coreSize ) ; } if ( daemon != null ) { thread . setDaemon ( daemon ) ; } if ( keepAliveTime != null ) { thread . setKeepAliveTime ( keepAliveTime ) ; } if ( maxSize != null ) { thread . setMaxSize ( maxSize ) ; } thread . setName ( name ) ; thread . setPriority ( priority ) ; if ( stackSize != null ) { thread . setStackSize ( stackSize ) ; } thread . setTaskQueue ( taskQueue ) ; thread . setThreadGroup ( threadGroup ) ; ArrayList < Processor > pipe = new ArrayList < Processor > ( 2 ) ; pipe . add ( thread ) ; pipe . add ( createOutputsProcessor ( routeContext , outputs ) ) ; return new Pipeline ( pipe ) ; } public ThreadType coreSize ( int coreSize ) { setCoreSize ( coreSize ) ; return this ; } public ThreadType daemon ( boolean daemon ) { setDaemon ( daemon ) ; return this ; } public ThreadType keepAliveTime ( long keepAliveTime ) { setKeepAliveTime ( keepAliveTime ) ; return this ; } public ThreadType maxSize ( int maxSize ) { setMaxSize ( maxSize ) ; return this ; } public ThreadType name ( String name ) { setName ( name ) ; return this ; } public ThreadType priority ( int priority ) { setPriority ( priority ) ; return this ; } public ThreadType stackSize ( long stackSize ) { setStackSize ( stackSize ) ; return this ; } public ThreadType taskQueue ( BlockingQueue < Runnable > taskQueue ) { setTaskQueue ( taskQueue ) ; return this ; } public ThreadType threadGroup ( ThreadGroup threadGroup ) { setThreadGroup ( threadGroup ) ; return this ; } public ThreadType executor ( ThreadPoolExecutor executor ) { setExecutor ( executor ) ; return this ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public void setName ( String name ) { this . name = name ; } public void setPriority ( int priority ) { this . priority = priority ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public ThreadPoolExecutor getExecutor ( ) { return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } } 	1
package org . apache . camel . component . seda ; import java . util . Collection ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultProducer ; public class CollectionProducer extends DefaultProducer implements AsyncProcessor { private final Collection < Exchange > queue ; public CollectionProducer ( Endpoint endpoint , Collection < Exchange > queue ) { super ( endpoint ) ; this . queue = queue ; } public void process ( Exchange exchange ) throws Exception { queue . add ( exchange . copy ( ) ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { queue . add ( exchange . copy ( ) ) ; callback . done ( true ) ; return true ; } } 	0
package org . apache . camel . util ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . Registry ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class CamelContextHelper { private CamelContextHelper ( ) { } public static Endpoint getMandatoryEndpoint ( CamelContext camelContext , String uri ) throws NoSuchEndpointException { Endpoint endpoint = camelContext . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } else { return endpoint ; } } public static < T extends Endpoint > T getMandatoryEndpoint ( CamelContext camelContext , String uri , Class < T > type ) { Endpoint endpoint = getMandatoryEndpoint ( camelContext , uri ) ; return ObjectHelper . cast ( type , endpoint ) ; } public static < T > List < T > getSingletonEndpoints ( CamelContext camelContext , Class < T > type ) { List < T > answer = new ArrayList < T > ( ) ; Collection < Endpoint > endpoints = camelContext . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( type . isInstance ( endpoint ) ) { T value = type . cast ( endpoint ) ; answer . add ( value ) ; } } return answer ; } public static < T > T convertTo ( CamelContext context , Class < T > type , Object value ) { notNull ( context , "camelContext" ) ; return context . getTypeConverter ( ) . convertTo ( type , value ) ; } public static < T > T mandatoryConvertTo ( CamelContext context , Class < T > type , Object value ) { T answer = convertTo ( context , type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Value " + value + " converted to " + type . getName ( ) + " cannot be null" ) ; } return answer ; } public static < T > T newInstance ( CamelContext context , Class < T > beanType ) { return context . getInjector ( ) . newInstance ( beanType ) ; } public static Object lookup ( CamelContext context , String name ) { return context . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookup ( CamelContext context , String name , Class < T > beanType ) { return context . getRegistry ( ) . lookup ( name , beanType ) ; } public static Object mandatoryLookup ( CamelContext context , String name ) { Object answer = lookup ( context , name ) ; notNull ( answer , "registry entry called " + name ) ; return answer ; } public static < T > T mandatoryLookup ( CamelContext context , String name , Class < T > beanType ) { T answer = lookup ( context , name , beanType ) ; notNull ( answer , "registry entry called " + name + " of type " + beanType . getName ( ) ) ; return answer ; } public static Language resolveMandatoryLanguage ( CamelContext camelContext , String languageName ) { notNull ( camelContext , "camelContext" ) ; notNull ( languageName , "languageName" ) ; Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Could not resolve language: " + languageName ) ; } return language ; } public static Expression resolveMandatoryExpression ( CamelContext camelContext , String languageName , String expressionText ) { notNull ( expressionText , "expressionText" ) ; Language language = resolveMandatoryLanguage ( camelContext , languageName ) ; Expression < Exchange > expression = language . createExpression ( expressionText ) ; if ( expression == null ) { throw new IllegalArgumentException ( "Could not create expression: " + expressionText + " with language: " + language ) ; } return expression ; } } 	1
package org . apache . camel . dataformat . xstream ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . stream . XMLStreamWriter ; import com . thoughtworks . xstream . XStream ; import com . thoughtworks . xstream . io . HierarchicalStreamReader ; import com . thoughtworks . xstream . io . HierarchicalStreamWriter ; import com . thoughtworks . xstream . io . xml . QNameMap ; import com . thoughtworks . xstream . io . xml . StaxReader ; import com . thoughtworks . xstream . io . xml . StaxWriter ; import org . apache . camel . Exchange ; import org . apache . camel . converter . jaxp . StaxConverter ; import org . apache . camel . spi . DataFormat ; public class XStreamDataFormat implements DataFormat { private XStream xstream ; private StaxConverter staxConverter ; public void marshal ( Exchange exchange , Object body , OutputStream stream ) throws Exception { HierarchicalStreamWriter writer = createHierarchicalStreamWriter ( exchange , body , stream ) ; getXStream ( ) . marshal ( body , writer ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { HierarchicalStreamReader reader = createHierarchicalStreamReader ( exchange , stream ) ; return getXStream ( ) . unmarshal ( reader ) ; } public XStream getXStream ( ) { if ( xstream == null ) { xstream = createXStream ( ) ; } return xstream ; } public void setXStream ( XStream xstream ) { this . xstream = xstream ; } public StaxConverter getStaxConverter ( ) { if ( staxConverter == null ) { staxConverter = new StaxConverter ( ) ; } return staxConverter ; } public void setStaxConverter ( StaxConverter staxConverter ) { this . staxConverter = staxConverter ; } protected XStream createXStream ( ) { return new XStream ( ) ; } protected HierarchicalStreamWriter createHierarchicalStreamWriter ( Exchange exchange , Object body , OutputStream stream ) throws XMLStreamException { XMLStreamWriter xmlWriter = getStaxConverter ( ) . createXMLStreamWriter ( stream ) ; return new StaxWriter ( new QNameMap ( ) , xmlWriter ) ; } protected HierarchicalStreamReader createHierarchicalStreamReader ( Exchange exchange , InputStream stream ) throws XMLStreamException { XMLStreamReader xmlReader = getStaxConverter ( ) . createXMLStreamReader ( stream ) ; return new StaxReader ( new QNameMap ( ) , xmlReader ) ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Pipeline extends MulticastProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( Pipeline . class ) ; public Pipeline ( Collection < Processor > processors ) { super ( processors ) ; } public static Processor newInstance ( List < Processor > processors ) { if ( processors . isEmpty ( ) ) { return null ; } else if ( processors . size ( ) == 1 ) { return processors . get ( 0 ) ; } return new Pipeline ( processors ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange original , AsyncCallback callback ) { Iterator < Processor > processors = getProcessors ( ) . iterator ( ) ; Exchange nextExchange = original ; boolean first = true ; while ( true ) { if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } if ( ! processors . hasNext ( ) ) { break ; } AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( first ) { first = false ; } else { nextExchange = createNextExchange ( processor , nextExchange ) ; } boolean sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return false ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( true ) ; return true ; } private boolean process ( final Exchange original , final Exchange exchange , final AsyncCallback callback , final Iterator < Processor > processors , AsyncProcessor processor ) { return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } Exchange nextExchange = exchange ; while ( processors . hasNext ( ) ) { AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } nextExchange = createNextExchange ( processor , nextExchange ) ; sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( false ) ; } } ) ; } protected Exchange createNextExchange ( Processor producer , Exchange previousExchange ) { Exchange answer = previousExchange . newInstance ( ) ; answer . getProperties ( ) . putAll ( previousExchange . getProperties ( ) ) ; Message previousOut = previousExchange . getOut ( false ) ; Message in = answer . getIn ( ) ; if ( previousOut != null ) { in . copyFrom ( previousOut ) ; } else { in . copyFrom ( previousExchange . getIn ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Pipeline" + getProcessors ( ) ; } } 	1
package org . apache . camel . component . xmpp ; import java . util . Iterator ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . jivesoftware . smack . PacketListener ; import org . jivesoftware . smack . packet . Message ; import org . jivesoftware . smack . packet . Packet ; import org . jivesoftware . smack . packet . RosterPacket ; public class XmppConsumer extends DefaultConsumer < XmppExchange > implements PacketListener { private static final transient Log LOG = LogFactory . getLog ( XmppConsumer . class ) ; private final XmppEndpoint endpoint ; public XmppConsumer ( XmppEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; endpoint . getConnection ( ) . addPacketListener ( this , endpoint . getFilter ( ) ) ; } @ Override protected void doStop ( ) throws Exception { endpoint . getConnection ( ) . removePacketListener ( this ) ; super . doStop ( ) ; } public void processPacket ( Packet packet ) { if ( packet instanceof Message ) { Message message = ( Message ) packet ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "<<<< message: " + message . getBody ( ) ) ; } XmppExchange exchange = endpoint . createExchange ( message ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } else if ( packet instanceof RosterPacket ) { RosterPacket rosterPacket = ( RosterPacket ) packet ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Roster packet with : " + rosterPacket . getRosterItemCount ( ) + " item(s)" ) ; Iterator rosterItems = rosterPacket . getRosterItems ( ) ; while ( rosterItems . hasNext ( ) ) { Object item = rosterItems . next ( ) ; LOG . debug ( "Roster item: " + item ) ; } } } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "<<<< ignored packet: " + packet ) ; } } } } 	0
package org . apache . camel . component . mock ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MockEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( MockEndpoint . class ) ; private int expectedCount ; private int counter ; private Processor defaultProcessor ; private Map < Integer , Processor > processors ; private List < Exchange > receivedExchanges ; private List < Throwable > failures ; private List < Runnable > tests ; private CountDownLatch latch ; private long sleepForEmptyTest ; private long resultWaitTime ; private int expectedMinimumCount ; private List expectedBodyValues ; private List actualBodyValues ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; private String headerName ; private String headerValue ; private Object actualHeader ; private Processor reporter ; public MockEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; init ( ) ; } public MockEndpoint ( String endpointUri ) { super ( endpointUri ) ; init ( ) ; } public static MockEndpoint resolve ( CamelContext context , String uri ) { return CamelContextHelper . getMandatoryEndpoint ( context , uri , MockEndpoint . class ) ; } public static void assertWait ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; long left = unit . toMillis ( timeout ) ; long end = start + left ; for ( MockEndpoint endpoint : endpoints ) { if ( ! endpoint . await ( left , TimeUnit . MILLISECONDS ) ) { throw new AssertionError ( "Timeout waiting for endpoints to receive enough messages. " + endpoint . getEndpointUri ( ) + " timed out." ) ; } left = end - System . currentTimeMillis ( ) ; if ( left <= 0 ) { left = 0 ; } } } public static void assertIsSatisfied ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { assertWait ( timeout , unit , endpoints ) ; for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( CamelContext context ) throws InterruptedException { ObjectHelper . notNull ( context , "camelContext" ) ; Collection < Endpoint > endpoints = context . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( endpoint instanceof MockEndpoint ) { MockEndpoint mockEndpoint = ( MockEndpoint ) endpoint ; mockEndpoint . assertIsSatisfied ( ) ; } } } public static void expectsMessageCount ( int count , MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { MockEndpoint . expectsMessageCount ( count ) ; } } public List < Exchange > getExchanges ( ) { return getReceivedExchanges ( ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "You cannot consume from this endpoint" ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) { onExchange ( exchange ) ; } } ; } public void reset ( ) { init ( ) ; } public void whenExchangeReceived ( int index , Processor processor ) { this . processors . put ( index , processor ) ; } public void whenAnyExchangeReceived ( Processor processor ) { this . defaultProcessor = processor ; } public void assertIsSatisfied ( ) throws InterruptedException { assertIsSatisfied ( sleepForEmptyTest ) ; } public void assertIsSatisfied ( long timeoutForEmptyEndpoints ) throws InterruptedException { LOG . info ( "Asserting: " + this + " is satisfied" ) ; if ( expectedCount >= 0 ) { if ( expectedCount != getReceivedCounter ( ) ) { if ( expectedCount == 0 ) { if ( timeoutForEmptyEndpoints > 0 ) { LOG . debug ( "Sleeping for: " + timeoutForEmptyEndpoints + " millis to check there really are no messages received" ) ; Thread . sleep ( timeoutForEmptyEndpoints ) ; } } else { waitForCompleteLatch ( ) ; } } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedMinimumCount > 0 && getReceivedCounter ( ) < expectedMinimumCount ) { waitForCompleteLatch ( ) ; } if ( expectedMinimumCount >= 0 ) { int receivedCounter = getReceivedCounter ( ) ; assertTrue ( "Received message count " + receivedCounter + ", expected at least " + expectedCount , expectedCount <= receivedCounter ) ; } for ( Runnable test : tests ) { test . run ( ) ; } for ( Throwable failure : failures ) { if ( failure != null ) { LOG . error ( "Caught on " + getEndpointUri ( ) + " Exception: " + failure , failure ) ; fail ( "Failed due to caught exception: " + failure ) ; } } } public void assertIsNotSatisfied ( ) throws InterruptedException { try { assertIsSatisfied ( ) ; fail ( "Expected assertion failure!" ) ; } catch ( AssertionError e ) { LOG . info ( "Caught expected failure: " + e ) ; } } public void expectedMessageCount ( int expectedCount ) { setExpectedMessageCount ( expectedCount ) ; } public void expectedMinimumMessageCount ( int expectedCount ) { setMinimumExpectedMessageCount ( expectedCount ) ; } public void expectedHeaderReceived ( String name , String value ) { this . headerName = name ; this . headerValue = value ; expects ( new Runnable ( ) { public void run ( ) { assertTrue ( "No header with name " + headerName + " found." , actualHeader != null ) ; assertEquals ( "Header of message" , headerValue , actualHeader ) ; } } ) ; } public void expectedBodiesReceived ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; Object actualBody = actualBodyValues . get ( i ) ; assertEquals ( "Body of message: " + i , expectedBody , actualBody ) ; } } } ) ; } public void expectedBodiesReceived ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; bodyList . addAll ( Arrays . asList ( bodies ) ) ; expectedBodiesReceived ( bodyList ) ; } public void expectsAscending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesAscending ( expression ) ; } } ) ; } public void expectsDescending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesDescending ( expression ) ; } } ) ; } public void expectsNoDuplicates ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertNoDuplicates ( expression ) ; } } ) ; } public void assertMessagesAscending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , true ) ; } public void assertMessagesDescending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , false ) ; } protected void assertMessagesSorted ( Expression < Exchange > expression , boolean ascending ) { String type = ascending ? "ascending" : "descending" ; ExpressionComparator comparator = new ExpressionComparator ( expression ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 1 ; i < list . size ( ) ; i ++ ) { int j = i - 1 ; Exchange e1 = list . get ( j ) ; Exchange e2 = list . get ( i ) ; int result = comparator . compare ( e1 , e2 ) ; if ( result == 0 ) { fail ( "Messages not " + type + ". Messages" + j + " and " + i + " are equal with value: " + expression . evaluate ( e1 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { if ( ! ascending ) { result = result * - 1 ; } if ( result > 0 ) { fail ( "Messages not " + type + ". Message " + j + " has value: " + expression . evaluate ( e1 ) + " and message " + i + " has value: " + expression . evaluate ( e2 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } } } } public void assertNoDuplicates ( Expression < Exchange > expression ) { Map < Object , Exchange > map = new HashMap < Object , Exchange > ( ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Exchange e2 = list . get ( i ) ; Object key = expression . evaluate ( e2 ) ; Exchange e1 = map . get ( key ) ; if ( e1 != null ) { fail ( "Duplicate message found on message " + i + " has value: " + key + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { map . put ( key , e2 ) ; } } } public void expects ( Runnable runnable ) { tests . add ( runnable ) ; } public AssertionClause message ( final int messageIndex ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { applyAssertionOn ( MockEndpoint . this , messageIndex , assertExchangeReceived ( messageIndex ) ) ; } } ; expects ( clause ) ; return clause ; } public AssertionClause allMessages ( ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { applyAssertionOn ( MockEndpoint . this , index ++ , exchange ) ; } } } ; expects ( clause ) ; return clause ; } public Exchange assertExchangeReceived ( int index ) { int count = getReceivedCounter ( ) ; assertTrue ( "Not enough messages received. Was: " + count , count > index ) ; return getReceivedExchanges ( ) . get ( index ) ; } public List < Throwable > getFailures ( ) { return failures ; } public int getReceivedCounter ( ) { return getReceivedExchanges ( ) . size ( ) ; } public List < Exchange > getReceivedExchanges ( ) { return receivedExchanges ; } public int getExpectedCount ( ) { return expectedCount ; } public long getSleepForEmptyTest ( ) { return sleepForEmptyTest ; } public void setSleepForEmptyTest ( long sleepForEmptyTest ) { this . sleepForEmptyTest = sleepForEmptyTest ; } public long getResultWaitTime ( ) { return resultWaitTime ; } public void setResultWaitTime ( long resultWaitTime ) { this . resultWaitTime = resultWaitTime ; } public void setExpectedMessageCount ( int expectedCount ) { this . expectedCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedCount ) ; } } public void setMinimumExpectedMessageCount ( int expectedCount ) { this . expectedMinimumCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedMinimumCount ) ; } } public Processor getReporter ( ) { return reporter ; } public void setReporter ( Processor reporter ) { this . reporter = reporter ; } private void init ( ) { expectedCount = - 1 ; counter = 0 ; processors = new HashMap < Integer , Processor > ( ) ; receivedExchanges = new CopyOnWriteArrayList < Exchange > ( ) ; failures = new CopyOnWriteArrayList < Throwable > ( ) ; tests = new CopyOnWriteArrayList < Runnable > ( ) ; latch = null ; sleepForEmptyTest = 1000L ; resultWaitTime = 20000L ; expectedMinimumCount = - 1 ; expectedBodyValues = null ; actualBodyValues = new ArrayList ( ) ; } protected synchronized void onExchange ( Exchange exchange ) { try { if ( reporter != null ) { reporter . process ( exchange ) ; } performAssertions ( exchange ) ; } catch ( Throwable e ) { failures . add ( e ) ; } if ( latch != null ) { latch . countDown ( ) ; } } protected void performAssertions ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object actualBody = in . getBody ( ) ; if ( headerName != null ) { actualHeader = in . getHeader ( headerName ) ; } if ( expectedBodyValues != null ) { int index = actualBodyValues . size ( ) ; if ( expectedBodyValues . size ( ) > index ) { Object expectedBody = expectedBodyValues . get ( index ) ; if ( expectedBody != null ) { actualBody = in . getBody ( expectedBody . getClass ( ) ) ; } actualBodyValues . add ( actualBody ) ; } } LOG . debug ( getEndpointUri ( ) + " >>>> " + ( ++ counter ) + " : " + exchange + " with body: " + actualBody ) ; receivedExchanges . add ( exchange ) ; Processor processor = processors . get ( getReceivedCounter ( ) ) != null ? processors . get ( getReceivedCounter ( ) ) : defaultProcessor ; if ( processor != null ) { processor . process ( exchange ) ; } } protected void waitForCompleteLatch ( ) throws InterruptedException { if ( latch == null ) { fail ( "Should have a latch!" ) ; } LOG . debug ( "Waiting on the latch for: " + resultWaitTime + " millis" ) ; latch . await ( resultWaitTime , TimeUnit . MILLISECONDS ) ; } protected void assertEquals ( String message , Object expectedValue , Object actualValue ) { if ( ! ObjectHelper . equal ( expectedValue , actualValue ) ) { fail ( message + ". Expected: <" + expectedValue + "> but was: <" + actualValue + ">" ) ; } } protected void assertTrue ( String message , boolean predicate ) { if ( ! predicate ) { fail ( message ) ; } } protected void fail ( Object message ) { if ( LOG . isDebugEnabled ( ) ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { LOG . debug ( "Received[" + ( ++ index ) + "]: " + exchange ) ; } } throw new AssertionError ( getEndpointUri ( ) + " " + message ) ; } public int getExpectedMinimumCount ( ) { return expectedMinimumCount ; } public void await ( ) throws InterruptedException { if ( latch != null ) { latch . await ( ) ; } } public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { if ( latch != null ) { return latch . await ( timeout , unit ) ; } return true ; } public boolean isSingleton ( ) { return true ; } } 	1
package org . apache . camel . component . validator . jing ; import java . util . Map ; public class RelaxNGCompactSyntaxComponent extends JingComponent { protected void configureValidator ( JingValidator validator , String uri , String remaining , Map parameters ) throws Exception { validator . setCompactSyntax ( true ) ; super . configureValidator ( validator , uri , remaining , parameters ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . TransformProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "transform" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TransformType extends ExpressionNode { public TransformType ( ) { } public TransformType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Transform[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "transform" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; Processor childProcessor = routeContext . createProcessor ( this ) ; return new TransformProcessor ( expr , childProcessor ) ; } } 	1
package org . apache . camel . impl . converter ; import java . lang . reflect . Method ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; public class InstanceMethodTypeConverter implements TypeConverter { private final CachingInjector injector ; private final Method method ; public InstanceMethodTypeConverter ( CachingInjector injector , Method method ) { this . injector = injector ; this . method = method ; } @ Override public String toString ( ) { return "InstanceMethodTypeConverter: " + method ; } public < T > T convertTo ( Class < T > type , Object value ) { Object instance = injector . newInstance ( ) ; if ( instance == null ) { throw new RuntimeCamelException ( "Could not instantiate an instance of: " + type . getName ( ) ) ; } return ( T ) ObjectHelper . invokeMethod ( method , instance , value ) ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . nio . ByteBuffer ; import org . apache . camel . Converter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class NIOConverter { private static final transient Log LOG = LogFactory . getLog ( NIOConverter . class ) ; private NIOConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { return buffer . array ( ) ; } @ Converter public static String toString ( ByteBuffer buffer ) { return IOConverter . toString ( buffer . array ( ) ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; } @ Converter public static ByteBuffer toByteBuffer ( File file ) throws IOException { InputStream in = null ; try { byte [ ] buf = new byte [ ( int ) file . length ( ) ] ; in = new BufferedInputStream ( new FileInputStream ( file ) ) ; int sizeLeft = ( int ) file . length ( ) ; int offset = 0 ; while ( sizeLeft > 0 ) { int readSize = in . read ( buf , offset , sizeLeft ) ; sizeLeft -= readSize ; offset += readSize ; } return ByteBuffer . wrap ( buf ) ; } finally { try { if ( in != null ) { in . close ( ) ; } } catch ( IOException e ) { LOG . warn ( "Failed to close file stream: " + file . getPath ( ) , e ) ; } } } @ Converter public static ByteBuffer toByteBuffer ( String value ) { ByteBuffer buf = ByteBuffer . allocate ( value . length ( ) ) ; byte [ ] bytes = value . getBytes ( ) ; buf . put ( bytes ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Short value ) { ByteBuffer buf = ByteBuffer . allocate ( 2 ) ; buf . putShort ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Integer value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Long value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putLong ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Float value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putFloat ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Double value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putDouble ( value ) ; return buf ; } @ Converter public static InputStream toInputStream ( ByteBuffer bufferbuffer ) { return IOConverter . toInputStream ( toByteArray ( bufferbuffer ) ) ; } } 	1
package org . apache . camel . component . jpa ; import java . lang . reflect . Method ; import java . util . List ; import javax . persistence . EntityManager ; import javax . persistence . LockModeType ; import javax . persistence . PersistenceException ; import javax . persistence . Query ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . orm . jpa . JpaCallback ; public class JpaConsumer extends ScheduledPollConsumer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( JpaConsumer . class ) ; private final JpaEndpoint endpoint ; private final TransactionStrategy template ; private QueryFactory queryFactory ; private DeleteHandler < Object > deleteHandler ; private String query ; private String namedQuery ; private String nativeQuery ; public JpaConsumer ( JpaEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; this . template = endpoint . createTransactionStrategy ( ) ; } protected void poll ( ) throws Exception { template . execute ( new JpaCallback ( ) { public Object doInJpa ( EntityManager entityManager ) throws PersistenceException { Query query = getQueryFactory ( ) . createQuery ( entityManager ) ; configureParameters ( query ) ; List results = query . getResultList ( ) ; for ( Object result : results ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Processing new entity: " + result ) ; } if ( lockEntity ( result , entityManager ) ) { Exchange exchange = createExchange ( result ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { throw new PersistenceException ( e ) ; } getDeleteHandler ( ) . deleteObject ( entityManager , result ) ; } } entityManager . flush ( ) ; return null ; } } ) ; } public JpaEndpoint getEndpoint ( ) { return endpoint ; } public QueryFactory getQueryFactory ( ) { if ( queryFactory == null ) { queryFactory = createQueryFactory ( ) ; if ( queryFactory == null ) { throw new IllegalArgumentException ( "No queryType property configured on this consumer, nor an entityType configured on the endpoint so cannot consume" ) ; } } return queryFactory ; } public void setQueryFactory ( QueryFactory queryFactory ) { this . queryFactory = queryFactory ; } public DeleteHandler getDeleteHandler ( ) { if ( deleteHandler == null ) { deleteHandler = createDeleteHandler ( ) ; } return deleteHandler ; } public void setDeleteHandler ( DeleteHandler deleteHandler ) { this . deleteHandler = deleteHandler ; } public String getNamedQuery ( ) { return namedQuery ; } public void setNamedQuery ( String namedQuery ) { this . namedQuery = namedQuery ; } public String getNativeQuery ( ) { return nativeQuery ; } public void setNativeQuery ( String nativeQuery ) { this . nativeQuery = nativeQuery ; } public String getQuery ( ) { return query ; } public void setQuery ( String query ) { this . query = query ; } protected boolean lockEntity ( Object entity , EntityManager entityManager ) { if ( ! getEndpoint ( ) . isConsumeDelete ( ) || ! getEndpoint ( ) . isConsumeLockEntity ( ) ) { return true ; } try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Acquiring exclusive lock on entity: " + entity ) ; } entityManager . lock ( entity , LockModeType . WRITE ) ; return true ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Failed to achieve lock on entity: " + entity + ". Reason: " + e , e ) ; } return false ; } } protected QueryFactory createQueryFactory ( ) { if ( query != null ) { return QueryBuilder . query ( query ) ; } else if ( namedQuery != null ) { return QueryBuilder . namedQuery ( namedQuery ) ; } else if ( nativeQuery != null ) { return QueryBuilder . nativeQuery ( nativeQuery ) ; } else { Class < ? > entityType = endpoint . getEntityType ( ) ; if ( entityType == null ) { return null ; } else { return QueryBuilder . query ( "select x from " + entityType . getName ( ) + " x" ) ; } } } protected DeleteHandler < Object > createDeleteHandler ( ) { Class < ? > entityType = getEndpoint ( ) . getEntityType ( ) ; if ( entityType != null ) { List < Method > methods = ObjectHelper . findMethodsWithAnnotation ( entityType , Consumed . class ) ; if ( methods . size ( ) > 1 ) { throw new IllegalArgumentException ( "Only one method can be annotated with the @Consumed annotation but found: " + methods ) ; } else if ( methods . size ( ) == 1 ) { final Method method = methods . get ( 0 ) ; return new DeleteHandler < Object > ( ) { public void deleteObject ( EntityManager entityManager , Object entityBean ) { ObjectHelper . invokeMethod ( method , entityBean ) ; } } ; } } if ( getEndpoint ( ) . isConsumeDelete ( ) ) { return new DeleteHandler < Object > ( ) { public void deleteObject ( EntityManager entityManager , Object entityBean ) { entityManager . remove ( entityBean ) ; } } ; } else { return new DeleteHandler < Object > ( ) { public void deleteObject ( EntityManager entityManager , Object entityBean ) { } } ; } } protected void configureParameters ( Query query ) { int maxResults = endpoint . getMaximumResults ( ) ; if ( maxResults > 0 ) { query . setMaxResults ( maxResults ) ; } } protected Exchange createExchange ( Object result ) { Exchange exchange = endpoint . createExchange ( ) ; exchange . getIn ( ) . setBody ( result ) ; return exchange ; } } 	0
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ObjectHelper ; public class Namespaces { public static final String DEFAULT_NAMESPACE = "http://activemq.apache.org/camel/schema/spring" ; public static final String IN_NAMESPACE = "http://camel.apache.org/xml/in/" ; public static final String OUT_NAMESPACE = "http://camel.apache.org/xml/out/" ; public static final String SYSTEM_PROPERTIES_NAMESPACE = "http://camel.apache.org/xml/variables/system-properties" ; public static final String ENVIRONMENT_VARIABLES = "http://camel.apache.org/xml/variables/environment-variables" ; public static final String EXCHANGE_PROPERTY = "http://camel.apache.org/xml/variables/exchange-property" ; private Map < String , String > namespaces = new HashMap < String , String > ( ) ; public Namespaces ( Element element ) { add ( element ) ; } public Namespaces ( String prefix , String uri ) { add ( prefix , uri ) ; } public static boolean isMatchingNamespaceOrEmptyNamespace ( String namespaceURI , String expectedNamespace ) { return ObjectHelper . isNullOrBlank ( namespaceURI ) || namespaceURI . equals ( expectedNamespace ) ; } public Namespaces add ( String prefix , String uri ) { namespaces . put ( prefix , uri ) ; return this ; } public Namespaces add ( Element element ) { Node parentNode = element . getParentNode ( ) ; if ( parentNode instanceof org . w3c . dom . Element ) { add ( ( Element ) parentNode ) ; } NamedNodeMap attributes = element . getAttributes ( ) ; int size = attributes . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Attr node = ( Attr ) attributes . item ( i ) ; String name = node . getName ( ) ; if ( name . startsWith ( "xmlns:" ) ) { String prefix = name . substring ( "xmlns:" . length ( ) ) ; String uri = node . getValue ( ) ; add ( prefix , uri ) ; } } return this ; } public XPathExpression xpath ( String expression ) { XPathExpression answer = new XPathExpression ( expression ) ; configure ( answer ) ; return answer ; } public XPathExpression xpath ( String expression , Class < ? > resultType ) { XPathExpression answer = xpath ( expression ) ; answer . setResultType ( resultType ) ; return answer ; } public XQueryExpression xquery ( String expression ) { XQueryExpression answer = new XQueryExpression ( expression ) ; configure ( answer ) ; return answer ; } public XQueryExpression xquery ( String expression , Class < ? > resultType ) { XQueryExpression answer = new XQueryExpression ( expression ) ; answer . setResultType ( resultType ) ; configure ( answer ) ; return answer ; } public Map < String , String > getNamespaces ( ) { return namespaces ; } public void configure ( NamespaceAware namespaceAware ) { namespaceAware . setNamespaces ( getNamespaces ( ) ) ; } } 	1
package org . apache . camel . management ; import java . io . IOException ; import org . apache . camel . Service ; import org . apache . camel . impl . ServiceSupport ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedOperation ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "Managed Service" , currencyTimeLimit = 15 ) public class ManagedService { private ServiceSupport service ; public ManagedService ( ServiceSupport service ) { this . service = service ; } public Service getService ( ) { return service ; } @ ManagedAttribute ( description = "Service running state" ) public boolean isStarted ( ) throws IOException { return service . isStarted ( ) ; } @ ManagedOperation ( description = "Start Service" ) public void start ( ) throws IOException { try { service . start ( ) ; } catch ( Exception e ) { throw new IOException ( e . getMessage ( ) ) ; } } @ ManagedOperation ( description = "Stop Service" ) public void stop ( ) throws IOException { try { service . stop ( ) ; } catch ( Exception e ) { throw new IOException ( e . getMessage ( ) ) ; } } } 	0
package org . apache . camel . language . bean ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class BeanLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { ObjectHelper . notNull ( expression , "expression" ) ; int idx = expression . lastIndexOf ( '.' ) ; String beanName = expression ; String method = null ; if ( idx > 0 ) { beanName = expression . substring ( 0 , idx ) ; method = expression . substring ( idx + 1 ) ; } return new BeanExpression ( beanName , method ) ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "simple" ) public class SimpleExpression extends ExpressionType { public SimpleExpression ( ) { } public SimpleExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "simple" ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . PredicateAggregationCollection ; public class Aggregator extends BatchProcessor { private Predicate aggregationCompletedPredicate ; public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy ) { this ( endpoint , processor , new AggregationCollection ( correlationExpression , aggregationStrategy ) ) ; } public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { this ( endpoint , processor , new PredicateAggregationCollection ( correlationExpression , aggregationStrategy , aggregationCompletedPredicate ) ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } public Aggregator ( Endpoint endpoint , Processor processor , AggregationCollection collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Aggregator[to: " + getProcessor ( ) + "]" ; } @ Override protected boolean isBatchCompleted ( int index ) { if ( aggregationCompletedPredicate != null ) { if ( getCollection ( ) . size ( ) > 0 ) { return true ; } } return super . isBatchCompleted ( index ) ; } } 	1
package org . apache . camel . component . rmi ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Proxy ; import java . rmi . Remote ; import java . rmi . registry . Registry ; import java . rmi . server . UnicastRemoteObject ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanExchange ; import org . apache . camel . component . bean . BeanInvocation ; import org . apache . camel . impl . DefaultConsumer ; public class RmiConsumer extends DefaultConsumer < BeanExchange > implements InvocationHandler { private final RmiEndpoint endpoint ; private Remote stub ; private Remote proxy ; public RmiConsumer ( RmiEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { Class [ ] interfaces = new Class [ endpoint . getRemoteInterfaces ( ) . size ( ) ] ; endpoint . getRemoteInterfaces ( ) . toArray ( interfaces ) ; proxy = ( Remote ) Proxy . newProxyInstance ( endpoint . getClassLoader ( ) , interfaces , this ) ; stub = UnicastRemoteObject . exportObject ( proxy , endpoint . getPort ( ) ) ; try { Registry registry = endpoint . getRegistry ( ) ; String name = endpoint . getName ( ) ; registry . bind ( name , stub ) ; } catch ( Exception e ) { try { UnicastRemoteObject . unexportObject ( stub , true ) ; } catch ( Throwable ignore ) { } stub = null ; throw e ; } super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { super . doStop ( ) ; try { Registry registry = endpoint . getRegistry ( ) ; registry . unbind ( endpoint . getName ( ) ) ; } catch ( Throwable e ) { } UnicastRemoteObject . unexportObject ( proxy , true ) ; } public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { if ( ! isStarted ( ) ) { throw new IllegalStateException ( "The endpoint is not active: " + getEndpoint ( ) . getEndpointUri ( ) ) ; } BeanInvocation invocation = new BeanInvocation ( method , args ) ; BeanExchange exchange = getEndpoint ( ) . createExchange ( ) ; exchange . setInvocation ( invocation ) ; getProcessor ( ) . process ( exchange ) ; Throwable fault = exchange . getException ( ) ; if ( fault != null ) { throw new InvocationTargetException ( fault ) ; } return exchange . getOut ( ) . getBody ( ) ; } public Remote getProxy ( ) { return proxy ; } public Remote getStub ( ) { return stub ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; public class HandleFaultProcessor extends DelegateProcessor { @ Override public void process ( Exchange exchange ) throws Exception { super . process ( exchange ) ; final Message faultMessage = exchange . getFault ( false ) ; if ( faultMessage != null ) { final Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { if ( faultBody instanceof Throwable ) { exchange . setException ( ( Throwable ) faultBody ) ; } else { exchange . setException ( new CamelException ( "Message contains fault of type " + faultBody . getClass ( ) . getName ( ) + ":\n" + faultBody ) ) ; } } } } } 	1
package org . apache . camel . spring . spi ; import org . apache . camel . Processor ; import org . apache . camel . spi . Policy ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . transaction . PlatformTransactionManager ; import org . springframework . transaction . support . TransactionTemplate ; public class SpringTransactionPolicy < E > implements Policy < E > { private static final transient Log LOG = LogFactory . getLog ( SpringTransactionPolicy . class ) ; private TransactionTemplate template ; private String propagationBehaviorName ; private PlatformTransactionManager transactionManager ; public SpringTransactionPolicy ( ) { } public SpringTransactionPolicy ( TransactionTemplate template ) { this . template = template ; } public Processor wrap ( Processor processor ) { final TransactionTemplate transactionTemplate = getTemplate ( ) ; if ( transactionTemplate == null ) { LOG . warn ( "No TransactionTemplate available so transactions will not be enabled!" ) ; return processor ; } TransactionInterceptor answer = new TransactionInterceptor ( transactionTemplate ) ; answer . setProcessor ( processor ) ; return answer ; } public TransactionTemplate getTemplate ( ) { if ( template == null ) { template = new TransactionTemplate ( transactionManager ) ; if ( propagationBehaviorName != null ) { template . setPropagationBehaviorName ( propagationBehaviorName ) ; } } return template ; } public void setTemplate ( TransactionTemplate template ) { this . template = template ; } public void setTransactionManager ( PlatformTransactionManager transactionManager ) { this . transactionManager = transactionManager ; } public PlatformTransactionManager getTransactionManager ( ) { return transactionManager ; } public void setPropagationBehaviorName ( String propagationBehaviorName ) { this . propagationBehaviorName = propagationBehaviorName ; } public String getPropagationBehaviorName ( ) { return propagationBehaviorName ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "proceed" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProceedType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "proceed" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	1
package org . apache . camel . spring ; import org . apache . camel . Endpoint ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . event . EventComponent ; import org . apache . camel . component . event . EventEndpoint ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Registry ; import org . apache . camel . spring . spi . ApplicationContextRegistry ; import org . apache . camel . spring . spi . SpringInjector ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . DisposableBean ; import org . springframework . beans . factory . InitializingBean ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . context . ApplicationEvent ; import org . springframework . context . ApplicationListener ; import org . springframework . context . ConfigurableApplicationContext ; import org . springframework . context . event . ContextRefreshedEvent ; import org . springframework . context . support . ClassPathXmlApplicationContext ; public class SpringCamelContext extends DefaultCamelContext implements InitializingBean , DisposableBean , ApplicationContextAware , ApplicationListener { private static final transient Log LOG = LogFactory . getLog ( SpringCamelContext . class ) ; private ApplicationContext applicationContext ; private EventEndpoint eventEndpoint ; public SpringCamelContext ( ) { } public SpringCamelContext ( ApplicationContext applicationContext ) { setApplicationContext ( applicationContext ) ; } public static SpringCamelContext springCamelContext ( ApplicationContext applicationContext ) throws Exception { String [ ] names = applicationContext . getBeanNamesForType ( SpringCamelContext . class ) ; if ( names . length == 1 ) { return ( SpringCamelContext ) applicationContext . getBean ( names [ 0 ] , SpringCamelContext . class ) ; } SpringCamelContext answer = new SpringCamelContext ( ) ; answer . setApplicationContext ( applicationContext ) ; answer . afterPropertiesSet ( ) ; return answer ; } public static SpringCamelContext springCamelContext ( String configLocations ) throws Exception { return springCamelContext ( new ClassPathXmlApplicationContext ( configLocations ) ) ; } public void afterPropertiesSet ( ) throws Exception { start ( ) ; } public void destroy ( ) throws Exception { stop ( ) ; } public void onApplicationEvent ( ApplicationEvent event ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Publishing event: " + event ) ; } if ( event instanceof ContextRefreshedEvent ) { try { LOG . debug ( "Starting the CamelContext now that the ApplicationContext has started" ) ; start ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } if ( eventEndpoint != null ) { eventEndpoint . onApplicationEvent ( event ) ; } } else { if ( eventEndpoint != null ) { eventEndpoint . onApplicationEvent ( event ) ; } else { LOG . warn ( "No eventEndpoint enabled for event: " + event ) ; } } } public ApplicationContext getApplicationContext ( ) { return applicationContext ; } public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { this . applicationContext = applicationContext ; if ( applicationContext instanceof ConfigurableApplicationContext ) { addComponent ( "event" , new EventComponent ( applicationContext ) ) ; } } public EventEndpoint getEventEndpoint ( ) { return eventEndpoint ; } public void setEventEndpoint ( EventEndpoint eventEndpoint ) { this . eventEndpoint = eventEndpoint ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( eventEndpoint == null ) { eventEndpoint = createEventEndpoint ( ) ; } } @ Override protected Injector createInjector ( ) { if ( applicationContext instanceof ConfigurableApplicationContext ) { return new SpringInjector ( ( ConfigurableApplicationContext ) applicationContext ) ; } else { LOG . warn ( "Cannot use SpringInjector as applicationContext is not a ConfigurableApplicationContext as its: " + applicationContext ) ; return super . createInjector ( ) ; } } protected EventEndpoint createEventEndpoint ( ) { EventEndpoint endpoint = getEndpoint ( "event:default" , EventEndpoint . class ) ; return endpoint ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { Endpoint endpoint = getTypeConverter ( ) . convertTo ( Endpoint . class , bean ) ; if ( endpoint != null ) { endpoint . setCamelContext ( this ) ; return endpoint ; } Processor processor = new BeanProcessor ( bean , this ) ; return new ProcessorEndpoint ( uri , this , processor ) ; } @ Override protected Registry createRegistry ( ) { return new ApplicationContextRegistry ( getApplicationContext ( ) ) ; } } 	0
package org . apache . camel . processor . aggregate ; import org . apache . camel . Exchange ; public class UseLatestAggregationStrategy implements AggregationStrategy { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { return newExchange ; } } 	1
package org . apache . camel . component . spring . integration . adapter ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . component . spring . integration . SpringIntegrationBinding ; import org . apache . camel . component . spring . integration . SpringIntegrationExchange ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . integration . message . Message ; public class CamelTargetAdapter extends AbstractCamelAdapter { private final Log logger = LogFactory . getLog ( this . getClass ( ) ) ; private ProducerTemplate < Exchange > camelTemplate ; private Endpoint camelEndpoint ; public ProducerTemplate < Exchange > getCamelTemplate ( ) { if ( camelTemplate == null ) { CamelContext ctx = getCamelContext ( ) ; if ( ctx == null ) { ctx = new DefaultCamelContext ( ) ; } camelTemplate = ctx . createProducerTemplate ( ) ; } return camelTemplate ; } public Message < ? > handle ( Message < ? > request ) { ExchangePattern pattern ; if ( isExpectReply ( ) ) { pattern = ExchangePattern . InOut ; } else { pattern = ExchangePattern . InOnly ; } Exchange inExchange = new SpringIntegrationExchange ( getCamelContext ( ) , pattern ) ; SpringIntegrationBinding . storeToCamelMessage ( request , inExchange . getIn ( ) ) ; Exchange outExchange = getCamelTemplate ( ) . send ( getCamelEndpointUri ( ) , inExchange ) ; Message response = null ; if ( isExpectReply ( ) ) { response = SpringIntegrationBinding . storeToSpringIntegrationMessage ( outExchange . getOut ( ) ) ; } return response ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public final class ProcessorBuilder { private ProcessorBuilder ( ) { } public static Processor setBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setBody(" + expression + ")" ; } } ; } public static Processor setOutBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setOutBody(" + expression + ")" ; } } ; } public static Processor setFaultBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setFaultBody(" + expression + ")" ; } } ; } public static Processor setHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setOutHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setOutHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setFaultHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setFaultHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setProperty ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . setProperty ( name , value ) ; } @ Override public String toString ( ) { return "setProperty(" + name + ", " + expression + ")" ; } } ; } public static Processor removeHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getIn ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeHeader(" + name + ")" ; } } ; } public static Processor removeOutHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { out . removeHeader ( name ) ; } } @ Override public String toString ( ) { return "removeOutHeader(" + name + ")" ; } } ; } public static Processor removeFaultHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getFault ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeFaultHeader(" + name + ")" ; } } ; } public static Processor removeProperty ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . removeProperty ( name ) ; } @ Override public String toString ( ) { return "removeProperty(" + name + ")" ; } } ; } public static Processor throwException ( final Exception ex ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { throw ex ; } @ Override public String toString ( ) { return "throwException(" + ex . toString ( ) + ")" ; } } ; } } 	1
package org . apache . camel . component . spring . integration . adapter ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . component . spring . integration . SpringIntegrationBinding ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . factory . InitializingBean ; import org . springframework . integration . ConfigurationException ; import org . springframework . integration . bus . MessageBus ; import org . springframework . integration . bus . MessageBusAware ; import org . springframework . integration . channel . MessageChannel ; import org . springframework . integration . gateway . RequestReplyTemplate ; import org . springframework . integration . message . Message ; public class CamelSourceAdapter extends AbstractCamelAdapter implements InitializingBean , MessageBusAware { protected final Object lifecycleMonitor = new Object ( ) ; private final Log logger = LogFactory . getLog ( this . getClass ( ) ) ; private Consumer consumer ; private Endpoint camelEndpoint ; private MessageChannel requestChannel ; private RequestReplyTemplate requestReplyTemplate = new RequestReplyTemplate ( ) ; private volatile boolean initialized ; public void setRequestChannel ( MessageChannel channel ) { requestChannel = channel ; requestReplyTemplate . setRequestChannel ( requestChannel ) ; } public MessageChannel getChannel ( ) { return requestChannel ; } public void setReplyChannel ( MessageChannel channel ) { requestReplyTemplate . setReplyChannel ( channel ) ; } public void setRequestTimeout ( long requestTimeout ) { this . requestReplyTemplate . setRequestTimeout ( requestTimeout ) ; } public void setReplyTimeout ( long replyTimeout ) { this . requestReplyTemplate . setReplyTimeout ( replyTimeout ) ; } private void incoming ( Exchange exchange ) { org . springframework . integration . message . Message request = SpringIntegrationBinding . createSpringIntegrationMessage ( exchange ) ; org . springframework . integration . message . Message response = handle ( request ) ; if ( response != null ) { SpringIntegrationBinding . storeToCamelMessage ( response , exchange . getOut ( ) ) ; } } protected class ConsumerProcessor implements Processor { public void process ( Exchange exchange ) { try { incoming ( exchange ) ; } catch ( Throwable ex ) { ex . printStackTrace ( ) ; logger . warn ( "Failed to process incoming message : " + ex ) ; } } } public final void afterPropertiesSet ( ) throws Exception { synchronized ( this . lifecycleMonitor ) { if ( this . initialized ) { return ; } } this . initialize ( ) ; this . initialized = true ; } protected void initialize ( ) throws Exception { camelEndpoint = getCamelContext ( ) . getEndpoint ( getCamelEndpointUri ( ) ) ; consumer = camelEndpoint . createConsumer ( new ConsumerProcessor ( ) ) ; consumer . start ( ) ; } public final Message < ? > handle ( Message < ? > message ) { if ( ! this . initialized ) { try { this . afterPropertiesSet ( ) ; } catch ( Exception e ) { throw new ConfigurationException ( "unable to initialize " + this . getClass ( ) . getName ( ) , e ) ; } } if ( ! isExpectReply ( ) ) { boolean sent = this . requestReplyTemplate . send ( message ) ; if ( ! sent && logger . isWarnEnabled ( ) ) { logger . warn ( "failed to send message to channel within timeout" ) ; } return null ; } return this . requestReplyTemplate . request ( message ) ; } public void setMessageBus ( MessageBus bus ) { requestReplyTemplate . setMessageBus ( bus ) ; } } 	0
package org . apache . camel . builder ; import java . util . Map ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . model . ExpressionNode ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . MethodCallExpression ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; public class ExpressionClause < T > extends ExpressionType { private T result ; private String language ; public ExpressionClause ( T result ) { this . result = result ; } public static < T extends ExpressionNode > ExpressionClause < T > createAndSetExpression ( T result ) { ExpressionClause < T > clause = new ExpressionClause < T > ( result ) ; result . setExpression ( clause ) ; return clause ; } public T expression ( Expression expression ) { setExpressionValue ( expression ) ; return result ; } public T constant ( Object value ) { return expression ( ExpressionBuilder . constantExpression ( value ) ) ; } public T exchange ( ) { return expression ( ExpressionBuilder . exchangeExpression ( ) ) ; } public T inMessage ( ) { return expression ( ExpressionBuilder . inMessageExpression ( ) ) ; } public T outMessage ( ) { return expression ( ExpressionBuilder . outMessageExpression ( ) ) ; } public T body ( ) { return expression ( ExpressionBuilder . bodyExpression ( ) ) ; } public T body ( Class expectedType ) { return expression ( ExpressionBuilder . bodyExpression ( expectedType ) ) ; } public T outBody ( ) { return expression ( ExpressionBuilder . outBodyExpression ( ) ) ; } public T outBody ( Class expectedType ) { return expression ( ExpressionBuilder . outBodyExpression ( expectedType ) ) ; } public T header ( String name ) { return expression ( ExpressionBuilder . headerExpression ( name ) ) ; } public T headers ( ) { return expression ( ExpressionBuilder . headersExpression ( ) ) ; } public T outHeader ( String name ) { return expression ( ExpressionBuilder . outHeaderExpression ( name ) ) ; } public T outHeaders ( ) { return expression ( ExpressionBuilder . outHeadersExpression ( ) ) ; } public T property ( String name ) { return expression ( ExpressionBuilder . propertyExpression ( name ) ) ; } public T properties ( ) { return expression ( ExpressionBuilder . propertiesExpression ( ) ) ; } public T method ( String bean ) { MethodCallExpression expression = new MethodCallExpression ( bean ) ; setExpressionType ( expression ) ; return result ; } public T method ( String bean , String method ) { MethodCallExpression expression = new MethodCallExpression ( bean , method ) ; setExpressionType ( expression ) ; return result ; } public T el ( String text ) { return language ( "el" , text ) ; } public T groovy ( String text ) { return language ( "groovy" , text ) ; } public T javaScript ( String text ) { return language ( "js" , text ) ; } public T jxpath ( String text ) { return language ( "jxpath" , text ) ; } public T ognl ( String text ) { return language ( "ognl" , text ) ; } public T php ( String text ) { return language ( "php" , text ) ; } public T python ( String text ) { return language ( "python" , text ) ; } public T ruby ( String text ) { return language ( "ruby" , text ) ; } public T sql ( String text ) { return language ( "sql" , text ) ; } public T simple ( String text ) { return language ( "simple" , text ) ; } public T xpath ( String text ) { return language ( "xpath" , text ) ; } public T xpath ( String text , Class resultType ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Class resultType , Namespaces namespaces ) { return xpath ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Class resultType , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Namespaces namespaces ) { return xpath ( text , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text ) { return language ( "xquery" , text ) ; } public T xquery ( String text , Class resultType ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Class resultType , Namespaces namespaces ) { return xquery ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Class resultType , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Namespaces namespaces ) { return xquery ( text , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T language ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; return result ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . spring ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . model . IdentifiedType ; import org . springframework . beans . factory . FactoryBean ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlRootElement ( name = "endpoint" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class EndpointFactoryBean extends IdentifiedType implements FactoryBean , CamelContextAware { @ XmlAttribute private String uri ; @ XmlTransient private CamelContext context ; @ XmlTransient private Endpoint endpoint ; @ XmlTransient private boolean singleton ; public Object getObject ( ) throws Exception { if ( endpoint == null ) { endpoint = createEndpoint ( ) ; } return endpoint ; } public Class getObjectType ( ) { return Endpoint . class ; } public boolean isSingleton ( ) { return singleton ; } public CamelContext getCamelContext ( ) { return context ; } public void setCamelContext ( CamelContext context ) { this . context = context ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public void setSingleton ( boolean singleton ) { this . singleton = singleton ; } public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } protected Endpoint createEndpoint ( ) { notNull ( context , "context" ) ; notNull ( uri , "uri" ) ; Endpoint endpoint = context . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } } 	0
package org . apache . camel . processor ; public enum LoggingLevel { DEBUG , ERROR , FATAL , INFO , TRACE , WARN } 	1
package org . apache . camel . util ; import org . apache . camel . converter . ObjectConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class SystemHelper { private static final transient Log LOG = LogFactory . getLog ( SystemHelper . class ) ; private SystemHelper ( ) { } public static String getSystemProperty ( String name ) { try { return System . getProperty ( name ) ; } catch ( Exception e ) { LOG . debug ( "Caught exception looking for system property: " + name + " exception: " + e , e ) ; return null ; } } public static boolean isSystemProperty ( String name ) { String text = getSystemProperty ( name ) ; return ObjectConverter . toBool ( text ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . TryProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "try" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TryType extends OutputType < TryType > { @ XmlTransient private List < CatchType > catchClauses ; @ XmlTransient private FinallyType finallyClause ; @ XmlTransient private boolean initialized ; @ XmlTransient private List < ProcessorType < ? > > outputsWithoutCatches ; @ Override public String toString ( ) { return "Try[ " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "try" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor tryProcessor = createOutputsProcessor ( routeContext , getOutputsWithoutCatches ( ) ) ; Processor finallyProcessor = null ; if ( finallyClause != null ) { finallyProcessor = finallyClause . createProcessor ( routeContext ) ; } List < CatchProcessor > catchProcessors = new ArrayList < CatchProcessor > ( ) ; if ( catchClauses != null ) { for ( CatchType catchClause : catchClauses ) { catchProcessors . add ( catchClause . createProcessor ( routeContext ) ) ; } } return new TryProcessor ( tryProcessor , catchProcessors , finallyProcessor ) ; } public TryType handle ( Class < ? > exceptionType ) { popBlock ( ) ; CatchType answer = new CatchType ( exceptionType ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Deprecated public TryType handleAll ( ) { return finallyBlock ( ) ; } public TryType finallyBlock ( ) { popBlock ( ) ; FinallyType answer = new FinallyType ( ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Override public ProcessorType < ? extends ProcessorType > end ( ) { popBlock ( ) ; return super . end ( ) ; } public List < CatchType > getCatchClauses ( ) { if ( catchClauses == null ) { checkInitialized ( ) ; } return catchClauses ; } public FinallyType getFinallyClause ( ) { if ( finallyClause == null ) { checkInitialized ( ) ; } return finallyClause ; } public List < ProcessorType < ? > > getOutputsWithoutCatches ( ) { if ( outputsWithoutCatches == null ) { checkInitialized ( ) ; } return outputsWithoutCatches ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { initialized = false ; super . setOutputs ( outputs ) ; } @ Override public void addOutput ( ProcessorType output ) { initialized = false ; super . addOutput ( output ) ; } protected void checkInitialized ( ) { if ( ! initialized ) { initialized = true ; outputsWithoutCatches = new ArrayList < ProcessorType < ? > > ( ) ; catchClauses = new ArrayList < CatchType > ( ) ; finallyClause = null ; for ( ProcessorType output : outputs ) { if ( output instanceof CatchType ) { catchClauses . add ( ( CatchType ) output ) ; } else if ( output instanceof FinallyType ) { if ( finallyClause != null ) { throw new IllegalArgumentException ( "Multiple finally clauses added: " + finallyClause + " and " + output ) ; } else { finallyClause = ( FinallyType ) output ; } } else { outputsWithoutCatches . add ( output ) ; } } } } } 	1
package org . apache . camel . language ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . component . bean . DefaultAnnotationExpressionFactory ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . ANNOTATION_TYPE } ) public @ interface LanguageAnnotation { String language ( ) ; Class < ? > factory ( ) default DefaultAnnotationExpressionFactory . class ; } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultComponentResolver < E extends Exchange > implements ComponentResolver < E > { protected static final FactoryFinder COMPONENT_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; private static final transient Log LOG = LogFactory . getLog ( DefaultComponentResolver . class ) ; public Component < E > resolveComponent ( String name , CamelContext context ) { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } } Class type ; try { type = COMPONENT_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { return null ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " via type: " + type . getName ( ) + " via " + COMPONENT_FACTORY . getPath ( ) + name ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component < E > ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	1
package org . apache . camel . component . spring . integration ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . spring . SpringCamelContext ; import org . apache . camel . util . ObjectHelper ; import org . springframework . integration . channel . ChannelRegistry ; import org . springframework . integration . channel . MessageChannel ; import org . springframework . integration . config . MessageBusParser ; public class SpringIntegrationConsumer extends ScheduledPollConsumer < SpringIntegrationExchange > { private SpringCamelContext context ; private MessageChannel inputChannel ; private MessageChannel outputChannel ; private String inputChannelName ; private ChannelRegistry channelRegistry ; private SpringIntegrationEndpoint endpoint ; public SpringIntegrationConsumer ( SpringIntegrationEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; context = ( SpringCamelContext ) endpoint . getCamelContext ( ) ; if ( context != null && endpoint . getMessageChannel ( ) == null ) { channelRegistry = ( ChannelRegistry ) context . getApplicationContext ( ) . getBean ( MessageBusParser . MESSAGE_BUS_BEAN_NAME ) ; inputChannelName = endpoint . getDefaultChannel ( ) ; if ( ObjectHelper . isNullOrBlank ( inputChannelName ) ) { inputChannelName = endpoint . getInputChannel ( ) ; } if ( ! ObjectHelper . isNullOrBlank ( inputChannelName ) ) { inputChannel = ( MessageChannel ) channelRegistry . lookupChannel ( inputChannelName ) ; ObjectHelper . notNull ( inputChannel , "The inputChannel with the name [" + inputChannelName + "]" ) ; } else { throw new RuntimeCamelException ( "Can't find the right inputChannelName, , please check your configuration." ) ; } } else { if ( endpoint . getMessageChannel ( ) != null ) { inputChannel = endpoint . getMessageChannel ( ) ; } else { throw new RuntimeCamelException ( "Can't find the right message channel, please check your configuration." ) ; } } if ( endpoint . isInOut ( ) ) { endpoint . setExchangePattern ( ExchangePattern . InOut ) ; } } @ Override protected void poll ( ) throws Exception { org . springframework . integration . message . Message siInMessage = inputChannel . receive ( this . getDelay ( ) ) ; SpringIntegrationExchange exchange = getEndpoint ( ) . createExchange ( ) ; exchange . setIn ( new SpringIntegrationMessage ( siInMessage ) ) ; getProcessor ( ) . process ( exchange ) ; if ( endpoint . isInOut ( ) ) { Object returnAddress = siInMessage . getHeader ( ) . getReturnAddress ( ) ; MessageChannel reply = null ; if ( returnAddress != null ) { if ( returnAddress instanceof String ) { reply = ( MessageChannel ) context . getApplicationContext ( ) . getBean ( ( String ) returnAddress ) ; } else if ( returnAddress instanceof MessageChannel ) { reply = ( MessageChannel ) returnAddress ; } } else { if ( outputChannel != null ) { reply = outputChannel ; } else { if ( ObjectHelper . isNullOrBlank ( endpoint . getOutputChannel ( ) ) ) { outputChannel = ( MessageChannel ) channelRegistry . lookupChannel ( endpoint . getOutputChannel ( ) ) ; ObjectHelper . notNull ( inputChannel , "The outputChannel with the name [" + endpoint . getOutputChannel ( ) + "]" ) ; reply = outputChannel ; } else { throw new RuntimeCamelException ( "Can't find the right outputChannelName" ) ; } } } org . springframework . integration . message . Message siOutMessage = SpringIntegrationBinding . storeToSpringIntegrationMessage ( exchange . getOut ( ) ) ; reply . send ( siOutMessage ) ; } } } 	0
package org . apache . camel . util ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Properties ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . spi . Injector ; public class FactoryFinder { private final String path ; private final ConcurrentHashMap classMap = new ConcurrentHashMap ( ) ; public FactoryFinder ( ) { this ( "META-INF/services/org/apache/camel/" ) ; } public FactoryFinder ( String path ) { this . path = path ; } public Object newInstance ( String key ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { return newInstance ( key , ( String ) null ) ; } public Object newInstance ( String key , String propertyPrefix ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { Class clazz = findClass ( key , propertyPrefix ) ; return clazz . newInstance ( ) ; } public Object newInstance ( String key , Injector injector ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , ( String ) null ) ; } public Object newInstance ( String key , Injector injector , String propertyPrefix ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; return injector . newInstance ( type ) ; } public < T > T newInstance ( String key , Injector injector , Class < T > expectedType ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , null , expectedType ) ; } public < T > T newInstance ( String key , Injector injector , String propertyPrefix , Class < T > expectedType ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; Object value = injector . newInstance ( type ) ; if ( expectedType . isInstance ( value ) ) { return expectedType . cast ( value ) ; } else { throw new ClassCastException ( "Not instanceof " + expectedType . getName ( ) + " value: " + value ) ; } } public < T > List < T > newInstances ( String key , Injector injector , Class < T > type ) throws IOException , ClassNotFoundException { List < Class > list = findClasses ( key ) ; List < T > answer = new ArrayList < T > ( list . size ( ) ) ; answer . add ( newInstance ( key , injector , type ) ) ; return answer ; } public Class findClass ( String key ) throws ClassNotFoundException , IOException { return findClass ( key , null ) ; } public Class findClass ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { if ( propertyPrefix == null ) { propertyPrefix = "" ; } Class clazz = ( Class ) classMap . get ( propertyPrefix + key ) ; if ( clazz == null ) { clazz = newInstance ( doFindFactoryProperties ( key ) , propertyPrefix ) ; classMap . put ( propertyPrefix + key , clazz ) ; } return clazz ; } public List < Class > findClasses ( String key ) throws ClassNotFoundException , IOException { return findClasses ( key , null ) ; } public List < Class > findClasses ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { Class type = findClass ( key , propertyPrefix ) ; return Collections . singletonList ( type ) ; } public String getPath ( ) { return path ; } private Class newInstance ( Properties properties , String propertyPrefix ) throws ClassNotFoundException , IOException { String className = properties . getProperty ( propertyPrefix + "class" ) ; if ( className == null ) { throw new IOException ( "Expected property is missing: " + propertyPrefix + "class" ) ; } return ObjectHelper . loadClass ( className ) ; } private Properties doFindFactoryProperties ( String key ) throws IOException { String uri = path + key ; InputStream in = ObjectHelper . loadResourceAsStream ( uri ) ; if ( in == null ) { throw new NoFactoryAvailableException ( uri ) ; } BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( in ) ; Properties properties = new Properties ( ) ; properties . load ( reader ) ; return properties ; } finally { ObjectHelper . close ( reader , key , null ) ; ObjectHelper . close ( in , key , null ) ; } } } 	1
package org . apache . camel . component . cxf . transport ; public final class CamelConstants { public static final String TEXT_MESSAGE_TYPE = "text" ; public static final String BINARY_MESSAGE_TYPE = "binary" ; public static final String CAMEL_TARGET_ENDPOINT_URI = "org.apache.cxf.camel.target.endpoint.uri" ; public static final String CAMEL_SERVER_REQUEST_HEADERS = "org.apache.cxf.camel.server.request.headers" ; public static final String CAMEL_SERVER_RESPONSE_HEADERS = "org.apache.cxf.camel.server.response.headers" ; public static final String CAMEL_REQUEST_MESSAGE = "org.apache.cxf.camel.request.message" ; public static final String CAMEL_RESPONSE_MESSAGE = "org.apache.cxf.camel.reponse.message" ; public static final String CAMEL_CLIENT_REQUEST_HEADERS = "org.apache.cxf.camel.template.request.headers" ; public static final String CAMEL_CLIENT_RESPONSE_HEADERS = "org.apache.cxf.camel.template.response.headers" ; public static final String CAMEL_CLIENT_RECEIVE_TIMEOUT = "org.apache.cxf.camel.template.timeout" ; public static final String CAMEL_SERVER_CONFIGURATION_URI = "http://cxf.apache.org/configuration/transport/camel-server" ; public static final String CAMEL_CLIENT_CONFIGURATION_URI = "http://cxf.apache.org/configuration/transport/camel-template" ; public static final String ENDPOINT_CONFIGURATION_URI = "http://cxf.apache.org/jaxws/endpoint-config" ; public static final String SERVICE_CONFIGURATION_URI = "http://cxf.apache.org/jaxws/service-config" ; public static final String PORT_CONFIGURATION_URI = "http://cxf.apache.org/jaxws/port-config" ; public static final String CAMEL_CLIENT_CONFIG_ID = "camel-template" ; public static final String CAMEL_SERVER_CONFIG_ID = "camel-server" ; public static final String CAMEL_REBASED_REPLY_TO = "org.apache.cxf.camel.server.replyto" ; public static final String CAMEL_CORRELATION_ID = "org.apache.cxf.camel.correlationId" ; private CamelConstants ( ) { } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor { protected AsyncProcessor processor ; public DelegateAsyncProcessor ( ) { } public DelegateAsyncProcessor ( AsyncProcessor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public AsyncProcessor getProcessor ( ) { return processor ; } public void setProcessor ( AsyncProcessor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } } 	1
package org . apache . camel . component . file ; import java . io . File ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class FileExchange extends DefaultExchange { private File file ; public FileExchange ( CamelContext camelContext , ExchangePattern pattern , File file ) { super ( camelContext , pattern ) ; setIn ( new FileMessage ( file ) ) ; this . file = file ; } public FileExchange ( DefaultExchange parent , File file ) { super ( parent ) ; this . file = file ; } public File getFile ( ) { return this . file ; } public void setFile ( File file ) { this . file = file ; } public Exchange newInstance ( ) { return new FileExchange ( this , getFile ( ) ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . DataFormatClause ; import org . apache . camel . builder . DeadLetterChannelBuilder ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . ErrorHandlerBuilderRef ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . NoErrorHandlerBuilder ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . LanguageExpression ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlAccessorType ( XmlAccessType . PROPERTY ) public abstract class ProcessorType < Type extends ProcessorType > extends OptionalIdentifiedType < Type > implements Block { public static final String DEFAULT_TRACE_CATEGORY = "org.apache.camel.TRACE" ; private static final transient Log LOG = LogFactory . getLog ( ProcessorType . class ) ; private ErrorHandlerBuilder errorHandlerBuilder ; private Boolean inheritErrorHandlerFlag ; private NodeFactory nodeFactory ; private LinkedList < Block > blocks = new LinkedList < Block > ( ) ; private ProcessorType < ? extends ProcessorType > parent ; private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; private String errorHandlerRef ; public abstract List < ProcessorType < ? > > getOutputs ( ) ; public Processor createProcessor ( RouteContext routeContext ) throws Exception { throw new UnsupportedOperationException ( "Not implemented yet for class: " + getClass ( ) . getName ( ) ) ; } public Processor createOutputsProcessor ( RouteContext routeContext ) throws Exception { Collection < ProcessorType < ? > > outputs = getOutputs ( ) ; return createOutputsProcessor ( routeContext , outputs ) ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Processor processor = makeProcessor ( routeContext ) ; if ( ! routeContext . isRouteAdded ( ) ) { routeContext . addEventDrivenProcessor ( processor ) ; } } public Processor wrapProcessor ( RouteContext routeContext , Processor processor ) throws Exception { processor = wrapProcessorInInterceptors ( routeContext , processor ) ; return wrapInErrorHandler ( routeContext , processor ) ; } public Type to ( String uri ) { addOutput ( new ToType ( uri ) ) ; return ( Type ) this ; } public Type to ( Endpoint endpoint ) { addOutput ( new ToType ( endpoint ) ) ; return ( Type ) this ; } public Type to ( String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri ) ) ; } return ( Type ) this ; } public Type to ( Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( Collection < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public MulticastType multicast ( ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public Type pipeline ( String ... uris ) { return to ( uris ) ; } public Type pipeline ( Endpoint ... endpoints ) { return to ( endpoints ) ; } public Type pipeline ( Collection < Endpoint > endpoints ) { return to ( endpoints ) ; } public ProcessorType < ? extends ProcessorType > end ( ) { if ( blocks . isEmpty ( ) ) { if ( parent == null ) { throw new IllegalArgumentException ( "Root node with no active block" ) ; } return parent ; } popBlock ( ) ; return this ; } public ThreadType thread ( int coreSize ) { ThreadType answer = new ThreadType ( coreSize ) ; addOutput ( answer ) ; return answer ; } public ProcessorType < Type > thread ( ThreadPoolExecutor executor ) { ThreadType answer = new ThreadType ( executor ) ; addOutput ( answer ) ; return this ; } public IdempotentConsumerType idempotentConsumer ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( messageIdExpression , messageIdRepository ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < IdempotentConsumerType > idempotentConsumer ( MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( ) ; answer . setMessageIdRepository ( messageIdRepository ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < FilterType > filter ( ) { FilterType filter = new FilterType ( ) ; addOutput ( filter ) ; return ExpressionClause . createAndSetExpression ( filter ) ; } public FilterType filter ( Predicate predicate ) { FilterType filter = new FilterType ( predicate ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( ExpressionType expression ) { FilterType filter = getNodeFactory ( ) . createFilter ( ) ; filter . setExpression ( expression ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( String language , String expression ) { return filter ( new LanguageExpression ( language , expression ) ) ; } public LoadBalanceType loadBalance ( ) { LoadBalanceType answer = new LoadBalanceType ( ) ; addOutput ( answer ) ; return answer ; } public ChoiceType choice ( ) { ChoiceType answer = new ChoiceType ( ) ; addOutput ( answer ) ; return answer ; } public TryType tryBlock ( ) { TryType answer = new TryType ( ) ; addOutput ( answer ) ; return answer ; } public Type recipientList ( Expression receipients ) { RecipientListType answer = new RecipientListType ( receipients ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > recipientList ( ) { RecipientListType answer = new RecipientListType ( ) ; addOutput ( answer ) ; ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; answer . setExpression ( clause ) ; return clause ; } public Type routingSlip ( String header , String uriDelimiter ) { RoutingSlipType answer = new RoutingSlipType ( header , uriDelimiter ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( String header ) { RoutingSlipType answer = new RoutingSlipType ( header ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( ) { RoutingSlipType answer = new RoutingSlipType ( ) ; addOutput ( answer ) ; return ( Type ) this ; } public SplitterType splitter ( Expression receipients ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression receipients , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < ResequencerType > resequencer ( ) { ResequencerType answer = new ResequencerType ( ) ; addOutput ( answer ) ; ExpressionClause < ResequencerType > clause = new ExpressionClause < ResequencerType > ( answer ) ; answer . expression ( clause ) ; return clause ; } public ResequencerType resequencer ( Expression < Exchange > expression ) { return resequencer ( Collections . < Expression > singletonList ( expression ) ) ; } public ResequencerType resequencer ( List < Expression > expressions ) { ResequencerType answer = new ResequencerType ( expressions ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression ... expressions ) { List < Expression > list = new ArrayList < Expression > ( ) ; list . addAll ( Arrays . asList ( expressions ) ) ; return resequencer ( list ) ; } public ExpressionClause < AggregatorType > aggregator ( ) { AggregatorType answer = new AggregatorType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationCollection aggregationCollection ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationCollection ( aggregationCollection ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public AggregatorType aggregator ( Expression correlationExpression ) { AggregatorType answer = new AggregatorType ( correlationExpression ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( correlationExpression , aggregationStrategy ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( Expression < Exchange > processAtExpression ) { return delayer ( processAtExpression , 0L ) ; } public DelayerType delayer ( Expression < Exchange > processAtExpression , long delay ) { DelayerType answer = new DelayerType ( processAtExpression , delay ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < DelayerType > delayer ( ) { DelayerType answer = new DelayerType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public DelayerType delayer ( long delay ) { return delayer ( null , delay ) ; } public ThrottlerType throttler ( long maximumRequestCount ) { ThrottlerType answer = new ThrottlerType ( maximumRequestCount ) ; addOutput ( answer ) ; return answer ; } public Type throwFault ( Throwable fault ) { ThrowFaultType answer = new ThrowFaultType ( ) ; answer . setFault ( fault ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type throwFault ( String message ) { return throwFault ( new CamelException ( message ) ) ; } public Type interceptor ( String ref ) { InterceptorRef interceptor = new InterceptorRef ( ref ) ; intercept ( interceptor ) ; return ( Type ) this ; } public Type intercept ( DelegateProcessor interceptor ) { intercept ( new InterceptorRef ( interceptor ) ) ; return ( Type ) this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer ; } public void intercept ( InterceptorType interceptor ) { addOutput ( interceptor ) ; pushBlock ( interceptor ) ; } public void addInterceptor ( InterceptorType interceptor ) { interceptors . add ( interceptor ) ; } public void addInterceptor ( DelegateProcessor interceptor ) { addInterceptor ( new InterceptorRef ( interceptor ) ) ; } protected void pushBlock ( Block block ) { blocks . add ( block ) ; } protected Block popBlock ( ) { return blocks . isEmpty ( ) ? null : blocks . removeLast ( ) ; } public Type proceed ( ) { ProceedType proceed = null ; ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { proceed = ( ( InterceptType ) currentProcessor ) . getProceed ( ) ; LOG . info ( "proceed() is the implied and hence not needed for an intercept()" ) ; } if ( proceed == null ) { for ( ProcessorType node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { InterceptType intercept = ( InterceptType ) node ; proceed = intercept . getProceed ( ) ; break ; } } if ( proceed == null ) { throw new IllegalArgumentException ( "Cannot use proceed() without being within an intercept() block" ) ; } } addOutput ( proceed ) ; return ( Type ) this ; } public Type stop ( ) { ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { ( ( InterceptType ) currentProcessor ) . stopIntercept ( ) ; } else { ProcessorType node ; for ( node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { ( ( InterceptType ) node ) . stopIntercept ( ) ; break ; } } if ( node == null ) { throw new IllegalArgumentException ( "Cannot use stop() without being within an intercept() block" ) ; } } return ( Type ) this ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer . when ( predicate ) ; } public Type interceptors ( String ... refs ) { for ( String ref : refs ) { interceptor ( ref ) ; } return ( Type ) this ; } public Type trace ( ) { return trace ( DEFAULT_TRACE_CATEGORY ) ; } public Type trace ( String category ) { final Log log = LogFactory . getLog ( category ) ; return intercept ( new DelegateProcessor ( ) { @ Override public void process ( Exchange exchange ) throws Exception { log . trace ( exchange ) ; processNext ( exchange ) ; } } ) ; } public PolicyRef policies ( ) { PolicyRef answer = new PolicyRef ( ) ; addOutput ( answer ) ; return answer ; } public PolicyRef policy ( Policy policy ) { PolicyRef answer = new PolicyRef ( policy ) ; addOutput ( answer ) ; return answer ; } public Type handleFault ( ) { intercept ( new HandleFaultType ( ) ) ; return ( Type ) this ; } public Type errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return ( Type ) this ; } public Type inheritErrorHandler ( boolean condition ) { setInheritErrorHandlerFlag ( condition ) ; return ( Type ) this ; } public Type process ( Processor processor ) { ProcessorRef answer = new ProcessorRef ( processor ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type processRef ( String ref ) { ProcessorRef answer = new ProcessorRef ( ) ; answer . setRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref ) { BeanRef answer = new BeanRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref , String method ) { BeanRef answer = new BeanRef ( ref , method ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setBody ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetBodyType answer = new SetBodyType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setBody ( Expression expression ) { SetBodyType answer = new SetBodyType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } @ Deprecated public Type setOutBody ( Expression expression ) { return transform ( expression ) ; } @ Deprecated public ExpressionClause < ProcessorType < Type > > setOutBody ( ) { return transform ( ) ; } public Type transform ( Expression expression ) { TransformType answer = new TransformType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > transform ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; TransformType answer = new TransformType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setFaultBody ( Expression expression ) { return process ( ProcessorBuilder . setFaultBody ( expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetHeaderType answer = new SetHeaderType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type setHeader ( String name , Expression expression ) { SetHeaderType answer = new SetHeaderType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setHeader ( String name , String value ) { SetHeaderType answer = new SetHeaderType ( name , value ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setOutHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setOutHeader ( name , clause ) ) ; return clause ; } public Type setOutHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setOutHeader ( name , expression ) ) ; } public Type setOutHeader ( String name , String value ) { return ( Type ) setOutHeader ( name ) . constant ( value ) ; } public Type setFaultHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setFaultHeader ( name , expression ) ) ; } public Type setProperty ( String name , Expression expression ) { return process ( ProcessorBuilder . setProperty ( name , expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setProperty ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setProperty ( name , clause ) ) ; return clause ; } public Type removeHeader ( String name ) { return process ( ProcessorBuilder . removeHeader ( name ) ) ; } public Type removeOutHeader ( String name ) { return process ( ProcessorBuilder . removeOutHeader ( name ) ) ; } public Type removeFaultHeader ( String name ) { return process ( ProcessorBuilder . removeFaultHeader ( name ) ) ; } public Type removeProperty ( String name ) { return process ( ProcessorBuilder . removeProperty ( name ) ) ; } public Type convertBodyTo ( Class type ) { addOutput ( new ConvertBodyType ( type ) ) ; return ( Type ) this ; } @ Deprecated public Type convertOutBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } @ Deprecated public Type convertFaultBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } public DataFormatClause < ProcessorType < Type > > unmarshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Unmarshal ) ; } public Type unmarshal ( DataFormatType dataFormatType ) { addOutput ( new UnmarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type unmarshal ( DataFormat dataFormat ) { return unmarshal ( new DataFormatType ( dataFormat ) ) ; } public Type unmarshal ( String dataTypeRef ) { addOutput ( new UnmarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } public DataFormatClause < ProcessorType < Type > > marshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Marshal ) ; } public Type marshal ( DataFormatType dataFormatType ) { addOutput ( new MarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type marshal ( DataFormat dataFormat ) { return marshal ( new DataFormatType ( dataFormat ) ) ; } public Type marshal ( String dataTypeRef ) { addOutput ( new MarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } @ XmlTransient public ProcessorType < ? extends ProcessorType > getParent ( ) { return parent ; } public void setParent ( ProcessorType < ? extends ProcessorType > parent ) { this . parent = parent ; } @ XmlTransient public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void setErrorHandlerBuilderIfNull ( ErrorHandlerBuilder errorHandlerBuilder ) { if ( this . errorHandlerBuilder == null ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; } } public String getErrorHandlerRef ( ) { return errorHandlerRef ; } @ XmlAttribute ( required = false ) public void setErrorHandlerRef ( String errorHandlerRef ) { this . errorHandlerRef = errorHandlerRef ; setErrorHandlerBuilder ( new ErrorHandlerBuilderRef ( errorHandlerRef ) ) ; } @ XmlTransient public boolean isInheritErrorHandler ( ) { return isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public static boolean isInheritErrorHandler ( Boolean value ) { return value == null || value . booleanValue ( ) ; } @ XmlAttribute ( name = "inheritErrorHandler" , required = false ) public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } @ XmlTransient public NodeFactory getNodeFactory ( ) { if ( nodeFactory == null ) { nodeFactory = new NodeFactory ( ) ; } return nodeFactory ; } public void setNodeFactory ( NodeFactory nodeFactory ) { this . nodeFactory = nodeFactory ; } public String getLabel ( ) { return "" ; } protected Processor makeProcessor ( RouteContext routeContext ) throws Exception { Processor processor = createProcessor ( routeContext ) ; return wrapProcessor ( routeContext , processor ) ; } protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } List < InterceptStrategy > strategies = new ArrayList < InterceptStrategy > ( ) ; CamelContext camelContext = routeContext . getCamelContext ( ) ; if ( camelContext instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) camelContext ; strategies . addAll ( defaultCamelContext . getInterceptStrategies ( ) ) ; } strategies . addAll ( routeContext . getInterceptStrategies ( ) ) ; for ( InterceptStrategy strategy : strategies ) { if ( strategy != null ) { target = strategy . wrapProcessorInInterceptors ( this , target ) ; } } List < InterceptorType > list = routeContext . getRoute ( ) . getInterceptors ( ) ; if ( interceptors != null ) { list . addAll ( interceptors ) ; } Collections . reverse ( list ) ; Set < Processor > interceptors = new HashSet < Processor > ( ) ; interceptors . add ( target ) ; for ( InterceptorType interceptorType : list ) { DelegateProcessor interceptor = interceptorType . createInterceptor ( routeContext ) ; if ( ! interceptors . contains ( interceptor ) ) { interceptors . add ( interceptor ) ; if ( interceptor . getProcessor ( ) != null ) { LOG . warn ( "Interceptor " + interceptor + " currently wraps target " + interceptor . getProcessor ( ) + " is attempting to change target " + target + " new wrapping has been denied." ) ; } else { interceptor . setProcessor ( target ) ; target = interceptor ; } } } return target ; } protected Processor wrapInErrorHandler ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } ErrorHandlerWrappingStrategy strategy = routeContext . getErrorHandlerWrappingStrategy ( ) ; if ( strategy != null ) { return strategy . wrapProcessorInErrorHandler ( routeContext , this , target ) ; } return getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( errorHandlerRef != null ) { return new ErrorHandlerBuilderRef ( errorHandlerRef ) ; } if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } protected void configureChild ( ProcessorType output ) { output . setNodeFactory ( getNodeFactory ( ) ) ; } public void addOutput ( ProcessorType processorType ) { processorType . setParent ( this ) ; configureChild ( processorType ) ; if ( blocks . isEmpty ( ) ) { getOutputs ( ) . add ( processorType ) ; } else { Block block = blocks . getLast ( ) ; block . addOutput ( processorType ) ; } } protected Processor createCompositeProcessor ( List < Processor > list ) { return new Pipeline ( list ) ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { List < Processor > list = new ArrayList < Processor > ( ) ; for ( ProcessorType output : outputs ) { Processor processor = output . createProcessor ( routeContext ) ; processor = output . wrapProcessorInInterceptors ( routeContext , processor ) ; ProcessorType currentProcessor = this ; if ( ! ( currentProcessor instanceof ExceptionType || currentProcessor instanceof TryType ) ) { processor = output . wrapInErrorHandler ( routeContext , processor ) ; } list . add ( processor ) ; } Processor processor = null ; if ( ! list . isEmpty ( ) ) { if ( list . size ( ) == 1 ) { processor = list . get ( 0 ) ; } else { processor = createCompositeProcessor ( list ) ; } } return processor ; } public void clearOutput ( ) { getOutputs ( ) . clear ( ) ; blocks . clear ( ) ; } } 	1
package org . apache . camel . spring ; import java . lang . reflect . Modifier ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . util . ResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . factory . config . BeanPostProcessor ; import org . springframework . context . ApplicationContext ; public class RouteBuilderFinder { private static final transient Log LOG = LogFactory . getLog ( RouteBuilderFinder . class ) ; private final SpringCamelContext camelContext ; private final String [ ] packages ; private ApplicationContext applicationContext ; private ResolverUtil resolver = new ResolverUtil ( ) ; private BeanPostProcessor beanPostProcessor ; public RouteBuilderFinder ( SpringCamelContext camelContext , String [ ] packages , ClassLoader classLoader , BeanPostProcessor postProcessor ) { this . camelContext = camelContext ; this . applicationContext = camelContext . getApplicationContext ( ) ; this . packages = packages ; this . beanPostProcessor = postProcessor ; Set set = resolver . getClassLoaders ( ) ; set . clear ( ) ; set . add ( classLoader ) ; } public String [ ] getPackages ( ) { return packages ; } public ApplicationContext getApplicationContext ( ) { return applicationContext ; } public void appendBuilders ( List < RouteBuilder > list ) throws IllegalAccessException , InstantiationException { resolver . findImplementations ( RouteBuilder . class , packages ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class aClass : classes ) { if ( shouldIgnoreBean ( aClass ) ) { continue ; } if ( isValidClass ( aClass ) ) { RouteBuilder builder = instantiateBuilder ( aClass ) ; if ( beanPostProcessor != null ) { beanPostProcessor . postProcessBeforeInitialization ( builder , builder . toString ( ) ) ; } list . add ( builder ) ; } } } public void destroy ( ) throws Exception { } protected boolean shouldIgnoreBean ( Class type ) { Map beans = applicationContext . getBeansOfType ( type , true , true ) ; if ( beans == null || beans . isEmpty ( ) ) { return false ; } return true ; } protected boolean isValidClass ( Class type ) { if ( ! Modifier . isAbstract ( type . getModifiers ( ) ) && ! type . isInterface ( ) ) { return true ; } return false ; } protected RouteBuilder instantiateBuilder ( Class type ) throws IllegalAccessException , InstantiationException { return ( RouteBuilder ) camelContext . getInjector ( ) . newInstance ( type ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionHelper ; public class Delayer extends DelayProcessorSupport { private Expression < Exchange > timeExpression ; private long delay ; public Delayer ( Processor processor , Expression < Exchange > timeExpression , long delay ) { super ( processor ) ; this . timeExpression = timeExpression ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[on: " + timeExpression + " delay: " + delay + " to: " + getProcessor ( ) + "]" ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } protected void delay ( Exchange exchange ) throws Exception { long time = 0 ; if ( timeExpression != null ) { Long longValue = ExpressionHelper . evaluateAsType ( timeExpression , exchange , Long . class ) ; if ( longValue != null ) { time = longValue . longValue ( ) ; } } if ( time <= 0 ) { time = defaultProcessTime ( exchange ) ; } time += delay ; waitUntil ( time , exchange ) ; } protected long defaultProcessTime ( Exchange exchange ) { return currentSystemTime ( ) ; } } 	1
package org . apache . camel . bam . model ; import javax . persistence . GeneratedValue ; import javax . persistence . Id ; public class EntitySupport { private Long id ; @ Id @ GeneratedValue public Long getId ( ) { return id ; } public void setId ( Long id ) { this . id = id ; } public String toString ( ) { return getClass ( ) . getName ( ) + "[" + id + "]" ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandler extends ErrorHandlerSupport { private Processor output ; private Log log ; private LoggingLevel level ; public LoggingErrorHandler ( Processor output ) { this ( output , LogFactory . getLog ( LoggingErrorHandler . class ) , LoggingLevel . INFO ) ; } public LoggingErrorHandler ( Processor output , Log log , LoggingLevel level ) { this . output = output ; this . log = log ; this . level = level ; } @ Override public String toString ( ) { return "LoggingErrorHandler[" + output + "]" ; } public void process ( Exchange exchange ) throws Exception { try { output . process ( exchange ) ; } catch ( Throwable e ) { if ( ! customProcessorForException ( exchange , e ) ) { logError ( exchange , e ) ; } } } public Processor getOutput ( ) { return output ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } protected void logError ( Exchange exchange , Throwable e ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange , e ) , e ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange , e ) , e ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange , e ) , e ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange , e ) , e ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange , e ) , e ) ; } } protected Object logMessage ( Exchange exchange , Throwable e ) { return e + " while processing exchange: " + exchange ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( output ) ; } } 	1
package org . apache . camel . component . http ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class HttpExchange extends DefaultExchange { private final HttpEndpoint endpoint ; private HttpServletRequest request ; private HttpServletResponse response ; public HttpExchange ( HttpEndpoint endpoint , ExchangePattern pattern ) { super ( endpoint . getCamelContext ( ) , pattern ) ; this . endpoint = endpoint ; } public HttpExchange ( HttpEndpoint endpoint , HttpServletRequest request , HttpServletResponse response ) { this ( endpoint , getPatternFromRequest ( request ) ) ; this . request = request ; this . response = response ; setIn ( new HttpMessage ( this , request ) ) ; } public HttpServletRequest getRequest ( ) { return request ; } public HttpServletResponse getResponse ( ) { return response ; } public HttpEndpoint getEndpoint ( ) { return endpoint ; } protected static ExchangePattern getPatternFromRequest ( HttpServletRequest request ) { return ExchangePattern . InOut ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . processor . resequencer . ResequencerEngine ; import org . apache . camel . processor . resequencer . SequenceElementComparator ; import org . apache . camel . processor . resequencer . SequenceSender ; public class StreamResequencer extends DelegateProcessor implements Processor { private ResequencerEngine < Exchange > reseq ; private BlockingQueue < Exchange > queue ; private SequenceSender sender ; public StreamResequencer ( Processor processor , SequenceElementComparator < Exchange > comparator , int capacity ) { super ( processor ) ; queue = new LinkedBlockingQueue < Exchange > ( ) ; reseq = new ResequencerEngine < Exchange > ( comparator , capacity ) ; reseq . setOutQueue ( queue ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; sender = new SequenceSender ( getProcessor ( ) ) ; sender . setQueue ( queue ) ; sender . start ( ) ; } @ Override protected void doStop ( ) throws Exception { reseq . stop ( ) ; sender . cancel ( ) ; super . doStop ( ) ; } @ Override public void process ( Exchange exchange ) throws Exception { reseq . put ( exchange ) ; } public long getTimeout ( ) { return reseq . getTimeout ( ) ; } public void setTimeout ( long timeout ) { reseq . setTimeout ( timeout ) ; } @ Override public String toString ( ) { return "StreamResequencer[to: " + getProcessor ( ) + "]" ; } } 	1
package org . apache . camel . language . juel ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; public class JuelLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return new JuelExpression ( expression , Boolean . class ) ; } public Expression < Exchange > createExpression ( String expression ) { return new JuelExpression ( expression , Object . class ) ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TraceInterceptor extends DelegateProcessor implements ExchangeFormatter { private final ProcessorType node ; private Predicate traceFilter ; private boolean traceExceptions = true ; private Logger logger = new Logger ( LogFactory . getLog ( TraceInterceptor . class ) , this ) ; private TraceFormatter formatter ; public TraceInterceptor ( ProcessorType node , Processor target , TraceFormatter formatter ) { super ( target ) ; this . node = node ; this . formatter = formatter ; } @ Override public String toString ( ) { return "TraceInterceptor[" + node + "]" ; } public void process ( Exchange exchange ) throws Exception { try { if ( shouldLogExchange ( exchange ) ) { logExchange ( exchange ) ; } super . proceed ( exchange ) ; } catch ( Exception e ) { logException ( exchange , e ) ; throw e ; } catch ( Error e ) { logException ( exchange , e ) ; throw e ; } } public Object format ( Exchange exchange ) { return formatter . format ( this , exchange ) ; } public ProcessorType getNode ( ) { return node ; } public Predicate getTraceFilter ( ) { return traceFilter ; } public void setTraceFilter ( Predicate traceFilter ) { this . traceFilter = traceFilter ; } public boolean isTraceExceptions ( ) { return traceExceptions ; } public void setTraceExceptions ( boolean traceExceptions ) { this . traceExceptions = traceExceptions ; } public Logger getLogger ( ) { return logger ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } public LoggingLevel getLevel ( ) { return getLogger ( ) . getLevel ( ) ; } public Log getLog ( ) { return getLogger ( ) . getLog ( ) ; } public void setLog ( Log log ) { getLogger ( ) . setLog ( log ) ; } public void setLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; } protected void logExchange ( Exchange exchange ) { logger . process ( exchange ) ; } protected void logException ( Exchange exchange , Throwable throwable ) { logger . process ( exchange , throwable ) ; } protected boolean shouldLogExchange ( Exchange exchange ) { return traceFilter == null || traceFilter . matches ( exchange ) ; } } 	1
package org . apache . camel . component . jcr ; import java . io . InputStream ; import java . util . Calendar ; import javax . jcr . Value ; import org . apache . camel . Converter ; import org . apache . jackrabbit . value . BinaryValue ; import org . apache . jackrabbit . value . BooleanValue ; import org . apache . jackrabbit . value . DateValue ; import org . apache . jackrabbit . value . StringValue ; @ Converter public class JcrConverter { @ Converter public Value toValue ( Boolean bool ) { return new BooleanValue ( bool ) ; } @ Converter public Value toValue ( InputStream stream ) { return new BinaryValue ( stream ) ; } @ Converter public Value toValue ( Calendar calendar ) { return new DateValue ( calendar ) ; } @ Converter public Value toValue ( String value ) { return new StringValue ( value ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class ValueBuilder < E extends Exchange > implements Expression < E > { private Expression < E > expression ; public ValueBuilder ( Expression < E > expression ) { this . expression = expression ; } public Object evaluate ( E exchange ) { return expression . evaluate ( exchange ) ; } public Expression < E > getExpression ( ) { return expression ; } @ Override public String toString ( ) { return expression . toString ( ) ; } public Predicate < E > isNotEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isNotEqualTo ( expression , right ) ) ; } public Predicate < E > isEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isEqualTo ( expression , right ) ) ; } public Predicate < E > isLessThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThan ( expression , right ) ) ; } public Predicate < E > isLessThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isGreaterThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThan ( expression , right ) ) ; } public Predicate < E > isGreaterThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isInstanceOf ( Class type ) { return onNewPredicate ( PredicateBuilder . isInstanceOf ( expression , type ) ) ; } public Predicate < E > matchesRegex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public Predicate < E > isNull ( ) { return onNewPredicate ( PredicateBuilder . isNull ( expression ) ) ; } public Predicate < E > isNotNull ( ) { return onNewPredicate ( PredicateBuilder . isNotNull ( expression ) ) ; } public Predicate < E > contains ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . contains ( expression , right ) ) ; } public Predicate < E > regex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public ValueBuilder < E > tokenize ( ) { return tokenize ( "\n" ) ; } public ValueBuilder < E > tokenize ( String token ) { Expression < E > newExp = ExpressionBuilder . tokenizeExpression ( expression , token ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexTokenize ( String regex ) { Expression < E > newExp = ExpressionBuilder . regexTokenize ( expression , regex ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , String replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , Expression < E > replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertTo ( Class type ) { Expression < E > newExp = ExpressionBuilder . convertTo ( expression , type ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertToString ( ) { return convertTo ( String . class ) ; } public ValueBuilder < E > append ( Object value ) { return new ValueBuilder < E > ( ExpressionBuilder . append ( expression , asExpression ( value ) ) ) ; } protected Predicate < E > onNewPredicate ( Predicate < E > predicate ) { return predicate ; } protected Expression < E > asExpression ( Object value ) { if ( value instanceof Expression ) { return ( Expression < E > ) value ; } else { return ExpressionBuilder . constantExpression ( value ) ; } } } 	1
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ExchangeHelper ; public class StringDataFormat implements DataFormat { private String charset ; public StringDataFormat ( String charset ) { this . charset = charset ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { String text = ExchangeHelper . convertToType ( exchange , String . class , graph ) ; byte [ ] bytes ; if ( charset != null ) { bytes = text . getBytes ( charset ) ; } else { bytes = text . getBytes ( ) ; } stream . write ( bytes ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { byte [ ] bytes = IOConverter . toBytes ( stream ) ; String answer ; if ( charset != null ) { answer = new String ( bytes , charset ) ; } else { answer = new String ( bytes ) ; } return answer ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "catch" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CatchType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; public CatchType ( ) { } public CatchType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public CatchType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Catch[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "catch" ; } @ Override public String getLabel ( ) { return getExceptionClasses ( ) . toString ( ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . processor . resequencer ; public interface TimeoutHandler { void timeout ( Timeout timeout ) ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . MarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "marshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public MarshalType ( ) { } public MarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public MarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "marshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new MarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . component . cxf ; import java . util . ArrayList ; import java . util . List ; import javax . xml . ws . WebServiceProvider ; import org . apache . camel . Processor ; import org . apache . camel . component . cxf . feature . MessageDataFormatFeature ; import org . apache . camel . component . cxf . feature . PayLoadDataFormatFeature ; import org . apache . camel . component . cxf . spring . CxfEndpointBean ; import org . apache . camel . component . cxf . util . CxfEndpointUtils ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . cxf . Bus ; import org . apache . cxf . BusFactory ; import org . apache . cxf . bus . spring . SpringBusFactory ; import org . apache . cxf . common . classloader . ClassLoaderUtils ; import org . apache . cxf . endpoint . Server ; import org . apache . cxf . feature . AbstractFeature ; import org . apache . cxf . frontend . ServerFactoryBean ; public class CxfConsumer extends DefaultConsumer < CxfExchange > { private CxfEndpoint endpoint ; private Server server ; public CxfConsumer ( CxfEndpoint endpoint , Processor processor ) throws Exception { super ( endpoint , processor ) ; Bus bus = null ; this . endpoint = endpoint ; boolean isWebServiceProvider = false ; if ( endpoint . getApplicationContext ( ) != null ) { SpringBusFactory bf = new SpringBusFactory ( endpoint . getApplicationContext ( ) ) ; bus = bf . createBus ( ) ; if ( CxfEndpointUtils . getSetDefaultBus ( endpoint ) ) { BusFactory . setDefaultBus ( bus ) ; } } else { bus = BusFactory . getDefaultBus ( ) ; } ServerFactoryBean svrBean = null ; if ( endpoint . isSpringContextEndpoint ( ) ) { CxfEndpointBean endpointBean = endpoint . getCxfEndpointBean ( ) ; svrBean = CxfEndpointUtils . getServerFactoryBean ( endpointBean . getServiceClass ( ) ) ; isWebServiceProvider = CxfEndpointUtils . hasAnnotation ( endpointBean . getServiceClass ( ) , WebServiceProvider . class ) ; endpoint . configure ( svrBean ) ; } else { Class serviceClass = ClassLoaderUtils . loadClass ( endpoint . getServiceClass ( ) , this . getClass ( ) ) ; svrBean = CxfEndpointUtils . getServerFactoryBean ( serviceClass ) ; isWebServiceProvider = CxfEndpointUtils . hasAnnotation ( serviceClass , WebServiceProvider . class ) ; svrBean . setAddress ( endpoint . getAddress ( ) ) ; svrBean . setServiceClass ( serviceClass ) ; if ( endpoint . getServiceName ( ) != null ) { svrBean . setServiceName ( CxfEndpointUtils . getServiceName ( endpoint ) ) ; } if ( endpoint . getPortName ( ) != null ) { svrBean . setEndpointName ( CxfEndpointUtils . getPortName ( endpoint ) ) ; } if ( endpoint . getWsdlURL ( ) != null ) { svrBean . setWsdlURL ( endpoint . getWsdlURL ( ) ) ; } } DataFormat dataFormat = CxfEndpointUtils . getDataFormat ( endpoint ) ; svrBean . setInvoker ( new CamelInvoker ( this ) ) ; if ( ! dataFormat . equals ( DataFormat . POJO ) && ! isWebServiceProvider ) { List < AbstractFeature > features = new ArrayList < AbstractFeature > ( ) ; if ( dataFormat . equals ( DataFormat . PAYLOAD ) ) { features . add ( new PayLoadDataFormatFeature ( ) ) ; } else if ( dataFormat . equals ( DataFormat . MESSAGE ) ) { features . add ( new MessageDataFormatFeature ( ) ) ; } svrBean . setFeatures ( features ) ; } svrBean . setBus ( bus ) ; svrBean . setStart ( false ) ; server = svrBean . create ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; server . start ( ) ; } @ Override protected void doStop ( ) throws Exception { server . stop ( ) ; super . doStop ( ) ; } public CxfEndpoint getEndpoint ( ) { return endpoint ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . RejectedExecutionHandler ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ServiceHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class MulticastProcessor extends ServiceSupport implements Processor { static class ProcessorExchangePair { private final Processor processor ; private final Exchange exchange ; public ProcessorExchangePair ( Processor processor , Exchange exchange ) { this . processor = processor ; this . exchange = exchange ; } public Processor getProcessor ( ) { return processor ; } public Exchange getExchange ( ) { return exchange ; } } private Collection < Processor > processors ; private AggregationStrategy aggregationStrategy ; private boolean isParallelProcessing ; private ThreadPoolExecutor executor ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; public MulticastProcessor ( Collection < Processor > processors ) { this ( processors , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy ) { this ( processors , aggregationStrategy , false , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor executor ) { notNull ( processors , "processors" ) ; this . processors = processors ; this . aggregationStrategy = aggregationStrategy ; this . isParallelProcessing = parallelProcessing ; if ( isParallelProcessing ) { if ( executor != null ) { this . executor = executor ; } else { this . executor = new ThreadPoolExecutor ( processors . size ( ) , processors . size ( ) , 0 , TimeUnit . MILLISECONDS , new ArrayBlockingQueue < Runnable > ( processors . size ( ) ) ) ; } } } public static < E extends Exchange > Collection < Processor > toProducers ( Collection < Endpoint > endpoints ) throws Exception { Collection < Processor > answer = new ArrayList < Processor > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint . createProducer ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Multicast" + getProcessors ( ) ; } class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; private final Processor processor ; public ProcessCall ( Exchange exchange , Processor processor , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; this . processor = processor ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; callback . done ( false ) ; } else { try { processor . process ( exchange ) ; } catch ( Exception ex ) { exchange . setException ( ex ) ; } callback . done ( false ) ; } } } public void process ( Exchange exchange ) throws Exception { Exchange result = null ; List < ProcessorExchangePair > pairs = createProcessorExchangePairs ( exchange ) ; if ( isParallelProcessing ) { Exchange [ ] exchanges = new Exchange [ pairs . size ( ) ] ; final CountDownLatch completedExchanges = new CountDownLatch ( pairs . size ( ) ) ; int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; exchanges [ i ] = pair . getExchange ( ) ; updateNewExchange ( exchanges [ i ] , i , pairs ) ; ProcessCall call = new ProcessCall ( exchanges [ i ] , producer , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { completedExchanges . countDown ( ) ; } } ) ; executor . execute ( call ) ; i ++ ; } completedExchanges . await ( ) ; if ( aggregationStrategy != null ) { for ( Exchange resultExchange : exchanges ) { if ( result == null ) { result = resultExchange ; } else { result = aggregationStrategy . aggregate ( result , resultExchange ) ; } } } } else { int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; Exchange subExchange = pair . getExchange ( ) ; updateNewExchange ( subExchange , i , pairs ) ; producer . process ( subExchange ) ; if ( aggregationStrategy != null ) { if ( result == null ) { result = subExchange ; } else { result = aggregationStrategy . aggregate ( result , subExchange ) ; } } i ++ ; } } if ( result != null ) { ExchangeHelper . copyResults ( exchange , result ) ; } } protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { } protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { List < ProcessorExchangePair > result = new ArrayList < ProcessorExchangePair > ( processors . size ( ) ) ; Processor [ ] processorsArray = processors . toArray ( new Processor [ processors . size ( ) ] ) ; for ( int i = 0 ; i < processorsArray . length ; i ++ ) { result . add ( new ProcessorExchangePair ( processorsArray [ i ] , exchange . copy ( ) ) ) ; } return result ; } protected void doStop ( ) throws Exception { shutdown . set ( true ) ; if ( executor != null ) { executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } ServiceHelper . stopServices ( processors ) ; } protected void doStart ( ) throws Exception { shutdown . set ( false ) ; if ( executor != null ) { executor . setRejectedExecutionHandler ( new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor executor ) { ProcessCall call = ( ProcessCall ) runnable ; call . exchange . setException ( new RejectedExecutionException ( ) ) ; call . callback . done ( false ) ; } } ) ; } ServiceHelper . startServices ( processors ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } } 	1
package org . apache . camel . component . atom ; import java . util . Date ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Entry ; import org . apache . abdera . model . Feed ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class UpdatedDateFilter implements EntryFilter { private static final transient Log LOG = LogFactory . getLog ( UpdatedDateFilter . class ) ; private Date lastUpdate ; public UpdatedDateFilter ( Date lastUpdate ) { this . lastUpdate = lastUpdate ; } public boolean isValidEntry ( AtomEndpoint endpoint , Document < Feed > feed , Entry entry ) { Date updated = entry . getUpdated ( ) ; if ( updated == null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No updated time for entry so assuming its valid: entry=[" + entry + "]" ) ; } return true ; } if ( lastUpdate != null ) { if ( lastUpdate . after ( updated ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Entry is older than lastupdate=[" + lastUpdate + "], no valid entry=[" + entry + "]" ) ; } return false ; } } lastUpdate = updated ; return true ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import javax . naming . Context ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . management . InstrumentationLifecycleStrategy ; import org . apache . camel . management . JmxSystemPropertyKeys ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . interceptor . Tracer ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ReflectionInjector ; import org . apache . camel . util . SystemHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; public class DefaultCamelContext extends ServiceSupport implements CamelContext , Service { private static final transient Log LOG = LogFactory . getLog ( DefaultCamelContext . class ) ; private static final String NAME_PREFIX = "camel-" ; private static int nameSuffix ; private String name ; private final Map < String , Endpoint > endpoints = new HashMap < String , Endpoint > ( ) ; private final Map < String , Component > components = new HashMap < String , Component > ( ) ; private List < Route > routes ; private List < Service > servicesToClose = new ArrayList < Service > ( ) ; private TypeConverter typeConverter ; private ExchangeConverter exchangeConverter ; private Injector injector ; private ComponentResolver componentResolver ; private boolean autoCreateComponents = true ; private LanguageResolver languageResolver = new DefaultLanguageResolver ( ) ; private Registry registry ; private LifecycleStrategy lifecycleStrategy ; private List < RouteType > routeDefinitions = new ArrayList < RouteType > ( ) ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private Boolean trace ; private ErrorHandlerBuilder errorHandlerBuilder ; public DefaultCamelContext ( ) { name = NAME_PREFIX + ++ nameSuffix ; if ( Boolean . getBoolean ( JmxSystemPropertyKeys . DISABLED ) ) { LOG . info ( "JMX is disabled. Using DefaultLifecycleStrategy." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } else { try { LOG . info ( "JMX enabled. Using InstrumentationLifecycleStrategy." ) ; lifecycleStrategy = new InstrumentationLifecycleStrategy ( ) ; } catch ( NoClassDefFoundError e ) { LOG . warn ( "Could not find needed classes for JMX lifecycle strategy." + " Are you missing spring-context.jar by any chance? NoClassDefFoundError: " + e . getMessage ( ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not create JMX lifecycle strategy, caused by: " + e . getMessage ( ) ) ; } if ( lifecycleStrategy == null ) { LOG . warn ( "Not possible to use JMX lifecycle strategy. Using DefaultLifecycleStrategy instead." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } } } public DefaultCamelContext ( Context jndiContext ) { this ( new JndiRegistry ( jndiContext ) ) ; } public DefaultCamelContext ( Registry registry ) { this ( ) ; this . registry = registry ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public void addComponent ( String componentName , final Component component ) { if ( component == null ) { throw new IllegalArgumentException ( "Component cannot be null" ) ; } synchronized ( components ) { if ( components . containsKey ( componentName ) ) { throw new IllegalArgumentException ( "Component previously added: " + componentName ) ; } component . setCamelContext ( this ) ; components . put ( componentName , component ) ; } } public Component getComponent ( String name ) { synchronized ( components ) { Component component = components . get ( name ) ; if ( component == null && autoCreateComponents ) { try { component = getComponentResolver ( ) . resolveComponent ( name , this ) ; if ( component != null ) { addComponent ( name , component ) ; if ( isStarted ( ) ) { startServices ( component ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( "Could not auto create component: " + name , e ) ; } } return component ; } } public < T extends Component > T getComponent ( String name , Class < T > componentType ) { Component component = getComponent ( name ) ; if ( componentType . isInstance ( component ) ) { return componentType . cast ( component ) ; } else { throw new IllegalArgumentException ( "The component is not of type: " + componentType + " but is: " + component ) ; } } public Component removeComponent ( String componentName ) { synchronized ( components ) { return components . remove ( componentName ) ; } } public Component getOrCreateComponent ( String componentName , Callable < Component > factory ) { synchronized ( components ) { Component component = components . get ( componentName ) ; if ( component == null ) { try { component = factory . call ( ) ; if ( component == null ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component, it returned null." ) ; } components . put ( componentName , component ) ; component . setCamelContext ( this ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component" , e ) ; } } return component ; } } public Collection < Endpoint > getSingletonEndpoints ( ) { synchronized ( endpoints ) { return new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } } public Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { startServices ( endpoint ) ; oldEndpoint = endpoints . remove ( uri ) ; endpoints . put ( uri , endpoint ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint removeSingletonEndpoint ( String uri ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { oldEndpoint = endpoints . remove ( uri ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint getEndpoint ( String uri ) { Endpoint answer ; synchronized ( endpoints ) { answer = endpoints . get ( uri ) ; if ( answer == null ) { try { String splitURI [ ] = ObjectHelper . splitOnCharacter ( uri , ":" , 2 ) ; if ( splitURI [ 1 ] != null ) { String scheme = splitURI [ 0 ] ; Component component = getComponent ( scheme ) ; if ( component != null ) { answer = component . createEndpoint ( uri ) ; if ( answer != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( uri + " converted to endpoint: " + answer + " by component: " + component ) ; } } } if ( answer == null ) { answer = createEndpoint ( uri ) ; } if ( answer != null ) { addService ( answer ) ; if ( answer . isSingleton ( ) ) { endpoints . put ( uri , answer ) ; lifecycleStrategy . onEndpointAdd ( answer ) ; } } } catch ( Exception e ) { LOG . debug ( "Failed to resolve endpoint " + uri + ". Reason: " + e , e ) ; throw new ResolveEndpointFailedException ( uri , e ) ; } } } return answer ; } public < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) { Endpoint endpoint = getEndpoint ( name ) ; if ( endpointType . isInstance ( endpoint ) ) { return endpointType . cast ( endpoint ) ; } else { throw new IllegalArgumentException ( "The endpoint is not of type: " + endpointType + " but is: " + endpoint ) ; } } public List < Route > getRoutes ( ) { if ( routes == null ) { routes = new ArrayList < Route > ( ) ; } return routes ; } public void setRoutes ( List < Route > routes ) { this . routes = routes ; } public void addRoutes ( Collection < Route > routes ) throws Exception { if ( this . routes == null ) { this . routes = new ArrayList < Route > ( routes ) ; } else { this . routes . addAll ( routes ) ; } lifecycleStrategy . onRoutesAdd ( routes ) ; if ( shouldStartRoutes ( ) ) { startRoutes ( routes ) ; } } public void addRoutes ( Routes builder ) throws Exception { builder . setContext ( this ) ; List < Route > routeList = builder . getRouteList ( ) ; LOG . debug ( "Adding routes from: " + builder + " routes: " + routeList ) ; addRoutes ( routeList ) ; } public void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception { this . routeDefinitions . addAll ( routeDefinitions ) ; if ( shouldStartRoutes ( ) ) { startRouteDefinitions ( routeDefinitions ) ; } } public void addService ( Object object ) throws Exception { if ( object instanceof Service ) { Service service = ( Service ) object ; service . start ( ) ; servicesToClose . add ( service ) ; } } public Language resolveLanguage ( String language ) { return getLanguageResolver ( ) . resolveLanguage ( language , this ) ; } public ExchangeConverter getExchangeConverter ( ) { if ( exchangeConverter == null ) { exchangeConverter = createExchangeConverter ( ) ; } return exchangeConverter ; } public void setExchangeConverter ( ExchangeConverter exchangeConverter ) { this . exchangeConverter = exchangeConverter ; } public TypeConverter getTypeConverter ( ) { if ( typeConverter == null ) { typeConverter = createTypeConverter ( ) ; } return typeConverter ; } public void setTypeConverter ( TypeConverter typeConverter ) { this . typeConverter = typeConverter ; } public Injector getInjector ( ) { if ( injector == null ) { injector = createInjector ( ) ; } return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } public ComponentResolver getComponentResolver ( ) { if ( componentResolver == null ) { componentResolver = createComponentResolver ( ) ; } return componentResolver ; } public void setComponentResolver ( ComponentResolver componentResolver ) { this . componentResolver = componentResolver ; } public LanguageResolver getLanguageResolver ( ) { return languageResolver ; } public void setLanguageResolver ( LanguageResolver languageResolver ) { this . languageResolver = languageResolver ; } public boolean isAutoCreateComponents ( ) { return autoCreateComponents ; } public void setAutoCreateComponents ( boolean autoCreateComponents ) { this . autoCreateComponents = autoCreateComponents ; } public Registry getRegistry ( ) { if ( registry == null ) { registry = createRegistry ( ) ; } return registry ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public LifecycleStrategy getLifecycleStrategy ( ) { return lifecycleStrategy ; } public void setLifecycleStrategy ( LifecycleStrategy lifecycleStrategy ) { this . lifecycleStrategy = lifecycleStrategy ; } public List < RouteType > getRouteDefinitions ( ) { return routeDefinitions ; } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public boolean getTrace ( ) { final Boolean value = getTracing ( ) ; if ( value != null ) { return value ; } else { return SystemHelper . isSystemProperty ( "canel.trace" ) ; } } public Boolean getTracing ( ) { return trace ; } public void setTrace ( Boolean trace ) { this . trace = trace ; } public < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) { return new DefaultProducerTemplate < E > ( this ) ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void doStart ( ) throws Exception { if ( getTrace ( ) ) { boolean found = false ; final List < InterceptStrategy > list = getInterceptStrategies ( ) ; for ( InterceptStrategy strategy : list ) { if ( strategy instanceof Tracer ) { found = true ; } } if ( ! found ) { addInterceptStrategy ( new Tracer ( ) ) ; } } lifecycleStrategy . onContextStart ( this ) ; forceLazyInitialization ( ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { startServices ( component ) ; } } startRouteDefinitions ( routeDefinitions ) ; startRoutes ( routes ) ; } protected void startRouteDefinitions ( Collection < RouteType > list ) throws Exception { if ( list != null ) { Collection < Route > routes = new ArrayList < Route > ( ) ; for ( RouteType route : list ) { route . addRoutes ( this , routes ) ; } addRoutes ( routes ) ; } } protected void doStop ( ) throws Exception { stopServices ( servicesToClose ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { stopServices ( component ) ; } } } protected void startRoutes ( Collection < Route > routeList ) throws Exception { if ( routeList != null ) { for ( Route < Exchange > route : routeList ) { List < Service > services = route . getServicesForRoute ( ) ; for ( Service service : services ) { addService ( service ) ; } } } } protected void forceLazyInitialization ( ) { getExchangeConverter ( ) ; getInjector ( ) ; getLanguageResolver ( ) ; getTypeConverter ( ) ; } protected ExchangeConverter createExchangeConverter ( ) { return new DefaultExchangeConverter ( ) ; } protected TypeConverter createTypeConverter ( ) { return new DefaultTypeConverter ( getInjector ( ) ) ; } protected Injector createInjector ( ) { FactoryFinder finder = new FactoryFinder ( ) ; try { return ( Injector ) finder . newInstance ( "Injector" ) ; } catch ( NoFactoryAvailableException e ) { return new ReflectionInjector ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } protected ComponentResolver createComponentResolver ( ) { return new DefaultComponentResolver ( ) ; } protected Registry createRegistry ( ) { return new JndiRegistry ( ) ; } protected Endpoint createEndpoint ( String uri ) { Object value = getRegistry ( ) . lookup ( uri ) ; if ( value instanceof Endpoint ) { return ( Endpoint ) value ; } else if ( value instanceof Processor ) { return new ProcessorEndpoint ( uri , this , ( Processor ) value ) ; } else if ( value != null ) { return convertBeanToEndpoint ( uri , value ) ; } return null ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { throw new IllegalArgumentException ( "uri: " + uri + " bean: " + bean + " could not be converted to an Endpoint" ) ; } protected boolean shouldStartRoutes ( ) { return isStarted ( ) && ! isStarting ( ) ; } } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "python" ) public @ interface Python { String value ( ) ; } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class Builder { private Builder ( ) { } public static < E extends Exchange > ValueBuilder < E > constant ( Object value ) { Expression < E > expression = ExpressionBuilder . constantExpression ( value ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > header ( String name ) { Expression < E > expression = ExpressionBuilder . headerExpression ( name ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > body ( ) { Expression < E > expression = ExpressionBuilder . bodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > bodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > bodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > outBody ( ) { Expression < E > expression = ExpressionBuilder . outBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > outBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > outBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > faultBody ( ) { Expression < E > expression = ExpressionBuilder . faultBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > faultBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > faultBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name , final String defaultValue ) { return new ValueBuilder < E > ( ExpressionBuilder . < E > systemProperty ( name , defaultValue ) ) ; } } 	1
package org . apache . camel . component . quartz ; import java . util . Date ; import java . util . Map ; import java . util . Set ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . quartz . JobDetail ; import org . quartz . JobExecutionContext ; import org . quartz . JobExecutionException ; import org . quartz . Scheduler ; import org . quartz . SchedulerException ; import org . quartz . SimpleTrigger ; import org . quartz . Trigger ; public class QuartzEndpoint extends DefaultEndpoint < QuartzExchange > { public static final String ENDPOINT_KEY = "org.apache.camel.quartz" ; private static final transient Log LOG = LogFactory . getLog ( QuartzEndpoint . class ) ; private Scheduler scheduler ; private LoadBalancer loadBalancer ; private Trigger trigger ; private JobDetail jobDetail ; private boolean started ; public QuartzEndpoint ( String endpointUri , QuartzComponent component , Scheduler scheduler ) { super ( endpointUri , component ) ; this . scheduler = scheduler ; } public QuartzEndpoint ( String endpointUri , Scheduler scheduler ) { super ( endpointUri ) ; this . scheduler = scheduler ; } public void addTriggers ( Map < Trigger , JobDetail > triggerMap ) throws SchedulerException { if ( triggerMap != null ) { Set < Map . Entry < Trigger , JobDetail > > entries = triggerMap . entrySet ( ) ; for ( Map . Entry < Trigger , JobDetail > entry : entries ) { Trigger key = entry . getKey ( ) ; JobDetail value = entry . getValue ( ) ; ObjectHelper . notNull ( key , "key" ) ; ObjectHelper . notNull ( value , "value" ) ; addTrigger ( key , value ) ; } } } public void addTrigger ( Trigger trigger , JobDetail detail ) throws SchedulerException { if ( trigger . getName ( ) == null ) { trigger . setName ( detail . getName ( ) ) ; } if ( trigger . getGroup ( ) == null ) { trigger . setGroup ( detail . getGroup ( ) ) ; } if ( trigger . getStartTime ( ) == null ) { trigger . setStartTime ( new Date ( ) ) ; } detail . getJobDataMap ( ) . put ( ENDPOINT_KEY , this ) ; Class jobClass = detail . getJobClass ( ) ; if ( jobClass == null ) { detail . setJobClass ( CamelJob . class ) ; } if ( detail . getName ( ) == null ) { detail . setName ( getEndpointUri ( ) ) ; } getScheduler ( ) . scheduleJob ( detail , trigger ) ; } public void removeTrigger ( Trigger trigger , JobDetail jobDetail ) throws SchedulerException { getScheduler ( ) . unscheduleJob ( trigger . getName ( ) , trigger . getGroup ( ) ) ; } public void onJobExecute ( JobExecutionContext jobExecutionContext ) throws JobExecutionException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Firing Quartz Job with context: " + jobExecutionContext ) ; } QuartzExchange exchange = createExchange ( jobExecutionContext ) ; try { getLoadBalancer ( ) . process ( exchange ) ; } catch ( JobExecutionException e ) { throw e ; } catch ( Exception e ) { throw new JobExecutionException ( e ) ; } } @ Override public QuartzExchange createExchange ( ExchangePattern pattern ) { return new QuartzExchange ( getCamelContext ( ) , pattern , null ) ; } public QuartzExchange createExchange ( JobExecutionContext jobExecutionContext ) { return new QuartzExchange ( getCamelContext ( ) , getExchangePattern ( ) , jobExecutionContext ) ; } public Producer < QuartzExchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "You cannot send messages to this endpoint" ) ; } public QuartzConsumer createConsumer ( Processor processor ) throws Exception { return new QuartzConsumer ( this , processor ) ; } @ Override public QuartzComponent getComponent ( ) { return ( QuartzComponent ) super . getComponent ( ) ; } public boolean isSingleton ( ) { return true ; } public Scheduler getScheduler ( ) { return scheduler ; } public LoadBalancer getLoadBalancer ( ) { if ( loadBalancer == null ) { loadBalancer = createLoadBalancer ( ) ; } return loadBalancer ; } public void setLoadBalancer ( LoadBalancer loadBalancer ) { this . loadBalancer = loadBalancer ; } public JobDetail getJobDetail ( ) { if ( jobDetail == null ) { jobDetail = createJobDetail ( ) ; } return jobDetail ; } public void setJobDetail ( JobDetail jobDetail ) { this . jobDetail = jobDetail ; } public Trigger getTrigger ( ) { if ( trigger == null ) { trigger = createTrigger ( ) ; } return trigger ; } public void setTrigger ( Trigger trigger ) { this . trigger = trigger ; } public synchronized void consumerStarted ( QuartzConsumer consumer ) throws SchedulerException { getLoadBalancer ( ) . addProcessor ( consumer . getProcessor ( ) ) ; if ( ! started ) { addTrigger ( getTrigger ( ) , getJobDetail ( ) ) ; started = true ; } } public synchronized void consumerStopped ( QuartzConsumer consumer ) throws SchedulerException { getLoadBalancer ( ) . removeProcessor ( consumer . getProcessor ( ) ) ; if ( getLoadBalancer ( ) . getProcessors ( ) . isEmpty ( ) && started ) { removeTrigger ( getTrigger ( ) , getJobDetail ( ) ) ; started = false ; } } protected LoadBalancer createLoadBalancer ( ) { return new RoundRobinLoadBalancer ( ) ; } protected JobDetail createJobDetail ( ) { return new JobDetail ( ) ; } protected Trigger createTrigger ( ) { return new SimpleTrigger ( ) ; } } 	0
package org . apache . camel . component . log ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . ThroughputLogger ; public class LogComponent extends DefaultComponent < Exchange > { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { LoggingLevel level = getLoggingLevel ( parameters ) ; Integer groupSize = getAndRemoveParameter ( parameters , "groupSize" , Integer . class ) ; Logger logger ; if ( groupSize != null ) { logger = new ThroughputLogger ( remaining , level , ObjectConverter . toInteger ( groupSize ) ) ; } else { LogFormatter formatter = new LogFormatter ( ) ; IntrospectionSupport . setProperties ( formatter , parameters ) ; logger = new Logger ( remaining ) ; logger . setLevel ( level ) ; logger . setFormatter ( formatter ) ; } return new ProcessorEndpoint ( uri , this , logger ) ; } protected LoggingLevel getLoggingLevel ( Map parameters ) { String levelText = getAndRemoveParameter ( parameters , "level" , String . class , "INFO" ) ; return LoggingLevel . valueOf ( levelText . toUpperCase ( ) ) ; } } 	1
package org . apache . camel . osgi ; import java . io . BufferedInputStream ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashMap ; import java . util . Map ; import java . util . Properties ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . spi . ComponentResolver ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . osgi . framework . Bundle ; import org . osgi . framework . BundleContext ; import org . osgi . framework . BundleEvent ; import org . osgi . framework . SynchronousBundleListener ; import org . springframework . osgi . util . BundleDelegatingClassLoader ; public class OsgiComponentResolver implements ComponentResolver { private static final transient Log LOG = LogFactory . getLog ( OsgiComponentResolver . class ) ; private BundleContext bundleContext ; private Map < String , ComponentEntry > components ; private class BundleListener implements SynchronousBundleListener { public void bundleChanged ( BundleEvent event ) { try { Bundle bundle = event . getBundle ( ) ; if ( event . getType ( ) == BundleEvent . RESOLVED ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Bundle resolved: " + bundle . getSymbolicName ( ) ) ; } mayBeAddComponentFor ( bundle ) ; } else if ( event . getType ( ) == BundleEvent . UNRESOLVED ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Bundle unresolved: " + bundle . getSymbolicName ( ) ) ; } mayBeRemoveComponentFor ( bundle ) ; } } catch ( Throwable e ) { LOG . fatal ( "Exception handing bundle changed event" , e ) ; } } } private class ComponentEntry { Bundle bundle ; String path ; String name ; Class type ; } public OsgiComponentResolver ( BundleContext bundleContext ) { this . bundleContext = bundleContext ; } protected void init ( ) { if ( components != null ) { return ; } LOG . debug ( "Initializing OsgiComponentResolver" ) ; components = new HashMap < String , ComponentEntry > ( ) ; bundleContext . addBundleListener ( new BundleListener ( ) ) ; Bundle [ ] previousBundles = bundleContext . getBundles ( ) ; for ( int i = 0 ; i < previousBundles . length ; i ++ ) { int state = previousBundles [ i ] . getState ( ) ; if ( state == Bundle . RESOLVED || state == Bundle . ACTIVE ) { try { mayBeAddComponentFor ( previousBundles [ i ] ) ; } catch ( Exception e ) { LOG . error ( "Component " + previousBundles [ i ] + " not added due to " + e . toString ( ) , e ) ; } } } } protected synchronized void mayBeAddComponentFor ( Bundle bundle ) { Enumeration e = bundle . getEntryPaths ( "/META-INF/services/org/apache/camel/component/" ) ; if ( e != null ) { while ( e . hasMoreElements ( ) ) { String path = ( String ) e . nextElement ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found entry: " + path + " in bundle " + bundle . getSymbolicName ( ) ) ; } ComponentEntry entry = new ComponentEntry ( ) ; entry . bundle = bundle ; entry . path = path ; entry . name = path . substring ( path . lastIndexOf ( "/" ) + 1 ) ; components . put ( entry . name , entry ) ; } } } protected synchronized void mayBeRemoveComponentFor ( Bundle bundle ) { for ( ComponentEntry entry : components . values ( ) ) { if ( entry . bundle == bundle ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Removing entry: " + entry . path + " in bundle " + bundle . getSymbolicName ( ) ) ; } components . remove ( entry . name ) ; } } } protected synchronized Class getComponent ( String name ) throws Exception { ComponentEntry entry = components . get ( name ) ; if ( entry == null ) { return null ; } if ( entry . type == null ) { URL url = entry . bundle . getEntry ( entry . path ) ; Properties properties = new Properties ( ) ; BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( url . openStream ( ) ) ; properties . load ( reader ) ; } finally { try { reader . close ( ) ; } catch ( Exception ignore ) { } } String classname = ( String ) properties . get ( "class" ) ; ClassLoader loader = BundleDelegatingClassLoader . createBundleClassLoaderFor ( entry . bundle ) ; entry . type = loader . loadClass ( classname ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " via type: " + entry . type . getName ( ) ) ; } return entry . type ; } public Component resolveComponent ( String name , CamelContext context ) throws Exception { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } } init ( ) ; Class type = null ; try { type = getComponent ( name ) ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . Externalizable ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . Reader ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import javax . xml . transform . stream . StreamSource ; public class StringSource extends StreamSource implements Externalizable { private String text ; private String encoding = "UTF-8" ; public StringSource ( ) { } public StringSource ( String text ) { if ( text == null ) { throw new NullPointerException ( "text can not be null" ) ; } this . text = text ; } public StringSource ( String text , String systemId ) { this ( text ) ; setSystemId ( systemId ) ; } public StringSource ( String text , String systemId , String encoding ) { this . text = text ; this . encoding = encoding ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { try { return new ByteArrayInputStream ( text . getBytes ( encoding ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } public Reader getReader ( ) { return new StringReader ( text ) ; } public String toString ( ) { return "StringSource[" + text + "]" ; } public String getText ( ) { return text ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public void setText ( String text ) { this . text = text ; } public void writeExternal ( ObjectOutput out ) throws IOException { out . writeUTF ( text ) ; out . writeUTF ( encoding ) ; out . writeUTF ( getPublicId ( ) ) ; out . writeUTF ( getSystemId ( ) ) ; } public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { text = in . readUTF ( ) ; encoding = in . readUTF ( ) ; setPublicId ( in . readUTF ( ) ) ; setSystemId ( in . readUTF ( ) ) ; } } 	1
package org . apache . camel . component . jms . requestor ; import javax . jms . JMSException ; import javax . jms . Message ; import org . apache . camel . RuntimeCamelException ; public class FailedToProcessResponse extends RuntimeCamelException { private final Message response ; public FailedToProcessResponse ( Message response , JMSException e ) { super ( "Failed to process response: " + e + ". Message: " + response , e ) ; this . response = response ; } public Message getResponse ( ) { return response ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ConvertBodyProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( ConvertBodyProcessor . class ) ; private final Class type ; public ConvertBodyProcessor ( Class type ) { this . type = type ; } public void process ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object value = in . getBody ( type ) ; if ( value == null ) { LOG . warn ( "Could not convert body of IN message: " + in + " to type: " + type . getName ( ) ) ; } if ( exchange . getPattern ( ) . isOutCapable ( ) ) { Message out = exchange . getOut ( ) ; out . copyFrom ( in ) ; out . setBody ( value ) ; } else { in . setBody ( value ) ; } } } 	1
package org . apache . camel . component . uface ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class UFaceComponent extends DefaultComponent { protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new UFaceEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . spi . Synchronization ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultUnitOfWork implements UnitOfWork { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; private String id ; private List < Synchronization > synchronizations ; private List < AsyncCallback > asyncCallbacks ; private CountDownLatch latch ; public DefaultUnitOfWork ( ) { } public synchronized void addSynchronization ( Synchronization synchronization ) { if ( synchronizations == null ) { synchronizations = new ArrayList < Synchronization > ( ) ; } synchronizations . add ( synchronization ) ; } public synchronized void removeSynchronization ( Synchronization synchronization ) { if ( synchronizations != null ) { synchronizations . remove ( synchronization ) ; } } public void reset ( ) { } public void done ( Exchange exchange ) { if ( synchronizations != null ) { boolean failed = exchange . isFailed ( ) ; for ( Synchronization synchronization : synchronizations ) { if ( failed ) { synchronization . onFailure ( exchange ) ; } else { synchronization . onComplete ( exchange ) ; } } } } public boolean isSynchronous ( ) { return asyncCallbacks == null || asyncCallbacks . isEmpty ( ) ; } public String getId ( ) { if ( id == null ) { id = DEFAULT_ID_GENERATOR . generateId ( ) ; } return id ; } } 	1
package org . apache . camel . builder ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . compare ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class PredicateBuilder { private PredicateBuilder ( ) { } public static < E extends Exchange > Predicate < E > toPredicate ( final Expression < E > expression ) { return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return ObjectHelper . evaluateValuePredicate ( value ) ; } @ Override public String toString ( ) { return expression . toString ( ) ; } } ; } public static < E extends Exchange > Predicate < E > not ( final Predicate < E > predicate ) { notNull ( predicate , "predicate" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { return ! predicate . matches ( exchange ) ; } @ Override public String toString ( ) { return "not " + predicate ; } } ; } public static < E extends Exchange > Predicate < E > and ( final Predicate < E > left , final Predicate < E > right ) { notNull ( left , "left" ) ; notNull ( right , "right" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { return left . matches ( exchange ) && right . matches ( exchange ) ; } @ Override public String toString ( ) { return "(" + left + ") and (" + right + ")" ; } } ; } public static < E extends Exchange > Predicate < E > or ( final Predicate < E > left , final Predicate < E > right ) { notNull ( left , "left" ) ; notNull ( right , "right" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { return left . matches ( exchange ) || right . matches ( exchange ) ; } @ Override public String toString ( ) { return "(" + left + ") or (" + right + ")" ; } } ; } public static < E extends Exchange > Predicate < E > isEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return ObjectHelper . equal ( leftValue , rightValue ) ; } protected String getOperationText ( ) { return "==" ; } } ; } public static < E extends Exchange > Predicate < E > isNotEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return ! ObjectHelper . equal ( leftValue , rightValue ) ; } protected String getOperationText ( ) { return "!=" ; } } ; } public static < E extends Exchange > Predicate < E > isLessThan ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) < 0 ; } protected String getOperationText ( ) { return "<" ; } } ; } public static < E extends Exchange > Predicate < E > isLessThanOrEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) <= 0 ; } protected String getOperationText ( ) { return "<=" ; } } ; } public static < E extends Exchange > Predicate < E > isGreaterThan ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) > 0 ; } protected String getOperationText ( ) { return ">" ; } } ; } public static < E extends Exchange > Predicate < E > isGreaterThanOrEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) >= 0 ; } protected String getOperationText ( ) { return ">=" ; } } ; } public static < E extends Exchange > Predicate < E > contains ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return ObjectHelper . contains ( leftValue , rightValue ) ; } protected String getOperationText ( ) { return "contains" ; } } ; } public static < E extends Exchange > Predicate < E > isNull ( final Expression < E > expression ) { return isEqualTo ( expression , ExpressionBuilder . < E > constantExpression ( null ) ) ; } public static < E extends Exchange > Predicate < E > isNotNull ( final Expression < E > expression ) { return isNotEqualTo ( expression , ExpressionBuilder . < E > constantExpression ( null ) ) ; } public static < E extends Exchange > Predicate < E > isInstanceOf ( final Expression < E > expression , final Class type ) { notNull ( expression , "expression" ) ; notNull ( type , "type" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return type . isInstance ( value ) ; } @ Override public String toString ( ) { return expression + " instanceof " + type . getName ( ) ; } @ Override protected String assertionFailureMessage ( E exchange ) { return super . assertionFailureMessage ( exchange ) + " for <" + expression . evaluate ( exchange ) + ">" ; } } ; } public static < E extends Exchange > Predicate < E > regex ( final Expression < E > expression , final String regex ) { return regex ( expression , Pattern . compile ( regex ) ) ; } public static < E extends Exchange > Predicate < E > regex ( final Expression < E > expression , final Pattern pattern ) { notNull ( expression , "expression" ) ; notNull ( pattern , "pattern" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { Object value = expression . evaluate ( exchange ) ; if ( value != null ) { Matcher matcher = pattern . matcher ( value . toString ( ) ) ; return matcher . matches ( ) ; } return false ; } @ Override public String toString ( ) { return expression + ".matches(" + pattern + ")" ; } @ Override protected String assertionFailureMessage ( E exchange ) { return super . assertionFailureMessage ( exchange ) + " for <" + expression . evaluate ( exchange ) + ">" ; } } ; } } 	0
package org . apache . camel . model ; public class NodeFactory { public FilterType createFilter ( ) { return new FilterType ( ) ; } public RouteType createRoute ( ) { return new RouteType ( ) ; } } 	1
package org . apache . camel . language . ognl ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; public class OgnlLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return new OgnlExpression ( this , expression , Boolean . class ) ; } public Expression < Exchange > createExpression ( String expression ) { return new OgnlExpression ( this , expression , Object . class ) ; } } 	0
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class BeanExchange extends DefaultExchange { public BeanExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public BeanExchange ( DefaultExchange parent ) { super ( parent ) ; } public BeanInvocation getInvocation ( ) { return getIn ( ) . getBody ( BeanInvocation . class ) ; } public void setInvocation ( BeanInvocation invocation ) { getIn ( ) . setBody ( invocation ) ; } @ Override public Exchange newInstance ( ) { return new BeanExchange ( this ) ; } } 	1
package org . apache . camel . component . mina ; import java . net . SocketAddress ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . mina . common . IoAcceptor ; import org . apache . mina . common . IoAcceptorConfig ; import org . apache . mina . common . IoConnector ; import org . apache . mina . common . IoConnectorConfig ; import org . apache . mina . common . IoSession ; public class MinaEndpoint extends DefaultEndpoint < MinaExchange > { private static final long DEFAULT_TIMEOUT = 30000 ; private long timeout = DEFAULT_TIMEOUT ; private final IoAcceptor acceptor ; private final SocketAddress address ; private final IoConnector connector ; private final IoAcceptorConfig acceptorConfig ; private final IoConnectorConfig connectorConfig ; private final boolean lazySessionCreation ; private final boolean transferExchange ; public MinaEndpoint ( String endpointUri , MinaComponent component , SocketAddress address , IoAcceptor acceptor , IoAcceptorConfig acceptorConfig , IoConnector connector , IoConnectorConfig connectorConfig , boolean lazySessionCreation , long timeout , boolean transferExchange ) { super ( endpointUri , component ) ; this . address = address ; this . acceptor = acceptor ; this . acceptorConfig = acceptorConfig ; this . connectorConfig = connectorConfig ; this . connector = connector ; this . lazySessionCreation = lazySessionCreation ; if ( timeout > 0 ) { this . timeout = timeout ; } this . transferExchange = transferExchange ; } @ SuppressWarnings ( { "unchecked" } ) public Producer < MinaExchange > createProducer ( ) throws Exception { return new MinaProducer ( this ) ; } public Consumer < MinaExchange > createConsumer ( Processor processor ) throws Exception { return new MinaConsumer ( this , processor ) ; } @ Override public MinaExchange createExchange ( ExchangePattern pattern ) { return new MinaExchange ( getCamelContext ( ) , pattern , null ) ; } public MinaExchange createExchange ( IoSession session , Object payload ) { MinaExchange exchange = new MinaExchange ( getCamelContext ( ) , getExchangePattern ( ) , session ) ; MinaPayloadHelper . setIn ( exchange , payload ) ; return exchange ; } public IoAcceptor getAcceptor ( ) { return acceptor ; } public SocketAddress getAddress ( ) { return address ; } public IoConnector getConnector ( ) { return connector ; } public boolean isLazySessionCreation ( ) { return lazySessionCreation ; } public IoAcceptorConfig getAcceptorConfig ( ) { return acceptorConfig ; } public IoConnectorConfig getConnectorConfig ( ) { return connectorConfig ; } public boolean isSingleton ( ) { return true ; } public long getTimeout ( ) { return timeout ; } public boolean isTransferExchange ( ) { return transferExchange ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . processor . ErrorHandlerSupport ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannelBuilder extends ErrorHandlerBuilderSupport { private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; private ExceptionPolicyStrategy exceptionPolicyStrategy = ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ; private ProcessorFactory deadLetterFactory ; private Processor defaultDeadLetterEndpoint ; private Expression defaultDeadLetterEndpointExpression ; private String defaultDeadLetterEndpointUri = "log:org.apache.camel.DeadLetterChannel?level=error" ; private Logger logger = DeadLetterChannel . createDefaultLogger ( ) ; public DeadLetterChannelBuilder ( ) { } public DeadLetterChannelBuilder ( Processor processor ) { this ( new ConstantProcessorBuilder ( processor ) ) ; } public DeadLetterChannelBuilder ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public ErrorHandlerBuilder copy ( ) { DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( deadLetterFactory ) ; answer . setRedeliveryPolicy ( getRedeliveryPolicy ( ) . copy ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { Processor deadLetter = getDeadLetterFactory ( ) . createProcessor ( ) ; DeadLetterChannel answer = new DeadLetterChannel ( processor , deadLetter , getRedeliveryPolicy ( ) , getLogger ( ) , getExceptionPolicyStrategy ( ) ) ; configure ( answer ) ; return answer ; } public DeadLetterChannelBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public DeadLetterChannelBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public DeadLetterChannelBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { getRedeliveryPolicy ( ) . maximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public DeadLetterChannelBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public DeadLetterChannelBuilder logger ( Logger logger ) { setLogger ( logger ) ; return this ; } public DeadLetterChannelBuilder loggingLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; return this ; } public DeadLetterChannelBuilder log ( Log log ) { getLogger ( ) . setLog ( log ) ; return this ; } public DeadLetterChannelBuilder log ( String log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder log ( Class log ) { return log ( LogFactory . getLog ( log ) ) ; } public ErrorHandlerBuilderSupport exceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { setExceptionPolicyStrategy ( exceptionPolicyStrategy ) ; return this ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ProcessorFactory getDeadLetterFactory ( ) { if ( deadLetterFactory == null ) { deadLetterFactory = new ProcessorFactory ( ) { public Processor createProcessor ( ) { return getDefaultDeadLetterEndpoint ( ) ; } } ; } return deadLetterFactory ; } public void setDeadLetterFactory ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public Processor getDefaultDeadLetterEndpoint ( ) { if ( defaultDeadLetterEndpoint == null ) { defaultDeadLetterEndpoint = new RecipientList ( getDefaultDeadLetterEndpointExpression ( ) ) ; } return defaultDeadLetterEndpoint ; } public void setDefaultDeadLetterEndpoint ( Processor defaultDeadLetterEndpoint ) { this . defaultDeadLetterEndpoint = defaultDeadLetterEndpoint ; } public Expression getDefaultDeadLetterEndpointExpression ( ) { if ( defaultDeadLetterEndpointExpression == null ) { defaultDeadLetterEndpointExpression = ExpressionBuilder . constantExpression ( getDefaultDeadLetterEndpointUri ( ) ) ; } return defaultDeadLetterEndpointExpression ; } public void setDefaultDeadLetterEndpointExpression ( Expression defaultDeadLetterEndpointExpression ) { this . defaultDeadLetterEndpointExpression = defaultDeadLetterEndpointExpression ; } public String getDefaultDeadLetterEndpointUri ( ) { return defaultDeadLetterEndpointUri ; } public void setDefaultDeadLetterEndpointUri ( String defaultDeadLetterEndpointUri ) { this . defaultDeadLetterEndpointUri = defaultDeadLetterEndpointUri ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } public ExceptionPolicyStrategy getExceptionPolicyStrategy ( ) { return exceptionPolicyStrategy ; } public void setExceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . exceptionPolicyStrategy = exceptionPolicyStrategy ; } } 	1
package org . apache . camel . processor . loadbalancer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class LoadBalancerConsumer extends DefaultConsumer < Exchange > { private final LoadBalancer loadBalancer ; public LoadBalancerConsumer ( Endpoint endpoint , Processor processor , LoadBalancer loadBalancer ) { super ( endpoint , processor ) ; this . loadBalancer = loadBalancer ; } @ Override protected void doStart ( ) throws Exception { loadBalancer . addProcessor ( getProcessor ( ) ) ; } @ Override protected void doStop ( ) throws Exception { loadBalancer . removeProcessor ( getProcessor ( ) ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RoutingSlip extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( RoutingSlip . class ) ; private final String header ; private final String uriDelimiter ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RoutingSlip ( String header ) { this ( header , RoutingSlipType . DEFAULT_DELIMITER ) ; } public RoutingSlip ( String header , String uriDelimiter ) { notNull ( header , "header" ) ; notNull ( uriDelimiter , "uriDelimiter" ) ; this . header = header ; this . uriDelimiter = uriDelimiter ; } @ Override public String toString ( ) { return "RoutingSlip[header=" + header + " uriDelimiter=" + uriDelimiter + "]" ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getIn ( ) ; String [ ] recipients = recipients ( message ) ; Exchange current = exchange ; for ( String nextRecipient : recipients ) { Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , nextRecipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; Exchange ex = endpoint . createExchange ( ExchangePattern . InOut ) ; updateRoutingSlip ( current ) ; copyOutToIn ( ex , current ) ; producer . process ( ex ) ; current = ex ; } ExchangeHelper . copyResults ( exchange , current ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } private void updateRoutingSlip ( Exchange current ) { Message message = getResultMessage ( current ) ; message . setHeader ( header , removeFirstElement ( recipients ( message ) ) ) ; } private Message getResultMessage ( Exchange exchange ) { Message message = exchange . getOut ( false ) ; if ( message == null ) { message = exchange . getIn ( ) ; } return message ; } private String [ ] recipients ( Message message ) { Object headerValue = message . getHeader ( header ) ; if ( headerValue != null && ! headerValue . equals ( "" ) ) { return headerValue . toString ( ) . split ( uriDelimiter ) ; } return new String [ ] { } ; } private String removeFirstElement ( String [ ] elements ) { CollectionStringBuffer updatedElements = new CollectionStringBuffer ( uriDelimiter ) ; for ( int i = 1 ; i < elements . length ; i ++ ) { updatedElements . append ( elements [ i ] ) ; } return updatedElements . toString ( ) ; } private void copyOutToIn ( Exchange result , Exchange source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } result . setIn ( getResultMessage ( source ) ) ; result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } 	1
package org . apache . camel . language . bean ; import org . apache . camel . Exchange ; import org . apache . camel . RuntimeExpressionException ; public class RuntimeBeanExpressionException extends RuntimeExpressionException { private final Exchange exchange ; private final String bean ; private final String method ; public RuntimeBeanExpressionException ( Exchange exchange , String bean , String method , Throwable e ) { super ( "Failed to invoke method: " + method + " on " + bean + " due to: " + e , e ) ; this . exchange = exchange ; this . bean = bean ; this . method = method ; } public String getBean ( ) { return bean ; } public Exchange getExchange ( ) { return exchange ; } public String getMethod ( ) { return method ; } } 	0
package org . apache . camel . component . log ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . util . ObjectHelper ; public class LogFormatter implements ExchangeFormatter { private boolean showExchangeId ; private boolean showProperties ; private boolean showHeaders ; private boolean showBodyType = true ; private boolean showBody = true ; private boolean showOut ; private boolean showAll ; private boolean multiline ; public Object format ( Exchange exchange ) { Message in = exchange . getIn ( ) ; StringBuilder sb = new StringBuilder ( "" ) ; if ( showAll || showExchangeId ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Id:" ) . append ( exchange . getExchangeId ( ) ) ; } if ( showAll || showProperties ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Properties:" ) . append ( exchange . getProperties ( ) ) ; } if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Headers:" ) . append ( in . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", BodyType:" ) . append ( getBodyTypeAsString ( in ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Body:" ) . append ( getBodyAsString ( in ) ) ; } Message out = exchange . getOut ( false ) ; if ( showAll || showOut ) { if ( out != null ) { if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutHeaders:" ) . append ( out . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBodyType:" ) . append ( getBodyTypeAsString ( out ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBody:" ) . append ( getBodyAsString ( out ) ) ; } } else { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Out: null" ) ; } } return "Exchange[" + ( multiline ? sb . append ( ']' ) . toString ( ) : sb . toString ( ) . substring ( 2 ) + "]" ) ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowOut ( ) { return showOut ; } public void setShowOut ( boolean showOut ) { this . showOut = showOut ; } public boolean isShowAll ( ) { return showAll ; } public void setShowAll ( boolean showAll ) { this . showAll = showAll ; } public boolean isMultiline ( ) { return multiline ; } public void setMultiline ( boolean multiline ) { this . multiline = multiline ; } protected Object getBodyAsString ( Message message ) { Object answer = message . getBody ( String . class ) ; if ( answer == null ) { answer = message . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . Processor ; public interface Policy < E > { Processor wrap ( Processor processor ) ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . idempotent . IdempotentConsumer ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "idempotentConsumer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class IdempotentConsumerType extends ExpressionNode { @ XmlAttribute private String messageIdRepositoryRef ; @ XmlTransient private MessageIdRepository messageIdRepository ; public IdempotentConsumerType ( ) { } public IdempotentConsumerType ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { super ( messageIdExpression ) ; this . messageIdRepository = messageIdRepository ; } @ Override public String toString ( ) { return "IdempotentConsumer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "idempotentConsumer" ; } public String getMessageIdRepositoryRef ( ) { return messageIdRepositoryRef ; } public void setMessageIdRepositoryRef ( String messageIdRepositoryRef ) { this . messageIdRepositoryRef = messageIdRepositoryRef ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public void setMessageIdRepository ( MessageIdRepository messageIdRepository ) { this . messageIdRepository = messageIdRepository ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; MessageIdRepository messageIdRepository = resolveMessageIdRepository ( routeContext ) ; return new IdempotentConsumer ( getExpression ( ) . createExpression ( routeContext ) , messageIdRepository , childProcessor ) ; } public MessageIdRepository resolveMessageIdRepository ( RouteContext routeContext ) { if ( messageIdRepository == null ) { messageIdRepository = routeContext . lookup ( messageIdRepositoryRef , MessageIdRepository . class ) ; } return messageIdRepository ; } } 	1
package org . apache . camel . spi ; import java . util . Map ; public interface NamespaceAware { void setNamespaces ( Map < String , String > namespaces ) ; } 	0
package org . apache . camel ; import java . util . List ; public interface Routes { CamelContext getContext ( ) ; void setContext ( CamelContext context ) ; List < Route > getRouteList ( ) throws Exception ; } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; @ XmlRootElement ( name = "xstream" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class XStreamDataFormat extends DataFormatType { @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public XStreamDataFormat ( ) { super ( "org.apache.camel.dataformat.xstream.XStreamDataFormat" ) ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . ObjectHelper ; public class TraceFormatter { private boolean showBreadCrumb = true ; private boolean showNode = true ; private boolean showExchangeId ; private boolean showProperties = true ; private boolean showHeaders = true ; private boolean showBody = true ; private boolean showBodyType = true ; public Object format ( TraceInterceptor interceptor , Exchange exchange ) { Message in = exchange . getIn ( ) ; Throwable exception = exchange . getException ( ) ; return ( showBreadCrumb ? getBreadCrumbID ( exchange ) + " " : "" ) + "-> " + getNodeMessage ( interceptor ) + " " + ( showNode ? interceptor . getNode ( ) + " " : "" ) + exchange . getPattern ( ) + ( showExchangeId ? " Id: " + exchange . getExchangeId ( ) : "" ) + ( showProperties ? " Properties:" + exchange . getProperties ( ) : "" ) + ( showHeaders ? " Headers:" + in . getHeaders ( ) : "" ) + ( showBodyType ? " BodyType:" + getBodyTypeAsString ( in ) : "" ) + ( showBody ? " Body:" + getBodyAsString ( in ) : "" ) + ( exception != null ? " Exception: " + exception : "" ) ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBreadCrumb ( ) { return showBreadCrumb ; } public void setShowBreadCrumb ( boolean showBreadCrumb ) { this . showBreadCrumb = showBreadCrumb ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowNode ( ) { return showNode ; } public void setShowNode ( boolean showNode ) { this . showNode = showNode ; } protected Object getBreadCrumbID ( Exchange exchange ) { UnitOfWork unitOfWork = exchange . getUnitOfWork ( ) ; return unitOfWork . getId ( ) ; } protected Object getBodyAsString ( Message in ) { Object answer = in . getBody ( String . class ) ; if ( answer == null ) { answer = in . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } protected String getNodeMessage ( TraceInterceptor interceptor ) { return interceptor . getNode ( ) . idOrCreate ( ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlValue ; @ XmlRootElement ( name = "description" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class Description { @ XmlAttribute ( required = false ) private String lang ; @ XmlValue private String text ; public String getLang ( ) { return lang ; } public void setLang ( String lang ) { this . lang = lang ; } public String getText ( ) { return text ; } public void setText ( String text ) { this . text = text ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; public class CamelInvocationHandler implements InvocationHandler { private final Endpoint endpoint ; private final Producer producer ; public CamelInvocationHandler ( Endpoint endpoint , Producer producer ) { this . endpoint = endpoint ; this . producer = producer ; } public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { BeanInvocation invocation = new BeanInvocation ( method , args ) ; BeanExchange exchange = new BeanExchange ( endpoint . getCamelContext ( ) , ExchangePattern . InOut ) ; exchange . setInvocation ( invocation ) ; producer . process ( exchange ) ; Throwable fault = exchange . getException ( ) ; if ( fault != null ) { throw new InvocationTargetException ( fault ) ; } return exchange . getOut ( true ) . getBody ( ) ; } } 	1
package org . apache . camel . component . validator . jing ; import java . io . IOException ; import java . io . InputStream ; import javax . xml . XMLConstants ; import javax . xml . transform . Source ; import javax . xml . transform . sax . SAXSource ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . XMLReader ; import com . thaiopensource . relaxng . SchemaFactory ; import com . thaiopensource . util . PropertyMap ; import com . thaiopensource . util . PropertyMapBuilder ; import com . thaiopensource . validate . IncorrectSchemaException ; import com . thaiopensource . validate . Schema ; import com . thaiopensource . validate . ValidateProperty ; import com . thaiopensource . validate . Validator ; import com . thaiopensource . xml . sax . Jaxp11XMLReaderCreator ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . processor . validation . DefaultValidationErrorHandler ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . io . Resource ; public class JingValidator implements Processor { private static final transient Log LOG = LogFactory . getLog ( JingValidator . class ) ; private Schema schema ; private SchemaFactory schemaFactory ; private String schemaNamespace = XMLConstants . RELAXNG_NS_URI ; private Resource schemaResource ; private InputSource inputSource ; private boolean compactSyntax ; public void process ( Exchange exchange ) throws Exception { Jaxp11XMLReaderCreator xmlCreator = new Jaxp11XMLReaderCreator ( ) ; DefaultValidationErrorHandler errorHandler = new DefaultValidationErrorHandler ( ) ; PropertyMapBuilder mapBuilder = new PropertyMapBuilder ( ) ; mapBuilder . put ( ValidateProperty . XML_READER_CREATOR , xmlCreator ) ; mapBuilder . put ( ValidateProperty . ERROR_HANDLER , errorHandler ) ; PropertyMap propertyMap = mapBuilder . toPropertyMap ( ) ; Validator validator = getSchema ( ) . createValidator ( propertyMap ) ; Message in = exchange . getIn ( ) ; SAXSource saxSource = in . getBody ( SAXSource . class ) ; if ( saxSource == null ) { Source source = ExchangeHelper . getMandatoryInBody ( exchange , Source . class ) ; saxSource = ExchangeHelper . convertToMandatoryType ( exchange , SAXSource . class , source ) ; } InputSource bodyInput = saxSource . getInputSource ( ) ; XMLReader reader = xmlCreator . createXMLReader ( ) ; reader . setContentHandler ( validator . getContentHandler ( ) ) ; reader . setDTDHandler ( validator . getDTDHandler ( ) ) ; reader . setErrorHandler ( errorHandler ) ; reader . parse ( bodyInput ) ; errorHandler . handleErrors ( exchange , schema ) ; } public Schema getSchema ( ) throws IOException , IncorrectSchemaException , SAXException { if ( schema == null ) { SchemaFactory factory = getSchemaFactory ( ) ; schema = factory . createSchema ( getInputSource ( ) ) ; } return schema ; } public void setSchema ( Schema schema ) { this . schema = schema ; } public InputSource getInputSource ( ) throws IOException { if ( inputSource == null ) { Resource resource = getSchemaResource ( ) ; if ( resource == null ) { throw new IllegalArgumentException ( "No schemaResource or inputSource specified" ) ; } else { InputStream inputStream = resource . getInputStream ( ) ; if ( inputStream == null ) { throw new IllegalArgumentException ( "No inputStream available for: " + resource ) ; } inputSource = new InputSource ( inputStream ) ; } } return inputSource ; } public void setInputSource ( InputSource inputSource ) { this . inputSource = inputSource ; } public SchemaFactory getSchemaFactory ( ) { if ( schemaFactory == null ) { schemaFactory = new SchemaFactory ( ) ; schemaFactory . setCompactSyntax ( compactSyntax ) ; schemaFactory . setXMLReaderCreator ( new Jaxp11XMLReaderCreator ( ) ) ; } return schemaFactory ; } public void setSchemaFactory ( SchemaFactory schemaFactory ) { this . schemaFactory = schemaFactory ; } public Resource getSchemaResource ( ) { return schemaResource ; } public void setSchemaResource ( Resource schemaResource ) { this . schemaResource = schemaResource ; } public String getSchemaNamespace ( ) { return schemaNamespace ; } public void setSchemaNamespace ( String schemaNamespace ) { this . schemaNamespace = schemaNamespace ; } public boolean isCompactSyntax ( ) { return compactSyntax ; } public void setCompactSyntax ( boolean compactSyntax ) { this . compactSyntax = compactSyntax ; } } 	0
package org . apache . camel ; @ Deprecated public class InvalidHeaderTypeException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; private final Object headerValue ; public InvalidHeaderTypeException ( Throwable cause , Object headerValue ) { super ( cause . getMessage ( ) + " headerValue is: " + headerValue + " of type: " + typeName ( headerValue ) , cause ) ; this . headerValue = headerValue ; } public InvalidHeaderTypeException ( String message , Object headerValue ) { super ( message ) ; this . headerValue = headerValue ; } public Object getHeaderValue ( ) { return headerValue ; } protected static String typeName ( Object headerValue ) { return ( headerValue != null ) ? headerValue . getClass ( ) . getName ( ) : "null" ; } } 	1
package org . apache . camel ; public class NoTypeConversionAvailableException extends RuntimeCamelException { private final Object value ; private final Class type ; public NoTypeConversionAvailableException ( Object value , Class type ) { super ( "No type converter available to convert from type: " + ( value != null ? value . getClass ( ) : null ) + " to the required type " + type . getName ( ) + " with value " + value ) ; this . value = value ; this . type = type ; } public Object getValue ( ) { return value ; } public Class getType ( ) { return type ; } public Class getFromType ( ) { if ( value != null ) { return value . getClass ( ) ; } else { return null ; } } } 	0
package org . apache . camel ; import java . util . Map ; import org . apache . camel . spi . UnitOfWork ; public interface Exchange { ExchangePattern getPattern ( ) ; void setPattern ( ExchangePattern pattern ) ; Object getProperty ( String name ) ; < T > T getProperty ( String name , Class < T > type ) ; void setProperty ( String name , Object value ) ; Object removeProperty ( String name ) ; Map < String , Object > getProperties ( ) ; Message getIn ( ) ; void setIn ( Message in ) ; Message getOut ( ) ; Message getOut ( boolean lazyCreate ) ; void setOut ( Message out ) ; Message getFault ( ) ; Message getFault ( boolean lazyCreate ) ; Throwable getException ( ) ; void setException ( Throwable e ) ; boolean isFailed ( ) ; boolean isTransacted ( ) ; CamelContext getContext ( ) ; Exchange newInstance ( ) ; Exchange copy ( ) ; void copyFrom ( Exchange source ) ; UnitOfWork getUnitOfWork ( ) ; void setUnitOfWork ( UnitOfWork unitOfWork ) ; String getExchangeId ( ) ; void setExchangeId ( String id ) ; } 	1
package org . apache . camel . component . spring . integration . adapter ; import org . apache . camel . CamelContext ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . springframework . integration . handler . MessageHandler ; public abstract class AbstractCamelAdapter implements MessageHandler { private CamelContext camelContext ; private String camelEndpointUri ; private volatile boolean expectReply = true ; public void setCamelContext ( CamelContext context ) { camelContext = context ; } public CamelContext getCamelContext ( ) { return camelContext ; } public String getCamelEndpointUri ( ) { return camelEndpointUri ; } public void setCamelEndpointUri ( String uri ) { camelEndpointUri = uri ; } public void setExpectReply ( boolean expectReply ) { this . expectReply = expectReply ; } public boolean isExpectReply ( ) { return expectReply ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . RedeliveryPolicy ; @ XmlRootElement ( name = "redeliveryPolicy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RedeliveryPolicyType { private Integer maximumRedeliveries ; private Long initialRedeliveryDelay ; private Double backOffMultiplier ; private Boolean useExponentialBackOff ; private Double collisionAvoidanceFactor ; private Boolean useCollisionAvoidance ; public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; if ( maximumRedeliveries != null ) { answer . setMaximumRedeliveries ( maximumRedeliveries ) ; } if ( initialRedeliveryDelay != null ) { answer . setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; } if ( backOffMultiplier != null ) { answer . setBackOffMultiplier ( backOffMultiplier ) ; } if ( useExponentialBackOff != null ) { answer . setUseExponentialBackOff ( useExponentialBackOff ) ; } if ( collisionAvoidanceFactor != null ) { answer . setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; } if ( useCollisionAvoidance != null ) { answer . setUseCollisionAvoidance ( useCollisionAvoidance ) ; } return answer ; } public String toString ( ) { return "RedeliveryPolicy[maxRedeliveries: " + maximumRedeliveries + "]" ; } public RedeliveryPolicyType backOffMultiplier ( double backOffMultiplier ) { setBackOffMultiplier ( backOffMultiplier ) ; return this ; } public RedeliveryPolicyType collisionAvoidancePercent ( double collisionAvoidancePercent ) { setCollisionAvoidanceFactor ( collisionAvoidancePercent * 0.01d ) ; return this ; } public RedeliveryPolicyType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public RedeliveryPolicyType initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicyType maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicyType useCollisionAvoidance ( ) { setUseCollisionAvoidance ( Boolean . TRUE ) ; return this ; } public RedeliveryPolicyType useExponentialBackOff ( ) { setUseExponentialBackOff ( Boolean . TRUE ) ; return this ; } public Double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( Double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public Double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( Double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public Long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( Long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public Integer getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( Integer maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public Boolean getUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( Boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public Boolean getUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( Boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface Headers { } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingErrorHandler ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandlerBuilder extends ErrorHandlerBuilderSupport { private Log log = LogFactory . getLog ( Logger . class ) ; private LoggingLevel level = LoggingLevel . INFO ; public LoggingErrorHandlerBuilder ( ) { } public LoggingErrorHandlerBuilder ( Log log ) { this . log = log ; } public LoggingErrorHandlerBuilder ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public ErrorHandlerBuilder copy ( ) { LoggingErrorHandlerBuilder answer = new LoggingErrorHandlerBuilder ( ) ; answer . setLog ( getLog ( ) ) ; answer . setLevel ( getLevel ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) { LoggingErrorHandler handler = new LoggingErrorHandler ( processor , log , level ) ; configure ( handler ) ; return handler ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } } 	1
package org . apache . camel . spring . handler ; import org . w3c . dom . Element ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . ParserContext ; import org . springframework . util . xml . DomUtils ; public class ScriptDefinitionParser extends LazyLoadingBeanDefinitionParser { private final String scriptEngineName ; public ScriptDefinitionParser ( String scriptEngineName ) { super ( "org.apache.camel.builder.script.ScriptBuilder" , "camel-script" ) ; this . scriptEngineName = scriptEngineName ; } @ Override protected void doParse ( Element element , ParserContext parserContext , BeanDefinitionBuilder builder ) { String engine = scriptEngineName ; if ( engine == null ) { engine = element . getAttribute ( "language" ) ; } builder . addConstructorArgValue ( engine ) ; super . doParse ( element , parserContext , builder ) ; String scriptText = DomUtils . getTextValue ( element ) . trim ( ) ; if ( scriptText . length ( ) > 0 ) { builder . addPropertyValue ( "scriptText" , scriptText ) ; } } } 	0
package org . apache . camel . impl ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . util . ObjectHelper ; public abstract class DefaultEndpoint < E extends Exchange > implements Endpoint < E > , CamelContextAware { private String endpointUri ; private CamelContext camelContext ; private Component component ; private ScheduledExecutorService executorService ; private ExchangePattern exchangePattern = ExchangePattern . InOnly ; protected DefaultEndpoint ( String endpointUri , Component component ) { this ( endpointUri , component . getCamelContext ( ) ) ; this . component = component ; } protected DefaultEndpoint ( String endpointUri , CamelContext camelContext ) { this ( endpointUri ) ; this . camelContext = camelContext ; } protected DefaultEndpoint ( String endpointUri ) { this . setEndpointUri ( endpointUri ) ; } protected DefaultEndpoint ( ) { } public int hashCode ( ) { return getEndpointUri ( ) . hashCode ( ) * 37 + 1 ; } @ Override public boolean equals ( Object object ) { if ( object instanceof DefaultEndpoint ) { DefaultEndpoint that = ( DefaultEndpoint ) object ; return ObjectHelper . equal ( this . getEndpointUri ( ) , that . getEndpointUri ( ) ) ; } return false ; } @ Override public String toString ( ) { return "Endpoint[" + getEndpointUri ( ) + "]" ; } public String getEndpointUri ( ) { if ( endpointUri == null ) { endpointUri = createEndpointUri ( ) ; if ( endpointUri == null ) { throw new IllegalArgumentException ( "endpointUri is not specified and " + getClass ( ) . getName ( ) + " does not implement createEndpointUri() to create a default value" ) ; } } return endpointUri ; } public CamelContext getCamelContext ( ) { return camelContext ; } public Component getComponent ( ) { return component ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public synchronized ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { Component c = getComponent ( ) ; if ( c != null && c instanceof DefaultComponent ) { DefaultComponent dc = ( DefaultComponent ) c ; executorService = dc . getExecutorService ( ) ; } if ( executorService == null ) { executorService = createExecutorService ( ) ; } } return executorService ; } public synchronized void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } public PollingConsumer < E > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < E > ( this ) ; } public E convertTo ( Class < E > type , Exchange exchange ) { if ( type . isInstance ( exchange ) ) { return type . cast ( exchange ) ; } return getCamelContext ( ) . getExchangeConverter ( ) . convertTo ( type , exchange ) ; } public E createExchange ( Exchange exchange ) { Class < E > exchangeType = getExchangeType ( ) ; if ( exchangeType != null ) { if ( exchangeType . isInstance ( exchange ) ) { return exchangeType . cast ( exchange ) ; } } E answer = createExchange ( ) ; answer . copyFrom ( exchange ) ; return answer ; } public Class < E > getExchangeType ( ) { Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { return ( Class < E > ) argumentType ; } } } return null ; } public E createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public E createExchange ( ExchangePattern pattern ) { return ( E ) new DefaultExchange ( getCamelContext ( ) , pattern ) ; } public ExchangePattern getExchangePattern ( ) { return exchangePattern ; } public void setExchangePattern ( ExchangePattern exchangePattern ) { this . exchangePattern = exchangePattern ; } protected ScheduledThreadPoolExecutor createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( 10 ) ; } public void configureProperties ( Map options ) { } protected String createEndpointUri ( ) { return null ; } protected void setEndpointUri ( String endpointUri ) { this . endpointUri = endpointUri ; } @ Deprecated public CamelContext getContext ( ) { return getCamelContext ( ) ; } @ Deprecated public void setContext ( CamelContext context ) { setCamelContext ( context ) ; } } 	1
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; public class Breakpoint { public void waitForBreakpoint ( Exchange exchange ) { } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultUnitOfWork ; public final class UnitOfWorkProcessor extends DelegateAsyncProcessor { public UnitOfWorkProcessor ( AsyncProcessor processor ) { super ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( exchange . getUnitOfWork ( ) == null ) { exchange . setUnitOfWork ( new DefaultUnitOfWork ( ) ) ; return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( sync ) ; exchange . getUnitOfWork ( ) . done ( exchange ) ; exchange . setUnitOfWork ( null ) ; } } ) ; } else { return processor . process ( exchange , callback ) ; } } } 	1
package org . apache . camel . management ; import java . util . Date ; import java . util . concurrent . atomic . AtomicLong ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedOperation ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "PerformanceCounter" , currencyTimeLimit = 15 ) public class PerformanceCounter extends Counter { private AtomicLong numCompleted = new AtomicLong ( 0L ) ; private double minProcessingTime = - 1.0 ; private double maxProcessingTime ; private double totalProcessingTime ; private Date lastExchangeCompletionTime ; private Date lastExchangeFailureTime ; private Date firstExchangeCompletionTime ; private Date firstExchangeFailureTime ; @ Override @ ManagedOperation ( description = "Reset counters" ) public synchronized void reset ( ) { super . reset ( ) ; numCompleted . set ( 0L ) ; minProcessingTime = - 1.0 ; maxProcessingTime = 0.0 ; totalProcessingTime = 0.0 ; lastExchangeCompletionTime = null ; lastExchangeFailureTime = null ; firstExchangeCompletionTime = null ; firstExchangeFailureTime = null ; } @ ManagedAttribute ( description = "Number of successful exchanges" ) public long getNumCompleted ( ) throws Exception { return numCompleted . get ( ) ; } @ ManagedAttribute ( description = "Number of failed exchanges" ) public long getNumFailed ( ) throws Exception { return numExchanges . get ( ) - numCompleted . get ( ) ; } @ ManagedAttribute ( description = "Min Processing Time [milliseconds]" ) public synchronized double getMinProcessingTimeMillis ( ) throws Exception { return minProcessingTime ; } @ ManagedAttribute ( description = "Mean Processing Time [milliseconds]" ) public synchronized double getMeanProcessingTimeMillis ( ) throws Exception { long count = numCompleted . get ( ) ; return count > 0 ? totalProcessingTime / count : 0.0 ; } @ ManagedAttribute ( description = "Max Processing Time [milliseconds]" ) public synchronized double getMaxProcessingTimeMillis ( ) throws Exception { return maxProcessingTime ; } @ ManagedAttribute ( description = "Total Processing Time [milliseconds]" ) public synchronized double getTotalProcessingTimeMillis ( ) throws Exception { return totalProcessingTime ; } @ ManagedAttribute ( description = "Last Exchange Completed Timestamp" ) public synchronized Date getLastExchangeCompletionTime ( ) { return lastExchangeCompletionTime ; } @ ManagedAttribute ( description = "First Exchange Completed Timestamp" ) public synchronized Date getFirstExchangeCompletionTime ( ) { return firstExchangeCompletionTime ; } @ ManagedAttribute ( description = "Last Exchange Failed Timestamp" ) public synchronized Date getLastExchangeFailureTime ( ) { return lastExchangeFailureTime ; } @ ManagedAttribute ( description = "First Exchange Failed Timestamp" ) public synchronized Date getFirstExchangeFailureTime ( ) { return firstExchangeFailureTime ; } public synchronized void completedExchange ( double time ) { increment ( ) ; numCompleted . incrementAndGet ( ) ; totalProcessingTime += time ; if ( minProcessingTime < 0 || time < minProcessingTime ) { minProcessingTime = time ; } if ( time > maxProcessingTime ) { maxProcessingTime = time ; } Date timestamp = new Date ( ) ; if ( firstExchangeCompletionTime == null ) { firstExchangeCompletionTime = timestamp ; } lastExchangeCompletionTime = timestamp ; } public synchronized void failedExchange ( ) { increment ( ) ; Date timestamp = new Date ( ) ; if ( firstExchangeFailureTime == null ) { firstExchangeFailureTime = timestamp ; } lastExchangeFailureTime = timestamp ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; public class SerializationDataFormat implements DataFormat { public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { ObjectOutput out = IOConverter . toObjectOutput ( stream ) ; out . writeObject ( graph ) ; out . flush ( ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { ObjectInput in = IOConverter . toObjectInput ( stream ) ; return in . readObject ( ) ; } } 	1
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; public interface ExchangeFormatter { Object format ( Exchange exchange ) ; } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ProceedProcessor ; import org . apache . camel . processor . UnitOfWorkProcessor ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . RouteContext ; public class DefaultRouteContext implements RouteContext { private RouteType route ; private FromType from ; private Collection < Route > routes ; private Endpoint < ? extends Exchange > endpoint ; private List < Processor > eventDrivenProcessors = new ArrayList < Processor > ( ) ; private Interceptor lastInterceptor ; private CamelContext camelContext ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private ErrorHandlerWrappingStrategy errorHandlerWrappingStrategy ; private boolean routeAdded ; public DefaultRouteContext ( RouteType route , FromType from , Collection < Route > routes ) { this . route = route ; this . from = from ; this . routes = routes ; } public DefaultRouteContext ( CamelContext camelContext ) { this . camelContext = camelContext ; routes = new ArrayList < Route > ( ) ; route = new RouteType ( "temporary" ) ; } public Endpoint < ? extends Exchange > getEndpoint ( ) { if ( endpoint == null ) { endpoint = from . resolveEndpoint ( this ) ; } return endpoint ; } public FromType getFrom ( ) { return from ; } public RouteType getRoute ( ) { return route ; } public CamelContext getCamelContext ( ) { if ( camelContext == null ) { camelContext = getRoute ( ) . getCamelContext ( ) ; } return camelContext ; } public Processor createProcessor ( ProcessorType node ) throws Exception { return node . createOutputsProcessor ( this ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) { return route . resolveEndpoint ( uri ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) { Endpoint < ? extends Exchange > endpoint = null ; if ( uri != null ) { endpoint = resolveEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } } if ( ref != null ) { endpoint = lookup ( ref , Endpoint . class ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( "ref:" + ref ) ; } } if ( endpoint == null ) { throw new IllegalArgumentException ( "Either 'uri' or 'ref' must be specified on: " + this ) ; } else { return endpoint ; } } public < T > T lookup ( String name , Class < T > type ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } public void commit ( ) { if ( ! eventDrivenProcessors . isEmpty ( ) ) { Processor processor = Pipeline . newInstance ( eventDrivenProcessors ) ; final AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; Processor unitOfWorkProcessor = new UnitOfWorkProcessor ( asyncProcessor ) ; Route edcr = new EventDrivenConsumerRoute ( getEndpoint ( ) , unitOfWorkProcessor ) ; edcr . getProperties ( ) . put ( Route . PARENT_PROPERTY , Integer . toHexString ( route . hashCode ( ) ) ) ; if ( route . getGroup ( ) != null ) { edcr . getProperties ( ) . put ( Route . GROUP_PROPERTY , route . getGroup ( ) ) ; } routes . add ( edcr ) ; } } public void addEventDrivenProcessor ( Processor processor ) { eventDrivenProcessors . add ( processor ) ; } public void intercept ( Intercept interceptor ) { lastInterceptor = ( Interceptor ) interceptor ; } public Processor createProceedProcessor ( ) { if ( lastInterceptor == null ) { throw new IllegalArgumentException ( "Cannot proceed() from outside of an interceptor!" ) ; } else { return new ProceedProcessor ( lastInterceptor ) ; } } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) { return errorHandlerWrappingStrategy ; } public void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) { errorHandlerWrappingStrategy = strategy ; } public boolean isRouteAdded ( ) { return routeAdded ; } public void setIsRouteAdded ( boolean b ) { routeAdded = b ; } } 	1
package org . apache . camel . processor . idempotent ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ExpressionHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class IdempotentConsumer extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( IdempotentConsumer . class ) ; private Expression < Exchange > messageIdExpression ; private Processor nextProcessor ; private MessageIdRepository messageIdRepository ; public IdempotentConsumer ( Expression < Exchange > messageIdExpression , MessageIdRepository messageIdRepository , Processor nextProcessor ) { this . messageIdExpression = messageIdExpression ; this . messageIdRepository = messageIdRepository ; this . nextProcessor = nextProcessor ; } @ Override public String toString ( ) { return "IdempotentConsumer[expression=" + messageIdExpression + ", repository=" + messageIdRepository + ", processor=" + nextProcessor + "]" ; } public void process ( Exchange exchange ) throws Exception { String messageId = ExpressionHelper . evaluateAsString ( messageIdExpression , exchange ) ; if ( messageId == null ) { throw new NoMessageIdException ( exchange , messageIdExpression ) ; } if ( ! messageIdRepository . contains ( messageId ) ) { nextProcessor . process ( exchange ) ; } else { onDuplicateMessage ( exchange , messageId ) ; } } public Expression < Exchange > getMessageIdExpression ( ) { return messageIdExpression ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public Processor getNextProcessor ( ) { return nextProcessor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( nextProcessor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( nextProcessor ) ; } protected void onDuplicateMessage ( Exchange exchange , String messageId ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Ignoring duplicate message with id: " + messageId + " for exchange: " + exchange ) ; } } } 	0
package org . apache . camel . management ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationProcessor extends DelegateProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private PerformanceCounter counter ; public InstrumentationProcessor ( PerformanceCounter counter ) { this . counter = counter ; } public InstrumentationProcessor ( ) { } public void setCounter ( PerformanceCounter counter ) { this . counter = counter ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { final long startTime = System . nanoTime ( ) ; if ( processor instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) processor ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( doneSynchronously ) ; } } ) ; } try { processor . process ( exchange ) ; } catch ( Exception e ) { exchange . setException ( e ) ; } if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( true ) ; return true ; } protected void recordTime ( Exchange exchange , double duration ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Recording duration: " + duration + " millis for exchange: " + exchange ) ; } if ( ! exchange . isFailed ( ) && exchange . getException ( ) == null ) { counter . completedExchange ( duration ) ; } else { counter . failedExchange ( ) ; } } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . http . HttpEntity ; import org . apache . http . HttpEntityEnclosingRequest ; import org . apache . http . HttpException ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . HttpResponseFactory ; import org . apache . http . HttpStatus ; import org . apache . http . HttpVersion ; import org . apache . http . ProtocolVersion ; import org . apache . http . impl . DefaultHttpResponseFactory ; import org . apache . http . nio . NHttpConnection ; import org . apache . http . nio . protocol . EventListener ; import org . apache . http . params . HttpParams ; import org . apache . http . params . HttpParamsLinker ; import org . apache . http . protocol . HttpContext ; import org . apache . http . protocol . HttpRequestHandler ; public class JhcConsumer extends DefaultConsumer < JhcExchange > { private static final Log LOG = LogFactory . getLog ( JhcConsumer . class ) ; private JhcServerEngine engine ; private MyHandler handler ; public JhcConsumer ( JhcEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; engine = JhcServerEngineFactory . getJhcServerEngine ( endpoint . getParams ( ) , endpoint . getPort ( ) , endpoint . getProtocol ( ) ) ; handler = new MyHandler ( endpoint . getParams ( ) , endpoint . getPath ( ) ) ; } public JhcEndpoint getEndpoint ( ) { return ( JhcEndpoint ) super . getEndpoint ( ) ; } protected void doStart ( ) throws Exception { super . doStart ( ) ; engine . register ( handler . getPath ( ) + "*" , handler ) ; if ( ! engine . isStarted ( ) ) { engine . start ( ) ; } } protected void doStop ( ) throws Exception { engine . unregister ( handler . getPath ( ) + "*" ) ; if ( engine . getReferenceCounter ( ) == 0 ) { engine . stop ( ) ; } super . doStop ( ) ; } class MyHttpRequestHandler implements HttpRequestHandler { public void handle ( HttpRequest httpRequest , HttpResponse httpResponse , HttpContext httpContext ) throws HttpException , IOException { LOG . debug ( "handle" ) ; } } static class EventLogger implements EventListener { public void connectionOpen ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection open: " + conn ) ; } } public void connectionTimeout ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection timed out: " + conn ) ; } } public void connectionClosed ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection closed: " + conn ) ; } } public void fatalIOException ( final IOException ex , final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "I/O error: " + ex . getMessage ( ) ) ; } } public void fatalProtocolException ( final HttpException ex , final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "HTTP error: " + ex . getMessage ( ) ) ; } } } class MyHandler implements AsyncHttpRequestHandler { private final HttpParams params ; private final HttpResponseFactory responseFactory ; private final String path ; public MyHandler ( HttpParams params , String path ) { this ( params , path , new DefaultHttpResponseFactory ( ) ) ; } public MyHandler ( HttpParams params , String path , HttpResponseFactory responseFactory ) { this . params = params ; this . path = path ; this . responseFactory = responseFactory ; } public String getPath ( ) { return path ; } public void handle ( final HttpRequest request , final HttpContext context , final AsyncResponseHandler handler ) throws HttpException , IOException { final Exchange exchange = getEndpoint ( ) . createExchange ( ) ; exchange . getIn ( ) . setHeader ( "http.uri" , request . getRequestLine ( ) . getUri ( ) ) ; if ( request instanceof HttpEntityEnclosingRequest ) { exchange . getIn ( ) . setBody ( ( ( HttpEntityEnclosingRequest ) request ) . getEntity ( ) ) ; } getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { LOG . debug ( "handleExchange" ) ; ProtocolVersion httpVersion = ( HttpVersion ) request . getRequestLine ( ) . getProtocolVersion ( ) ; HttpResponse response = responseFactory . newHttpResponse ( httpVersion , HttpStatus . SC_OK , context ) ; HttpParamsLinker . link ( response , params ) ; HttpEntity entity = exchange . getOut ( ) . getBody ( HttpEntity . class ) ; response . setEntity ( entity ) ; response . setParams ( getEndpoint ( ) . getParams ( ) ) ; try { handler . sendResponse ( response ) ; } catch ( Exception e ) { LOG . info ( e ) ; } } } ) ; } public void handle ( HttpRequest request , HttpResponse response , HttpContext context ) throws HttpException , IOException { } } } 	0
package org . apache . camel . impl . converter ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Method ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; import static java . lang . reflect . Modifier . isAbstract ; import static java . lang . reflect . Modifier . isPublic ; import static java . lang . reflect . Modifier . isStatic ; import org . apache . camel . Converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ResolverUtil ; import org . apache . camel . util . WebSphereResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AnnotationTypeConverterLoader implements TypeConverterLoader { public static final String META_INF_SERVICES = "META-INF/services/org/apache/camel/TypeConverter" ; private static final transient Log LOG = LogFactory . getLog ( AnnotationTypeConverterLoader . class ) ; private ResolverUtil resolver = new ResolverUtil ( ) ; private Set < Class > visitedClasses = new HashSet < Class > ( ) ; public AnnotationTypeConverterLoader ( ) { if ( WebSphereResolverUtil . isWebSphereClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ) { LOG . info ( "Using WebSphere specific ResolverUtil" ) ; resolver = new WebSphereResolverUtil ( META_INF_SERVICES ) ; } } public void load ( TypeConverterRegistry registry ) throws Exception { String [ ] packageNames = findPackageNames ( ) ; resolver . findAnnotated ( Converter . class , packageNames ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class type : classes ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading converter class: " + ObjectHelper . name ( type ) ) ; } loadConverterMethods ( registry , type ) ; } } protected String [ ] findPackageNames ( ) throws IOException { Set < String > packages = new HashSet < String > ( ) ; findPackages ( packages , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; findPackages ( packages , getClass ( ) . getClassLoader ( ) ) ; return packages . toArray ( new String [ packages . size ( ) ] ) ; } protected void findPackages ( Set < String > packages , ClassLoader classLoader ) throws IOException { Enumeration < URL > resources = classLoader . getResources ( META_INF_SERVICES ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; if ( url != null ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ; try { while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } finally { ObjectHelper . close ( reader , null , LOG ) ; } } } } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected void loadConverterMethods ( TypeConverterRegistry registry , Class type ) { if ( visitedClasses . contains ( type ) ) { return ; } visitedClasses . add ( type ) ; try { Method [ ] methods = type . getDeclaredMethods ( ) ; CachingInjector injector = null ; for ( Method method : methods ) { Converter annotation = method . getAnnotation ( Converter . class ) ; if ( annotation != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes == null || parameterTypes . length != 1 ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method should have one parameter" ) ; } else { int modifiers = method . getModifiers ( ) ; if ( isAbstract ( modifiers ) || ! isPublic ( modifiers ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method is not a public and concrete method" ) ; } else { Class toType = method . getReturnType ( ) ; if ( toType . equals ( Void . class ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method returns a void method" ) ; } else { Class fromType = parameterTypes [ 0 ] ; if ( isStatic ( modifiers ) ) { registerTypeConverter ( registry , method , toType , fromType , new StaticMethodTypeConverter ( method ) ) ; } else { if ( injector == null ) { injector = new CachingInjector ( registry , type ) ; } registerTypeConverter ( registry , method , toType , fromType , new InstanceMethodTypeConverter ( injector , method ) ) ; } } } } } } Class superclass = type . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { loadConverterMethods ( registry , superclass ) ; } } catch ( NoClassDefFoundError e ) { LOG . debug ( "Ignoring converter type: " + type . getName ( ) + " as a dependent class could not be found: " + e , e ) ; } } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { registry . addTypeConverter ( toType , fromType , typeConverter ) ; } } 	1
package org . apache . camel . builder ; public class NoRouteBuilder extends RouteBuilder { private static final NoRouteBuilder INSTANCE = new NoRouteBuilder ( ) ; public static NoRouteBuilder getInstance ( ) { return INSTANCE ; } public void configure ( ) throws Exception { } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; public interface ErrorHandlerBuilder { ErrorHandlerBuilder copy ( ) ; Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception ; void addErrorHandlers ( ExceptionType exception ) ; } 	1
package org . apache . camel . impl . converter ; import org . apache . camel . TypeConverter ; public class ToStringTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > toType , Object value ) { if ( value != null ) { if ( toType . equals ( String . class ) ) { return ( T ) value . toString ( ) ; } } return null ; } } 	0
package org . apache . camel . model . dataformat ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Exchange ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "dataFormatType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DataFormatType extends IdentifiedType implements DataFormat { @ XmlTransient private DataFormat dataFormat ; @ XmlTransient private String dataFormatTypeName ; public DataFormatType ( ) { } public DataFormatType ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } protected DataFormatType ( String dataFormatTypeName ) { this . dataFormatTypeName = dataFormatTypeName ; } public static DataFormat getDataFormat ( RouteContext routeContext , DataFormatType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; DataFormat dataFormat = routeContext . lookup ( ref , DataFormat . class ) ; if ( dataFormat instanceof DataFormatType ) { type = ( DataFormatType ) dataFormat ; } else { return dataFormat ; } } return type . getDataFormat ( routeContext ) ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; dataFormat . marshal ( exchange , graph , stream ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; return dataFormat . unmarshal ( exchange , stream ) ; } public DataFormat getDataFormat ( RouteContext routeContext ) { if ( dataFormat == null ) { dataFormat = createDataFormat ( routeContext ) ; ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; configureDataFormat ( dataFormat ) ; } return dataFormat ; } protected DataFormat createDataFormat ( RouteContext routeContext ) { if ( dataFormatTypeName != null ) { Class type = ObjectHelper . loadClass ( dataFormatTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + dataFormatTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } return ( DataFormat ) ObjectHelper . newInstance ( type ) ; } return null ; } protected void configureDataFormat ( DataFormat dataFormat ) { } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "pipeline" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class PipelineType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "pipeline" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultExchange implements Exchange { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; protected final CamelContext context ; private Map < String , Object > properties ; private Message in ; private Message out ; private Message fault ; private Throwable exception ; private String exchangeId ; private UnitOfWork unitOfWork ; private ExchangePattern pattern ; public DefaultExchange ( CamelContext context ) { this ( context , ExchangePattern . InOnly ) ; } public DefaultExchange ( CamelContext context , ExchangePattern pattern ) { this . context = context ; this . pattern = pattern ; } public DefaultExchange ( DefaultExchange parent ) { this ( parent . getContext ( ) , parent . getPattern ( ) ) ; this . unitOfWork = parent . getUnitOfWork ( ) ; } @ Override public String toString ( ) { return "Exchange[" + in + "]" ; } public Exchange copy ( ) { Exchange exchange = newInstance ( ) ; exchange . copyFrom ( this ) ; return exchange ; } public void copyFrom ( Exchange exchange ) { if ( exchange == this ) { return ; } setProperties ( safeCopy ( exchange . getProperties ( ) ) ) ; safeCopy ( getIn ( ) , exchange , exchange . getIn ( ) ) ; Message copyOut = exchange . getOut ( false ) ; if ( copyOut != null ) { safeCopy ( getOut ( true ) , exchange , copyOut ) ; } Message copyFault = exchange . getFault ( false ) ; if ( copyFault != null ) { safeCopy ( getFault ( true ) , exchange , copyFault ) ; } setException ( exchange . getException ( ) ) ; unitOfWork = exchange . getUnitOfWork ( ) ; pattern = exchange . getPattern ( ) ; } private static void safeCopy ( Message message , Exchange exchange , Message that ) { if ( message != null ) { message . copyFrom ( that ) ; } } private static Map < String , Object > safeCopy ( Map < String , Object > properties ) { if ( properties == null ) { return null ; } return new HashMap < String , Object > ( properties ) ; } private static Message safeCopy ( Exchange exchange , Message message ) { if ( message == null ) { return null ; } Message answer = message . copy ( ) ; if ( answer instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) answer ; messageSupport . setExchange ( exchange ) ; } return answer ; } public Exchange newInstance ( ) { return new DefaultExchange ( this ) ; } public CamelContext getContext ( ) { return context ; } public Object getProperty ( String name ) { if ( properties != null ) { return properties . get ( name ) ; } return null ; } public < T > T getProperty ( String name , Class < T > type ) { Object value = getProperty ( name ) ; ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { validateExchangePropertyIsExpectedType ( property , type , value ) ; } return getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setProperty ( String name , Object value ) { ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { Class type = value . getClass ( ) ; validateExchangePropertyIsExpectedType ( property , type , value ) ; } getProperties ( ) . put ( name , value ) ; } private < T > void validateExchangePropertyIsExpectedType ( ExchangeProperty < ? > property , Class < T > type , Object value ) { if ( value != null && property != null && ! property . type ( ) . isAssignableFrom ( type ) ) { throw new RuntimeCamelException ( "Type cast exception while getting an " + "Exchange Property value '" + value . toString ( ) + "' on Exchange " + this + " for a well known Exchange Property with these traits: " + property ) ; } } public Object removeProperty ( String name ) { return getProperties ( ) . remove ( name ) ; } public Map < String , Object > getProperties ( ) { if ( properties == null ) { properties = new HashMap < String , Object > ( ) ; } return properties ; } public void setProperties ( Map < String , Object > properties ) { this . properties = properties ; } public Message getIn ( ) { if ( in == null ) { in = createInMessage ( ) ; configureMessage ( in ) ; } return in ; } public void setIn ( Message in ) { this . in = in ; configureMessage ( in ) ; } public Message getOut ( ) { return getOut ( true ) ; } public Message getOut ( boolean lazyCreate ) { if ( out == null && lazyCreate ) { out = createOutMessage ( ) ; configureMessage ( out ) ; } return out ; } public void setOut ( Message out ) { this . out = out ; configureMessage ( out ) ; } public Throwable getException ( ) { return exception ; } public void setException ( Throwable exception ) { this . exception = exception ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } public void throwException ( ) throws Exception { if ( exception == null ) { return ; } if ( exception instanceof RuntimeException ) { throw ( RuntimeException ) exception ; } if ( exception instanceof Exception ) { throw ( Exception ) exception ; } throw new RuntimeCamelException ( exception ) ; } public Message getFault ( ) { return getFault ( true ) ; } public Message getFault ( boolean lazyCreate ) { if ( fault == null && lazyCreate ) { fault = createFaultMessage ( ) ; configureMessage ( fault ) ; } return fault ; } public void setFault ( Message fault ) { this . fault = fault ; configureMessage ( fault ) ; } public String getExchangeId ( ) { if ( exchangeId == null ) { exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( ) ; } return exchangeId ; } public void setExchangeId ( String id ) { this . exchangeId = id ; } public boolean isFailed ( ) { Message faultMessage = getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return getException ( ) != null ; } public boolean isTransacted ( ) { ExchangeProperty < ? > property = ExchangeProperty . get ( "transacted" ) ; return property != null && property . get ( this ) == Boolean . TRUE ; } public UnitOfWork getUnitOfWork ( ) { return unitOfWork ; } public void setUnitOfWork ( UnitOfWork unitOfWork ) { this . unitOfWork = unitOfWork ; } protected Message createInMessage ( ) { return new DefaultMessage ( ) ; } protected Message createOutMessage ( ) { return new DefaultMessage ( ) ; } protected Message createFaultMessage ( ) { return new DefaultMessage ( ) ; } protected void configureMessage ( Message message ) { if ( message instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) message ; messageSupport . setExchange ( this ) ; } } } 	1
package org . apache . camel . model ; import java . util . List ; import javax . xml . bind . annotation . XmlElementRef ; public interface RouteContainer { @ XmlElementRef List < RouteType > getRoutes ( ) ; void setRoutes ( List < RouteType > routes ) ; } 	0
package org . apache . camel . model ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . loadbalancer . LoadBalancerType ; import org . apache . camel . model . loadbalancer . RandomLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . RoundRobinLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . StickyLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . TopicLoadBalanceStrategy ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RandomLoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . processor . loadbalancer . StickyLoadBalancer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; @ XmlRootElement ( name = "loadBalance" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalanceType extends OutputType < LoadBalanceType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "roundRobin" , type = RoundRobinLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "random" , type = RandomLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "sticky" , type = StickyLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "topic" , type = TopicLoadBalanceStrategy . class ) } ) private LoadBalancerType loadBalancerType ; public LoadBalanceType ( ) { } @ Override public String getShortName ( ) { return "loadbalance" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public LoadBalancerType getLoadBalancerType ( ) { return loadBalancerType ; } public void setLoadBalancerType ( LoadBalancerType loadbalancer ) { loadBalancerType = loadbalancer ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : outputs ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : getOutputs ( ) ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } public LoadBalanceType setLoadBalancer ( LoadBalancer loadBalancer ) { loadBalancerType = new LoadBalancerType ( loadBalancer ) ; return this ; } public LoadBalanceType roundRobin ( ) { loadBalancerType = new LoadBalancerType ( new RoundRobinLoadBalancer ( ) ) ; return this ; } public LoadBalanceType random ( ) { loadBalancerType = new LoadBalancerType ( new RandomLoadBalancer ( ) ) ; return this ; } public LoadBalanceType sticky ( Expression < Exchange > correlationExpression ) { loadBalancerType = new LoadBalancerType ( new StickyLoadBalancer ( correlationExpression ) ) ; return this ; } public LoadBalanceType topic ( ) { loadBalancerType = new LoadBalancerType ( new TopicLoadBalancer ( ) ) ; return this ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < ProcessorType < ? > > list = getOutputs ( ) ; for ( ProcessorType < ? > processorType : list ) { buffer . append ( processorType . getLabel ( ) ) ; } return buffer . toString ( ) ; } @ Override public String toString ( ) { String result ; if ( loadBalancerType != null ) { result = "LoadBalanceType[" + loadBalancerType + ", " ; } else { result = "LoadBalanceType[" + ref + ", " ; } result = result + getOutputs ( ) + "]" ; return result ; } } 	1
package org . apache . camel . spi ; public interface ExceptionHandler { void handleException ( Throwable exception ) ; } 	0
package org . apache . camel . processor . aggregate ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class PredicateAggregationCollection extends AggregationCollection { private Predicate aggregationCompletedPredicate ; private List < Exchange > collection = new ArrayList < Exchange > ( ) ; public PredicateAggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { super ( correlationExpression , aggregationStrategy ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } @ Override protected void onAggregation ( Object correlationKey , Exchange newExchange ) { if ( aggregationCompletedPredicate . matches ( newExchange ) ) { super . getMap ( ) . remove ( correlationKey ) ; collection . add ( newExchange ) ; } } @ Override public Iterator < Exchange > iterator ( ) { return collection . iterator ( ) ; } @ Override public int size ( ) { return collection . size ( ) ; } @ Override public void clear ( ) { collection . clear ( ) ; super . clear ( ) ; } } 	1
package org . apache . camel . component . rmi ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . component . bean . BeanExchange ; import org . apache . camel . impl . DefaultComponent ; public class RmiComponent extends DefaultComponent < BeanExchange > { public RmiComponent ( ) { } public RmiComponent ( CamelContext context ) { super ( context ) ; } @ Override protected Endpoint < BeanExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new RmiEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Body ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Header ; import org . apache . camel . Headers ; import org . apache . camel . Message ; import org . apache . camel . OutHeaders ; import org . apache . camel . Properties ; import org . apache . camel . Property ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ExchangeHelper . convertToType ; public class BeanInfo { private static final transient Log LOG = LogFactory . getLog ( BeanInfo . class ) ; private final CamelContext camelContext ; private Class type ; private ParameterMappingStrategy strategy ; private Map < String , MethodInfo > operations = new ConcurrentHashMap < String , MethodInfo > ( ) ; private MethodInfo defaultMethod ; private List < MethodInfo > operationsWithBody = new ArrayList < MethodInfo > ( ) ; private List < MethodInfo > operationsWithCustomAnnotation = new ArrayList < MethodInfo > ( ) ; public BeanInfo ( CamelContext camelContext , Class type ) { this ( camelContext , type , createParameterMappingStrategy ( camelContext ) ) ; } public BeanInfo ( CamelContext camelContext , Class type , ParameterMappingStrategy strategy ) { this . camelContext = camelContext ; this . type = type ; this . strategy = strategy ; introspect ( getType ( ) ) ; if ( operations . size ( ) == 1 ) { Collection < MethodInfo > methodInfos = operations . values ( ) ; for ( MethodInfo methodInfo : methodInfos ) { defaultMethod = methodInfo ; } } } public Class getType ( ) { return type ; } public CamelContext getCamelContext ( ) { return camelContext ; } public MethodInvocation createInvocation ( Method method , Object pojo , Exchange exchange ) throws RuntimeCamelException { MethodInfo methodInfo = introspect ( type , method ) ; if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } public MethodInvocation createInvocation ( Object pojo , Exchange exchange ) throws RuntimeCamelException , AmbiguousMethodCallException { MethodInfo methodInfo = null ; String name = exchange . getIn ( ) . getHeader ( BeanProcessor . METHOD_NAME , String . class ) ; if ( name != null ) { methodInfo = operations . get ( name ) ; } if ( methodInfo == null ) { methodInfo = chooseMethod ( pojo , exchange ) ; } if ( methodInfo == null ) { methodInfo = defaultMethod ; } if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } protected void introspect ( Class clazz ) { Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( isValidMethod ( clazz , method ) ) { introspect ( clazz , method ) ; } } Class superclass = clazz . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { introspect ( superclass ) ; } } protected MethodInfo introspect ( Class clazz , Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; Annotation [ ] [ ] parametersAnnotations = method . getParameterAnnotations ( ) ; List < ParameterInfo > parameters = new ArrayList < ParameterInfo > ( ) ; List < ParameterInfo > bodyParameters = new ArrayList < ParameterInfo > ( ) ; boolean hasCustomAnnotation = false ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { Class parameterType = parameterTypes [ i ] ; Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] ; Expression expression = createParameterUnmarshalExpression ( clazz , method , parameterType , parameterAnnotations ) ; hasCustomAnnotation |= expression != null ; ParameterInfo parameterInfo = new ParameterInfo ( i , parameterType , parameterAnnotations , expression ) ; parameters . add ( parameterInfo ) ; if ( expression == null ) { hasCustomAnnotation |= ObjectHelper . hasAnnotation ( parameterAnnotations , Body . class ) ; if ( bodyParameters . isEmpty ( ) ) { if ( Exchange . class . isAssignableFrom ( parameterType ) ) { expression = ExpressionBuilder . exchangeExpression ( ) ; } else { expression = ExpressionBuilder . bodyExpression ( parameterType ) ; } parameterInfo . setExpression ( expression ) ; bodyParameters . add ( parameterInfo ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No expression available for method: " + method . toString ( ) + " which already has a body so ignoring parameter: " + i + " so ignoring method" ) ; } return null ; } } } String opName = method . getName ( ) ; MethodInfo methodInfo = new MethodInfo ( clazz , method , parameters , bodyParameters , hasCustomAnnotation ) ; operations . put ( opName , methodInfo ) ; if ( methodInfo . hasBodyParameter ( ) ) { operationsWithBody . add ( methodInfo ) ; } if ( methodInfo . isHasCustomAnnotation ( ) && ! methodInfo . hasBodyParameter ( ) ) { operationsWithCustomAnnotation . add ( methodInfo ) ; } return methodInfo ; } protected MethodInfo chooseMethod ( Object pojo , Exchange exchange ) throws AmbiguousMethodCallException { if ( operationsWithBody . size ( ) == 1 ) { return operationsWithBody . get ( 0 ) ; } else if ( ! operationsWithBody . isEmpty ( ) ) { return chooseMethodWithMatchingBody ( exchange , operationsWithBody ) ; } else if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return null ; } protected MethodInfo chooseMethodWithMatchingBody ( Exchange exchange , Collection < MethodInfo > operationList ) throws AmbiguousMethodCallException { Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; if ( body != null ) { Class bodyType = body . getClass ( ) ; List < MethodInfo > possibles = new ArrayList < MethodInfo > ( ) ; for ( MethodInfo methodInfo : operationList ) { boolean out = exchange . getPattern ( ) . isOutCapable ( ) ; if ( out && methodInfo . isReturnTypeVoid ( ) ) { continue ; } if ( methodInfo . bodyParameterMatches ( bodyType ) ) { possibles . add ( methodInfo ) ; } } if ( possibles . size ( ) == 1 ) { return possibles . get ( 0 ) ; } else if ( possibles . isEmpty ( ) ) { Object newBody = null ; MethodInfo matched = null ; for ( MethodInfo methodInfo : operationList ) { Object value = convertToType ( exchange , methodInfo . getBodyParameterType ( ) , body ) ; if ( value != null ) { if ( newBody != null ) { throw new AmbiguousMethodCallException ( exchange , Arrays . asList ( matched , methodInfo ) ) ; } else { newBody = value ; matched = methodInfo ; } } } if ( matched != null ) { in . setBody ( newBody ) ; return matched ; } } else { if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return chooseMethodWithCustomAnnotations ( exchange , possibles ) ; } } return null ; } protected MethodInfo chooseMethodWithCustomAnnotations ( Exchange exchange , Collection < MethodInfo > possibles ) throws AmbiguousMethodCallException { MethodInfo chosen = null ; for ( MethodInfo possible : possibles ) { if ( possible . isHasCustomAnnotation ( ) ) { if ( chosen != null ) { chosen = null ; break ; } else { chosen = possible ; } } } if ( chosen != null ) { return chosen ; } throw new AmbiguousMethodCallException ( exchange , possibles ) ; } protected Expression createParameterUnmarshalExpression ( Class clazz , Method method , Class parameterType , Annotation [ ] parameterAnnotation ) { for ( Annotation annotation : parameterAnnotation ) { Expression answer = createParameterUnmarshalExpressionForAnnotation ( clazz , method , parameterType , annotation ) ; if ( answer != null ) { return answer ; } } return strategy . getDefaultParameterTypeExpression ( parameterType ) ; } protected boolean isPossibleBodyParameter ( Annotation [ ] annotations ) { if ( annotations != null ) { for ( Annotation annotation : annotations ) { if ( ( annotation instanceof Property ) || ( annotation instanceof Header ) || ( annotation instanceof Headers ) || ( annotation instanceof OutHeaders ) || ( annotation instanceof Properties ) ) { return false ; } LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { return false ; } } } return true ; } protected Expression createParameterUnmarshalExpressionForAnnotation ( Class clazz , Method method , Class parameterType , Annotation annotation ) { if ( annotation instanceof Property ) { Property propertyAnnotation = ( Property ) annotation ; return ExpressionBuilder . propertyExpression ( propertyAnnotation . name ( ) ) ; } else if ( annotation instanceof Properties ) { return ExpressionBuilder . propertiesExpression ( ) ; } else if ( annotation instanceof Header ) { Header headerAnnotation = ( Header ) annotation ; return ExpressionBuilder . headerExpression ( headerAnnotation . name ( ) ) ; } else if ( annotation instanceof Headers ) { return ExpressionBuilder . headersExpression ( ) ; } else if ( annotation instanceof OutHeaders ) { return ExpressionBuilder . outHeadersExpression ( ) ; } else { LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { Class < ? > type = languageAnnotation . factory ( ) ; Object object = camelContext . getInjector ( ) . newInstance ( type ) ; if ( object instanceof AnnotationExpressionFactory ) { AnnotationExpressionFactory expressionFactory = ( AnnotationExpressionFactory ) object ; return expressionFactory . createExpression ( camelContext , annotation , languageAnnotation , parameterType ) ; } else { LOG . error ( "Ignoring bad annotation: " + languageAnnotation + "on method: " + method + " which declares a factory: " + type . getName ( ) + " which does not implement " + AnnotationExpressionFactory . class . getName ( ) ) ; } } } return null ; } protected boolean isValidMethod ( Class clazz , Method method ) { if ( ! Modifier . isPublic ( method . getModifiers ( ) ) ) { return false ; } if ( method . getReturnType ( ) != null && Exchange . class . isAssignableFrom ( method . getReturnType ( ) ) ) { return false ; } return true ; } public static ParameterMappingStrategy createParameterMappingStrategy ( CamelContext camelContext ) { Registry registry = camelContext . getRegistry ( ) ; ParameterMappingStrategy answer = registry . lookup ( ParameterMappingStrategy . class . getName ( ) , ParameterMappingStrategy . class ) ; if ( answer == null ) { answer = new DefaultParameterMappingStrategy ( ) ; } return answer ; } } 	1
package org . apache . camel . component . cxf . transport ; import java . io . IOException ; import java . io . OutputStream ; import java . util . List ; import java . util . Map ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . camel . CamelContext ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . component . cxf . CxfConstants ; import org . apache . camel . component . cxf . CxfSoapBinding ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . cxf . Bus ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . configuration . Configurable ; import org . apache . cxf . configuration . Configurer ; import org . apache . cxf . helpers . CastUtils ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . MessageImpl ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . transport . AbstractConduit ; import org . apache . cxf . transport . AbstractDestination ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . ConduitInitiator ; import org . apache . cxf . transport . MessageObserver ; import org . apache . cxf . ws . addressing . EndpointReferenceType ; import org . apache . cxf . wsdl . EndpointReferenceUtils ; public class CamelDestination extends AbstractDestination implements Configurable { protected static final String BASE_BEAN_NAME_SUFFIX = ".camel-destination" ; private static final Logger LOG = LogUtils . getL7dLogger ( CamelDestination . class ) ; final ConduitInitiator conduitInitiator ; CamelContext camelContext ; Consumer consumer ; String camelDestinationUri ; private ProducerTemplate < Exchange > camelTemplate ; private Endpoint distinationEndpoint ; public CamelDestination ( CamelContext camelContext , Bus bus , ConduitInitiator ci , EndpointInfo info ) throws IOException { super ( bus , getTargetReference ( info , bus ) , info ) ; this . camelContext = camelContext ; conduitInitiator = ci ; camelDestinationUri = endpointInfo . getAddress ( ) . substring ( CxfConstants . CAMEL_TRANSPORT_PREFIX . length ( ) ) ; if ( camelDestinationUri . startsWith ( "//" ) ) { camelDestinationUri = camelDestinationUri . substring ( 2 ) ; } initConfig ( ) ; } protected Logger getLogger ( ) { return LOG ; } protected Conduit getInbuiltBackChannel ( Message inMessage ) { return new BackChannelConduit ( inMessage ) ; } public void activate ( ) { getLogger ( ) . log ( Level . FINE , "CamelDestination activate().... " ) ; try { getLogger ( ) . log ( Level . FINE , "establishing Camel connection" ) ; distinationEndpoint = camelContext . getEndpoint ( camelDestinationUri ) ; consumer = distinationEndpoint . createConsumer ( new ConsumerProcessor ( ) ) ; consumer . start ( ) ; } catch ( Exception ex ) { getLogger ( ) . log ( Level . SEVERE , "Camel connect failed with Exception : " , ex ) ; } } public void deactivate ( ) { try { consumer . stop ( ) ; } catch ( Exception e ) { getLogger ( ) . log ( Level . SEVERE , "Camel stop failed with Exception : " , e ) ; } } public void shutdown ( ) { getLogger ( ) . log ( Level . FINE , "CamelDestination shutdown()" ) ; this . deactivate ( ) ; } public ProducerTemplate < Exchange > getCamelTemplate ( ) { if ( camelTemplate == null ) { CamelContext ctx = camelContext != null ? camelContext : new DefaultCamelContext ( ) ; camelTemplate = ctx . createProducerTemplate ( ) ; } return camelTemplate ; } public void setCamelTemplate ( ProducerTemplate < Exchange > template ) { camelTemplate = template ; } public void setCamelContext ( CamelContext context ) { camelContext = context ; } public CamelContext getCamelContext ( ) { return camelContext ; } protected void incoming ( org . apache . camel . Exchange camelExchange ) { getLogger ( ) . log ( Level . FINE , "server received request: " , camelExchange ) ; org . apache . cxf . message . Message inMessage = CxfSoapBinding . getCxfInMessage ( camelExchange , false ) ; inMessage . put ( CxfConstants . CAMEL_EXCHANGE , camelExchange ) ; ( ( MessageImpl ) inMessage ) . setDestination ( this ) ; incomingObserver . onMessage ( inMessage ) ; } public String getBeanName ( ) { if ( endpointInfo == null || endpointInfo . getName ( ) == null ) { return "default" + BASE_BEAN_NAME_SUFFIX ; } return endpointInfo . getName ( ) . toString ( ) + BASE_BEAN_NAME_SUFFIX ; } private void initConfig ( ) { if ( bus != null ) { Configurer configurer = bus . getExtension ( Configurer . class ) ; if ( null != configurer ) { configurer . configureBean ( this ) ; } } } protected class ConsumerProcessor implements Processor { public void process ( Exchange exchange ) { try { incoming ( exchange ) ; } catch ( Throwable ex ) { getLogger ( ) . log ( Level . WARNING , "Failed to process incoming message : " , ex ) ; } } } protected class BackChannelConduit extends AbstractConduit { protected Message inMessage ; Exchange camelExchange ; org . apache . cxf . message . Exchange cxfExchange ; BackChannelConduit ( Message message ) { super ( EndpointReferenceUtils . getAnonymousEndpointReference ( ) ) ; inMessage = message ; cxfExchange = inMessage . getExchange ( ) ; camelExchange = cxfExchange . get ( Exchange . class ) ; } public void setMessageObserver ( MessageObserver observer ) { } public void prepare ( Message message ) throws IOException { message . put ( CxfConstants . CAMEL_EXCHANGE , inMessage . get ( CxfConstants . CAMEL_EXCHANGE ) ) ; message . setContent ( OutputStream . class , new CamelOutputStream ( message ) ) ; } protected Logger getLogger ( ) { return LOG ; } } protected boolean markPartialResponse ( Message partialResponse , EndpointReferenceType decoupledTarget ) { return true ; } protected ConduitInitiator getConduitInitiator ( ) { return conduitInitiator ; } private class CamelOutputStream extends CachedOutputStream { private Message outMessage ; public CamelOutputStream ( Message m ) { super ( ) ; outMessage = m ; } private void commitOutputMessage ( ) throws IOException { Exchange camelExchange = ( Exchange ) outMessage . get ( CxfConstants . CAMEL_EXCHANGE ) ; Map < String , List < String > > protocolHeader = CastUtils . cast ( ( Map < ? , ? > ) outMessage . get ( Message . PROTOCOL_HEADERS ) ) ; CxfSoapBinding . setProtocolHeader ( camelExchange . getOut ( ) . getHeaders ( ) , protocolHeader ) ; CachedOutputStream outputStream = ( CachedOutputStream ) outMessage . getContent ( OutputStream . class ) ; camelExchange . getOut ( ) . setBody ( outputStream . getBytes ( ) ) ; getLogger ( ) . log ( Level . FINE , "send the response message: " + outputStream ) ; } @ Override protected void doFlush ( ) throws IOException { } @ Override protected void doClose ( ) throws IOException { commitOutputMessage ( ) ; } @ Override protected void onWrite ( ) throws IOException { } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "filter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FilterType extends ExpressionNode implements Block { public FilterType ( ) { } public FilterType ( ExpressionType expression ) { super ( expression ) ; } public FilterType ( Predicate predicate ) { super ( predicate ) ; } @ Override public String toString ( ) { return "Filter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "filter" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . component . bean ; import java . io . Serializable ; import java . lang . reflect . Method ; public class MethodBean implements Serializable { private String name ; private Class < ? > type ; private Class < ? > [ ] parameterTypes ; public MethodBean ( ) { } public MethodBean ( Method method ) { this . name = method . getName ( ) ; this . type = method . getDeclaringClass ( ) ; this . parameterTypes = method . getParameterTypes ( ) ; } public Method getMethod ( ) throws NoSuchMethodException { return type . getMethod ( name , parameterTypes ) ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Class < ? > [ ] getParameterTypes ( ) { return parameterTypes ; } public void setParameterTypes ( Class < ? > [ ] parameterTypes ) { this . parameterTypes = parameterTypes ; } public Class < ? > getType ( ) { return type ; } public void setType ( Class < ? > type ) { this . type = type ; } } 	0
package org . apache . camel . component . seda ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . PollingConsumerSupport ; @ Deprecated public class ListPollingConsumer extends PollingConsumerSupport { private final List < Exchange > exchanges ; public ListPollingConsumer ( Endpoint endpoint , List < Exchange > exchanges ) { super ( endpoint ) ; this . exchanges = exchanges ; } public Exchange receive ( ) { return receiveNoWait ( ) ; } public Exchange receiveNoWait ( ) { if ( exchanges . isEmpty ( ) ) { return null ; } else { return exchanges . remove ( 0 ) ; } } public Exchange receive ( long timeout ) { return receiveNoWait ( ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . model . language . ExpressionType ; @ XmlRootElement ( name = "serviceActivation" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ServiceActivationType { @ XmlAttribute private String group = "default" ; @ XmlElementRef private List < ExpressionType > uris = new ArrayList < ExpressionType > ( ) ; public String getGroup ( ) { return group ; } public void setGroup ( String group ) { this . group = group ; } public List < ExpressionType > getUris ( ) { return uris ; } public void setUris ( List < ExpressionType > uris ) { this . uris = uris ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . LogFactory ; public class LoggingExceptionHandler implements ExceptionHandler { private final Logger logger ; public LoggingExceptionHandler ( Class ownerType ) { this ( new Logger ( LogFactory . getLog ( ownerType ) , LoggingLevel . ERROR ) ) ; } public LoggingExceptionHandler ( Logger logger ) { this . logger = logger ; } public void handleException ( Throwable exception ) { logger . log ( exception . getMessage ( ) , exception ) ; } } 	1
package org . apache . camel . util . jndi ; import java . util . Hashtable ; import javax . naming . Context ; import javax . naming . NamingException ; import javax . naming . spi . InitialContextFactory ; public class CamelInitialContextFactory implements InitialContextFactory { public Context getInitialContext ( Hashtable environment ) throws NamingException { try { return new JndiContext ( environment ) ; } catch ( NamingException e ) { throw e ; } catch ( Exception e ) { NamingException exception = new NamingException ( e . getMessage ( ) ) ; exception . initCause ( e ) ; throw exception ; } } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class FileComponent extends DefaultComponent < FileExchange > { public static final String HEADER_FILE_NAME = "org.apache.camel.file.name" ; public static final String HEADER_FILE_NAME_PRODUCED = "org.apache.camel.file.name.produced" ; public FileComponent ( ) { } public FileComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < FileExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { File file = new File ( remaining ) ; FileEndpoint result = new FileEndpoint ( file , uri , this ) ; setProperties ( result , parameters ) ; return result ; } } 	1
package org . apache . camel . processor . validation ; import java . util . List ; import org . xml . sax . SAXParseException ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; public class SchemaValidationException extends ValidationException { private final Object schema ; private final List < SAXParseException > fatalErrors ; private final List < SAXParseException > errors ; private final List < SAXParseException > warnings ; public SchemaValidationException ( Exchange exchange , Object schema , List < SAXParseException > fatalErrors , List < SAXParseException > errors , List < SAXParseException > warnings ) { super ( exchange , message ( schema , fatalErrors , errors , warnings ) ) ; this . schema = schema ; this . fatalErrors = fatalErrors ; this . errors = errors ; this . warnings = warnings ; } public Object getSchema ( ) { return schema ; } public List < SAXParseException > getErrors ( ) { return errors ; } public List < SAXParseException > getFatalErrors ( ) { return fatalErrors ; } public List < SAXParseException > getWarnings ( ) { return warnings ; } protected static String message ( Object schema , List < SAXParseException > fatalErrors , List < SAXParseException > errors , List < SAXParseException > warnings ) { StringBuffer buffer = new StringBuffer ( "Validation failed for: " + schema ) ; if ( ! fatalErrors . isEmpty ( ) ) { buffer . append ( " fatal errors: " ) ; buffer . append ( fatalErrors ) ; } if ( ! errors . isEmpty ( ) ) { buffer . append ( " errors: " ) ; buffer . append ( errors ) ; } return buffer . toString ( ) ; } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "expression" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LanguageExpression extends ExpressionType { @ XmlAttribute private String language ; public LanguageExpression ( ) { } public LanguageExpression ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . impl ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import org . apache . camel . TypeConverter ; import org . apache . camel . impl . converter . AnnotationTypeConverterLoader ; import org . apache . camel . impl . converter . TypeConverterRegistry ; import org . apache . camel . util . ObjectHelper ; public class ReportingTypeConverterLoader extends AnnotationTypeConverterLoader { private static final Comparator < TypeMapping > COMPARE_LAST_LOADED_FIRST = new Comparator < TypeMapping > ( ) { public int compare ( TypeMapping t1 , TypeMapping t2 ) { if ( ObjectHelper . equal ( t1 . fromType , t2 . fromType ) ) { return ObjectHelper . equal ( t1 . toType , t2 . toType ) ? t1 . index - t2 . index : ObjectHelper . compare ( getTypeName ( t1 . toType ) , getTypeName ( t2 . toType ) ) ; } return ObjectHelper . compare ( getTypeName ( t1 . fromType ) , getTypeName ( t2 . fromType ) ) ; } } ; private List < TypeMapping > typeMappings = new ArrayList < TypeMapping > ( ) ; public TypeMapping [ ] getTypeConversions ( ) { Collections . sort ( typeMappings , COMPARE_LAST_LOADED_FIRST ) ; return typeMappings . toArray ( new TypeMapping [ typeMappings . size ( ) ] ) ; } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { TypeMapping mapping = new TypeMapping ( toType , fromType , typeConverter . getClass ( ) , method ) ; typeMappings . add ( mapping ) ; } private static String getTypeName ( Class type ) { return type != null ? type . getName ( ) : null ; } public static class TypeMapping { private static int counter ; private Class toType ; private Class fromType ; private Class converterType ; private Method method ; private int index ; public TypeMapping ( Class toType , Class fromType , Class converterType , Method method ) { this . toType = toType ; this . fromType = fromType ; this . converterType = converterType ; this . method = method ; this . index = counter ++ ; } public Class getFromType ( ) { return fromType ; } public Class getToType ( ) { return toType ; } public Class getConverterType ( ) { return converterType ; } public Method getMethod ( ) { return method ; } public int getIndex ( ) { return index ; } @ Override public boolean equals ( Object object ) { if ( object instanceof TypeMapping ) { TypeMapping that = ( TypeMapping ) object ; return this . index == that . index ; } return false ; } @ Override public int hashCode ( ) { int answer = toType . hashCode ( ) ; if ( fromType != null ) { answer *= 37 + fromType . hashCode ( ) ; } return answer ; } @ Override public String toString ( ) { return "[" + fromType . getSimpleName ( ) + "=>" + toType . getSimpleName ( ) + "]" ; } } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class Tracer implements InterceptStrategy { private TraceFormatter formatter = new TraceFormatter ( ) ; public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; return new TraceInterceptor ( processorType , target , formatter ) ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . component . mail ; import java . io . IOException ; import javax . mail . BodyPart ; import javax . mail . Message ; import javax . mail . MessagingException ; import javax . mail . Multipart ; import javax . mail . internet . MimeMultipart ; import org . apache . camel . Converter ; @ Converter public class MailConverters { @ Converter public String toString ( Message message ) throws MessagingException , IOException { Object content = message . getContent ( ) ; if ( content instanceof MimeMultipart ) { MimeMultipart multipart = ( MimeMultipart ) content ; if ( multipart . getCount ( ) > 0 ) { BodyPart part = multipart . getBodyPart ( 0 ) ; content = part . getContent ( ) ; } } if ( content != null ) { return content . toString ( ) ; } return null ; } @ Converter public static String toString ( Multipart multipart ) throws MessagingException , IOException { int size = multipart . getCount ( ) ; for ( int i = 0 ; i < size ; i ++ ) { BodyPart part = multipart . getBodyPart ( i ) ; if ( part . getContentType ( ) . startsWith ( "text" ) ) { return part . getContent ( ) . toString ( ) ; } } return null ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class JMXExchange extends DefaultExchange { public JMXExchange ( CamelContext camelContext , ExchangePattern pattern , Notification notification ) { super ( camelContext , pattern ) ; setIn ( new JMXMessage ( notification ) ) ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . Exchange ; public interface ExchangeConverter { < T > T convertTo ( Class < T > type , Exchange exchange ) ; } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . language . bean . BeanExpression ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "methodCall" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MethodCallExpression extends ExpressionType { @ XmlAttribute ( required = false ) private String bean ; @ XmlAttribute ( required = false ) private String method ; public MethodCallExpression ( ) { } public MethodCallExpression ( String beanName ) { super ( beanName ) ; } public MethodCallExpression ( String beanName , String method ) { super ( beanName ) ; this . method = method ; } public String getLanguage ( ) { return "bean" ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Override public Expression createExpression ( RouteContext routeContext ) { return new BeanExpression ( beanName ( ) , getMethod ( ) ) ; } @ Override public Predicate < Exchange > createPredicate ( RouteContext routeContext ) { return new BeanExpression < Exchange > ( beanName ( ) , getMethod ( ) ) ; } protected String beanName ( ) { if ( bean != null ) { return bean ; } return getExpression ( ) ; } } 	1
package org . apache . camel . component . dataset ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . util . ExchangeHelper ; public abstract class DataSetSupport implements DataSet { private Map < String , Object > defaultHeaders ; private Processor outputTransformer ; private long size = 10 ; private long reportCount = - 1 ; public DataSetSupport ( ) { } public DataSetSupport ( int size ) { setSize ( size ) ; } public void populateMessage ( Exchange exchange , long messageIndex ) throws Exception { Message in = exchange . getIn ( ) ; in . setBody ( createMessageBody ( messageIndex ) ) ; in . setHeaders ( getDefaultHeaders ( ) ) ; applyHeaders ( exchange , messageIndex ) ; if ( outputTransformer != null ) { outputTransformer . process ( exchange ) ; } } public void assertMessageExpected ( DataSetEndpoint dataSetEndpoint , Exchange expected , Exchange actual , long index ) throws Exception { Object expectedBody = expected . getIn ( ) . getBody ( ) ; Object actualBody = actual . getIn ( ) . getBody ( ) ; if ( expectedBody != null ) { actualBody = ExchangeHelper . getMandatoryInBody ( actual , expectedBody . getClass ( ) ) ; } DataSetEndpoint . assertEquals ( "message body" , expectedBody , actualBody , actual ) ; } public long getSize ( ) { return size ; } public void setSize ( long size ) { this . size = size ; } public long getReportCount ( ) { if ( reportCount <= 0 ) { reportCount = getSize ( ) / 5 ; } return reportCount ; } public void setReportCount ( long reportCount ) { this . reportCount = reportCount ; } public Map < String , Object > getDefaultHeaders ( ) { if ( defaultHeaders == null ) { defaultHeaders = new HashMap < String , Object > ( ) ; populateDefaultHeaders ( defaultHeaders ) ; } return defaultHeaders ; } public void setDefaultHeaders ( Map < String , Object > defaultHeaders ) { this . defaultHeaders = defaultHeaders ; } public Processor getOutputTransformer ( ) { return outputTransformer ; } public void setOutputTransformer ( Processor outputTransformer ) { this . outputTransformer = outputTransformer ; } protected abstract Object createMessageBody ( long messageIndex ) ; protected void applyHeaders ( Exchange exchange , long messageIndex ) { } protected void populateDefaultHeaders ( Map < String , Object > map ) { } } 	0
package org . apache . camel . util ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import org . w3c . dom . NodeList ; public final class CollectionHelper { private CollectionHelper ( ) { } public static Integer size ( Object value ) { if ( value != null ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . size ( ) ; } else if ( value instanceof Map ) { Map map = ( Map ) value ; return map . size ( ) ; } else if ( value instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) value ; return array . length ; } else if ( value . getClass ( ) . isArray ( ) ) { return Array . getLength ( value ) ; } else if ( value instanceof NodeList ) { NodeList nodeList = ( NodeList ) value ; return nodeList . getLength ( ) ; } } return null ; } public static void appendValue ( Map map , Object key , Object value ) { Object oldValue = map . get ( key ) ; if ( oldValue != null ) { List list ; if ( oldValue instanceof List ) { list = ( List ) oldValue ; } else { list = new ArrayList ( ) ; list . add ( oldValue ) ; } list . add ( value ) ; } else { map . put ( key , value ) ; } } } 	1
package org . apache . camel . component . jms ; import javax . jms . JMSException ; import javax . jms . Session ; import javax . jms . TemporaryQueue ; import javax . jms . TemporaryTopic ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . SessionCallback ; public class JmsProviderMetadata { private Class < ? extends TemporaryQueue > temporaryQueueType ; private Class < ? extends TemporaryTopic > temporaryTopicType ; public Class < ? extends TemporaryQueue > getTemporaryQueueType ( JmsOperations template ) { Class < ? extends TemporaryQueue > answer = getTemporaryQueueType ( ) ; if ( answer == null ) { loadTemporaryDestinationTypes ( template ) ; answer = getTemporaryQueueType ( ) ; } return answer ; } public Class < ? extends TemporaryTopic > getTemporaryTopicType ( JmsOperations template ) { Class < ? extends TemporaryTopic > answer = getTemporaryTopicType ( ) ; if ( answer == null ) { loadTemporaryDestinationTypes ( template ) ; answer = getTemporaryTopicType ( ) ; } return answer ; } public Class < ? extends TemporaryQueue > getTemporaryQueueType ( ) { return temporaryQueueType ; } public void setTemporaryQueueType ( Class < ? extends TemporaryQueue > temporaryQueueType ) { this . temporaryQueueType = temporaryQueueType ; } public Class < ? extends TemporaryTopic > getTemporaryTopicType ( ) { return temporaryTopicType ; } public void setTemporaryTopicType ( Class < ? extends TemporaryTopic > temporaryTopicType ) { this . temporaryTopicType = temporaryTopicType ; } protected void loadTemporaryDestinationTypes ( JmsOperations template ) { if ( template == null ) { throw new IllegalArgumentException ( "No JmsTemplate supplied!" ) ; } template . execute ( new SessionCallback ( ) { public Object doInJms ( Session session ) throws JMSException { TemporaryQueue queue = session . createTemporaryQueue ( ) ; setTemporaryQueueType ( queue . getClass ( ) ) ; TemporaryTopic topic = session . createTemporaryTopic ( ) ; setTemporaryTopicType ( topic . getClass ( ) ) ; queue . delete ( ) ; topic . delete ( ) ; return null ; } } ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setBody" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetBodyType extends ExpressionNode { public SetBodyType ( ) { } public SetBodyType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "SetBody[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setBody" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; return ProcessorBuilder . setBody ( expr ) ; } } 	1
package org . apache . camel . component . jms . requestor ; import java . util . concurrent . FutureTask ; import javax . jms . JMSException ; import javax . jms . Message ; import org . apache . camel . component . jms . JmsConfiguration . MessageSentCallback ; import org . apache . camel . component . jms . JmsProducer ; import org . apache . camel . util . TimeoutMap ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeferredRequestReplyMap { private static final transient Log LOG = LogFactory . getLog ( DeferredRequestReplyMap . class ) ; private Requestor requestor ; private JmsProducer producer ; private TimeoutMap deferredRequestMap ; private TimeoutMap deferredReplyMap ; public static class DeferredMessageSentCallback implements MessageSentCallback { private DeferredRequestReplyMap map ; private String transitionalID ; private Message message ; private Object monitor ; public DeferredMessageSentCallback ( DeferredRequestReplyMap map , UuidGenerator uuidGenerator , Object monitor ) { transitionalID = uuidGenerator . generateId ( ) ; this . map = map ; this . monitor = monitor ; } public DeferredRequestReplyMap getDeferredRequestReplyMap ( ) { return map ; } public String getID ( ) { return transitionalID ; } public Message getMessage ( ) { return message ; } public void sent ( Message message ) { this . message = message ; map . processDeferredReplies ( monitor , getID ( ) , message ) ; } } public DeferredRequestReplyMap ( Requestor requestor , JmsProducer producer , TimeoutMap deferredRequestMap , TimeoutMap deferredReplyMap ) { this . requestor = requestor ; this . producer = producer ; this . deferredRequestMap = deferredRequestMap ; this . deferredReplyMap = deferredReplyMap ; } public long getRequestTimeout ( ) { return producer . getRequestTimeout ( ) ; } public DeferredMessageSentCallback createDeferredMessageSentCallback ( ) { return new DeferredMessageSentCallback ( this , getUuidGenerator ( ) , requestor ) ; } public void put ( DeferredMessageSentCallback callback , FutureTask futureTask ) { deferredRequestMap . put ( callback . getID ( ) , futureTask , getRequestTimeout ( ) ) ; } public void processDeferredRequests ( String correlationID , Message inMessage ) { processDeferredRequests ( requestor , deferredRequestMap , deferredReplyMap , correlationID , requestor . getMaxRequestTimeout ( ) , inMessage ) ; } public static void processDeferredRequests ( Object monitor , TimeoutMap requestMap , TimeoutMap replyMap , String correlationID , long timeout , Message inMessage ) { synchronized ( monitor ) { try { Object handler = requestMap . get ( correlationID ) ; if ( handler == null ) { if ( requestMap . size ( ) > replyMap . size ( ) ) { replyMap . put ( correlationID , inMessage , timeout ) ; } else { LOG . warn ( "Response received for unknown correlationID: " + correlationID + "; response: " + inMessage ) ; } } if ( handler != null && handler instanceof ReplyHandler ) { ReplyHandler replyHandler = ( ReplyHandler ) handler ; boolean complete = replyHandler . handle ( inMessage ) ; if ( complete ) { requestMap . remove ( correlationID ) ; } } } catch ( JMSException e ) { throw new FailedToProcessResponse ( inMessage , e ) ; } } } public void processDeferredReplies ( Object monitor , String transitionalID , Message outMessage ) { synchronized ( monitor ) { try { Object handler = deferredRequestMap . get ( transitionalID ) ; if ( handler == null ) { return ; } deferredRequestMap . remove ( transitionalID ) ; String correlationID = outMessage . getJMSMessageID ( ) ; Object in = deferredReplyMap . get ( correlationID ) ; if ( in != null && in instanceof Message ) { Message inMessage = ( Message ) in ; if ( handler instanceof ReplyHandler ) { ReplyHandler replyHandler = ( ReplyHandler ) handler ; try { boolean complete = replyHandler . handle ( inMessage ) ; if ( complete ) { deferredReplyMap . remove ( correlationID ) ; } } catch ( JMSException e ) { throw new FailedToProcessResponse ( inMessage , e ) ; } } } else { deferredRequestMap . put ( correlationID , handler , getRequestTimeout ( ) ) ; } } catch ( JMSException e ) { throw new FailedToProcessResponse ( outMessage , e ) ; } } } protected UuidGenerator getUuidGenerator ( ) { return producer . getUuidGenerator ( ) ; } } 	0
package org . apache . camel . processor . exceptionpolicy ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . model . ExceptionType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultExceptionPolicyStrategy implements ExceptionPolicyStrategy { private static final transient Log LOG = LogFactory . getLog ( DefaultExceptionPolicyStrategy . class ) ; public ExceptionType getExceptionPolicy ( Map < Class , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finding best suited exception policy for thrown exception " + exception . getClass ( ) . getName ( ) ) ; } int targetLevel = getInheritanceLevel ( exception . getClass ( ) ) ; ExceptionType candidate = null ; int candidateDiff = Integer . MAX_VALUE ; Set < Map . Entry < Class , ExceptionType > > entries = exceptionPolicices . entrySet ( ) ; for ( Map . Entry < Class , ExceptionType > entry : entries ) { Class clazz = entry . getKey ( ) ; ExceptionType type = entry . getValue ( ) ; if ( clazz . isInstance ( exception ) ) { if ( clazz . equals ( exception . getClass ( ) ) ) { candidate = type ; break ; } int level = getInheritanceLevel ( clazz ) ; int diff = targetLevel - level ; if ( diff < candidateDiff ) { candidate = type ; candidateDiff = diff ; } } } if ( LOG . isDebugEnabled ( ) ) { if ( candidate != null ) { LOG . debug ( "Using " + candidate + " as the exception policy" ) ; } else { LOG . debug ( "No candidate found to be used as exception policy" ) ; } } return candidate ; } private static int getInheritanceLevel ( Class clazz ) { if ( clazz == null || "java.lang.Object" . equals ( clazz . getName ( ) ) ) { return 0 ; } return 1 + getInheritanceLevel ( clazz . getSuperclass ( ) ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . ByteArrayOutputStream ; import org . apache . camel . CamelContext ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class RemoteFileExchange < T extends RemoteFileBinding > extends DefaultExchange { private T binding ; public RemoteFileExchange ( CamelContext context , ExchangePattern pattern , T binding ) { super ( context , pattern ) ; this . binding = binding ; } public RemoteFileExchange ( CamelContext context , ExchangePattern pattern , T binding , String host , String fullFileName , ByteArrayOutputStream outputStream ) { this ( context , pattern , binding ) ; setIn ( new RemoteFileMessage ( host , fullFileName , outputStream ) ) ; } public T getBinding ( ) { return binding ; } public void setBinding ( T binding ) { this . binding = binding ; } } 	0
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URLDecoder ; import java . net . URLEncoder ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class URISupport { public static class CompositeData { public String host ; String scheme ; String path ; URI components [ ] ; Map parameters ; String fragment ; public URI [ ] getComponents ( ) { return components ; } public String getFragment ( ) { return fragment ; } public Map getParameters ( ) { return parameters ; } public String getScheme ( ) { return scheme ; } public String getPath ( ) { return path ; } public String getHost ( ) { return host ; } public URI toURI ( ) throws URISyntaxException { StringBuffer sb = new StringBuffer ( ) ; if ( scheme != null ) { sb . append ( scheme ) ; sb . append ( ':' ) ; } if ( host != null && host . length ( ) != 0 ) { sb . append ( host ) ; } else { sb . append ( '(' ) ; for ( int i = 0 ; i < components . length ; i ++ ) { if ( i != 0 ) { sb . append ( ',' ) ; } sb . append ( components [ i ] . toString ( ) ) ; } sb . append ( ')' ) ; } if ( path != null ) { sb . append ( '/' ) ; sb . append ( path ) ; } if ( ! parameters . isEmpty ( ) ) { sb . append ( "?" ) ; sb . append ( createQueryString ( parameters ) ) ; } if ( fragment != null ) { sb . append ( "#" ) ; sb . append ( fragment ) ; } return new URI ( sb . toString ( ) ) ; } } public static Map parseQuery ( String uri ) throws URISyntaxException { try { Map rc = new HashMap ( ) ; if ( uri != null ) { String [ ] parameters = uri . split ( "&" ) ; for ( String parameter : parameters ) { int p = parameter . indexOf ( "=" ) ; if ( p >= 0 ) { String name = URLDecoder . decode ( parameter . substring ( 0 , p ) , "UTF-8" ) ; String value = URLDecoder . decode ( parameter . substring ( p + 1 ) , "UTF-8" ) ; rc . put ( name , value ) ; } else { rc . put ( parameter , null ) ; } } } return rc ; } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static Map parseParameters ( URI uri ) throws URISyntaxException { String query = uri . getQuery ( ) ; if ( query == null ) { String schemeSpecificPart = uri . getSchemeSpecificPart ( ) ; int idx = schemeSpecificPart . lastIndexOf ( '?' ) ; if ( idx < 0 ) { return Collections . EMPTY_MAP ; } else { query = schemeSpecificPart . substring ( idx + 1 ) ; } } else { query = stripPrefix ( query , "?" ) ; } return parseQuery ( query ) ; } public static URI removeQuery ( URI uri ) throws URISyntaxException { return createURIWithQuery ( uri , null ) ; } public static URI createURIWithQuery ( URI uri , String query ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getUserInfo ( ) , uri . getHost ( ) , uri . getPort ( ) , uri . getPath ( ) , query , uri . getFragment ( ) ) ; } public static CompositeData parseComposite ( URI uri ) throws URISyntaxException { CompositeData rc = new CompositeData ( ) ; rc . scheme = uri . getScheme ( ) ; String ssp = stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) . trim ( ) ; parseComposite ( uri , rc , ssp ) ; rc . fragment = uri . getFragment ( ) ; return rc ; } private static void parseComposite ( URI uri , CompositeData rc , String ssp ) throws URISyntaxException { String componentString ; String params ; if ( ! checkParenthesis ( ssp ) ) { throw new URISyntaxException ( uri . toString ( ) , "Not a matching number of '(' and ')' parenthesis" ) ; } int p ; int intialParen = ssp . indexOf ( "(" ) ; if ( intialParen == 0 ) { rc . host = ssp . substring ( 0 , intialParen ) ; p = rc . host . indexOf ( "/" ) ; if ( p >= 0 ) { rc . path = rc . host . substring ( p ) ; rc . host = rc . host . substring ( 0 , p ) ; } p = ssp . lastIndexOf ( ")" ) ; componentString = ssp . substring ( intialParen + 1 , p ) ; params = ssp . substring ( p + 1 ) . trim ( ) ; } else { componentString = ssp ; params = "" ; } String components [ ] = splitComponents ( componentString ) ; rc . components = new URI [ components . length ] ; for ( int i = 0 ; i < components . length ; i ++ ) { rc . components [ i ] = new URI ( components [ i ] . trim ( ) ) ; } p = params . indexOf ( "?" ) ; if ( p >= 0 ) { if ( p > 0 ) { rc . path = stripPrefix ( params . substring ( 0 , p ) , "/" ) ; } rc . parameters = parseQuery ( params . substring ( p + 1 ) ) ; } else { if ( params . length ( ) > 0 ) { rc . path = stripPrefix ( params , "/" ) ; } rc . parameters = Collections . EMPTY_MAP ; } } private static String [ ] splitComponents ( String str ) { ArrayList l = new ArrayList ( ) ; int last = 0 ; int depth = 0 ; char chars [ ] = str . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { switch ( chars [ i ] ) { case '(' : depth ++ ; break ; case ')' : depth -- ; break ; case ',' : if ( depth == 0 ) { String s = str . substring ( last , i ) ; l . add ( s ) ; last = i + 1 ; } break ; default : } } String s = str . substring ( last ) ; if ( s . length ( ) != 0 ) { l . add ( s ) ; } String rc [ ] = new String [ l . size ( ) ] ; l . toArray ( rc ) ; return rc ; } public static String stripPrefix ( String value , String prefix ) { if ( value . startsWith ( prefix ) ) { return value . substring ( prefix . length ( ) ) ; } return value ; } public static URI stripScheme ( URI uri ) throws URISyntaxException { return new URI ( stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) ) ; } public static String createQueryString ( Map options ) throws URISyntaxException { try { if ( options . size ( ) > 0 ) { StringBuffer rc = new StringBuffer ( ) ; boolean first = true ; for ( Iterator iter = options . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { if ( first ) { first = false ; } else { rc . append ( "&" ) ; } String key = ( String ) iter . next ( ) ; String value = ( String ) options . get ( key ) ; rc . append ( URLEncoder . encode ( key , "UTF-8" ) ) ; rc . append ( "=" ) ; rc . append ( URLEncoder . encode ( value , "UTF-8" ) ) ; } return rc . toString ( ) ; } else { return "" ; } } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static URI createRemainingURI ( URI originalURI , Map params ) throws URISyntaxException { String s = createQueryString ( params ) ; if ( s . length ( ) == 0 ) { s = null ; } return createURIWithQuery ( originalURI , s ) ; } public static URI changeScheme ( URI bindAddr , String scheme ) throws URISyntaxException { return new URI ( scheme , bindAddr . getUserInfo ( ) , bindAddr . getHost ( ) , bindAddr . getPort ( ) , bindAddr . getPath ( ) , bindAddr . getQuery ( ) , bindAddr . getFragment ( ) ) ; } public static boolean checkParenthesis ( String str ) { boolean result = true ; if ( str != null ) { int open = 0 ; int closed = 0 ; int i = 0 ; while ( ( i = str . indexOf ( '(' , i ) ) >= 0 ) { i ++ ; open ++ ; } i = 0 ; while ( ( i = str . indexOf ( ')' , i ) ) >= 0 ) { i ++ ; closed ++ ; } result = open == closed ; } return result ; } @ Deprecated public int indexOfParenthesisMatch ( String str ) { int result = - 1 ; return result ; } } 	1
package org . apache . camel . component . uface ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . component . list . ListEndpoint ; import org . apache . camel . util . ObjectHelper ; import org . eclipse . core . databinding . observable . Realm ; import org . eclipse . core . databinding . observable . list . WritableList ; public class UFaceEndpoint extends ListEndpoint { public UFaceEndpoint ( String uri , UFaceComponent component ) { super ( uri , component ) ; } public UFaceEndpoint ( String endpointUri ) { super ( endpointUri ) ; } @ Override protected List < Exchange > createExchangeList ( ) { Realm realm = Realm . getDefault ( ) ; ObjectHelper . notNull ( realm , "DataBinding Realm" ) ; return new WritableList ( realm ) ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BatchProcessor extends ServiceSupport implements Runnable , Processor { public static final long DEFAULT_BATCH_TIMEOUT = 1000L ; public static final int DEFAULT_BATCH_SIZE = 100 ; private static final transient Log LOG = LogFactory . getLog ( BatchProcessor . class ) ; private Endpoint endpoint ; private Processor processor ; private Collection < Exchange > collection ; private long batchTimeout = DEFAULT_BATCH_TIMEOUT ; private int batchSize = DEFAULT_BATCH_SIZE ; private PollingConsumer consumer ; private ExceptionHandler exceptionHandler ; public BatchProcessor ( Endpoint endpoint , Processor processor , Collection < Exchange > collection ) { this . endpoint = endpoint ; this . processor = processor ; this . collection = collection ; } @ Override public String toString ( ) { return "BatchProcessor[to: " + processor + "]" ; } public void run ( ) { LOG . debug ( "Starting thread for " + this ) ; while ( isRunAllowed ( ) ) { try { processBatch ( ) ; } catch ( Exception e ) { getExceptionHandler ( ) . handleException ( e ) ; } } collection . clear ( ) ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public Endpoint getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } protected synchronized void processBatch ( ) throws Exception { long start = System . currentTimeMillis ( ) ; long end = start + batchTimeout ; for ( int i = 0 ; ! isBatchCompleted ( i ) ; i ++ ) { long timeout = end - System . currentTimeMillis ( ) ; if ( timeout < 0L ) { LOG . debug ( "batch timeout expired at batch index:" + i ) ; break ; } Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { LOG . debug ( "receive with timeout: " + timeout + " expired at batch index:" + i ) ; break ; } collection . add ( exchange ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finished batch size: " + batchSize + " timeout: " + batchTimeout + " so sending set: " + collection ) ; } Iterator < Exchange > iter = collection . iterator ( ) ; while ( iter . hasNext ( ) ) { Exchange exchange = iter . next ( ) ; iter . remove ( ) ; processExchange ( exchange ) ; } } protected boolean isBatchCompleted ( int index ) { return index >= batchSize ; } protected void processExchange ( Exchange exchange ) throws Exception { processor . process ( exchange ) ; } protected void doStart ( ) throws Exception { consumer = endpoint . createPollingConsumer ( ) ; ServiceHelper . startServices ( processor , consumer ) ; Thread thread = new Thread ( this , this + " Polling Thread" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( consumer , processor ) ; collection . clear ( ) ; } protected Collection < Exchange > getCollection ( ) { return collection ; } public void process ( Exchange exchange ) throws Exception { } } 	1
package org . apache . camel . component . mina ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . net . URI ; import java . nio . charset . CharacterCodingException ; import java . nio . charset . Charset ; import java . nio . charset . CharsetEncoder ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . mina . common . ByteBuffer ; import org . apache . mina . common . IoAcceptor ; import org . apache . mina . common . IoConnector ; import org . apache . mina . common . IoServiceConfig ; import org . apache . mina . common . IoSession ; import org . apache . mina . filter . LoggingFilter ; import org . apache . mina . filter . codec . ProtocolCodecFactory ; import org . apache . mina . filter . codec . ProtocolCodecFilter ; import org . apache . mina . filter . codec . ProtocolDecoder ; import org . apache . mina . filter . codec . ProtocolDecoderOutput ; import org . apache . mina . filter . codec . ProtocolEncoder ; import org . apache . mina . filter . codec . ProtocolEncoderOutput ; import org . apache . mina . filter . codec . serialization . ObjectSerializationCodecFactory ; import org . apache . mina . filter . codec . textline . TextLineCodecFactory ; import org . apache . mina . transport . socket . nio . DatagramAcceptor ; import org . apache . mina . transport . socket . nio . DatagramAcceptorConfig ; import org . apache . mina . transport . socket . nio . DatagramConnector ; import org . apache . mina . transport . socket . nio . DatagramConnectorConfig ; import org . apache . mina . transport . socket . nio . SocketAcceptor ; import org . apache . mina . transport . socket . nio . SocketAcceptorConfig ; import org . apache . mina . transport . socket . nio . SocketConnector ; import org . apache . mina . transport . socket . nio . SocketConnectorConfig ; import org . apache . mina . transport . vmpipe . VmPipeAcceptor ; import org . apache . mina . transport . vmpipe . VmPipeAddress ; import org . apache . mina . transport . vmpipe . VmPipeConnector ; public class MinaComponent extends DefaultComponent < MinaExchange > { private static final transient Log LOG = LogFactory . getLog ( MinaComponent . class ) ; private static final long DEFAULT_CONNECT_TIMEOUT = 30000 ; private CharsetEncoder encoder ; public MinaComponent ( ) { } public MinaComponent ( CamelContext context ) { super ( context ) ; } @ Override protected Endpoint < MinaExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating MinaEndpoint from uri: " + uri ) ; } URI u = new URI ( remaining ) ; String protocol = u . getScheme ( ) ; if ( protocol != null ) { if ( protocol . equals ( "tcp" ) ) { return createSocketEndpoint ( uri , u , parameters ) ; } else if ( protocol . equals ( "udp" ) || protocol . equals ( "mcast" ) || protocol . equals ( "multicast" ) ) { return createDatagramEndpoint ( uri , u , parameters ) ; } else if ( protocol . equals ( "vm" ) ) { return createVmEndpoint ( uri , u ) ; } } throw new IllegalArgumentException ( "Unrecognised MINA protocol: " + protocol + " for uri: " + uri ) ; } protected MinaEndpoint createVmEndpoint ( String uri , URI connectUri ) { IoAcceptor acceptor = new VmPipeAcceptor ( ) ; SocketAddress address = new VmPipeAddress ( connectUri . getPort ( ) ) ; IoConnector connector = new VmPipeConnector ( ) ; return new MinaEndpoint ( uri , this , address , acceptor , null , connector , null , false , 0 , false ) ; } protected MinaEndpoint createSocketEndpoint ( String uri , URI connectUri , Map parameters ) { IoAcceptor acceptor = new SocketAcceptor ( ) ; SocketAddress address = new InetSocketAddress ( connectUri . getHost ( ) , connectUri . getPort ( ) ) ; IoConnector connector = new SocketConnector ( ) ; boolean lazySessionCreation = getAndRemoveParameter ( parameters , "lazySessionCreation" , Boolean . class , false ) ; long timeout = getAndRemoveParameter ( parameters , "timeout" , Long . class , 0L ) ; boolean transferExchange = getAndRemoveParameter ( parameters , "transferExchange" , Boolean . class , false ) ; boolean sync = getAndRemoveParameter ( parameters , "sync" , Boolean . class , false ) ; boolean minaLogger = getAndRemoveParameter ( parameters , "minaLogger" , Boolean . class , false ) ; boolean textline = getAndRemoveParameter ( parameters , "textline" , Boolean . class , false ) ; String encoding = getAndRemoveParameter ( parameters , "encoding" , String . class ) ; String codec = getAndRemoveParameter ( parameters , "codec" , String . class ) ; SocketConnectorConfig connectorConfig = new SocketConnectorConfig ( ) ; configureSocketCodecFactory ( "MinaProducer" , connectorConfig , textline , encoding , codec ) ; if ( minaLogger ) { connectorConfig . getFilterChain ( ) . addLast ( "logger" , new LoggingFilter ( ) ) ; } long connectTimeout = timeout > 0 ? timeout : DEFAULT_CONNECT_TIMEOUT ; connectorConfig . setConnectTimeout ( ( int ) ( connectTimeout / 1000 ) ) ; SocketAcceptorConfig acceptorConfig = new SocketAcceptorConfig ( ) ; configureSocketCodecFactory ( "MinaConsumer" , acceptorConfig , textline , encoding , codec ) ; acceptorConfig . setReuseAddress ( true ) ; acceptorConfig . setDisconnectOnUnbind ( true ) ; if ( minaLogger ) { acceptorConfig . getFilterChain ( ) . addLast ( "logger" , new LoggingFilter ( ) ) ; } MinaEndpoint endpoint = new MinaEndpoint ( uri , this , address , acceptor , acceptorConfig , connector , connectorConfig , lazySessionCreation , timeout , transferExchange ) ; if ( sync ) { endpoint . setExchangePattern ( ExchangePattern . InOut ) ; } else { endpoint . setExchangePattern ( ExchangePattern . InOnly ) ; } return endpoint ; } protected void configureSocketCodecFactory ( String type , IoServiceConfig config , boolean textline , String encoding , String codec ) { ProtocolCodecFactory codecFactory = getCodecFactory ( type , codec ) ; if ( codecFactory == null ) { if ( textline ) { Charset charset = getEncodingParameter ( type , encoding ) ; codecFactory = new TextLineCodecFactory ( charset ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( type + ": Using TextLineCodecFactory: " + codecFactory + " using encoding: " + encoding ) ; } } else { codecFactory = new ObjectSerializationCodecFactory ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( type + ": Using ObjectSerializationCodecFactory: " + codecFactory ) ; } } } addCodecFactory ( config , codecFactory ) ; } protected MinaEndpoint createDatagramEndpoint ( String uri , URI connectUri , Map parameters ) { IoAcceptor acceptor = new DatagramAcceptor ( ) ; SocketAddress address = new InetSocketAddress ( connectUri . getHost ( ) , connectUri . getPort ( ) ) ; IoConnector connector = new DatagramConnector ( ) ; boolean lazySessionCreation = getAndRemoveParameter ( parameters , "lazySessionCreation" , Boolean . class , false ) ; long timeout = getAndRemoveParameter ( parameters , "timeout" , Long . class , 0L ) ; boolean transferExchange = false ; boolean sync = getAndRemoveParameter ( parameters , "sync" , Boolean . class , false ) ; boolean minaLogger = getAndRemoveParameter ( parameters , "minaLogger" , Boolean . class , false ) ; String encoding = getAndRemoveParameter ( parameters , "encoding" , String . class ) ; String codec = getAndRemoveParameter ( parameters , "codec" , String . class ) ; DatagramConnectorConfig connectorConfig = new DatagramConnectorConfig ( ) ; configureDataGramCodecFactory ( "MinaProducer" , connectorConfig , encoding , codec ) ; if ( minaLogger ) { connectorConfig . getFilterChain ( ) . addLast ( "logger" , new LoggingFilter ( ) ) ; } long connectTimeout = timeout > 0 ? timeout : DEFAULT_CONNECT_TIMEOUT ; connectorConfig . setConnectTimeout ( ( int ) ( connectTimeout / 1000 ) ) ; DatagramAcceptorConfig acceptorConfig = new DatagramAcceptorConfig ( ) ; configureDataGramCodecFactory ( "MinaConsumer" , acceptorConfig , encoding , codec ) ; acceptorConfig . setDisconnectOnUnbind ( true ) ; if ( minaLogger ) { acceptorConfig . getFilterChain ( ) . addLast ( "logger" , new LoggingFilter ( ) ) ; } MinaEndpoint endpoint = new MinaEndpoint ( uri , this , address , acceptor , acceptorConfig , connector , connectorConfig , lazySessionCreation , timeout , transferExchange ) ; if ( sync ) { endpoint . setExchangePattern ( ExchangePattern . InOut ) ; } else { endpoint . setExchangePattern ( ExchangePattern . InOnly ) ; } return endpoint ; } private Charset getEncodingParameter ( String type , String encoding ) { if ( encoding == null ) { encoding = Charset . defaultCharset ( ) . name ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( type + ": No encoding parameter using default charset: " + encoding ) ; } } if ( ! Charset . isSupported ( encoding ) ) { throw new IllegalArgumentException ( "The encoding: " + encoding + " is not supported" ) ; } return Charset . forName ( encoding ) ; } protected void configureDataGramCodecFactory ( String type , IoServiceConfig config , String encoding , String codec ) { ProtocolCodecFactory codecFactory = getCodecFactory ( type , codec ) ; if ( codecFactory == null ) { codecFactory = new ProtocolCodecFactory ( ) { public ProtocolEncoder getEncoder ( ) throws Exception { return new ProtocolEncoder ( ) { public void encode ( IoSession session , Object message , ProtocolEncoderOutput out ) throws Exception { ByteBuffer buf = toByteBuffer ( message ) ; buf . flip ( ) ; out . write ( buf ) ; } public void dispose ( IoSession session ) throws Exception { } } ; } public ProtocolDecoder getDecoder ( ) throws Exception { return new ProtocolDecoder ( ) { public void decode ( IoSession session , ByteBuffer in , ProtocolDecoderOutput out ) throws Exception { in . acquire ( ) ; out . write ( in ) ; } public void finishDecode ( IoSession session , ProtocolDecoderOutput out ) throws Exception { } public void dispose ( IoSession session ) throws Exception { } } ; } } ; Charset charset = getEncodingParameter ( type , encoding ) ; encoder = charset . newEncoder ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( type + ": Using CodecFactory: " + codecFactory + " using encoding: " + encoding ) ; } } addCodecFactory ( config , codecFactory ) ; } protected ByteBuffer toByteBuffer ( Object message ) throws CharacterCodingException { ByteBuffer answer = convertTo ( ByteBuffer . class , message ) ; if ( answer == null ) { String value = convertTo ( String . class , message ) ; answer = ByteBuffer . allocate ( value . length ( ) ) . setAutoExpand ( true ) ; answer . putString ( value , encoder ) ; } return answer ; } protected ProtocolCodecFactory getCodecFactory ( String type , String codec ) { ProtocolCodecFactory codecFactory = null ; if ( codec != null ) { codecFactory = getCamelContext ( ) . getRegistry ( ) . lookup ( codec , ProtocolCodecFactory . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( type + ": Using custom CodecFactory: " + codecFactory ) ; } } return codecFactory ; } protected void addCodecFactory ( IoServiceConfig config , ProtocolCodecFactory codecFactory ) { config . getFilterChain ( ) . addLast ( "codec" , new ProtocolCodecFilter ( codecFactory ) ) ; } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . BlockingQueue ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class QueueComponent extends SedaComponent { private static final transient Log LOG = LogFactory . getLog ( QueueComponent . class ) ; public QueueComponent ( ) { LOG . warn ( "This component has been deprecated; please use the seda: URI format instead of queue:" ) ; } } 	1
package org . apache . camel . spi ; public interface Registry { < T > T lookup ( String name , Class < T > type ) ; Object lookup ( String name ) ; } 	0
package org . apache . camel ; import java . util . Map ; public interface Endpoint < E extends Exchange > { boolean isSingleton ( ) ; String getEndpointUri ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( Exchange exchange ) ; CamelContext getCamelContext ( ) ; Producer < E > createProducer ( ) throws Exception ; Consumer < E > createConsumer ( Processor processor ) throws Exception ; PollingConsumer < E > createPollingConsumer ( ) throws Exception ; void configureProperties ( Map options ) ; void setCamelContext ( CamelContext context ) ; @ Deprecated CamelContext getContext ( ) ; @ Deprecated void setContext ( CamelContext context ) ; } 	1
package org . apache . camel . component . mail . security ; import java . security . cert . CertificateException ; import java . security . cert . X509Certificate ; import javax . net . ssl . X509TrustManager ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DummyTrustManager implements X509TrustManager { private static final transient Log LOG = LogFactory . getLog ( DummyTrustManager . class ) ; public void checkClientTrusted ( X509Certificate [ ] chain , String authType ) throws CertificateException { logCertificateChain ( "Client" , chain ) ; } public void checkServerTrusted ( X509Certificate [ ] chain , String authType ) throws CertificateException { logCertificateChain ( "Server" , chain ) ; } public X509Certificate [ ] getAcceptedIssuers ( ) { return new X509Certificate [ 0 ] ; } private static void logCertificateChain ( String type , X509Certificate [ ] chain ) { if ( LOG . isDebugEnabled ( ) ) { for ( X509Certificate certificate : chain ) { LOG . debug ( type + " certificate is trusted: " + certificate ) ; } } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "recipientList" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RecipientListType extends ExpressionNode { public RecipientListType ( ) { } public RecipientListType ( ExpressionType expression ) { super ( expression ) ; } public RecipientListType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "RecipientList[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "recipientList" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new RecipientList ( getExpression ( ) . createExpression ( routeContext ) ) ; } } 	1
package org . apache . camel . component . cxf . spring ; import org . springframework . beans . factory . xml . NamespaceHandlerSupport ; public class NamespaceHandler extends NamespaceHandlerSupport { public void init ( ) { registerBeanDefinitionParser ( "cxfEndpoint" , new CxfEndpointBeanDefinitionParser ( ) ) ; } } 	0
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "convertBodyTo" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ConvertBodyType extends ProcessorType < ProcessorType > { @ XmlAttribute private String type ; @ XmlTransient private Class typeClass ; public ConvertBodyType ( ) { } public ConvertBodyType ( String type ) { setType ( type ) ; } public ConvertBodyType ( Class typeClass ) { setTypeClass ( typeClass ) ; } @ Override public String toString ( ) { return "convertBodyTo[ " + getType ( ) + "]" ; } @ Override public String getShortName ( ) { return "convertBodyTo" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new ConvertBodyProcessor ( getTypeClass ( ) ) ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } protected Class createTypeClass ( ) { return ObjectHelper . loadClass ( getType ( ) , getClass ( ) . getClassLoader ( ) ) ; } public void setType ( String type ) { this . type = type ; } public String getType ( ) { return type ; } public void setTypeClass ( Class typeClass ) { this . typeClass = typeClass ; } public Class getTypeClass ( ) { if ( typeClass == null ) { setTypeClass ( createTypeClass ( ) ) ; } return typeClass ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "xpath" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class XPathExpression extends NamespaceAwareExpression { @ XmlAttribute ( required = false ) private Class resultType ; public XPathExpression ( ) { } public XPathExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "xpath" ; } public Class getResultType ( ) { return resultType ; } public void setResultType ( Class resultType ) { this . resultType = resultType ; } @ Override protected void configureExpression ( RouteContext routeContext , Expression expression ) { super . configureExpression ( routeContext , expression ) ; if ( resultType != null ) { setProperty ( expression , "resultType" , resultType ) ; } } @ Override protected void configurePredicate ( RouteContext routeContext , Predicate predicate ) { super . configurePredicate ( routeContext , predicate ) ; if ( resultType != null ) { setProperty ( predicate , "resultType" , resultType ) ; } } } 	0
package org . apache . camel ; import java . util . Map ; public interface ProducerTemplate < E extends Exchange > extends Service { E send ( E exchange ) ; E send ( Processor processor ) ; Object sendBody ( Object body ) ; Object sendBodyAndHeader ( Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) ; E send ( String endpointUri , E exchange ) ; E send ( String endpointUri , Processor processor ) ; E send ( String endpointUri , ExchangePattern pattern , Processor processor ) ; E send ( String endpointUri , Processor processor , AsyncCallback callback ) ; E send ( Endpoint < E > endpoint , E exchange ) ; E send ( Endpoint < E > endpoint , Processor processor ) ; E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) ; E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) ; Object sendBody ( Endpoint < E > endpoint , Object body ) ; Object sendBody ( String endpointUri , Object body ) ; Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) ; Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) ; Object sendBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( String endpointUri , Object body , Map < String , Object > headers ) ; Object sendBodyAndHeaders ( Endpoint endpoint , Object body , Map < String , Object > headers ) ; E request ( Endpoint < E > endpoint , Processor processor ) ; Object requestBody ( Endpoint < E > endpoint , Object body ) ; Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) ; E request ( String endpointUri , Processor processor ) ; Object requestBody ( String endpointUri , Object body ) ; Object requestBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; } 	1
package org . apache . camel . language ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . component . bean . XPathAnnotationExpressionFactory ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "xpath" , factory = XPathAnnotationExpressionFactory . class ) public @ interface XPath { String value ( ) ; NamespacePrefix [ ] namespaces ( ) default { @ NamespacePrefix ( prefix = "soap" , uri = "http://www.w3.org/2003/05/soap-envelope" ) , @ NamespacePrefix ( prefix = "xsd" , uri = "http://www.w3.org/2001/XMLSchema" ) } ; } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . FileOutputStream ; import java . io . InputStream ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( FileProducer . class ) ; private FileEndpoint endpoint ; public FileProducer ( FileEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public FileEndpoint getEndpoint ( ) { return ( FileEndpoint ) super . getEndpoint ( ) ; } public void process ( Exchange exchange ) throws Exception { FileExchange fileExchange = endpoint . createExchange ( exchange ) ; process ( fileExchange ) ; ExchangeHelper . copyResults ( exchange , fileExchange ) ; } public void process ( FileExchange exchange ) throws Exception { InputStream in = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; File file = createFileName ( exchange . getIn ( ) ) ; buildDirectory ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to: " + file + " from exchange: " + exchange ) ; } FileChannel fc = null ; try { if ( getEndpoint ( ) . isAppend ( ) ) { fc = new RandomAccessFile ( file , "rw" ) . getChannel ( ) ; fc . position ( fc . size ( ) ) ; } else { fc = new FileOutputStream ( file ) . getChannel ( ) ; } int size = getEndpoint ( ) . getBufferSize ( ) ; byte [ ] buffer = new byte [ size ] ; ByteBuffer byteBuffer = ByteBuffer . wrap ( buffer ) ; while ( true ) { int count = in . read ( buffer ) ; if ( count <= 0 ) { break ; } else if ( count < size ) { byteBuffer = ByteBuffer . wrap ( buffer , 0 , count ) ; fc . write ( byteBuffer ) ; break ; } else { fc . write ( byteBuffer ) ; byteBuffer . clear ( ) ; } } } finally { ObjectHelper . close ( in , file . getName ( ) , LOG ) ; ObjectHelper . close ( fc , file . getName ( ) , LOG ) ; } } protected File createFileName ( Message message ) { File answer ; String name = null ; if ( ! endpoint . isIgnoreFileNameHeader ( ) ) { name = message . getHeader ( FileComponent . HEADER_FILE_NAME , String . class ) ; } File endpointFile = endpoint . getFile ( ) ; if ( endpointFile . isDirectory ( ) ) { if ( name != null ) { answer = new File ( endpointFile , name ) ; if ( answer . isDirectory ( ) ) { answer = new File ( answer , endpoint . getGeneratedFileName ( message ) ) ; } } else { answer = new File ( endpointFile , endpoint . getGeneratedFileName ( message ) ) ; } } else { if ( name == null ) { answer = endpointFile ; } else { answer = new File ( endpointFile , name ) ; } } message . setHeader ( FileComponent . HEADER_FILE_NAME_PRODUCED , answer . getAbsolutePath ( ) ) ; return answer ; } private void buildDirectory ( File file ) { String dirName = file . getAbsolutePath ( ) ; int index = dirName . lastIndexOf ( File . separatorChar ) ; if ( index > 0 ) { dirName = dirName . substring ( 0 , index ) ; File dir = new File ( dirName ) ; dir . mkdirs ( ) ; } } } 	1
package org . apache . camel . builder . xml ; import java . io . StringReader ; import java . util . List ; import java . util . Map ; import javax . xml . namespace . QName ; import javax . xml . transform . dom . DOMSource ; import javax . xml . xpath . XPath ; import javax . xml . xpath . XPathConstants ; import javax . xml . xpath . XPathExpression ; import javax . xml . xpath . XPathExpressionException ; import javax . xml . xpath . XPathFactory ; import javax . xml . xpath . XPathFactoryConfigurationException ; import javax . xml . xpath . XPathFunction ; import javax . xml . xpath . XPathFunctionException ; import javax . xml . xpath . XPathFunctionResolver ; import org . w3c . dom . Document ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . xml . sax . InputSource ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . RuntimeExpressionException ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . builder . xml . Namespaces . DEFAULT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . IN_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . OUT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . isMatchingNamespaceOrEmptyNamespace ; import static org . apache . camel . converter . ObjectConverter . toBoolean ; public class XPathBuilder < E extends Exchange > implements Expression < E > , Predicate < E > , NamespaceAware { private final String text ; private XPathFactory xpathFactory ; private Class documentType = Document . class ; private Class resultType ; private QName resultQName = XPathConstants . NODESET ; private String objectModelUri ; private DefaultNamespaceContext namespaceContext ; private XPathFunctionResolver functionResolver ; private XPathExpression expression ; private MessageVariableResolver variableResolver = new MessageVariableResolver ( ) ; private E exchange ; private XPathFunction bodyFunction ; private XPathFunction headerFunction ; private XPathFunction outBodyFunction ; private XPathFunction outHeaderFunction ; public XPathBuilder ( String text ) { this . text = text ; } public static XPathBuilder xpath ( String text ) { return new XPathBuilder ( text ) ; } @ Override public String toString ( ) { return "XPath: " + text ; } public boolean matches ( E exchange ) { Object booleanResult = evaluateAs ( exchange , XPathConstants . BOOLEAN ) ; return toBoolean ( booleanResult ) ; } public void assertMatches ( String text , E exchange ) throws AssertionError { Object booleanResult = evaluateAs ( exchange , XPathConstants . BOOLEAN ) ; if ( ! toBoolean ( booleanResult ) ) { throw new AssertionError ( this + " failed on " + exchange + " as returned <" + booleanResult + ">" ) ; } } public Object evaluate ( E exchange ) { Object answer = evaluateAs ( exchange , resultQName ) ; if ( resultType != null ) { return ExchangeHelper . convertToType ( exchange , resultType , answer ) ; } return answer ; } public XPathBuilder < E > booleanResult ( ) { resultQName = XPathConstants . BOOLEAN ; return this ; } public XPathBuilder < E > nodeResult ( ) { resultQName = XPathConstants . NODE ; return this ; } public XPathBuilder < E > nodeSetResult ( ) { resultQName = XPathConstants . NODESET ; return this ; } public XPathBuilder < E > numberResult ( ) { resultQName = XPathConstants . NUMBER ; return this ; } public XPathBuilder < E > stringResult ( ) { resultQName = XPathConstants . STRING ; return this ; } public XPathBuilder < E > resultType ( Class resultType ) { setResultType ( resultType ) ; return this ; } public XPathBuilder < E > objectModel ( String uri ) { this . objectModelUri = uri ; return this ; } public XPathBuilder < E > functionResolver ( XPathFunctionResolver functionResolver ) { this . functionResolver = functionResolver ; return this ; } public XPathBuilder < E > namespace ( String prefix , String uri ) { getNamespaceContext ( ) . add ( prefix , uri ) ; return this ; } public XPathBuilder < E > namespaces ( Namespaces namespaces ) { namespaces . configure ( this ) ; return this ; } public XPathBuilder < E > variable ( String name , Object value ) { variableResolver . addVariable ( name , value ) ; return this ; } public XPathFactory getXPathFactory ( ) throws XPathFactoryConfigurationException { if ( xpathFactory == null ) { if ( objectModelUri != null ) { xpathFactory = XPathFactory . newInstance ( objectModelUri ) ; } xpathFactory = XPathFactory . newInstance ( ) ; } return xpathFactory ; } public void setXPathFactory ( XPathFactory xpathFactory ) { this . xpathFactory = xpathFactory ; } public Class getDocumentType ( ) { return documentType ; } public void setDocumentType ( Class documentType ) { this . documentType = documentType ; } public String getText ( ) { return text ; } public QName getResultQName ( ) { return resultQName ; } public void setResultQName ( QName resultQName ) { this . resultQName = resultQName ; } public DefaultNamespaceContext getNamespaceContext ( ) { if ( namespaceContext == null ) { try { DefaultNamespaceContext defaultNamespaceContext = new DefaultNamespaceContext ( getXPathFactory ( ) ) ; populateDefaultNamespaces ( defaultNamespaceContext ) ; namespaceContext = defaultNamespaceContext ; } catch ( XPathFactoryConfigurationException e ) { throw new RuntimeExpressionException ( e ) ; } } return namespaceContext ; } public void setNamespaceContext ( DefaultNamespaceContext namespaceContext ) { this . namespaceContext = namespaceContext ; } public XPathFunctionResolver getFunctionResolver ( ) { return functionResolver ; } public void setFunctionResolver ( XPathFunctionResolver functionResolver ) { this . functionResolver = functionResolver ; } public XPathExpression getExpression ( ) throws XPathFactoryConfigurationException , XPathExpressionException { if ( expression == null ) { expression = createXPathExpression ( ) ; } return expression ; } public void setNamespaces ( Map < String , String > namespaces ) { getNamespaceContext ( ) . setNamespaces ( namespaces ) ; } public XPathFunction getBodyFunction ( ) { if ( bodyFunction == null ) { bodyFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange == null ) { return null ; } return exchange . getIn ( ) . getBody ( ) ; } } ; } return bodyFunction ; } public void setBodyFunction ( XPathFunction bodyFunction ) { this . bodyFunction = bodyFunction ; } public XPathFunction getHeaderFunction ( ) { if ( headerFunction == null ) { headerFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null && ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value != null ) { return exchange . getIn ( ) . getHeader ( value . toString ( ) ) ; } } return null ; } } ; } return headerFunction ; } public void setHeaderFunction ( XPathFunction headerFunction ) { this . headerFunction = headerFunction ; } public XPathFunction getOutBodyFunction ( ) { if ( outBodyFunction == null ) { outBodyFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { return out . getBody ( ) ; } } return null ; } } ; } return outBodyFunction ; } public void setOutBodyFunction ( XPathFunction outBodyFunction ) { this . outBodyFunction = outBodyFunction ; } public XPathFunction getOutHeaderFunction ( ) { if ( outHeaderFunction == null ) { outHeaderFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null && ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value != null ) { return exchange . getOut ( ) . getHeader ( value . toString ( ) ) ; } } return null ; } } ; } return outHeaderFunction ; } public void setOutHeaderFunction ( XPathFunction outHeaderFunction ) { this . outHeaderFunction = outHeaderFunction ; } public Class getResultType ( ) { return resultType ; } public void setResultType ( Class resultType ) { this . resultType = resultType ; if ( Number . class . isAssignableFrom ( resultType ) ) { numberResult ( ) ; } else if ( String . class . isAssignableFrom ( resultType ) ) { stringResult ( ) ; } else if ( Boolean . class . isAssignableFrom ( resultType ) ) { booleanResult ( ) ; } else if ( Node . class . isAssignableFrom ( resultType ) ) { nodeResult ( ) ; } else if ( NodeList . class . isAssignableFrom ( resultType ) ) { nodeSetResult ( ) ; } } protected synchronized Object evaluateAs ( E exchange , QName resultQName ) { this . exchange = exchange ; variableResolver . setExchange ( exchange ) ; try { Object document = getDocument ( exchange ) ; if ( resultQName != null ) { if ( document instanceof InputSource ) { InputSource inputSource = ( InputSource ) document ; return getExpression ( ) . evaluate ( inputSource , resultQName ) ; } else if ( document instanceof DOMSource ) { DOMSource source = ( DOMSource ) document ; return getExpression ( ) . evaluate ( source . getNode ( ) , resultQName ) ; } else { return getExpression ( ) . evaluate ( document , resultQName ) ; } } else { if ( document instanceof InputSource ) { InputSource inputSource = ( InputSource ) document ; return getExpression ( ) . evaluate ( inputSource ) ; } else if ( document instanceof DOMSource ) { DOMSource source = ( DOMSource ) document ; return getExpression ( ) . evaluate ( source . getNode ( ) ) ; } else { return getExpression ( ) . evaluate ( document ) ; } } } catch ( XPathExpressionException e ) { throw new InvalidXPathExpression ( getText ( ) , e ) ; } catch ( XPathFactoryConfigurationException e ) { throw new InvalidXPathExpression ( getText ( ) , e ) ; } } protected XPathExpression createXPathExpression ( ) throws XPathExpressionException , XPathFactoryConfigurationException { XPath xPath = getXPathFactory ( ) . newXPath ( ) ; xpathFactory = null ; xPath . setNamespaceContext ( getNamespaceContext ( ) ) ; xPath . setXPathVariableResolver ( variableResolver ) ; XPathFunctionResolver parentResolver = getFunctionResolver ( ) ; if ( parentResolver == null ) { parentResolver = xPath . getXPathFunctionResolver ( ) ; } xPath . setXPathFunctionResolver ( createDefaultFunctionResolver ( parentResolver ) ) ; return xPath . compile ( text ) ; } protected void populateDefaultNamespaces ( DefaultNamespaceContext context ) { setNamespaceIfNotPresent ( context , "in" , IN_NAMESPACE ) ; setNamespaceIfNotPresent ( context , "out" , OUT_NAMESPACE ) ; setNamespaceIfNotPresent ( context , "env" , Namespaces . ENVIRONMENT_VARIABLES ) ; setNamespaceIfNotPresent ( context , "system" , Namespaces . SYSTEM_PROPERTIES_NAMESPACE ) ; } protected void setNamespaceIfNotPresent ( DefaultNamespaceContext context , String prefix , String uri ) { if ( context != null ) { String current = context . getNamespaceURI ( prefix ) ; if ( current == null ) { context . add ( prefix , uri ) ; } } } protected XPathFunctionResolver createDefaultFunctionResolver ( final XPathFunctionResolver parent ) { return new XPathFunctionResolver ( ) { public XPathFunction resolveFunction ( QName qName , int argumentCount ) { XPathFunction answer = null ; if ( parent != null ) { answer = parent . resolveFunction ( qName , argumentCount ) ; } if ( answer == null ) { if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , IN_NAMESPACE ) || isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , DEFAULT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "body" ) && argumentCount == 0 ) { return getBodyFunction ( ) ; } if ( localPart . equals ( "header" ) && argumentCount == 1 ) { return getHeaderFunction ( ) ; } } if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , OUT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "body" ) && argumentCount == 0 ) { return getOutBodyFunction ( ) ; } if ( localPart . equals ( "header" ) && argumentCount == 1 ) { return getOutHeaderFunction ( ) ; } } if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , DEFAULT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "out-body" ) && argumentCount == 0 ) { return getOutBodyFunction ( ) ; } if ( localPart . equals ( "out-header" ) && argumentCount == 1 ) { return getOutHeaderFunction ( ) ; } } } return answer ; } } ; } protected Object getDocument ( E exchange ) { Message in = exchange . getIn ( ) ; Class type = getDocumentType ( ) ; Object answer = null ; if ( type != null ) { answer = in . getBody ( type ) ; } if ( answer == null ) { answer = in . getBody ( ) ; } if ( answer instanceof String ) { answer = new InputSource ( new StringReader ( answer . toString ( ) ) ) ; } return answer ; } } 	0
package org . apache . camel . language . simple ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . language . IllegalSyntaxException ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class SimpleLanguage implements Language { public static Expression simple ( String expression ) { SimpleLanguage language = new SimpleLanguage ( ) ; return language . createExpression ( expression ) ; } public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { if ( expression . indexOf ( "${" ) >= 0 ) { return createComplexExpression ( expression ) ; } return createSimpleExpression ( expression ) ; } protected Expression < Exchange > createComplexExpression ( String expression ) { List < Expression > results = new ArrayList < Expression > ( ) ; int pivot = 0 ; int size = expression . length ( ) ; while ( pivot < size ) { int idx = expression . indexOf ( "${" , pivot ) ; if ( idx < 0 ) { results . add ( createConstantExpression ( expression , pivot , size ) ) ; break ; } else { if ( pivot < idx ) { results . add ( createConstantExpression ( expression , pivot , idx ) ) ; } pivot = idx + 2 ; int endIdx = expression . indexOf ( "}" , pivot ) ; if ( endIdx < 0 ) { throw new IllegalArgumentException ( "Expecting } but found end of string for simple expression: " + expression ) ; } String simpleText = expression . substring ( pivot , endIdx ) ; Expression simpleExpression = createSimpleExpression ( simpleText ) ; results . add ( simpleExpression ) ; pivot = endIdx + 1 ; } } return ExpressionBuilder . concatExpression ( results , expression ) ; } protected Expression createConstantExpression ( String expression , int start , int end ) { return ExpressionBuilder . constantExpression ( expression . substring ( start , end ) ) ; } protected Expression < Exchange > createSimpleExpression ( String expression ) { if ( ObjectHelper . isEqualToAny ( expression , "body" , "in.body" ) ) { return ExpressionBuilder . bodyExpression ( ) ; } else if ( ObjectHelper . equal ( expression , "out.body" ) ) { return ExpressionBuilder . outBodyExpression ( ) ; } String remainder = ifStartsWithReturnRemainder ( "in.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "header." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "headers." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "in.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . headerExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "out.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "out.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . outHeaderExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "property." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "sys." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } throw new IllegalSyntaxException ( this , expression ) ; } protected String ifStartsWithReturnRemainder ( String prefix , String text ) { if ( text . startsWith ( prefix ) ) { String remainder = text . substring ( prefix . length ( ) ) ; if ( remainder . length ( ) > 0 ) { return remainder ; } } return null ; } } 	1
package org . apache . camel . management ; import java . io . IOException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedOperation ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "Managed Route" , currencyTimeLimit = 15 ) public class ManagedRoute extends PerformanceCounter { public static final String VALUE_UNKNOWN = "Unknown" ; private Route < ? extends Exchange > route ; private String description ; ManagedRoute ( Route < ? extends Exchange > route ) { this . route = route ; this . description = route . toString ( ) ; } public Route < ? extends Exchange > getRoute ( ) { return route ; } @ ManagedAttribute ( description = "Route Endpoint Uri" ) public String getEndpointUri ( ) { Endpoint < ? extends Exchange > ep = route . getEndpoint ( ) ; return ep != null ? ep . getEndpointUri ( ) : VALUE_UNKNOWN ; } @ ManagedAttribute ( description = "Route description" ) public String getDescription ( ) { return description ; } @ ManagedOperation ( description = "Start Route" ) public void start ( ) throws IOException { throw new IOException ( "Not supported" ) ; } @ ManagedOperation ( description = "Stop Route" ) public void stop ( ) throws IOException { throw new IOException ( "Not supported" ) ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; public interface FileProcessStrategy { boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; } 	1
package org . apache . camel . component . http ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class HttpConsumer extends DefaultConsumer < HttpExchange > { private final HttpEndpoint endpoint ; public HttpConsumer ( HttpEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override public HttpEndpoint getEndpoint ( ) { return ( HttpEndpoint ) super . getEndpoint ( ) ; } public HttpBinding getBinding ( ) { return endpoint . getBinding ( ) ; } public String getPath ( ) { return endpoint . getPath ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; endpoint . connect ( this ) ; } @ Override protected void doStop ( ) throws Exception { endpoint . disconnect ( this ) ; super . doStop ( ) ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . MBeanServer ; import javax . management . Notification ; import javax . management . ObjectName ; import javax . management . monitor . CounterMonitor ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JMXEndpoint extends DefaultEndpoint < JMXExchange > { private static final transient Log LOG = LogFactory . getLog ( JMXEndpoint . class ) ; private String name ; private ObjectName ourName ; private String observedObjectName ; private String attributeName ; private long granularityPeriod = 5000 ; private Number threshold ; private Number offset ; private MBeanServer mbeanServer ; private CounterMonitor counterMonitor = new CounterMonitor ( ) ; protected JMXEndpoint ( String endpointUri , JMXComponent component ) { super ( endpointUri , component ) ; observedObjectName = endpointUri ; } public JMXEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < JMXExchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "Producer not supported" ) ; } public Consumer < JMXExchange > createConsumer ( Processor proc ) throws Exception { ObjectName observedName = new ObjectName ( observedObjectName ) ; if ( name == null ) { String type = observedName . getKeyProperty ( "type" ) ; type = type != null ? type : "UNKNOWN" ; name = mbeanServer . getDefaultDomain ( ) + ":type=CounterMonitor_" + type ; } JMXConsumer result = new JMXConsumer ( this , proc ) ; ourName = new ObjectName ( name ) ; counterMonitor . setNotify ( true ) ; counterMonitor . addObservedObject ( observedName ) ; counterMonitor . setObservedAttribute ( attributeName ) ; counterMonitor . setGranularityPeriod ( granularityPeriod ) ; counterMonitor . setDifferenceMode ( false ) ; counterMonitor . setInitThreshold ( threshold ) ; counterMonitor . setOffset ( offset ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Registering and adding notification listener for [" + counterMonitor + "] with name [" + ourName + "]" ) ; } mbeanServer . registerMBean ( counterMonitor , ourName ) ; mbeanServer . addNotificationListener ( ourName , result , null , new Object ( ) ) ; return result ; } public boolean isSingleton ( ) { return true ; } public JMXExchange createExchange ( Notification notification ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , notification ) ; } public JMXExchange createExchange ( ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , null ) ; } public JMXExchange createExchange ( ExchangePattern pattern ) { return new JMXExchange ( getCamelContext ( ) , pattern , null ) ; } public String getAttributeName ( ) { return attributeName ; } public void setAttributeName ( String attributeName ) { this . attributeName = attributeName ; } public long getGranularityPeriod ( ) { return granularityPeriod ; } public void setGranularityPeriod ( long granularityPeriod ) { this . granularityPeriod = granularityPeriod ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Number getOffset ( ) { return offset ; } public void setOffset ( Number offset ) { this . offset = offset ; } public Number getThreshold ( ) { return threshold ; } public void setThreshold ( Number threshold ) { this . threshold = threshold ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	1
package org . apache . camel . component . spring . integration ; import org . apache . camel . CamelContext ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . integration . channel . MessageChannel ; public class SpringIntegrationEndpoint extends ScheduledPollEndpoint < SpringIntegrationExchange > { private static final Log LOG = LogFactory . getLog ( SpringIntegrationEndpoint . class ) ; private String inputChannel ; private String outputChannel ; private String defaultChannel ; private MessageChannel messageChannel ; private boolean inOut ; public SpringIntegrationEndpoint ( String uri , String channel , SpringIntegrationComponent component ) { super ( uri , component ) ; defaultChannel = channel ; } public SpringIntegrationEndpoint ( String uri , MessageChannel channel , CamelContext context ) { super ( uri , context ) ; messageChannel = channel ; } public SpringIntegrationEndpoint ( String endpointUri , MessageChannel messageChannel ) { super ( endpointUri ) ; this . messageChannel = messageChannel ; } public Producer < SpringIntegrationExchange > createProducer ( ) throws Exception { return new SpringIntegrationProducer ( this ) ; } public Consumer < SpringIntegrationExchange > createConsumer ( Processor processor ) throws Exception { return new SpringIntegrationConsumer ( this , processor ) ; } public SpringIntegrationExchange createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public SpringIntegrationExchange createExchange ( ExchangePattern pattern ) { return new SpringIntegrationExchange ( getCamelContext ( ) , pattern ) ; } public void setInputChannel ( String input ) { inputChannel = input ; } public String getInputChannel ( ) { return inputChannel ; } public void setOutputChannel ( String output ) { outputChannel = output ; } public String getOutputChannel ( ) { return outputChannel ; } public String getDefaultChannel ( ) { return defaultChannel ; } public MessageChannel getMessageChannel ( ) { return messageChannel ; } public boolean isSingleton ( ) { return false ; } public void setInOut ( boolean inOut ) { this . inOut = inOut ; } public boolean isInOut ( ) { return this . inOut ; } } 	0
package org . apache . camel ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . Callable ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; public interface CamelContext extends Service { String getName ( ) ; void addComponent ( String componentName , Component component ) ; Component getComponent ( String componentName ) ; < T extends Component > T getComponent ( String name , Class < T > componentType ) ; Component removeComponent ( String componentName ) ; Component getOrCreateComponent ( String componentName , Callable < Component > factory ) ; Endpoint getEndpoint ( String uri ) ; < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) ; Collection < Endpoint > getSingletonEndpoints ( ) ; Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception ; Endpoint removeSingletonEndpoint ( String uri ) throws Exception ; List < RouteType > getRouteDefinitions ( ) ; List < Route > getRoutes ( ) ; void setRoutes ( List < Route > routes ) ; void addRoutes ( Collection < Route > routes ) throws Exception ; void addRoutes ( Routes builder ) throws Exception ; void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception ; ExchangeConverter getExchangeConverter ( ) ; TypeConverter getTypeConverter ( ) ; Registry getRegistry ( ) ; Injector getInjector ( ) ; LifecycleStrategy getLifecycleStrategy ( ) ; Language resolveLanguage ( String language ) ; < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; } 	1
package org . apache . camel . builder . script ; import java . io . File ; import java . io . IOException ; import java . io . InputStreamReader ; import java . net . URL ; import javax . script . Compilable ; import javax . script . CompiledScript ; import javax . script . ScriptContext ; import javax . script . ScriptEngine ; import javax . script . ScriptEngineManager ; import javax . script . ScriptException ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . converter . ObjectConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . io . FileSystemResource ; import org . springframework . core . io . Resource ; import org . springframework . core . io . UrlResource ; public class ScriptBuilder < E extends Exchange > implements Expression < E > , Predicate < E > , Processor { private static final transient Log LOG = LogFactory . getLog ( ScriptBuilder . class ) ; private String scriptEngineName ; private Resource scriptResource ; private String scriptText ; private ScriptEngine engine ; private CompiledScript compiledScript ; public ScriptBuilder ( String scriptEngineName ) { this . scriptEngineName = scriptEngineName ; } public ScriptBuilder ( String scriptEngineName , String scriptText ) { this ( scriptEngineName ) ; this . scriptText = scriptText ; } public ScriptBuilder ( String scriptEngineName , Resource scriptResource ) { this ( scriptEngineName ) ; this . scriptResource = scriptResource ; } @ Override public String toString ( ) { return getScriptDescription ( ) ; } public Object evaluate ( E exchange ) { return evaluateScript ( exchange ) ; } public boolean matches ( E exchange ) { Object scriptValue = evaluateScript ( exchange ) ; return matches ( exchange , scriptValue ) ; } public void assertMatches ( String text , E exchange ) throws AssertionError { Object scriptValue = evaluateScript ( exchange ) ; if ( ! matches ( exchange , scriptValue ) ) { throw new AssertionError ( this + " failed on " + exchange + " as script returned <" + scriptValue + ">" ) ; } } public void process ( Exchange exchange ) { evaluateScript ( exchange ) ; } public ScriptBuilder attribute ( String name , Object value ) { getScriptContext ( ) . setAttribute ( name , value , ScriptContext . ENGINE_SCOPE ) ; return this ; } public static ScriptBuilder script ( String language , String scriptText ) { return new ScriptBuilder ( language , scriptText ) ; } public static ScriptBuilder script ( String language , Resource scriptResource ) { return new ScriptBuilder ( language , scriptResource ) ; } public static ScriptBuilder script ( String language , File scriptFile ) { return new ScriptBuilder ( language , new FileSystemResource ( scriptFile ) ) ; } public static ScriptBuilder script ( String language , URL scriptURL ) { return new ScriptBuilder ( language , new UrlResource ( scriptURL ) ) ; } public static ScriptBuilder groovy ( String scriptText ) { return new ScriptBuilder ( "groovy" , scriptText ) ; } public static ScriptBuilder groovy ( Resource scriptResource ) { return new ScriptBuilder ( "groovy" , scriptResource ) ; } public static ScriptBuilder groovy ( File scriptFile ) { return new ScriptBuilder ( "groovy" , new FileSystemResource ( scriptFile ) ) ; } public static ScriptBuilder groovy ( URL scriptURL ) { return new ScriptBuilder ( "groovy" , new UrlResource ( scriptURL ) ) ; } public static ScriptBuilder javaScript ( String scriptText ) { return new ScriptBuilder ( "js" , scriptText ) ; } public static ScriptBuilder javaScript ( Resource scriptResource ) { return new ScriptBuilder ( "js" , scriptResource ) ; } public static ScriptBuilder javaScript ( File scriptFile ) { return new ScriptBuilder ( "js" , new FileSystemResource ( scriptFile ) ) ; } public static ScriptBuilder javaScript ( URL scriptURL ) { return new ScriptBuilder ( "js" , new UrlResource ( scriptURL ) ) ; } public static ScriptBuilder php ( String scriptText ) { return new ScriptBuilder ( "php" , scriptText ) ; } public static ScriptBuilder php ( Resource scriptResource ) { return new ScriptBuilder ( "php" , scriptResource ) ; } public static ScriptBuilder php ( File scriptFile ) { return new ScriptBuilder ( "php" , new FileSystemResource ( scriptFile ) ) ; } public static ScriptBuilder php ( URL scriptURL ) { return new ScriptBuilder ( "php" , new UrlResource ( scriptURL ) ) ; } public static ScriptBuilder python ( String scriptText ) { return new ScriptBuilder ( "python" , scriptText ) ; } public static ScriptBuilder python ( Resource scriptResource ) { return new ScriptBuilder ( "python" , scriptResource ) ; } public static ScriptBuilder python ( File scriptFile ) { return new ScriptBuilder ( "python" , new FileSystemResource ( scriptFile ) ) ; } public static ScriptBuilder python ( URL scriptURL ) { return new ScriptBuilder ( "python" , new UrlResource ( scriptURL ) ) ; } public static ScriptBuilder ruby ( String scriptText ) { return new ScriptBuilder ( "jruby" , scriptText ) ; } public static ScriptBuilder ruby ( Resource scriptResource ) { return new ScriptBuilder ( "jruby" , scriptResource ) ; } public static ScriptBuilder ruby ( File scriptFile ) { return new ScriptBuilder ( "jruby" , new FileSystemResource ( scriptFile ) ) ; } public static ScriptBuilder ruby ( URL scriptURL ) { return new ScriptBuilder ( "jruby" , new UrlResource ( scriptURL ) ) ; } public ScriptEngine getEngine ( ) { checkInitialised ( ) ; if ( engine == null ) { throw new IllegalArgumentException ( "No script engine could be created for: " + getScriptEngineName ( ) ) ; } return engine ; } public CompiledScript getCompiledScript ( ) { return compiledScript ; } public String getScriptText ( ) { return scriptText ; } public void setScriptText ( String scriptText ) { this . scriptText = scriptText ; } public String getScriptEngineName ( ) { return scriptEngineName ; } public String getScriptDescription ( ) { if ( scriptText != null ) { return scriptEngineName + ": " + scriptText ; } else if ( scriptResource != null ) { return scriptEngineName + ": " + scriptResource . getDescription ( ) ; } else { return scriptEngineName + ": null script" ; } } public ScriptContext getScriptContext ( ) { return getEngine ( ) . getContext ( ) ; } public void setScriptContext ( ScriptContext scriptContext ) { getEngine ( ) . setContext ( scriptContext ) ; } public Resource getScriptResource ( ) { return scriptResource ; } public void setScriptResource ( Resource scriptResource ) { this . scriptResource = scriptResource ; } protected void checkInitialised ( ) { if ( scriptText == null && scriptResource == null ) { throw new IllegalArgumentException ( "Neither scriptText or scriptResource are specified" ) ; } if ( engine == null ) { engine = createScriptEngine ( ) ; } if ( compiledScript == null ) { if ( engine instanceof Compilable ) { compileScript ( ( Compilable ) engine ) ; } } } protected boolean matches ( E exchange , Object scriptValue ) { return ObjectConverter . toBool ( scriptValue ) ; } protected ScriptEngine createScriptEngine ( ) { ScriptEngineManager manager = new ScriptEngineManager ( ) ; ScriptEngine engine = manager . getEngineByName ( scriptEngineName ) ; if ( isPython ( ) ) { ScriptContext context = engine . getContext ( ) ; context . setAttribute ( "com.sun.script.jython.comp.mode" , "eval" , ScriptContext . ENGINE_SCOPE ) ; } return engine ; } protected void compileScript ( Compilable compilable ) { try { if ( scriptText != null ) { compiledScript = compilable . compile ( scriptText ) ; } else if ( scriptResource != null ) { compiledScript = compilable . compile ( createScriptReader ( ) ) ; } } catch ( ScriptException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Script compile failed: " + e , e ) ; } throw createScriptCompileException ( e ) ; } catch ( IOException e ) { throw createScriptCompileException ( e ) ; } } protected synchronized Object evaluateScript ( Exchange exchange ) { try { getScriptContext ( ) ; populateBindings ( getEngine ( ) , exchange ) ; Object result = runScript ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "The script evaluation result is: " + result ) ; } return result ; } catch ( ScriptException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Script evaluation failed: " + e , e ) ; } throw createScriptEvaluationException ( e . getCause ( ) ) ; } catch ( IOException e ) { throw createScriptEvaluationException ( e ) ; } } protected Object runScript ( ) throws ScriptException , IOException { checkInitialised ( ) ; Object result = null ; if ( compiledScript != null ) { result = compiledScript . eval ( ) ; } else { if ( scriptText != null ) { result = getEngine ( ) . eval ( scriptText ) ; } else { result = getEngine ( ) . eval ( createScriptReader ( ) ) ; } } return result ; } protected void populateBindings ( ScriptEngine engine , Exchange exchange ) { ScriptContext context = engine . getContext ( ) ; int scope = ScriptContext . ENGINE_SCOPE ; context . setAttribute ( "context" , exchange . getContext ( ) , scope ) ; context . setAttribute ( "exchange" , exchange , scope ) ; context . setAttribute ( "request" , exchange . getIn ( ) , scope ) ; context . setAttribute ( "response" , exchange . getOut ( ) , scope ) ; } protected InputStreamReader createScriptReader ( ) throws IOException { return new InputStreamReader ( scriptResource . getInputStream ( ) ) ; } protected ScriptEvaluationException createScriptCompileException ( Exception e ) { return new ScriptEvaluationException ( "Failed to compile: " + getScriptDescription ( ) + ". Cause: " + e , e ) ; } protected ScriptEvaluationException createScriptEvaluationException ( Throwable e ) { if ( e . getClass ( ) . getName ( ) . equals ( "org.jruby.exceptions.RaiseException" ) ) { try { Object ex = e . getClass ( ) . getMethod ( "getException" ) . invoke ( e ) ; return new ScriptEvaluationException ( "Failed to evaluate: " + getScriptDescription ( ) + ".  Error: " + ex + ". Cause: " + e , e ) ; } catch ( Exception e1 ) { } } return new ScriptEvaluationException ( "Failed to evaluate: " + getScriptDescription ( ) + ". Cause: " + e , e ) ; } protected boolean isPython ( ) { return "python" . equals ( scriptEngineName ) || "jython" . equals ( scriptEngineName ) ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . RejectedExecutionException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannel extends ErrorHandlerSupport implements AsyncProcessor { public static final String REDELIVERY_COUNTER = "org.apache.camel.RedeliveryCounter" ; public static final String REDELIVERED = "org.apache.camel.Redelivered" ; public static final String EXCEPTION_CAUSE_PROPERTY = "CamelCauseException" ; private class RedeliveryData { int redeliveryCounter ; long redeliveryDelay ; boolean sync = true ; RedeliveryPolicy currentRedeliveryPolicy = redeliveryPolicy ; Processor failureProcessor = deadLetter ; } private static final transient Log LOG = LogFactory . getLog ( DeadLetterChannel . class ) ; private static final String FAILURE_HANDLED_PROPERTY = DeadLetterChannel . class . getName ( ) + ".FAILURE_HANDLED" ; private Processor output ; private Processor deadLetter ; private AsyncProcessor outputAsync ; private RedeliveryPolicy redeliveryPolicy ; private Logger logger ; public DeadLetterChannel ( Processor output , Processor deadLetter ) { this ( output , deadLetter , new RedeliveryPolicy ( ) , DeadLetterChannel . createDefaultLogger ( ) , ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ) ; } public DeadLetterChannel ( Processor output , Processor deadLetter , RedeliveryPolicy redeliveryPolicy , Logger logger , ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . deadLetter = deadLetter ; this . output = output ; this . outputAsync = AsyncProcessorTypeConverter . convert ( output ) ; this . redeliveryPolicy = redeliveryPolicy ; this . logger = logger ; setExceptionPolicy ( exceptionPolicyStrategy ) ; } public static < E extends Exchange > Logger createDefaultLogger ( ) { return new Logger ( LOG , LoggingLevel . ERROR ) ; } @ Override public String toString ( ) { return "DeadLetterChannel[" + output + ", " + deadLetter + ", " + redeliveryPolicy + "]" ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { return process ( exchange , callback , new RedeliveryData ( ) ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { while ( true ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return data . sync ; } if ( exchange . isTransacted ( ) && exchange . getException ( ) != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Transacted Exchange, this DeadLetterChannel is bypassed: " + exchange ) ; } return data . sync ; } if ( exchange . getException ( ) != null ) { Throwable e = exchange . getException ( ) ; exchange . setException ( null ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". On delivery attempt: " + data . redeliveryCounter + " caught: " + e , e ) ; data . redeliveryCounter = incrementRedeliveryCounter ( exchange , e ) ; ExceptionType exceptionPolicy = getExceptionPolicy ( exchange , e ) ; if ( exceptionPolicy != null ) { data . currentRedeliveryPolicy = exceptionPolicy . createRedeliveryPolicy ( data . currentRedeliveryPolicy ) ; Processor processor = exceptionPolicy . getErrorHandler ( ) ; if ( processor != null ) { data . failureProcessor = processor ; } } } if ( ! data . currentRedeliveryPolicy . shouldRedeliver ( data . redeliveryCounter ) ) { setFailureHandled ( exchange , true ) ; AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( data . failureProcessor ) ; boolean sync = afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { restoreExceptionOnExchange ( exchange ) ; callback . done ( data . sync ) ; } } ) ; restoreExceptionOnExchange ( exchange ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". Handled by the failure processor: " + data . failureProcessor ) ; return sync ; } if ( data . redeliveryCounter > 0 ) { data . redeliveryDelay = data . currentRedeliveryPolicy . sleep ( data . redeliveryDelay ) ; } exchange . setProperty ( EXCEPTION_CAUSE_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; boolean sync = outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null ) { process ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; if ( ! sync ) { return false ; } if ( exchange . getException ( ) == null || isFailureHandled ( exchange ) ) { callback . done ( true ) ; return true ; } } } public static boolean isFailureHandled ( Exchange exchange ) { return exchange . getProperty ( FAILURE_HANDLED_PROPERTY ) != null ; } public static void setFailureHandled ( Exchange exchange , boolean isHandled ) { if ( isHandled ) { exchange . setProperty ( FAILURE_HANDLED_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; } else { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; exchange . removeProperty ( FAILURE_HANDLED_PROPERTY ) ; } } public static void restoreExceptionOnExchange ( Exchange exchange ) { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public Processor getOutput ( ) { return output ; } public Processor getDeadLetter ( ) { return deadLetter ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } protected int incrementRedeliveryCounter ( Exchange exchange , Throwable e ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; int next = 1 ; if ( counter != null ) { next = counter + 1 ; } in . setHeader ( REDELIVERY_COUNTER , next ) ; in . setHeader ( REDELIVERED , Boolean . TRUE ) ; exchange . setException ( e ) ; return next ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output , deadLetter ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( deadLetter , output ) ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . ResourceBundle ; import java . util . logging . Logger ; import org . apache . cxf . binding . soap . SoapMessage ; import org . apache . cxf . binding . soap . interceptor . CheckFaultInterceptor ; import org . apache . cxf . binding . soap . interceptor . SoapActionInInterceptor ; import org . apache . cxf . common . i18n . BundleUtils ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . XMLMessage ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . phase . Phase ; public class DOMInInterceptor extends AbstractPhaseInterceptor < Message > { private static final Logger LOG = LogUtils . getL7dLogger ( DOMOutInterceptor . class ) ; private final XMLMessageInInterceptor xmlInterceptor = new XMLMessageInInterceptor ( ) ; private final SoapMessageInInterceptor soapInterceptor = new SoapMessageInInterceptor ( ) ; public DOMInInterceptor ( ) { super ( Phase . POST_PROTOCOL ) ; this . addAfter ( CheckFaultInterceptor . class . getName ( ) ) ; } public boolean isRequestor ( Message message ) { return Boolean . TRUE . equals ( message . get ( Message . REQUESTOR_ROLE ) ) ; } public void handleMessage ( Message message ) throws Fault { if ( message instanceof XMLMessage ) { xmlInterceptor . handleMessage ( ( XMLMessage ) message ) ; } else if ( message instanceof SoapMessage ) { soapInterceptor . handleMessage ( ( SoapMessage ) message ) ; } else { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "NOT_SUPPORTED_MESSAGE" , LOG , message . getClass ( ) . getName ( ) ) ) ; } } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "onException" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExceptionType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElement ( name = "redeliveryPolicy" , required = false ) private RedeliveryPolicyType redeliveryPolicy ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; @ XmlTransient private Processor errorHandler ; public ExceptionType ( ) { } public ExceptionType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public ExceptionType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Exception[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { if ( redeliveryPolicy != null ) { return redeliveryPolicy . createRedeliveryPolicy ( parentPolicy ) ; } else if ( errorHandler != null ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; answer . setMaximumRedeliveries ( 0 ) ; return answer ; } return parentPolicy ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { errorHandler = routeContext . createProcessor ( this ) ; ErrorHandlerBuilder builder = routeContext . getRoute ( ) . getErrorHandlerBuilder ( ) ; builder . addErrorHandlers ( this ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public ExceptionType backOffMultiplier ( double backOffMultiplier ) { getOrCreateRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public ExceptionType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public ExceptionType collisionAvoidancePercent ( short collisionAvoidancePercent ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public ExceptionType initialRedeliveryDelay ( long initialRedeliveryDelay ) { getOrCreateRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public ExceptionType maximumRedeliveries ( int maximumRedeliveries ) { getOrCreateRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public ExceptionType useCollisionAvoidance ( ) { getOrCreateRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public ExceptionType useExponentialBackOff ( ) { getOrCreateRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } public Processor getErrorHandler ( ) { return errorHandler ; } public RedeliveryPolicyType getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicyType redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } protected RedeliveryPolicyType getOrCreateRedeliveryPolicy ( ) { if ( redeliveryPolicy == null ) { redeliveryPolicy = new RedeliveryPolicyType ( ) ; } return redeliveryPolicy ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "js" ) public @ interface JavaScript { String value ( ) ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultExchangeFormatter ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . processor . interceptor . TraceInterceptor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Logger implements Processor { private Log log ; private LoggingLevel level ; private ExchangeFormatter formatter = DefaultExchangeFormatter . getInstance ( ) ; public Logger ( ) { this ( LogFactory . getLog ( Logger . class ) ) ; } public Logger ( Log log ) { this ( log , LoggingLevel . INFO ) ; } public Logger ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public Logger ( String logName ) { this ( LogFactory . getLog ( logName ) ) ; } public Logger ( String logName , LoggingLevel level ) { this ( LogFactory . getLog ( logName ) , level ) ; } public Logger ( Log log , ExchangeFormatter formatter ) { this ( log ) ; this . formatter = formatter ; } @ Override public String toString ( ) { return "Logger[" + log + "]" ; } public void process ( Exchange exchange ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void process ( Exchange exchange , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void log ( String message ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message ) ; } } public void log ( String message , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message , exception ) ; } } protected Object logMessage ( Exchange exchange ) { return formatter . format ( exchange ) ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public void setFormatter ( ExchangeFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . converter . xmlbeans ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . Reader ; import java . nio . ByteBuffer ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . Source ; import javax . xml . transform . TransformerException ; import org . w3c . dom . Document ; import org . w3c . dom . Node ; import org . xml . sax . SAXException ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . NIOConverter ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . xmlbeans . XmlException ; import org . apache . xmlbeans . XmlObject ; import org . apache . xmlbeans . impl . piccolo . xml . XMLStreamReader ; @ Converter public class XmlBeansConverter { private XmlConverter xmlConverter = new XmlConverter ( ) ; @ Converter public static XmlObject toXmlObject ( File value ) throws IOException , XmlException { return XmlObject . Factory . parse ( value ) ; } @ Converter public static XmlObject toXmlObject ( Reader value ) throws IOException , XmlException { return XmlObject . Factory . parse ( value ) ; } @ Converter public static XmlObject toXmlObject ( Node value ) throws IOException , XmlException { return XmlObject . Factory . parse ( value ) ; } @ Converter public static XmlObject toXmlObject ( InputStream value ) throws IOException , XmlException { return XmlObject . Factory . parse ( value ) ; } @ Converter public static XmlObject toXmlObject ( String value ) throws IOException , XmlException { return toXmlObject ( IOConverter . toInputStream ( value ) ) ; } @ Converter public static XmlObject toXmlObject ( byte [ ] value ) throws IOException , XmlException { return toXmlObject ( IOConverter . toInputStream ( value ) ) ; } @ Converter public static XmlObject toXmlObject ( ByteBuffer value ) throws IOException , XmlException { return toXmlObject ( NIOConverter . toInputStream ( value ) ) ; } @ Converter public static XmlObject toXmlObject ( XMLStreamReader value ) throws IOException , XmlException { return XmlObject . Factory . parse ( value ) ; } @ Converter public XmlObject toXmlObject ( Source value ) throws IOException , XmlException , TransformerException , ParserConfigurationException , SAXException { Document document = getXmlConverter ( ) . toDOMDocument ( value ) ; return toXmlObject ( document ) ; } public XmlConverter getXmlConverter ( ) { return xmlConverter ; } public void setXmlConverter ( XmlConverter xmlConverter ) { this . xmlConverter = xmlConverter ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TransformProcessor extends DelegateProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( TransformProcessor . class ) ; private Expression expression ; public TransformProcessor ( Expression expression ) { this . expression = expression ; } public TransformProcessor ( Expression expression , Processor childProcessor ) { super ( childProcessor ) ; this . expression = expression ; } public void process ( Exchange exchange ) throws Exception { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; exchange . getOut ( ) . getHeaders ( ) . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; super . process ( exchange ) ; } @ Override public String toString ( ) { return "transform(" + expression + ")" ; } } 	1
package org . apache . camel . component . quartz ; import org . quartz . Job ; import org . quartz . JobExecutionContext ; import org . quartz . JobExecutionException ; public class CamelJob implements Job { public void execute ( JobExecutionContext context ) throws JobExecutionException { QuartzEndpoint component = ( QuartzEndpoint ) context . getJobDetail ( ) . getJobDataMap ( ) . get ( QuartzEndpoint . ENDPOINT_KEY ) ; if ( component == null ) { throw new JobExecutionException ( "No quartz endpoint available for key: " + QuartzEndpoint . ENDPOINT_KEY + ". Bad job data map" ) ; } component . onJobExecute ( context ) ; } } 	0
package org . apache . camel . processor ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . TreeSet ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ExpressionListComparator ; public class Resequencer extends BatchProcessor { public Resequencer ( Endpoint endpoint , Processor processor , Expression < Exchange > expression ) { this ( endpoint , processor , createSet ( expression ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , List < Expression > expressions ) { this ( endpoint , processor , createSet ( expressions ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , Set < Exchange > collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Resequencer[to: " + getProcessor ( ) + "]" ; } protected static Set < Exchange > createSet ( Expression < Exchange > expression ) { return createSet ( new ExpressionComparator < Exchange > ( expression ) ) ; } protected static Set < Exchange > createSet ( List < Expression > expressions ) { if ( expressions . size ( ) == 1 ) { return createSet ( expressions . get ( 0 ) ) ; } return createSet ( new ExpressionListComparator ( expressions ) ) ; } protected static Set < Exchange > createSet ( Comparator < ? super Exchange > comparator ) { return new TreeSet < Exchange > ( comparator ) ; } } 	1
package org . apache . camel . component . stream ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . net . URL ; import java . net . URLConnection ; import java . nio . charset . Charset ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class StreamProducer extends DefaultProducer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( StreamProducer . class ) ; private static final String TYPES = "out,err,file,header,url" ; private static final String INVALID_URI = "Invalid uri, valid form: 'stream:{" + TYPES + "}'" ; private static final List < String > TYPES_LIST = Arrays . asList ( TYPES . split ( "," ) ) ; private OutputStream outputStream = System . out ; private StreamEndpoint endpoint ; private String uri ; public StreamProducer ( StreamEndpoint endpoint , String uri ) throws Exception { super ( endpoint ) ; this . endpoint = endpoint ; validateUri ( uri ) ; } @ Override public void doStop ( ) throws Exception { super . doStop ( ) ; } public void process ( Exchange exchange ) throws Exception { delay ( endpoint . getDelay ( ) ) ; if ( "out" . equals ( uri ) ) { outputStream = System . out ; } else if ( "err" . equals ( uri ) ) { outputStream = System . err ; } else if ( "file" . equals ( uri ) ) { outputStream = resolveStreamFromFile ( ) ; } else if ( "header" . equals ( uri ) ) { outputStream = resolveStreamFromHeader ( exchange . getIn ( ) . getHeader ( "stream" ) , exchange ) ; } else if ( "url" . equals ( uri ) ) { outputStream = resolveStreamFromUrl ( ) ; } writeToStream ( exchange ) ; } private OutputStream resolveStreamFromUrl ( ) throws IOException { String u = endpoint . getUrl ( ) ; URL url = new URL ( u ) ; URLConnection c = url . openConnection ( ) ; return c . getOutputStream ( ) ; } private OutputStream resolveStreamFromFile ( ) throws IOException { String fileName = endpoint . getFile ( ) != null ? endpoint . getFile ( ) . trim ( ) : "_file" ; File f = new File ( fileName ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to file: " + f ) ; } f . createNewFile ( ) ; return new FileOutputStream ( f ) ; } private OutputStream resolveStreamFromHeader ( Object o , Exchange exchange ) throws CamelExchangeException { if ( o != null && o instanceof OutputStream ) { return ( OutputStream ) o ; } else { throw new CamelExchangeException ( "Expected OutputStream in header('stream'), found: " + o , exchange ) ; } } private void delay ( long ms ) throws InterruptedException { if ( ms == 0 ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Delaying " + ms + " millis" ) ; } Thread . sleep ( ms ) ; } private void writeToStream ( Exchange exchange ) throws IOException , CamelExchangeException { Object body = exchange . getIn ( ) . getBody ( ) ; if ( body instanceof String ) { Charset charset = endpoint . getCharset ( ) ; Writer writer = new OutputStreamWriter ( outputStream , charset ) ; BufferedWriter bw = new BufferedWriter ( writer ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Writing as text: " + body + " to " + outputStream + " using encoding:" + charset ) ; } bw . write ( ( String ) body ) ; bw . write ( "\n" ) ; bw . flush ( ) ; } else if ( body instanceof byte [ ] ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Writing as text: " + body + " to " + outputStream ) ; } outputStream . write ( ( byte [ ] ) body ) ; } else { throw new CamelExchangeException ( "The body is neither a String or byte array. " + "Can not write body to output stream" , exchange ) ; } } private void validateUri ( String uri ) throws Exception { String [ ] s = uri . split ( ":" ) ; if ( s . length < 2 ) { throw new IllegalArgumentException ( INVALID_URI ) ; } String [ ] t = s [ 1 ] . split ( "\\?" ) ; if ( t . length < 1 ) { throw new IllegalArgumentException ( INVALID_URI ) ; } this . uri = t [ 0 ] . trim ( ) ; if ( ! TYPES_LIST . contains ( this . uri ) ) { throw new IllegalArgumentException ( INVALID_URI ) ; } } } 	0
package org . apache . camel . view ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . AggregatorType ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FilterType ; import org . apache . camel . model . FromType ; import org . apache . camel . model . OtherwiseType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RecipientListType ; import org . apache . camel . model . ResequencerType ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . model . SplitterType ; import org . apache . camel . model . ToType ; import org . apache . camel . model . WhenType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; public class NodeData { public String id ; public String image ; public String label ; public String shape ; public String edgeLabel ; public String tooltop ; public String nodeType ; public boolean nodeWritten ; public String url ; public List < ProcessorType > outputs ; public String association = "property" ; private final String imagePrefix ; public NodeData ( String id , Object node , String imagePrefix ) { this . id = id ; this . imagePrefix = imagePrefix ; if ( node instanceof ProcessorType ) { ProcessorType processorType = ( ProcessorType ) node ; this . edgeLabel = processorType . getLabel ( ) ; } if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; this . tooltop = fromType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; this . tooltop = toType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof FilterType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "Message Filter" ; } else if ( node instanceof WhenType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "When Filter" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; } else if ( node instanceof OtherwiseType ) { this . nodeType = "Otherwise" ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; this . tooltop = "Otherwise" ; } else if ( node instanceof ChoiceType ) { this . image = imagePrefix + "ContentBasedRouterIcon.png" ; this . nodeType = "Content Based Router" ; this . label = "" ; this . edgeLabel = "" ; ChoiceType choice = ( ChoiceType ) node ; List < ProcessorType > outputs = new ArrayList < ProcessorType > ( choice . getWhenClauses ( ) ) ; if ( choice . getOtherwise ( ) != null ) { outputs . add ( choice . getOtherwise ( ) ) ; } this . outputs = outputs ; } else if ( node instanceof RecipientListType ) { this . image = imagePrefix + "RecipientListIcon.png" ; this . nodeType = "Recipient List" ; } else if ( node instanceof RoutingSlipType ) { this . image = imagePrefix + "RoutingTableIcon.png" ; this . nodeType = "Routing Slip" ; this . url = "http://activemq.apache.org/camel/routing-slip.html" ; this . tooltop = ( ( RoutingSlipType ) node ) . getHeaderName ( ) ; } else if ( node instanceof SplitterType ) { this . image = imagePrefix + "SplitterIcon.png" ; this . nodeType = "Splitter" ; } else if ( node instanceof AggregatorType ) { this . image = imagePrefix + "AggregatorIcon.png" ; this . nodeType = "Aggregator" ; } else if ( node instanceof ResequencerType ) { this . image = imagePrefix + "ResequencerIcon.png" ; this . nodeType = "Resequencer" ; } if ( isNullOrBlank ( this . nodeType ) && node != null ) { String name = node . getClass ( ) . getName ( ) ; int idx = name . lastIndexOf ( '.' ) ; if ( idx > 0 ) { name = name . substring ( idx + 1 ) ; } if ( name . endsWith ( "Type" ) ) { name = name . substring ( 0 , name . length ( ) - 4 ) ; } this . nodeType = insertSpacesBetweenCamelCase ( name ) ; } if ( this . label == null ) { if ( isNullOrBlank ( this . image ) ) { this . label = this . nodeType ; this . shape = "box" ; } else if ( isNotNullAndNonEmpty ( this . edgeLabel ) ) { this . label = "" ; } else { this . label = node . toString ( ) ; } } if ( isNullOrBlank ( this . tooltop ) ) { if ( isNotNullAndNonEmpty ( this . nodeType ) ) { String description = isNotNullAndNonEmpty ( this . edgeLabel ) ? this . edgeLabel : this . label ; this . tooltop = this . nodeType + ": " + description ; } else { this . tooltop = this . label ; } } if ( isNullOrBlank ( this . url ) && isNotNullAndNonEmpty ( this . nodeType ) ) { this . url = "http://activemq.apache.org/camel/" + this . nodeType . toLowerCase ( ) . replace ( ' ' , '-' ) + ".html" ; } if ( node instanceof ProcessorType && this . outputs == null ) { ProcessorType processorType = ( ProcessorType ) node ; this . outputs = processorType . getOutputs ( ) ; } } protected String removeQueryString ( String text ) { int idx = text . indexOf ( "?" ) ; if ( idx <= 0 ) { return text ; } else { return text . substring ( 0 , idx ) ; } } public static String insertSpacesBetweenCamelCase ( String name ) { boolean lastCharacterLowerCase = false ; StringBuffer buffer = new StringBuffer ( ) ; int i = 0 ; for ( int size = name . length ( ) ; i < size ; i ++ ) { char ch = name . charAt ( i ) ; if ( Character . isUpperCase ( ch ) ) { if ( lastCharacterLowerCase ) { buffer . append ( ' ' ) ; } lastCharacterLowerCase = false ; } else { lastCharacterLowerCase = true ; } buffer . append ( ch ) ; } return buffer . toString ( ) ; } } 	1
package org . apache . camel . spring ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . model . IdentifiedType ; @ XmlRootElement ( name = "jmxAgent" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CamelJMXAgentType extends IdentifiedType { @ XmlAttribute ( required = false ) private Boolean disabled ; @ XmlAttribute ( required = false ) private Integer registryPort ; @ XmlAttribute ( required = false ) private Integer connectorPort ; @ XmlAttribute ( required = false ) private String mbeanServerDefaultDomain ; @ XmlAttribute ( required = false ) private String mbeanObjectDomainName ; @ XmlAttribute ( required = false ) private String serviceUrlPath ; @ XmlAttribute ( required = false ) private Boolean createConnector ; @ XmlAttribute ( required = false ) private Boolean usePlatformMBeanServer ; public Integer getConnectorPort ( ) { return connectorPort ; } public void setConnectorPort ( Integer value ) { connectorPort = value ; } public Integer getRegistryPort ( ) { return registryPort ; } public void setRegistryPort ( Integer value ) { registryPort = value ; } public String getMbeanServerDefaultDomain ( ) { return mbeanServerDefaultDomain ; } public void setMbeanServerDefaultDomain ( String value ) { mbeanServerDefaultDomain = value ; } public String getMbeanObjectDomainName ( ) { return mbeanObjectDomainName ; } public void setMbeanObjectDomainName ( String value ) { mbeanObjectDomainName = value ; } public String getServiceUrlPath ( ) { return serviceUrlPath ; } public void setServiceUrlPath ( String value ) { serviceUrlPath = value ; } public Boolean isCreateConnector ( ) { return createConnector ; } public void setCreateConnector ( Boolean value ) { createConnector = value ; } public Boolean isUsePlatformMBeanServer ( ) { return usePlatformMBeanServer ; } public void setUsePlatformMBeanServer ( Boolean value ) { usePlatformMBeanServer = value ; } public Boolean isDisabled ( ) { return disabled ; } public void setDisabled ( Boolean value ) { disabled = value ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . impl . DefaultMessage ; public class JMXMessage extends DefaultMessage { private Notification notification ; public JMXMessage ( ) { this ( null ) ; } public JMXMessage ( Notification notification ) { this . notification = notification ; } @ Override public String toString ( ) { return "JMXMessage: " + notification ; } @ Override public JMXExchange getExchange ( ) { return ( JMXExchange ) super . getExchange ( ) ; } @ Override public JMXMessage newInstance ( ) { return new JMXMessage ( ) ; } public Notification getNotification ( ) { return notification ; } } 	1
package org . apache . camel . component . jhc ; import org . apache . camel . CamelContext ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; public class JhcExchange extends DefaultExchange { public JhcExchange ( CamelContext context ) { super ( context ) ; } public JhcExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } } 	0
package org . apache . camel . converter ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Converter ; import org . apache . camel . util . ObjectHelper ; @ Converter public final class ObjectConverter { private ObjectConverter ( ) { } public static boolean isCollection ( Object value ) { return value instanceof Collection || ( value != null && value . getClass ( ) . isArray ( ) ) ; } @ SuppressWarnings ( "unchecked" ) @ Converter @ Deprecated public static Iterator iterator ( Object value ) { return ObjectHelper . createIterator ( value ) ; } @ Converter public static boolean toBool ( Object value ) { Boolean answer = toBoolean ( value ) ; if ( answer != null ) { return answer . booleanValue ( ) ; } return false ; } @ Converter public static Boolean toBoolean ( Object value ) { return ObjectHelper . toBoolean ( value ) ; } @ Converter public static Boolean toBoolean ( Boolean value ) { if ( value != null ) { return value ; } return Boolean . FALSE ; } @ Converter public static Byte toByte ( Object value ) { if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Byte . valueOf ( number . byteValue ( ) ) ; } else if ( value instanceof String ) { return Byte . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static byte [ ] toByteArray ( String value ) { return value . getBytes ( ) ; } @ Converter public static char [ ] toCharArray ( String value ) { return value . toCharArray ( ) ; } @ Converter public static String fromCharArray ( char [ ] value ) { return new String ( value ) ; } @ Converter public static Short toShort ( Object value ) { if ( value instanceof Short ) { return ( Short ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Short . valueOf ( number . shortValue ( ) ) ; } else if ( value instanceof String ) { return Short . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Integer toInteger ( Object value ) { if ( value instanceof Integer ) { return ( Integer ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Integer . valueOf ( number . intValue ( ) ) ; } else if ( value instanceof String ) { return Integer . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Long toLong ( Object value ) { if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Long . valueOf ( number . longValue ( ) ) ; } else if ( value instanceof String ) { return Long . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Float toFloat ( Object value ) { if ( value instanceof Float ) { return ( Float ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Float . valueOf ( number . floatValue ( ) ) ; } else if ( value instanceof String ) { return Float . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Double toDouble ( Object value ) { if ( value instanceof Double ) { return ( Double ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Double . valueOf ( number . doubleValue ( ) ) ; } else if ( value instanceof String ) { return Double . valueOf ( ( String ) value ) ; } else { return null ; } } } 	1
package org . apache . camel . component . uface ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . Collection ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . DelegateLifecycleStrategy ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; import org . eclipse . core . databinding . observable . Realm ; import org . eclipse . core . databinding . observable . list . IObservableList ; import org . eclipse . core . databinding . observable . list . WritableList ; import org . eclipse . core . databinding . observable . value . WritableValue ; import org . ufacekit . model . ModelHelper ; import org . ufacekit . ui . AttributeDescriptor ; import org . ufacekit . ui . UIComposite ; import org . ufacekit . ui . UIFactory ; import org . ufacekit . ui . beanform . BeanForm ; import org . ufacekit . ui . controls . CellLabelProvider ; import org . ufacekit . ui . controls . UITable ; import org . ufacekit . ui . controls . UITableColumn ; import org . ufacekit . ui . layouts . GridLayoutData ; public class UFaceBrowser { private final DefaultCamelContext camelContext ; private IObservableList endpoints ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; public UFaceBrowser ( DefaultCamelContext camelContext ) { ObjectHelper . notNull ( camelContext , "camelContext" ) ; this . camelContext = camelContext ; this . endpoints = new WritableList ( Realm . getDefault ( ) ) ; List < BrowsableEndpoint > list = CamelContextHelper . getSingletonEndpoints ( camelContext , BrowsableEndpoint . class ) ; for ( BrowsableEndpoint endpoint : list ) { if ( ! endpoints . contains ( endpoint ) ) { endpoints . add ( endpoint ) ; } } camelContext . setLifecycleStrategy ( new DelegateLifecycleStrategy ( camelContext . getLifecycleStrategy ( ) ) { @ Override public void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) { super . onEndpointAdd ( endpoint ) ; if ( endpoint instanceof BrowsableEndpoint ) { onBrowsableEndpoint ( ( BrowsableEndpoint ) endpoint ) ; } } } ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public IObservableList getEndpoints ( ) { return endpoints ; } public DefaultCamelContext getCamelContext ( ) { return camelContext ; } public void createBrowserUI ( UIComposite root ) { UIFactory ui = root . getFactory ( ) ; UIComposite splitter = ui . newHorizontalSplitPanel ( root , new GridLayoutData ( GridLayoutData . ALIGN_CENTER , GridLayoutData . ALIGN_CENTER ) ) ; UITable tree = createEndpointTableUI ( splitter ) ; BeanForm selectionForm = new BeanForm ( ) ; UITable table = ui . newTable ( splitter , new UITable . TableUIInfo ( new GridLayoutData ( GridLayoutData . ALIGN_FILL , GridLayoutData . ALIGN_FILL , true , true ) ) ) ; selectionForm . add ( table , new UITable . TableBindingInfo ( selectionForm . detailList ( "exchanges" , Collection . class ) ) ) ; ui . newTableColumn ( table , new UITableColumn . TableColumnUIInfo ( null , new CellLabelProvider ( ) { public String getLabel ( Object object ) { Exchange exchange = ( Exchange ) object ; return exchange . getIn ( ) . getBody ( String . class ) ; } } ) ) ; ui . newTableColumn ( table , new UITableColumn . TableColumnUIInfo ( null , new CellLabelProvider ( ) { public String getLabel ( Object object ) { Exchange exchange = ( Exchange ) object ; return exchange . getIn ( ) . getHeaders ( ) . toString ( ) ; } } ) ) ; selectionForm . bind ( tree . getSelectionObservable ( ) ) ; } protected UITable createEndpointTableUI ( UIComposite root ) { BeanForm form = new BeanForm ( ) ; UIFactory ui = root . getFactory ( ) ; AttributeDescriptor bindingData = form . detailList ( "endpoints" , Collection . class ) ; UITable table = ui . newTable ( root , new UITable . TableUIInfo ( null ) ) ; form . add ( table , new UITable . TableBindingInfo ( bindingData ) ) ; ui . newTableColumn ( table , new UITableColumn . TableColumnUIInfo ( null , new CellLabelProvider ( ) { public String getLabel ( Object object ) { BrowsableEndpoint endpoint = ( BrowsableEndpoint ) object ; return endpoint . getEndpointUri ( ) ; } } ) ) ; WritableValue value = ModelHelper . createWritableValue ( this ) ; form . bind ( value ) ; return table ; } protected void onBrowsableEndpoint ( BrowsableEndpoint endpoint ) { endpoints . add ( endpoint ) ; } } 	0
package org . apache . camel . processor . resequencer ; import java . util . Queue ; import java . util . Timer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResequencerEngine < E > implements TimeoutHandler { private static final transient Log LOG = LogFactory . getLog ( ResequencerEngine . class ) ; private long timeout ; private int capacity ; private Queue < E > outQueue ; private Element < E > lastDelivered ; private Sequence < Element < E > > sequence ; private Timer timer ; public ResequencerEngine ( SequenceElementComparator < E > comparator ) { this ( comparator , Integer . MAX_VALUE ) ; } public ResequencerEngine ( SequenceElementComparator < E > comparator , int capacity ) { this . timer = new Timer ( "Resequencer Timer" ) ; this . sequence = createSequence ( comparator ) ; this . capacity = capacity ; this . timeout = 2000L ; this . lastDelivered = null ; } public void stop ( ) { this . timer . cancel ( ) ; } public Queue < E > getOutQueue ( ) { return outQueue ; } public void setOutQueue ( Queue < E > outQueue ) { this . outQueue = outQueue ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public synchronized void timeout ( Timeout timout ) { try { while ( deliver ( ) ) { } } catch ( RuntimeException e ) { LOG . error ( "error during delivery" , e ) ; } } public synchronized void add ( E o ) { if ( sequence . size ( ) >= capacity ) { throw new IllegalStateException ( "maximum capacity is reached" ) ; } insert ( o ) ; } public synchronized void put ( E o ) throws InterruptedException { if ( sequence . size ( ) >= capacity ) { wait ( ) ; } insert ( o ) ; } E getLastDelivered ( ) { if ( lastDelivered == null ) { return null ; } return lastDelivered . getObject ( ) ; } void setLastDelivered ( E o ) { lastDelivered = new Element < E > ( o ) ; } private void insert ( E o ) { Element < E > element = new Element < E > ( o ) ; sequence . add ( element ) ; Element < E > successor = sequence . successor ( element ) ; if ( successor != null ) { successor . cancel ( ) ; } if ( successorOfLastDelivered ( element ) ) { } else if ( sequence . predecessor ( element ) != null ) { } else { Timeout t = defineTimeout ( ) ; element . schedule ( t ) ; } while ( deliver ( ) ) { } } private boolean deliver ( ) { if ( sequence . size ( ) == 0 ) { return false ; } Element < E > element = sequence . first ( ) ; if ( element . scheduled ( ) ) { return false ; } sequence . remove ( element ) ; lastDelivered = element ; notify ( ) ; outQueue . add ( element . getObject ( ) ) ; return true ; } private boolean successorOfLastDelivered ( Element < E > element ) { if ( lastDelivered == null ) { return false ; } if ( sequence . comparator ( ) . successor ( element , lastDelivered ) ) { return true ; } return false ; } private Timeout defineTimeout ( ) { Timeout result = new Timeout ( timer , timeout ) ; result . addTimeoutHandler ( this ) ; return result ; } private static < E > Sequence < Element < E > > createSequence ( SequenceElementComparator < E > comparator ) { return new Sequence < Element < E > > ( new ElementComparator < E > ( comparator ) ) ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; public interface ComponentResolver < E extends Exchange > { Component < E > resolveComponent ( String name , CamelContext context ) throws Exception ; } 	0
package org . apache . camel . processor ; import java . text . NumberFormat ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Exchange ; import org . apache . commons . logging . Log ; public class ThroughputLogger extends Logger { private int groupSize = 100 ; private long startTime ; private long groupStartTime ; private AtomicInteger receivedCounter = new AtomicInteger ( ) ; private NumberFormat numberFormat = NumberFormat . getNumberInstance ( ) ; private String action = "Received" ; private String logMessage ; public ThroughputLogger ( ) { } public ThroughputLogger ( Log log ) { super ( log ) ; } public ThroughputLogger ( Log log , LoggingLevel level ) { super ( log , level ) ; } public ThroughputLogger ( String logName ) { super ( logName ) ; } public ThroughputLogger ( String logName , LoggingLevel level ) { super ( logName , level ) ; } public ThroughputLogger ( String logName , LoggingLevel level , int groupSize ) { super ( logName , level ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( String logName , int groupSize ) { super ( logName ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( int groupSize ) { setGroupSize ( groupSize ) ; } @ Override public void process ( Exchange exchange ) { if ( startTime == 0 ) { startTime = System . currentTimeMillis ( ) ; } int receivedCount = receivedCounter . incrementAndGet ( ) ; if ( receivedCount % groupSize == 0 ) { logMessage = createLogMessage ( exchange , receivedCount ) ; super . process ( exchange ) ; } } public int getGroupSize ( ) { return groupSize ; } public void setGroupSize ( int groupSize ) { if ( groupSize == 0 ) { throw new IllegalArgumentException ( "groupSize cannot be zero!" ) ; } this . groupSize = groupSize ; } public NumberFormat getNumberFormat ( ) { return numberFormat ; } public void setNumberFormat ( NumberFormat numberFormat ) { this . numberFormat = numberFormat ; } public String getAction ( ) { return action ; } public void setAction ( String action ) { this . action = action ; } @ Override protected Object logMessage ( Exchange exchange ) { return logMessage ; } protected String createLogMessage ( Exchange exchange , int receivedCount ) { long time = System . currentTimeMillis ( ) ; if ( groupStartTime == 0 ) { groupStartTime = startTime ; } double rate = messagesPerSecond ( groupSize , groupStartTime , time ) ; double average = messagesPerSecond ( receivedCount , startTime , time ) ; groupStartTime = time ; return getAction ( ) + ": " + receivedCount + " messages so far. Last group took: " + ( time - groupStartTime ) + " millis which is: " + numberFormat . format ( rate ) + " messages per second. average: " + numberFormat . format ( average ) ; } protected double messagesPerSecond ( long messageCount , long startTime , long endTime ) { double rate = messageCount * 1000.0 ; rate /= endTime - startTime ; return rate ; } } 	1
package org . apache . camel . component . jpa ; public interface Callback < R , P > { R callback ( P parameter ) ; } 	0
package org . apache . camel . processor . aggregate ; import java . util . AbstractCollection ; import java . util . Collection ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AggregationCollection extends AbstractCollection < Exchange > { private static final transient Log LOG = LogFactory . getLog ( AggregationCollection . class ) ; private final Expression < Exchange > correlationExpression ; private final AggregationStrategy aggregationStrategy ; private Map < Object , Exchange > map = new LinkedHashMap < Object , Exchange > ( ) ; public AggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy ) { this . correlationExpression = correlationExpression ; this . aggregationStrategy = aggregationStrategy ; } protected Map < Object , Exchange > getMap ( ) { return map ; } @ Override public boolean add ( Exchange exchange ) { Object correlationKey = correlationExpression . evaluate ( exchange ) ; Exchange oldExchange = map . get ( correlationKey ) ; Exchange newExchange = exchange ; if ( oldExchange != null ) { newExchange = aggregationStrategy . aggregate ( oldExchange , newExchange ) ; } if ( newExchange != oldExchange ) { LOG . debug ( "put exchange:" + newExchange + " for key:" + correlationKey ) ; map . put ( correlationKey , newExchange ) ; } onAggregation ( correlationKey , newExchange ) ; return true ; } public Iterator < Exchange > iterator ( ) { return map . values ( ) . iterator ( ) ; } public int size ( ) { return map . size ( ) ; } @ Override public void clear ( ) { map . clear ( ) ; } protected void onAggregation ( Object correlationKey , Exchange newExchange ) { } } 	1
package org . apache . camel . component . file . remote ; import java . io . OutputStream ; import java . util . Map ; import org . apache . camel . impl . DefaultMessage ; public class RemoteFileMessage extends DefaultMessage { private OutputStream outputStream ; private String fullFileName ; private String hostname ; public RemoteFileMessage ( ) { } public RemoteFileMessage ( String hostname , String fullFileName , OutputStream outputStream ) { this . hostname = hostname ; this . fullFileName = fullFileName ; this . outputStream = outputStream ; setMessageId ( hostname + ":" + fullFileName ) ; } public String getHostname ( ) { return hostname ; } public void setHostname ( String hostname ) { this . hostname = hostname ; } public String getFullFileName ( ) { return fullFileName ; } public void setFullFileName ( String fullFileName ) { this . fullFileName = fullFileName ; } public OutputStream getOutputStream ( ) { return outputStream ; } public void setOutputStream ( OutputStream outputStream ) { this . outputStream = outputStream ; } @ Override public RemoteFileExchange getExchange ( ) { return ( RemoteFileExchange ) super . getExchange ( ) ; } @ Override protected Object createBody ( ) { if ( outputStream != null ) { return getExchange ( ) . getBinding ( ) . extractBodyFromOutputStream ( getExchange ( ) , outputStream ) ; } return null ; } @ Override public RemoteFileMessage newInstance ( ) { return new RemoteFileMessage ( ) ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { super . populateInitialHeaders ( map ) ; map . put ( "file.remote.host" , hostname ) ; map . put ( "file.remote.name" , fullFileName ) ; } } 	0
package org . apache . camel . util ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . InvalidPayloadException ; import org . apache . camel . InvalidTypeException ; import org . apache . camel . Message ; import org . apache . camel . NoSuchBeanException ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . NoSuchHeaderException ; import org . apache . camel . NoSuchPropertyException ; public final class ExchangeHelper { private ExchangeHelper ( ) { } public static < T > T getExchangeProperty ( Exchange exchange , String propertyName , Class < T > type , T defaultValue ) { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { return defaultValue ; } return answer ; } @ SuppressWarnings ( { "unchecked" } ) public static < E extends Exchange > Endpoint < E > resolveEndpoint ( E exchange , Object value ) throws NoSuchEndpointException { Endpoint < E > endpoint ; if ( value instanceof Endpoint ) { endpoint = ( Endpoint < E > ) value ; } else { String uri = value . toString ( ) ; endpoint = CamelContextHelper . getMandatoryEndpoint ( exchange . getContext ( ) , uri ) ; } return endpoint ; } public static < T > T getMandatoryProperty ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchPropertyException { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchPropertyException ( exchange , propertyName , type ) ; } return answer ; } public static < T > T getMandatoryHeader ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchHeaderException { T answer = exchange . getIn ( ) . getHeader ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchHeaderException ( exchange , propertyName , type ) ; } return answer ; } public static Object getMandatoryInBody ( Exchange exchange ) throws InvalidPayloadException { Object answer = exchange . getIn ( ) . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class ) ; } return answer ; } public static < T > T getMandatoryInBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { T answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type ) ; } return answer ; } public static Object getMandatoryOutBody ( Exchange exchange ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; Object answer = out . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class , out ) ; } return answer ; } public static < T > T getMandatoryOutBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; T answer = out . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type , out ) ; } return answer ; } public static < T > T convertToMandatoryType ( Exchange exchange , Class < T > type , Object value ) throws InvalidTypeException { T answer = convertToType ( exchange , type , value ) ; if ( answer == null ) { throw new InvalidTypeException ( exchange , value , type ) ; } return answer ; } public static < T > T convertToType ( Exchange exchange , Class < T > type , Object value ) { return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public static void copyResults ( Exchange result , Exchange source ) { if ( result != source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } Message out = source . getOut ( false ) ; if ( out != null ) { result . getOut ( true ) . copyFrom ( out ) ; } else { result . getOut ( true ) . copyFrom ( source . getIn ( ) ) ; } result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } public static boolean isInCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isInCapable ( ) ; } public static boolean isOutCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isOutCapable ( ) ; } public static < T > T newInstance ( Exchange exchange , Class < T > type ) { return exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } public static Map createVariableMap ( Exchange exchange ) { Map answer = new HashMap ( ) ; populateVariableMap ( exchange , answer ) ; return answer ; } public static void populateVariableMap ( Exchange exchange , Map map ) { map . put ( "exchange" , exchange ) ; Message in = exchange . getIn ( ) ; map . put ( "in" , in ) ; map . put ( "request" , in ) ; map . put ( "headers" , in . getHeaders ( ) ) ; map . put ( "body" , in . getBody ( ) ) ; if ( isOutCapable ( exchange ) ) { Message out = exchange . getOut ( true ) ; map . put ( "out" , out ) ; map . put ( "response" , out ) ; } map . put ( "camelContext" , exchange . getContext ( ) ) ; } public static String getContentType ( Exchange exchange ) { return exchange . getIn ( ) . getHeader ( "Content-Type" , String . class ) ; } public static Object lookupMandatoryBean ( Exchange exchange , String name ) { Object value = lookupBean ( exchange , name ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static < T > T lookupMandatoryBean ( Exchange exchange , String name , Class < T > type ) { T value = lookupBean ( exchange , name , type ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static Object lookupBean ( Exchange exchange , String name ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookupBean ( Exchange exchange , String name , Class < T > type ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . Exchange ; public interface UnitOfWork { void addSynchronization ( Synchronization synchronization ) ; void removeSynchronization ( Synchronization synchronization ) ; void done ( Exchange exchange ) ; String getId ( ) ; } 	0
package org . apache . camel ; public class NoSuchEndpointException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String uri ; public NoSuchEndpointException ( String uri ) { super ( "No endpoint could be found for: " + uri ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	1
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . TypeConverter ; import org . apache . camel . impl . converter . TypeConverterRegistry ; import org . apache . camel . spi . Injector ; public class ReportingTypeConverterRegistry implements TypeConverterRegistry { private List < String > errors = new ArrayList < String > ( ) ; public String [ ] getErrors ( ) { return errors . toArray ( new String [ errors . size ( ) ] ) ; } public void addTypeConverter ( Class toType , Class fromType , TypeConverter typeConverter ) { if ( errors . size ( ) == 0 ) { errors . add ( "Method should not be invoked." ) ; } } public Injector getInjector ( ) { return null ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class DefaultConsumer < E extends Exchange > extends ServiceSupport implements Consumer < E > { private Endpoint < E > endpoint ; private Processor processor ; private AsyncProcessor asyncProcessor ; private ExceptionHandler exceptionHandler ; public DefaultConsumer ( Endpoint < E > endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; } @ Override public String toString ( ) { return "Consumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } public AsyncProcessor getAsyncProcessor ( ) { if ( asyncProcessor == null ) { asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; } return asyncProcessor ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void handleException ( Throwable t ) { getExceptionHandler ( ) . handleException ( t ) ; } } 	1
package org . apache . camel . component . spring . integration ; import org . apache . camel . Exchange ; import org . springframework . integration . message . GenericMessage ; public final class SpringIntegrationBinding { private SpringIntegrationBinding ( ) { } @ SuppressWarnings ( "unchecked" ) public static org . springframework . integration . message . Message createSpringIntegrationMessage ( Exchange exchange ) { org . apache . camel . Message message = exchange . getIn ( ) ; GenericMessage siMessage = new GenericMessage ( message . getBody ( ) ) ; return siMessage ; } @ SuppressWarnings ( "unchecked" ) public static org . springframework . integration . message . Message storeToSpringIntegrationMessage ( org . apache . camel . Message message ) { GenericMessage siMessage = new GenericMessage ( message . getBody ( ) ) ; return siMessage ; } public static void storeToCamelMessage ( org . springframework . integration . message . Message siMessage , org . apache . camel . Message cMessage ) { cMessage . setBody ( siMessage . getPayload ( ) ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanProcessor extends ServiceSupport implements Processor { public static final String METHOD_NAME = "org.apache.camel.MethodName" ; private static final transient Log LOG = LogFactory . getLog ( BeanProcessor . class ) ; private Method methodObject ; private String method ; private BeanHolder beanHolder ; public BeanProcessor ( Object pojo , BeanInfo beanInfo ) { this ( new ConstantBeanHolder ( pojo , beanInfo ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext , ParameterMappingStrategy parameterMappingStrategy ) { this ( pojo , new BeanInfo ( camelContext , pojo . getClass ( ) , parameterMappingStrategy ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext ) { this ( pojo , camelContext , BeanInfo . createParameterMappingStrategy ( camelContext ) ) ; } public BeanProcessor ( BeanHolder beanHolder ) { this . beanHolder = beanHolder ; } @ Override public String toString ( ) { String description = methodObject != null ? " " + methodObject : "" ; return "BeanProcessor[" + beanHolder + description + "]" ; } public void process ( Exchange exchange ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> invoking method for: " + exchange ) ; } Object bean = beanHolder . getBean ( ) ; exchange . setProperty ( "org.apache.camel.bean.BeanHolder" , beanHolder ) ; Processor processor = getProcessor ( ) ; BeanInfo beanInfo = beanHolder . getBeanInfo ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return ; } Message in = exchange . getIn ( ) ; BeanInvocation beanInvoke = in . getBody ( BeanInvocation . class ) ; if ( beanInvoke != null ) { beanInvoke . invoke ( bean , exchange ) ; return ; } boolean isExplicitMethod = false ; String prevMethod = null ; MethodInvocation invocation ; if ( methodObject != null ) { invocation = beanInfo . createInvocation ( methodObject , bean , exchange ) ; } else { if ( ObjectHelper . isNotNullAndNonEmpty ( method ) ) { prevMethod = in . getHeader ( METHOD_NAME , String . class ) ; in . setHeader ( METHOD_NAME , method ) ; isExplicitMethod = true ; } invocation = beanInfo . createInvocation ( bean , exchange ) ; } if ( invocation == null ) { throw new IllegalStateException ( "No method invocation could be created, " + "no maching method could be found on: " + bean ) ; } try { Object value = invocation . proceed ( ) ; if ( value != null ) { if ( exchange . getPattern ( ) . isOutCapable ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on OUT message: " + value ) ; } exchange . getOut ( true ) . setBody ( value ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on IN message: " + value ) ; } exchange . getIn ( ) . setBody ( value ) ; } } } catch ( InvocationTargetException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof Exception ) { throw ( Exception ) cause ; } else { throw e ; } } catch ( Exception e ) { throw e ; } catch ( Throwable throwable ) { throw new Exception ( throwable ) ; } finally { if ( isExplicitMethod ) { in . setHeader ( METHOD_NAME , prevMethod ) ; } } } protected Processor getProcessor ( ) { return beanHolder . getProcessor ( ) ; } public Method getMethodObject ( ) { return methodObject ; } public void setMethodObject ( Method methodObject ) { this . methodObject = methodObject ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Deprecated public void setMethodName ( String method ) { setMethod ( method ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startService ( getProcessor ( ) ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopService ( getProcessor ( ) ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "finally" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FinallyType extends OutputType < ProcessorType > implements Block { @ Override public String toString ( ) { return "Finally[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "finally" ; } @ Override public String getLabel ( ) { return "" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return routeContext . createProcessor ( this ) ; } } 	0
package org . apache . camel ; import org . apache . camel . impl . DefaultProducerTemplate ; @ Deprecated public class CamelTemplate < E extends Exchange > extends DefaultProducerTemplate < E > { public CamelTemplate ( CamelContext context ) { super ( context ) ; } public CamelTemplate ( CamelContext context , Endpoint defaultEndpoint ) { super ( context , defaultEndpoint ) ; } } 	1
package org . apache . camel . util ; public class CollectionStringBuffer { private StringBuffer buffer = new StringBuffer ( ) ; private String separator ; private boolean first = true ; public CollectionStringBuffer ( ) { this ( ", " ) ; } public CollectionStringBuffer ( String separator ) { this . separator = separator ; } @ Override public String toString ( ) { return buffer . toString ( ) ; } public void append ( Object value ) { if ( first ) { first = false ; } else { buffer . append ( separator ) ; } buffer . append ( value ) ; } public String getSeparator ( ) { return separator ; } public void setSeparator ( String separator ) { this . separator = separator ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeleteFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( DeleteFileProcessStrategy . class ) ; public DeleteFileProcessStrategy ( ) { } public DeleteFileProcessStrategy ( boolean lockFile ) { super ( lockFile ) ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Deleting file: " + file ) ; } boolean deleted = file . delete ( ) ; if ( ! deleted ) { LOG . warn ( "Could not delete file: " + file ) ; } super . commit ( endpoint , exchange , file ) ; } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/spring" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . model . dataformat ; 	0
package org . apache . camel . processor . validation ; import java . util . ArrayList ; import java . util . List ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultValidationErrorHandler implements ValidatorErrorHandler { private static final transient Log LOG = LogFactory . getLog ( DefaultValidationErrorHandler . class ) ; private List < SAXParseException > warnings = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > errors = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > fatalErrors = new ArrayList < SAXParseException > ( ) ; public void warning ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "warning: " + e , e ) ; } warnings . add ( e ) ; } public void error ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "error: " + e , e ) ; } errors . add ( e ) ; } public void fatalError ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "fatalError: " + e , e ) ; } fatalErrors . add ( e ) ; } public void reset ( ) { warnings . clear ( ) ; errors . clear ( ) ; fatalErrors . clear ( ) ; } public boolean isValid ( ) { return errors . isEmpty ( ) && fatalErrors . isEmpty ( ) ; } public void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } public void handleErrors ( Exchange exchange , Object schema ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . cxf . binding . soap . SoapFault ; import org . apache . cxf . binding . soap . SoapMessage ; import org . apache . cxf . binding . xml . XMLFault ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . XMLMessage ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . service . model . BindingOperationInfo ; public class FaultOutInterceptor extends AbstractPhaseInterceptor < Message > { private static final Logger LOG = LogUtils . getL7dLogger ( FaultOutInterceptor . class ) ; public FaultOutInterceptor ( ) { super ( Phase . PREPARE_SEND ) ; } @ SuppressWarnings ( "unchecked" ) public void handleMessage ( Message message ) throws Fault { checkBindingOperationInfor ( message ) ; Exception ex = message . getContent ( Exception . class ) ; if ( ex != null ) { if ( ! ( ex instanceof Fault ) ) { ex = new Fault ( ex ) ; } if ( message instanceof XMLMessage ) { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "FaultOutInterceptor Creating XMLFault" ) ; } ex = XMLFault . createFault ( ( Fault ) ex ) ; } else if ( message instanceof SoapMessage ) { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "FaultOutInterceptor Creating SoapFault" ) ; } SoapMessage sm = ( SoapMessage ) message ; ex = SoapFault . createFault ( ( Fault ) ex , sm . getVersion ( ) ) ; } message . setContent ( Exception . class , ex ) ; } } private void checkBindingOperationInfor ( Message message ) { BindingOperationInfo bop = message . getExchange ( ) . get ( BindingOperationInfo . class ) ; if ( bop == null ) { bop = new FakeBindingOperationInfo ( ) ; message . getExchange ( ) . put ( BindingOperationInfo . class , bop ) ; } } } 	0
package org . apache . camel . model ; import java . util . concurrent . LinkedBlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Splitter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "splitter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SplitterType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; public SplitterType ( ) { } public SplitterType ( Expression expression ) { super ( expression ) ; } public SplitterType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Splitter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "splitter" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } if ( threadPoolExecutor == null ) { threadPoolExecutor = new ThreadPoolExecutor ( 4 , 16 , 0L , TimeUnit . MILLISECONDS , new LinkedBlockingQueue ( ) ) ; } return new Splitter ( getExpression ( ) . createExpression ( routeContext ) , childProcessor , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public void setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public void setThreadPoolExecutor ( ThreadPoolExecutor threadPoolExecutor ) { this . threadPoolExecutor = threadPoolExecutor ; } } 	1
package org . apache . camel . component . jmx ; import javax . management . Notification ; import javax . management . NotificationListener ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class JMXConsumer extends DefaultConsumer implements NotificationListener { private JMXEndpoint jmxEndpoint ; public JMXConsumer ( JMXEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . jmxEndpoint = endpoint ; } public void handleNotification ( Notification notification , Object handback ) { try { getProcessor ( ) . process ( jmxEndpoint . createExchange ( notification ) ) ; } catch ( Throwable e ) { handleException ( e ) ; } } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import javax . activation . DataHandler ; import org . apache . camel . Message ; public class DefaultMessage extends MessageSupport { private Map < String , Object > headers ; private Map < String , DataHandler > attachments ; @ Override public String toString ( ) { return "Message: " + getBody ( ) ; } public Object getHeader ( String name ) { return getHeaders ( ) . get ( name ) ; } public < T > T getHeader ( String name , Class < T > type ) { Object value = getHeader ( name ) ; return getExchange ( ) . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setHeader ( String name , Object value ) { if ( headers == null ) { headers = createHeaders ( ) ; } headers . put ( name , value ) ; } public Object removeHeader ( String name ) { if ( headers != null ) { return headers . remove ( name ) ; } else { return null ; } } public Map < String , Object > getHeaders ( ) { if ( headers == null ) { headers = createHeaders ( ) ; } return headers ; } public void setHeaders ( Map < String , Object > headers ) { this . headers = headers ; } public DefaultMessage newInstance ( ) { return new DefaultMessage ( ) ; } protected Map < String , Object > createHeaders ( ) { HashMap < String , Object > map = new HashMap < String , Object > ( ) ; populateInitialHeaders ( map ) ; return map ; } protected void populateInitialHeaders ( Map < String , Object > map ) { } protected Map < String , DataHandler > createAttachments ( ) { HashMap < String , DataHandler > map = new HashMap < String , DataHandler > ( ) ; populateInitialAttachments ( map ) ; return map ; } protected void populateInitialAttachments ( Map < String , DataHandler > map ) { } public void addAttachment ( String id , DataHandler content ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } attachments . put ( id , content ) ; } public DataHandler getAttachment ( String id ) { return getAttachments ( ) . get ( id ) ; } public Set < String > getAttachmentNames ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments . keySet ( ) ; } public void removeAttachment ( String id ) { if ( attachments != null && attachments . containsKey ( id ) ) { attachments . remove ( id ) ; } } public Map < String , DataHandler > getAttachments ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments ; } public void setAttachments ( Map < String , DataHandler > attachments ) { this . attachments = attachments ; } public boolean hasAttachments ( ) { return this . attachments != null && this . attachments . size ( ) > 0 ; } protected boolean hasPopulatedHeaders ( ) { return headers != null ; } } 	1
package org . apache . camel . spring . remoting ; import org . aopalliance . intercept . MethodInterceptor ; import org . aopalliance . intercept . MethodInvocation ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Endpoint ; import org . apache . camel . Producer ; import org . apache . camel . component . bean . CamelInvocationHandler ; import org . apache . camel . util . CamelContextHelper ; import org . springframework . beans . factory . DisposableBean ; import org . springframework . beans . factory . InitializingBean ; import static org . apache . camel . util . ObjectHelper . notNull ; public class SendBeforeInterceptor implements MethodInterceptor , CamelContextAware , InitializingBean , DisposableBean { private String uri ; private CamelContext camelContext ; private CamelInvocationHandler invocationHandler ; private Producer producer ; public Object invoke ( MethodInvocation invocation ) throws Throwable { invocationHandler . invoke ( invocation . getThis ( ) , invocation . getMethod ( ) , invocation . getArguments ( ) ) ; return invocation . proceed ( ) ; } public void afterPropertiesSet ( ) throws Exception { notNull ( uri , "uri" ) ; notNull ( camelContext , "camelContext" ) ; Endpoint endpoint = CamelContextHelper . getMandatoryEndpoint ( camelContext , uri ) ; producer = endpoint . createProducer ( ) ; producer . start ( ) ; invocationHandler = new CamelInvocationHandler ( endpoint , producer ) ; } public void destroy ( ) throws Exception { if ( producer != null ) { producer . stop ( ) ; } } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } } 	0
package org . apache . camel . processor . interceptor ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . converter . stream . StreamCache ; import org . apache . camel . model . InterceptorRef ; import org . apache . camel . model . InterceptorType ; import org . apache . camel . processor . Interceptor ; public class StreamCachingInterceptor extends Interceptor { public StreamCachingInterceptor ( ) { super ( ) ; setInterceptorLogic ( new Processor ( ) { public void process ( Exchange exchange ) throws Exception { Object newBody = exchange . getIn ( ) . getBody ( StreamCache . class ) ; if ( newBody != null ) { exchange . getIn ( ) . setBody ( newBody ) ; } proceed ( exchange ) ; } } ) ; } public StreamCachingInterceptor ( Processor processor ) { this ( ) ; setProcessor ( processor ) ; } @ Override public String toString ( ) { return "StreamCachingInterceptor" ; } public static void noStreamCaching ( List < InterceptorType > interceptors ) { for ( int i = 0 ; i < interceptors . size ( ) ; i ++ ) { InterceptorType interceptor = interceptors . get ( i ) ; if ( interceptor instanceof InterceptorRef && ( ( InterceptorRef ) interceptor ) . getInterceptor ( ) instanceof StreamCachingInterceptor ) { interceptors . remove ( interceptor ) ; } } } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/osgi" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . osgi ; 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . CollectionHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class Splitter extends MulticastProcessor implements Processor { public static final String SPLIT_SIZE = "org.apache.camel.splitSize" ; public static final String SPLIT_COUNTER = "org.apache.camel.splitCounter" ; private final Expression expression ; public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy ) { this ( expression , destination , aggregationStrategy , false , null ) ; } public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { super ( Collections . singleton ( destination ) , aggregationStrategy , parallelProcessing , threadPoolExecutor ) ; this . expression = expression ; notNull ( expression , "expression" ) ; notNull ( destination , "destination" ) ; } @ Override public String toString ( ) { return "Splitter[on: " + expression + " to: " + getProcessors ( ) . iterator ( ) . next ( ) + " aggregate: " + getAggregationStrategy ( ) + "]" ; } @ Override protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; Integer collectionSize = CollectionHelper . size ( value ) ; List < ProcessorExchangePair > result ; if ( collectionSize != null ) { result = new ArrayList < ProcessorExchangePair > ( collectionSize ) ; } else { result = new ArrayList < ProcessorExchangePair > ( ) ; } Iterator < Object > iter = ObjectConverter . iterator ( value ) ; while ( iter . hasNext ( ) ) { Object part = iter . next ( ) ; Exchange newExchange = exchange . copy ( ) ; Message in = newExchange . getIn ( ) ; in . setBody ( part ) ; result . add ( new ProcessorExchangePair ( getProcessors ( ) . iterator ( ) . next ( ) , newExchange ) ) ; } return result ; } @ Override protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { exchange . getIn ( ) . setHeader ( SPLIT_COUNTER , i ) ; exchange . getIn ( ) . setHeader ( SPLIT_SIZE , allPairs . size ( ) ) ; } } 	1
package org . apache . camel . processor . idempotent ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . RuntimeCamelException ; public class NoMessageIdException extends RuntimeCamelException { private final Exchange exchange ; private final Expression expression ; public NoMessageIdException ( Exchange exchange , Expression expression ) { super ( "No message ID could be found using expression: " + expression + " on message exchange: " + exchange ) ; this . exchange = exchange ; this . expression = expression ; } public Exchange getExchange ( ) { return exchange ; } public Expression getExpression ( ) { return expression ; } } 	0
package org . apache . camel . model ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . MulticastProcessor ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "multicast" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MulticastType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; @ Override public String toString ( ) { return "Multicast[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "multicast" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } protected Processor createCompositeProcessor ( List < Processor > list ) { if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } return new MulticastProcessor ( list , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public MulticastType setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; return this ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public MulticastType setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; return this ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public MulticastType setThreadPoolExecutor ( ThreadPoolExecutor executor ) { this . threadPoolExecutor = executor ; return this ; } @ Override protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { return new StreamCachingInterceptor ( target ) ; } } 	1
package org . apache . camel . util ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; public final class AsyncProcessorHelper { private AsyncProcessorHelper ( ) { } public static void process ( AsyncProcessor processor , Exchange exchange ) throws Exception { final CountDownLatch latch = new CountDownLatch ( 1 ) ; boolean sync = processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( ! sync ) { latch . countDown ( ) ; } } } ) ; if ( ! sync ) { latch . await ( ) ; } } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . model . config . BatchResequencerConfig ; import org . apache . camel . model . config . StreamResequencerConfig ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Resequencer ; import org . apache . camel . processor . StreamResequencer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "resequencer" ) public class ResequencerType extends ProcessorType < ProcessorType > { @ XmlElementRef private List < ExpressionType > expressions = new ArrayList < ExpressionType > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; private BatchResequencerConfig batchConfig ; private StreamResequencerConfig streamConfig ; @ XmlTransient private List < Expression > expressionList ; public ResequencerType ( ) { this ( null ) ; } public ResequencerType ( List < Expression > expressions ) { this . expressionList = expressions ; this . batch ( ) ; } @ Override public String getShortName ( ) { return "resequencer" ; } public ResequencerType stream ( ) { return stream ( StreamResequencerConfig . getDefault ( ) ) ; } public ResequencerType batch ( ) { return batch ( BatchResequencerConfig . getDefault ( ) ) ; } public ResequencerType stream ( StreamResequencerConfig config ) { this . streamConfig = config ; this . batchConfig = null ; return this ; } public ResequencerType batch ( BatchResequencerConfig config ) { this . batchConfig = config ; this . streamConfig = null ; return this ; } public ResequencerType expression ( ExpressionType expression ) { expressions . add ( expression ) ; return this ; } @ Override public String toString ( ) { return "Resequencer[ " + getExpressions ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return ExpressionType . getLabel ( getExpressions ( ) ) ; } public List < ExpressionType > getExpressions ( ) { return expressions ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public BatchResequencerConfig getBatchConfig ( ) { return batchConfig ; } public BatchResequencerConfig getBatchConfig ( BatchResequencerConfig defaultConfig ) { return batchConfig ; } public StreamResequencerConfig getStreamConfig ( ) { return streamConfig ; } @ XmlElement ( name = "batch-config" , required = false ) public void setBatchConfig ( BatchResequencerConfig batchConfig ) { batch ( batchConfig ) ; } @ XmlElement ( name = "stream-config" , required = false ) public void setStreamConfig ( StreamResequencerConfig streamConfig ) { stream ( streamConfig ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { if ( batchConfig != null ) { return createBatchResequencer ( routeContext , batchConfig ) ; } else { return createStreamResequencer ( routeContext , streamConfig ) ; } } @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { if ( batchConfig != null ) { routes . add ( createBatchResequencerRoute ( routeContext ) ) ; } else { super . addRoutes ( routeContext , routes ) ; } } private Route < ? extends Exchange > createBatchResequencerRoute ( RouteContext routeContext ) throws Exception { final Resequencer resequencer = createBatchResequencer ( routeContext , batchConfig ) ; return new Route ( routeContext . getEndpoint ( ) , resequencer ) { @ Override public String toString ( ) { return "BatchResequencerRoute[" + getEndpoint ( ) + " -> " + resequencer . getProcessor ( ) + "]" ; } } ; } protected Resequencer createBatchResequencer ( RouteContext routeContext , BatchResequencerConfig config ) throws Exception { Processor processor = routeContext . createProcessor ( this ) ; Resequencer resequencer = new Resequencer ( routeContext . getEndpoint ( ) , processor , resolveExpressionList ( routeContext ) ) ; resequencer . setBatchSize ( config . getBatchSize ( ) ) ; resequencer . setBatchTimeout ( config . getBatchTimeout ( ) ) ; return resequencer ; } protected StreamResequencer createStreamResequencer ( RouteContext routeContext , StreamResequencerConfig config ) throws Exception { config . getComparator ( ) . setExpressions ( resolveExpressionList ( routeContext ) ) ; Processor processor = routeContext . createProcessor ( this ) ; StreamResequencer resequencer = new StreamResequencer ( processor , config . getComparator ( ) , config . getCapacity ( ) ) ; resequencer . setTimeout ( config . getTimeout ( ) ) ; return resequencer ; } private List < Expression > resolveExpressionList ( RouteContext routeContext ) { if ( expressionList == null ) { expressionList = new ArrayList < Expression > ( ) ; for ( ExpressionType expression : expressions ) { expressionList . add ( expression . createExpression ( routeContext ) ) ; } } if ( expressionList . isEmpty ( ) ) { throw new IllegalArgumentException ( "No expressions configured for: " + this ) ; } return expressionList ; } } 	1
package org . apache . camel . impl . converter ; public class CachingInjector < T > { private final TypeConverterRegistry repository ; private final Class < T > type ; private T instance ; public CachingInjector ( TypeConverterRegistry repository , Class < T > type ) { this . repository = repository ; this . type = type ; } public synchronized T newInstance ( ) { if ( instance == null ) { instance = createInstance ( type ) ; } return instance ; } protected T createInstance ( Class < T > t ) { return repository . getInjector ( ) . newInstance ( t ) ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . util . ObjectHelper ; public class DefaultProducerTemplate < E extends Exchange > extends ServiceSupport implements ProducerTemplate < E > { private CamelContext context ; private final ProducerCache < E > producerCache = new ProducerCache < E > ( ) ; private boolean useEndpointCache = true ; private final Map < String , Endpoint < E > > endpointCache = new HashMap < String , Endpoint < E > > ( ) ; private Endpoint < E > defaultEndpoint ; public DefaultProducerTemplate ( CamelContext context ) { this . context = context ; } public DefaultProducerTemplate ( CamelContext context , Endpoint defaultEndpoint ) { this ( context ) ; this . defaultEndpoint = defaultEndpoint ; } public E send ( String endpointUri , E exchange ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , exchange ) ; } public E send ( String endpointUri , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor ) ; } public E send ( String endpointUri , Processor processor , AsyncCallback callback ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor , callback ) ; } public E send ( String endpointUri , ExchangePattern pattern , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , pattern , processor ) ; } public E send ( Endpoint < E > endpoint , E exchange ) { E convertedExchange = exchange ; producerCache . send ( endpoint , convertedExchange ) ; return convertedExchange ; } public E send ( Endpoint < E > endpoint , Processor processor ) { return producerCache . send ( endpoint , processor ) ; } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { return producerCache . send ( endpoint , processor , callback ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { return producerCache . send ( endpoint , pattern , processor ) ; } public Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) { E result = send ( endpoint , pattern , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBody ( Endpoint < E > endpoint , Object body ) { E result = send ( endpoint , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result ) ; } public Object sendBody ( String endpointUri , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , body ) ; } public Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , pattern , body ) ; } public Object sendBodyAndHeader ( String endpointUri , final Object body , final String header , final Object headerValue ) { return sendBodyAndHeader ( resolveMandatoryEndpoint ( endpointUri ) , body , header , headerValue ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeaders ( String endpointUri , final Object body , final Map < String , Object > headers ) { return sendBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , body , headers ) ; } public Object sendBodyAndHeaders ( Endpoint endpoint , final Object body , final Map < String , Object > headers ) { E result = send ( endpoint , new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; for ( Map . Entry < String , Object > header : headers . entrySet ( ) ) { in . setHeader ( header . getKey ( ) , header . getValue ( ) ) ; } in . setBody ( body ) ; } } ) ; return extractResultBody ( result ) ; } public E request ( Endpoint < E > endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( Endpoint < E > endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public E request ( String endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( String endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( String endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public Object sendBody ( Object body ) { return sendBody ( getMandatoryDefaultEndpoint ( ) , body ) ; } public E send ( E exchange ) { return send ( getMandatoryDefaultEndpoint ( ) , exchange ) ; } public E send ( Processor processor ) { return send ( getMandatoryDefaultEndpoint ( ) , processor ) ; } public Object sendBodyAndHeader ( Object body , String header , Object headerValue ) { return sendBodyAndHeader ( getMandatoryDefaultEndpoint ( ) , body , header , headerValue ) ; } public Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) { return sendBodyAndHeaders ( getMandatoryDefaultEndpoint ( ) , body , headers ) ; } public Producer < E > getProducer ( Endpoint < E > endpoint ) { return producerCache . getProducer ( endpoint ) ; } public CamelContext getContext ( ) { return context ; } public Endpoint < E > getDefaultEndpoint ( ) { return defaultEndpoint ; } public void setDefaultEndpoint ( Endpoint < E > defaultEndpoint ) { this . defaultEndpoint = defaultEndpoint ; } public void setDefaultEndpointUri ( String endpointUri ) { setDefaultEndpoint ( getContext ( ) . getEndpoint ( endpointUri ) ) ; } public boolean isUseEndpointCache ( ) { return useEndpointCache ; } public void setUseEndpointCache ( boolean useEndpointCache ) { this . useEndpointCache = useEndpointCache ; } public < T extends Endpoint < ? > > T getResolvedEndpoint ( String endpointUri , Class < T > expectedClass ) { Endpoint < ? > e = null ; synchronized ( endpointCache ) { e = endpointCache . get ( endpointUri ) ; } if ( e != null && expectedClass . isAssignableFrom ( e . getClass ( ) ) ) { return expectedClass . asSubclass ( expectedClass ) . cast ( e ) ; } return null ; } protected Processor createBodyAndHeaderProcessor ( final Object body , final String header , final Object headerValue ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setHeader ( header , headerValue ) ; in . setBody ( body ) ; } } ; } protected Processor createSetBodyProcessor ( final Object body ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setBody ( body ) ; } } ; } protected Endpoint resolveMandatoryEndpoint ( String endpointUri ) { Endpoint endpoint = null ; if ( isUseEndpointCache ( ) ) { synchronized ( endpointCache ) { endpoint = endpointCache . get ( endpointUri ) ; if ( endpoint == null ) { endpoint = context . getEndpoint ( endpointUri ) ; if ( endpoint != null ) { endpointCache . put ( endpointUri , endpoint ) ; } } } } else { endpoint = context . getEndpoint ( endpointUri ) ; } if ( endpoint == null ) { throw new NoSuchEndpointException ( endpointUri ) ; } return endpoint ; } protected Endpoint < E > getMandatoryDefaultEndpoint ( ) { Endpoint < E > answer = getDefaultEndpoint ( ) ; ObjectHelper . notNull ( answer , "defaultEndpoint" ) ; return answer ; } protected void doStart ( ) throws Exception { producerCache . start ( ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; endpointCache . clear ( ) ; } protected Object extractResultBody ( E result ) { return extractResultBody ( result , null ) ; } protected Object extractResultBody ( E result , ExchangePattern pattern ) { Object answer = null ; if ( result != null ) { boolean notOut = pattern != null && ! pattern . isOutCapable ( ) ; boolean hasOut = result . getOut ( false ) != null ; if ( hasOut && ! notOut ) { answer = result . getOut ( ) . getBody ( ) ; } else { answer = result . getIn ( ) . getBody ( ) ; } } return answer ; } } 	1
package org . apache . camel . component . cxf . transport ; import java . io . IOException ; import java . util . Collection ; import java . util . HashSet ; import java . util . Set ; import javax . annotation . PostConstruct ; import javax . annotation . Resource ; import org . apache . camel . CamelContext ; import org . apache . cxf . Bus ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . transport . AbstractTransportFactory ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . ConduitInitiator ; import org . apache . cxf . transport . ConduitInitiatorManager ; import org . apache . cxf . transport . Destination ; import org . apache . cxf . transport . DestinationFactory ; import org . apache . cxf . transport . DestinationFactoryManager ; import org . apache . cxf . ws . addressing . EndpointReferenceType ; public class CamelTransportFactory extends AbstractTransportFactory implements ConduitInitiator , DestinationFactory { public static final String TRANSPORT_ID = "http://cxf.apache.org/transports/camel" ; private static final Set < String > URI_PREFIXES = new HashSet < String > ( ) ; private Collection < String > activationNamespaces ; static { URI_PREFIXES . add ( "camel://" ) ; } private Bus bus ; private CamelContext camelContext ; @ Resource ( name = "bus" ) public void setBus ( Bus b ) { bus = b ; } public Bus getBus ( ) { return bus ; } @ Resource public void setActivationNamespaces ( Collection < String > ans ) { activationNamespaces = ans ; } public CamelContext getCamelContext ( ) { return camelContext ; } @ Resource ( name = "camelContext" ) public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public Conduit getConduit ( EndpointInfo targetInfo ) throws IOException { return getConduit ( targetInfo , null ) ; } public Conduit getConduit ( EndpointInfo endpointInfo , EndpointReferenceType target ) throws IOException { return new CamelConduit ( camelContext , bus , endpointInfo , target ) ; } public Destination getDestination ( EndpointInfo endpointInfo ) throws IOException { return new CamelDestination ( camelContext , bus , this , endpointInfo ) ; } public Set < String > getUriPrefixes ( ) { return URI_PREFIXES ; } @ PostConstruct void registerWithBindingManager ( ) { if ( null == bus ) { return ; } ConduitInitiatorManager cim = bus . getExtension ( ConduitInitiatorManager . class ) ; if ( null != cim && null != activationNamespaces ) { for ( String ns : activationNamespaces ) { cim . registerConduitInitiator ( ns , this ) ; } } DestinationFactoryManager dfm = bus . getExtension ( DestinationFactoryManager . class ) ; if ( null != dfm && null != activationNamespaces ) { for ( String ns : activationNamespaces ) { dfm . registerDestinationFactory ( ns , this ) ; } } } } 	0
package org . apache . camel . component . mock ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . ValueBuilder ; import static org . apache . camel . builder . ExpressionBuilder . bodyExpression ; import static org . apache . camel . builder . ExpressionBuilder . headerExpression ; public abstract class AssertionClause implements Runnable { private List < Predicate < Exchange > > predicates = new ArrayList < Predicate < Exchange > > ( ) ; public AssertionClause predicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return this ; } public ExpressionClause < AssertionClause > predicate ( ) { ExpressionClause < AssertionClause > clause = new ExpressionClause < AssertionClause > ( this ) ; addPredicate ( clause ) ; return clause ; } public ValueBuilder < Exchange > header ( String name ) { Expression < Exchange > expression = headerExpression ( name ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder body ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder bodyAs ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder outBody ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder outBody ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } protected void applyAssertionOn ( MockEndpoint endpoint , int index , Exchange exchange ) { for ( Predicate < Exchange > predicate : predicates ) { predicate . assertMatches ( endpoint . getEndpointUri ( ) + " " , exchange ) ; } } protected void addPredicate ( Predicate < Exchange > predicate ) { predicates . add ( predicate ) ; } public class PredicateValueBuilder extends ValueBuilder < Exchange > { public PredicateValueBuilder ( Expression < Exchange > expression ) { super ( expression ) ; } protected Predicate < Exchange > onNewPredicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return predicate ; } } } 	1
package org . apache . camel . component . cxf . util ; import java . util . logging . Logger ; import javax . xml . stream . XMLStreamException ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMSource ; import org . w3c . dom . Document ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . AbstractInDatabindingInterceptor ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . staxutils . DepthXMLStreamReader ; import org . apache . cxf . staxutils . StaxUtils ; public class DataInInterceptor extends AbstractInDatabindingInterceptor { private static final Logger LOG = LogUtils . getL7dLogger ( DataInInterceptor . class ) ; public DataInInterceptor ( ) { super ( Phase . UNMARSHAL ) ; } public void handleMessage ( Message message ) throws Fault { DepthXMLStreamReader xmlReader = getXMLStreamReader ( message ) ; try { Document doc = StaxUtils . read ( xmlReader ) ; message . setContent ( Source . class , new DOMSource ( doc ) ) ; } catch ( XMLStreamException e ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "XMLSTREAM_EXCEPTION" , LOG ) , e ) ; } } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . DelegateProcessor ; @ XmlRootElement ( name = "routes" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RoutesType extends OptionalIdentifiedType < RoutesType > implements RouteContainer { @ XmlAttribute private Boolean inheritErrorHandlerFlag ; @ XmlElementRef private List < RouteType > routes = new ArrayList < RouteType > ( ) ; @ XmlElementRef private List < ServiceActivationType > activations = new ArrayList < ServiceActivationType > ( ) ; @ XmlTransient private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlTransient private List < InterceptType > intercepts = new ArrayList < InterceptType > ( ) ; @ XmlTransient private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; @ XmlTransient private CamelContext camelContext ; @ XmlTransient private ErrorHandlerBuilder errorHandlerBuilder ; @ Override public String toString ( ) { return "Routes: " + routes ; } public List < RouteType > getRoutes ( ) { return routes ; } public void setRoutes ( List < RouteType > routes ) { this . routes = routes ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < InterceptType > getIntercepts ( ) { return intercepts ; } public void setIntercepts ( List < InterceptType > intercepts ) { this . intercepts = intercepts ; } public List < ExceptionType > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < ExceptionType > exceptions ) { this . exceptions = exceptions ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public boolean isInheritErrorHandler ( ) { return ProcessorType . isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public RouteType route ( ) { RouteType route = createRoute ( ) ; return route ( route ) ; } public RouteType from ( String uri ) { RouteType route = createRoute ( ) ; route . from ( uri ) ; return route ( route ) ; } public RouteType from ( Endpoint endpoint ) { RouteType route = createRoute ( ) ; route . from ( endpoint ) ; return route ( route ) ; } public RouteType route ( RouteType route ) { route . setCamelContext ( getCamelContext ( ) ) ; route . setInheritErrorHandlerFlag ( getInheritErrorHandlerFlag ( ) ) ; List < InterceptorType > list = getInterceptors ( ) ; for ( InterceptorType interceptorType : list ) { route . addInterceptor ( interceptorType ) ; } List < InterceptType > intercepts = getIntercepts ( ) ; for ( InterceptType intercept : intercepts ) { InterceptType proxy = intercept . createProxy ( ) ; route . addOutput ( proxy ) ; route . pushBlock ( proxy . getProceed ( ) ) ; } route . getOutputs ( ) . addAll ( getExceptions ( ) ) ; getRoutes ( ) . add ( route ) ; return route ; } public RoutesType intercept ( DelegateProcessor interceptor ) { getInterceptors ( ) . add ( new InterceptorRef ( interceptor ) ) ; return this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer . when ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; getExceptions ( ) . add ( answer ) ; return answer ; } protected RouteType createRoute ( ) { RouteType route = new RouteType ( ) ; ErrorHandlerBuilder handler = getErrorHandlerBuilder ( ) ; if ( isInheritErrorHandler ( ) && handler != null ) { route . setErrorHandlerBuilderIfNull ( handler ) ; } return route ; } } 	1
package org . apache . camel . component . cxf . util ; import java . lang . annotation . Annotation ; import java . net . URI ; import java . net . URL ; import java . util . logging . Logger ; import javax . jws . WebService ; import javax . xml . namespace . QName ; import javax . xml . ws . WebServiceProvider ; import org . apache . camel . CamelException ; import org . apache . camel . component . cxf . CxfConstants ; import org . apache . camel . component . cxf . CxfEndpoint ; import org . apache . camel . component . cxf . DataFormat ; import org . apache . camel . component . cxf . spring . CxfEndpointBean ; import org . apache . cxf . Bus ; import org . apache . cxf . common . classloader . ClassLoaderUtils ; import org . apache . cxf . common . i18n . Message ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . frontend . ClientFactoryBean ; import org . apache . cxf . frontend . ServerFactoryBean ; import org . apache . cxf . jaxws . JaxWsClientFactoryBean ; import org . apache . cxf . jaxws . JaxWsServerFactoryBean ; import org . apache . cxf . jaxws . support . JaxWsServiceFactoryBean ; import org . apache . cxf . service . Service ; import org . apache . cxf . service . factory . AbstractServiceFactoryBean ; import org . apache . cxf . service . factory . ReflectionServiceFactoryBean ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . wsdl11 . WSDLServiceFactory ; public final class CxfEndpointUtils { public static final String PROP_NAME_PORT = "port" ; public static final String PROP_NAME_SERVICE = "service" ; public static final String PROP_NAME_SERVICECLASS = "serviceClass" ; public static final String PROP_NAME_DATAFORMAT = "dataFormat" ; public static final String DATAFORMAT_POJO = "pojo" ; public static final String DATAFORMAT_MESSAGE = "message" ; public static final String DATAFORMAT_PAYLOAD = "payload" ; private static final Logger LOG = LogUtils . getL7dLogger ( CxfEndpointUtils . class ) ; private CxfEndpointUtils ( ) { } static QName getQName ( final String name ) { QName qName = null ; if ( name != null ) { try { qName = QName . valueOf ( name ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } } return qName ; } public static QName getPortName ( final CxfEndpoint endpoint ) { return getQName ( endpoint . getPortName ( ) ) ; } public static QName getServiceName ( final CxfEndpoint endpoint ) { return getQName ( endpoint . getServiceName ( ) ) ; } public static EndpointInfo getEndpointInfo ( final Service service , final CxfEndpoint endpoint ) { EndpointInfo endpointInfo = null ; final java . util . Collection < EndpointInfo > endpoints = service . getServiceInfos ( ) . get ( 0 ) . getEndpoints ( ) ; if ( endpoints . size ( ) == 1 ) { endpointInfo = endpoints . iterator ( ) . next ( ) ; } else { final String port = endpoint . getPortName ( ) ; if ( port != null ) { final QName endpointName = QName . valueOf ( port ) ; endpointInfo = service . getServiceInfos ( ) . get ( 0 ) . getEndpoint ( endpointName ) ; } } return endpointInfo ; } public static Class getSEIClass ( String className ) throws ClassNotFoundException { if ( className == null ) { return null ; } else { return ClassLoaderUtils . loadClass ( className , CxfEndpointUtils . class ) ; } } public static boolean hasWebServiceAnnotation ( Class < ? > cls ) { return hasAnnotation ( cls , WebService . class ) || hasAnnotation ( cls , WebServiceProvider . class ) ; } public static boolean hasAnnotation ( Class < ? > cls , Class < ? extends Annotation > annotation ) { if ( cls == null || cls == Object . class ) { return false ; } if ( null != cls . getAnnotation ( annotation ) ) { return true ; } for ( Class < ? > interfaceClass : cls . getInterfaces ( ) ) { if ( null != interfaceClass . getAnnotation ( annotation ) ) { return true ; } } return hasAnnotation ( cls . getSuperclass ( ) , annotation ) ; } public static ServerFactoryBean getServerFactoryBean ( Class < ? > cls ) throws CamelException { ServerFactoryBean serverFactory = null ; try { if ( cls == null ) { serverFactory = new ServerFactoryBean ( ) ; serverFactory . setServiceFactory ( new WSDLSoapServiceFactoryBean ( ) ) ; } else { boolean isJSR181SEnabled = CxfEndpointUtils . hasWebServiceAnnotation ( cls ) ; serverFactory = isJSR181SEnabled ? new JaxWsServerFactoryBean ( ) : new ServerFactoryBean ( ) ; } return serverFactory ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } public static ClientFactoryBean getClientFactoryBean ( Class < ? > cls ) throws CamelException { ClientFactoryBean clientFactory = null ; try { if ( cls == null ) { clientFactory = new ClientFactoryBean ( ) ; clientFactory . setServiceFactory ( new WSDLSoapServiceFactoryBean ( ) ) ; } else { boolean isJSR181SEnabled = CxfEndpointUtils . hasWebServiceAnnotation ( cls ) ; clientFactory = isJSR181SEnabled ? new JaxWsClientFactoryBean ( ) : new ClientFactoryBean ( ) ; } return clientFactory ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } public static void checkEndpiontIntegration ( CxfEndpoint endpoint , Bus bus ) throws CamelException { String wsdlLocation = endpoint . getWsdlURL ( ) ; QName serviceQName = CxfEndpointUtils . getQName ( endpoint . getServiceName ( ) ) ; String serviceClassName = endpoint . getServiceClass ( ) ; DataFormat dataFormat = CxfEndpointUtils . getDataFormat ( endpoint ) ; URL wsdlUrl = null ; if ( wsdlLocation != null ) { try { wsdlUrl = UriUtils . getWsdlUrl ( new URI ( wsdlLocation ) ) ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } if ( serviceQName == null ) { throw new CamelException ( new Message ( "SVC_QNAME_NOT_FOUND_X" , LOG , endpoint . getServiceName ( ) ) . toString ( ) ) ; } if ( serviceClassName == null && dataFormat == DataFormat . POJO ) { throw new CamelException ( new Message ( "SVC_CLASS_PROP_IS_REQUIRED_X" , LOG ) . toString ( ) ) ; } AbstractServiceFactoryBean serviceFactory = null ; try { if ( serviceClassName != null ) { Class < ? > cls = ClassLoaderUtils . loadClass ( serviceClassName , CxfEndpointUtils . class ) ; boolean isJSR181SEnabled = CxfEndpointUtils . hasWebServiceAnnotation ( cls ) ; serviceFactory = isJSR181SEnabled ? new JaxWsServiceFactoryBean ( ) : new ReflectionServiceFactoryBean ( ) ; serviceFactory . setBus ( bus ) ; if ( wsdlUrl != null ) { ( ( ReflectionServiceFactoryBean ) serviceFactory ) . setWsdlURL ( wsdlUrl ) ; } if ( serviceQName != null ) { ( ( ReflectionServiceFactoryBean ) serviceFactory ) . setServiceName ( serviceQName ) ; } ( ( ReflectionServiceFactoryBean ) serviceFactory ) . setServiceClass ( cls ) ; } else { if ( wsdlUrl == null ) { throw new CamelException ( new Message ( "SVC_WSDL_URL_IS_NULL_X" , LOG , wsdlLocation ) . toString ( ) ) ; } serviceFactory = new WSDLServiceFactory ( bus , wsdlUrl , serviceQName ) ; } } catch ( ClassNotFoundException cnfe ) { throw new CamelException ( new Message ( "CLASS_X_NOT_FOUND " , LOG , serviceClassName ) . toString ( ) , cnfe ) ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } public static boolean getSetDefaultBus ( CxfEndpoint endpoint ) { Boolean isSetDefaultBus = null ; CxfEndpointBean cxfEndpointBean = endpoint . getCxfEndpointBean ( ) ; if ( cxfEndpointBean != null && cxfEndpointBean . getProperties ( ) != null ) { String value = ( String ) cxfEndpointBean . getProperties ( ) . get ( CxfConstants . SET_DEFAULT_BUS ) ; isSetDefaultBus = Boolean . valueOf ( value ) ; } if ( isSetDefaultBus != null && endpoint . isSetDefaultBus ( ) == null ) { return isSetDefaultBus . booleanValue ( ) ; } else if ( endpoint . isSetDefaultBus ( ) != null ) { return endpoint . isSetDefaultBus ( ) . booleanValue ( ) ; } else { return false ; } } public static DataFormat getDataFormat ( CxfEndpoint endpoint ) throws CamelException { String dataFormatString = endpoint . getDataFormat ( ) ; if ( dataFormatString == null ) { CxfEndpointBean cxfEndpointBean = endpoint . getCxfEndpointBean ( ) ; if ( cxfEndpointBean != null && cxfEndpointBean . getProperties ( ) != null ) { dataFormatString = ( String ) cxfEndpointBean . getProperties ( ) . get ( CxfConstants . DATA_FORMAT ) ; } } if ( dataFormatString == null ) { return DataFormat . POJO ; } DataFormat retval = DataFormat . asEnum ( dataFormatString ) ; if ( retval == DataFormat . UNKNOWN ) { throw new CamelException ( new Message ( "INVALID_MESSAGE_FORMAT_XXXX" , LOG , dataFormatString ) . toString ( ) ) ; } return retval ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . ErrorHandlerSupport ; public abstract class ErrorHandlerBuilderSupport implements ErrorHandlerBuilder { private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; public void addErrorHandlers ( ExceptionType exception ) { exceptions . add ( exception ) ; } protected void configure ( ErrorHandlerSupport handler ) { for ( ExceptionType exception : exceptions ) { handler . addExceptionPolicy ( exception ) ; } } public List < ExceptionType > getExceptions ( ) { return exceptions ; } } 	1
package org . apache . camel . component . event ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class EventConsumer extends DefaultConsumer < Exchange > { private EventEndpoint endpoint ; public EventConsumer ( EventEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; endpoint . consumerStarted ( this ) ; } @ Override protected void doStop ( ) throws Exception { endpoint . consumerStopped ( this ) ; super . doStop ( ) ; } } 	0
package org . apache . camel . component . file . strategy ; public class NoOpFileProcessStrategy extends FileProcessStrategySupport { public NoOpFileProcessStrategy ( ) { super ( true ) ; } public NoOpFileProcessStrategy ( boolean isLock ) { super ( isLock ) ; } } 	1
package org . apache . camel . component . validator . jing ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . component . ResourceBasedComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . springframework . core . io . Resource ; public class JingComponent extends ResourceBasedComponent { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { JingValidator validator = new JingValidator ( ) ; Resource resource = resolveMandatoryResource ( remaining ) ; validator . setSchemaResource ( resource ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( this + " using schema resource: " + resource ) ; } configureValidator ( validator , uri , remaining , parameters ) ; return new ProcessorEndpoint ( uri , this , validator ) ; } protected void configureValidator ( JingValidator validator , String uri , String remaining , Map parameters ) throws Exception { setProperties ( validator , parameters ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . model . InterceptType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . RoutesType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public abstract class RouteBuilder extends BuilderSupport implements Routes { private AtomicBoolean initialized = new AtomicBoolean ( false ) ; private RoutesType routeCollection = new RoutesType ( ) ; private List < Route > routes = new ArrayList < Route > ( ) ; public RouteBuilder ( ) { this ( null ) ; } public RouteBuilder ( CamelContext context ) { super ( context ) ; } @ Override public String toString ( ) { return routeCollection . toString ( ) ; } public abstract void configure ( ) throws Exception ; public RouteType from ( String uri ) { RouteType answer = routeCollection . from ( uri ) ; configureRoute ( answer ) ; return answer ; } public RouteType from ( Endpoint endpoint ) { RouteType answer = routeCollection . from ( endpoint ) ; configureRoute ( answer ) ; return answer ; } public RouteBuilder errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return this ; } public RouteBuilder inheritErrorHandler ( boolean value ) { routeCollection . setInheritErrorHandlerFlag ( value ) ; return this ; } public RouteBuilder intercept ( DelegateProcessor interceptor ) { routeCollection . intercept ( interceptor ) ; return this ; } public InterceptType intercept ( ) { return routeCollection . intercept ( ) ; } public ChoiceType intercept ( Predicate predicate ) { return routeCollection . intercept ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { return routeCollection . exception ( exceptionType ) ; } public CamelContext getContext ( ) { CamelContext context = super . getContext ( ) ; if ( context == null ) { context = createContainer ( ) ; setContext ( context ) ; } return context ; } public List < Route > getRouteList ( ) throws Exception { checkInitialized ( ) ; return routes ; } @ Override public void setInheritErrorHandler ( boolean inheritErrorHandler ) { super . setInheritErrorHandler ( inheritErrorHandler ) ; routeCollection . setInheritErrorHandlerFlag ( inheritErrorHandler ) ; } @ Override public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { super . setErrorHandlerBuilder ( errorHandlerBuilder ) ; routeCollection . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } protected void checkInitialized ( ) throws Exception { if ( initialized . compareAndSet ( false , true ) ) { configure ( ) ; populateRoutes ( routes ) ; } } protected void populateRoutes ( List < Route > routes ) throws Exception { CamelContext camelContext = getContext ( ) ; if ( camelContext == null ) { throw new IllegalArgumentException ( "No CamelContext has been injected!" ) ; } routeCollection . setCamelContext ( camelContext ) ; camelContext . addRouteDefinitions ( routeCollection . getRoutes ( ) ) ; } public void setRouteCollection ( RoutesType routeCollection ) { this . routeCollection = routeCollection ; } public RoutesType getRouteCollection ( ) { return this . routeCollection ; } public void noStreamCaching ( ) { StreamCachingInterceptor . noStreamCaching ( routeCollection . getInterceptors ( ) ) ; } public void streamCaching ( ) { routeCollection . intercept ( new StreamCachingInterceptor ( ) ) ; } protected CamelContext createContainer ( ) { return new DefaultCamelContext ( ) ; } protected void configureRoute ( RouteType route ) { route . setGroup ( getClass ( ) . getName ( ) ) ; } } 	1
package org . apache . camel . component . list ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . List ; import java . util . concurrent . CopyOnWriteArrayList ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . processor . loadbalancer . LoadBalancerConsumer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . apache . camel . spi . BrowsableEndpoint ; public class ListEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private List < Exchange > exchanges ; private TopicLoadBalancer loadBalancer = new TopicLoadBalancer ( ) ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; public ListEndpoint ( String uri , CamelContext camelContext ) { super ( uri , camelContext ) ; reset ( ) ; } public ListEndpoint ( String uri , Component component ) { super ( uri , component ) ; reset ( ) ; } public ListEndpoint ( String endpointUri ) { super ( endpointUri ) ; reset ( ) ; } public boolean isSingleton ( ) { return true ; } public List < Exchange > getExchanges ( ) { return exchanges ; } public TopicLoadBalancer getLoadBalancer ( ) { return loadBalancer ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) throws Exception { onExchange ( exchange ) ; } } ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { return new LoadBalancerConsumer ( this , processor , loadBalancer ) ; } public void reset ( ) { exchanges = createExchangeList ( ) ; } protected List < Exchange > createExchangeList ( ) { return new CopyOnWriteArrayList < Exchange > ( ) ; } protected void onExchange ( Exchange exchange ) throws Exception { exchanges . add ( exchange ) ; loadBalancer . process ( exchange ) ; } } 	0
package org . apache . camel . util ; import java . beans . PropertyEditor ; import java . beans . PropertyEditorManager ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Set ; import org . apache . camel . TypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class IntrospectionSupport { private static final transient Log LOG = LogFactory . getLog ( IntrospectionSupport . class ) ; private IntrospectionSupport ( ) { } public static boolean getProperties ( Object target , Map props , String optionPrefix ) { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } if ( optionPrefix == null ) { optionPrefix = "" ; } Class clazz = target . getClass ( ) ; Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { String name = method . getName ( ) ; Class type = method . getReturnType ( ) ; Class params [ ] = method . getParameterTypes ( ) ; if ( name . startsWith ( "get" ) && params . length == 0 && type != null && isSettableType ( type ) ) { try { Object value = method . invoke ( target ) ; if ( value == null ) { continue ; } String strValue = convertToString ( value , type ) ; if ( strValue == null ) { continue ; } name = name . substring ( 3 , 4 ) . toLowerCase ( ) + name . substring ( 4 ) ; props . put ( optionPrefix + name , strValue ) ; rc = true ; } catch ( Throwable ignore ) { } } } return rc ; } public static Object getProperty ( Object target , String prop ) throws SecurityException , NoSuchMethodException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( prop == null ) { throw new IllegalArgumentException ( "prop was null." ) ; } prop = prop . substring ( 0 , 1 ) . toUpperCase ( ) + prop . substring ( 1 ) ; Class clazz = target . getClass ( ) ; Method method = getPropertyGetter ( clazz , prop ) ; return method . invoke ( target ) ; } public static Method getPropertyGetter ( Class type , String propertyName ) throws NoSuchMethodException { Method method = type . getMethod ( "get" + ObjectHelper . capitalize ( propertyName ) ) ; return method ; } public static boolean setProperties ( Object target , Map props , String optionPrefix ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; if ( setProperty ( target , name , value ) ) { iter . remove ( ) ; rc = true ; } } } return rc ; } public static Map extractProperties ( Map props , String optionPrefix ) { if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } HashMap rc = new HashMap ( props . size ( ) ) ; for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; rc . put ( name , value ) ; iter . remove ( ) ; } } return rc ; } public static boolean setProperties ( TypeConverter typeConverter , Object target , Map props ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( setProperty ( typeConverter , target , ( String ) entry . getKey ( ) , entry . getValue ( ) ) ) { iter . remove ( ) ; rc = true ; } } return rc ; } public static boolean setProperties ( Object target , Map props ) throws Exception { return setProperties ( null , target , props ) ; } public static boolean setProperty ( TypeConverter typeConverter , Object target , String name , Object value ) throws Exception { try { Class clazz = target . getClass ( ) ; Method setter = findSetterMethod ( typeConverter , clazz , name , value ) ; if ( setter == null ) { return false ; } if ( value == null || value . getClass ( ) == setter . getParameterTypes ( ) [ 0 ] ) { setter . invoke ( target , value ) ; } else { Object convertedValue = convert ( typeConverter , setter . getParameterTypes ( ) [ 0 ] , value ) ; setter . invoke ( target , convertedValue ) ; } return true ; } catch ( InvocationTargetException e ) { Throwable throwable = e . getTargetException ( ) ; if ( throwable instanceof Exception ) { Exception exception = ( Exception ) throwable ; throw exception ; } else { Error error = ( Error ) throwable ; throw error ; } } } public static boolean setProperty ( Object target , String name , Object value ) throws Exception { return setProperty ( null , target , name , value ) ; } private static Object convert ( TypeConverter typeConverter , Class type , Object value ) throws URISyntaxException { if ( typeConverter != null ) { Object answer = typeConverter . convertTo ( type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Could not convert \"" + value + "\" to " + type . getName ( ) ) ; } return answer ; } PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setAsText ( value . toString ( ) ) ; return editor . getValue ( ) ; } if ( type == URI . class ) { return new URI ( value . toString ( ) ) ; } return null ; } private static String convertToString ( Object value , Class type ) throws URISyntaxException { PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setValue ( value ) ; return editor . getAsText ( ) ; } if ( type == URI . class ) { return value . toString ( ) ; } return null ; } private static Method findSetterMethod ( TypeConverter typeConverter , Class clazz , String name , Object value ) { name = "set" + ObjectHelper . capitalize ( name ) ; while ( clazz != Object . class ) { Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { Class params [ ] = method . getParameterTypes ( ) ; if ( method . getName ( ) . equals ( name ) && params . length == 1 ) { Class paramType = params [ 0 ] ; if ( typeConverter != null || isSettableType ( paramType ) || paramType . isInstance ( value ) ) { return method ; } } } clazz = clazz . getSuperclass ( ) ; } return null ; } private static boolean isSettableType ( Class clazz ) { if ( PropertyEditorManager . findEditor ( clazz ) != null ) { return true ; } if ( clazz == URI . class ) { return true ; } if ( clazz == Boolean . class ) { return true ; } return false ; } public static String toString ( Object target ) { return toString ( target , Object . class ) ; } public static String toString ( Object target , Class stopClass ) { LinkedHashMap map = new LinkedHashMap ( ) ; addFields ( target , target . getClass ( ) , stopClass , map ) ; StringBuffer buffer = new StringBuffer ( simpleName ( target . getClass ( ) ) ) ; buffer . append ( " {" ) ; Set entrySet = map . entrySet ( ) ; boolean first = true ; for ( Iterator iter = entrySet . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( first ) { first = false ; } else { buffer . append ( ", " ) ; } buffer . append ( entry . getKey ( ) ) ; buffer . append ( " = " ) ; appendToString ( buffer , entry . getValue ( ) ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } protected static void appendToString ( StringBuffer buffer , Object value ) { buffer . append ( value ) ; } public static String simpleName ( Class clazz ) { String name = clazz . getName ( ) ; int p = name . lastIndexOf ( "." ) ; if ( p >= 0 ) { name = name . substring ( p + 1 ) ; } return name ; } private static void addFields ( Object target , Class startClass , Class stopClass , LinkedHashMap map ) { if ( startClass != stopClass ) { addFields ( target , startClass . getSuperclass ( ) , stopClass , map ) ; } Field [ ] fields = startClass . getDeclaredFields ( ) ; for ( Field field : fields ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) || Modifier . isTransient ( field . getModifiers ( ) ) || Modifier . isPrivate ( field . getModifiers ( ) ) ) { continue ; } try { field . setAccessible ( true ) ; Object o = field . get ( target ) ; if ( o != null && o . getClass ( ) . isArray ( ) ) { try { o = Arrays . asList ( ( Object [ ] ) o ) ; } catch ( Throwable e ) { } } map . put ( field . getName ( ) , o ) ; } catch ( Throwable e ) { LOG . debug ( "Error adding fields" , e ) ; } } } } 	1
package org . apache . camel . language ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . RuntimeCamelException ; public class ExpressionEvaluationException extends RuntimeCamelException { private final Expression < Exchange > expression ; private final Exchange exchange ; public ExpressionEvaluationException ( Expression < Exchange > expression , Exchange exchange , Throwable cause ) { super ( cause ) ; this . expression = expression ; this . exchange = exchange ; } public Expression < Exchange > getExpression ( ) { return expression ; } public Exchange getExchange ( ) { return exchange ; } } 	0
package org . apache . camel . view ; import java . io . PrintWriter ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; public class RouteDotGenerator extends GraphGeneratorSupport { public RouteDotGenerator ( String dir ) { super ( dir , ".dot" ) ; } protected void printRoutes ( PrintWriter writer , Map < String , List < RouteType > > map ) { Set < Map . Entry < String , List < RouteType > > > entries = map . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { String group = entry . getKey ( ) ; printRoutes ( writer , group , entry . getValue ( ) ) ; } } protected void printRoutes ( PrintWriter writer , String group , List < RouteType > routes ) { if ( group != null ) { writer . println ( "subgraph cluster_" + ( clusterCounter ++ ) + " {" ) ; writer . println ( "label = \"" + group + "\";" ) ; writer . println ( "color = grey;" ) ; writer . println ( "style = \"dashed\";" ) ; writer . println ( "URL = \"" + group + ".html\";" ) ; writer . println ( ) ; } for ( RouteType route : routes ) { List < FromType > inputs = route . getInputs ( ) ; for ( FromType input : inputs ) { printRoute ( writer , route , input ) ; } writer . println ( ) ; } if ( group != null ) { writer . println ( "}" ) ; writer . println ( ) ; } } protected String escapeNodeId ( String text ) { return text . replace ( '.' , '_' ) . replace ( "$" , "_" ) ; } protected void printRoute ( PrintWriter writer , final RouteType route , FromType input ) { NodeData nodeData = getNodeData ( input ) ; printNode ( writer , nodeData ) ; NodeData from = nodeData ; for ( ProcessorType output : route . getOutputs ( ) ) { NodeData newData = printNode ( writer , from , output ) ; from = newData ; } } protected NodeData printNode ( PrintWriter writer , NodeData fromData , ProcessorType node ) { if ( node instanceof MulticastType ) { List < ProcessorType > outputs = node . getOutputs ( ) ; for ( ProcessorType output : outputs ) { printNode ( writer , fromData , output ) ; } return fromData ; } NodeData toData = getNodeData ( node ) ; printNode ( writer , toData ) ; if ( fromData != null ) { writer . print ( fromData . id ) ; writer . print ( " -> " ) ; writer . print ( toData . id ) ; writer . println ( " [" ) ; String label = fromData . edgeLabel ; if ( isNotNullAndNonEmpty ( label ) ) { writer . println ( "label = \"" + label + "\"" ) ; } writer . println ( "];" ) ; } List < ProcessorType > outputs = toData . outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { NodeData newData = printNode ( writer , toData , output ) ; if ( ! isMulticastNode ( node ) ) { toData = newData ; } } } return toData ; } protected void printNode ( PrintWriter writer , NodeData data ) { if ( ! data . nodeWritten ) { data . nodeWritten = true ; writer . println ( ) ; writer . print ( data . id ) ; writer . println ( " [" ) ; writer . println ( "label = \"" + data . label + "\"" ) ; writer . println ( "tooltip = \"" + data . tooltop + "\"" ) ; if ( data . url != null ) { writer . println ( "URL = \"" + data . url + "\"" ) ; } String image = data . image ; if ( image != null ) { writer . println ( "shapefile = \"" + image + "\"" ) ; writer . println ( "peripheries=0" ) ; } String shape = data . shape ; if ( shape == null && image != null ) { shape = "custom" ; } if ( shape != null ) { writer . println ( "shape = \"" + shape + "\"" ) ; } writer . println ( "];" ) ; writer . println ( ) ; } } protected void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) { writer . println ( "digraph CamelRoutes {" ) ; writer . println ( ) ; writer . println ( "node [style = \"rounded,filled\", fillcolor = yellow, " + "fontname=\"Helvetica-Oblique\"];" ) ; writer . println ( ) ; printRoutes ( writer , map ) ; writer . println ( "}" ) ; } } 	1
package org . apache . camel . component . xquery ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; public class XQueryLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return XQueryBuilder . xquery ( expression ) ; } public Expression < Exchange > createExpression ( String expression ) { return XQueryBuilder . xquery ( expression ) ; } } 	0
package org . apache . camel . processor ; import java . io . Serializable ; import java . util . Random ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RedeliveryPolicy implements Cloneable , Serializable { protected static transient Random randomNumberGenerator ; private static final transient Log LOG = LogFactory . getLog ( RedeliveryPolicy . class ) ; protected int maximumRedeliveries = 6 ; protected long initialRedeliveryDelay = 1000L ; protected long maximumRedeliveryDelay = 60 * 1000L ; protected double backOffMultiplier = 2 ; protected boolean useExponentialBackOff ; protected double collisionAvoidanceFactor = 0.15d ; protected boolean useCollisionAvoidance ; public RedeliveryPolicy ( ) { } @ Override public String toString ( ) { return "RedeliveryPolicy[maximumRedeliveries=" + maximumRedeliveries + "]" ; } public RedeliveryPolicy copy ( ) { try { return ( RedeliveryPolicy ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( "Could not clone: " + e , e ) ; } } public boolean shouldRedeliver ( int redeliveryCounter ) { if ( getMaximumRedeliveries ( ) < 0 ) { return true ; } return redeliveryCounter < getMaximumRedeliveries ( ) ; } public long sleep ( long redeliveryDelay ) { redeliveryDelay = getRedeliveryDelay ( redeliveryDelay ) ; if ( redeliveryDelay > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + redeliveryDelay + " millis until attempting redelivery" ) ; } try { Thread . sleep ( redeliveryDelay ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Thread interrupted: " + e , e ) ; } } } return redeliveryDelay ; } public long getRedeliveryDelay ( long previousDelay ) { long redeliveryDelay ; if ( previousDelay == 0 ) { redeliveryDelay = initialRedeliveryDelay ; } else if ( useExponentialBackOff && backOffMultiplier > 1 ) { redeliveryDelay = Math . round ( backOffMultiplier * previousDelay ) ; } else { redeliveryDelay = previousDelay ; } if ( useCollisionAvoidance ) { Random random = getRandomNumberGenerator ( ) ; double variance = ( random . nextBoolean ( ) ? collisionAvoidanceFactor : - collisionAvoidanceFactor ) * random . nextDouble ( ) ; redeliveryDelay += redeliveryDelay * variance ; } if ( maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay ) { redeliveryDelay = maximumRedeliveryDelay ; } return redeliveryDelay ; } public RedeliveryPolicy maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicy initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicy useCollisionAvoidance ( ) { setUseCollisionAvoidance ( true ) ; return this ; } public RedeliveryPolicy useExponentialBackOff ( ) { setUseExponentialBackOff ( true ) ; return this ; } public RedeliveryPolicy backOffMultiplier ( double multiplier ) { useExponentialBackOff ( ) ; setBackOffMultiplier ( multiplier ) ; return this ; } public RedeliveryPolicy collisionAvoidancePercent ( double collisionAvoidancePercent ) { useCollisionAvoidance ( ) ; setCollisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public RedeliveryPolicy maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { setMaximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public short getCollisionAvoidancePercent ( ) { return ( short ) Math . round ( collisionAvoidanceFactor * 100 ) ; } public void setCollisionAvoidancePercent ( double collisionAvoidancePercent ) { this . collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d ; } public double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public int getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( int maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public long getMaximumRedeliveryDelay ( ) { return maximumRedeliveryDelay ; } public void setMaximumRedeliveryDelay ( long maximumRedeliveryDelay ) { this . maximumRedeliveryDelay = maximumRedeliveryDelay ; } public boolean isUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public boolean isUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } protected static synchronized Random getRandomNumberGenerator ( ) { if ( randomNumberGenerator == null ) { randomNumberGenerator = new Random ( ) ; } return randomNumberGenerator ; } } 	1
package org . apache . camel . component . cxf ; import java . io . InputStream ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . cxf . endpoint . Client ; import org . apache . cxf . helpers . CastUtils ; import org . apache . cxf . jaxws . support . ContextPropertiesMapping ; import org . apache . cxf . message . Message ; public final class CxfBinding { private CxfBinding ( ) { } public static Object extractBodyFromCxf ( CxfExchange exchange , Message message ) { return getBody ( message ) ; } protected static Object getBody ( Message message ) { Set < Class < ? > > contentFormats = message . getContentFormats ( ) ; if ( contentFormats != null ) { for ( Class < ? > contentFormat : contentFormats ) { Object answer = message . getContent ( contentFormat ) ; if ( answer != null ) { return answer ; } } } return null ; } public static Message createCxfMessage ( CxfExchange exchange ) { Message answer = exchange . getInMessage ( ) ; CxfMessage in = exchange . getIn ( ) ; Object body = in . getBody ( List . class ) ; if ( body instanceof List ) { answer . setContent ( List . class , body ) ; answer . put ( CxfConstants . OPERATION_NAME , ( String ) in . getHeader ( CxfConstants . OPERATION_NAME ) ) ; answer . put ( CxfConstants . OPERATION_NAMESPACE , ( String ) in . getHeader ( CxfConstants . OPERATION_NAMESPACE ) ) ; } else { body = in . getBody ( InputStream . class ) ; if ( body instanceof InputStream ) { answer . setContent ( InputStream . class , body ) ; } } return answer ; } public static void storeCxfResponse ( CxfExchange exchange , Message response ) { CxfMessage out = exchange . getOut ( ) ; if ( response != null ) { out . setMessage ( response ) ; DataFormat dataFormat = ( DataFormat ) exchange . getProperty ( CxfExchange . DATA_FORMAT ) ; if ( dataFormat . equals ( DataFormat . MESSAGE ) ) { out . setBody ( response . getContent ( InputStream . class ) ) ; } if ( dataFormat . equals ( DataFormat . PAYLOAD ) ) { out . setBody ( response ) ; } } } public static void copyMessage ( org . apache . camel . Message camelMessage , org . apache . cxf . message . Message cxfMessage ) { InputStream is = camelMessage . getBody ( InputStream . class ) ; if ( is != null ) { cxfMessage . setContent ( InputStream . class , is ) ; } else { Object result = camelMessage . getBody ( ) ; if ( result != null ) { if ( result instanceof InputStream ) { cxfMessage . setContent ( InputStream . class , result ) ; } else { cxfMessage . setContent ( result . getClass ( ) , result ) ; } } } } public static void storeCXfResponseContext ( Message response , Map < String , Object > context ) { if ( context != null ) { ContextPropertiesMapping . mapResponsefromCxf2Jaxws ( context ) ; response . put ( Client . RESPONSE_CONTEXT , context ) ; } } public static void storeCxfResponse ( CxfExchange exchange , Object response ) { CxfMessage out = exchange . getOut ( ) ; if ( response != null ) { out . setBody ( response ) ; } } public static void storeCxfFault ( CxfExchange exchange , Message message ) { CxfMessage fault = exchange . getFault ( ) ; if ( fault != null ) { fault . setBody ( getBody ( message ) ) ; } } public static Map < String , Object > propogateContext ( Message message , Map < String , Object > context ) { Map < String , Object > requestContext = CastUtils . cast ( ( Map ) message . get ( Client . REQUEST_CONTEXT ) ) ; Map < String , Object > responseContext = CastUtils . cast ( ( Map ) message . get ( Client . RESPONSE_CONTEXT ) ) ; if ( requestContext != null ) { ContextPropertiesMapping . mapRequestfromJaxws2Cxf ( requestContext ) ; } if ( responseContext == null ) { responseContext = new HashMap < String , Object > ( ) ; } else { responseContext . clear ( ) ; } context . put ( Client . REQUEST_CONTEXT , requestContext ) ; context . put ( Client . RESPONSE_CONTEXT , responseContext ) ; return responseContext ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RecipientList extends ServiceSupport implements Processor { private final Expression < Exchange > expression ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RecipientList ( Expression < Exchange > expression ) { notNull ( expression , "expression" ) ; this . expression = expression ; } @ Override public String toString ( ) { return "RecipientList[" + expression + "]" ; } public void process ( Exchange exchange ) throws Exception { Object receipientList = expression . evaluate ( exchange ) ; Iterator iter = ObjectConverter . iterator ( receipientList ) ; List < Processor > processors = new ArrayList < Processor > ( ) ; while ( iter . hasNext ( ) ) { Object recipient = iter . next ( ) ; Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , recipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; processors . add ( producer ) ; } MulticastProcessor mp = new MulticastProcessor ( processors , new UseLatestAggregationStrategy ( ) ) ; mp . process ( exchange ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } } 	1
package org . apache . camel ; public class NoSuchLanguageException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String language ; public NoSuchLanguageException ( String language ) { super ( "No language could be found for: " + language ) ; this . language = language ; } public String getLanguage ( ) { return language ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "when" ) public class WhenType < Type extends ProcessorType > extends ExpressionNode { public WhenType ( ) { } public WhenType ( Predicate predicate ) { super ( predicate ) ; } public WhenType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "When[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "when" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import static org . apache . camel . util . ObjectHelper . notNull ; public abstract class BinaryPredicateSupport < E extends Exchange > implements Predicate < E > { private final Expression < E > left ; private final Expression < E > right ; protected BinaryPredicateSupport ( Expression < E > left , Expression < E > right ) { notNull ( left , "left" ) ; notNull ( right , "right" ) ; this . left = left ; this . right = right ; } @ Override public String toString ( ) { return left + " " + getOperationText ( ) + " " + right ; } public boolean matches ( E exchange ) { Object leftValue = left . evaluate ( exchange ) ; Object rightValue = right . evaluate ( exchange ) ; return matches ( exchange , leftValue , rightValue ) ; } public void assertMatches ( String text , E exchange ) { Object leftValue = left . evaluate ( exchange ) ; Object rightValue = right . evaluate ( exchange ) ; if ( ! matches ( exchange , leftValue , rightValue ) ) { throw new AssertionError ( text + assertionFailureMessage ( exchange , leftValue , rightValue ) ) ; } } protected abstract boolean matches ( E exchange , Object leftValue , Object rightValue ) ; protected abstract String getOperationText ( ) ; protected String assertionFailureMessage ( E exchange , Object leftValue , Object rightValue ) { return this + " failed on " + exchange + " with left value <" + leftValue + "> right value <" + rightValue + ">" ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . SetHeaderProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setHeader" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetHeaderType extends ExpressionNode { @ XmlAttribute private String headerName ; @ XmlAttribute ( required = false ) private String value ; public SetHeaderType ( ) { } public SetHeaderType ( String headerName , ExpressionType expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , Expression expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , String value ) { super ( ExpressionBuilder . constantExpression ( value ) ) ; setHeaderName ( headerName ) ; } @ Override public String toString ( ) { return "SetHeader[ " + getHeaderName ( ) + ", " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setHeader" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr ; if ( getValue ( ) == null ) { expr = getExpression ( ) . createExpression ( routeContext ) ; } else { expr = ExpressionBuilder . constantExpression ( getValue ( ) ) ; } Processor childProcessor = routeContext . createProcessor ( this ) ; return new SetHeaderProcessor ( getHeaderName ( ) , expr , childProcessor ) ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return headerName ; } public void setValue ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } } 	1
package org . apache . camel . model . config ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . processor . StreamResequencer ; import org . apache . camel . processor . resequencer . DefaultExchangeComparator ; import org . apache . camel . processor . resequencer . ExpressionResultComparator ; @ XmlRootElement @ XmlAccessorType ( XmlAccessType . FIELD ) public class StreamResequencerConfig { @ XmlAttribute private Integer capacity ; @ XmlAttribute private Long timeout ; @ XmlTransient private ExpressionResultComparator < Exchange > comparator ; public StreamResequencerConfig ( ) { this ( 100 , 1000L ) ; } public StreamResequencerConfig ( int capacity , long timeout ) { this ( capacity , timeout , new DefaultExchangeComparator ( ) ) ; } public StreamResequencerConfig ( int capacity , long timeout , ExpressionResultComparator < Exchange > comparator ) { this . capacity = capacity ; this . timeout = timeout ; this . comparator = comparator ; } public static StreamResequencerConfig getDefault ( ) { return new StreamResequencerConfig ( ) ; } public int getCapacity ( ) { return capacity ; } public void setCapacity ( int capacity ) { this . capacity = capacity ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public ExpressionResultComparator < Exchange > getComparator ( ) { return comparator ; } public void setComparator ( ExpressionResultComparator < Exchange > comparator ) { this . comparator = comparator ; } } 	0
package org . apache . camel . converter . stream ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import javax . xml . transform . TransformerException ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . converter . jaxp . XmlConverter ; @ Converter public class StreamCacheConverter { private XmlConverter converter = new XmlConverter ( ) ; @ Converter public StreamCache convertToStreamCache ( StreamSource source ) throws TransformerException { return new StreamSourceCache ( converter . toString ( source ) ) ; } @ Converter public StreamCache convertToStreamCache ( InputStream stream ) throws IOException { return new InputStreamCache ( IOConverter . toBytes ( stream ) ) ; } private class StreamSourceCache extends StringSource implements StreamCache { private static final long serialVersionUID = 4147248494104812945L ; public StreamSourceCache ( String text ) { super ( text ) ; } } private class InputStreamCache extends ByteArrayInputStream implements StreamCache { public InputStreamCache ( byte [ ] data ) { super ( data ) ; } } } 	1
package org . apache . camel . component . ibatis ; import java . io . IOException ; import java . sql . SQLException ; import java . util . List ; import com . ibatis . sqlmap . client . SqlMapClient ; import org . apache . camel . Message ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultPollingEndpoint ; public class IBatisEndpoint extends DefaultPollingEndpoint { private final String entityName ; public IBatisEndpoint ( String endpointUri , IBatisComponent component , String entityName ) { super ( endpointUri , component ) ; this . entityName = entityName ; } public IBatisEndpoint ( String endpointUri , String entityName ) { super ( endpointUri ) ; this . entityName = entityName ; } @ Override public IBatisComponent getComponent ( ) { return ( IBatisComponent ) super . getComponent ( ) ; } public boolean isSingleton ( ) { return true ; } public Producer createProducer ( ) throws Exception { return new IBatisProducer ( this ) ; } @ Override public PollingConsumer createPollingConsumer ( ) throws Exception { return new IBatisPollingConsumer ( this ) ; } public SqlMapClient getSqlClient ( ) throws IOException { return getComponent ( ) . getSqlMapClient ( ) ; } public String getEntityName ( ) { return entityName ; } public void query ( Message message ) throws IOException , SQLException { String name = getEntityName ( ) ; List list = getSqlClient ( ) . queryForList ( name ) ; message . setBody ( list ) ; message . setHeader ( "org.apache.camel.ibatis.queryName" , name ) ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . ObjectInput ; import java . io . ObjectInputStream ; import java . io . ObjectOutput ; import java . io . ObjectOutputStream ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Reader ; import java . io . StringReader ; import java . io . Writer ; import java . net . URL ; import java . util . Properties ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Converter ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class IOConverter { private static final transient Log LOG = LogFactory . getLog ( IOConverter . class ) ; private IOConverter ( ) { } @ Converter public static InputStream toInputStream ( URL url ) throws IOException { return url . openStream ( ) ; } @ Converter public static InputStream toInputStream ( File file ) throws FileNotFoundException { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } @ Converter public static BufferedReader toReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new FileReader ( file ) ) ; } @ Converter public static File toFile ( String name ) throws FileNotFoundException { return new File ( name ) ; } @ Converter public static OutputStream toOutputStream ( File file ) throws FileNotFoundException { return new BufferedOutputStream ( new FileOutputStream ( file ) ) ; } @ Converter public static BufferedWriter toWriter ( File file ) throws IOException { return new BufferedWriter ( new FileWriter ( file ) ) ; } @ Converter public static Reader toReader ( InputStream in ) throws FileNotFoundException { return new InputStreamReader ( in ) ; } @ Converter public static Writer toWriter ( OutputStream out ) throws FileNotFoundException { return new OutputStreamWriter ( out ) ; } @ Converter public static StringReader toReader ( String text ) { return new StringReader ( text ) ; } @ Converter public static InputStream toInputStream ( String text ) { return toInputStream ( text . getBytes ( ) ) ; } @ Converter public static InputStream toInputStream ( BufferedReader buffer ) throws IOException { return toInputStream ( toString ( buffer ) ) ; } @ Converter public static InputStream toInputStrean ( DOMSource source ) throws TransformerException , IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( toString ( source ) . getBytes ( ) ) ; return bais ; } @ Converter public static String toString ( byte [ ] data ) { return new String ( data ) ; } @ Converter public static String toString ( File file ) throws IOException { return toString ( toReader ( file ) ) ; } @ Converter public static String toString ( URL url ) throws IOException { return toString ( toInputStream ( url ) ) ; } @ Converter public static String toString ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toString ( ( BufferedReader ) reader ) ; } else { return toString ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } try { CollectionStringBuffer builder = new CollectionStringBuffer ( "\n" ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { return builder . toString ( ) ; } builder . append ( line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } } @ Converter public static String toString ( InputStream in ) throws IOException { return toString ( toReader ( in ) ) ; } public static String toString ( Source source ) throws TransformerException , IOException { return toString ( source , null ) ; } public static String toString ( Source source , Properties props ) throws TransformerException , IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; StreamResult sr = new StreamResult ( bos ) ; Transformer trans = TransformerFactory . newInstance ( ) . newTransformer ( ) ; if ( props == null ) { props = new Properties ( ) ; props . put ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; } trans . setOutputProperties ( props ) ; trans . transform ( source , sr ) ; bos . close ( ) ; return bos . toString ( ) ; } @ Converter public static InputStream toInputStream ( byte [ ] data ) { return new ByteArrayInputStream ( data ) ; } @ Converter public static ObjectOutput toObjectOutput ( OutputStream stream ) throws IOException { if ( stream instanceof ObjectOutput ) { return ( ObjectOutput ) stream ; } else { return new ObjectOutputStream ( stream ) ; } } @ Converter public static ObjectInput toObjectInput ( InputStream stream ) throws IOException { if ( stream instanceof ObjectInput ) { return ( ObjectInput ) stream ; } else { return new ObjectInputStream ( stream ) ; } } @ Converter public static byte [ ] toBytes ( InputStream stream ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; copy ( stream , bos ) ; return bos . toByteArray ( ) ; } protected static void copy ( InputStream stream , ByteArrayOutputStream bos ) throws IOException { byte [ ] data = new byte [ 4096 ] ; int read = stream . read ( data ) ; while ( read != - 1 ) { bos . write ( data , 0 , read ) ; read = stream . read ( data ) ; } bos . flush ( ) ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public interface Synchronization { void onComplete ( Exchange exchange ) ; void onFailure ( Exchange exchange ) ; } 	0
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; public interface RouteContext { Endpoint < ? extends Exchange > getEndpoint ( ) ; FromType getFrom ( ) ; RouteType getRoute ( ) ; CamelContext getCamelContext ( ) ; Processor createProcessor ( ProcessorType node ) throws Exception ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) ; < T > T lookup ( String name , Class < T > type ) ; void commit ( ) ; void addEventDrivenProcessor ( Processor processor ) ; void intercept ( Intercept interceptor ) ; Processor createProceedProcessor ( ) ; List < InterceptStrategy > getInterceptStrategies ( ) ; void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) ; void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) ; void setIsRouteAdded ( boolean value ) ; boolean isRouteAdded ( ) ; } 	1
package org . apache . camel . util ; import java . net . InetAddress ; import java . net . ServerSocket ; import java . util . logging . Level ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class UuidGenerator { private static final transient Log LOG = LogFactory . getLog ( UuidGenerator . class ) ; private static final String UNIQUE_STUB ; private static int instanceCount ; private static String hostName ; private String seed ; private long sequence ; static { String stub = "" ; boolean canAccessSystemProps = true ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPropertiesAccess ( ) ; } } catch ( SecurityException se ) { canAccessSystemProps = false ; } if ( canAccessSystemProps ) { try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; ServerSocket ss = new ServerSocket ( 0 ) ; stub = "/" + ss . getLocalPort ( ) + "-" + System . currentTimeMillis ( ) + "/" ; Thread . sleep ( 100 ) ; ss . close ( ) ; } catch ( Exception ioe ) { LOG . warn ( "Could not generate unique stub" , ioe ) ; } } else { hostName = "localhost" ; stub = "-1-" + System . currentTimeMillis ( ) + "-" ; } UNIQUE_STUB = stub ; } public UuidGenerator ( String prefix ) { synchronized ( UNIQUE_STUB ) { this . seed = prefix + UNIQUE_STUB + ( instanceCount ++ ) + "-" ; } } public UuidGenerator ( ) { this ( "ID-" + hostName ) ; } public static String getHostName ( ) { return hostName ; } public synchronized String generateId ( ) { return this . seed + ( this . sequence ++ ) ; } public String generateSanitizedId ( ) { return generateSanitizedId ( generateId ( ) ) ; } public static String generateSanitizedId ( String id ) { id = id . replace ( ':' , '-' ) ; id = id . replace ( '_' , '-' ) ; id = id . replace ( '.' , '-' ) ; return id ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class Throttler extends DelayProcessorSupport { private long maximumRequestsPerPeriod ; private long timePeriodMillis ; private long startTimeMillis ; private long requestCount ; public Throttler ( Processor processor , long maximumRequestsPerPeriod ) { this ( processor , maximumRequestsPerPeriod , 1000 ) ; } public Throttler ( Processor processor , long maximumRequestsPerPeriod , long timePeriodMillis ) { super ( processor ) ; this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; this . timePeriodMillis = timePeriodMillis ; } @ Override public String toString ( ) { return "Throttler[requests: " + maximumRequestsPerPeriod + " per: " + timePeriodMillis + " (ms) to: " + getProcessor ( ) + "]" ; } public long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } public long getRequestCount ( ) { return requestCount ; } public long getStartTimeMillis ( ) { return startTimeMillis ; } protected void delay ( Exchange exchange ) throws Exception { long now = currentSystemTime ( ) ; if ( startTimeMillis == 0 ) { startTimeMillis = now ; } if ( now - startTimeMillis > timePeriodMillis ) { requestCount = 1 ; startTimeMillis = now ; } else { if ( ++ requestCount > maximumRequestsPerPeriod ) { long time = startTimeMillis + timePeriodMillis ; waitUntil ( time , exchange ) ; } } } } 	1
package org . apache . camel . builder . xml ; import javax . xml . namespace . QName ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; public class XPathLanguage implements Language { private QName resultType ; public Predicate < Exchange > createPredicate ( String expression ) { XPathBuilder builder = XPathBuilder . xpath ( expression ) ; configureBuilder ( builder ) ; return builder ; } public Expression < Exchange > createExpression ( String expression ) { XPathBuilder builder = XPathBuilder . xpath ( expression ) ; configureBuilder ( builder ) ; return builder ; } public QName getResultType ( ) { return resultType ; } public void setResultType ( QName resultType ) { this . resultType = resultType ; } protected void configureBuilder ( XPathBuilder builder ) { if ( resultType != null ) { builder . setResultQName ( resultType ) ; } } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "jaxb" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class JaxbDataFormat extends DataFormatType { @ XmlAttribute ( required = true ) private String contextPath ; @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public JaxbDataFormat ( ) { super ( "org.apache.camel.converter.jaxb.JaxbDataFormat" ) ; } public JaxbDataFormat ( boolean prettyPrint ) { this ( ) ; setPrettyPrint ( prettyPrint ) ; } public String getContextPath ( ) { return contextPath ; } public void setContextPath ( String contextPath ) { this . contextPath = contextPath ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } @ Override protected void configureDataFormat ( DataFormat dataFormat ) { Boolean answer = ObjectHelper . toBoolean ( getPrettyPrint ( ) ) ; if ( answer != null && answer . booleanValue ( ) ) { setProperty ( dataFormat , "prettyPrint" , Boolean . TRUE ) ; } setProperty ( dataFormat , "contextPath" , contextPath ) ; } } 	1
package org . apache . camel . language . ognl ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "ognl" ) public @ interface OGNL { String value ( ) ; } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . util . Properties ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . file . strategy . FileProcessStrategySupport ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileEndpoint extends ScheduledPollEndpoint < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileEndpoint . class ) ; private static final String DEFAULT_STRATEGYFACTORY_CLASS = "org.apache.camel.component.file.strategy.FileProcessStrategyFactory" ; private File file ; private FileProcessStrategy fileProcessStrategy ; private boolean autoCreate = true ; private boolean lock = true ; private boolean delete ; private boolean noop ; private boolean append = true ; private String moveNamePrefix ; private String moveNamePostfix ; private String [ ] excludedNamePrefixes = { "." } ; private String [ ] excludedNamePostfixes = { FileProcessStrategySupport . DEFAULT_LOCK_FILE_POSTFIX } ; private int bufferSize = 128 * 1024 ; private boolean ignoreFileNameHeader ; protected FileEndpoint ( File file , String endpointUri , FileComponent component ) { super ( endpointUri , component ) ; this . file = file ; } public FileEndpoint ( String endpointUri , File file ) { super ( endpointUri ) ; this . file = file ; } public FileEndpoint ( File file ) { this . file = file ; } public FileEndpoint ( ) { } public Producer < FileExchange > createProducer ( ) throws Exception { Producer < FileExchange > result = new FileProducer ( this ) ; return result ; } public Consumer < FileExchange > createConsumer ( Processor processor ) throws Exception { Consumer < FileExchange > result = new FileConsumer ( this , processor ) ; configureConsumer ( result ) ; return result ; } public FileExchange createExchange ( File file ) { return new FileExchange ( getCamelContext ( ) , getExchangePattern ( ) , file ) ; } @ Override public FileExchange createExchange ( ) { return createExchange ( getFile ( ) ) ; } @ Override public FileExchange createExchange ( ExchangePattern pattern ) { return new FileExchange ( getCamelContext ( ) , pattern , file ) ; } public String getGeneratedFileName ( Message message ) { return getFileFriendlyMessageId ( message . getMessageId ( ) ) ; } public void configureMessage ( File file , Message message ) { message . setBody ( file ) ; String relativePath = file . getPath ( ) . substring ( getFile ( ) . getPath ( ) . length ( ) ) ; if ( relativePath . startsWith ( File . separator ) || relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } message . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } public File getFile ( ) { ObjectHelper . notNull ( file , "file" ) ; if ( autoCreate && ! file . exists ( ) ) { file . mkdirs ( ) ; } return file ; } public void setFile ( File file ) { this . file = file ; } public boolean isSingleton ( ) { return true ; } public boolean isAutoCreate ( ) { return this . autoCreate ; } public void setAutoCreate ( boolean autoCreate ) { this . autoCreate = autoCreate ; } public FileProcessStrategy getFileStrategy ( ) { if ( fileProcessStrategy == null ) { fileProcessStrategy = createFileStrategy ( ) ; LOG . debug ( "Using file process strategy: " + fileProcessStrategy ) ; } return fileProcessStrategy ; } public void setFileStrategy ( FileProcessStrategy fileProcessStrategy ) { this . fileProcessStrategy = fileProcessStrategy ; } public boolean isDelete ( ) { return delete ; } public void setDelete ( boolean delete ) { this . delete = delete ; } public boolean isLock ( ) { return lock ; } public void setLock ( boolean lock ) { this . lock = lock ; } public String getMoveNamePostfix ( ) { return moveNamePostfix ; } public void setMoveNamePostfix ( String moveNamePostfix ) { this . moveNamePostfix = moveNamePostfix ; } public String getMoveNamePrefix ( ) { return moveNamePrefix ; } public void setMoveNamePrefix ( String moveNamePrefix ) { this . moveNamePrefix = moveNamePrefix ; } public String [ ] getExcludedNamePrefixes ( ) { return excludedNamePrefixes ; } public void setExcludedNamePrefixes ( String [ ] excludedNamePrefixes ) { this . excludedNamePrefixes = excludedNamePrefixes ; } public String [ ] getExcludedNamePostfixes ( ) { return excludedNamePostfixes ; } public void setExcludedNamePostfixes ( String [ ] excludedNamePostfixes ) { this . excludedNamePostfixes = excludedNamePostfixes ; } public boolean isNoop ( ) { return noop ; } public void setNoop ( boolean noop ) { this . noop = noop ; } public boolean isAppend ( ) { return append ; } public void setAppend ( boolean append ) { this . append = append ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public boolean isIgnoreFileNameHeader ( ) { return ignoreFileNameHeader ; } public void setIgnoreFileNameHeader ( boolean ignoreFileNameHeader ) { this . ignoreFileNameHeader = ignoreFileNameHeader ; } protected FileProcessStrategy createFileStrategy ( ) { Class < ? > factory = null ; try { FactoryFinder finder = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; factory = finder . findClass ( "file" , "strategy.factory." ) ; } catch ( ClassNotFoundException e ) { LOG . debug ( "'strategy.factory.class' not found" , e ) ; } catch ( IOException e ) { LOG . debug ( "No strategy factory defined in 'META-INF/services/org/apache/camel/component/file'" , e ) ; } if ( factory == null ) { factory = ObjectHelper . loadClass ( DEFAULT_STRATEGYFACTORY_CLASS ) ; if ( factory == null ) { throw new TypeNotPresentException ( "FileProcessStrategyFactory class not found" , null ) ; } } try { Method factoryMethod = factory . getMethod ( "createFileProcessStrategy" , Properties . class ) ; return ( FileProcessStrategy ) ObjectHelper . invokeMethod ( factoryMethod , null , getParamsAsProperties ( ) ) ; } catch ( NoSuchMethodException e ) { throw new TypeNotPresentException ( factory . getSimpleName ( ) + ".createFileProcessStrategy(Properties params) method not found" , e ) ; } } protected Properties getParamsAsProperties ( ) { Properties params = new Properties ( ) ; if ( isNoop ( ) ) { params . setProperty ( "noop" , Boolean . toString ( true ) ) ; } if ( isDelete ( ) ) { params . setProperty ( "delete" , Boolean . toString ( true ) ) ; } if ( isAppend ( ) ) { params . setProperty ( "append" , Boolean . toString ( true ) ) ; } if ( isLock ( ) ) { params . setProperty ( "lock" , Boolean . toString ( true ) ) ; } if ( moveNamePrefix != null ) { params . setProperty ( "moveNamePrefix" , moveNamePrefix ) ; } if ( moveNamePostfix != null ) { params . setProperty ( "moveNamePostfix" , moveNamePostfix ) ; } return params ; } @ Override protected String createEndpointUri ( ) { return "file://" + getFile ( ) . getAbsolutePath ( ) ; } protected String getFileFriendlyMessageId ( String id ) { return UuidGenerator . generateSanitizedId ( id ) ; } } 	1
package org . apache . camel . processor . idempotent . jpa ; import javax . persistence . Entity ; import javax . persistence . GeneratedValue ; import javax . persistence . Id ; import javax . persistence . UniqueConstraint ; @ Entity @ UniqueConstraint ( columnNames = { "processorName" , "messageId" } ) public class MessageProcessed { private Long id ; private String messageId ; private String processorName ; @ Override public String toString ( ) { return "MessageProcessed[processorName: " + getProcessorName ( ) + " messageId: " + getMessageId ( ) + "]" ; } @ Id @ GeneratedValue public Long getId ( ) { return id ; } public void setId ( Long id ) { this . id = id ; } public String getMessageId ( ) { return messageId ; } public void setMessageId ( String messageId ) { this . messageId = messageId ; } public String getProcessorName ( ) { return processorName ; } public void setProcessorName ( String processorName ) { this . processorName = processorName ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Delayer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "delayer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DelayerType extends ExpressionNode { private Long delay = 0L ; public DelayerType ( ) { } public DelayerType ( Expression processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( ExpressionType processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( Expression processAtExpression , long delay ) { super ( processAtExpression ) ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "delayer" ; } public Long getDelay ( ) { return delay ; } public void setDelay ( Long delay ) { this . delay = delay ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; Expression processAtExpression = getExpression ( ) != null ? getExpression ( ) . createExpression ( routeContext ) : null ; return new Delayer ( childProcessor , processAtExpression , delay ) ; } } 	1
package org . apache . camel . builder ; import java . util . List ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; public class ErrorHandlerBuilderRef extends ErrorHandlerBuilderSupport { private final String ref ; private ErrorHandlerBuilder handler ; public ErrorHandlerBuilderRef ( String ref ) { this . ref = ref ; } public ErrorHandlerBuilder copy ( ) { return new ErrorHandlerBuilderRef ( ref ) ; } @ Override public void addErrorHandlers ( ExceptionType exception ) { if ( handler != null ) { handler . addErrorHandlers ( exception ) ; } super . addErrorHandlers ( exception ) ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { if ( handler == null ) { handler = routeContext . lookup ( ref , ErrorHandlerBuilder . class ) ; ObjectHelper . notNull ( handler , "error handler '" + ref + "'" ) ; List < ExceptionType > list = getExceptions ( ) ; for ( ExceptionType exceptionType : list ) { handler . addErrorHandlers ( exceptionType ) ; } } return handler . createErrorHandler ( routeContext , processor ) ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RenameFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( RenameFileProcessStrategy . class ) ; private FileRenamer renamer ; public RenameFileProcessStrategy ( ) { this ( true ) ; } public RenameFileProcessStrategy ( boolean lock ) { this ( lock , ".camel/" , "" ) ; } public RenameFileProcessStrategy ( boolean lock , String namePrefix , String namePostfix ) { this ( lock , new DefaultFileRenamer ( namePrefix , namePostfix ) ) ; } public RenameFileProcessStrategy ( boolean lock , FileRenamer renamer ) { super ( lock ) ; this . renamer = renamer ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { File newName = renamer . renameFile ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Renaming file: " + file + " to: " + newName ) ; } if ( newName . exists ( ) ) { newName . delete ( ) ; } newName . getParentFile ( ) . mkdirs ( ) ; boolean renamed = file . renameTo ( newName ) ; if ( ! renamed ) { LOG . warn ( "Could not rename file from: " + file + " to " + newName ) ; } super . commit ( endpoint , exchange , file ) ; } public FileRenamer getRenamer ( ) { return renamer ; } public void setRenamer ( FileRenamer renamer ) { this . renamer = renamer ; } } 	1
package org . apache . camel ; public interface Component < E extends Exchange > { CamelContext getCamelContext ( ) ; void setCamelContext ( CamelContext context ) ; Endpoint < E > createEndpoint ( String uri ) throws Exception ; } 	0
package org . apache . camel . processor . validation ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import javax . xml . XMLConstants ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . validation . Schema ; import javax . xml . validation . SchemaFactory ; import javax . xml . validation . Validator ; import org . xml . sax . SAXException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class ValidatingProcessor implements Processor { private Schema schema ; private ValidatorErrorHandler errorHandler = new DefaultValidationErrorHandler ( ) ; private String schemaLanguage = XMLConstants . W3C_XML_SCHEMA_NS_URI ; private Source schemaSource ; private SchemaFactory schemaFactory ; private URL schemaUrl ; private File schemaFile ; public void process ( Exchange exchange ) throws Exception { Schema schema = getSchema ( ) ; Validator validator = schema . newValidator ( ) ; Source source = exchange . getIn ( ) . getBody ( DOMSource . class ) ; if ( source == null ) { throw new NoXmlBodyValidationException ( exchange ) ; } errorHandler . reset ( ) ; validator . setErrorHandler ( errorHandler ) ; DOMResult result = new DOMResult ( ) ; validator . validate ( source , result ) ; errorHandler . handleErrors ( exchange , schema , result ) ; } public Schema getSchema ( ) throws IOException , SAXException { if ( schema == null ) { schema = createSchema ( ) ; } return schema ; } public void setSchema ( Schema schema ) { this . schema = schema ; } public String getSchemaLanguage ( ) { return schemaLanguage ; } public void setSchemaLanguage ( String schemaLanguage ) { this . schemaLanguage = schemaLanguage ; } public Source getSchemaSource ( ) throws IOException { if ( schemaSource == null ) { schemaSource = createSchemaSource ( ) ; } return schemaSource ; } public void setSchemaSource ( Source schemaSource ) { this . schemaSource = schemaSource ; } public URL getSchemaUrl ( ) { return schemaUrl ; } public void setSchemaUrl ( URL schemaUrl ) { this . schemaUrl = schemaUrl ; } public File getSchemaFile ( ) { return schemaFile ; } public void setSchemaFile ( File schemaFile ) { this . schemaFile = schemaFile ; } public SchemaFactory getSchemaFactory ( ) { if ( schemaFactory == null ) { schemaFactory = createSchemaFactory ( ) ; } return schemaFactory ; } public void setSchemaFactory ( SchemaFactory schemaFactory ) { this . schemaFactory = schemaFactory ; } public ValidatorErrorHandler getErrorHandler ( ) { return errorHandler ; } public void setErrorHandler ( ValidatorErrorHandler errorHandler ) { this . errorHandler = errorHandler ; } protected SchemaFactory createSchemaFactory ( ) { return SchemaFactory . newInstance ( schemaLanguage ) ; } protected Source createSchemaSource ( ) throws IOException { throw new IllegalArgumentException ( "You must specify a schema, " + "schemaFile, schemaSource or schemaUrl property" ) ; } protected Schema createSchema ( ) throws SAXException , IOException { SchemaFactory factory = getSchemaFactory ( ) ; URL url = getSchemaUrl ( ) ; if ( url != null ) { return factory . newSchema ( url ) ; } File file = getSchemaFile ( ) ; if ( file != null ) { return factory . newSchema ( file ) ; } return factory . newSchema ( getSchemaSource ( ) ) ; } } 	1
package org . apache . camel . component . cxf ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import javax . xml . namespace . QName ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . component . cxf . feature . MessageDataFormatFeature ; import org . apache . camel . component . cxf . feature . PayLoadDataFormatFeature ; import org . apache . camel . component . cxf . invoker . CxfClient ; import org . apache . camel . component . cxf . invoker . CxfClientFactoryBean ; import org . apache . camel . component . cxf . invoker . InvokingContext ; import org . apache . camel . component . cxf . invoker . InvokingContextFactory ; import org . apache . camel . component . cxf . spring . CxfEndpointBean ; import org . apache . camel . component . cxf . util . CxfEndpointUtils ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ObjectHelper ; import org . apache . cxf . Bus ; import org . apache . cxf . BusFactory ; import org . apache . cxf . bus . spring . SpringBusFactory ; import org . apache . cxf . common . classloader . ClassLoaderUtils ; import org . apache . cxf . endpoint . Client ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . feature . AbstractFeature ; import org . apache . cxf . frontend . ClientFactoryBean ; import org . apache . cxf . message . ExchangeImpl ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . MessageImpl ; import org . apache . cxf . service . model . BindingOperationInfo ; public class CxfProducer extends DefaultProducer < CxfExchange > { private CxfEndpoint endpoint ; private Client client ; private DataFormat dataFormat ; public CxfProducer ( CxfEndpoint endpoint ) throws CamelException { super ( endpoint ) ; this . endpoint = endpoint ; dataFormat = CxfEndpointUtils . getDataFormat ( endpoint ) ; if ( dataFormat . equals ( DataFormat . POJO ) ) { client = createClientFromClientFactoryBean ( null ) ; } else { client = createClientForStreamMessage ( ) ; } } private Client createClientForStreamMessage ( ) throws CamelException { CxfClientFactoryBean cfb = new CxfClientFactoryBean ( ) ; Class serviceClass = null ; if ( endpoint . isSpringContextEndpoint ( ) ) { CxfEndpointBean cxfEndpointBean = endpoint . getCxfEndpointBean ( ) ; serviceClass = cxfEndpointBean . getServiceClass ( ) ; } else { if ( endpoint . getServiceClass ( ) == null ) { throw new CamelException ( "serviceClass setting missing from CXF endpoint configuration" ) ; } try { serviceClass = ClassLoaderUtils . loadClass ( endpoint . getServiceClass ( ) , this . getClass ( ) ) ; } catch ( ClassNotFoundException e ) { throw new CamelException ( e ) ; } } boolean jsr181Enabled = CxfEndpointUtils . hasWebServiceAnnotation ( serviceClass ) ; cfb . setJSR181Enabled ( jsr181Enabled ) ; dataFormat = CxfEndpointUtils . getDataFormat ( endpoint ) ; List < AbstractFeature > features = new ArrayList < AbstractFeature > ( ) ; if ( dataFormat . equals ( DataFormat . MESSAGE ) ) { features . add ( new MessageDataFormatFeature ( ) ) ; } else if ( dataFormat . equals ( DataFormat . PAYLOAD ) ) { features . add ( new PayLoadDataFormatFeature ( ) ) ; } cfb . setFeatures ( features ) ; return createClientFromClientFactoryBean ( cfb ) ; } private Client createClientFromClientFactoryBean ( ClientFactoryBean cfb ) throws CamelException { Bus bus = null ; if ( endpoint . getApplicationContext ( ) != null ) { SpringBusFactory bf = new SpringBusFactory ( endpoint . getApplicationContext ( ) ) ; bus = bf . createBus ( ) ; if ( CxfEndpointUtils . getSetDefaultBus ( endpoint ) ) { BusFactory . setDefaultBus ( bus ) ; } } else { bus = BusFactory . getDefaultBus ( ) ; } if ( endpoint . isSpringContextEndpoint ( ) ) { CxfEndpointBean cxfEndpointBean = endpoint . getCxfEndpointBean ( ) ; if ( cfb == null ) { cfb = CxfEndpointUtils . getClientFactoryBean ( cxfEndpointBean . getServiceClass ( ) ) ; } endpoint . configure ( cfb ) ; } else { if ( null != endpoint . getServiceClass ( ) ) { try { Class serviceClass = ClassLoaderUtils . loadClass ( endpoint . getServiceClass ( ) , this . getClass ( ) ) ; if ( cfb == null ) { cfb = CxfEndpointUtils . getClientFactoryBean ( serviceClass ) ; } cfb . setAddress ( endpoint . getAddress ( ) ) ; if ( null != endpoint . getServiceClass ( ) ) { cfb . setServiceClass ( ObjectHelper . loadClass ( endpoint . getServiceClass ( ) ) ) ; } if ( null != endpoint . getWsdlURL ( ) ) { cfb . setWsdlURL ( endpoint . getWsdlURL ( ) ) ; } } catch ( ClassNotFoundException e ) { throw new CamelException ( e ) ; } } else { if ( cfb == null ) { cfb = new ClientFactoryBean ( ) ; } if ( null != endpoint . getWsdlURL ( ) ) { cfb . setWsdlURL ( endpoint . getWsdlURL ( ) ) ; } else { throw new CamelException ( "Not enough information to create a CXF endpoint. (Provide WSDL url or service class name.)" ) ; } } if ( endpoint . getServiceName ( ) != null ) { cfb . setServiceName ( CxfEndpointUtils . getServiceName ( endpoint ) ) ; } if ( endpoint . getPortName ( ) != null ) { cfb . setEndpointName ( CxfEndpointUtils . getPortName ( endpoint ) ) ; } if ( endpoint . getWsdlURL ( ) != null ) { cfb . setWsdlURL ( endpoint . getWsdlURL ( ) ) ; } } cfb . setBus ( bus ) ; return cfb . create ( ) ; } public void process ( Exchange exchange ) { CxfExchange cxfExchange = endpoint . createExchange ( exchange ) ; process ( cxfExchange ) ; exchange . copyFrom ( cxfExchange ) ; } public void process ( CxfExchange exchange ) { Message inMessage = CxfBinding . createCxfMessage ( exchange ) ; exchange . setProperty ( CxfExchange . DATA_FORMAT , dataFormat ) ; try { if ( dataFormat . equals ( DataFormat . POJO ) ) { List parameters = inMessage . getContent ( List . class ) ; if ( parameters == null ) { parameters = new ArrayList ( ) ; } String operationName = ( String ) inMessage . get ( CxfConstants . OPERATION_NAME ) ; String operationNameSpace = ( String ) inMessage . get ( CxfConstants . OPERATION_NAMESPACE ) ; Map < String , Object > context = new HashMap < String , Object > ( ) ; Map < String , Object > responseContext = CxfBinding . propogateContext ( inMessage , context ) ; Message response = new MessageImpl ( ) ; if ( operationName != null ) { try { Object [ ] result = null ; result = invokeClient ( operationNameSpace , operationName , parameters , context ) ; response . setContent ( Object [ ] . class , result ) ; CxfBinding . storeCXfResponseContext ( response , responseContext ) ; CxfBinding . storeCxfResponse ( exchange , response ) ; } catch ( Exception ex ) { response . setContent ( Exception . class , ex ) ; CxfBinding . storeCxfFault ( exchange , response ) ; } } else { throw new RuntimeCamelException ( "Can't find the operation name in the message!" ) ; } } else { org . apache . cxf . message . Exchange ex = exchange . getExchange ( ) ; if ( ex == null ) { ex = ( org . apache . cxf . message . Exchange ) exchange . getProperty ( CxfConstants . CXF_EXCHANGE ) ; exchange . setExchange ( ex ) ; } if ( ex == null ) { ex = new ExchangeImpl ( ) ; exchange . setExchange ( ex ) ; } assert ex != null ; InvokingContext invokingContext = ex . get ( InvokingContext . class ) ; if ( invokingContext == null ) { invokingContext = InvokingContextFactory . createContext ( dataFormat ) ; ex . put ( InvokingContext . class , invokingContext ) ; } Map < Class , Object > params = invokingContext . getRequestContent ( inMessage ) ; CxfClient cxfClient = ( CxfClient ) client ; BindingOperationInfo boi = ex . get ( BindingOperationInfo . class ) ; Message response = null ; if ( boi == null ) { response = new MessageImpl ( ) ; } else { Endpoint ep = ex . get ( Endpoint . class ) ; response = ep . getBinding ( ) . createMessage ( ) ; } response . setExchange ( ex ) ; Map < String , Object > context = new HashMap < String , Object > ( ) ; Map < String , Object > responseContext = CxfBinding . propogateContext ( inMessage , context ) ; try { Object result = cxfClient . dispatch ( params , context , ex ) ; ex . setOutMessage ( response ) ; invokingContext . setResponseContent ( response , result ) ; CxfBinding . storeCXfResponseContext ( response , responseContext ) ; CxfBinding . storeCxfResponse ( exchange , response ) ; } catch ( Exception e ) { response . setContent ( Exception . class , e ) ; CxfBinding . storeCxfFault ( exchange , response ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { super . doStop ( ) ; } private Object [ ] invokeClient ( String operationNameSpace , String operationName , List parameters , Map < String , Object > context ) throws Exception { QName operationQName = null ; if ( operationNameSpace == null ) { operationQName = new QName ( client . getEndpoint ( ) . getService ( ) . getName ( ) . getNamespaceURI ( ) , operationName ) ; } else { operationQName = new QName ( operationNameSpace , operationName ) ; } BindingOperationInfo op = client . getEndpoint ( ) . getEndpointInfo ( ) . getBinding ( ) . getOperation ( operationQName ) ; if ( op == null ) { throw new RuntimeCamelException ( "No operation found in the CXF client, the operation is " + operationQName ) ; } if ( ! endpoint . isWrapped ( ) ) { if ( op . isUnwrappedCapable ( ) ) { op = op . getUnwrappedOperation ( ) ; } } Object [ ] result = client . invoke ( op , parameters . toArray ( ) , context ) ; return result ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileConsumer extends ScheduledPollConsumer < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileConsumer . class ) ; private FileEndpoint endpoint ; private ConcurrentHashMap < File , File > filesBeingProcessed = new ConcurrentHashMap < File , File > ( ) ; private ConcurrentHashMap < File , Long > fileSizes = new ConcurrentHashMap < File , Long > ( ) ; private ConcurrentHashMap < File , Long > noopMap = new ConcurrentHashMap < File , Long > ( ) ; private boolean generateEmptyExchangeWhenIdle ; private boolean recursive = true ; private String regexPattern = "" ; private long lastPollTime ; private int unchangedDelay ; private boolean unchangedSize ; public FileConsumer ( final FileEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } protected synchronized void poll ( ) throws Exception { int rc = pollFileOrDirectory ( endpoint . getFile ( ) , isRecursive ( ) ) ; if ( rc == 0 && generateEmptyExchangeWhenIdle ) { final FileExchange exchange = endpoint . createExchange ( ( File ) null ) ; getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } lastPollTime = System . currentTimeMillis ( ) ; } protected int pollFileOrDirectory ( File fileOrDirectory , boolean processDir ) { if ( ! fileOrDirectory . isDirectory ( ) ) { return pollFile ( fileOrDirectory ) ; } else if ( processDir ) { int rc = 0 ; if ( isValidFile ( fileOrDirectory ) ) { LOG . debug ( "Polling directory " + fileOrDirectory ) ; File [ ] files = fileOrDirectory . listFiles ( ) ; for ( File file : files ) { rc += pollFileOrDirectory ( file , isRecursive ( ) ) ; } } return rc ; } else { LOG . debug ( "Skipping directory " + fileOrDirectory ) ; return 0 ; } } protected int pollFile ( final File file ) { if ( ! file . exists ( ) ) { return 0 ; } if ( ! isValidFile ( file ) ) { return 0 ; } if ( ! endpoint . isNoop ( ) ) { if ( filesBeingProcessed . contains ( file ) ) { return 1 ; } filesBeingProcessed . put ( file , file ) ; } final FileProcessStrategy processStrategy = endpoint . getFileStrategy ( ) ; final FileExchange exchange = endpoint . createExchange ( file ) ; endpoint . configureMessage ( file , exchange . getIn ( ) ) ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to process file: " + file + " using exchange: " + exchange ) ; } if ( processStrategy . begin ( endpoint , exchange , file ) ) { getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { boolean failed = exchange . isFailed ( ) ; boolean handled = DeadLetterChannel . isFailureHandled ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Done processing file: " + file + ". Status is: " + ( failed ? "failed: " + failed + ", handled by failure processor: " + handled : "OK" ) ) ; } if ( ! failed || handled ) { processStrategyCommit ( processStrategy , exchange , file , handled ) ; } else if ( failed && ! handled ) { handleException ( exchange . getException ( ) ) ; } filesBeingProcessed . remove ( file ) ; } } ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " cannot process file: " + file ) ; } } } catch ( Throwable e ) { handleException ( e ) ; } return 1 ; } protected void processStrategyCommit ( FileProcessStrategy processStrategy , FileExchange exchange , File file , boolean failureHandled ) { try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Committing file strategy: " + processStrategy + " for file: " + file + ( failureHandled ? " that was handled by the failure processor." : "" ) ) ; } processStrategy . commit ( endpoint , exchange , file ) ; } catch ( Exception e ) { LOG . warn ( "Error committing file strategy: " + processStrategy , e ) ; handleException ( e ) ; } } protected boolean isValidFile ( File file ) { boolean result = false ; if ( file != null && file . exists ( ) ) { if ( isMatched ( file ) && isChanged ( file ) ) { result = true ; } } return result ; } protected boolean isChanged ( File file ) { if ( file == null ) { return false ; } else if ( file . isDirectory ( ) ) { return true ; } else { boolean lastModifiedCheck = false ; long modifiedDuration = 0 ; if ( getUnchangedDelay ( ) > 0 ) { modifiedDuration = System . currentTimeMillis ( ) - file . lastModified ( ) ; lastModifiedCheck = modifiedDuration >= getUnchangedDelay ( ) ; } long fileModified = file . lastModified ( ) ; Long previousModified = noopMap . get ( file ) ; noopMap . put ( file , fileModified ) ; if ( previousModified == null || fileModified > previousModified ) { lastModifiedCheck = true ; } boolean sizeCheck = false ; long sizeDifference = 0 ; if ( isUnchangedSize ( ) ) { Long value = fileSizes . get ( file ) ; if ( value == null ) { sizeCheck = true ; } else { sizeCheck = file . length ( ) != value ; } } boolean answer = lastModifiedCheck || sizeCheck ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "file:" + file + " isChanged:" + answer + " " + "sizeCheck:" + sizeCheck + "(" + sizeDifference + ") " + "lastModifiedCheck:" + lastModifiedCheck + "(" + modifiedDuration + ")" ) ; } if ( isUnchangedSize ( ) ) { if ( answer ) { fileSizes . put ( file , file . length ( ) ) ; } else { fileSizes . remove ( file ) ; } } return answer ; } } protected boolean isMatched ( File file ) { String name = file . getName ( ) ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { if ( ! name . matches ( getRegexPattern ( ) ) ) { return false ; } } String [ ] prefixes = endpoint . getExcludedNamePrefixes ( ) ; if ( prefixes != null ) { for ( String prefix : prefixes ) { if ( name . startsWith ( prefix ) ) { return false ; } } } String [ ] postfixes = endpoint . getExcludedNamePostfixes ( ) ; if ( postfixes != null ) { for ( String postfix : postfixes ) { if ( name . endsWith ( postfix ) ) { return false ; } } } return true ; } public boolean isRecursive ( ) { return this . recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public String getRegexPattern ( ) { return this . regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isGenerateEmptyExchangeWhenIdle ( ) { return generateEmptyExchangeWhenIdle ; } public void setGenerateEmptyExchangeWhenIdle ( boolean generateEmptyExchangeWhenIdle ) { this . generateEmptyExchangeWhenIdle = generateEmptyExchangeWhenIdle ; } public int getUnchangedDelay ( ) { return unchangedDelay ; } public void setUnchangedDelay ( int unchangedDelay ) { this . unchangedDelay = unchangedDelay ; } public boolean isUnchangedSize ( ) { return unchangedSize ; } public void setUnchangedSize ( boolean unchangedSize ) { this . unchangedSize = unchangedSize ; } } 	1
package org . apache . camel . component . mail ; import javax . mail . Message ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class MailExchange extends DefaultExchange { private MailBinding binding ; public MailExchange ( CamelContext context , ExchangePattern pattern , MailBinding binding ) { super ( context , pattern ) ; this . binding = binding ; } public MailExchange ( CamelContext context , ExchangePattern pattern , MailBinding binding , Message message ) { this ( context , pattern , binding ) ; setIn ( new MailMessage ( message ) ) ; } public MailExchange ( DefaultExchange parent , MailBinding binding ) { super ( parent ) ; this . binding = binding ; } @ Override public MailMessage getIn ( ) { return ( MailMessage ) super . getIn ( ) ; } @ Override public MailMessage getOut ( ) { return ( MailMessage ) super . getOut ( ) ; } @ Override public MailMessage getOut ( boolean lazyCreate ) { return ( MailMessage ) super . getOut ( lazyCreate ) ; } @ Override public MailMessage getFault ( ) { return ( MailMessage ) super . getFault ( ) ; } public MailBinding getBinding ( ) { return binding ; } @ Override public Exchange newInstance ( ) { return new MailExchange ( this , binding ) ; } @ Override protected MailMessage createInMessage ( ) { return new MailMessage ( ) ; } @ Override protected MailMessage createOutMessage ( ) { return new MailMessage ( ) ; } } 	0
package org . apache . camel . impl ; import java . net . URI ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import java . util . concurrent . ThreadFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . URISupport ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DefaultComponent < E extends Exchange > extends ServiceSupport implements Component < E > { private static final transient Log LOG = LogFactory . getLog ( DefaultComponent . class ) ; private int defaultThreadPoolSize = 5 ; private CamelContext camelContext ; private ScheduledExecutorService executorService ; public DefaultComponent ( ) { } public DefaultComponent ( CamelContext context ) { this . camelContext = context ; } public Endpoint < E > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; if ( path . startsWith ( "//" ) ) { path = path . substring ( 2 ) ; } int idx = path . indexOf ( '?' ) ; if ( idx > 0 ) { path = path . substring ( 0 , idx ) ; } Map parameters = URISupport . parseParameters ( u ) ; validateURI ( uri , path , parameters ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating endpoint uri=[" + uri + "], path=[" + path + "], parameters=[" + parameters + "]" ) ; } Endpoint < E > endpoint = createEndpoint ( uri , path , parameters ) ; if ( endpoint == null ) { return null ; } if ( parameters != null ) { endpoint . configureProperties ( parameters ) ; if ( useIntrospectionOnEndpoint ( ) ) { setProperties ( endpoint , parameters ) ; } if ( parameters . size ( ) > 0 ) { throw new ResolveEndpointFailedException ( uri , "There are " + parameters . size ( ) + " parameters that couldn't be set on the endpoint." + " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint." + " Unknown parameters=[" + parameters + "]" ) ; } } return endpoint ; } protected void validateURI ( String uri , String path , Map parameters ) throws ResolveEndpointFailedException { if ( uri . contains ( "&" ) && ! uri . contains ( "?" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: no ? marker however the uri " + "has & parameter separators. Check the uri if its missing a ? marker." ) ; } if ( uri . contains ( "&&" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: Double && marker found. " + "Check the uri and remove the duplicate & marker." ) ; } } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext context ) { this . camelContext = context ; } public ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { executorService = createExecutorService ( ) ; } return executorService ; } public void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } protected ScheduledExecutorService createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( defaultThreadPoolSize , new ThreadFactory ( ) { int counter ; public synchronized Thread newThread ( Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "Thread: " + ( ++ counter ) + " " + DefaultComponent . this . toString ( ) ) ; return thread ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { if ( executorService != null ) { executorService . shutdown ( ) ; } } protected abstract Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception ; protected void setProperties ( Object bean , Map parameters ) throws Exception { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , bean , parameters ) ; } protected boolean useIntrospectionOnEndpoint ( ) { return true ; } public < T > T convertTo ( Class < T > type , Object value ) { return CamelContextHelper . convertTo ( getCamelContext ( ) , type , value ) ; } public < T > T mandatoryConvertTo ( Class < T > type , Object value ) { return CamelContextHelper . mandatoryConvertTo ( getCamelContext ( ) , type , value ) ; } public < T > T newInstance ( Class < T > beanType ) { return getCamelContext ( ) . getInjector ( ) . newInstance ( beanType ) ; } public Object lookup ( String name ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name ) ; } public < T > T lookup ( String name , Class < T > beanType ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , beanType ) ; } public Object mandatoryLookup ( String name ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name ) ; } public < T > T mandatoryLookup ( String name , Class < T > beanType ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name , beanType ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type ) { return getAndRemoveParameter ( parameters , key , type , null ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type , T defaultValue ) { Object value = parameters . remove ( key ) ; if ( value == null ) { value = defaultValue ; } if ( value == null ) { return null ; } return convertTo ( type , value ) ; } } 	1
package org . apache . camel . component . spring . integration . adapter . config ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . apache . camel . component . spring . integration . adapter . CamelSourceAdapter ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . AbstractSimpleBeanDefinitionParser ; import org . springframework . beans . factory . xml . ParserContext ; public class CamelSourceAdpaterParser extends AbstractCamelContextBeanDefinitionParaser { @ Override protected Class < ? > getBeanClass ( Element element ) { return CamelSourceAdapter . class ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . RandomAccessFile ; import java . nio . channels . Channel ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . component . file . FileProcessStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class FileProcessStrategySupport implements FileProcessStrategy { public static final String DEFAULT_LOCK_FILE_POSTFIX = ".cameLock" ; private static final transient Log LOG = LogFactory . getLog ( FileProcessStrategySupport . class ) ; private boolean lockFile ; private FileRenamer lockFileRenamer ; protected FileProcessStrategySupport ( ) { this ( true ) ; } protected FileProcessStrategySupport ( boolean lockFile ) { this ( lockFile , new DefaultFileRenamer ( null , DEFAULT_LOCK_FILE_POSTFIX ) ) ; } protected FileProcessStrategySupport ( boolean lockFile , FileRenamer lockFileRenamer ) { this . lockFile = lockFile ; this . lockFileRenamer = lockFileRenamer ; } public boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { File newFile = lockFileRenamer . renameFile ( file ) ; String lockFileName = newFile . getAbsolutePath ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Locking the file: " + file + " using the lock file name: " + lockFileName ) ; } FileChannel channel = new RandomAccessFile ( lockFileName , "rw" ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; if ( lock != null ) { exchange . setProperty ( "org.apache.camel.fileChannel" , channel ) ; exchange . setProperty ( "org.apache.camel.file.lock" , lock ) ; exchange . setProperty ( "org.apache.camel.file.lock.name" , lockFileName ) ; return true ; } return false ; } return true ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { Channel channel = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.fileChannel" , Channel . class ) ; String lockfile = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock.name" , String . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unlocking file: " + file ) ; } channel . close ( ) ; File lock = new File ( lockfile ) ; lock . delete ( ) ; } } public boolean isLockFile ( ) { return lockFile ; } public void setLockFile ( boolean lockFile ) { this . lockFile = lockFile ; } public FileRenamer getLockFileRenamer ( ) { return lockFileRenamer ; } public void setLockFileRenamer ( FileRenamer lockFileRenamer ) { this . lockFileRenamer = lockFileRenamer ; } } 	1
package org . apache . camel . language . bean ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . bean . RegistryBean ; import org . apache . camel . impl . ExpressionSupport ; public class BeanExpression < E extends Exchange > extends ExpressionSupport < E > { private String beanName ; private String method ; public BeanExpression ( String beanName , String method ) { this . beanName = beanName ; this . method = method ; } @ Override public String toString ( ) { return "BeanExpression[bean: " + beanName + " method: " + method + "]" ; } protected String assertionFailureMessage ( E exchange ) { return "bean: " + beanName + " method: " + method ; } public Object evaluate ( E exchange ) { BeanProcessor processor = new BeanProcessor ( new RegistryBean ( exchange . getContext ( ) , beanName ) ) ; if ( method != null ) { processor . setMethod ( method ) ; } try { Exchange newExchange = exchange . copy ( ) ; if ( ! newExchange . getPattern ( ) . isOutCapable ( ) ) { newExchange . setPattern ( ExchangePattern . InOut ) ; } processor . process ( newExchange ) ; return newExchange . getOut ( true ) . getBody ( ) ; } catch ( Exception e ) { throw new RuntimeBeanExpressionException ( exchange , beanName , method , e ) ; } } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . StringTokenizer ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; public final class ExpressionBuilder { private ExpressionBuilder ( ) { } public static < E extends Exchange > Expression < E > headerExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getIn ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "header(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > headersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "headers" ; } } ; } public static < E extends Exchange > Expression < E > outHeaderExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } Object header = out . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "outHeader(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > outHeadersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "outHeaders" ; } } ; } public static < E extends Exchange > Expression < E > propertyExpression ( final String propertyName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperty ( propertyName ) ; } @ Override public String toString ( ) { return "property(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertiesExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperties ( ) ; } @ Override public String toString ( ) { return "properties" ; } } ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName ) { return systemPropertyExpression ( propertyName , null ) ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( propertyName , defaultValue ) ; } @ Override public String toString ( ) { return "systemProperty(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > constantExpression ( final Object value ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return value ; } @ Override public String toString ( ) { return "" + value ; } } ; } public static < E extends Exchange > Expression < E > bodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "body" ; } } ; } public static < E extends Exchange , T > Expression < E > bodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "bodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > outBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( ) ; } @ Override public String toString ( ) { return "outBody" ; } } ; } public static < E extends Exchange , T > Expression < E > outBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( type ) ; } @ Override public String toString ( ) { return "outBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > faultBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "faultBody" ; } } ; } public static < E extends Exchange , T > Expression < E > faultBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "faultBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > exchangeExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange ; } @ Override public String toString ( ) { return "exchange" ; } } ; } public static < E extends Exchange > Expression < E > inMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) ; } @ Override public String toString ( ) { return "inMessage" ; } } ; } public static < E extends Exchange > Expression < E > outMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) ; } @ Override public String toString ( ) { return "outMessage" ; } } ; } public static < E extends Exchange > Expression < E > convertTo ( final Expression expression , final Class type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } @ Override public String toString ( ) { return "" + expression + ".convertTo(" + type . getName ( ) + ".class)" ; } } ; } public static < E extends Exchange > Expression < E > tokenizeExpression ( final Expression < E > expression , final String token ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } StringTokenizer iter = new StringTokenizer ( text , token ) ; List < String > answer = new ArrayList < String > ( ) ; while ( iter . hasMoreTokens ( ) ) { answer . add ( iter . nextToken ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "tokenize(" + expression + ", " + token + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexTokenize ( final Expression < E > expression , String regexTokenizer ) { final Pattern pattern = Pattern . compile ( regexTokenizer ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return Arrays . asList ( pattern . split ( text ) ) ; } @ Override public String toString ( ) { return "regexTokenize(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final String replacement ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final Expression < E > replacementExpression ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; String replacement = evaluateStringExpression ( replacementExpression , exchange ) ; if ( text == null || replacement == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > append ( final Expression < E > left , final Expression < E > right ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return evaluateStringExpression ( left , exchange ) + evaluateStringExpression ( right , exchange ) ; } @ Override public String toString ( ) { return "append(" + left + ", " + right + ")" ; } } ; } public static < E extends Exchange > String evaluateStringExpression ( Expression < E > expression , E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , value ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( name , defaultValue ) ; } } ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions ) { return concatExpression ( expressions , null ) ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions , final String expression ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Expression < E > expression : expressions ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text != null ) { buffer . append ( text ) ; } } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( expression != null ) { return expression ; } else { return "concat" + expressions ; } } } ; } } 	1
package org . apache . camel ; public interface AsyncProcessor extends Processor { boolean process ( Exchange exchange , AsyncCallback callback ) ; } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SedaConsumer extends ServiceSupport implements Consumer , Runnable { private static final transient Log LOG = LogFactory . getLog ( SedaConsumer . class ) ; private SedaEndpoint endpoint ; private AsyncProcessor processor ; private Thread thread ; public SedaConsumer ( SedaEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; } @ Override public String toString ( ) { return "SedaConsumer: " + endpoint . getEndpointUri ( ) ; } public void run ( ) { while ( isRunAllowed ( ) ) { final Exchange exchange ; try { exchange = endpoint . getQueue ( ) . poll ( 1000 , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Interupted: " + e , e ) ; } continue ; } if ( exchange != null && isRunAllowed ( ) ) { try { processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } catch ( Exception e ) { LOG . error ( "Seda queue caught: " + e , e ) ; } } } } protected void doStart ( ) throws Exception { thread = new Thread ( this , getThreadName ( endpoint . getEndpointUri ( ) ) ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { thread . join ( ) ; } } 	1
package org . apache . camel . processor ; import java . util . Collection ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public class CompositeProcessor extends ServiceSupport implements Processor { private final Collection < Processor > processors ; public CompositeProcessor ( Collection < Processor > processors ) { this . processors = processors ; } public void process ( Exchange exchange ) throws Exception { for ( Processor processor : processors ) { processor . process ( exchange ) ; } } @ Override public String toString ( ) { StringBuilder builder = new StringBuilder ( "[ " ) ; boolean first = true ; for ( Processor processor : processors ) { if ( first ) { first = false ; } else { builder . append ( ", " ) ; } builder . append ( processor . toString ( ) ) ; } builder . append ( " ]" ) ; return builder . toString ( ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processors ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processors ) ; } } 	0
package org . apache . camel . model ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "optionalIdentifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class OptionalIdentifiedType < T extends OptionalIdentifiedType > { @ XmlTransient protected static Map < String , AtomicInteger > nodeCounters = new HashMap < String , AtomicInteger > ( ) ; @ XmlAttribute ( required = false ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlElement ( required = false ) private Description description ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Description getDescription ( ) { return description ; } public void setDescription ( Description description ) { this . description = description ; } public String getShortName ( ) { return "node" ; } public T description ( String text ) { if ( description == null ) { description = new Description ( ) ; } description . setText ( text ) ; return ( T ) this ; } public T description ( String text , String lang ) { description ( text ) ; description . setLang ( lang ) ; return ( T ) this ; } public T id ( String id ) { setId ( id ) ; return ( T ) this ; } public String idOrCreate ( ) { if ( id == null ) { setId ( createId ( ) ) ; } return getId ( ) ; } protected String createId ( ) { String key = getShortName ( ) ; return key + getNodeCounter ( key ) . incrementAndGet ( ) ; } protected static synchronized AtomicInteger getNodeCounter ( String key ) { AtomicInteger answer = nodeCounters . get ( key ) ; if ( answer == null ) { answer = new AtomicInteger ( 0 ) ; nodeCounters . put ( key , answer ) ; } return answer ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . JMSException ; public class MessageJMSPropertyAccessException extends RuntimeJmsException { private static final long serialVersionUID = - 6744171518099741324L ; public MessageJMSPropertyAccessException ( JMSException e ) { super ( "Failed to access a JMS property: " + e , e ) ; } } 	0
package org . apache . camel . util ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . lang . annotation . Annotation ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class ObjectHelper { private static final transient Log LOG = LogFactory . getLog ( ObjectHelper . class ) ; private ObjectHelper ( ) { } @ Deprecated public static boolean equals ( Object a , Object b ) { return equal ( a , b ) ; } public static boolean equal ( Object a , Object b ) { if ( a == b ) { return true ; } if ( a instanceof byte [ ] && b instanceof byte [ ] ) { return equalByteArray ( ( byte [ ] ) a , ( byte [ ] ) b ) ; } return a != null && b != null && a . equals ( b ) ; } public static boolean equalByteArray ( byte [ ] a , byte [ ] b ) { if ( a == b ) { return true ; } if ( a != null && b != null && a . length == b . length ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] != b [ i ] ) { return false ; } } return true ; } return false ; } public static boolean isEqualToAny ( Object object , Object ... values ) { for ( Object value : values ) { if ( equal ( object , value ) ) { return true ; } } return false ; } public static int compare ( Object a , Object b ) { if ( a == b ) { return 0 ; } if ( a == null ) { return - 1 ; } if ( b == null ) { return 1 ; } if ( a instanceof Comparable ) { Comparable comparable = ( Comparable ) a ; return comparable . compareTo ( b ) ; } else { int answer = a . getClass ( ) . getName ( ) . compareTo ( b . getClass ( ) . getName ( ) ) ; if ( answer == 0 ) { answer = a . hashCode ( ) - b . hashCode ( ) ; } return answer ; } } public static Boolean toBoolean ( Object value ) { if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return "true" . equalsIgnoreCase ( value . toString ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } if ( value instanceof Integer ) { return ( Integer ) value > 0 ? Boolean . TRUE : Boolean . FALSE ; } return null ; } public static void notNull ( Object value , String name ) { if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified" ) ; } } public static String [ ] splitOnCharacter ( String value , String needle , int count ) { String rc [ ] = new String [ count ] ; rc [ 0 ] = value ; for ( int i = 1 ; i < count ; i ++ ) { String v = rc [ i - 1 ] ; int p = v . indexOf ( needle ) ; if ( p < 0 ) { return rc ; } rc [ i - 1 ] = v . substring ( 0 , p ) ; rc [ i ] = v . substring ( p + 1 ) ; } return rc ; } public static String removeStartingCharacters ( String text , char ch ) { int idx = 0 ; while ( text . charAt ( idx ) == ch ) { idx ++ ; } if ( idx > 0 ) { return text . substring ( idx ) ; } return text ; } public static String capitalize ( String text ) { if ( text == null ) { return null ; } int length = text . length ( ) ; if ( length == 0 ) { return text ; } String answer = text . substring ( 0 , 1 ) . toUpperCase ( ) ; if ( length > 1 ) { answer += text . substring ( 1 , length ) ; } return answer ; } @ SuppressWarnings ( "unchecked" ) public static boolean contains ( Object collectionOrArray , Object value ) { if ( collectionOrArray instanceof Collection ) { Collection collection = ( Collection ) collectionOrArray ; return collection . contains ( value ) ; } else if ( collectionOrArray instanceof String && value instanceof String ) { String str = ( String ) collectionOrArray ; String subStr = ( String ) value ; return str . contains ( subStr ) ; } else { Iterator iter = createIterator ( collectionOrArray ) ; while ( iter . hasNext ( ) ) { if ( equal ( value , iter . next ( ) ) ) { return true ; } } } return false ; } @ SuppressWarnings ( "unchecked" ) public static Iterator createIterator ( Object value ) { if ( value == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . iterator ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { List < Object > list = Arrays . asList ( ( Object [ ] ) value ) ; return list . iterator ( ) ; } else if ( value instanceof NodeList ) { final NodeList nodeList = ( NodeList ) value ; return new Iterator < Node > ( ) { int idx = - 1 ; public boolean hasNext ( ) { return ++ idx < nodeList . getLength ( ) ; } public Node next ( ) { return nodeList . item ( idx ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } else { return Collections . singletonList ( value ) . iterator ( ) ; } } public static boolean matches ( List list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof Boolean ) { Boolean flag = ( Boolean ) value ; return flag . booleanValue ( ) ; } else { return true ; } } return false ; } public static boolean isNotNullAndNonEmpty ( String text ) { return text != null && text . trim ( ) . length ( ) > 0 ; } public static boolean isNullOrBlank ( String text ) { return text == null || text . trim ( ) . length ( ) <= 0 ; } public static String getSystemProperty ( String name , String defaultValue ) { try { return System . getProperty ( name , defaultValue ) ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Caught security exception accessing system property: " + name + ". Reason: " + e , e ) ; } return defaultValue ; } } public static String name ( Class type ) { return type != null ? type . getName ( ) : null ; } public static String className ( Object value ) { return name ( value != null ? value . getClass ( ) : null ) ; } public static Class < ? > loadClass ( String name ) { return loadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } public static Class < ? > loadClass ( String name , ClassLoader loader ) { ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { try { return contextClassLoader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { try { return loader . loadClass ( name ) ; } catch ( ClassNotFoundException e1 ) { LOG . debug ( "Could not find class: " + name + ". Reason: " + e ) ; } } } return null ; } public static InputStream loadResourceAsStream ( String name ) { InputStream in = null ; ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { in = contextClassLoader . getResourceAsStream ( name ) ; } if ( in == null ) { in = ObjectHelper . class . getClassLoader ( ) . getResourceAsStream ( name ) ; } return in ; } public static Object invokeMethod ( Method method , Object instance , Object ... parameters ) { try { return method . invoke ( instance , parameters ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType ) { List < Method > answer = new ArrayList < Method > ( ) ; do { Method [ ] methods = type . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( method . getAnnotation ( annotationType ) != null ) { answer . add ( method ) ; } } type = type . getSuperclass ( ) ; } while ( type != null ) ; return answer ; } public static String asString ( Object [ ] objects ) { if ( objects == null ) { return "null" ; } else { StringBuffer buffer = new StringBuffer ( "{" ) ; int counter = 0 ; for ( Object object : objects ) { if ( counter ++ > 0 ) { buffer . append ( ", " ) ; } String text = ( object == null ) ? "null" : object . toString ( ) ; buffer . append ( text ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } } public static boolean isAssignableFrom ( Class a , Class b ) { a = convertPrimitiveTypeToWrapperType ( a ) ; b = convertPrimitiveTypeToWrapperType ( b ) ; return a . isAssignableFrom ( b ) ; } public static Class convertPrimitiveTypeToWrapperType ( Class type ) { Class rc = type ; if ( type . isPrimitive ( ) ) { if ( type == int . class ) { rc = Integer . class ; } else if ( type == long . class ) { rc = Long . class ; } else if ( type == double . class ) { rc = Double . class ; } else if ( type == float . class ) { rc = Float . class ; } else if ( type == short . class ) { rc = Short . class ; } else if ( type == byte . class ) { rc = Byte . class ; } } return rc ; } public static String getDefaultCharacterSet ( ) { return Charset . defaultCharset ( ) . name ( ) ; } public static String getPropertyName ( Method method ) { String propertyName = method . getName ( ) ; if ( propertyName . startsWith ( "set" ) && method . getParameterTypes ( ) . length == 1 ) { propertyName = propertyName . substring ( 3 , 4 ) . toLowerCase ( ) + propertyName . substring ( 4 ) ; } return propertyName ; } public static boolean hasAnnotation ( Annotation [ ] annotations , Class < ? > type ) { for ( Annotation annotation : annotations ) { if ( type . isInstance ( annotation ) ) { return true ; } } return false ; } public static void close ( Closeable closeable , String name , Log log ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException e ) { if ( log != null ) { log . warn ( "Could not close: " + name + ". Reason: " + e , e ) ; } } } } public static < T > T cast ( Class < T > toType , Object value ) { if ( toType == boolean . class ) { return ( T ) cast ( Boolean . class , value ) ; } else if ( toType . isPrimitive ( ) ) { Class newType = convertPrimitiveTypeToWrapperType ( toType ) ; if ( newType != toType ) { return ( T ) cast ( newType , value ) ; } } try { return toType . cast ( value ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( "Failed to convert: " + value + " to type: " + toType . getName ( ) + " due to: " + e , e ) ; } } public static < T > T newInstance ( Class < T > type ) { try { return type . newInstance ( ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static < T > T newInstance ( Class < ? > actualType , Class < T > expectedType ) { try { Object value = actualType . newInstance ( ) ; return cast ( expectedType , value ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isJavaIdentifier ( String name ) { if ( name == null ) { return false ; } int size = name . length ( ) ; if ( size < 1 ) { return false ; } if ( Character . isJavaIdentifierStart ( name . charAt ( 0 ) ) ) { for ( int i = 1 ; i < size ; i ++ ) { if ( ! Character . isJavaIdentifierPart ( name . charAt ( i ) ) ) { return false ; } } return true ; } return false ; } public static Object type ( Object bean ) { return bean != null ? bean . getClass ( ) : null ; } public static boolean evaluateValuePredicate ( Object value ) { if ( value instanceof Boolean ) { Boolean aBoolean = ( Boolean ) value ; return aBoolean . booleanValue ( ) ; } return value != null ; } } 	1
package org . apache . camel . component . http ; import java . io . BufferedInputStream ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Producer ; import org . apache . camel . component . http . helper . LoadingByteArrayOutputStream ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . httpclient . Header ; import org . apache . commons . httpclient . HttpClient ; import org . apache . commons . httpclient . HttpMethod ; import org . apache . commons . httpclient . methods . EntityEnclosingMethod ; import org . apache . commons . httpclient . methods . RequestEntity ; import org . apache . commons . httpclient . methods . StringRequestEntity ; import org . apache . commons . io . IOUtils ; import static org . apache . camel . component . http . HttpMethods . HTTP_METHOD ; public class HttpProducer extends DefaultProducer < HttpExchange > implements Producer < HttpExchange > { public static final String HTTP_RESPONSE_CODE = "http.responseCode" ; public static final String QUERY = "org.apache.camel.component.http.query" ; public static final Set < String > HEADERS_TO_SKIP = new HashSet < String > ( Arrays . asList ( "content-length" , "content-type" , HTTP_RESPONSE_CODE . toLowerCase ( ) ) ) ; private HttpClient httpClient ; public HttpProducer ( HttpEndpoint endpoint ) { super ( endpoint ) ; httpClient = endpoint . createHttpClient ( ) ; } public void process ( Exchange exchange ) throws Exception { HttpMethod method = createMethod ( exchange ) ; Message in = exchange . getIn ( ) ; HttpBinding binding = ( ( HttpEndpoint ) getEndpoint ( ) ) . getBinding ( ) ; for ( String headerName : in . getHeaders ( ) . keySet ( ) ) { String headerValue = in . getHeader ( headerName , String . class ) ; if ( binding . shouldHeaderBePropagated ( headerName , headerValue ) ) { method . addRequestHeader ( headerName , headerValue ) ; } } Message out = exchange . getOut ( true ) ; try { int responseCode = httpClient . executeMethod ( method ) ; out . setHeaders ( in . getHeaders ( ) ) ; out . setHeader ( HTTP_RESPONSE_CODE , responseCode ) ; LoadingByteArrayOutputStream bos = new LoadingByteArrayOutputStream ( ) ; InputStream is = method . getResponseBodyAsStream ( ) ; IOUtils . copy ( is , bos ) ; bos . flush ( ) ; is . close ( ) ; out . setBody ( bos . createInputStream ( ) ) ; } finally { method . releaseConnection ( ) ; } Header [ ] headers = method . getResponseHeaders ( ) ; for ( Header header : headers ) { String name = header . getName ( ) ; String value = header . getValue ( ) ; out . setHeader ( name , value ) ; } } public HttpClient getHttpClient ( ) { return httpClient ; } public void setHttpClient ( HttpClient httpClient ) { this . httpClient = httpClient ; } protected HttpMethod createMethod ( Exchange exchange ) { String uri = ( ( HttpEndpoint ) getEndpoint ( ) ) . getHttpUri ( ) . toString ( ) ; RequestEntity requestEntity = createRequestEntity ( exchange ) ; Object m = exchange . getIn ( ) . getHeader ( HTTP_METHOD ) ; HttpMethods ms = m instanceof HttpMethods ? ( HttpMethods ) m : HttpMethods . valueOf ( m == null ? requestEntity == null ? "GET" : "POST" : m . toString ( ) ) ; HttpMethod method = ms . createMethod ( uri ) ; if ( exchange . getIn ( ) . getHeader ( QUERY ) != null ) { method . setQueryString ( exchange . getIn ( ) . getHeader ( QUERY , String . class ) ) ; } if ( ms . isEntityEnclosing ( ) ) { ( ( EntityEnclosingMethod ) method ) . setRequestEntity ( requestEntity ) ; } return method ; } protected RequestEntity createRequestEntity ( Exchange exchange ) { Message in = exchange . getIn ( ) ; if ( in . getBody ( ) == null ) { return null ; } RequestEntity entity = in . getBody ( RequestEntity . class ) ; if ( entity == null ) { String data = in . getBody ( String . class ) ; String contentType = in . getHeader ( "Content-Type" , String . class ) ; try { if ( contentType != null ) { return new StringRequestEntity ( data , contentType , null ) ; } return new StringRequestEntity ( data , null , null ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } return entity ; } protected boolean shouldHeaderBePropagated ( String headerName , String headerValue ) { if ( headerValue == null ) { return false ; } if ( HTTP_METHOD . equals ( headerName ) ) { return false ; } if ( headerName . startsWith ( "org.apache.camel" ) ) { return false ; } if ( HEADERS_TO_SKIP . contains ( headerName . toLowerCase ( ) ) ) { return false ; } return true ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; public class MethodInfo { private Class type ; private Method method ; private final List < ParameterInfo > parameters ; private final List < ParameterInfo > bodyParameters ; private final boolean hasCustomAnnotation ; private Expression parametersExpression ; public MethodInfo ( Class type , Method method , List < ParameterInfo > parameters , List < ParameterInfo > bodyParameters , boolean hasCustomAnnotation ) { this . type = type ; this . method = method ; this . parameters = parameters ; this . bodyParameters = bodyParameters ; this . hasCustomAnnotation = hasCustomAnnotation ; this . parametersExpression = createParametersExpression ( ) ; } public String toString ( ) { return method . toString ( ) ; } public MethodInvocation createMethodInvocation ( final Object pojo , final Exchange messageExchange ) { final Object [ ] arguments = ( Object [ ] ) parametersExpression . evaluate ( messageExchange ) ; return new MethodInvocation ( ) { public Method getMethod ( ) { return method ; } public Object [ ] getArguments ( ) { return arguments ; } public Object proceed ( ) throws Throwable { return invoke ( method , pojo , arguments , messageExchange ) ; } public Object getThis ( ) { return pojo ; } public AccessibleObject getStaticPart ( ) { return method ; } } ; } public Class getType ( ) { return type ; } public Method getMethod ( ) { return method ; } public Expression getParametersExpression ( ) { return parametersExpression ; } public List < ParameterInfo > getBodyParameters ( ) { return bodyParameters ; } public Class getBodyParameterType ( ) { ParameterInfo parameterInfo = bodyParameters . get ( 0 ) ; return parameterInfo . getType ( ) ; } public boolean bodyParameterMatches ( Class bodyType ) { Class actualType = getBodyParameterType ( ) ; return actualType != null && ObjectHelper . isAssignableFrom ( bodyType , actualType ) ; } public List < ParameterInfo > getParameters ( ) { return parameters ; } public boolean hasBodyParameter ( ) { return ! bodyParameters . isEmpty ( ) ; } public boolean isHasCustomAnnotation ( ) { return hasCustomAnnotation ; } public boolean isReturnTypeVoid ( ) { return method . getReturnType ( ) . getName ( ) . equals ( "void" ) ; } protected Object invoke ( Method mth , Object pojo , Object [ ] arguments , Exchange exchange ) throws IllegalAccessException , InvocationTargetException { return mth . invoke ( pojo , arguments ) ; } protected Expression createParametersExpression ( ) { final int size = parameters . size ( ) ; final Expression [ ] expressions = new Expression [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Expression parameterExpression = parameters . get ( i ) . getExpression ( ) ; expressions [ i ] = parameterExpression ; } return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object [ ] answer = new Object [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Object value = expressions [ i ] . evaluate ( exchange ) ; Class expectedType = parameters . get ( i ) . getType ( ) ; value = ExchangeHelper . convertToType ( exchange , expectedType , value ) ; answer [ i ] = value ; } return answer ; } @ Override public String toString ( ) { return "ParametersExpression: " + Arrays . asList ( expressions ) ; } } ; } } 	1
package org . apache . camel . component . ibatis ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . PollingConsumerSupport ; public class IBatisPollingConsumer extends PollingConsumerSupport { private final IBatisEndpoint endpoint ; public IBatisPollingConsumer ( IBatisEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public Exchange receive ( long timeout ) { return receiveNoWait ( ) ; } public Exchange receive ( ) { return receiveNoWait ( ) ; } public Exchange receiveNoWait ( ) { try { Exchange exchange = endpoint . createExchange ( ) ; Message in = exchange . getIn ( ) ; endpoint . query ( in ) ; return exchange ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Failed to poll: " + endpoint + ". Reason: " + e , e ) ; } } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . bean . RegistryBean ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "bean" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class BeanRef extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlAttribute ( required = false ) private String method ; @ XmlAttribute ( required = false ) private Class beanType ; @ XmlTransient private Object bean ; public BeanRef ( ) { } public BeanRef ( String ref ) { this . ref = ref ; } public BeanRef ( String ref , String method ) { this . ref = ref ; this . method = method ; } @ Override public String toString ( ) { return "Bean[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "bean" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public void setBean ( Object bean ) { this . bean = bean ; } public Class getBeanType ( ) { return beanType ; } public void setBeanType ( Class beanType ) { this . beanType = beanType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { BeanProcessor answer ; if ( ref != null ) { answer = new BeanProcessor ( new RegistryBean ( routeContext . getCamelContext ( ) , ref ) ) ; } else { if ( bean == null ) { ObjectHelper . notNull ( beanType , "bean, ref or beanType" ) ; bean = CamelContextHelper . newInstance ( routeContext . getCamelContext ( ) , beanType ) ; } answer = new BeanProcessor ( bean , routeContext . getCamelContext ( ) ) ; } if ( method != null ) { answer . setMethod ( method ) ; } return answer ; } @ Override public String getLabel ( ) { if ( ref != null ) { String methodText = "" ; if ( method != null ) { methodText = " method: " + method ; } return "ref: " + ref + methodText ; } else if ( bean != null ) { return bean . toString ( ) ; } else if ( beanType != null ) { return beanType . getName ( ) ; } else { return "" ; } } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import java . net . SocketAddress ; import java . nio . channels . CancelledKeyException ; import java . nio . channels . SelectionKey ; import java . nio . channels . ServerSocketChannel ; import java . nio . channels . SocketChannel ; import java . util . Iterator ; import java . util . Set ; import org . apache . http . impl . nio . reactor . AbstractMultiworkerIOReactor ; import org . apache . http . impl . nio . reactor . ChannelEntry ; import org . apache . http . nio . reactor . IOReactorException ; import org . apache . http . nio . reactor . ListeningIOReactor ; import org . apache . http . params . HttpParams ; import org . apache . http . util . concurrent . ThreadFactory ; public class DefaultListeningIOReactor extends AbstractMultiworkerIOReactor implements ListeningIOReactor { private volatile boolean closed ; private final HttpParams params ; public DefaultListeningIOReactor ( int workerCount , final ThreadFactory threadFactory , final HttpParams params ) throws IOReactorException { super ( workerCount , threadFactory , params ) ; this . params = params ; } public DefaultListeningIOReactor ( int workerCount , final HttpParams params ) throws IOReactorException { this ( workerCount , null , params ) ; } private void processEvents ( final Set selectedKeys ) throws IOReactorException { for ( Iterator it = selectedKeys . iterator ( ) ; it . hasNext ( ) ; ) { SelectionKey key = ( SelectionKey ) it . next ( ) ; processEvent ( key ) ; } selectedKeys . clear ( ) ; } private void processEvent ( final SelectionKey key ) throws IOReactorException { try { if ( key . isAcceptable ( ) ) { ServerSocketChannel serverChannel = ( ServerSocketChannel ) key . channel ( ) ; SocketChannel socketChannel = null ; try { socketChannel = serverChannel . accept ( ) ; } catch ( IOException ex ) { if ( this . exceptionHandler == null || ! this . exceptionHandler . handle ( ex ) ) { throw new IOReactorException ( "Failure accepting connection" , ex ) ; } } if ( socketChannel != null ) { try { prepareSocket ( socketChannel . socket ( ) ) ; } catch ( IOException ex ) { if ( this . exceptionHandler == null || ! this . exceptionHandler . handle ( ex ) ) { throw new IOReactorException ( "Failure initalizing socket" , ex ) ; } } ChannelEntry entry = new ChannelEntry ( socketChannel ) ; addChannel ( entry ) ; } } } catch ( CancelledKeyException ex ) { key . attach ( null ) ; } } public SocketAddress listen ( final SocketAddress address ) throws IOException { if ( this . closed ) { throw new IllegalStateException ( "I/O reactor has been shut down" ) ; } ServerSocketChannel serverChannel = ServerSocketChannel . open ( ) ; serverChannel . configureBlocking ( false ) ; serverChannel . socket ( ) . bind ( address ) ; SelectionKey key = serverChannel . register ( this . selector , SelectionKey . OP_ACCEPT ) ; key . attach ( null ) ; return serverChannel . socket ( ) . getLocalSocketAddress ( ) ; } @ Override protected void processEvents ( int count ) throws IOReactorException { processEvents ( this . selector . selectedKeys ( ) ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . Service ; import org . apache . camel . util . ServiceHelper ; public abstract class ServiceSupport implements Service { private static int threadCounter ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private AtomicBoolean starting = new AtomicBoolean ( false ) ; private AtomicBoolean stopping = new AtomicBoolean ( false ) ; private AtomicBoolean stopped = new AtomicBoolean ( false ) ; private Collection childServices ; public void start ( ) throws Exception { if ( started . compareAndSet ( false , true ) ) { starting . set ( true ) ; try { if ( childServices != null ) { ServiceHelper . startServices ( childServices ) ; } doStart ( ) ; } finally { starting . set ( false ) ; } } } public void stop ( ) throws Exception { if ( started . get ( ) && stopping . compareAndSet ( false , true ) ) { try { doStop ( ) ; } finally { if ( childServices != null ) { ServiceHelper . stopServices ( childServices ) ; } stopped . set ( true ) ; started . set ( false ) ; stopping . set ( false ) ; } } } public boolean isStarted ( ) { return started . get ( ) ; } public boolean isStarting ( ) { return starting . get ( ) ; } public boolean isStopping ( ) { return stopping . get ( ) ; } protected boolean isRunAllowed ( ) { return ! ( stopping . get ( ) || stopped . get ( ) ) ; } public boolean isStopped ( ) { return stopped . get ( ) ; } protected abstract void doStart ( ) throws Exception ; protected abstract void doStop ( ) throws Exception ; protected String getThreadName ( String prefix ) { return prefix + " thread:" + nextThreadCounter ( ) ; } protected static synchronized int nextThreadCounter ( ) { return ++ threadCounter ; } protected void addChildService ( Object childService ) { if ( childServices == null ) { childServices = new ArrayList ( ) ; } childServices . add ( childService ) ; } protected boolean removeChildService ( Object childService ) { if ( childServices != null ) { return childServices . remove ( childService ) ; } else { return false ; } } } 	1
package org . apache . camel . spi ; public interface Injector { < T > T newInstance ( Class < T > type ) ; } 	0
package org . apache . camel . converter . stream ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public interface StreamCache { } 	1
package org . apache . camel . impl ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . spi . ExceptionHandler ; public abstract class PollingConsumerSupport < E extends Exchange > extends ServiceSupport implements PollingConsumer < E > { private final Endpoint < E > endpoint ; private ExceptionHandler exceptionHandler ; public PollingConsumerSupport ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } @ Override public String toString ( ) { return "PullConsumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void handleException ( Throwable t ) { getExceptionHandler ( ) . handleException ( t ) ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import javax . xml . transform . stream . StreamSource ; public class BytesSource extends StreamSource { private byte [ ] data ; public BytesSource ( byte [ ] data ) { this . data = data ; } public BytesSource ( byte [ ] data , String systemId ) { this . data = data ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { return new ByteArrayInputStream ( data ) ; } public Reader getReader ( ) { return new InputStreamReader ( getInputStream ( ) ) ; } public byte [ ] getData ( ) { return data ; } public String toString ( ) { return "BytesSource[" + new String ( data ) + "]" ; } } 	1
package org . apache . camel . component . uface . swing ; import java . awt . * ; import javax . swing . * ; import org . apache . camel . component . uface . UFaceBrowser ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . spring . Main ; import org . ufacekit . ui . UIComposite ; import org . ufacekit . ui . swing . SwingComposite ; import org . ufacekit . ui . swing . SwingFactory ; import org . ufacekit . ui . swing . databinding . swing . SwingRealm ; public class SwingBrowser extends UFaceBrowser { static { SwingRealm . createDefault ( ) ; } public SwingBrowser ( DefaultCamelContext camelContext ) { super ( camelContext ) ; } public void run ( ) { JFrame frame = new JFrame ( ) ; frame . setTitle ( "Camel Browser" ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; Container container = frame . getContentPane ( ) ; UIComposite composite = new SwingComposite ( container , new SwingFactory ( ) . newFillLayout ( ) ) ; createBrowserUI ( composite ) ; frame . pack ( ) ; frame . setSize ( 650 , 500 ) ; frame . setVisible ( true ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . Proxy ; import org . apache . camel . Endpoint ; import org . apache . camel . Producer ; public final class ProxyHelper { private ProxyHelper ( ) { } public static Object createProxy ( final Endpoint endpoint , ClassLoader cl , Class interfaces [ ] ) throws Exception { final Producer producer = endpoint . createProducer ( ) ; return Proxy . newProxyInstance ( cl , interfaces , new CamelInvocationHandler ( endpoint , producer ) ) ; } public static Object createProxy ( Endpoint endpoint , Class interfaces [ ] ) throws Exception { if ( interfaces . length < 1 ) { throw new IllegalArgumentException ( "You must provide at least 1 interface class." ) ; } return createProxy ( endpoint , interfaces [ 0 ] . getClassLoader ( ) , interfaces ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , ClassLoader cl , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , cl , new Class [ ] { interfaceClass } ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , new Class [ ] { interfaceClass } ) ; } } 	1
package org . apache . camel . component . jpa ; import java . util . Arrays ; import java . util . Collection ; import java . util . Map ; import java . util . Set ; import javax . persistence . EntityManager ; import javax . persistence . Query ; public abstract class QueryBuilder implements QueryFactory { ParameterBuilder parameterBuilder ; public static QueryBuilder query ( final String query ) { return new QueryBuilder ( ) { protected Query makeQueryObject ( EntityManager entityManager ) { return entityManager . createQuery ( query ) ; } @ Override public String toString ( ) { return "Query: " + query + " params: " + getParameterDescription ( ) ; } } ; } public static QueryBuilder namedQuery ( final String namedQuery ) { return new QueryBuilder ( ) { protected Query makeQueryObject ( EntityManager entityManager ) { return entityManager . createNamedQuery ( namedQuery ) ; } @ Override public String toString ( ) { return "Named: " + namedQuery + getParameterDescription ( ) ; } } ; } public static QueryBuilder nativeQuery ( final String nativeQuery ) { return new QueryBuilder ( ) { protected Query makeQueryObject ( EntityManager entityManager ) { return entityManager . createNativeQuery ( nativeQuery ) ; } @ Override public String toString ( ) { return "NativeQuery: " + nativeQuery + getParameterDescription ( ) ; } } ; } public QueryBuilder parameters ( Object ... parameters ) { return parameters ( Arrays . asList ( parameters ) ) ; } public QueryBuilder parameters ( final Collection parameters ) { checkNoParametersConfigured ( ) ; parameterBuilder = new ParameterBuilder ( ) { public void populateQuery ( EntityManager entityManager , Query query ) { int counter = 0 ; for ( Object parameter : parameters ) { query . setParameter ( counter ++ , parameter ) ; } } @ Override public String toString ( ) { return "Parameters: " + parameters ; } } ; return this ; } public QueryBuilder parameters ( final Map < String , Object > parameterMap ) { checkNoParametersConfigured ( ) ; parameterBuilder = new ParameterBuilder ( ) { public void populateQuery ( EntityManager entityManager , Query query ) { Set < Map . Entry < String , Object > > entries = parameterMap . entrySet ( ) ; for ( Map . Entry < String , Object > entry : entries ) { query . setParameter ( entry . getKey ( ) , entry . getValue ( ) ) ; } } @ Override public String toString ( ) { return "Parameters: " + parameterMap ; } } ; return this ; } protected void checkNoParametersConfigured ( ) { if ( parameterBuilder != null ) { throw new IllegalArgumentException ( "Cannot add parameters to a QueryBuilder which already has parameters configured" ) ; } } public Query createQuery ( EntityManager entityManager ) { Query query = makeQueryObject ( entityManager ) ; populateQuery ( entityManager , query ) ; return query ; } protected String getParameterDescription ( ) { if ( parameterBuilder == null ) { return "" ; } else { return " " + parameterBuilder . toString ( ) ; } } protected void populateQuery ( EntityManager entityManager , Query query ) { if ( parameterBuilder != null ) { parameterBuilder . populateQuery ( entityManager , query ) ; } } protected abstract Query makeQueryObject ( EntityManager entityManager ) ; protected abstract static class ParameterBuilder { public abstract void populateQuery ( EntityManager entityManager , Query query ) ; } } 	0
package org . apache . camel . model ; import java . util . Collection ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Aggregator ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "aggregator" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class AggregatorType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private AggregationCollection aggregationCollection ; @ XmlAttribute ( required = false ) private Integer batchSize ; @ XmlAttribute ( required = false ) private Long batchTimeout ; @ XmlAttribute ( required = false ) private String strategyRef ; @ XmlElement ( name = "completedPredicate" , required = false ) private CompletedPredicate completedPredicate ; public AggregatorType ( ) { } public AggregatorType ( Expression correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( ExpressionType correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { super ( correlationExpression ) ; this . aggregationStrategy = aggregationStrategy ; } @ Override public String toString ( ) { return "Aggregator[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "aggregator" ; } @ SuppressWarnings ( "unchecked" ) @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routes , aggregator ) ; } private void doAddRoute ( RouteContext routeContext , Collection < Route > routes , final Aggregator aggregator ) throws Exception { Route route = new Route < Exchange > ( aggregator . getEndpoint ( ) , aggregator ) { @ Override public String toString ( ) { return "AggregatorRoute[" + getEndpoint ( ) + " -> " + aggregator . getProcessor ( ) + "]" ; } } ; routes . add ( route ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routeContext . getCamelContext ( ) . getRoutes ( ) , aggregator ) ; routeContext . setIsRouteAdded ( true ) ; return aggregator ; } protected Aggregator createAggregator ( RouteContext routeContext ) throws Exception { Endpoint from = routeContext . getEndpoint ( ) ; final Processor processor = routeContext . createProcessor ( this ) ; final Aggregator aggregator ; if ( aggregationCollection != null ) { aggregator = new Aggregator ( from , processor , aggregationCollection ) ; } else { AggregationStrategy strategy = getAggregationStrategy ( ) ; if ( strategy == null && strategyRef != null ) { strategy = routeContext . lookup ( strategyRef , AggregationStrategy . class ) ; } if ( strategy == null ) { strategy = new UseLatestAggregationStrategy ( ) ; } Expression aggregateExpression = getExpression ( ) . createExpression ( routeContext ) ; Predicate predicate = null ; if ( completedPredicate != null ) { predicate = completedPredicate . createPredicate ( routeContext ) ; } if ( predicate != null ) { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy , predicate ) ; } else { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy ) ; } } if ( batchSize != null ) { aggregator . setBatchSize ( batchSize ) ; } if ( batchTimeout != null ) { aggregator . setBatchTimeout ( batchTimeout ) ; } return aggregator ; } public AggregationCollection getAggregationCollection ( ) { return aggregationCollection ; } public void setAggregationCollection ( AggregationCollection aggregationCollection ) { this . aggregationCollection = aggregationCollection ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public Integer getBatchSize ( ) { return batchSize ; } public void setBatchSize ( Integer batchSize ) { this . batchSize = batchSize ; } public Long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( Long batchTimeout ) { this . batchTimeout = batchTimeout ; } public String getStrategyRef ( ) { return strategyRef ; } public void setStrategyRef ( String strategyRef ) { this . strategyRef = strategyRef ; } public CompletedPredicate getCompletePredicate ( ) { return completedPredicate ; } public void setCompletePredicate ( CompletedPredicate completedPredicate ) { this . completedPredicate = completedPredicate ; } public AggregatorType batchSize ( int batchSize ) { setBatchSize ( batchSize ) ; return this ; } public AggregatorType batchTimeout ( long batchTimeout ) { setBatchTimeout ( batchTimeout ) ; return this ; } public ExpressionClause < AggregatorType > completedPredicate ( ) { checkNoCompletedPredicate ( ) ; ExpressionClause < AggregatorType > clause = new ExpressionClause < AggregatorType > ( this ) ; completedPredicate = new CompletedPredicate ( clause ) ; return clause ; } public AggregatorType completedPredicate ( Predicate predicate ) { checkNoCompletedPredicate ( ) ; completedPredicate = new CompletedPredicate ( predicate ) ; return this ; } protected void checkNoCompletedPredicate ( ) { if ( completedPredicate != null ) { throw new IllegalArgumentException ( "There already is a completedPredicate defined for this aggregator: " + this ) ; } } } 	1
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; public class ExceptionEvent { private final DebugInterceptor interceptor ; private final Exchange exchange ; private final Throwable exception ; public ExceptionEvent ( DebugInterceptor interceptor , Exchange exchange , Throwable exception ) { this . interceptor = interceptor ; this . exchange = exchange ; this . exception = exception ; } public Throwable getException ( ) { return exception ; } public Exchange getExchange ( ) { return exchange ; } public DebugInterceptor getInterceptor ( ) { return interceptor ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Method ; public interface MethodInvocation { Method getMethod ( ) ; Object [ ] getArguments ( ) ; Object proceed ( ) throws Throwable ; Object getThis ( ) ; AccessibleObject getStaticPart ( ) ; } 	1
package org . apache . camel . bam ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . bam . model . ActivityDefinition ; import org . apache . camel . bam . model . ProcessDefinition ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . bam . processor . ActivityMonitorEngine ; import org . apache . camel . bam . processor . JpaBamProcessor ; import org . apache . camel . bam . rules . ProcessRules ; import org . apache . camel . builder . RouteBuilder ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallbackWithoutResult ; import org . springframework . transaction . support . TransactionTemplate ; import static org . apache . camel . util . ObjectHelper . notNull ; public abstract class ProcessBuilder extends RouteBuilder { private static int processCounter ; private JpaTemplate jpaTemplate ; private final TransactionTemplate transactionTemplate ; private final String processName ; private List < ActivityBuilder > activityBuilders = new ArrayList < ActivityBuilder > ( ) ; private Class entityType = ProcessInstance . class ; private ProcessRules processRules = new ProcessRules ( ) ; private ProcessDefinition processDefinition ; protected ProcessBuilder ( JpaTemplate jpaTemplate , TransactionTemplate transactionTemplate ) { this ( jpaTemplate , transactionTemplate , createProcessName ( ) ) ; } protected ProcessBuilder ( JpaTemplate jpaTemplate , TransactionTemplate transactionTemplate , String processName ) { this . jpaTemplate = jpaTemplate ; this . transactionTemplate = transactionTemplate ; this . processName = processName ; } protected static synchronized String createProcessName ( ) { return "Process-" + ( ++ processCounter ) ; } public ActivityBuilder activity ( String endpointUri ) { return activity ( endpoint ( endpointUri ) ) ; } public ActivityBuilder activity ( Endpoint endpoint ) { ActivityBuilder answer = new ActivityBuilder ( this , endpoint ) ; activityBuilders . add ( answer ) ; return answer ; } public ProcessBuilder entityType ( Class entityType ) { this . entityType = entityType ; return this ; } public Processor createActivityProcessor ( ActivityBuilder activityBuilder ) { notNull ( jpaTemplate , "jpaTemplate" ) ; transactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { protected void doInTransactionWithoutResult ( TransactionStatus status ) { processRules . setProcessDefinition ( getProcessDefinition ( ) ) ; } } ) ; return new JpaBamProcessor ( getTransactionTemplate ( ) , getJpaTemplate ( ) , activityBuilder . getCorrelationExpression ( ) , activityBuilder . getActivityRules ( ) , getEntityType ( ) ) ; } public List < ActivityBuilder > getActivityBuilders ( ) { return activityBuilders ; } public Class getEntityType ( ) { return entityType ; } public JpaTemplate getJpaTemplate ( ) { return jpaTemplate ; } public void setJpaTemplate ( JpaTemplate jpaTemplate ) { this . jpaTemplate = jpaTemplate ; } public TransactionTemplate getTransactionTemplate ( ) { return transactionTemplate ; } public ProcessRules getProcessRules ( ) { return processRules ; } public String getProcessName ( ) { return processName ; } public ProcessDefinition getProcessDefinition ( ) { if ( processDefinition == null ) { processDefinition = findOrCreateProcessDefinition ( ) ; } return processDefinition ; } public void setProcessDefinition ( ProcessDefinition processDefinition ) { this . processDefinition = processDefinition ; } protected void populateRoutes ( List < Route > routes ) throws Exception { boolean first = true ; for ( ActivityBuilder builder : activityBuilders ) { Route route = builder . createRoute ( ) ; if ( first ) { route . getServices ( ) . add ( new ActivityMonitorEngine ( getJpaTemplate ( ) , getTransactionTemplate ( ) , getProcessRules ( ) ) ) ; first = false ; } routes . add ( route ) ; } } public ActivityDefinition findOrCreateActivityDefinition ( String activityName ) { ProcessDefinition definition = getProcessDefinition ( ) ; List < ActivityDefinition > list = jpaTemplate . find ( "select x from " + ActivityDefinition . class . getName ( ) + " x where x.processDefinition = ?1 and x.name = ?2" , definition , activityName ) ; if ( ! list . isEmpty ( ) ) { return list . get ( 0 ) ; } else { ActivityDefinition answer = new ActivityDefinition ( ) ; answer . setName ( activityName ) ; answer . setProcessDefinition ( ProcessDefinition . getRefreshedProcessDefinition ( jpaTemplate , definition ) ) ; jpaTemplate . persist ( answer ) ; return answer ; } } protected ProcessDefinition findOrCreateProcessDefinition ( ) { List < ProcessDefinition > list = jpaTemplate . find ( "select x from " + ProcessDefinition . class . getName ( ) + " x where x.name = ?1" , processName ) ; if ( ! list . isEmpty ( ) ) { return list . get ( 0 ) ; } else { ProcessDefinition answer = new ProcessDefinition ( ) ; answer . setName ( processName ) ; jpaTemplate . persist ( answer ) ; return answer ; } } } 	0
package org . apache . camel . util ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLDecoder ; import java . util . Arrays ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . jar . JarEntry ; import java . util . jar . JarInputStream ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResolverUtil < T > { protected static final transient Log LOG = LogFactory . getLog ( ResolverUtil . class ) ; public static interface Test { boolean matches ( Class type ) ; } public static class IsA implements Test { private Class parent ; public IsA ( Class parentType ) { this . parent = parentType ; } public boolean matches ( Class type ) { return type != null && parent . isAssignableFrom ( type ) ; } @ Override public String toString ( ) { return "is assignable to " + parent . getSimpleName ( ) ; } } public static class AnnotatedWith implements Test { private Class < ? extends Annotation > annotation ; public AnnotatedWith ( Class < ? extends Annotation > annotation ) { this . annotation = annotation ; } public boolean matches ( Class type ) { return type != null && type . isAnnotationPresent ( annotation ) ; } @ Override public String toString ( ) { return "annotated with @" + annotation . getSimpleName ( ) ; } } private Set < Class < ? extends T > > matches = new HashSet < Class < ? extends T > > ( ) ; private Set < ClassLoader > classLoaders ; public Set < Class < ? extends T > > getClasses ( ) { return matches ; } public Set < ClassLoader > getClassLoaders ( ) { if ( classLoaders == null ) { classLoaders = new HashSet < ClassLoader > ( ) ; classLoaders . add ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; classLoaders . add ( ResolverUtil . class . getClassLoader ( ) ) ; } return classLoaders ; } public void setClassLoaders ( Set < ClassLoader > classLoaders ) { this . classLoaders = classLoaders ; } public void findImplementations ( Class parent , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for implementations of " + parent . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new IsA ( parent ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void findAnnotated ( Class < ? extends Annotation > annotation , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for annotations of " + annotation . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new AnnotatedWith ( annotation ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void find ( Test test , String packageName ) { packageName = packageName . replace ( '.' , '/' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; for ( ClassLoader classLoader : set ) { find ( test , packageName , classLoader ) ; } } protected void find ( Test test , String packageName , ClassLoader loader ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching for: " + test + " in package: " + packageName + " using classloader: " + loader . getClass ( ) . getName ( ) ) ; } if ( loader . getClass ( ) . getName ( ) . endsWith ( "org.apache.felix.framework.searchpolicy.ContentClassLoader" ) ) { LOG . trace ( "This is not an URL classloader, skipping" ) ; return ; } try { Method mth = loader . getClass ( ) . getMethod ( "getBundle" , new Class [ ] { } ) ; if ( mth != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from osgi buindle using classloader: " + loader ) ; } loadImplementationsInBundle ( test , packageName , loader , mth ) ; return ; } } catch ( NoSuchMethodException e ) { LOG . trace ( "It's not an osgi bundle classloader" ) ; } Enumeration < URL > urls ; try { urls = getResources ( loader , packageName ) ; if ( ! urls . hasMoreElements ( ) ) { LOG . trace ( "No URLs returned by classloader" ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read package: " + packageName , ioe ) ; return ; } while ( urls . hasMoreElements ( ) ) { URL url = null ; try { url = urls . nextElement ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "URL from classloader: " + url ) ; } String urlPath = url . getFile ( ) ; urlPath = URLDecoder . decode ( urlPath , "UTF-8" ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Decoded urlPath: " + urlPath ) ; } if ( urlPath . startsWith ( "file:" ) ) { urlPath = urlPath . substring ( 5 ) ; } if ( urlPath . startsWith ( "bundle:" ) ) { LOG . trace ( "It's a virtual osgi bundle, skipping" ) ; continue ; } if ( urlPath . indexOf ( '!' ) > 0 ) { urlPath = urlPath . substring ( 0 , urlPath . indexOf ( '!' ) ) ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Scanning for classes in [" + urlPath + "] matching criteria: " + test ) ; } File file = new File ( urlPath ) ; if ( file . isDirectory ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from directory: " + file ) ; } loadImplementationsInDirectory ( test , packageName , file ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from jar: " + file ) ; } loadImplementationsInJar ( test , packageName , file ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read entries in url: " + url , ioe ) ; } } } protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Getting resource URL for package: " + packageName + " with classloader: " + loader ) ; } return loader . getResources ( packageName ) ; } private void loadImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { Set < String > urls = OsgiUtil . getImplementationsInBundle ( test , packageName , loader , mth ) ; if ( urls != null ) { for ( String url : urls ) { addIfMatching ( test , url ) ; } } } private static final class OsgiUtil { private OsgiUtil ( ) { } static Set < String > getImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { try { org . osgi . framework . Bundle bundle = ( org . osgi . framework . Bundle ) mth . invoke ( loader ) ; org . osgi . framework . Bundle [ ] bundles = bundle . getBundleContext ( ) . getBundles ( ) ; Set < String > urls = new HashSet < String > ( ) ; for ( org . osgi . framework . Bundle bd : bundles ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching in bundle:" + bd ) ; } Enumeration < URL > paths = bd . findEntries ( "/" + packageName , "*.class" , true ) ; while ( paths != null && paths . hasMoreElements ( ) ) { URL path = paths . nextElement ( ) ; urls . add ( path . getPath ( ) . substring ( 1 ) ) ; } } return urls ; } catch ( Throwable t ) { LOG . error ( "Could not search osgi bundles for classes matching criteria: " + test + "due to an Exception: " + t . getMessage ( ) ) ; return null ; } } } private void loadImplementationsInDirectory ( Test test , String parent , File location ) { File [ ] files = location . listFiles ( ) ; StringBuilder builder = null ; for ( File file : files ) { builder = new StringBuilder ( 100 ) ; String name = file . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; builder . append ( parent ) . append ( "/" ) . append ( name ) ; String packageOrClass = parent == null ? name : builder . toString ( ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageOrClass , file ) ; } else if ( name . endsWith ( ".class" ) ) { addIfMatching ( test , packageOrClass ) ; } } } } private void loadImplementationsInJar ( Test test , String parent , File jarfile ) { JarInputStream jarStream = null ; try { jarStream = new JarInputStream ( new FileInputStream ( jarfile ) ) ; JarEntry entry ; while ( ( entry = jarStream . getNextJarEntry ( ) ) != null ) { String name = entry . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; if ( ! entry . isDirectory ( ) && name . startsWith ( parent ) && name . endsWith ( ".class" ) ) { addIfMatching ( test , name ) ; } } } } catch ( IOException ioe ) { LOG . error ( "Could not search jar file '" + jarfile + "' for classes matching criteria: " + test + " due to an IOException: " + ioe . getMessage ( ) , ioe ) ; } finally { ObjectHelper . close ( jarStream , jarfile . getPath ( ) , LOG ) ; } } protected void addIfMatching ( Test test , String fqn ) { try { String externalName = fqn . substring ( 0 , fqn . indexOf ( '.' ) ) . replace ( '/' , '.' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; boolean found = false ; for ( ClassLoader classLoader : set ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Testing for class " + externalName + " matches criteria [" + test + "]" ) ; } try { Class type = classLoader . loadClass ( externalName ) ; if ( test . matches ( type ) ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Found class: " + type + " in classloader: " + classLoader ) ; } matches . add ( ( Class < T > ) type ) ; } found = true ; break ; } catch ( ClassNotFoundException e ) { LOG . debug ( "Could not find class '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } catch ( NoClassDefFoundError e ) { LOG . debug ( "Could not find the class defintion '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } } if ( ! found ) { LOG . warn ( "Could not find class '" + fqn + "' in any classloaders: " + set ) ; } } catch ( Throwable t ) { LOG . warn ( "Could not examine class '" + fqn + "' due to a " + t . getClass ( ) . getName ( ) + " with message: " + t . getMessage ( ) , t ) ; } } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . List ; import java . util . logging . Logger ; import javax . xml . namespace . QName ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . apache . cxf . helpers . DOMUtils ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; public abstract class AbstractMessageOutInterceptor < T extends Message > extends AbstractPhaseInterceptor < T > { public AbstractMessageOutInterceptor ( String phase ) { super ( phase ) ; } protected boolean isRequestor ( Message message ) { return Boolean . TRUE . equals ( message . get ( Message . REQUESTOR_ROLE ) ) ; } protected abstract Logger getLogger ( ) ; protected Element createElement ( QName elName , List < Element > childEl ) { Document doc = DOMUtils . createDocument ( ) ; String prefix = elName . getPrefix ( ) ; StringBuilder tagName = new StringBuilder ( ) ; if ( ! "" . equals ( prefix ) ) { tagName . append ( prefix ) ; tagName . append ( ":" ) ; } tagName . append ( elName . getLocalPart ( ) ) ; Element el = doc . createElementNS ( elName . getNamespaceURI ( ) , tagName . toString ( ) ) ; if ( ! "" . equals ( elName . getPrefix ( ) ) ) { StringBuilder attrName = new StringBuilder ( "xmlns" ) ; attrName . append ( ':' ) ; attrName . append ( elName . getPrefix ( ) ) ; el . setAttribute ( attrName . toString ( ) , elName . getNamespaceURI ( ) ) ; } for ( Element part : childEl ) { Node adoptedNode = doc . adoptNode ( part ) ; el . appendChild ( adoptedNode ) ; } return el ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . UnmarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "unmarshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class UnmarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public UnmarshalType ( ) { } public UnmarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public UnmarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "unmarshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new UnmarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . util . concurrent . ScheduledExecutorService ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; public abstract class RemoteFileConsumer < T extends RemoteFileExchange > extends ScheduledPollConsumer < T > { RemoteFileEndpoint < T > endpoint ; public RemoteFileConsumer ( RemoteFileEndpoint < T > endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } public RemoteFileConsumer ( RemoteFileEndpoint < T > endpoint , Processor processor , ScheduledExecutorService executor ) { super ( endpoint , processor , executor ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class BuilderSupport { private CamelContext context ; private ErrorHandlerBuilder errorHandlerBuilder ; private boolean inheritErrorHandler = true ; protected BuilderSupport ( CamelContext context ) { this . context = context ; } protected BuilderSupport ( BuilderSupport parent ) { this . context = parent . getContext ( ) ; this . inheritErrorHandler = parent . inheritErrorHandler ; if ( inheritErrorHandler && parent . errorHandlerBuilder != null ) { this . errorHandlerBuilder = parent . errorHandlerBuilder . copy ( ) ; } } public ValueBuilder header ( String name ) { return Builder . header ( name ) ; } public ValueBuilder body ( ) { return Builder . body ( ) ; } public < T > ValueBuilder body ( Class < T > type ) { return Builder . bodyAs ( type ) ; } public ValueBuilder outBody ( ) { return Builder . outBody ( ) ; } public < T > ValueBuilder outBody ( Class < T > type ) { return Builder . outBodyAs ( type ) ; } public ValueBuilder faultBody ( ) { return Builder . faultBody ( ) ; } public < T > ValueBuilder faultBodyAs ( Class < T > type ) { return Builder . faultBodyAs ( type ) ; } public ValueBuilder systemProperty ( String name ) { return Builder . systemProperty ( name ) ; } public ValueBuilder systemProperty ( String name , String defaultValue ) { return Builder . systemProperty ( name , defaultValue ) ; } public ValueBuilder constant ( Object value ) { return Builder . constant ( value ) ; } public Endpoint endpoint ( String uri ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; Endpoint endpoint = getContext ( ) . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public < T extends Endpoint > T endpoint ( String uri , Class < T > type ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; T endpoint = getContext ( ) . getEndpoint ( uri , type ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public List < Endpoint > endpoints ( String ... uris ) throws NoSuchEndpointException { List < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; for ( String uri : uris ) { endpoints . add ( endpoint ( uri ) ) ; } return endpoints ; } public List < Endpoint > endpoints ( Endpoint ... endpoints ) { List < Endpoint > answer = new ArrayList < Endpoint > ( ) ; answer . addAll ( Arrays . asList ( endpoints ) ) ; return answer ; } public NoErrorHandlerBuilder noErrorHandler ( ) { return new NoErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( ) { return new LoggingErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( String log ) { return loggingErrorHandler ( LogFactory . getLog ( log ) ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log ) { return new LoggingErrorHandlerBuilder ( log ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log , LoggingLevel level ) { return new LoggingErrorHandlerBuilder ( log , level ) ; } public DeadLetterChannelBuilder deadLetterChannel ( ) { return new DeadLetterChannelBuilder ( ) ; } public DeadLetterChannelBuilder deadLetterChannel ( String deadLetterUri ) { return deadLetterChannel ( endpoint ( deadLetterUri ) ) ; } public DeadLetterChannelBuilder deadLetterChannel ( Endpoint deadLetterEndpoint ) { return new DeadLetterChannelBuilder ( new SendProcessor ( deadLetterEndpoint ) ) ; } public CamelContext getContext ( ) { return context ; } public void setContext ( CamelContext context ) { this . context = context ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public boolean isInheritErrorHandler ( ) { return inheritErrorHandler ; } public void setInheritErrorHandler ( boolean inheritErrorHandler ) { this . inheritErrorHandler = inheritErrorHandler ; } } 	1
package org . apache . camel . model . loadbalancer ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "roundRobin" ) public class RoundRobinLoadBalanceStrategy extends LoadBalancerType { @ Override protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { return new org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ( ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ThreadProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "thread" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThreadType extends ProcessorType < ProcessorType > { @ XmlAttribute ( required = false ) private Integer coreSize = 1 ; @ XmlAttribute ( required = false ) private Boolean daemon = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Long keepAliveTime ; @ XmlAttribute ( required = false ) private Integer maxSize = 1 ; @ XmlAttribute ( required = false ) private String name = "Thread Processor" ; @ XmlAttribute ( required = false ) private Integer priority = Thread . NORM_PRIORITY ; @ XmlAttribute ( required = false ) private Long stackSize ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private BlockingQueue < Runnable > taskQueue ; @ XmlTransient private ThreadGroup threadGroup ; @ XmlTransient private ThreadPoolExecutor executor ; public ThreadType ( ) { } public ThreadType ( int coreSize ) { this . coreSize = coreSize ; this . maxSize = coreSize ; } public ThreadType ( ThreadPoolExecutor executor ) { this . executor = executor ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } @ Override public String toString ( ) { return "Thread[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "thread" ; } @ Override public String getLabel ( ) { return "coreSize=" + coreSize ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ThreadProcessor thread = new ThreadProcessor ( ) ; thread . setExecutor ( executor ) ; if ( coreSize != null ) { thread . setCoreSize ( coreSize ) ; } if ( daemon != null ) { thread . setDaemon ( daemon ) ; } if ( keepAliveTime != null ) { thread . setKeepAliveTime ( keepAliveTime ) ; } if ( maxSize != null ) { thread . setMaxSize ( maxSize ) ; } thread . setName ( name ) ; thread . setPriority ( priority ) ; if ( stackSize != null ) { thread . setStackSize ( stackSize ) ; } thread . setTaskQueue ( taskQueue ) ; thread . setThreadGroup ( threadGroup ) ; ArrayList < Processor > pipe = new ArrayList < Processor > ( 2 ) ; pipe . add ( thread ) ; pipe . add ( createOutputsProcessor ( routeContext , outputs ) ) ; return new Pipeline ( pipe ) ; } public ThreadType coreSize ( int coreSize ) { setCoreSize ( coreSize ) ; return this ; } public ThreadType daemon ( boolean daemon ) { setDaemon ( daemon ) ; return this ; } public ThreadType keepAliveTime ( long keepAliveTime ) { setKeepAliveTime ( keepAliveTime ) ; return this ; } public ThreadType maxSize ( int maxSize ) { setMaxSize ( maxSize ) ; return this ; } public ThreadType name ( String name ) { setName ( name ) ; return this ; } public ThreadType priority ( int priority ) { setPriority ( priority ) ; return this ; } public ThreadType stackSize ( long stackSize ) { setStackSize ( stackSize ) ; return this ; } public ThreadType taskQueue ( BlockingQueue < Runnable > taskQueue ) { setTaskQueue ( taskQueue ) ; return this ; } public ThreadType threadGroup ( ThreadGroup threadGroup ) { setThreadGroup ( threadGroup ) ; return this ; } public ThreadType executor ( ThreadPoolExecutor executor ) { setExecutor ( executor ) ; return this ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public void setName ( String name ) { this . name = name ; } public void setPriority ( int priority ) { this . priority = priority ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public ThreadPoolExecutor getExecutor ( ) { return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } } 	1
package org . apache . camel ; public class AlreadyStoppedException extends CamelException { public AlreadyStoppedException ( ) { super ( "Already stopped" ) ; } } 	0
package org . apache . camel . util ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . Registry ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class CamelContextHelper { private CamelContextHelper ( ) { } public static Endpoint getMandatoryEndpoint ( CamelContext camelContext , String uri ) throws NoSuchEndpointException { Endpoint endpoint = camelContext . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } else { return endpoint ; } } public static < T extends Endpoint > T getMandatoryEndpoint ( CamelContext camelContext , String uri , Class < T > type ) { Endpoint endpoint = getMandatoryEndpoint ( camelContext , uri ) ; return ObjectHelper . cast ( type , endpoint ) ; } public static < T > List < T > getSingletonEndpoints ( CamelContext camelContext , Class < T > type ) { List < T > answer = new ArrayList < T > ( ) ; Collection < Endpoint > endpoints = camelContext . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( type . isInstance ( endpoint ) ) { T value = type . cast ( endpoint ) ; answer . add ( value ) ; } } return answer ; } public static < T > T convertTo ( CamelContext context , Class < T > type , Object value ) { notNull ( context , "camelContext" ) ; return context . getTypeConverter ( ) . convertTo ( type , value ) ; } public static < T > T mandatoryConvertTo ( CamelContext context , Class < T > type , Object value ) { T answer = convertTo ( context , type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Value " + value + " converted to " + type . getName ( ) + " cannot be null" ) ; } return answer ; } public static < T > T newInstance ( CamelContext context , Class < T > beanType ) { return context . getInjector ( ) . newInstance ( beanType ) ; } public static Object lookup ( CamelContext context , String name ) { return context . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookup ( CamelContext context , String name , Class < T > beanType ) { return context . getRegistry ( ) . lookup ( name , beanType ) ; } public static Object mandatoryLookup ( CamelContext context , String name ) { Object answer = lookup ( context , name ) ; notNull ( answer , "registry entry called " + name ) ; return answer ; } public static < T > T mandatoryLookup ( CamelContext context , String name , Class < T > beanType ) { T answer = lookup ( context , name , beanType ) ; notNull ( answer , "registry entry called " + name + " of type " + beanType . getName ( ) ) ; return answer ; } public static Language resolveMandatoryLanguage ( CamelContext camelContext , String languageName ) { notNull ( camelContext , "camelContext" ) ; notNull ( languageName , "languageName" ) ; Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Could not resolve language: " + languageName ) ; } return language ; } public static Expression resolveMandatoryExpression ( CamelContext camelContext , String languageName , String expressionText ) { notNull ( expressionText , "expressionText" ) ; Language language = resolveMandatoryLanguage ( camelContext , languageName ) ; Expression < Exchange > expression = language . createExpression ( expressionText ) ; if ( expression == null ) { throw new IllegalArgumentException ( "Could not create expression: " + expressionText + " with language: " + language ) ; } return expression ; } } 	1
package org . apache . camel . builder . script ; import org . apache . camel . RuntimeCamelException ; public class ScriptEvaluationException extends RuntimeCamelException { public ScriptEvaluationException ( String message ) { super ( message ) ; } public ScriptEvaluationException ( String message , Throwable cause ) { super ( message , cause ) ; } public ScriptEvaluationException ( Throwable cause ) { super ( cause ) ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Pipeline extends MulticastProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( Pipeline . class ) ; public Pipeline ( Collection < Processor > processors ) { super ( processors ) ; } public static Processor newInstance ( List < Processor > processors ) { if ( processors . isEmpty ( ) ) { return null ; } else if ( processors . size ( ) == 1 ) { return processors . get ( 0 ) ; } return new Pipeline ( processors ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange original , AsyncCallback callback ) { Iterator < Processor > processors = getProcessors ( ) . iterator ( ) ; Exchange nextExchange = original ; boolean first = true ; while ( true ) { if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } if ( ! processors . hasNext ( ) ) { break ; } AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( first ) { first = false ; } else { nextExchange = createNextExchange ( processor , nextExchange ) ; } boolean sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return false ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( true ) ; return true ; } private boolean process ( final Exchange original , final Exchange exchange , final AsyncCallback callback , final Iterator < Processor > processors , AsyncProcessor processor ) { return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } Exchange nextExchange = exchange ; while ( processors . hasNext ( ) ) { AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } nextExchange = createNextExchange ( processor , nextExchange ) ; sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( false ) ; } } ) ; } protected Exchange createNextExchange ( Processor producer , Exchange previousExchange ) { Exchange answer = previousExchange . newInstance ( ) ; answer . getProperties ( ) . putAll ( previousExchange . getProperties ( ) ) ; Message previousOut = previousExchange . getOut ( false ) ; Message in = answer . getIn ( ) ; if ( previousOut != null ) { in . copyFrom ( previousOut ) ; } else { in . copyFrom ( previousExchange . getIn ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Pipeline" + getProcessors ( ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . net . URI ; import org . apache . camel . RuntimeCamelException ; public class RemoteFileConfiguration implements Cloneable { private String protocol ; private String username ; private String host ; private int port ; private String password ; private String file ; private boolean binary ; private boolean directory = true ; public RemoteFileConfiguration ( ) { } public RemoteFileConfiguration ( URI uri ) { configure ( uri ) ; } public RemoteFileConfiguration copy ( ) { try { return ( RemoteFileConfiguration ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeCamelException ( e ) ; } } public String toString ( ) { return protocol + "://" + username + "@" + host + ":" + port + "/" + file ; } public void configure ( URI uri ) { setProtocol ( uri . getScheme ( ) ) ; setDefaultPort ( ) ; setUsername ( uri . getUserInfo ( ) ) ; setHost ( uri . getHost ( ) ) ; setPort ( uri . getPort ( ) ) ; setFile ( uri . getPath ( ) ) ; } protected void setDefaultPort ( ) { if ( "ftp" . equalsIgnoreCase ( protocol ) ) { setPort ( 21 ) ; } else if ( "sftp" . equalsIgnoreCase ( protocol ) ) { setPort ( 22 ) ; } } public String getFile ( ) { return file ; } public void setFile ( String file ) { if ( file . startsWith ( "/" ) ) { file = file . substring ( 1 ) ; } this . file = file ; } public String getHost ( ) { return host ; } public void setHost ( String host ) { this . host = host ; } public int getPort ( ) { return port ; } public void setPort ( int port ) { if ( port != - 1 ) { this . port = port ; } } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getProtocol ( ) { return protocol ; } public void setProtocol ( String protocol ) { this . protocol = protocol ; } public String getUsername ( ) { return username ; } public void setUsername ( String username ) { this . username = username ; } public boolean isBinary ( ) { return binary ; } public void setBinary ( boolean binary ) { this . binary = binary ; } public boolean isDirectory ( ) { return directory ; } public void setDirectory ( boolean directory ) { this . directory = directory ; } public String dump ( ) { return "RemoteFileConfiguration{" + "protocol='" + protocol + '\'' + ", username='" + username + '\'' + ", host='" + host + '\'' + ", port=" + port + ", password='" + password + '\'' + ", file='" + file + '\'' + ", binary=" + binary + ", directory=" + directory + '}' ; } } 	0
package org . apache . camel . component . mock ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MockEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( MockEndpoint . class ) ; private int expectedCount ; private int counter ; private Processor defaultProcessor ; private Map < Integer , Processor > processors ; private List < Exchange > receivedExchanges ; private List < Throwable > failures ; private List < Runnable > tests ; private CountDownLatch latch ; private long sleepForEmptyTest ; private long resultWaitTime ; private int expectedMinimumCount ; private List expectedBodyValues ; private List actualBodyValues ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; private String headerName ; private String headerValue ; private Object actualHeader ; private Processor reporter ; public MockEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; init ( ) ; } public MockEndpoint ( String endpointUri ) { super ( endpointUri ) ; init ( ) ; } public static MockEndpoint resolve ( CamelContext context , String uri ) { return CamelContextHelper . getMandatoryEndpoint ( context , uri , MockEndpoint . class ) ; } public static void assertWait ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; long left = unit . toMillis ( timeout ) ; long end = start + left ; for ( MockEndpoint endpoint : endpoints ) { if ( ! endpoint . await ( left , TimeUnit . MILLISECONDS ) ) { throw new AssertionError ( "Timeout waiting for endpoints to receive enough messages. " + endpoint . getEndpointUri ( ) + " timed out." ) ; } left = end - System . currentTimeMillis ( ) ; if ( left <= 0 ) { left = 0 ; } } } public static void assertIsSatisfied ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { assertWait ( timeout , unit , endpoints ) ; for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( CamelContext context ) throws InterruptedException { ObjectHelper . notNull ( context , "camelContext" ) ; Collection < Endpoint > endpoints = context . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( endpoint instanceof MockEndpoint ) { MockEndpoint mockEndpoint = ( MockEndpoint ) endpoint ; mockEndpoint . assertIsSatisfied ( ) ; } } } public static void expectsMessageCount ( int count , MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { MockEndpoint . expectsMessageCount ( count ) ; } } public List < Exchange > getExchanges ( ) { return getReceivedExchanges ( ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "You cannot consume from this endpoint" ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) { onExchange ( exchange ) ; } } ; } public void reset ( ) { init ( ) ; } public void whenExchangeReceived ( int index , Processor processor ) { this . processors . put ( index , processor ) ; } public void whenAnyExchangeReceived ( Processor processor ) { this . defaultProcessor = processor ; } public void assertIsSatisfied ( ) throws InterruptedException { assertIsSatisfied ( sleepForEmptyTest ) ; } public void assertIsSatisfied ( long timeoutForEmptyEndpoints ) throws InterruptedException { LOG . info ( "Asserting: " + this + " is satisfied" ) ; if ( expectedCount >= 0 ) { if ( expectedCount != getReceivedCounter ( ) ) { if ( expectedCount == 0 ) { if ( timeoutForEmptyEndpoints > 0 ) { LOG . debug ( "Sleeping for: " + timeoutForEmptyEndpoints + " millis to check there really are no messages received" ) ; Thread . sleep ( timeoutForEmptyEndpoints ) ; } } else { waitForCompleteLatch ( ) ; } } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedMinimumCount > 0 && getReceivedCounter ( ) < expectedMinimumCount ) { waitForCompleteLatch ( ) ; } if ( expectedMinimumCount >= 0 ) { int receivedCounter = getReceivedCounter ( ) ; assertTrue ( "Received message count " + receivedCounter + ", expected at least " + expectedCount , expectedCount <= receivedCounter ) ; } for ( Runnable test : tests ) { test . run ( ) ; } for ( Throwable failure : failures ) { if ( failure != null ) { LOG . error ( "Caught on " + getEndpointUri ( ) + " Exception: " + failure , failure ) ; fail ( "Failed due to caught exception: " + failure ) ; } } } public void assertIsNotSatisfied ( ) throws InterruptedException { try { assertIsSatisfied ( ) ; fail ( "Expected assertion failure!" ) ; } catch ( AssertionError e ) { LOG . info ( "Caught expected failure: " + e ) ; } } public void expectedMessageCount ( int expectedCount ) { setExpectedMessageCount ( expectedCount ) ; } public void expectedMinimumMessageCount ( int expectedCount ) { setMinimumExpectedMessageCount ( expectedCount ) ; } public void expectedHeaderReceived ( String name , String value ) { this . headerName = name ; this . headerValue = value ; expects ( new Runnable ( ) { public void run ( ) { assertTrue ( "No header with name " + headerName + " found." , actualHeader != null ) ; assertEquals ( "Header of message" , headerValue , actualHeader ) ; } } ) ; } public void expectedBodiesReceived ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; Object actualBody = actualBodyValues . get ( i ) ; assertEquals ( "Body of message: " + i , expectedBody , actualBody ) ; } } } ) ; } public void expectedBodiesReceived ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; bodyList . addAll ( Arrays . asList ( bodies ) ) ; expectedBodiesReceived ( bodyList ) ; } public void expectsAscending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesAscending ( expression ) ; } } ) ; } public void expectsDescending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesDescending ( expression ) ; } } ) ; } public void expectsNoDuplicates ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertNoDuplicates ( expression ) ; } } ) ; } public void assertMessagesAscending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , true ) ; } public void assertMessagesDescending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , false ) ; } protected void assertMessagesSorted ( Expression < Exchange > expression , boolean ascending ) { String type = ascending ? "ascending" : "descending" ; ExpressionComparator comparator = new ExpressionComparator ( expression ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 1 ; i < list . size ( ) ; i ++ ) { int j = i - 1 ; Exchange e1 = list . get ( j ) ; Exchange e2 = list . get ( i ) ; int result = comparator . compare ( e1 , e2 ) ; if ( result == 0 ) { fail ( "Messages not " + type + ". Messages" + j + " and " + i + " are equal with value: " + expression . evaluate ( e1 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { if ( ! ascending ) { result = result * - 1 ; } if ( result > 0 ) { fail ( "Messages not " + type + ". Message " + j + " has value: " + expression . evaluate ( e1 ) + " and message " + i + " has value: " + expression . evaluate ( e2 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } } } } public void assertNoDuplicates ( Expression < Exchange > expression ) { Map < Object , Exchange > map = new HashMap < Object , Exchange > ( ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Exchange e2 = list . get ( i ) ; Object key = expression . evaluate ( e2 ) ; Exchange e1 = map . get ( key ) ; if ( e1 != null ) { fail ( "Duplicate message found on message " + i + " has value: " + key + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { map . put ( key , e2 ) ; } } } public void expects ( Runnable runnable ) { tests . add ( runnable ) ; } public AssertionClause message ( final int messageIndex ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { applyAssertionOn ( MockEndpoint . this , messageIndex , assertExchangeReceived ( messageIndex ) ) ; } } ; expects ( clause ) ; return clause ; } public AssertionClause allMessages ( ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { applyAssertionOn ( MockEndpoint . this , index ++ , exchange ) ; } } } ; expects ( clause ) ; return clause ; } public Exchange assertExchangeReceived ( int index ) { int count = getReceivedCounter ( ) ; assertTrue ( "Not enough messages received. Was: " + count , count > index ) ; return getReceivedExchanges ( ) . get ( index ) ; } public List < Throwable > getFailures ( ) { return failures ; } public int getReceivedCounter ( ) { return getReceivedExchanges ( ) . size ( ) ; } public List < Exchange > getReceivedExchanges ( ) { return receivedExchanges ; } public int getExpectedCount ( ) { return expectedCount ; } public long getSleepForEmptyTest ( ) { return sleepForEmptyTest ; } public void setSleepForEmptyTest ( long sleepForEmptyTest ) { this . sleepForEmptyTest = sleepForEmptyTest ; } public long getResultWaitTime ( ) { return resultWaitTime ; } public void setResultWaitTime ( long resultWaitTime ) { this . resultWaitTime = resultWaitTime ; } public void setExpectedMessageCount ( int expectedCount ) { this . expectedCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedCount ) ; } } public void setMinimumExpectedMessageCount ( int expectedCount ) { this . expectedMinimumCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedMinimumCount ) ; } } public Processor getReporter ( ) { return reporter ; } public void setReporter ( Processor reporter ) { this . reporter = reporter ; } private void init ( ) { expectedCount = - 1 ; counter = 0 ; processors = new HashMap < Integer , Processor > ( ) ; receivedExchanges = new CopyOnWriteArrayList < Exchange > ( ) ; failures = new CopyOnWriteArrayList < Throwable > ( ) ; tests = new CopyOnWriteArrayList < Runnable > ( ) ; latch = null ; sleepForEmptyTest = 1000L ; resultWaitTime = 20000L ; expectedMinimumCount = - 1 ; expectedBodyValues = null ; actualBodyValues = new ArrayList ( ) ; } protected synchronized void onExchange ( Exchange exchange ) { try { if ( reporter != null ) { reporter . process ( exchange ) ; } performAssertions ( exchange ) ; } catch ( Throwable e ) { failures . add ( e ) ; } if ( latch != null ) { latch . countDown ( ) ; } } protected void performAssertions ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object actualBody = in . getBody ( ) ; if ( headerName != null ) { actualHeader = in . getHeader ( headerName ) ; } if ( expectedBodyValues != null ) { int index = actualBodyValues . size ( ) ; if ( expectedBodyValues . size ( ) > index ) { Object expectedBody = expectedBodyValues . get ( index ) ; if ( expectedBody != null ) { actualBody = in . getBody ( expectedBody . getClass ( ) ) ; } actualBodyValues . add ( actualBody ) ; } } LOG . debug ( getEndpointUri ( ) + " >>>> " + ( ++ counter ) + " : " + exchange + " with body: " + actualBody ) ; receivedExchanges . add ( exchange ) ; Processor processor = processors . get ( getReceivedCounter ( ) ) != null ? processors . get ( getReceivedCounter ( ) ) : defaultProcessor ; if ( processor != null ) { processor . process ( exchange ) ; } } protected void waitForCompleteLatch ( ) throws InterruptedException { if ( latch == null ) { fail ( "Should have a latch!" ) ; } LOG . debug ( "Waiting on the latch for: " + resultWaitTime + " millis" ) ; latch . await ( resultWaitTime , TimeUnit . MILLISECONDS ) ; } protected void assertEquals ( String message , Object expectedValue , Object actualValue ) { if ( ! ObjectHelper . equal ( expectedValue , actualValue ) ) { fail ( message + ". Expected: <" + expectedValue + "> but was: <" + actualValue + ">" ) ; } } protected void assertTrue ( String message , boolean predicate ) { if ( ! predicate ) { fail ( message ) ; } } protected void fail ( Object message ) { if ( LOG . isDebugEnabled ( ) ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { LOG . debug ( "Received[" + ( ++ index ) + "]: " + exchange ) ; } } throw new AssertionError ( getEndpointUri ( ) + " " + message ) ; } public int getExpectedMinimumCount ( ) { return expectedMinimumCount ; } public void await ( ) throws InterruptedException { if ( latch != null ) { latch . await ( ) ; } } public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { if ( latch != null ) { return latch . await ( timeout , unit ) ; } return true ; } public boolean isSingleton ( ) { return true ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import java . io . InterruptedIOException ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import javax . net . ssl . SSLContext ; import org . apache . camel . component . jhc . JhcConsumer . MyHandler ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . http . impl . nio . DefaultServerIOEventDispatch ; import org . apache . http . impl . nio . reactor . SSLServerIOEventDispatch ; import org . apache . http . nio . reactor . IOEventDispatch ; import org . apache . http . nio . reactor . IOReactorException ; import org . apache . http . nio . reactor . ListeningIOReactor ; import org . apache . http . params . HttpParams ; import org . apache . http . protocol . HttpRequestHandler ; import org . apache . http . protocol . HttpRequestHandlerRegistry ; import org . apache . http . protocol . HttpRequestHandlerResolver ; import org . apache . http . util . concurrent . ThreadFactory ; public class JhcServerEngine { private static final Log LOG = LogFactory . getLog ( JhcServerEngine . class ) ; private final HttpParams params ; private int port ; private String protocol ; private int nbThreads = 2 ; private ListeningIOReactor ioReactor ; private ThreadFactory threadFactory ; private Thread runner ; private SSLContext sslContext ; private AsyncBufferingHttpServiceHandler serviceHandler ; private HttpRequestHandlerRegistry handlerRegistry ; private boolean isStarted ; private int referenceCounter ; JhcServerEngine ( HttpParams params , int port , String protocol ) { this . params = params ; serviceHandler = new AsyncBufferingHttpServiceHandler ( params ) ; handlerRegistry = new HttpRequestHandlerRegistry ( ) ; serviceHandler . setHandlerResolver ( handlerRegistry ) ; this . port = port ; this . protocol = protocol ; } public int getPort ( ) { return port ; } public String getProtocol ( ) { return this . protocol ; } public void setSslContext ( SSLContext sslContext ) { this . sslContext = sslContext ; } public SSLContext getSslContext ( ) { return this . sslContext ; } public synchronized void register ( String pattern , AsyncHttpRequestHandler handler ) { handlerRegistry . register ( pattern , handler ) ; referenceCounter ++ ; } public synchronized void unregister ( String pattern ) { handlerRegistry . unregister ( pattern ) ; referenceCounter -- ; } public int getReferenceCounter ( ) { return referenceCounter ; } public boolean isStarted ( ) { return isStarted ; } public void start ( ) throws IOReactorException { final SocketAddress addr = new InetSocketAddress ( port ) ; ioReactor = new DefaultListeningIOReactor ( nbThreads , threadFactory , params ) ; final IOEventDispatch ioEventDispatch ; if ( "https" . equals ( protocol ) ) { ioEventDispatch = new SSLServerIOEventDispatch ( serviceHandler , sslContext , params ) ; } else { ioEventDispatch = new DefaultServerIOEventDispatch ( serviceHandler , params ) ; } runner = new Thread ( ) { public void run ( ) { try { ioReactor . listen ( addr ) ; isStarted = true ; ioReactor . execute ( ioEventDispatch ) ; } catch ( InterruptedIOException ex ) { LOG . info ( "Interrupted" ) ; } catch ( IOException e ) { LOG . warn ( "I/O error: " + e . getMessage ( ) ) ; } LOG . debug ( "Shutdown" ) ; } } ; runner . start ( ) ; } public void stop ( ) throws IOException { LOG . debug ( "Stopping the jhc ioReactor " ) ; ioReactor . shutdown ( ) ; LOG . debug ( "Waiting the runner" ) ; try { runner . join ( ) ; } catch ( InterruptedException e ) { } isStarted = false ; LOG . debug ( "Runner stopped" ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . TransformProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "transform" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TransformType extends ExpressionNode { public TransformType ( ) { } public TransformType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Transform[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "transform" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; Processor childProcessor = routeContext . createProcessor ( this ) ; return new TransformProcessor ( expr , childProcessor ) ; } } 	1
package org . apache . camel . osgi ; import java . util . HashSet ; import java . util . Set ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; public class CamelNamespaceHandler extends org . apache . camel . spring . handler . CamelNamespaceHandler { public void init ( ) { super . init ( ) ; registerParser ( "camelContext" , new CamelContextBeanDefinitionParser ( CamelContextFactoryBean . class ) ) ; } protected JAXBContext createJaxbContext ( ) throws JAXBException { StringBuilder packages = new StringBuilder ( ) ; for ( Class cl : getJaxbPackages ( ) ) { if ( packages . length ( ) > 0 ) { packages . append ( ":" ) ; } packages . append ( cl . getName ( ) . substring ( 0 , cl . getName ( ) . lastIndexOf ( '.' ) ) ) ; } return JAXBContext . newInstance ( packages . toString ( ) , getClass ( ) . getClassLoader ( ) ) ; } protected Set < Class > getJaxbPackages ( ) { Set < Class > classes = new HashSet < Class > ( ) ; classes . add ( org . apache . camel . osgi . CamelContextFactoryBean . class ) ; classes . add ( org . apache . camel . spring . CamelContextFactoryBean . class ) ; classes . add ( org . apache . camel . model . RouteType . class ) ; classes . add ( org . apache . camel . model . config . StreamResequencerConfig . class ) ; classes . add ( org . apache . camel . model . dataformat . DataFormatType . class ) ; classes . add ( org . apache . camel . model . language . ExpressionType . class ) ; classes . add ( org . apache . camel . model . loadbalancer . LoadBalancerType . class ) ; return classes ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . nio . ByteBuffer ; import org . apache . camel . Converter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class NIOConverter { private static final transient Log LOG = LogFactory . getLog ( NIOConverter . class ) ; private NIOConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { return buffer . array ( ) ; } @ Converter public static String toString ( ByteBuffer buffer ) { return IOConverter . toString ( buffer . array ( ) ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; } @ Converter public static ByteBuffer toByteBuffer ( File file ) throws IOException { InputStream in = null ; try { byte [ ] buf = new byte [ ( int ) file . length ( ) ] ; in = new BufferedInputStream ( new FileInputStream ( file ) ) ; int sizeLeft = ( int ) file . length ( ) ; int offset = 0 ; while ( sizeLeft > 0 ) { int readSize = in . read ( buf , offset , sizeLeft ) ; sizeLeft -= readSize ; offset += readSize ; } return ByteBuffer . wrap ( buf ) ; } finally { try { if ( in != null ) { in . close ( ) ; } } catch ( IOException e ) { LOG . warn ( "Failed to close file stream: " + file . getPath ( ) , e ) ; } } } @ Converter public static ByteBuffer toByteBuffer ( String value ) { ByteBuffer buf = ByteBuffer . allocate ( value . length ( ) ) ; byte [ ] bytes = value . getBytes ( ) ; buf . put ( bytes ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Short value ) { ByteBuffer buf = ByteBuffer . allocate ( 2 ) ; buf . putShort ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Integer value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Long value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putLong ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Float value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putFloat ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Double value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putDouble ( value ) ; return buf ; } @ Converter public static InputStream toInputStream ( ByteBuffer bufferbuffer ) { return IOConverter . toInputStream ( toByteArray ( bufferbuffer ) ) ; } } 	1
package org . apache . camel . component . jdbc ; import java . net . URI ; import java . net . URISyntaxException ; import org . apache . camel . Consumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultExchange ; public class JdbcEndpoint extends DefaultEndpoint < DefaultExchange > { private URI uri ; private String remaining ; private int readSize = 20000 ; protected JdbcEndpoint ( String endpointUri , String remaining , JdbcComponent component ) throws URISyntaxException { super ( endpointUri , component ) ; this . uri = new URI ( endpointUri ) ; this . remaining = remaining ; } public JdbcEndpoint ( String endpointUri , String remaining ) throws URISyntaxException { super ( endpointUri ) ; this . remaining = remaining ; this . uri = new URI ( endpointUri ) ; } public boolean isSingleton ( ) { return false ; } public Consumer < DefaultExchange > createConsumer ( Processor processor ) throws Exception { throw new RuntimeCamelException ( "A JDBC Consumer would be the server side of database! No such support here" ) ; } public Producer < DefaultExchange > createProducer ( ) throws Exception { return new JdbcProducer ( this , remaining , readSize ) ; } public String getName ( ) { String path = uri . getPath ( ) ; if ( path == null ) { path = uri . getSchemeSpecificPart ( ) ; } return path ; } public int getReadSize ( ) { return this . readSize ; } public void setReadSize ( int readSize ) { this . readSize = readSize ; } } 	0
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ObjectHelper ; public class Namespaces { public static final String DEFAULT_NAMESPACE = "http://activemq.apache.org/camel/schema/spring" ; public static final String IN_NAMESPACE = "http://camel.apache.org/xml/in/" ; public static final String OUT_NAMESPACE = "http://camel.apache.org/xml/out/" ; public static final String SYSTEM_PROPERTIES_NAMESPACE = "http://camel.apache.org/xml/variables/system-properties" ; public static final String ENVIRONMENT_VARIABLES = "http://camel.apache.org/xml/variables/environment-variables" ; public static final String EXCHANGE_PROPERTY = "http://camel.apache.org/xml/variables/exchange-property" ; private Map < String , String > namespaces = new HashMap < String , String > ( ) ; public Namespaces ( Element element ) { add ( element ) ; } public Namespaces ( String prefix , String uri ) { add ( prefix , uri ) ; } public static boolean isMatchingNamespaceOrEmptyNamespace ( String namespaceURI , String expectedNamespace ) { return ObjectHelper . isNullOrBlank ( namespaceURI ) || namespaceURI . equals ( expectedNamespace ) ; } public Namespaces add ( String prefix , String uri ) { namespaces . put ( prefix , uri ) ; return this ; } public Namespaces add ( Element element ) { Node parentNode = element . getParentNode ( ) ; if ( parentNode instanceof org . w3c . dom . Element ) { add ( ( Element ) parentNode ) ; } NamedNodeMap attributes = element . getAttributes ( ) ; int size = attributes . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Attr node = ( Attr ) attributes . item ( i ) ; String name = node . getName ( ) ; if ( name . startsWith ( "xmlns:" ) ) { String prefix = name . substring ( "xmlns:" . length ( ) ) ; String uri = node . getValue ( ) ; add ( prefix , uri ) ; } } return this ; } public XPathExpression xpath ( String expression ) { XPathExpression answer = new XPathExpression ( expression ) ; configure ( answer ) ; return answer ; } public XPathExpression xpath ( String expression , Class < ? > resultType ) { XPathExpression answer = xpath ( expression ) ; answer . setResultType ( resultType ) ; return answer ; } public XQueryExpression xquery ( String expression ) { XQueryExpression answer = new XQueryExpression ( expression ) ; configure ( answer ) ; return answer ; } public XQueryExpression xquery ( String expression , Class < ? > resultType ) { XQueryExpression answer = new XQueryExpression ( expression ) ; answer . setResultType ( resultType ) ; configure ( answer ) ; return answer ; } public Map < String , String > getNamespaces ( ) { return namespaces ; } public void configure ( NamespaceAware namespaceAware ) { namespaceAware . setNamespaces ( getNamespaces ( ) ) ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "header" ) public class HeaderExpression extends ExpressionType { public HeaderExpression ( ) { } public HeaderExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "header" ; } } 	0
package org . apache . camel . language . bean ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class BeanLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { ObjectHelper . notNull ( expression , "expression" ) ; int idx = expression . lastIndexOf ( '.' ) ; String beanName = expression ; String method = null ; if ( idx > 0 ) { beanName = expression . substring ( 0 , idx ) ; method = expression . substring ( idx + 1 ) ; } return new BeanExpression ( beanName , method ) ; } } 	1
package org . apache . camel ; public class CamelException extends Exception { public CamelException ( ) { } public CamelException ( String message ) { super ( message ) ; } public CamelException ( String message , Throwable cause ) { super ( message , cause ) ; } public CamelException ( Throwable cause ) { super ( cause ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . PredicateAggregationCollection ; public class Aggregator extends BatchProcessor { private Predicate aggregationCompletedPredicate ; public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy ) { this ( endpoint , processor , new AggregationCollection ( correlationExpression , aggregationStrategy ) ) ; } public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { this ( endpoint , processor , new PredicateAggregationCollection ( correlationExpression , aggregationStrategy , aggregationCompletedPredicate ) ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } public Aggregator ( Endpoint endpoint , Processor processor , AggregationCollection collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Aggregator[to: " + getProcessor ( ) + "]" ; } @ Override protected boolean isBatchCompleted ( int index ) { if ( aggregationCompletedPredicate != null ) { if ( getCollection ( ) . size ( ) > 0 ) { return true ; } } return super . isBatchCompleted ( index ) ; } } 	1
package org . apache . camel . component . cxf . transport . spring ; import org . springframework . beans . factory . xml . NamespaceHandlerSupport ; public class NamespaceHandler extends NamespaceHandlerSupport { public void init ( ) { registerBeanDefinitionParser ( "conduit" , new CamelConduitDefinitionParser ( ) ) ; registerBeanDefinitionParser ( "destination" , new CamelDestinationDefinitionParser ( ) ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; public class HandleFaultProcessor extends DelegateProcessor { @ Override public void process ( Exchange exchange ) throws Exception { super . process ( exchange ) ; final Message faultMessage = exchange . getFault ( false ) ; if ( faultMessage != null ) { final Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { if ( faultBody instanceof Throwable ) { exchange . setException ( ( Throwable ) faultBody ) ; } else { exchange . setException ( new CamelException ( "Message contains fault of type " + faultBody . getClass ( ) . getName ( ) + ":\n" + faultBody ) ) ; } } } } } 	1
package org . apache . camel . component . uface . swing ; import org . apache . camel . CamelContext ; import org . apache . camel . impl . DefaultCamelContext ; public class Main extends org . apache . camel . spring . Main { public static void main ( String ... args ) { new Main ( ) . run ( args ) ; } protected void postProcesCamelContext ( CamelContext camelContext ) throws Exception { super . postProcesCamelContext ( camelContext ) ; SwingBrowser browser = new SwingBrowser ( ( DefaultCamelContext ) camelContext ) ; browser . run ( ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "proceed" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProceedType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "proceed" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	1
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; public interface PredicateFactory < E extends Exchange > { Predicate < E > createPredicate ( ) ; } 	0
package org . apache . camel . processor . aggregate ; import org . apache . camel . Exchange ; public class UseLatestAggregationStrategy implements AggregationStrategy { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { return newExchange ; } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAnyElement ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "objectHeader" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class ObjectHeader extends HeaderType { @ XmlAnyElement ( lax = true ) private Object value ; public ObjectHeader ( ) { } public ObjectHeader ( String name , Object value ) { super ( name ) ; this . value = value ; } public Object getValue ( ) { return value ; } public void setValue ( Object value ) { this . value = value ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public final class ProcessorBuilder { private ProcessorBuilder ( ) { } public static Processor setBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setBody(" + expression + ")" ; } } ; } public static Processor setOutBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setOutBody(" + expression + ")" ; } } ; } public static Processor setFaultBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setFaultBody(" + expression + ")" ; } } ; } public static Processor setHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setOutHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setOutHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setFaultHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setFaultHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setProperty ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . setProperty ( name , value ) ; } @ Override public String toString ( ) { return "setProperty(" + name + ", " + expression + ")" ; } } ; } public static Processor removeHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getIn ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeHeader(" + name + ")" ; } } ; } public static Processor removeOutHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { out . removeHeader ( name ) ; } } @ Override public String toString ( ) { return "removeOutHeader(" + name + ")" ; } } ; } public static Processor removeFaultHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getFault ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeFaultHeader(" + name + ")" ; } } ; } public static Processor removeProperty ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . removeProperty ( name ) ; } @ Override public String toString ( ) { return "removeProperty(" + name + ")" ; } } ; } public static Processor throwException ( final Exception ex ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { throw ex ; } @ Override public String toString ( ) { return "throwException(" + ex . toString ( ) + ")" ; } } ; } } 	1
package org . apache . camel . builder . sql ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . RuntimeExpressionException ; import org . apache . camel . util . ObjectHelper ; import org . josql . Query ; import org . josql . QueryExecutionException ; import org . josql . QueryParseException ; public class SqlBuilder < E extends Exchange > implements Expression < E > , Predicate < E > { private Query query ; private Map < String , Object > variables = new HashMap < String , Object > ( ) ; public SqlBuilder ( Query query ) { this . query = query ; } public Object evaluate ( E exchange ) { return evaluateQuery ( exchange ) ; } public boolean matches ( E exchange ) { List list = evaluateQuery ( exchange ) ; return matches ( exchange , list ) ; } public void assertMatches ( String text , E exchange ) throws AssertionError { List list = evaluateQuery ( exchange ) ; if ( ! matches ( exchange , list ) ) { throw new AssertionError ( this + " failed on " + exchange + " as found " + list ) ; } } public static < E extends Exchange > SqlBuilder < E > sql ( String sql ) throws QueryParseException { Query q = new Query ( ) ; q . parse ( sql ) ; return new SqlBuilder ( q ) ; } public SqlBuilder < E > variable ( String name , Object value ) { getVariables ( ) . put ( name , value ) ; return this ; } public Map < String , Object > getVariables ( ) { return variables ; } public void setVariables ( Map < String , Object > properties ) { this . variables = properties ; } protected boolean matches ( E exchange , List list ) { return ObjectHelper . matches ( list ) ; } protected List evaluateQuery ( E exchange ) { configureQuery ( exchange ) ; Message in = exchange . getIn ( ) ; List list = in . getBody ( List . class ) ; if ( list == null ) { list = Collections . singletonList ( in . getBody ( ) ) ; } try { return query . execute ( list ) . getResults ( ) ; } catch ( QueryExecutionException e ) { throw new RuntimeExpressionException ( e ) ; } } protected void configureQuery ( E exchange ) { addVariables ( exchange . getProperties ( ) ) ; addVariables ( exchange . getIn ( ) . getHeaders ( ) ) ; addVariables ( getVariables ( ) ) ; query . setVariable ( "exchange" , exchange ) ; query . setVariable ( "in" , exchange . getIn ( ) ) ; query . setVariable ( "out" , exchange . getOut ( ) ) ; } protected void addVariables ( Map < String , Object > map ) { Set < Map . Entry < String , Object > > propertyEntries = map . entrySet ( ) ; for ( Map . Entry < String , Object > entry : propertyEntries ) { query . setVariable ( entry . getKey ( ) , entry . getValue ( ) ) ; } } } 	0
package org . apache . camel . builder ; import java . util . Map ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . model . ExpressionNode ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . MethodCallExpression ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; public class ExpressionClause < T > extends ExpressionType { private T result ; private String language ; public ExpressionClause ( T result ) { this . result = result ; } public static < T extends ExpressionNode > ExpressionClause < T > createAndSetExpression ( T result ) { ExpressionClause < T > clause = new ExpressionClause < T > ( result ) ; result . setExpression ( clause ) ; return clause ; } public T expression ( Expression expression ) { setExpressionValue ( expression ) ; return result ; } public T constant ( Object value ) { return expression ( ExpressionBuilder . constantExpression ( value ) ) ; } public T exchange ( ) { return expression ( ExpressionBuilder . exchangeExpression ( ) ) ; } public T inMessage ( ) { return expression ( ExpressionBuilder . inMessageExpression ( ) ) ; } public T outMessage ( ) { return expression ( ExpressionBuilder . outMessageExpression ( ) ) ; } public T body ( ) { return expression ( ExpressionBuilder . bodyExpression ( ) ) ; } public T body ( Class expectedType ) { return expression ( ExpressionBuilder . bodyExpression ( expectedType ) ) ; } public T outBody ( ) { return expression ( ExpressionBuilder . outBodyExpression ( ) ) ; } public T outBody ( Class expectedType ) { return expression ( ExpressionBuilder . outBodyExpression ( expectedType ) ) ; } public T header ( String name ) { return expression ( ExpressionBuilder . headerExpression ( name ) ) ; } public T headers ( ) { return expression ( ExpressionBuilder . headersExpression ( ) ) ; } public T outHeader ( String name ) { return expression ( ExpressionBuilder . outHeaderExpression ( name ) ) ; } public T outHeaders ( ) { return expression ( ExpressionBuilder . outHeadersExpression ( ) ) ; } public T property ( String name ) { return expression ( ExpressionBuilder . propertyExpression ( name ) ) ; } public T properties ( ) { return expression ( ExpressionBuilder . propertiesExpression ( ) ) ; } public T method ( String bean ) { MethodCallExpression expression = new MethodCallExpression ( bean ) ; setExpressionType ( expression ) ; return result ; } public T method ( String bean , String method ) { MethodCallExpression expression = new MethodCallExpression ( bean , method ) ; setExpressionType ( expression ) ; return result ; } public T el ( String text ) { return language ( "el" , text ) ; } public T groovy ( String text ) { return language ( "groovy" , text ) ; } public T javaScript ( String text ) { return language ( "js" , text ) ; } public T jxpath ( String text ) { return language ( "jxpath" , text ) ; } public T ognl ( String text ) { return language ( "ognl" , text ) ; } public T php ( String text ) { return language ( "php" , text ) ; } public T python ( String text ) { return language ( "python" , text ) ; } public T ruby ( String text ) { return language ( "ruby" , text ) ; } public T sql ( String text ) { return language ( "sql" , text ) ; } public T simple ( String text ) { return language ( "simple" , text ) ; } public T xpath ( String text ) { return language ( "xpath" , text ) ; } public T xpath ( String text , Class resultType ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Class resultType , Namespaces namespaces ) { return xpath ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Class resultType , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Namespaces namespaces ) { return xpath ( text , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text ) { return language ( "xquery" , text ) ; } public T xquery ( String text , Class resultType ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Class resultType , Namespaces namespaces ) { return xquery ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Class resultType , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Namespaces namespaces ) { return xquery ( text , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T language ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; return result ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . component . jms ; import java . io . Serializable ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . Arrays ; import java . util . Date ; import java . util . Enumeration ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import javax . jms . BytesMessage ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . MapMessage ; import javax . jms . Message ; import javax . jms . ObjectMessage ; import javax . jms . Session ; import javax . jms . StreamMessage ; import javax . jms . TextMessage ; import javax . xml . transform . TransformerException ; import org . w3c . dom . Node ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JmsBinding { private static final transient Log LOG = LogFactory . getLog ( JmsBinding . class ) ; private JmsEndpoint endpoint ; private Set < String > ignoreJmsHeaders ; private XmlConverter xmlConverter = new XmlConverter ( ) ; public JmsBinding ( ) { } public JmsBinding ( JmsEndpoint endpoint ) { this . endpoint = endpoint ; } public Object extractBodyFromJms ( Exchange exchange , Message message ) { try { if ( message instanceof ObjectMessage ) { ObjectMessage objectMessage = ( ObjectMessage ) message ; return objectMessage . getObject ( ) ; } else if ( message instanceof TextMessage ) { TextMessage textMessage = ( TextMessage ) message ; return textMessage . getText ( ) ; } else if ( message instanceof MapMessage ) { return createMapFromMapMessage ( ( MapMessage ) message ) ; } else if ( message instanceof BytesMessage ) { return createByteArrayFromBytesMessage ( ( BytesMessage ) message ) ; } else if ( message instanceof StreamMessage ) { return message ; } else { return null ; } } catch ( JMSException e ) { throw new RuntimeJmsException ( "Failed to extract body due to: " + e + ". Message: " + message , e ) ; } } protected byte [ ] createByteArrayFromBytesMessage ( BytesMessage message ) throws JMSException { if ( message . getBodyLength ( ) > Integer . MAX_VALUE ) { return null ; } byte [ ] result = new byte [ ( int ) message . getBodyLength ( ) ] ; message . readBytes ( result ) ; return result ; } public Message makeJmsMessage ( Exchange exchange , Session session ) throws JMSException { return makeJmsMessage ( exchange , exchange . getIn ( ) , session ) ; } public Message makeJmsMessage ( Exchange exchange , org . apache . camel . Message camelMessage , Session session ) throws JMSException { Message answer = null ; boolean alwaysCopy = ( endpoint != null ) ? endpoint . getConfiguration ( ) . isAlwaysCopyMessage ( ) : false ; if ( ! alwaysCopy && camelMessage instanceof JmsMessage ) { JmsMessage jmsMessage = ( JmsMessage ) camelMessage ; if ( ! jmsMessage . shouldCreateNewMessage ( ) ) { answer = jmsMessage . getJmsMessage ( ) ; } } if ( answer == null ) { answer = createJmsMessage ( camelMessage . getBody ( ) , session , exchange . getContext ( ) ) ; appendJmsProperties ( answer , exchange , camelMessage ) ; } return answer ; } public void appendJmsProperties ( Message jmsMessage , Exchange exchange ) throws JMSException { appendJmsProperties ( jmsMessage , exchange , exchange . getIn ( ) ) ; } public void appendJmsProperties ( Message jmsMessage , Exchange exchange , org . apache . camel . Message in ) throws JMSException { Set < Map . Entry < String , Object > > entries = in . getHeaders ( ) . entrySet ( ) ; for ( Map . Entry < String , Object > entry : entries ) { String headerName = entry . getKey ( ) ; Object headerValue = entry . getValue ( ) ; appendJmsProperty ( jmsMessage , exchange , in , headerName , headerValue ) ; } } public void appendJmsProperty ( Message jmsMessage , Exchange exchange , org . apache . camel . Message in , String headerName , Object headerValue ) throws JMSException { if ( headerName . startsWith ( "JMS" ) && ! headerName . startsWith ( "JMSX" ) ) { if ( headerName . equals ( "JMSCorrelationID" ) ) { jmsMessage . setJMSCorrelationID ( ExchangeHelper . convertToType ( exchange , String . class , headerValue ) ) ; } else if ( headerName . equals ( "JMSCorrelationID" ) ) { jmsMessage . setJMSCorrelationID ( ExchangeHelper . convertToType ( exchange , String . class , headerValue ) ) ; } else if ( headerName . equals ( "JMSReplyTo" ) && headerValue != null ) { jmsMessage . setJMSReplyTo ( ExchangeHelper . convertToType ( exchange , Destination . class , headerValue ) ) ; } else if ( headerName . equals ( "JMSType" ) ) { jmsMessage . setJMSType ( ExchangeHelper . convertToType ( exchange , String . class , headerValue ) ) ; } else if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Ignoring JMS header: " + headerName + " with value: " + headerValue ) ; } } else if ( shouldOutputHeader ( in , headerName , headerValue ) ) { String key = encodeToSafeJmsHeaderName ( headerName ) ; Object value = getValidJMSHeaderValue ( headerName , headerValue ) ; if ( value != null ) { jmsMessage . setObjectProperty ( key , headerValue ) ; } else if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Ignoring non primitive header: " + headerName + " of class: " + headerValue . getClass ( ) . getName ( ) + " with value: " + headerValue ) ; } } } protected Object getValidJMSHeaderValue ( String headerName , Object headerValue ) { if ( headerValue . getClass ( ) . isPrimitive ( ) ) { return headerValue ; } else if ( headerValue instanceof String ) { return headerValue ; } else if ( headerValue instanceof Number ) { return headerValue ; } else if ( headerValue instanceof Character ) { return headerValue . toString ( ) ; } else if ( headerValue instanceof BigDecimal || headerValue instanceof BigInteger ) { return headerValue . toString ( ) ; } else if ( headerValue instanceof CharSequence ) { return headerValue . toString ( ) ; } else if ( headerValue instanceof Date ) { return headerValue . toString ( ) ; } return null ; } protected Message createJmsMessage ( Object body , Session session , CamelContext context ) throws JMSException { if ( body instanceof Node ) { try { body = xmlConverter . toString ( ( Node ) body ) ; } catch ( TransformerException e ) { JMSException jmsException = new JMSException ( e . getMessage ( ) ) ; jmsException . setLinkedException ( e ) ; throw jmsException ; } } if ( body instanceof byte [ ] ) { BytesMessage result = session . createBytesMessage ( ) ; result . writeBytes ( ( byte [ ] ) body ) ; return result ; } if ( body instanceof Map ) { MapMessage result = session . createMapMessage ( ) ; Map < ? , ? > map = ( Map < ? , ? > ) body ; try { populateMapMessage ( result , map , context ) ; return result ; } catch ( JMSException e ) { } } if ( body instanceof String ) { return session . createTextMessage ( ( String ) body ) ; } if ( body instanceof Serializable ) { return session . createObjectMessage ( ( Serializable ) body ) ; } return session . createMessage ( ) ; } protected void populateMapMessage ( MapMessage message , Map < ? , ? > map , CamelContext context ) throws JMSException { for ( Object key : map . keySet ( ) ) { String keyString = CamelContextHelper . convertTo ( context , String . class , key ) ; if ( keyString != null ) { message . setObject ( keyString , map . get ( key ) ) ; } } } public Map < String , Object > createMapFromMapMessage ( MapMessage message ) throws JMSException { Map < String , Object > answer = new HashMap < String , Object > ( ) ; Enumeration names = message . getMapNames ( ) ; while ( names . hasMoreElements ( ) ) { String name = names . nextElement ( ) . toString ( ) ; Object value = message . getObject ( name ) ; answer . put ( name , value ) ; } return answer ; } public Set < String > getIgnoreJmsHeaders ( ) { if ( ignoreJmsHeaders == null ) { ignoreJmsHeaders = new HashSet < String > ( ) ; populateIgnoreJmsHeaders ( ignoreJmsHeaders ) ; } return ignoreJmsHeaders ; } public void setIgnoreJmsHeaders ( Set < String > ignoreJmsHeaders ) { this . ignoreJmsHeaders = ignoreJmsHeaders ; } protected boolean shouldOutputHeader ( org . apache . camel . Message camelMessage , String headerName , Object headerValue ) { String key = encodeToSafeJmsHeaderName ( headerName ) ; return headerValue != null && ! getIgnoreJmsHeaders ( ) . contains ( headerName ) && ObjectHelper . isJavaIdentifier ( key ) ; } public static String encodeToSafeJmsHeaderName ( String headerName ) { return headerName . replace ( "." , "_" ) ; } public static String decodeFromSafeJmsHeaderName ( String headerName ) { return headerName . replace ( "_" , "." ) ; } protected void populateIgnoreJmsHeaders ( Set < String > set ) { String [ ] ignore = { "JMSXUserID" , "JMSXAppID" , "JMSXDeliveryCount" , "JMSXProducerTXID" , "JMSXConsumerTXID" , "JMSXRcvTimestamp" , "JMSXRecvTimestamp" , "JMSXState" } ; set . addAll ( Arrays . asList ( ignore ) ) ; } } 	0
package org . apache . camel . processor ; public enum LoggingLevel { DEBUG , ERROR , FATAL , INFO , TRACE , WARN } 	1
package org . apache . camel . component . cxf ; import org . apache . camel . CamelContext ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . Destination ; public class CxfExchange extends DefaultExchange { public static final String DATA_FORMAT = "DATA_FORMAT" ; private Exchange exchange ; public CxfExchange ( CamelContext context , ExchangePattern pattern , Exchange exchange ) { super ( context , pattern ) ; this . exchange = exchange ; if ( exchange != null ) { if ( exchange . getOutMessage ( ) != null ) { setOut ( new CxfMessage ( exchange . getOutMessage ( ) ) ) ; } if ( exchange . getInMessage ( ) != null ) { setIn ( new CxfMessage ( exchange . getInMessage ( ) ) ) ; } if ( exchange . getInFaultMessage ( ) != null ) { setFault ( new CxfMessage ( exchange . getInFaultMessage ( ) ) ) ; } } } public CxfExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public CxfExchange ( CamelContext context , ExchangePattern pattern , Message inMessage ) { this ( context , pattern ) ; this . exchange = inMessage . getExchange ( ) ; setIn ( new CxfMessage ( inMessage ) ) ; if ( exchange != null ) { if ( exchange . getOutMessage ( ) != null ) { setOut ( new CxfMessage ( exchange . getOutMessage ( ) ) ) ; } if ( exchange . getInFaultMessage ( ) != null ) { setFault ( new CxfMessage ( exchange . getInFaultMessage ( ) ) ) ; } } } @ Override public org . apache . camel . Exchange newInstance ( ) { return new CxfExchange ( this . getContext ( ) , this . getPattern ( ) , this . getExchange ( ) ) ; } @ Override public CxfMessage getIn ( ) { return ( CxfMessage ) super . getIn ( ) ; } @ Override public CxfMessage getOut ( ) { return ( CxfMessage ) super . getOut ( ) ; } @ Override public CxfMessage getOut ( boolean lazyCreate ) { return ( CxfMessage ) super . getOut ( lazyCreate ) ; } @ Override public CxfMessage getFault ( ) { return ( CxfMessage ) super . getFault ( ) ; } @ Override protected org . apache . camel . Message createFaultMessage ( ) { return new CxfMessage ( ) ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } public Message getInMessage ( ) { return getIn ( ) . getMessage ( ) ; } public Message getOutMessage ( ) { return getOut ( ) . getMessage ( ) ; } public Message getOutFaultMessage ( ) { return getExchange ( ) . getOutFaultMessage ( ) ; } public Message getInFaultMessage ( ) { return getExchange ( ) . getInFaultMessage ( ) ; } public Destination getDestination ( ) { return getExchange ( ) . getDestination ( ) ; } public Conduit getConduit ( Message message ) { return getExchange ( ) . getConduit ( message ) ; } @ Override protected CxfMessage createInMessage ( ) { return new CxfMessage ( ) ; } @ Override protected CxfMessage createOutMessage ( ) { return new CxfMessage ( ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . TryProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "try" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TryType extends OutputType < TryType > { @ XmlTransient private List < CatchType > catchClauses ; @ XmlTransient private FinallyType finallyClause ; @ XmlTransient private boolean initialized ; @ XmlTransient private List < ProcessorType < ? > > outputsWithoutCatches ; @ Override public String toString ( ) { return "Try[ " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "try" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor tryProcessor = createOutputsProcessor ( routeContext , getOutputsWithoutCatches ( ) ) ; Processor finallyProcessor = null ; if ( finallyClause != null ) { finallyProcessor = finallyClause . createProcessor ( routeContext ) ; } List < CatchProcessor > catchProcessors = new ArrayList < CatchProcessor > ( ) ; if ( catchClauses != null ) { for ( CatchType catchClause : catchClauses ) { catchProcessors . add ( catchClause . createProcessor ( routeContext ) ) ; } } return new TryProcessor ( tryProcessor , catchProcessors , finallyProcessor ) ; } public TryType handle ( Class < ? > exceptionType ) { popBlock ( ) ; CatchType answer = new CatchType ( exceptionType ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Deprecated public TryType handleAll ( ) { return finallyBlock ( ) ; } public TryType finallyBlock ( ) { popBlock ( ) ; FinallyType answer = new FinallyType ( ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Override public ProcessorType < ? extends ProcessorType > end ( ) { popBlock ( ) ; return super . end ( ) ; } public List < CatchType > getCatchClauses ( ) { if ( catchClauses == null ) { checkInitialized ( ) ; } return catchClauses ; } public FinallyType getFinallyClause ( ) { if ( finallyClause == null ) { checkInitialized ( ) ; } return finallyClause ; } public List < ProcessorType < ? > > getOutputsWithoutCatches ( ) { if ( outputsWithoutCatches == null ) { checkInitialized ( ) ; } return outputsWithoutCatches ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { initialized = false ; super . setOutputs ( outputs ) ; } @ Override public void addOutput ( ProcessorType output ) { initialized = false ; super . addOutput ( output ) ; } protected void checkInitialized ( ) { if ( ! initialized ) { initialized = true ; outputsWithoutCatches = new ArrayList < ProcessorType < ? > > ( ) ; catchClauses = new ArrayList < CatchType > ( ) ; finallyClause = null ; for ( ProcessorType output : outputs ) { if ( output instanceof CatchType ) { catchClauses . add ( ( CatchType ) output ) ; } else if ( output instanceof FinallyType ) { if ( finallyClause != null ) { throw new IllegalArgumentException ( "Multiple finally clauses added: " + finallyClause + " and " + output ) ; } else { finallyClause = ( FinallyType ) output ; } } else { outputsWithoutCatches . add ( output ) ; } } } } } 	1
package org . apache . camel . util ; import java . util . Date ; import java . util . concurrent . TimeUnit ; public class Time { private long number ; private TimeUnit timeUnit = TimeUnit . MILLISECONDS ; public Time ( long number , TimeUnit timeUnit ) { this . number = number ; this . timeUnit = timeUnit ; } public static Time millis ( long value ) { return new Time ( value , TimeUnit . MILLISECONDS ) ; } public static Time micros ( long value ) { return new Time ( value , TimeUnit . MICROSECONDS ) ; } public static Time nanos ( long value ) { return new Time ( value , TimeUnit . NANOSECONDS ) ; } public static Time seconds ( long value ) { return new Time ( value , TimeUnit . SECONDS ) ; } public static Time minutes ( long value ) { return new Time ( minutesAsSeconds ( value ) , TimeUnit . MILLISECONDS ) ; } public static Time hours ( long value ) { return new Time ( hoursAsSeconds ( value ) , TimeUnit . MILLISECONDS ) ; } public static Time days ( long value ) { return new Time ( daysAsSeconds ( value ) , TimeUnit . MILLISECONDS ) ; } public long toMillis ( ) { return timeUnit . toMillis ( number ) ; } public Date toDate ( ) { return new Date ( toMillis ( ) ) ; } public long getNumber ( ) { return number ; } public TimeUnit getTimeUnit ( ) { return timeUnit ; } protected static long minutesAsSeconds ( long value ) { return value * 60 ; } protected static long hoursAsSeconds ( long value ) { return minutesAsSeconds ( value ) * 60 ; } protected static long daysAsSeconds ( long value ) { return hoursAsSeconds ( value ) * 24 ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultComponentResolver < E extends Exchange > implements ComponentResolver < E > { protected static final FactoryFinder COMPONENT_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; private static final transient Log LOG = LogFactory . getLog ( DefaultComponentResolver . class ) ; public Component < E > resolveComponent ( String name , CamelContext context ) { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } } Class type ; try { type = COMPONENT_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { return null ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " via type: " + type . getName ( ) + " via " + COMPONENT_FACTORY . getPath ( ) + name ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component < E > ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	1
package org . apache . camel ; import org . apache . camel . util . ExchangeHelper ; public class NoSuchPropertyException extends CamelExchangeException { private static final long serialVersionUID = - 8721487431101572630L ; private final String propertyName ; private final Class < ? > type ; public NoSuchPropertyException ( Exchange exchange , String propertyName , Class < ? > type ) { super ( "No '" + propertyName + "' property available of type: " + type . getName ( ) + reason ( exchange , propertyName ) , exchange ) ; this . propertyName = propertyName ; this . type = type ; } public String getPropertyName ( ) { return propertyName ; } public Class < ? > getType ( ) { return type ; } protected static String reason ( Exchange exchange , String propertyName ) { Object value = exchange . getProperty ( propertyName ) ; return valueDescription ( value ) ; } static String valueDescription ( Object value ) { if ( value == null ) { return "" ; } return " but has value: " + value + " of type: " + value . getClass ( ) . getName ( ) ; } } 	0
package org . apache . camel . util ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Properties ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . spi . Injector ; public class FactoryFinder { private final String path ; private final ConcurrentHashMap classMap = new ConcurrentHashMap ( ) ; public FactoryFinder ( ) { this ( "META-INF/services/org/apache/camel/" ) ; } public FactoryFinder ( String path ) { this . path = path ; } public Object newInstance ( String key ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { return newInstance ( key , ( String ) null ) ; } public Object newInstance ( String key , String propertyPrefix ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { Class clazz = findClass ( key , propertyPrefix ) ; return clazz . newInstance ( ) ; } public Object newInstance ( String key , Injector injector ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , ( String ) null ) ; } public Object newInstance ( String key , Injector injector , String propertyPrefix ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; return injector . newInstance ( type ) ; } public < T > T newInstance ( String key , Injector injector , Class < T > expectedType ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , null , expectedType ) ; } public < T > T newInstance ( String key , Injector injector , String propertyPrefix , Class < T > expectedType ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; Object value = injector . newInstance ( type ) ; if ( expectedType . isInstance ( value ) ) { return expectedType . cast ( value ) ; } else { throw new ClassCastException ( "Not instanceof " + expectedType . getName ( ) + " value: " + value ) ; } } public < T > List < T > newInstances ( String key , Injector injector , Class < T > type ) throws IOException , ClassNotFoundException { List < Class > list = findClasses ( key ) ; List < T > answer = new ArrayList < T > ( list . size ( ) ) ; answer . add ( newInstance ( key , injector , type ) ) ; return answer ; } public Class findClass ( String key ) throws ClassNotFoundException , IOException { return findClass ( key , null ) ; } public Class findClass ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { if ( propertyPrefix == null ) { propertyPrefix = "" ; } Class clazz = ( Class ) classMap . get ( propertyPrefix + key ) ; if ( clazz == null ) { clazz = newInstance ( doFindFactoryProperties ( key ) , propertyPrefix ) ; classMap . put ( propertyPrefix + key , clazz ) ; } return clazz ; } public List < Class > findClasses ( String key ) throws ClassNotFoundException , IOException { return findClasses ( key , null ) ; } public List < Class > findClasses ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { Class type = findClass ( key , propertyPrefix ) ; return Collections . singletonList ( type ) ; } public String getPath ( ) { return path ; } private Class newInstance ( Properties properties , String propertyPrefix ) throws ClassNotFoundException , IOException { String className = properties . getProperty ( propertyPrefix + "class" ) ; if ( className == null ) { throw new IOException ( "Expected property is missing: " + propertyPrefix + "class" ) ; } return ObjectHelper . loadClass ( className ) ; } private Properties doFindFactoryProperties ( String key ) throws IOException { String uri = path + key ; InputStream in = ObjectHelper . loadResourceAsStream ( uri ) ; if ( in == null ) { throw new NoFactoryAvailableException ( uri ) ; } BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( in ) ; Properties properties = new Properties ( ) ; properties . load ( reader ) ; return properties ; } finally { ObjectHelper . close ( reader , key , null ) ; ObjectHelper . close ( in , key , null ) ; } } } 	1
package org . apache . camel . component . jpa ; import javax . persistence . EntityManager ; import javax . persistence . EntityManagerFactory ; import javax . persistence . PersistenceException ; import org . apache . camel . impl . ServiceSupport ; import org . springframework . orm . jpa . JpaCallback ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . orm . jpa . JpaTransactionManager ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallback ; import org . springframework . transaction . support . TransactionTemplate ; public class JpaTemplateTransactionStrategy extends ServiceSupport implements TransactionStrategy { private final JpaTemplate jpaTemplate ; private final TransactionTemplate transactionTemplate ; public JpaTemplateTransactionStrategy ( JpaTemplate jpaTemplate , TransactionTemplate transactionTemplate ) { this . jpaTemplate = jpaTemplate ; this . transactionTemplate = transactionTemplate ; } public static JpaTemplateTransactionStrategy newInstance ( EntityManagerFactory emf ) { JpaTemplate template = new JpaTemplate ( emf ) ; return newInstance ( emf , template ) ; } public static JpaTemplateTransactionStrategy newInstance ( EntityManagerFactory emf , JpaTemplate template ) { JpaTransactionManager transactionManager = new JpaTransactionManager ( emf ) ; transactionManager . afterPropertiesSet ( ) ; TransactionTemplate tranasctionTemplate = new TransactionTemplate ( transactionManager ) ; tranasctionTemplate . afterPropertiesSet ( ) ; return new JpaTemplateTransactionStrategy ( template , tranasctionTemplate ) ; } public Object execute ( final JpaCallback callback ) { return transactionTemplate . execute ( new TransactionCallback ( ) { public Object doInTransaction ( TransactionStatus status ) { return jpaTemplate . execute ( new JpaCallback ( ) { public Object doInJpa ( EntityManager entityManager ) throws PersistenceException { return callback . doInJpa ( entityManager ) ; } } ) ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor { protected AsyncProcessor processor ; public DelegateAsyncProcessor ( ) { } public DelegateAsyncProcessor ( AsyncProcessor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public AsyncProcessor getProcessor ( ) { return processor ; } public void setProcessor ( AsyncProcessor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } } 	1
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . language . LanguageAnnotation ; public interface AnnotationExpressionFactory { Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) ; } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . DataFormatClause ; import org . apache . camel . builder . DeadLetterChannelBuilder ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . ErrorHandlerBuilderRef ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . NoErrorHandlerBuilder ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . LanguageExpression ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlAccessorType ( XmlAccessType . PROPERTY ) public abstract class ProcessorType < Type extends ProcessorType > extends OptionalIdentifiedType < Type > implements Block { public static final String DEFAULT_TRACE_CATEGORY = "org.apache.camel.TRACE" ; private static final transient Log LOG = LogFactory . getLog ( ProcessorType . class ) ; private ErrorHandlerBuilder errorHandlerBuilder ; private Boolean inheritErrorHandlerFlag ; private NodeFactory nodeFactory ; private LinkedList < Block > blocks = new LinkedList < Block > ( ) ; private ProcessorType < ? extends ProcessorType > parent ; private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; private String errorHandlerRef ; public abstract List < ProcessorType < ? > > getOutputs ( ) ; public Processor createProcessor ( RouteContext routeContext ) throws Exception { throw new UnsupportedOperationException ( "Not implemented yet for class: " + getClass ( ) . getName ( ) ) ; } public Processor createOutputsProcessor ( RouteContext routeContext ) throws Exception { Collection < ProcessorType < ? > > outputs = getOutputs ( ) ; return createOutputsProcessor ( routeContext , outputs ) ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Processor processor = makeProcessor ( routeContext ) ; if ( ! routeContext . isRouteAdded ( ) ) { routeContext . addEventDrivenProcessor ( processor ) ; } } public Processor wrapProcessor ( RouteContext routeContext , Processor processor ) throws Exception { processor = wrapProcessorInInterceptors ( routeContext , processor ) ; return wrapInErrorHandler ( routeContext , processor ) ; } public Type to ( String uri ) { addOutput ( new ToType ( uri ) ) ; return ( Type ) this ; } public Type to ( Endpoint endpoint ) { addOutput ( new ToType ( endpoint ) ) ; return ( Type ) this ; } public Type to ( String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri ) ) ; } return ( Type ) this ; } public Type to ( Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( Collection < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public MulticastType multicast ( ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public Type pipeline ( String ... uris ) { return to ( uris ) ; } public Type pipeline ( Endpoint ... endpoints ) { return to ( endpoints ) ; } public Type pipeline ( Collection < Endpoint > endpoints ) { return to ( endpoints ) ; } public ProcessorType < ? extends ProcessorType > end ( ) { if ( blocks . isEmpty ( ) ) { if ( parent == null ) { throw new IllegalArgumentException ( "Root node with no active block" ) ; } return parent ; } popBlock ( ) ; return this ; } public ThreadType thread ( int coreSize ) { ThreadType answer = new ThreadType ( coreSize ) ; addOutput ( answer ) ; return answer ; } public ProcessorType < Type > thread ( ThreadPoolExecutor executor ) { ThreadType answer = new ThreadType ( executor ) ; addOutput ( answer ) ; return this ; } public IdempotentConsumerType idempotentConsumer ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( messageIdExpression , messageIdRepository ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < IdempotentConsumerType > idempotentConsumer ( MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( ) ; answer . setMessageIdRepository ( messageIdRepository ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < FilterType > filter ( ) { FilterType filter = new FilterType ( ) ; addOutput ( filter ) ; return ExpressionClause . createAndSetExpression ( filter ) ; } public FilterType filter ( Predicate predicate ) { FilterType filter = new FilterType ( predicate ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( ExpressionType expression ) { FilterType filter = getNodeFactory ( ) . createFilter ( ) ; filter . setExpression ( expression ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( String language , String expression ) { return filter ( new LanguageExpression ( language , expression ) ) ; } public LoadBalanceType loadBalance ( ) { LoadBalanceType answer = new LoadBalanceType ( ) ; addOutput ( answer ) ; return answer ; } public ChoiceType choice ( ) { ChoiceType answer = new ChoiceType ( ) ; addOutput ( answer ) ; return answer ; } public TryType tryBlock ( ) { TryType answer = new TryType ( ) ; addOutput ( answer ) ; return answer ; } public Type recipientList ( Expression receipients ) { RecipientListType answer = new RecipientListType ( receipients ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > recipientList ( ) { RecipientListType answer = new RecipientListType ( ) ; addOutput ( answer ) ; ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; answer . setExpression ( clause ) ; return clause ; } public Type routingSlip ( String header , String uriDelimiter ) { RoutingSlipType answer = new RoutingSlipType ( header , uriDelimiter ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( String header ) { RoutingSlipType answer = new RoutingSlipType ( header ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( ) { RoutingSlipType answer = new RoutingSlipType ( ) ; addOutput ( answer ) ; return ( Type ) this ; } public SplitterType splitter ( Expression receipients ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression receipients , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < ResequencerType > resequencer ( ) { ResequencerType answer = new ResequencerType ( ) ; addOutput ( answer ) ; ExpressionClause < ResequencerType > clause = new ExpressionClause < ResequencerType > ( answer ) ; answer . expression ( clause ) ; return clause ; } public ResequencerType resequencer ( Expression < Exchange > expression ) { return resequencer ( Collections . < Expression > singletonList ( expression ) ) ; } public ResequencerType resequencer ( List < Expression > expressions ) { ResequencerType answer = new ResequencerType ( expressions ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression ... expressions ) { List < Expression > list = new ArrayList < Expression > ( ) ; list . addAll ( Arrays . asList ( expressions ) ) ; return resequencer ( list ) ; } public ExpressionClause < AggregatorType > aggregator ( ) { AggregatorType answer = new AggregatorType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationCollection aggregationCollection ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationCollection ( aggregationCollection ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public AggregatorType aggregator ( Expression correlationExpression ) { AggregatorType answer = new AggregatorType ( correlationExpression ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( correlationExpression , aggregationStrategy ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( Expression < Exchange > processAtExpression ) { return delayer ( processAtExpression , 0L ) ; } public DelayerType delayer ( Expression < Exchange > processAtExpression , long delay ) { DelayerType answer = new DelayerType ( processAtExpression , delay ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < DelayerType > delayer ( ) { DelayerType answer = new DelayerType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public DelayerType delayer ( long delay ) { return delayer ( null , delay ) ; } public ThrottlerType throttler ( long maximumRequestCount ) { ThrottlerType answer = new ThrottlerType ( maximumRequestCount ) ; addOutput ( answer ) ; return answer ; } public Type throwFault ( Throwable fault ) { ThrowFaultType answer = new ThrowFaultType ( ) ; answer . setFault ( fault ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type throwFault ( String message ) { return throwFault ( new CamelException ( message ) ) ; } public Type interceptor ( String ref ) { InterceptorRef interceptor = new InterceptorRef ( ref ) ; intercept ( interceptor ) ; return ( Type ) this ; } public Type intercept ( DelegateProcessor interceptor ) { intercept ( new InterceptorRef ( interceptor ) ) ; return ( Type ) this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer ; } public void intercept ( InterceptorType interceptor ) { addOutput ( interceptor ) ; pushBlock ( interceptor ) ; } public void addInterceptor ( InterceptorType interceptor ) { interceptors . add ( interceptor ) ; } public void addInterceptor ( DelegateProcessor interceptor ) { addInterceptor ( new InterceptorRef ( interceptor ) ) ; } protected void pushBlock ( Block block ) { blocks . add ( block ) ; } protected Block popBlock ( ) { return blocks . isEmpty ( ) ? null : blocks . removeLast ( ) ; } public Type proceed ( ) { ProceedType proceed = null ; ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { proceed = ( ( InterceptType ) currentProcessor ) . getProceed ( ) ; LOG . info ( "proceed() is the implied and hence not needed for an intercept()" ) ; } if ( proceed == null ) { for ( ProcessorType node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { InterceptType intercept = ( InterceptType ) node ; proceed = intercept . getProceed ( ) ; break ; } } if ( proceed == null ) { throw new IllegalArgumentException ( "Cannot use proceed() without being within an intercept() block" ) ; } } addOutput ( proceed ) ; return ( Type ) this ; } public Type stop ( ) { ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { ( ( InterceptType ) currentProcessor ) . stopIntercept ( ) ; } else { ProcessorType node ; for ( node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { ( ( InterceptType ) node ) . stopIntercept ( ) ; break ; } } if ( node == null ) { throw new IllegalArgumentException ( "Cannot use stop() without being within an intercept() block" ) ; } } return ( Type ) this ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer . when ( predicate ) ; } public Type interceptors ( String ... refs ) { for ( String ref : refs ) { interceptor ( ref ) ; } return ( Type ) this ; } public Type trace ( ) { return trace ( DEFAULT_TRACE_CATEGORY ) ; } public Type trace ( String category ) { final Log log = LogFactory . getLog ( category ) ; return intercept ( new DelegateProcessor ( ) { @ Override public void process ( Exchange exchange ) throws Exception { log . trace ( exchange ) ; processNext ( exchange ) ; } } ) ; } public PolicyRef policies ( ) { PolicyRef answer = new PolicyRef ( ) ; addOutput ( answer ) ; return answer ; } public PolicyRef policy ( Policy policy ) { PolicyRef answer = new PolicyRef ( policy ) ; addOutput ( answer ) ; return answer ; } public Type handleFault ( ) { intercept ( new HandleFaultType ( ) ) ; return ( Type ) this ; } public Type errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return ( Type ) this ; } public Type inheritErrorHandler ( boolean condition ) { setInheritErrorHandlerFlag ( condition ) ; return ( Type ) this ; } public Type process ( Processor processor ) { ProcessorRef answer = new ProcessorRef ( processor ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type processRef ( String ref ) { ProcessorRef answer = new ProcessorRef ( ) ; answer . setRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref ) { BeanRef answer = new BeanRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref , String method ) { BeanRef answer = new BeanRef ( ref , method ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setBody ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetBodyType answer = new SetBodyType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setBody ( Expression expression ) { SetBodyType answer = new SetBodyType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } @ Deprecated public Type setOutBody ( Expression expression ) { return transform ( expression ) ; } @ Deprecated public ExpressionClause < ProcessorType < Type > > setOutBody ( ) { return transform ( ) ; } public Type transform ( Expression expression ) { TransformType answer = new TransformType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > transform ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; TransformType answer = new TransformType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setFaultBody ( Expression expression ) { return process ( ProcessorBuilder . setFaultBody ( expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetHeaderType answer = new SetHeaderType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type setHeader ( String name , Expression expression ) { SetHeaderType answer = new SetHeaderType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setHeader ( String name , String value ) { SetHeaderType answer = new SetHeaderType ( name , value ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setOutHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setOutHeader ( name , clause ) ) ; return clause ; } public Type setOutHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setOutHeader ( name , expression ) ) ; } public Type setOutHeader ( String name , String value ) { return ( Type ) setOutHeader ( name ) . constant ( value ) ; } public Type setFaultHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setFaultHeader ( name , expression ) ) ; } public Type setProperty ( String name , Expression expression ) { return process ( ProcessorBuilder . setProperty ( name , expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setProperty ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setProperty ( name , clause ) ) ; return clause ; } public Type removeHeader ( String name ) { return process ( ProcessorBuilder . removeHeader ( name ) ) ; } public Type removeOutHeader ( String name ) { return process ( ProcessorBuilder . removeOutHeader ( name ) ) ; } public Type removeFaultHeader ( String name ) { return process ( ProcessorBuilder . removeFaultHeader ( name ) ) ; } public Type removeProperty ( String name ) { return process ( ProcessorBuilder . removeProperty ( name ) ) ; } public Type convertBodyTo ( Class type ) { addOutput ( new ConvertBodyType ( type ) ) ; return ( Type ) this ; } @ Deprecated public Type convertOutBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } @ Deprecated public Type convertFaultBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } public DataFormatClause < ProcessorType < Type > > unmarshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Unmarshal ) ; } public Type unmarshal ( DataFormatType dataFormatType ) { addOutput ( new UnmarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type unmarshal ( DataFormat dataFormat ) { return unmarshal ( new DataFormatType ( dataFormat ) ) ; } public Type unmarshal ( String dataTypeRef ) { addOutput ( new UnmarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } public DataFormatClause < ProcessorType < Type > > marshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Marshal ) ; } public Type marshal ( DataFormatType dataFormatType ) { addOutput ( new MarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type marshal ( DataFormat dataFormat ) { return marshal ( new DataFormatType ( dataFormat ) ) ; } public Type marshal ( String dataTypeRef ) { addOutput ( new MarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } @ XmlTransient public ProcessorType < ? extends ProcessorType > getParent ( ) { return parent ; } public void setParent ( ProcessorType < ? extends ProcessorType > parent ) { this . parent = parent ; } @ XmlTransient public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void setErrorHandlerBuilderIfNull ( ErrorHandlerBuilder errorHandlerBuilder ) { if ( this . errorHandlerBuilder == null ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; } } public String getErrorHandlerRef ( ) { return errorHandlerRef ; } @ XmlAttribute ( required = false ) public void setErrorHandlerRef ( String errorHandlerRef ) { this . errorHandlerRef = errorHandlerRef ; setErrorHandlerBuilder ( new ErrorHandlerBuilderRef ( errorHandlerRef ) ) ; } @ XmlTransient public boolean isInheritErrorHandler ( ) { return isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public static boolean isInheritErrorHandler ( Boolean value ) { return value == null || value . booleanValue ( ) ; } @ XmlAttribute ( name = "inheritErrorHandler" , required = false ) public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } @ XmlTransient public NodeFactory getNodeFactory ( ) { if ( nodeFactory == null ) { nodeFactory = new NodeFactory ( ) ; } return nodeFactory ; } public void setNodeFactory ( NodeFactory nodeFactory ) { this . nodeFactory = nodeFactory ; } public String getLabel ( ) { return "" ; } protected Processor makeProcessor ( RouteContext routeContext ) throws Exception { Processor processor = createProcessor ( routeContext ) ; return wrapProcessor ( routeContext , processor ) ; } protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } List < InterceptStrategy > strategies = new ArrayList < InterceptStrategy > ( ) ; CamelContext camelContext = routeContext . getCamelContext ( ) ; if ( camelContext instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) camelContext ; strategies . addAll ( defaultCamelContext . getInterceptStrategies ( ) ) ; } strategies . addAll ( routeContext . getInterceptStrategies ( ) ) ; for ( InterceptStrategy strategy : strategies ) { if ( strategy != null ) { target = strategy . wrapProcessorInInterceptors ( this , target ) ; } } List < InterceptorType > list = routeContext . getRoute ( ) . getInterceptors ( ) ; if ( interceptors != null ) { list . addAll ( interceptors ) ; } Collections . reverse ( list ) ; Set < Processor > interceptors = new HashSet < Processor > ( ) ; interceptors . add ( target ) ; for ( InterceptorType interceptorType : list ) { DelegateProcessor interceptor = interceptorType . createInterceptor ( routeContext ) ; if ( ! interceptors . contains ( interceptor ) ) { interceptors . add ( interceptor ) ; if ( interceptor . getProcessor ( ) != null ) { LOG . warn ( "Interceptor " + interceptor + " currently wraps target " + interceptor . getProcessor ( ) + " is attempting to change target " + target + " new wrapping has been denied." ) ; } else { interceptor . setProcessor ( target ) ; target = interceptor ; } } } return target ; } protected Processor wrapInErrorHandler ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } ErrorHandlerWrappingStrategy strategy = routeContext . getErrorHandlerWrappingStrategy ( ) ; if ( strategy != null ) { return strategy . wrapProcessorInErrorHandler ( routeContext , this , target ) ; } return getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( errorHandlerRef != null ) { return new ErrorHandlerBuilderRef ( errorHandlerRef ) ; } if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } protected void configureChild ( ProcessorType output ) { output . setNodeFactory ( getNodeFactory ( ) ) ; } public void addOutput ( ProcessorType processorType ) { processorType . setParent ( this ) ; configureChild ( processorType ) ; if ( blocks . isEmpty ( ) ) { getOutputs ( ) . add ( processorType ) ; } else { Block block = blocks . getLast ( ) ; block . addOutput ( processorType ) ; } } protected Processor createCompositeProcessor ( List < Processor > list ) { return new Pipeline ( list ) ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { List < Processor > list = new ArrayList < Processor > ( ) ; for ( ProcessorType output : outputs ) { Processor processor = output . createProcessor ( routeContext ) ; processor = output . wrapProcessorInInterceptors ( routeContext , processor ) ; ProcessorType currentProcessor = this ; if ( ! ( currentProcessor instanceof ExceptionType || currentProcessor instanceof TryType ) ) { processor = output . wrapInErrorHandler ( routeContext , processor ) ; } list . add ( processor ) ; } Processor processor = null ; if ( ! list . isEmpty ( ) ) { if ( list . size ( ) == 1 ) { processor = list . get ( 0 ) ; } else { processor = createCompositeProcessor ( list ) ; } } return processor ; } public void clearOutput ( ) { getOutputs ( ) . clear ( ) ; blocks . clear ( ) ; } } 	1
package org . apache . camel . spi ; import java . io . InputStream ; import java . io . OutputStream ; import org . apache . camel . Exchange ; public interface DataFormat { void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws Exception ; Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionHelper ; public class Delayer extends DelayProcessorSupport { private Expression < Exchange > timeExpression ; private long delay ; public Delayer ( Processor processor , Expression < Exchange > timeExpression , long delay ) { super ( processor ) ; this . timeExpression = timeExpression ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[on: " + timeExpression + " delay: " + delay + " to: " + getProcessor ( ) + "]" ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } protected void delay ( Exchange exchange ) throws Exception { long time = 0 ; if ( timeExpression != null ) { Long longValue = ExpressionHelper . evaluateAsType ( timeExpression , exchange , Long . class ) ; if ( longValue != null ) { time = longValue . longValue ( ) ; } } if ( time <= 0 ) { time = defaultProcessTime ( exchange ) ; } time += delay ; waitUntil ( time , exchange ) ; } protected long defaultProcessTime ( Exchange exchange ) { return currentSystemTime ( ) ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . JMSException ; public class MessagePropertyAccessException extends RuntimeJmsException { private static final long serialVersionUID = - 3996286386119163309L ; private final String propertyName ; public MessagePropertyAccessException ( String propertyName , JMSException e ) { super ( "Error accessing header: " + propertyName , e ) ; this . propertyName = propertyName ; } public String getPropertyName ( ) { return propertyName ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandler extends ErrorHandlerSupport { private Processor output ; private Log log ; private LoggingLevel level ; public LoggingErrorHandler ( Processor output ) { this ( output , LogFactory . getLog ( LoggingErrorHandler . class ) , LoggingLevel . INFO ) ; } public LoggingErrorHandler ( Processor output , Log log , LoggingLevel level ) { this . output = output ; this . log = log ; this . level = level ; } @ Override public String toString ( ) { return "LoggingErrorHandler[" + output + "]" ; } public void process ( Exchange exchange ) throws Exception { try { output . process ( exchange ) ; } catch ( Throwable e ) { if ( ! customProcessorForException ( exchange , e ) ) { logError ( exchange , e ) ; } } } public Processor getOutput ( ) { return output ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } protected void logError ( Exchange exchange , Throwable e ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange , e ) , e ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange , e ) , e ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange , e ) , e ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange , e ) , e ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange , e ) , e ) ; } } protected Object logMessage ( Exchange exchange , Throwable e ) { return e + " while processing exchange: " + exchange ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( output ) ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . NoSuchLanguageException ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; public class DefaultLanguageResolver implements LanguageResolver { protected static final FactoryFinder LANGUAGE_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/language/" ) ; protected static final FactoryFinder LANGUAGE_RESOLVER = new FactoryFinder ( "META-INF/services/org/apache/camel/language/resolver/" ) ; public Language resolveLanguage ( String name , CamelContext context ) { Class type = null ; try { type = LANGUAGE_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Language registered for scheme : " + name , e ) ; } if ( type != null ) { if ( Language . class . isAssignableFrom ( type ) ) { return ( Language ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Language implementation. Found: " + type . getName ( ) ) ; } } return noSpecificLanguageFound ( name , context ) ; } protected Language noSpecificLanguageFound ( String name , CamelContext context ) { Class type = null ; try { type = LANGUAGE_RESOLVER . findClass ( "default" ) ; } catch ( NoFactoryAvailableException e ) { } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Language registered for scheme : " + name , e ) ; } if ( type != null ) { if ( LanguageResolver . class . isAssignableFrom ( type ) ) { LanguageResolver resolver = ( LanguageResolver ) context . getInjector ( ) . newInstance ( type ) ; return resolver . resolveLanguage ( name , context ) ; } else { throw new IllegalArgumentException ( "Type is not a LanguageResolver implementation. Found: " + type . getName ( ) ) ; } } throw new NoSuchLanguageException ( name ) ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . processor . resequencer . ResequencerEngine ; import org . apache . camel . processor . resequencer . SequenceElementComparator ; import org . apache . camel . processor . resequencer . SequenceSender ; public class StreamResequencer extends DelegateProcessor implements Processor { private ResequencerEngine < Exchange > reseq ; private BlockingQueue < Exchange > queue ; private SequenceSender sender ; public StreamResequencer ( Processor processor , SequenceElementComparator < Exchange > comparator , int capacity ) { super ( processor ) ; queue = new LinkedBlockingQueue < Exchange > ( ) ; reseq = new ResequencerEngine < Exchange > ( comparator , capacity ) ; reseq . setOutQueue ( queue ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; sender = new SequenceSender ( getProcessor ( ) ) ; sender . setQueue ( queue ) ; sender . start ( ) ; } @ Override protected void doStop ( ) throws Exception { reseq . stop ( ) ; sender . cancel ( ) ; super . doStop ( ) ; } @ Override public void process ( Exchange exchange ) throws Exception { reseq . put ( exchange ) ; } public long getTimeout ( ) { return reseq . getTimeout ( ) ; } public void setTimeout ( long timeout ) { reseq . setTimeout ( timeout ) ; } @ Override public String toString ( ) { return "StreamResequencer[to: " + getProcessor ( ) + "]" ; } } 	1
package org . apache . camel . converter . jaxb ; import java . io . InputStream ; import java . io . Reader ; import java . io . StringReader ; import java . io . StringWriter ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; import javax . xml . bind . Marshaller ; import javax . xml . bind . Unmarshaller ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . util . JAXBSource ; import javax . xml . transform . Source ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . TypeConverter ; import org . apache . camel . spi . TypeConverterAware ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FallbackTypeConverter implements TypeConverter , TypeConverterAware { private static final transient Log LOG = LogFactory . getLog ( FallbackTypeConverter . class ) ; private TypeConverter parentTypeConverter ; private boolean prettyPrint = true ; public boolean isPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } public void setTypeConverter ( TypeConverter parentTypeConverter ) { this . parentTypeConverter = parentTypeConverter ; } public < T > T convertTo ( Class < T > type , Object value ) { try { if ( isJaxbType ( type ) ) { return unmarshall ( type , value ) ; } if ( value != null ) { if ( isJaxbType ( value . getClass ( ) ) ) { return marshall ( type , value ) ; } } return null ; } catch ( JAXBException e ) { throw new RuntimeCamelException ( e ) ; } } protected < T > boolean isJaxbType ( Class < T > type ) { XmlRootElement element = type . getAnnotation ( XmlRootElement . class ) ; boolean jaxbType = element != null ; return jaxbType ; } protected < T > T unmarshall ( Class < T > type , Object value ) throws JAXBException { JAXBContext context = createContext ( type ) ; Unmarshaller unmarshaller = context . createUnmarshaller ( ) ; if ( parentTypeConverter != null ) { InputStream inputStream = parentTypeConverter . convertTo ( InputStream . class , value ) ; if ( inputStream != null ) { Object unmarshalled = unmarshaller . unmarshal ( inputStream ) ; return type . cast ( unmarshalled ) ; } Reader reader = parentTypeConverter . convertTo ( Reader . class , value ) ; if ( reader != null ) { Object unmarshalled = unmarshaller . unmarshal ( reader ) ; return type . cast ( unmarshalled ) ; } Source source = parentTypeConverter . convertTo ( Source . class , value ) ; if ( source != null ) { Object unmarshalled = unmarshaller . unmarshal ( source ) ; return type . cast ( unmarshalled ) ; } } if ( value instanceof String ) { value = new StringReader ( ( String ) value ) ; } if ( value instanceof InputStream ) { Object unmarshalled = unmarshaller . unmarshal ( ( InputStream ) value ) ; return type . cast ( unmarshalled ) ; } if ( value instanceof Reader ) { Object unmarshalled = unmarshaller . unmarshal ( ( Reader ) value ) ; return type . cast ( unmarshalled ) ; } return null ; } protected < T > T marshall ( Class < T > type , Object value ) throws JAXBException { if ( parentTypeConverter != null ) { JAXBContext context = createContext ( value . getClass ( ) ) ; JAXBSource source = new JAXBSource ( context , value ) ; T answer = parentTypeConverter . convertTo ( type , source ) ; if ( answer == null ) { StringWriter buffer = new StringWriter ( ) ; Marshaller marshaller = context . createMarshaller ( ) ; marshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , isPrettyPrint ( ) ? Boolean . TRUE : Boolean . FALSE ) ; marshaller . marshal ( value , buffer ) ; return parentTypeConverter . convertTo ( type , buffer . toString ( ) ) ; } return answer ; } return null ; } protected < T > JAXBContext createContext ( Class < T > type ) throws JAXBException { JAXBContext context = JAXBContext . newInstance ( type ) ; return context ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TraceInterceptor extends DelegateProcessor implements ExchangeFormatter { private final ProcessorType node ; private Predicate traceFilter ; private boolean traceExceptions = true ; private Logger logger = new Logger ( LogFactory . getLog ( TraceInterceptor . class ) , this ) ; private TraceFormatter formatter ; public TraceInterceptor ( ProcessorType node , Processor target , TraceFormatter formatter ) { super ( target ) ; this . node = node ; this . formatter = formatter ; } @ Override public String toString ( ) { return "TraceInterceptor[" + node + "]" ; } public void process ( Exchange exchange ) throws Exception { try { if ( shouldLogExchange ( exchange ) ) { logExchange ( exchange ) ; } super . proceed ( exchange ) ; } catch ( Exception e ) { logException ( exchange , e ) ; throw e ; } catch ( Error e ) { logException ( exchange , e ) ; throw e ; } } public Object format ( Exchange exchange ) { return formatter . format ( this , exchange ) ; } public ProcessorType getNode ( ) { return node ; } public Predicate getTraceFilter ( ) { return traceFilter ; } public void setTraceFilter ( Predicate traceFilter ) { this . traceFilter = traceFilter ; } public boolean isTraceExceptions ( ) { return traceExceptions ; } public void setTraceExceptions ( boolean traceExceptions ) { this . traceExceptions = traceExceptions ; } public Logger getLogger ( ) { return logger ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } public LoggingLevel getLevel ( ) { return getLogger ( ) . getLevel ( ) ; } public Log getLog ( ) { return getLogger ( ) . getLog ( ) ; } public void setLog ( Log log ) { getLogger ( ) . setLog ( log ) ; } public void setLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; } protected void logExchange ( Exchange exchange ) { logger . process ( exchange ) ; } protected void logException ( Exchange exchange , Throwable throwable ) { logger . process ( exchange , throwable ) ; } protected boolean shouldLogExchange ( Exchange exchange ) { return traceFilter == null || traceFilter . matches ( exchange ) ; } } 	1
package org . apache . camel . component . mina ; import java . net . SocketAddress ; import org . apache . camel . CamelException ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . mina . common . IoAcceptor ; import org . apache . mina . common . IoHandler ; import org . apache . mina . common . IoHandlerAdapter ; import org . apache . mina . common . IoSession ; public class MinaConsumer extends DefaultConsumer < MinaExchange > { private static final transient Log LOG = LogFactory . getLog ( MinaConsumer . class ) ; private final MinaEndpoint endpoint ; private final SocketAddress address ; private final IoAcceptor acceptor ; public MinaConsumer ( final MinaEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; this . address = endpoint . getAddress ( ) ; this . acceptor = endpoint . getAcceptor ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Binding to server address: " + address + " using acceptor: " + acceptor ) ; } IoHandler handler = new ReceiveHandler ( ) ; acceptor . bind ( address , handler , endpoint . getAcceptorConfig ( ) ) ; } @ Override protected void doStop ( ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unbinding from server address: " + address + " using acceptor: " + acceptor ) ; } acceptor . unbind ( address ) ; super . doStop ( ) ; } private final class ReceiveHandler extends IoHandlerAdapter { @ Override public void exceptionCaught ( IoSession session , Throwable cause ) throws Exception { if ( session != null ) { LOG . debug ( "Closing session as an exception was thrown from MINA" ) ; session . close ( ) ; } throw new CamelException ( cause ) ; } @ Override public void messageReceived ( IoSession session , Object object ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Received body: " + object ) ; } MinaExchange exchange = endpoint . createExchange ( session , object ) ; getProcessor ( ) . process ( exchange ) ; if ( ExchangeHelper . isOutCapable ( exchange ) ) { Object body = MinaPayloadHelper . getOut ( endpoint , exchange ) ; boolean failed = exchange . isFailed ( ) ; if ( failed ) { LOG . warn ( "Can not write body since the exchange is failed, closing session: " + exchange ) ; session . close ( ) ; } else if ( body == null ) { LOG . warn ( "Can not write body since its null, closing session: " + exchange ) ; session . close ( ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Writing body: " + body ) ; } MinaHelper . writeBody ( session , body , exchange ) ; } } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Can not write body since this exchange is not out capable: " + exchange ) ; } } } } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class ValueBuilder < E extends Exchange > implements Expression < E > { private Expression < E > expression ; public ValueBuilder ( Expression < E > expression ) { this . expression = expression ; } public Object evaluate ( E exchange ) { return expression . evaluate ( exchange ) ; } public Expression < E > getExpression ( ) { return expression ; } @ Override public String toString ( ) { return expression . toString ( ) ; } public Predicate < E > isNotEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isNotEqualTo ( expression , right ) ) ; } public Predicate < E > isEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isEqualTo ( expression , right ) ) ; } public Predicate < E > isLessThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThan ( expression , right ) ) ; } public Predicate < E > isLessThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isGreaterThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThan ( expression , right ) ) ; } public Predicate < E > isGreaterThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isInstanceOf ( Class type ) { return onNewPredicate ( PredicateBuilder . isInstanceOf ( expression , type ) ) ; } public Predicate < E > matchesRegex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public Predicate < E > isNull ( ) { return onNewPredicate ( PredicateBuilder . isNull ( expression ) ) ; } public Predicate < E > isNotNull ( ) { return onNewPredicate ( PredicateBuilder . isNotNull ( expression ) ) ; } public Predicate < E > contains ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . contains ( expression , right ) ) ; } public Predicate < E > regex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public ValueBuilder < E > tokenize ( ) { return tokenize ( "\n" ) ; } public ValueBuilder < E > tokenize ( String token ) { Expression < E > newExp = ExpressionBuilder . tokenizeExpression ( expression , token ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexTokenize ( String regex ) { Expression < E > newExp = ExpressionBuilder . regexTokenize ( expression , regex ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , String replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , Expression < E > replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertTo ( Class type ) { Expression < E > newExp = ExpressionBuilder . convertTo ( expression , type ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertToString ( ) { return convertTo ( String . class ) ; } public ValueBuilder < E > append ( Object value ) { return new ValueBuilder < E > ( ExpressionBuilder . append ( expression , asExpression ( value ) ) ) ; } protected Predicate < E > onNewPredicate ( Predicate < E > predicate ) { return predicate ; } protected Expression < E > asExpression ( Object value ) { if ( value instanceof Expression ) { return ( Expression < E > ) value ; } else { return ExpressionBuilder . constantExpression ( value ) ; } } } 	1
package org . apache . camel . component . mina ; import java . net . SocketAddress ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeTimedOutException ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . mina . common . ConnectFuture ; import org . apache . mina . common . IoConnector ; import org . apache . mina . common . IoHandler ; import org . apache . mina . common . IoHandlerAdapter ; import org . apache . mina . common . IoSession ; import org . apache . mina . transport . socket . nio . SocketConnector ; public class MinaProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( MinaProducer . class ) ; private IoSession session ; private MinaEndpoint endpoint ; private CountDownLatch latch ; private boolean lazySessionCreation ; private long timeout ; private IoConnector connector ; private boolean sync ; @ SuppressWarnings ( { "unchecked" } ) public MinaProducer ( MinaEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; this . lazySessionCreation = this . endpoint . isLazySessionCreation ( ) ; this . timeout = this . endpoint . getTimeout ( ) ; } public void process ( Exchange exchange ) throws Exception { if ( session == null && ! lazySessionCreation ) { throw new IllegalStateException ( "Not started yet!" ) ; } if ( session == null || ! session . isConnected ( ) ) { openConnection ( ) ; } Object body = MinaPayloadHelper . getIn ( endpoint , exchange ) ; if ( body == null ) { LOG . warn ( "No payload to send for exchange: " + exchange ) ; return ; } sync = ExchangeHelper . isOutCapable ( exchange ) ; if ( sync ) { latch = new CountDownLatch ( 1 ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Writing body: " + body ) ; } MinaHelper . writeBody ( session , body , exchange ) ; if ( sync ) { LOG . debug ( "Waiting for response" ) ; latch . await ( timeout , TimeUnit . MILLISECONDS ) ; if ( latch . getCount ( ) == 1 ) { throw new ExchangeTimedOutException ( exchange , timeout ) ; } ResponseHandler handler = ( ResponseHandler ) session . getHandler ( ) ; if ( handler . getCause ( ) != null ) { throw new CamelException ( "Response Handler had an exception" , handler . getCause ( ) ) ; } else { MinaPayloadHelper . setOut ( exchange , handler . getMessage ( ) ) ; } } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( ! lazySessionCreation ) { openConnection ( ) ; } } @ Override protected void doStop ( ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Stopping connector: " + connector + " at address: " + endpoint . getAddress ( ) ) ; } if ( connector instanceof SocketConnector ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting SocketConnector WorkerTimeout=0 to force MINA stopping its resources faster" ) ; } ( ( SocketConnector ) connector ) . setWorkerTimeout ( 0 ) ; } if ( session != null ) { session . close ( ) ; } super . doStop ( ) ; } private void openConnection ( ) { SocketAddress address = endpoint . getAddress ( ) ; connector = endpoint . getConnector ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating connector to address: " + address + " using connector: " + connector + " timeout: " + timeout + " millis." ) ; } IoHandler ioHandler = new ResponseHandler ( endpoint ) ; ConnectFuture future = connector . connect ( address , ioHandler , endpoint . getConnectorConfig ( ) ) ; future . join ( ) ; session = future . getSession ( ) ; } private final class ResponseHandler extends IoHandlerAdapter { private MinaEndpoint endpoint ; private Object message ; private Throwable cause ; private ResponseHandler ( MinaEndpoint endpoint ) { this . endpoint = endpoint ; } @ Override public void messageReceived ( IoSession ioSession , Object message ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message received: " + message ) ; } cause = null ; this . message = message ; countDown ( ) ; } protected void countDown ( ) { CountDownLatch downLatch = latch ; if ( downLatch != null ) { downLatch . countDown ( ) ; } } @ Override public void sessionClosed ( IoSession session ) throws Exception { if ( sync && message == null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Session closed but no message received from address: " + this . endpoint . getAddress ( ) ) ; } countDown ( ) ; } } @ Override public void exceptionCaught ( IoSession ioSession , Throwable cause ) { LOG . error ( "Exception on receiving message from address: " + this . endpoint . getAddress ( ) + " using connector: " + this . endpoint . getConnector ( ) , cause ) ; this . message = null ; this . cause = cause ; if ( ioSession != null ) { ioSession . close ( ) ; } } public Throwable getCause ( ) { return this . cause ; } public Object getMessage ( ) { return this . message ; } } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "catch" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CatchType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; public CatchType ( ) { } public CatchType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public CatchType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Catch[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "catch" ; } @ Override public String getLabel ( ) { return getExceptionClasses ( ) . toString ( ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . impl . converter ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . TypeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . TypeConverterAware ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultTypeConverter implements TypeConverter , TypeConverterRegistry { private static final transient Log LOG = LogFactory . getLog ( DefaultTypeConverter . class ) ; private final Map < TypeMapping , TypeConverter > typeMappings = new HashMap < TypeMapping , TypeConverter > ( ) ; private Injector injector ; private List < TypeConverterLoader > typeConverterLoaders = new ArrayList < TypeConverterLoader > ( ) ; private List < TypeConverter > fallbackConverters = new ArrayList < TypeConverter > ( ) ; private boolean loaded ; public DefaultTypeConverter ( Injector injector ) { typeConverterLoaders . add ( new AnnotationTypeConverterLoader ( ) ) ; this . injector = injector ; addFallbackConverter ( new AsyncProcessorTypeConverter ( ) ) ; addFallbackConverter ( new PropertyEditorTypeConverter ( ) ) ; addFallbackConverter ( new ToStringTypeConverter ( ) ) ; addFallbackConverter ( new ArrayTypeConverter ( ) ) ; addFallbackConverter ( new EnumTypeConverter ( ) ) ; } public < T > T convertTo ( Class < T > toType , Object value ) { if ( toType . isInstance ( value ) ) { return toType . cast ( value ) ; } checkLoaded ( ) ; TypeConverter converter = getOrFindTypeConverter ( toType , value ) ; if ( converter != null ) { return converter . convertTo ( toType , value ) ; } for ( TypeConverter fallback : fallbackConverters ) { T rc = fallback . convertTo ( toType , value ) ; if ( rc != null ) { return rc ; } } if ( boolean . class . isAssignableFrom ( toType ) ) { return ( T ) Boolean . FALSE ; } if ( toType . isPrimitive ( ) ) { Class primitiveType = ObjectHelper . convertPrimitiveTypeToWrapperType ( toType ) ; if ( primitiveType != toType ) { return ( T ) convertTo ( primitiveType , value ) ; } } return null ; } public void addTypeConverter ( Class toType , Class fromType , TypeConverter typeConverter ) { TypeMapping key = new TypeMapping ( toType , fromType ) ; synchronized ( typeMappings ) { TypeConverter converter = typeMappings . get ( key ) ; if ( converter != null ) { LOG . warn ( "Overriding type converter from: " + converter + " to: " + typeConverter ) ; } typeMappings . put ( key , typeConverter ) ; } } public void addFallbackConverter ( TypeConverter converter ) { fallbackConverters . add ( converter ) ; if ( converter instanceof TypeConverterAware ) { TypeConverterAware typeConverterAware = ( TypeConverterAware ) converter ; typeConverterAware . setTypeConverter ( this ) ; } } public TypeConverter getTypeConverter ( Class toType , Class fromType ) { TypeMapping key = new TypeMapping ( toType , fromType ) ; synchronized ( typeMappings ) { return typeMappings . get ( key ) ; } } public Injector getInjector ( ) { return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } protected < T > TypeConverter getOrFindTypeConverter ( Class toType , Object value ) { Class fromType = null ; if ( value != null ) { fromType = value . getClass ( ) ; } TypeMapping key = new TypeMapping ( toType , fromType ) ; TypeConverter converter ; synchronized ( typeMappings ) { converter = typeMappings . get ( key ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromType , value ) ; if ( converter != null ) { typeMappings . put ( key , converter ) ; } } } return converter ; } protected TypeConverter findTypeConverter ( Class toType , Class fromType , Object value ) { if ( fromType != null ) { Class fromSuperClass = fromType . getSuperclass ( ) ; if ( fromSuperClass != null && ! fromSuperClass . equals ( Object . class ) ) { TypeConverter converter = getTypeConverter ( toType , fromSuperClass ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromSuperClass , value ) ; } if ( converter != null ) { return converter ; } } for ( Class type : fromType . getInterfaces ( ) ) { TypeConverter converter = getTypeConverter ( toType , type ) ; if ( converter != null ) { return converter ; } } if ( fromType . isArray ( ) && ! fromType . getComponentType ( ) . isPrimitive ( ) ) { if ( ! fromType . equals ( Object [ ] . class ) ) { fromSuperClass = Object [ ] . class ; TypeConverter converter = getTypeConverter ( toType , fromSuperClass ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromSuperClass , value ) ; } if ( converter != null ) { return converter ; } } } if ( ! fromType . equals ( Object . class ) ) { TypeConverter converter = getTypeConverter ( toType , Object . class ) ; if ( converter != null ) { return converter ; } } } if ( fromType != null ) { Set < Map . Entry < TypeMapping , TypeConverter > > entries = typeMappings . entrySet ( ) ; for ( Map . Entry < TypeMapping , TypeConverter > entry : entries ) { TypeMapping key = entry . getKey ( ) ; Class aToType = key . getToType ( ) ; if ( toType . isAssignableFrom ( aToType ) ) { if ( key . getFromType ( ) . isAssignableFrom ( fromType ) ) { return entry . getValue ( ) ; } } } } return null ; } protected synchronized void checkLoaded ( ) { if ( ! loaded ) { loaded = true ; try { for ( TypeConverterLoader typeConverterLoader : typeConverterLoaders ) { typeConverterLoader . load ( this ) ; } try { loadFallbackTypeConverters ( ) ; } catch ( NoFactoryAvailableException e ) { } } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } } protected void loadFallbackTypeConverters ( ) throws IOException , ClassNotFoundException { FactoryFinder finder = new FactoryFinder ( ) ; List < TypeConverter > converters = finder . newInstances ( "FallbackTypeConverter" , getInjector ( ) , TypeConverter . class ) ; for ( TypeConverter converter : converters ) { addFallbackConverter ( converter ) ; } } protected static class TypeMapping { Class toType ; Class fromType ; public TypeMapping ( Class toType , Class fromType ) { this . toType = toType ; this . fromType = fromType ; } public Class getFromType ( ) { return fromType ; } public Class getToType ( ) { return toType ; } @ Override public boolean equals ( Object object ) { if ( object instanceof TypeMapping ) { TypeMapping that = ( TypeMapping ) object ; return ObjectHelper . equal ( this . fromType , that . fromType ) && ObjectHelper . equal ( this . toType , that . toType ) ; } return false ; } @ Override public int hashCode ( ) { int answer = toType . hashCode ( ) ; if ( fromType != null ) { answer *= 37 + fromType . hashCode ( ) ; } return answer ; } @ Override public String toString ( ) { return "[" + fromType + "=>" + toType + "]" ; } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . MarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "marshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public MarshalType ( ) { } public MarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public MarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "marshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new MarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . component . mail ; import java . net . URI ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class MailComponent extends DefaultComponent < MailExchange > { private MailConfiguration configuration ; public MailComponent ( ) { this . configuration = new MailConfiguration ( ) ; } public MailComponent ( MailConfiguration configuration ) { this . configuration = configuration ; } public MailComponent ( CamelContext context ) { super ( context ) ; this . configuration = new MailConfiguration ( ) ; } public static MailComponent mailComponent ( ) { return new MailComponent ( ) ; } public static MailComponent mailComponent ( MailConfiguration configuration ) { return new MailComponent ( configuration ) ; } @ Override protected Endpoint < MailExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { URI url = new URI ( uri ) ; if ( "nntp" . equalsIgnoreCase ( url . getScheme ( ) ) ) { throw new UnsupportedOperationException ( "nntp protocol is not supported" ) ; } MailConfiguration config = new MailConfiguration ( ) ; config . configure ( url ) ; MailEndpoint endpoint = new MailEndpoint ( uri , this , config ) ; setProperties ( endpoint . getConfiguration ( ) , parameters ) ; return endpoint ; } public MailConfiguration getConfiguration ( ) { return configuration ; } public void setConfiguration ( MailConfiguration configuration ) { this . configuration = configuration ; } protected String convertPathToActualDestination ( String path ) { return path ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . RejectedExecutionHandler ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ServiceHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class MulticastProcessor extends ServiceSupport implements Processor { static class ProcessorExchangePair { private final Processor processor ; private final Exchange exchange ; public ProcessorExchangePair ( Processor processor , Exchange exchange ) { this . processor = processor ; this . exchange = exchange ; } public Processor getProcessor ( ) { return processor ; } public Exchange getExchange ( ) { return exchange ; } } private Collection < Processor > processors ; private AggregationStrategy aggregationStrategy ; private boolean isParallelProcessing ; private ThreadPoolExecutor executor ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; public MulticastProcessor ( Collection < Processor > processors ) { this ( processors , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy ) { this ( processors , aggregationStrategy , false , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor executor ) { notNull ( processors , "processors" ) ; this . processors = processors ; this . aggregationStrategy = aggregationStrategy ; this . isParallelProcessing = parallelProcessing ; if ( isParallelProcessing ) { if ( executor != null ) { this . executor = executor ; } else { this . executor = new ThreadPoolExecutor ( processors . size ( ) , processors . size ( ) , 0 , TimeUnit . MILLISECONDS , new ArrayBlockingQueue < Runnable > ( processors . size ( ) ) ) ; } } } public static < E extends Exchange > Collection < Processor > toProducers ( Collection < Endpoint > endpoints ) throws Exception { Collection < Processor > answer = new ArrayList < Processor > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint . createProducer ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Multicast" + getProcessors ( ) ; } class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; private final Processor processor ; public ProcessCall ( Exchange exchange , Processor processor , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; this . processor = processor ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; callback . done ( false ) ; } else { try { processor . process ( exchange ) ; } catch ( Exception ex ) { exchange . setException ( ex ) ; } callback . done ( false ) ; } } } public void process ( Exchange exchange ) throws Exception { Exchange result = null ; List < ProcessorExchangePair > pairs = createProcessorExchangePairs ( exchange ) ; if ( isParallelProcessing ) { Exchange [ ] exchanges = new Exchange [ pairs . size ( ) ] ; final CountDownLatch completedExchanges = new CountDownLatch ( pairs . size ( ) ) ; int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; exchanges [ i ] = pair . getExchange ( ) ; updateNewExchange ( exchanges [ i ] , i , pairs ) ; ProcessCall call = new ProcessCall ( exchanges [ i ] , producer , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { completedExchanges . countDown ( ) ; } } ) ; executor . execute ( call ) ; i ++ ; } completedExchanges . await ( ) ; if ( aggregationStrategy != null ) { for ( Exchange resultExchange : exchanges ) { if ( result == null ) { result = resultExchange ; } else { result = aggregationStrategy . aggregate ( result , resultExchange ) ; } } } } else { int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; Exchange subExchange = pair . getExchange ( ) ; updateNewExchange ( subExchange , i , pairs ) ; producer . process ( subExchange ) ; if ( aggregationStrategy != null ) { if ( result == null ) { result = subExchange ; } else { result = aggregationStrategy . aggregate ( result , subExchange ) ; } } i ++ ; } } if ( result != null ) { ExchangeHelper . copyResults ( exchange , result ) ; } } protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { } protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { List < ProcessorExchangePair > result = new ArrayList < ProcessorExchangePair > ( processors . size ( ) ) ; Processor [ ] processorsArray = processors . toArray ( new Processor [ processors . size ( ) ] ) ; for ( int i = 0 ; i < processorsArray . length ; i ++ ) { result . add ( new ProcessorExchangePair ( processorsArray [ i ] , exchange . copy ( ) ) ) ; } return result ; } protected void doStop ( ) throws Exception { shutdown . set ( true ) ; if ( executor != null ) { executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } ServiceHelper . stopServices ( processors ) ; } protected void doStart ( ) throws Exception { shutdown . set ( false ) ; if ( executor != null ) { executor . setRejectedExecutionHandler ( new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor executor ) { ProcessCall call = ( ProcessCall ) runnable ; call . exchange . setException ( new RejectedExecutionException ( ) ) ; call . callback . done ( false ) ; } } ) ; } ServiceHelper . startServices ( processors ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } } 	1
package org . apache . camel . language . groovy ; import groovy . lang . GroovyShell ; import org . apache . camel . CamelContext ; import org . apache . camel . builder . RouteBuilder ; public abstract class GroovyRouteBuilder extends RouteBuilder { public GroovyRouteBuilder ( ) { init ( ) ; } public GroovyRouteBuilder ( CamelContext context ) { super ( context ) ; init ( ) ; } private void init ( ) { ClassLoader loader = getClass ( ) . getClassLoader ( ) ; GroovyShell shell = new GroovyShell ( loader ) ; shell . evaluate ( loader . getResourceAsStream ( "org/apache/camel/language/groovy/ConfigureCamel.groovy" ) ) ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import javax . naming . Context ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . management . InstrumentationLifecycleStrategy ; import org . apache . camel . management . JmxSystemPropertyKeys ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . interceptor . Tracer ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ReflectionInjector ; import org . apache . camel . util . SystemHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; public class DefaultCamelContext extends ServiceSupport implements CamelContext , Service { private static final transient Log LOG = LogFactory . getLog ( DefaultCamelContext . class ) ; private static final String NAME_PREFIX = "camel-" ; private static int nameSuffix ; private String name ; private final Map < String , Endpoint > endpoints = new HashMap < String , Endpoint > ( ) ; private final Map < String , Component > components = new HashMap < String , Component > ( ) ; private List < Route > routes ; private List < Service > servicesToClose = new ArrayList < Service > ( ) ; private TypeConverter typeConverter ; private ExchangeConverter exchangeConverter ; private Injector injector ; private ComponentResolver componentResolver ; private boolean autoCreateComponents = true ; private LanguageResolver languageResolver = new DefaultLanguageResolver ( ) ; private Registry registry ; private LifecycleStrategy lifecycleStrategy ; private List < RouteType > routeDefinitions = new ArrayList < RouteType > ( ) ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private Boolean trace ; private ErrorHandlerBuilder errorHandlerBuilder ; public DefaultCamelContext ( ) { name = NAME_PREFIX + ++ nameSuffix ; if ( Boolean . getBoolean ( JmxSystemPropertyKeys . DISABLED ) ) { LOG . info ( "JMX is disabled. Using DefaultLifecycleStrategy." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } else { try { LOG . info ( "JMX enabled. Using InstrumentationLifecycleStrategy." ) ; lifecycleStrategy = new InstrumentationLifecycleStrategy ( ) ; } catch ( NoClassDefFoundError e ) { LOG . warn ( "Could not find needed classes for JMX lifecycle strategy." + " Are you missing spring-context.jar by any chance? NoClassDefFoundError: " + e . getMessage ( ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not create JMX lifecycle strategy, caused by: " + e . getMessage ( ) ) ; } if ( lifecycleStrategy == null ) { LOG . warn ( "Not possible to use JMX lifecycle strategy. Using DefaultLifecycleStrategy instead." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } } } public DefaultCamelContext ( Context jndiContext ) { this ( new JndiRegistry ( jndiContext ) ) ; } public DefaultCamelContext ( Registry registry ) { this ( ) ; this . registry = registry ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public void addComponent ( String componentName , final Component component ) { if ( component == null ) { throw new IllegalArgumentException ( "Component cannot be null" ) ; } synchronized ( components ) { if ( components . containsKey ( componentName ) ) { throw new IllegalArgumentException ( "Component previously added: " + componentName ) ; } component . setCamelContext ( this ) ; components . put ( componentName , component ) ; } } public Component getComponent ( String name ) { synchronized ( components ) { Component component = components . get ( name ) ; if ( component == null && autoCreateComponents ) { try { component = getComponentResolver ( ) . resolveComponent ( name , this ) ; if ( component != null ) { addComponent ( name , component ) ; if ( isStarted ( ) ) { startServices ( component ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( "Could not auto create component: " + name , e ) ; } } return component ; } } public < T extends Component > T getComponent ( String name , Class < T > componentType ) { Component component = getComponent ( name ) ; if ( componentType . isInstance ( component ) ) { return componentType . cast ( component ) ; } else { throw new IllegalArgumentException ( "The component is not of type: " + componentType + " but is: " + component ) ; } } public Component removeComponent ( String componentName ) { synchronized ( components ) { return components . remove ( componentName ) ; } } public Component getOrCreateComponent ( String componentName , Callable < Component > factory ) { synchronized ( components ) { Component component = components . get ( componentName ) ; if ( component == null ) { try { component = factory . call ( ) ; if ( component == null ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component, it returned null." ) ; } components . put ( componentName , component ) ; component . setCamelContext ( this ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component" , e ) ; } } return component ; } } public Collection < Endpoint > getSingletonEndpoints ( ) { synchronized ( endpoints ) { return new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } } public Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { startServices ( endpoint ) ; oldEndpoint = endpoints . remove ( uri ) ; endpoints . put ( uri , endpoint ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint removeSingletonEndpoint ( String uri ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { oldEndpoint = endpoints . remove ( uri ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint getEndpoint ( String uri ) { Endpoint answer ; synchronized ( endpoints ) { answer = endpoints . get ( uri ) ; if ( answer == null ) { try { String splitURI [ ] = ObjectHelper . splitOnCharacter ( uri , ":" , 2 ) ; if ( splitURI [ 1 ] != null ) { String scheme = splitURI [ 0 ] ; Component component = getComponent ( scheme ) ; if ( component != null ) { answer = component . createEndpoint ( uri ) ; if ( answer != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( uri + " converted to endpoint: " + answer + " by component: " + component ) ; } } } if ( answer == null ) { answer = createEndpoint ( uri ) ; } if ( answer != null ) { addService ( answer ) ; if ( answer . isSingleton ( ) ) { endpoints . put ( uri , answer ) ; lifecycleStrategy . onEndpointAdd ( answer ) ; } } } catch ( Exception e ) { LOG . debug ( "Failed to resolve endpoint " + uri + ". Reason: " + e , e ) ; throw new ResolveEndpointFailedException ( uri , e ) ; } } } return answer ; } public < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) { Endpoint endpoint = getEndpoint ( name ) ; if ( endpointType . isInstance ( endpoint ) ) { return endpointType . cast ( endpoint ) ; } else { throw new IllegalArgumentException ( "The endpoint is not of type: " + endpointType + " but is: " + endpoint ) ; } } public List < Route > getRoutes ( ) { if ( routes == null ) { routes = new ArrayList < Route > ( ) ; } return routes ; } public void setRoutes ( List < Route > routes ) { this . routes = routes ; } public void addRoutes ( Collection < Route > routes ) throws Exception { if ( this . routes == null ) { this . routes = new ArrayList < Route > ( routes ) ; } else { this . routes . addAll ( routes ) ; } lifecycleStrategy . onRoutesAdd ( routes ) ; if ( shouldStartRoutes ( ) ) { startRoutes ( routes ) ; } } public void addRoutes ( Routes builder ) throws Exception { builder . setContext ( this ) ; List < Route > routeList = builder . getRouteList ( ) ; LOG . debug ( "Adding routes from: " + builder + " routes: " + routeList ) ; addRoutes ( routeList ) ; } public void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception { this . routeDefinitions . addAll ( routeDefinitions ) ; if ( shouldStartRoutes ( ) ) { startRouteDefinitions ( routeDefinitions ) ; } } public void addService ( Object object ) throws Exception { if ( object instanceof Service ) { Service service = ( Service ) object ; service . start ( ) ; servicesToClose . add ( service ) ; } } public Language resolveLanguage ( String language ) { return getLanguageResolver ( ) . resolveLanguage ( language , this ) ; } public ExchangeConverter getExchangeConverter ( ) { if ( exchangeConverter == null ) { exchangeConverter = createExchangeConverter ( ) ; } return exchangeConverter ; } public void setExchangeConverter ( ExchangeConverter exchangeConverter ) { this . exchangeConverter = exchangeConverter ; } public TypeConverter getTypeConverter ( ) { if ( typeConverter == null ) { typeConverter = createTypeConverter ( ) ; } return typeConverter ; } public void setTypeConverter ( TypeConverter typeConverter ) { this . typeConverter = typeConverter ; } public Injector getInjector ( ) { if ( injector == null ) { injector = createInjector ( ) ; } return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } public ComponentResolver getComponentResolver ( ) { if ( componentResolver == null ) { componentResolver = createComponentResolver ( ) ; } return componentResolver ; } public void setComponentResolver ( ComponentResolver componentResolver ) { this . componentResolver = componentResolver ; } public LanguageResolver getLanguageResolver ( ) { return languageResolver ; } public void setLanguageResolver ( LanguageResolver languageResolver ) { this . languageResolver = languageResolver ; } public boolean isAutoCreateComponents ( ) { return autoCreateComponents ; } public void setAutoCreateComponents ( boolean autoCreateComponents ) { this . autoCreateComponents = autoCreateComponents ; } public Registry getRegistry ( ) { if ( registry == null ) { registry = createRegistry ( ) ; } return registry ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public LifecycleStrategy getLifecycleStrategy ( ) { return lifecycleStrategy ; } public void setLifecycleStrategy ( LifecycleStrategy lifecycleStrategy ) { this . lifecycleStrategy = lifecycleStrategy ; } public List < RouteType > getRouteDefinitions ( ) { return routeDefinitions ; } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public boolean getTrace ( ) { final Boolean value = getTracing ( ) ; if ( value != null ) { return value ; } else { return SystemHelper . isSystemProperty ( "canel.trace" ) ; } } public Boolean getTracing ( ) { return trace ; } public void setTrace ( Boolean trace ) { this . trace = trace ; } public < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) { return new DefaultProducerTemplate < E > ( this ) ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void doStart ( ) throws Exception { if ( getTrace ( ) ) { boolean found = false ; final List < InterceptStrategy > list = getInterceptStrategies ( ) ; for ( InterceptStrategy strategy : list ) { if ( strategy instanceof Tracer ) { found = true ; } } if ( ! found ) { addInterceptStrategy ( new Tracer ( ) ) ; } } lifecycleStrategy . onContextStart ( this ) ; forceLazyInitialization ( ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { startServices ( component ) ; } } startRouteDefinitions ( routeDefinitions ) ; startRoutes ( routes ) ; } protected void startRouteDefinitions ( Collection < RouteType > list ) throws Exception { if ( list != null ) { Collection < Route > routes = new ArrayList < Route > ( ) ; for ( RouteType route : list ) { route . addRoutes ( this , routes ) ; } addRoutes ( routes ) ; } } protected void doStop ( ) throws Exception { stopServices ( servicesToClose ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { stopServices ( component ) ; } } } protected void startRoutes ( Collection < Route > routeList ) throws Exception { if ( routeList != null ) { for ( Route < Exchange > route : routeList ) { List < Service > services = route . getServicesForRoute ( ) ; for ( Service service : services ) { addService ( service ) ; } } } } protected void forceLazyInitialization ( ) { getExchangeConverter ( ) ; getInjector ( ) ; getLanguageResolver ( ) ; getTypeConverter ( ) ; } protected ExchangeConverter createExchangeConverter ( ) { return new DefaultExchangeConverter ( ) ; } protected TypeConverter createTypeConverter ( ) { return new DefaultTypeConverter ( getInjector ( ) ) ; } protected Injector createInjector ( ) { FactoryFinder finder = new FactoryFinder ( ) ; try { return ( Injector ) finder . newInstance ( "Injector" ) ; } catch ( NoFactoryAvailableException e ) { return new ReflectionInjector ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } protected ComponentResolver createComponentResolver ( ) { return new DefaultComponentResolver ( ) ; } protected Registry createRegistry ( ) { return new JndiRegistry ( ) ; } protected Endpoint createEndpoint ( String uri ) { Object value = getRegistry ( ) . lookup ( uri ) ; if ( value instanceof Endpoint ) { return ( Endpoint ) value ; } else if ( value instanceof Processor ) { return new ProcessorEndpoint ( uri , this , ( Processor ) value ) ; } else if ( value != null ) { return convertBeanToEndpoint ( uri , value ) ; } return null ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { throw new IllegalArgumentException ( "uri: " + uri + " bean: " + bean + " could not be converted to an Endpoint" ) ; } protected boolean shouldStartRoutes ( ) { return isStarted ( ) && ! isStarting ( ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . concurrent . ScheduledExecutorService ; import com . jcraft . jsch . ChannelSftp ; import com . jcraft . jsch . JSchException ; import com . jcraft . jsch . Session ; import com . jcraft . jsch . SftpException ; import org . apache . camel . Processor ; import org . apache . camel . component . file . FileComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SftpConsumer extends RemoteFileConsumer < RemoteFileExchange > { private static final transient Log LOG = LogFactory . getLog ( SftpConsumer . class ) ; private final SftpEndpoint endpoint ; private boolean recursive = true ; private String regexPattern = "" ; private long lastPollTime ; private ChannelSftp channel ; private Session session ; private boolean setNames ; public SftpConsumer ( SftpEndpoint endpoint , Processor processor , Session session ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; this . session = session ; } public SftpConsumer ( SftpEndpoint endpoint , Processor processor , Session session , ScheduledExecutorService executor ) { super ( endpoint , processor , executor ) ; this . endpoint = endpoint ; this . session = session ; } protected void connectIfNecessary ( ) throws JSchException { if ( channel == null || ! channel . isConnected ( ) ) { if ( session == null || ! session . isConnected ( ) ) { LOG . info ( "Session isn't connected, trying to recreate and connect..." ) ; session = endpoint . createSession ( ) ; session . connect ( ) ; } LOG . info ( "Channel isn't connected, trying to recreate and connect..." ) ; channel = endpoint . createChannelSftp ( session ) ; channel . connect ( ) ; LOG . info ( "Connected to " + endpoint . getConfiguration ( ) . toString ( ) ) ; } } protected void disconnect ( ) throws JSchException { if ( session != null ) { LOG . info ( "Session is being explicitly disconnected" ) ; session . disconnect ( ) ; } if ( channel != null ) { LOG . info ( "Channel is being explicitly disconnected" ) ; channel . disconnect ( ) ; } } protected void poll ( ) throws Exception { connectIfNecessary ( ) ; try { final String fileName = endpoint . getConfiguration ( ) . getFile ( ) ; if ( endpoint . getConfiguration ( ) . isDirectory ( ) ) { pollDirectory ( fileName ) ; } else { channel . cd ( fileName . substring ( 0 , fileName . lastIndexOf ( '/' ) ) ) ; final ChannelSftp . LsEntry file = ( ChannelSftp . LsEntry ) channel . ls ( fileName . substring ( fileName . lastIndexOf ( '/' ) + 1 ) ) . get ( 0 ) ; pollFile ( file ) ; } lastPollTime = System . currentTimeMillis ( ) ; } catch ( JSchException e ) { LOG . warn ( "Disconnecting due to exception: " + e . toString ( ) ) ; disconnect ( ) ; throw e ; } catch ( SftpException e ) { LOG . warn ( "Caught SftpException:" + e . toString ( ) ) ; LOG . warn ( "Doing nothing for now, need to determine an appropriate action" ) ; throw e ; } } protected void pollDirectory ( String dir ) throws Exception { channel . cd ( dir ) ; for ( ChannelSftp . LsEntry sftpFile : ( ChannelSftp . LsEntry [ ] ) channel . ls ( "." ) . toArray ( new ChannelSftp . LsEntry [ ] { } ) ) { if ( sftpFile . getFilename ( ) . startsWith ( "." ) ) { } else if ( sftpFile . getAttrs ( ) . isDir ( ) ) { if ( isRecursive ( ) ) { pollDirectory ( getFullFileName ( sftpFile ) ) ; } } else { pollFile ( sftpFile ) ; } } } protected String getFullFileName ( ChannelSftp . LsEntry sftpFile ) throws IOException , SftpException { return channel . pwd ( ) + "/" + sftpFile . getFilename ( ) ; } private void pollFile ( ChannelSftp . LsEntry sftpFile ) throws Exception { if ( sftpFile . getAttrs ( ) . getMTime ( ) * 1000L > lastPollTime ) { if ( isMatched ( sftpFile ) ) { final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; channel . get ( sftpFile . getFilename ( ) , byteArrayOutputStream ) ; RemoteFileExchange exchange = endpoint . createExchange ( getFullFileName ( sftpFile ) , byteArrayOutputStream ) ; if ( isSetNames ( ) ) { String relativePath = getFullFileName ( sftpFile ) . substring ( endpoint . getConfiguration ( ) . getFile ( ) . length ( ) ) ; if ( relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } exchange . getIn ( ) . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } getProcessor ( ) . process ( exchange ) ; } } } protected boolean isMatched ( ChannelSftp . LsEntry sftpFile ) { boolean result = true ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { result = sftpFile . getFilename ( ) . matches ( getRegexPattern ( ) ) ; } return result ; } public boolean isRecursive ( ) { return recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public long getLastPollTime ( ) { return lastPollTime ; } public void setLastPollTime ( long lastPollTime ) { this . lastPollTime = lastPollTime ; } public String getRegexPattern ( ) { return regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isSetNames ( ) { return setNames ; } public void setSetNames ( boolean setNames ) { this . setNames = setNames ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class Builder { private Builder ( ) { } public static < E extends Exchange > ValueBuilder < E > constant ( Object value ) { Expression < E > expression = ExpressionBuilder . constantExpression ( value ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > header ( String name ) { Expression < E > expression = ExpressionBuilder . headerExpression ( name ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > body ( ) { Expression < E > expression = ExpressionBuilder . bodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > bodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > bodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > outBody ( ) { Expression < E > expression = ExpressionBuilder . outBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > outBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > outBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > faultBody ( ) { Expression < E > expression = ExpressionBuilder . faultBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > faultBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > faultBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name , final String defaultValue ) { return new ValueBuilder < E > ( ExpressionBuilder . < E > systemProperty ( name , defaultValue ) ) ; } } 	1
package org . apache . camel . spring ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultProducerTemplate ; import org . apache . camel . model . IdentifiedType ; import org . springframework . beans . factory . FactoryBean ; import org . springframework . beans . factory . InitializingBean ; @ XmlRootElement ( name = "template" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CamelTemplateFactoryBean extends IdentifiedType implements FactoryBean , InitializingBean , CamelContextAware { @ XmlAttribute ( required = false ) private String defaultEndpoint ; @ XmlTransient private CamelContext camelContext ; public void afterPropertiesSet ( ) throws Exception { if ( camelContext == null ) { throw new IllegalArgumentException ( "A CamelContext must be injected!" ) ; } } public Object getObject ( ) throws Exception { CamelContext context = getCamelContext ( ) ; if ( defaultEndpoint != null ) { Endpoint endpoint = context . getEndpoint ( defaultEndpoint ) ; if ( endpoint == null ) { throw new IllegalArgumentException ( "No endpoint found for URI: " + defaultEndpoint ) ; } else { return new DefaultProducerTemplate ( context , endpoint ) ; } } return new DefaultProducerTemplate ( context ) ; } public Class getObjectType ( ) { return DefaultProducerTemplate . class ; } public boolean isSingleton ( ) { return true ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public String getDefaultEndpoint ( ) { return defaultEndpoint ; } public void setDefaultEndpoint ( String defaultEndpoint ) { this . defaultEndpoint = defaultEndpoint ; } } 	0
package org . apache . camel . component . log ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . ThroughputLogger ; public class LogComponent extends DefaultComponent < Exchange > { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { LoggingLevel level = getLoggingLevel ( parameters ) ; Integer groupSize = getAndRemoveParameter ( parameters , "groupSize" , Integer . class ) ; Logger logger ; if ( groupSize != null ) { logger = new ThroughputLogger ( remaining , level , ObjectConverter . toInteger ( groupSize ) ) ; } else { LogFormatter formatter = new LogFormatter ( ) ; IntrospectionSupport . setProperties ( formatter , parameters ) ; logger = new Logger ( remaining ) ; logger . setLevel ( level ) ; logger . setFormatter ( formatter ) ; } return new ProcessorEndpoint ( uri , this , logger ) ; } protected LoggingLevel getLoggingLevel ( Map parameters ) { String levelText = getAndRemoveParameter ( parameters , "level" , String . class , "INFO" ) ; return LoggingLevel . valueOf ( levelText . toUpperCase ( ) ) ; } } 	1
package org . apache . camel . component . xslt ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . builder . xml . XsltBuilder ; import org . apache . camel . component . ResourceBasedComponent ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . camel . impl . ProcessorEndpoint ; import org . springframework . core . io . Resource ; public class XsltComponent extends ResourceBasedComponent { private XmlConverter xmlConverter ; public XmlConverter getXmlConverter ( ) { return xmlConverter ; } public void setXmlConverter ( XmlConverter xmlConverter ) { this . xmlConverter = xmlConverter ; } protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { Resource resource = resolveMandatoryResource ( remaining ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( this + " using schema resource: " + resource ) ; } XsltBuilder xslt = newInstance ( XsltBuilder . class ) ; XmlConverter converter = null ; String converterName = getAndRemoveParameter ( parameters , "converter" , String . class ) ; if ( converterName != null ) { converter = mandatoryLookup ( converterName , XmlConverter . class ) ; } if ( converter == null ) { converter = getXmlConverter ( ) ; } if ( converter != null ) { xslt . setConverter ( converter ) ; } xslt . setTransformerInputStream ( resource . getInputStream ( ) ) ; configureXslt ( xslt , uri , remaining , parameters ) ; return new ProcessorEndpoint ( uri , this , xslt ) ; } protected void configureXslt ( XsltBuilder xslt , String uri , String remaining , Map parameters ) throws Exception { setProperties ( xslt , parameters ) ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . Externalizable ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . Reader ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import javax . xml . transform . stream . StreamSource ; public class StringSource extends StreamSource implements Externalizable { private String text ; private String encoding = "UTF-8" ; public StringSource ( ) { } public StringSource ( String text ) { if ( text == null ) { throw new NullPointerException ( "text can not be null" ) ; } this . text = text ; } public StringSource ( String text , String systemId ) { this ( text ) ; setSystemId ( systemId ) ; } public StringSource ( String text , String systemId , String encoding ) { this . text = text ; this . encoding = encoding ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { try { return new ByteArrayInputStream ( text . getBytes ( encoding ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } public Reader getReader ( ) { return new StringReader ( text ) ; } public String toString ( ) { return "StringSource[" + text + "]" ; } public String getText ( ) { return text ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public void setText ( String text ) { this . text = text ; } public void writeExternal ( ObjectOutput out ) throws IOException { out . writeUTF ( text ) ; out . writeUTF ( encoding ) ; out . writeUTF ( getPublicId ( ) ) ; out . writeUTF ( getSystemId ( ) ) ; } public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { text = in . readUTF ( ) ; encoding = in . readUTF ( ) ; setPublicId ( in . readUTF ( ) ) ; setSystemId ( in . readUTF ( ) ) ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface Body { } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ConvertBodyProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( ConvertBodyProcessor . class ) ; private final Class type ; public ConvertBodyProcessor ( Class type ) { this . type = type ; } public void process ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object value = in . getBody ( type ) ; if ( value == null ) { LOG . warn ( "Could not convert body of IN message: " + in + " to type: " + type . getName ( ) ) ; } if ( exchange . getPattern ( ) . isOutCapable ( ) ) { Message out = exchange . getOut ( ) ; out . copyFrom ( in ) ; out . setBody ( value ) ; } else { in . setBody ( value ) ; } } } 	1
package org . apache . camel . bam . processor ; import java . util . Date ; import java . util . List ; import javax . persistence . EntityManager ; import javax . persistence . LockModeType ; import javax . persistence . PersistenceException ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . rules . ProcessRules ; import org . apache . camel . impl . ServiceSupport ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . orm . jpa . JpaCallback ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallbackWithoutResult ; import org . springframework . transaction . support . TransactionTemplate ; public class ActivityMonitorEngine extends ServiceSupport implements Runnable { private static final Log LOG = LogFactory . getLog ( ActivityMonitorEngine . class ) ; private JpaTemplate template ; private TransactionTemplate transactionTemplate ; private ProcessRules rules ; private int escalateLevel ; private long windowMillis = 1000L ; private Thread thread ; private boolean useLocking ; public ActivityMonitorEngine ( JpaTemplate template , TransactionTemplate transactionTemplate , ProcessRules rules ) { this . template = template ; this . transactionTemplate = transactionTemplate ; this . rules = rules ; } public boolean isUseLocking ( ) { return useLocking ; } public void setUseLocking ( boolean useLocking ) { this . useLocking = useLocking ; } public void run ( ) { LOG . debug ( "Starting to poll for timeout events" ) ; while ( ! isStopped ( ) ) { try { long now = System . currentTimeMillis ( ) ; long nextPoll = now + windowMillis ; final Date timeNow = new Date ( now ) ; transactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { protected void doInTransactionWithoutResult ( TransactionStatus status ) { List < ActivityState > list = template . find ( "select x from " + ActivityState . class . getName ( ) + " x where x.timeOverdue < ?1" , timeNow ) ; for ( ActivityState activityState : list ) { fireExpiredEvent ( activityState ) ; } } } ) ; long timeToSleep = nextPoll - System . currentTimeMillis ( ) ; if ( timeToSleep > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for " + timeToSleep + " millis" ) ; } try { Thread . sleep ( timeToSleep ) ; } catch ( InterruptedException e ) { LOG . debug ( "Caught: " + e , e ) ; } } } catch ( Exception e ) { LOG . error ( "Caught: " + e , e ) ; } } } protected void fireExpiredEvent ( final ActivityState activityState ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Trying to fire expiration of: " + activityState ) ; } template . execute ( new JpaCallback ( ) { public Object doInJpa ( EntityManager entityManager ) throws PersistenceException { if ( isUseLocking ( ) ) { LOG . info ( "Attempting to lock: " + activityState ) ; entityManager . lock ( activityState , LockModeType . WRITE ) ; LOG . info ( "Grabbed lock: " + activityState ) ; } try { rules . processExpired ( activityState ) ; } catch ( Exception e ) { LOG . error ( "Failed to process expiration of: " + activityState + ". Reason: " + e , e ) ; } activityState . setTimeOverdue ( null ) ; return null ; } } ) ; } protected void doStart ( ) throws Exception { rules . start ( ) ; thread = new Thread ( this , "ActivityMonitorEngine" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { if ( thread != null ) { thread = null ; } rules . stop ( ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . spi . Synchronization ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultUnitOfWork implements UnitOfWork { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; private String id ; private List < Synchronization > synchronizations ; private List < AsyncCallback > asyncCallbacks ; private CountDownLatch latch ; public DefaultUnitOfWork ( ) { } public synchronized void addSynchronization ( Synchronization synchronization ) { if ( synchronizations == null ) { synchronizations = new ArrayList < Synchronization > ( ) ; } synchronizations . add ( synchronization ) ; } public synchronized void removeSynchronization ( Synchronization synchronization ) { if ( synchronizations != null ) { synchronizations . remove ( synchronization ) ; } } public void reset ( ) { } public void done ( Exchange exchange ) { if ( synchronizations != null ) { boolean failed = exchange . isFailed ( ) ; for ( Synchronization synchronization : synchronizations ) { if ( failed ) { synchronization . onFailure ( exchange ) ; } else { synchronization . onComplete ( exchange ) ; } } } } public boolean isSynchronous ( ) { return asyncCallbacks == null || asyncCallbacks . isEmpty ( ) ; } public String getId ( ) { if ( id == null ) { id = DEFAULT_ID_GENERATOR . generateId ( ) ; } return id ; } } 	1
package org . apache . camel ; public interface Expression < E extends Exchange > { Object evaluate ( E exchange ) ; } 	0
package org . apache . camel . model ; public class NodeFactory { public FilterType createFilter ( ) { return new FilterType ( ) ; } public RouteType createRoute ( ) { return new RouteType ( ) ; } } 	1
package org . apache . camel . impl ; import java . util . Hashtable ; import javax . naming . Context ; import javax . naming . InitialContext ; import javax . naming . NameNotFoundException ; import javax . naming . NamingException ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . Registry ; public class JndiRegistry implements Registry { private Context context ; public JndiRegistry ( ) { } public JndiRegistry ( Context context ) { this . context = context ; } public < T > T lookup ( String name , Class < T > type ) { Object value = lookup ( name ) ; return type . cast ( value ) ; } public Object lookup ( String name ) { try { return getContext ( ) . lookup ( name ) ; } catch ( NameNotFoundException e ) { return null ; } catch ( NamingException e ) { return null ; } } public void bind ( String s , Object o ) { try { getContext ( ) . bind ( s , o ) ; } catch ( NamingException e ) { throw new RuntimeCamelException ( e ) ; } } public void close ( ) throws NamingException { getContext ( ) . close ( ) ; } public Context getContext ( ) throws NamingException { if ( context == null ) { context = createContext ( ) ; } return context ; } public void setContext ( Context context ) { this . context = context ; } protected Context createContext ( ) throws NamingException { Hashtable properties = new Hashtable ( System . getProperties ( ) ) ; return new InitialContext ( properties ) ; } } 	0
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class BeanExchange extends DefaultExchange { public BeanExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public BeanExchange ( DefaultExchange parent ) { super ( parent ) ; } public BeanInvocation getInvocation ( ) { return getIn ( ) . getBody ( BeanInvocation . class ) ; } public void setInvocation ( BeanInvocation invocation ) { getIn ( ) . setBody ( invocation ) ; } @ Override public Exchange newInstance ( ) { return new BeanExchange ( this ) ; } } 	1
package org . apache . camel . component . cxf ; import java . io . OutputStream ; import javax . xml . transform . Source ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . component . cxf . util . CxfEndpointUtils ; import org . apache . camel . component . cxf . util . NullConduit ; import org . apache . camel . component . cxf . util . NullDestinationFactory ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . cxf . Bus ; import org . apache . cxf . endpoint . Server ; import org . apache . cxf . frontend . ServerFactoryBean ; import org . apache . cxf . interceptor . InterceptorChain ; import org . apache . cxf . interceptor . OutgoingChainInterceptor ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . transport . MessageObserver ; public class CxfSoapConsumer implements Consumer { private static final Log LOG = LogFactory . getLog ( CxfSoapConsumer . class ) ; private final CxfSoapEndpoint endpoint ; private final Consumer consumer ; private MessageObserver inMessageObserver ; private Server server ; public CxfSoapConsumer ( CxfSoapEndpoint endpoint , Processor processor ) throws Exception { this . endpoint = endpoint ; Processor soapProcessor = new AsyncProcessorDecorator ( processor , new Processor ( ) { public void process ( Exchange exchange ) throws Exception { processSoapConsumerIn ( exchange ) ; } } , new Processor ( ) { public void process ( Exchange exchange ) throws Exception { processSoapConsumerOut ( exchange ) ; } } ) ; this . consumer = endpoint . getInnerEndpoint ( ) . createConsumer ( soapProcessor ) ; Class sei = CxfEndpointUtils . getSEIClass ( endpoint . getServiceClass ( ) ) ; ServerFactoryBean sfb = CxfEndpointUtils . getServerFactoryBean ( sei ) ; sfb . setWsdlURL ( endpoint . getWsdl ( ) . getURL ( ) . toString ( ) ) ; if ( endpoint . getServiceName ( ) != null ) { sfb . setServiceName ( endpoint . getServiceName ( ) ) ; } if ( endpoint . getEndpointName ( ) != null ) { sfb . setEndpointName ( endpoint . getEndpointName ( ) ) ; } sfb . setDestinationFactory ( new NullDestinationFactory ( ) ) ; sfb . setStart ( false ) ; server = sfb . create ( ) ; } public void start ( ) throws Exception { server . start ( ) ; inMessageObserver = server . getDestination ( ) . getMessageObserver ( ) ; consumer . start ( ) ; } public void stop ( ) throws Exception { server . stop ( ) ; consumer . stop ( ) ; } protected Bus getBus ( ) { return endpoint . getBus ( ) ; } protected void processSoapConsumerIn ( Exchange exchange ) throws Exception { LOG . info ( "processSoapConsumerIn: " + exchange ) ; org . apache . cxf . message . Message inMessage = CxfSoapBinding . getCxfInMessage ( exchange , false ) ; org . apache . cxf . message . Exchange cxfExchange = inMessage . getExchange ( ) ; cxfExchange . put ( org . apache . cxf . endpoint . Endpoint . class , server . getEndpoint ( ) ) ; cxfExchange . put ( Bus . class , getBus ( ) ) ; cxfExchange . setConduit ( new NullConduit ( ) ) ; inMessageObserver . onMessage ( inMessage ) ; exchange . getIn ( ) . setBody ( inMessage . getContent ( Source . class ) ) ; exchange . getIn ( ) . setHeaders ( inMessage ) ; } protected void processSoapConsumerOut ( Exchange exchange ) throws Exception { LOG . info ( "processSoapConsumerOut: " + exchange ) ; org . apache . cxf . message . Message outMessage = CxfSoapBinding . getCxfOutMessage ( exchange , false ) ; org . apache . cxf . message . Exchange cxfExchange = outMessage . getExchange ( ) ; InterceptorChain chain = OutgoingChainInterceptor . getOutInterceptorChain ( cxfExchange ) ; outMessage . setInterceptorChain ( chain ) ; chain . doIntercept ( outMessage ) ; CachedOutputStream outputStream = ( CachedOutputStream ) outMessage . getContent ( OutputStream . class ) ; exchange . getOut ( ) . setBody ( outputStream . getInputStream ( ) ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . processor . ErrorHandlerSupport ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannelBuilder extends ErrorHandlerBuilderSupport { private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; private ExceptionPolicyStrategy exceptionPolicyStrategy = ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ; private ProcessorFactory deadLetterFactory ; private Processor defaultDeadLetterEndpoint ; private Expression defaultDeadLetterEndpointExpression ; private String defaultDeadLetterEndpointUri = "log:org.apache.camel.DeadLetterChannel?level=error" ; private Logger logger = DeadLetterChannel . createDefaultLogger ( ) ; public DeadLetterChannelBuilder ( ) { } public DeadLetterChannelBuilder ( Processor processor ) { this ( new ConstantProcessorBuilder ( processor ) ) ; } public DeadLetterChannelBuilder ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public ErrorHandlerBuilder copy ( ) { DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( deadLetterFactory ) ; answer . setRedeliveryPolicy ( getRedeliveryPolicy ( ) . copy ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { Processor deadLetter = getDeadLetterFactory ( ) . createProcessor ( ) ; DeadLetterChannel answer = new DeadLetterChannel ( processor , deadLetter , getRedeliveryPolicy ( ) , getLogger ( ) , getExceptionPolicyStrategy ( ) ) ; configure ( answer ) ; return answer ; } public DeadLetterChannelBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public DeadLetterChannelBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public DeadLetterChannelBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { getRedeliveryPolicy ( ) . maximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public DeadLetterChannelBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public DeadLetterChannelBuilder logger ( Logger logger ) { setLogger ( logger ) ; return this ; } public DeadLetterChannelBuilder loggingLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; return this ; } public DeadLetterChannelBuilder log ( Log log ) { getLogger ( ) . setLog ( log ) ; return this ; } public DeadLetterChannelBuilder log ( String log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder log ( Class log ) { return log ( LogFactory . getLog ( log ) ) ; } public ErrorHandlerBuilderSupport exceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { setExceptionPolicyStrategy ( exceptionPolicyStrategy ) ; return this ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ProcessorFactory getDeadLetterFactory ( ) { if ( deadLetterFactory == null ) { deadLetterFactory = new ProcessorFactory ( ) { public Processor createProcessor ( ) { return getDefaultDeadLetterEndpoint ( ) ; } } ; } return deadLetterFactory ; } public void setDeadLetterFactory ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public Processor getDefaultDeadLetterEndpoint ( ) { if ( defaultDeadLetterEndpoint == null ) { defaultDeadLetterEndpoint = new RecipientList ( getDefaultDeadLetterEndpointExpression ( ) ) ; } return defaultDeadLetterEndpoint ; } public void setDefaultDeadLetterEndpoint ( Processor defaultDeadLetterEndpoint ) { this . defaultDeadLetterEndpoint = defaultDeadLetterEndpoint ; } public Expression getDefaultDeadLetterEndpointExpression ( ) { if ( defaultDeadLetterEndpointExpression == null ) { defaultDeadLetterEndpointExpression = ExpressionBuilder . constantExpression ( getDefaultDeadLetterEndpointUri ( ) ) ; } return defaultDeadLetterEndpointExpression ; } public void setDefaultDeadLetterEndpointExpression ( Expression defaultDeadLetterEndpointExpression ) { this . defaultDeadLetterEndpointExpression = defaultDeadLetterEndpointExpression ; } public String getDefaultDeadLetterEndpointUri ( ) { return defaultDeadLetterEndpointUri ; } public void setDefaultDeadLetterEndpointUri ( String defaultDeadLetterEndpointUri ) { this . defaultDeadLetterEndpointUri = defaultDeadLetterEndpointUri ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } public ExceptionPolicyStrategy getExceptionPolicyStrategy ( ) { return exceptionPolicyStrategy ; } public void setExceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . exceptionPolicyStrategy = exceptionPolicyStrategy ; } } 	1
package org . apache . camel . processor ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TryProcessor extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( TryProcessor . class ) ; private final Processor tryProcessor ; private final List < CatchProcessor > catchClauses ; private final Processor finallyProcessor ; public TryProcessor ( Processor tryProcessor , List < CatchProcessor > catchClauses , Processor finallyProcessor ) { this . tryProcessor = tryProcessor ; this . catchClauses = catchClauses ; this . finallyProcessor = finallyProcessor ; } public String toString ( ) { String finallyText = ( finallyProcessor == null ) ? "" : " Finally {" + finallyProcessor + "}" ; return "Try {" + tryProcessor + "} " + catchClauses + finallyText ; } public void process ( Exchange exchange ) throws Exception { Throwable e = null ; try { tryProcessor . process ( exchange ) ; e = exchange . getException ( ) ; if ( e != null && DeadLetterChannel . isFailureHandled ( exchange ) ) { e = null ; } } catch ( Throwable ex ) { e = ex ; exchange . setException ( e ) ; } Exception unexpected = null ; try { if ( e != null ) { LOG . info ( "Caught exception while processing exchange." , e ) ; handleException ( exchange , e ) ; } } catch ( Exception ex ) { unexpected = ex ; } catch ( Throwable ex ) { unexpected = new RuntimeCamelException ( ex ) ; } finally { try { processFinally ( exchange ) ; } catch ( Exception ex ) { unexpected = ex ; } catch ( Throwable ex ) { unexpected = new RuntimeCamelException ( ex ) ; } if ( unexpected != null ) { LOG . warn ( "Caught exception inside processFinally clause." , unexpected ) ; throw unexpected ; } } if ( unexpected != null ) { LOG . warn ( "Caught exception inside handle clause." , unexpected ) ; throw unexpected ; } } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( tryProcessor , catchClauses , finallyProcessor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( tryProcessor , catchClauses , finallyProcessor ) ; } protected void handleException ( Exchange exchange , Throwable e ) throws Throwable { for ( CatchProcessor catchClause : catchClauses ) { if ( catchClause . catches ( e ) ) { Exchange localExchange = exchange . copy ( ) ; localExchange . getIn ( ) . setHeader ( "caught.exception" , e ) ; localExchange . setException ( null ) ; catchClause . process ( localExchange ) ; localExchange . getIn ( ) . removeHeader ( "caught.exception" ) ; ExchangeHelper . copyResults ( exchange , localExchange ) ; return ; } } } protected void processFinally ( Exchange exchange ) throws Throwable { if ( finallyProcessor != null ) { Throwable lastException = exchange . getException ( ) ; exchange . setException ( null ) ; finallyProcessor . process ( exchange ) ; if ( exchange . getException ( ) == null ) { exchange . setException ( lastException ) ; } } } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RoutingSlip extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( RoutingSlip . class ) ; private final String header ; private final String uriDelimiter ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RoutingSlip ( String header ) { this ( header , RoutingSlipType . DEFAULT_DELIMITER ) ; } public RoutingSlip ( String header , String uriDelimiter ) { notNull ( header , "header" ) ; notNull ( uriDelimiter , "uriDelimiter" ) ; this . header = header ; this . uriDelimiter = uriDelimiter ; } @ Override public String toString ( ) { return "RoutingSlip[header=" + header + " uriDelimiter=" + uriDelimiter + "]" ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getIn ( ) ; String [ ] recipients = recipients ( message ) ; Exchange current = exchange ; for ( String nextRecipient : recipients ) { Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , nextRecipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; Exchange ex = endpoint . createExchange ( ExchangePattern . InOut ) ; updateRoutingSlip ( current ) ; copyOutToIn ( ex , current ) ; producer . process ( ex ) ; current = ex ; } ExchangeHelper . copyResults ( exchange , current ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } private void updateRoutingSlip ( Exchange current ) { Message message = getResultMessage ( current ) ; message . setHeader ( header , removeFirstElement ( recipients ( message ) ) ) ; } private Message getResultMessage ( Exchange exchange ) { Message message = exchange . getOut ( false ) ; if ( message == null ) { message = exchange . getIn ( ) ; } return message ; } private String [ ] recipients ( Message message ) { Object headerValue = message . getHeader ( header ) ; if ( headerValue != null && ! headerValue . equals ( "" ) ) { return headerValue . toString ( ) . split ( uriDelimiter ) ; } return new String [ ] { } ; } private String removeFirstElement ( String [ ] elements ) { CollectionStringBuffer updatedElements = new CollectionStringBuffer ( uriDelimiter ) ; for ( int i = 1 ; i < elements . length ; i ++ ) { updatedElements . append ( elements [ i ] ) ; } return updatedElements . toString ( ) ; } private void copyOutToIn ( Exchange result , Exchange source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } result . setIn ( getResultMessage ( source ) ) ; result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } 	1
package org . apache . camel . converter . xmlbeans ; import java . io . InputStream ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ExchangeHelper ; import org . apache . xmlbeans . XmlObject ; public class XmlBeansDataFormat implements DataFormat { public void marshal ( Exchange exchange , Object body , OutputStream stream ) throws Exception { XmlObject object = ExchangeHelper . convertToMandatoryType ( exchange , XmlObject . class , body ) ; object . save ( stream ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { return XmlObject . Factory . parse ( stream ) ; } } 	0
package org . apache . camel . component . log ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . util . ObjectHelper ; public class LogFormatter implements ExchangeFormatter { private boolean showExchangeId ; private boolean showProperties ; private boolean showHeaders ; private boolean showBodyType = true ; private boolean showBody = true ; private boolean showOut ; private boolean showAll ; private boolean multiline ; public Object format ( Exchange exchange ) { Message in = exchange . getIn ( ) ; StringBuilder sb = new StringBuilder ( "" ) ; if ( showAll || showExchangeId ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Id:" ) . append ( exchange . getExchangeId ( ) ) ; } if ( showAll || showProperties ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Properties:" ) . append ( exchange . getProperties ( ) ) ; } if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Headers:" ) . append ( in . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", BodyType:" ) . append ( getBodyTypeAsString ( in ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Body:" ) . append ( getBodyAsString ( in ) ) ; } Message out = exchange . getOut ( false ) ; if ( showAll || showOut ) { if ( out != null ) { if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutHeaders:" ) . append ( out . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBodyType:" ) . append ( getBodyTypeAsString ( out ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBody:" ) . append ( getBodyAsString ( out ) ) ; } } else { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Out: null" ) ; } } return "Exchange[" + ( multiline ? sb . append ( ']' ) . toString ( ) : sb . toString ( ) . substring ( 2 ) + "]" ) ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowOut ( ) { return showOut ; } public void setShowOut ( boolean showOut ) { this . showOut = showOut ; } public boolean isShowAll ( ) { return showAll ; } public void setShowAll ( boolean showAll ) { this . showAll = showAll ; } public boolean isMultiline ( ) { return multiline ; } public void setMultiline ( boolean multiline ) { this . multiline = multiline ; } protected Object getBodyAsString ( Message message ) { Object answer = message . getBody ( String . class ) ; if ( answer == null ) { answer = message . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } } 	1
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class RandomLoadBalancer extends QueueLoadBalancer { protected synchronized Processor chooseProcessor ( List < Processor > processors , Exchange exchange ) { int size = processors . size ( ) ; while ( true ) { int index = ( int ) Math . round ( Math . random ( ) * size ) ; if ( index < size ) { return processors . get ( index ) ; } } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . idempotent . IdempotentConsumer ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "idempotentConsumer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class IdempotentConsumerType extends ExpressionNode { @ XmlAttribute private String messageIdRepositoryRef ; @ XmlTransient private MessageIdRepository messageIdRepository ; public IdempotentConsumerType ( ) { } public IdempotentConsumerType ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { super ( messageIdExpression ) ; this . messageIdRepository = messageIdRepository ; } @ Override public String toString ( ) { return "IdempotentConsumer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "idempotentConsumer" ; } public String getMessageIdRepositoryRef ( ) { return messageIdRepositoryRef ; } public void setMessageIdRepositoryRef ( String messageIdRepositoryRef ) { this . messageIdRepositoryRef = messageIdRepositoryRef ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public void setMessageIdRepository ( MessageIdRepository messageIdRepository ) { this . messageIdRepository = messageIdRepository ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; MessageIdRepository messageIdRepository = resolveMessageIdRepository ( routeContext ) ; return new IdempotentConsumer ( getExpression ( ) . createExpression ( routeContext ) , messageIdRepository , childProcessor ) ; } public MessageIdRepository resolveMessageIdRepository ( RouteContext routeContext ) { if ( messageIdRepository == null ) { messageIdRepository = routeContext . lookup ( messageIdRepositoryRef , MessageIdRepository . class ) ; } return messageIdRepository ; } } 	1
package org . apache . camel . management ; public final class ObjectNameEncoder { private ObjectNameEncoder ( ) { } public static String encode ( String on ) { return encode ( on , false ) ; } public static String encode ( String on , boolean ignoreWildcards ) { on = on . replace ( "%" , "%25" ) ; on = on . replace ( ":" , "%3a" ) ; on = on . replace ( "\"" , "%22" ) ; on = on . replace ( "," , "%2c" ) ; on = on . replace ( "=" , "%3d" ) ; if ( ! ignoreWildcards ) { on = on . replace ( "*" , "%2a" ) ; on = on . replace ( "?" , "%3f" ) ; } return on ; } public static String decode ( String on ) { on = on . replace ( "%25" , "%" ) ; on = on . replace ( "%3a" , ":" ) ; on = on . replace ( "%22" , "\"" ) ; on = on . replace ( "%2c" , "," ) ; on = on . replace ( "%3d" , "=" ) ; on = on . replace ( "%2a" , "*" ) ; on = on . replace ( "%3f" , "?" ) ; return on ; } } 	0
package org . apache . camel ; import java . util . List ; public interface Routes { CamelContext getContext ( ) ; void setContext ( CamelContext context ) ; List < Route > getRouteList ( ) throws Exception ; } 	1
package org . apache . camel . processor . resequencer ; import java . util . LinkedList ; import java . util . List ; import java . util . Timer ; import java . util . TimerTask ; public class Timeout extends TimerTask { private List < TimeoutHandler > timeoutHandlers ; private Timer timer ; private long timeout ; public Timeout ( Timer timer , long timeout ) { this . timeoutHandlers = new LinkedList < TimeoutHandler > ( ) ; this . timeout = timeout ; this . timer = timer ; } public List < TimeoutHandler > getTimeoutHandlers ( ) { return timeoutHandlers ; } public void addTimeoutHandler ( TimeoutHandler handler ) { timeoutHandlers . add ( handler ) ; } public void addTimeoutHandlerFirst ( TimeoutHandler handler ) { timeoutHandlers . add ( 0 , handler ) ; } public void clearTimeoutHandlers ( ) { this . timeoutHandlers . clear ( ) ; } public void schedule ( ) { timer . schedule ( this , timeout ) ; } @ Override public void run ( ) { for ( TimeoutHandler observer : timeoutHandlers ) { observer . timeout ( this ) ; } } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . ObjectHelper ; public class TraceFormatter { private boolean showBreadCrumb = true ; private boolean showNode = true ; private boolean showExchangeId ; private boolean showProperties = true ; private boolean showHeaders = true ; private boolean showBody = true ; private boolean showBodyType = true ; public Object format ( TraceInterceptor interceptor , Exchange exchange ) { Message in = exchange . getIn ( ) ; Throwable exception = exchange . getException ( ) ; return ( showBreadCrumb ? getBreadCrumbID ( exchange ) + " " : "" ) + "-> " + getNodeMessage ( interceptor ) + " " + ( showNode ? interceptor . getNode ( ) + " " : "" ) + exchange . getPattern ( ) + ( showExchangeId ? " Id: " + exchange . getExchangeId ( ) : "" ) + ( showProperties ? " Properties:" + exchange . getProperties ( ) : "" ) + ( showHeaders ? " Headers:" + in . getHeaders ( ) : "" ) + ( showBodyType ? " BodyType:" + getBodyTypeAsString ( in ) : "" ) + ( showBody ? " Body:" + getBodyAsString ( in ) : "" ) + ( exception != null ? " Exception: " + exception : "" ) ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBreadCrumb ( ) { return showBreadCrumb ; } public void setShowBreadCrumb ( boolean showBreadCrumb ) { this . showBreadCrumb = showBreadCrumb ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowNode ( ) { return showNode ; } public void setShowNode ( boolean showNode ) { this . showNode = showNode ; } protected Object getBreadCrumbID ( Exchange exchange ) { UnitOfWork unitOfWork = exchange . getUnitOfWork ( ) ; return unitOfWork . getId ( ) ; } protected Object getBodyAsString ( Message in ) { Object answer = in . getBody ( String . class ) ; if ( answer == null ) { answer = in . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } protected String getNodeMessage ( TraceInterceptor interceptor ) { return interceptor . getNode ( ) . idOrCreate ( ) ; } } 	1
package org . apache . camel . converter ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface HasAnnotation { Class value ( ) ; } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; public class CamelInvocationHandler implements InvocationHandler { private final Endpoint endpoint ; private final Producer producer ; public CamelInvocationHandler ( Endpoint endpoint , Producer producer ) { this . endpoint = endpoint ; this . producer = producer ; } public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { BeanInvocation invocation = new BeanInvocation ( method , args ) ; BeanExchange exchange = new BeanExchange ( endpoint . getCamelContext ( ) , ExchangePattern . InOut ) ; exchange . setInvocation ( invocation ) ; producer . process ( exchange ) ; Throwable fault = exchange . getException ( ) ; if ( fault != null ) { throw new InvocationTargetException ( fault ) ; } return exchange . getOut ( true ) . getBody ( ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . IOException ; import java . io . InputStream ; import org . apache . camel . Exchange ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . commons . net . ftp . FTPClient ; import org . apache . commons . net . ftp . FTPConnectionClosedException ; public class FtpProducer extends RemoteFileProducer < RemoteFileExchange > { private static final transient Log LOG = LogFactory . getLog ( FtpProducer . class ) ; private FtpEndpoint endpoint ; private FTPClient client ; public FtpProducer ( FtpEndpoint endpoint , FTPClient client ) { super ( endpoint ) ; this . endpoint = endpoint ; this . client = client ; } public void process ( Exchange exchange ) throws Exception { connectIfNecessary ( ) ; try { process ( endpoint . createExchange ( exchange ) ) ; } catch ( FTPConnectionClosedException e ) { LOG . warn ( "Disconnecting due to exception: " + e . toString ( ) ) ; disconnect ( ) ; throw e ; } catch ( RuntimeCamelException e ) { LOG . warn ( "Caught RuntimeCamelException: " + e . toString ( ) ) ; LOG . warn ( "Hoping an explicit disconnect/reconnect will solve the problem" ) ; disconnect ( ) ; throw e ; } } protected void connectIfNecessary ( ) throws IOException { if ( ! client . isConnected ( ) ) { LOG . warn ( "FtpProducer's client isn't connected, trying to reconnect..." ) ; endpoint . connect ( client ) ; LOG . info ( "Connected to " + endpoint . getConfiguration ( ) ) ; } } public void disconnect ( ) throws IOException { LOG . info ( "FtpProducer's client is being explicitly disconnected" ) ; endpoint . disconnect ( client ) ; } public void process ( RemoteFileExchange exchange ) throws Exception { InputStream payload = exchange . getIn ( ) . getBody ( InputStream . class ) ; try { String fileName = createFileName ( exchange . getIn ( ) , endpoint . getConfiguration ( ) ) ; int lastPathIndex = fileName . lastIndexOf ( '/' ) ; if ( lastPathIndex != - 1 ) { String directory = fileName . substring ( 0 , lastPathIndex ) ; if ( ! buildDirectory ( client , directory ) ) { LOG . warn ( "Couldn't build directory: " + directory + " (either permissions deny it, or it already exists)" ) ; } } final boolean success = client . storeFile ( fileName , payload ) ; if ( ! success ) { throw new RuntimeCamelException ( "Error sending file: " + fileName ) ; } RemoteFileConfiguration config = endpoint . getConfiguration ( ) ; LOG . info ( "Sent: " + fileName + " to " + config . toString ( ) . substring ( 0 , config . toString ( ) . indexOf ( config . getFile ( ) ) ) ) ; } finally { if ( payload != null ) { payload . close ( ) ; } } } @ Override protected void doStart ( ) throws Exception { LOG . info ( "Starting" ) ; try { connectIfNecessary ( ) ; } catch ( IOException e ) { LOG . warn ( "Couldn't connect to " + endpoint . getConfiguration ( ) ) ; } super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { LOG . info ( "Stopping" ) ; disconnect ( ) ; super . doStop ( ) ; } protected static boolean buildDirectory ( FTPClient ftpClient , String dirName ) throws IOException { boolean atLeastOneSuccess = false ; final StringBuilder sb = new StringBuilder ( dirName . length ( ) ) ; final String [ ] dirs = dirName . split ( "\\/" ) ; for ( String dir : dirs ) { sb . append ( dir ) . append ( '/' ) ; String directory = sb . toString ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Trying to build directory: " + directory ) ; } final boolean success = ftpClient . makeDirectory ( directory ) ; if ( ! atLeastOneSuccess && success ) { atLeastOneSuccess = true ; } } return atLeastOneSuccess ; } } 	0
package org . apache . camel ; @ Deprecated public class InvalidHeaderTypeException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; private final Object headerValue ; public InvalidHeaderTypeException ( Throwable cause , Object headerValue ) { super ( cause . getMessage ( ) + " headerValue is: " + headerValue + " of type: " + typeName ( headerValue ) , cause ) ; this . headerValue = headerValue ; } public InvalidHeaderTypeException ( String message , Object headerValue ) { super ( message ) ; this . headerValue = headerValue ; } public Object getHeaderValue ( ) { return headerValue ; } protected static String typeName ( Object headerValue ) { return ( headerValue != null ) ? headerValue . getClass ( ) . getName ( ) : "null" ; } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . processor . Throttler ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "throttler" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThrottlerType extends ProcessorType < ProcessorType > { @ XmlAttribute private Long maximumRequestsPerPeriod ; @ XmlAttribute private long timePeriodMillis = 1000 ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; public ThrottlerType ( ) { } public ThrottlerType ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } @ Override public String toString ( ) { return "Throttler[" + getMaximumRequestsPerPeriod ( ) + " request per " + getTimePeriodMillis ( ) + " millis -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "throttler" ; } @ Override public String getLabel ( ) { return "" + getMaximumRequestsPerPeriod ( ) + " per " + getTimePeriodMillis ( ) + " (ms)" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new Throttler ( childProcessor , maximumRequestsPerPeriod , timePeriodMillis ) ; } public ThrottlerType timePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; return this ; } public Long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( Long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } } 	0
package org . apache . camel ; import java . util . Map ; import org . apache . camel . spi . UnitOfWork ; public interface Exchange { ExchangePattern getPattern ( ) ; void setPattern ( ExchangePattern pattern ) ; Object getProperty ( String name ) ; < T > T getProperty ( String name , Class < T > type ) ; void setProperty ( String name , Object value ) ; Object removeProperty ( String name ) ; Map < String , Object > getProperties ( ) ; Message getIn ( ) ; void setIn ( Message in ) ; Message getOut ( ) ; Message getOut ( boolean lazyCreate ) ; void setOut ( Message out ) ; Message getFault ( ) ; Message getFault ( boolean lazyCreate ) ; Throwable getException ( ) ; void setException ( Throwable e ) ; boolean isFailed ( ) ; boolean isTransacted ( ) ; CamelContext getContext ( ) ; Exchange newInstance ( ) ; Exchange copy ( ) ; void copyFrom ( Exchange source ) ; UnitOfWork getUnitOfWork ( ) ; void setUnitOfWork ( UnitOfWork unitOfWork ) ; String getExchangeId ( ) ; void setExchangeId ( String id ) ; } 	1
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; public class DefaultExchangeFormatter implements ExchangeFormatter { protected static final DefaultExchangeFormatter INSTANCE = new DefaultExchangeFormatter ( ) ; public static DefaultExchangeFormatter getInstance ( ) { return INSTANCE ; } public Object format ( Exchange exchange ) { return exchange ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . RedeliveryPolicy ; @ XmlRootElement ( name = "redeliveryPolicy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RedeliveryPolicyType { private Integer maximumRedeliveries ; private Long initialRedeliveryDelay ; private Double backOffMultiplier ; private Boolean useExponentialBackOff ; private Double collisionAvoidanceFactor ; private Boolean useCollisionAvoidance ; public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; if ( maximumRedeliveries != null ) { answer . setMaximumRedeliveries ( maximumRedeliveries ) ; } if ( initialRedeliveryDelay != null ) { answer . setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; } if ( backOffMultiplier != null ) { answer . setBackOffMultiplier ( backOffMultiplier ) ; } if ( useExponentialBackOff != null ) { answer . setUseExponentialBackOff ( useExponentialBackOff ) ; } if ( collisionAvoidanceFactor != null ) { answer . setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; } if ( useCollisionAvoidance != null ) { answer . setUseCollisionAvoidance ( useCollisionAvoidance ) ; } return answer ; } public String toString ( ) { return "RedeliveryPolicy[maxRedeliveries: " + maximumRedeliveries + "]" ; } public RedeliveryPolicyType backOffMultiplier ( double backOffMultiplier ) { setBackOffMultiplier ( backOffMultiplier ) ; return this ; } public RedeliveryPolicyType collisionAvoidancePercent ( double collisionAvoidancePercent ) { setCollisionAvoidanceFactor ( collisionAvoidancePercent * 0.01d ) ; return this ; } public RedeliveryPolicyType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public RedeliveryPolicyType initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicyType maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicyType useCollisionAvoidance ( ) { setUseCollisionAvoidance ( Boolean . TRUE ) ; return this ; } public RedeliveryPolicyType useExponentialBackOff ( ) { setUseExponentialBackOff ( Boolean . TRUE ) ; return this ; } public Double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( Double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public Double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( Double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public Long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( Long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public Integer getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( Integer maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public Boolean getUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( Boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public Boolean getUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( Boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } } 	1
package org . apache . camel . component . cxf . invoker ; import java . io . IOException ; import java . io . InputStream ; import java . util . Map ; import java . util . logging . Logger ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . helpers . IOUtils ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . message . Message ; public abstract class AbstractInvokingContext implements InvokingContext { protected abstract Logger getLogger ( ) ; protected < T > T getResponseObject ( Message inMessage , Map < String , Object > responseContext , Class < T > clazz ) { T retval = null ; if ( inMessage != null ) { if ( null != responseContext ) { responseContext . putAll ( inMessage ) ; getLogger ( ) . info ( "set responseContext to be" + responseContext ) ; } retval = inMessage . getContent ( clazz ) ; } return retval ; } protected void loggerTheMessage ( Message message , String messageTile ) { StringBuffer buffer = new StringBuffer ( messageTile + "\n" + "--------------------------------------" ) ; InputStream is = message . getContent ( InputStream . class ) ; if ( is != null ) { CachedOutputStream bos = new CachedOutputStream ( ) ; try { IOUtils . copy ( is , bos ) ; is . close ( ) ; bos . close ( ) ; buffer . append ( "\nMessage:\n" ) ; buffer . append ( bos . getOut ( ) . toString ( ) ) ; message . setContent ( InputStream . class , bos . getInputStream ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } buffer . append ( "\n--------------------------------------" ) ; getLogger ( ) . info ( buffer . toString ( ) ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingErrorHandler ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandlerBuilder extends ErrorHandlerBuilderSupport { private Log log = LogFactory . getLog ( Logger . class ) ; private LoggingLevel level = LoggingLevel . INFO ; public LoggingErrorHandlerBuilder ( ) { } public LoggingErrorHandlerBuilder ( Log log ) { this . log = log ; } public LoggingErrorHandlerBuilder ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public ErrorHandlerBuilder copy ( ) { LoggingErrorHandlerBuilder answer = new LoggingErrorHandlerBuilder ( ) ; answer . setLog ( getLog ( ) ) ; answer . setLevel ( getLevel ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) { LoggingErrorHandler handler = new LoggingErrorHandler ( processor , log , level ) ; configure ( handler ) ; return handler ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } } 	1
package org . apache . camel . management ; import java . net . InetAddress ; import java . net . UnknownHostException ; import javax . management . MalformedObjectNameException ; import javax . management . ObjectName ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . RouteContext ; public class CamelNamingStrategy { public static final String VALUE_UNKNOWN = "unknown" ; public static final String KEY_NAME = "name" ; public static final String KEY_TYPE = "type" ; public static final String KEY_CONTEXT = "context" ; public static final String KEY_GROUP = "group" ; public static final String KEY_COMPONENT = "component" ; public static final String KEY_ROUTE = "route" ; public static final String TYPE_CONTEXT = "context" ; public static final String TYPE_ENDPOINT = "endpoint" ; public static final String TYPE_PROCESSOR = "processor" ; public static final String TYPE_ROUTE = "route" ; public static final String TYPE_SERVICE = "service" ; public static final String KEY_NODE_ID = "nodeid" ; protected String domainName ; protected String hostName = "locahost" ; public CamelNamingStrategy ( ) { this ( "org.apache.camel" ) ; } public CamelNamingStrategy ( String domainName ) { if ( domainName != null ) { this . domainName = domainName ; } try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException ex ) { } } public ObjectName getObjectName ( CamelContext context ) throws MalformedObjectNameException { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( getContextId ( context ) ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_CONTEXT + "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( getContextId ( context ) ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( ManagedEndpoint mbean ) throws MalformedObjectNameException { Endpoint < ? extends Exchange > ep = mbean . getEndpoint ( ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( getContextId ( ep . getCamelContext ( ) ) ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_ENDPOINT + "," ) ; buffer . append ( KEY_COMPONENT + "=" ) . append ( getComponentId ( ep ) ) . append ( "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( getEndpointId ( ep ) ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( CamelContext context , ManagedService mbean ) throws MalformedObjectNameException { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( getContextId ( context ) ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_SERVICE + "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( Integer . toHexString ( mbean . getService ( ) . hashCode ( ) ) ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( ManagedRoute mbean ) throws MalformedObjectNameException { Route < ? extends Exchange > route = mbean . getRoute ( ) ; Endpoint < ? extends Exchange > ep = route . getEndpoint ( ) ; String ctxid = ep != null ? getContextId ( ep . getCamelContext ( ) ) : VALUE_UNKNOWN ; String cid = getComponentId ( ep ) ; String id = VALUE_UNKNOWN . equals ( cid ) ? getEndpointId ( ep ) : "[" + cid + "]" + getEndpointId ( ep ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( ctxid ) . append ( "," ) ; buffer . append ( KEY_ROUTE + "=" ) . append ( id ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_ROUTE + "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( id ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( RouteContext routeContext , ProcessorType processor ) throws MalformedObjectNameException { Endpoint < ? extends Exchange > ep = routeContext . getEndpoint ( ) ; String ctxid = ep != null ? getContextId ( ep . getCamelContext ( ) ) : VALUE_UNKNOWN ; String cid = getComponentId ( ep ) ; String id = VALUE_UNKNOWN . equals ( cid ) ? getEndpointId ( ep ) : "[" + cid + "]" + getEndpointId ( ep ) ; String nodeId = processor . idOrCreate ( ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( ctxid ) . append ( "," ) ; buffer . append ( KEY_ROUTE + "=" ) . append ( id ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_PROCESSOR + "," ) ; buffer . append ( KEY_NODE_ID + "=" ) . append ( nodeId ) . append ( "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( ObjectName . quote ( processor . toString ( ) ) ) ; return createObjectName ( buffer ) ; } public String getDomainName ( ) { return domainName ; } public void setDomainName ( String domainName ) { this . domainName = domainName ; } public String getHostName ( ) { return hostName ; } public void setHostName ( String hostName ) { this . hostName = hostName ; } protected String getContextId ( CamelContext context ) { String id = context != null ? context . getName ( ) : VALUE_UNKNOWN ; return hostName + "/" + id ; } protected String getComponentId ( Endpoint < ? extends Exchange > ep ) { String uri = ep . getEndpointUri ( ) ; int pos = uri . indexOf ( ':' ) ; return ( pos == - 1 ) ? VALUE_UNKNOWN : uri . substring ( 0 , pos ) ; } protected String getEndpointId ( Endpoint < ? extends Exchange > ep ) { String uri = ep . getEndpointUri ( ) ; int pos = uri . indexOf ( ':' ) ; String id = ( pos == - 1 ) ? uri : uri . substring ( pos + 1 ) ; if ( ! ep . isSingleton ( ) ) { id += "@" + Integer . toString ( ep . hashCode ( ) ) ; } return ObjectNameEncoder . encode ( id ) ; } protected ObjectName createObjectName ( StringBuffer buffer ) throws MalformedObjectNameException { String text = buffer . toString ( ) ; try { return new ObjectName ( text ) ; } catch ( MalformedObjectNameException e ) { throw new MalformedObjectNameException ( "Could not create ObjectName from: " + text + ". Reason: " + e ) ; } } } 	0
package org . apache . camel . impl ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . util . ObjectHelper ; public abstract class DefaultEndpoint < E extends Exchange > implements Endpoint < E > , CamelContextAware { private String endpointUri ; private CamelContext camelContext ; private Component component ; private ScheduledExecutorService executorService ; private ExchangePattern exchangePattern = ExchangePattern . InOnly ; protected DefaultEndpoint ( String endpointUri , Component component ) { this ( endpointUri , component . getCamelContext ( ) ) ; this . component = component ; } protected DefaultEndpoint ( String endpointUri , CamelContext camelContext ) { this ( endpointUri ) ; this . camelContext = camelContext ; } protected DefaultEndpoint ( String endpointUri ) { this . setEndpointUri ( endpointUri ) ; } protected DefaultEndpoint ( ) { } public int hashCode ( ) { return getEndpointUri ( ) . hashCode ( ) * 37 + 1 ; } @ Override public boolean equals ( Object object ) { if ( object instanceof DefaultEndpoint ) { DefaultEndpoint that = ( DefaultEndpoint ) object ; return ObjectHelper . equal ( this . getEndpointUri ( ) , that . getEndpointUri ( ) ) ; } return false ; } @ Override public String toString ( ) { return "Endpoint[" + getEndpointUri ( ) + "]" ; } public String getEndpointUri ( ) { if ( endpointUri == null ) { endpointUri = createEndpointUri ( ) ; if ( endpointUri == null ) { throw new IllegalArgumentException ( "endpointUri is not specified and " + getClass ( ) . getName ( ) + " does not implement createEndpointUri() to create a default value" ) ; } } return endpointUri ; } public CamelContext getCamelContext ( ) { return camelContext ; } public Component getComponent ( ) { return component ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public synchronized ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { Component c = getComponent ( ) ; if ( c != null && c instanceof DefaultComponent ) { DefaultComponent dc = ( DefaultComponent ) c ; executorService = dc . getExecutorService ( ) ; } if ( executorService == null ) { executorService = createExecutorService ( ) ; } } return executorService ; } public synchronized void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } public PollingConsumer < E > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < E > ( this ) ; } public E convertTo ( Class < E > type , Exchange exchange ) { if ( type . isInstance ( exchange ) ) { return type . cast ( exchange ) ; } return getCamelContext ( ) . getExchangeConverter ( ) . convertTo ( type , exchange ) ; } public E createExchange ( Exchange exchange ) { Class < E > exchangeType = getExchangeType ( ) ; if ( exchangeType != null ) { if ( exchangeType . isInstance ( exchange ) ) { return exchangeType . cast ( exchange ) ; } } E answer = createExchange ( ) ; answer . copyFrom ( exchange ) ; return answer ; } public Class < E > getExchangeType ( ) { Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { return ( Class < E > ) argumentType ; } } } return null ; } public E createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public E createExchange ( ExchangePattern pattern ) { return ( E ) new DefaultExchange ( getCamelContext ( ) , pattern ) ; } public ExchangePattern getExchangePattern ( ) { return exchangePattern ; } public void setExchangePattern ( ExchangePattern exchangePattern ) { this . exchangePattern = exchangePattern ; } protected ScheduledThreadPoolExecutor createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( 10 ) ; } public void configureProperties ( Map options ) { } protected String createEndpointUri ( ) { return null ; } protected void setEndpointUri ( String endpointUri ) { this . endpointUri = endpointUri ; } @ Deprecated public CamelContext getContext ( ) { return getCamelContext ( ) ; } @ Deprecated public void setContext ( CamelContext context ) { setCamelContext ( context ) ; } } 	1
package org . apache . camel . bam . rules ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessDefinition ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public class ProcessRules extends ServiceSupport { private ProcessDefinition processDefinition ; private List < ActivityRules > activities = new ArrayList < ActivityRules > ( ) ; public void processExpired ( ActivityState activityState ) throws Exception { for ( ActivityRules activityRules : activities ) { activityRules . processExpired ( activityState ) ; } } public void processExchange ( Exchange exchange , ProcessInstance process ) { for ( ActivityRules activityRules : activities ) { activityRules . processExchange ( exchange , process ) ; } } public List < ActivityRules > getActivities ( ) { return activities ; } public ProcessDefinition getProcessDefinition ( ) { return processDefinition ; } public void setProcessDefinition ( ProcessDefinition processDefinition ) { this . processDefinition = processDefinition ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( activities ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( activities ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultUnitOfWork ; public final class UnitOfWorkProcessor extends DelegateAsyncProcessor { public UnitOfWorkProcessor ( AsyncProcessor processor ) { super ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( exchange . getUnitOfWork ( ) == null ) { exchange . setUnitOfWork ( new DefaultUnitOfWork ( ) ) ; return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( sync ) ; exchange . getUnitOfWork ( ) . done ( exchange ) ; exchange . setUnitOfWork ( null ) ; } } ) ; } else { return processor . process ( exchange , callback ) ; } } } 	1
package org . apache . camel . component . rmi ; import java . net . URI ; import java . net . URISyntaxException ; import java . rmi . RemoteException ; import java . rmi . registry . LocateRegistry ; import java . rmi . registry . Registry ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . component . bean . BeanExchange ; import org . apache . camel . impl . DefaultEndpoint ; public class RmiEndpoint extends DefaultEndpoint < BeanExchange > { private List < Class > remoteInterfaces ; private ClassLoader classLoader ; private URI uri ; private int port ; private String method ; protected RmiEndpoint ( String endpointUri , RmiComponent component ) throws URISyntaxException { super ( endpointUri , component ) ; this . uri = new URI ( endpointUri ) ; } public RmiEndpoint ( String endpointUri ) throws URISyntaxException { super ( endpointUri ) ; this . uri = new URI ( endpointUri ) ; } public boolean isSingleton ( ) { return false ; } @ Override public BeanExchange createExchange ( ExchangePattern pattern ) { return new BeanExchange ( getCamelContext ( ) , pattern ) ; } public Consumer < BeanExchange > createConsumer ( Processor processor ) throws Exception { if ( remoteInterfaces == null || remoteInterfaces . size ( ) == 0 ) { throw new RuntimeCamelException ( "To create an RMI consumer, the RMI endpoint's remoteInterfaces property must be be configured." ) ; } return new RmiConsumer ( this , processor ) ; } public Producer < BeanExchange > createProducer ( ) throws Exception { return new RmiProducer ( this ) ; } public String getName ( ) { String path = uri . getPath ( ) ; if ( path == null ) { path = uri . getSchemeSpecificPart ( ) ; } return path ; } public Registry getRegistry ( ) throws RemoteException { if ( uri . getHost ( ) != null ) { if ( uri . getPort ( ) == - 1 ) { return LocateRegistry . getRegistry ( uri . getHost ( ) ) ; } else { return LocateRegistry . getRegistry ( uri . getHost ( ) , uri . getPort ( ) ) ; } } else { return LocateRegistry . getRegistry ( ) ; } } public List < Class > getRemoteInterfaces ( ) { return remoteInterfaces ; } public void setRemoteInterfaces ( List < Class > remoteInterfaces ) { this . remoteInterfaces = remoteInterfaces ; if ( classLoader == null && ! remoteInterfaces . isEmpty ( ) ) { classLoader = remoteInterfaces . get ( 0 ) . getClassLoader ( ) ; } } public void setRemoteInterfaces ( Class ... remoteInterfaces ) { setRemoteInterfaces ( Arrays . asList ( remoteInterfaces ) ) ; } public ClassLoader getClassLoader ( ) { return classLoader ; } public void setClassLoader ( ClassLoader classLoader ) { this . classLoader = classLoader ; } public int getPort ( ) { return port ; } public void setPort ( int port ) { this . port = port ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; public class SerializationDataFormat implements DataFormat { public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { ObjectOutput out = IOConverter . toObjectOutput ( stream ) ; out . writeObject ( graph ) ; out . flush ( ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { ObjectInput in = IOConverter . toObjectInput ( stream ) ; return in . readObject ( ) ; } } 	1
package org . apache . camel . bam . processor ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallback ; import org . springframework . transaction . support . TransactionTemplate ; public abstract class BamProcessorSupport < T > implements Processor { private static final transient Log LOG = LogFactory . getLog ( BamProcessorSupport . class ) ; private Class < T > entityType ; private Expression < Exchange > correlationKeyExpression ; private TransactionTemplate transactionTemplate ; private int retryCount = 20 ; private long retrySleep = 1000L ; protected BamProcessorSupport ( TransactionTemplate transactionTemplate , Expression < Exchange > correlationKeyExpression ) { this . transactionTemplate = transactionTemplate ; this . correlationKeyExpression = correlationKeyExpression ; Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { this . entityType = ( Class < T > ) argumentType ; } } } if ( entityType == null ) { throw new IllegalArgumentException ( "Could not infer the entity type!" ) ; } } protected BamProcessorSupport ( TransactionTemplate transactionTemplate , Expression < Exchange > correlationKeyExpression , Class < T > entitytype ) { this . transactionTemplate = transactionTemplate ; this . entityType = entitytype ; this . correlationKeyExpression = correlationKeyExpression ; } public void process ( final Exchange exchange ) { for ( int i = 1 ; i <= retryCount ; i ++ ) { if ( i > 1 ) { LOG . info ( "Retrying attempt: " + i ) ; try { Thread . sleep ( retryCount ) ; } catch ( InterruptedException e ) { LOG . debug ( "Caught: " + e , e ) ; } } try { transactionTemplate . execute ( new TransactionCallback ( ) { public Object doInTransaction ( TransactionStatus status ) { try { Object key = getCorrelationKey ( exchange ) ; T entity = loadEntity ( exchange , key ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Correlation key: " + key + " with entity: " + entity ) ; } processEntity ( exchange , entity ) ; return entity ; } catch ( Exception e ) { return onError ( status , e ) ; } } } ) ; if ( i > 1 ) { LOG . info ( "Attempt " + i + " worked!" ) ; } return ; } catch ( Exception e ) { LOG . warn ( "Failed to complete transaction: " + e , e ) ; } } } public Expression < Exchange > getCorrelationKeyExpression ( ) { return correlationKeyExpression ; } public Class < T > getEntityType ( ) { return entityType ; } protected abstract void processEntity ( Exchange exchange , T entity ) throws Exception ; protected abstract T loadEntity ( Exchange exchange , Object key ) throws Exception ; protected abstract Class getKeyType ( ) ; protected Object getCorrelationKey ( Exchange exchange ) throws NoCorrelationKeyException { Object value = correlationKeyExpression . evaluate ( exchange ) ; Class keyType = getKeyType ( ) ; if ( keyType != null ) { value = ExchangeHelper . convertToType ( exchange , keyType , value ) ; } if ( value == null ) { throw new NoCorrelationKeyException ( this , exchange ) ; } return value ; } protected Object onError ( TransactionStatus status , Exception e ) { status . setRollbackOnly ( ) ; LOG . error ( "Caught: " + e , e ) ; throw new RuntimeCamelException ( e ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ProceedProcessor ; import org . apache . camel . processor . UnitOfWorkProcessor ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . RouteContext ; public class DefaultRouteContext implements RouteContext { private RouteType route ; private FromType from ; private Collection < Route > routes ; private Endpoint < ? extends Exchange > endpoint ; private List < Processor > eventDrivenProcessors = new ArrayList < Processor > ( ) ; private Interceptor lastInterceptor ; private CamelContext camelContext ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private ErrorHandlerWrappingStrategy errorHandlerWrappingStrategy ; private boolean routeAdded ; public DefaultRouteContext ( RouteType route , FromType from , Collection < Route > routes ) { this . route = route ; this . from = from ; this . routes = routes ; } public DefaultRouteContext ( CamelContext camelContext ) { this . camelContext = camelContext ; routes = new ArrayList < Route > ( ) ; route = new RouteType ( "temporary" ) ; } public Endpoint < ? extends Exchange > getEndpoint ( ) { if ( endpoint == null ) { endpoint = from . resolveEndpoint ( this ) ; } return endpoint ; } public FromType getFrom ( ) { return from ; } public RouteType getRoute ( ) { return route ; } public CamelContext getCamelContext ( ) { if ( camelContext == null ) { camelContext = getRoute ( ) . getCamelContext ( ) ; } return camelContext ; } public Processor createProcessor ( ProcessorType node ) throws Exception { return node . createOutputsProcessor ( this ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) { return route . resolveEndpoint ( uri ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) { Endpoint < ? extends Exchange > endpoint = null ; if ( uri != null ) { endpoint = resolveEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } } if ( ref != null ) { endpoint = lookup ( ref , Endpoint . class ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( "ref:" + ref ) ; } } if ( endpoint == null ) { throw new IllegalArgumentException ( "Either 'uri' or 'ref' must be specified on: " + this ) ; } else { return endpoint ; } } public < T > T lookup ( String name , Class < T > type ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } public void commit ( ) { if ( ! eventDrivenProcessors . isEmpty ( ) ) { Processor processor = Pipeline . newInstance ( eventDrivenProcessors ) ; final AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; Processor unitOfWorkProcessor = new UnitOfWorkProcessor ( asyncProcessor ) ; Route edcr = new EventDrivenConsumerRoute ( getEndpoint ( ) , unitOfWorkProcessor ) ; edcr . getProperties ( ) . put ( Route . PARENT_PROPERTY , Integer . toHexString ( route . hashCode ( ) ) ) ; if ( route . getGroup ( ) != null ) { edcr . getProperties ( ) . put ( Route . GROUP_PROPERTY , route . getGroup ( ) ) ; } routes . add ( edcr ) ; } } public void addEventDrivenProcessor ( Processor processor ) { eventDrivenProcessors . add ( processor ) ; } public void intercept ( Intercept interceptor ) { lastInterceptor = ( Interceptor ) interceptor ; } public Processor createProceedProcessor ( ) { if ( lastInterceptor == null ) { throw new IllegalArgumentException ( "Cannot proceed() from outside of an interceptor!" ) ; } else { return new ProceedProcessor ( lastInterceptor ) ; } } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) { return errorHandlerWrappingStrategy ; } public void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) { errorHandlerWrappingStrategy = strategy ; } public boolean isRouteAdded ( ) { return routeAdded ; } public void setIsRouteAdded ( boolean b ) { routeAdded = b ; } } 	1
package org . apache . camel . spring ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . model . IdentifiedType ; @ XmlRootElement ( name = "proxy" ) public class CamelProxyFactoryType extends IdentifiedType { @ XmlAttribute private String serviceUrl ; @ XmlAttribute private Class serviceInterface ; } 	0
package org . apache . camel . management ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationProcessor extends DelegateProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private PerformanceCounter counter ; public InstrumentationProcessor ( PerformanceCounter counter ) { this . counter = counter ; } public InstrumentationProcessor ( ) { } public void setCounter ( PerformanceCounter counter ) { this . counter = counter ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { final long startTime = System . nanoTime ( ) ; if ( processor instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) processor ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( doneSynchronously ) ; } } ) ; } try { processor . process ( exchange ) ; } catch ( Exception e ) { exchange . setException ( e ) ; } if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( true ) ; return true ; } protected void recordTime ( Exchange exchange , double duration ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Recording duration: " + duration + " millis for exchange: " + exchange ) ; } if ( ! exchange . isFailed ( ) && exchange . getException ( ) == null ) { counter . completedExchange ( duration ) ; } else { counter . failedExchange ( ) ; } } } 	1
package org . apache . camel . component . xquery ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . Reader ; import java . io . StringWriter ; import java . net . URL ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Properties ; import java . util . Set ; import java . util . concurrent . atomic . AtomicBoolean ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . stream . StreamResult ; import org . w3c . dom . Node ; import net . sf . saxon . Configuration ; import net . sf . saxon . om . DocumentInfo ; import net . sf . saxon . om . Item ; import net . sf . saxon . om . SequenceIterator ; import net . sf . saxon . query . DynamicQueryContext ; import net . sf . saxon . query . StaticQueryContext ; import net . sf . saxon . query . XQueryExpression ; import net . sf . saxon . trans . XPathException ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeExpressionException ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . jaxp . BytesSource ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class XQueryBuilder implements Expression < Exchange > , Predicate < Exchange > , NamespaceAware , Processor { private static final transient Log LOG = LogFactory . getLog ( XQueryBuilder . class ) ; private Configuration configuration ; private XQueryExpression expression ; private StaticQueryContext staticQueryContext ; private Map < String , Object > parameters = new HashMap < String , Object > ( ) ; private Map < String , String > namespacePrefixes = new HashMap < String , String > ( ) ; private XmlConverter converter = new XmlConverter ( ) ; private ResultFormat resultsFormat = ResultFormat . DOM ; private Properties properties = new Properties ( ) ; private Class resultType ; private final AtomicBoolean initialized = new AtomicBoolean ( false ) ; @ Override public String toString ( ) { return "XQuery[" + expression + "]" ; } public void process ( Exchange exchange ) throws Exception { Object body = evaluate ( exchange ) ; exchange . getOut ( true ) . setBody ( body ) ; exchange . getOut ( ) . getHeaders ( ) . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; } public Object evaluate ( Exchange exchange ) { try { initialize ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Evaluation " + expression + " for exchange: " + exchange ) ; } if ( resultType != null ) { if ( resultType . equals ( String . class ) ) { return evaluateAsString ( exchange ) ; } else if ( resultType . isAssignableFrom ( Collection . class ) ) { return evaluateAsList ( exchange ) ; } else if ( resultType . isAssignableFrom ( Node . class ) ) { return evaluateAsDOM ( exchange ) ; } else { } } switch ( resultsFormat ) { case Bytes : return evaluateAsBytes ( exchange ) ; case BytesSource : return evaluateAsBytesSource ( exchange ) ; case DOM : return evaluateAsDOM ( exchange ) ; case List : return evaluateAsList ( exchange ) ; case StringSource : return evaluateAsStringSource ( exchange ) ; case String : default : return evaluateAsString ( exchange ) ; } } catch ( Exception e ) { throw new RuntimeExpressionException ( e ) ; } } public List evaluateAsList ( Exchange exchange ) throws Exception { initialize ( ) ; return getExpression ( ) . evaluate ( createDynamicContext ( exchange ) ) ; } public Object evaluateAsStringSource ( Exchange exchange ) throws Exception { initialize ( ) ; String text = evaluateAsString ( exchange ) ; return new StringSource ( text ) ; } public Object evaluateAsBytesSource ( Exchange exchange ) throws Exception { initialize ( ) ; byte [ ] bytes = evaluateAsBytes ( exchange ) ; return new BytesSource ( bytes ) ; } public Node evaluateAsDOM ( Exchange exchange ) throws Exception { initialize ( ) ; DOMResult result = new DOMResult ( ) ; DynamicQueryContext context = createDynamicContext ( exchange ) ; XQueryExpression expression = getExpression ( ) ; expression . pull ( context , result , properties ) ; return result . getNode ( ) ; } public byte [ ] evaluateAsBytes ( Exchange exchange ) throws Exception { initialize ( ) ; ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; Result result = new StreamResult ( buffer ) ; getExpression ( ) . pull ( createDynamicContext ( exchange ) , result , properties ) ; byte [ ] bytes = buffer . toByteArray ( ) ; return bytes ; } public String evaluateAsString ( Exchange exchange ) throws Exception { initialize ( ) ; StringWriter buffer = new StringWriter ( ) ; SequenceIterator iter = getExpression ( ) . iterator ( createDynamicContext ( exchange ) ) ; for ( Item item = iter . next ( ) ; item != null ; item = iter . next ( ) ) { buffer . append ( item . getStringValueCS ( ) ) ; } return buffer . toString ( ) ; } public boolean matches ( Exchange exchange ) { try { List list = evaluateAsList ( exchange ) ; return matches ( exchange , list ) ; } catch ( Exception e ) { throw new RuntimeExpressionException ( e ) ; } } public void assertMatches ( String text , Exchange exchange ) throws AssertionError { try { List list = evaluateAsList ( exchange ) ; if ( ! matches ( exchange , list ) ) { throw new AssertionError ( this + " failed on " + exchange + " as evaluated: " + list ) ; } } catch ( Exception e ) { throw new AssertionError ( e ) ; } } public static XQueryBuilder xquery ( final String queryText ) { return new XQueryBuilder ( ) { protected XQueryExpression createQueryExpression ( StaticQueryContext staticQueryContext ) throws XPathException { return staticQueryContext . compileQuery ( queryText ) ; } } ; } public static XQueryBuilder xquery ( final Reader reader ) { return new XQueryBuilder ( ) { protected XQueryExpression createQueryExpression ( StaticQueryContext staticQueryContext ) throws XPathException , IOException { return staticQueryContext . compileQuery ( reader ) ; } } ; } public static XQueryBuilder xquery ( final InputStream in , final String characterSet ) { return new XQueryBuilder ( ) { protected XQueryExpression createQueryExpression ( StaticQueryContext staticQueryContext ) throws XPathException , IOException { return staticQueryContext . compileQuery ( in , characterSet ) ; } } ; } public static XQueryBuilder xquery ( File file , String characterSet ) throws FileNotFoundException { return xquery ( IOConverter . toInputStream ( file ) , characterSet ) ; } public static XQueryBuilder xquery ( URL url , String characterSet ) throws IOException { return xquery ( IOConverter . toInputStream ( url ) , characterSet ) ; } public static XQueryBuilder xquery ( File file ) throws FileNotFoundException { return xquery ( IOConverter . toInputStream ( file ) , ObjectHelper . getDefaultCharacterSet ( ) ) ; } public static XQueryBuilder xquery ( URL url ) throws IOException { return xquery ( IOConverter . toInputStream ( url ) , ObjectHelper . getDefaultCharacterSet ( ) ) ; } public XQueryBuilder parameter ( String name , Object value ) { parameters . put ( name , value ) ; return this ; } public XQueryBuilder namespace ( String prefix , String uri ) { namespacePrefixes . put ( prefix , uri ) ; initialized . set ( false ) ; return this ; } public XQueryBuilder resultType ( Class resultType ) { setResultType ( resultType ) ; return this ; } public XQueryBuilder asBytes ( ) { setResultsFormat ( ResultFormat . Bytes ) ; return this ; } public XQueryBuilder asBytesSource ( ) { setResultsFormat ( ResultFormat . BytesSource ) ; return this ; } public XQueryBuilder asDOM ( ) { setResultsFormat ( ResultFormat . DOM ) ; return this ; } public XQueryBuilder asDOMSource ( ) { setResultsFormat ( ResultFormat . DOMSource ) ; return this ; } public XQueryBuilder asList ( ) { setResultsFormat ( ResultFormat . List ) ; return this ; } public XQueryBuilder asString ( ) { setResultsFormat ( ResultFormat . String ) ; return this ; } public XQueryBuilder asStringSource ( ) { setResultsFormat ( ResultFormat . StringSource ) ; return this ; } public void setNamespaces ( Map < String , String > namespaces ) { namespacePrefixes . putAll ( namespaces ) ; initialized . set ( false ) ; } public XQueryExpression getExpression ( ) throws IOException , XPathException { return expression ; } public Configuration getConfiguration ( ) { return configuration ; } public void setConfiguration ( Configuration configuration ) { this . configuration = configuration ; initialized . set ( false ) ; } public StaticQueryContext getStaticQueryContext ( ) { return staticQueryContext ; } public void setStaticQueryContext ( StaticQueryContext staticQueryContext ) { this . staticQueryContext = staticQueryContext ; initialized . set ( false ) ; } public Map < String , Object > getParameters ( ) { return parameters ; } public void setParameters ( Map < String , Object > parameters ) { this . parameters = parameters ; } public Properties getProperties ( ) { return properties ; } public void setProperties ( Properties properties ) { this . properties = properties ; } public ResultFormat getResultsFormat ( ) { return resultsFormat ; } public void setResultsFormat ( ResultFormat resultsFormat ) { this . resultsFormat = resultsFormat ; } public Class getResultType ( ) { return resultType ; } public void setResultType ( Class resultType ) { this . resultType = resultType ; } protected abstract XQueryExpression createQueryExpression ( StaticQueryContext staticQueryContext ) throws XPathException , IOException ; protected DynamicQueryContext createDynamicContext ( Exchange exchange ) throws Exception { Configuration config = getConfiguration ( ) ; DynamicQueryContext dynamicQueryContext = new DynamicQueryContext ( config ) ; Message in = exchange . getIn ( ) ; Item item = in . getBody ( Item . class ) ; Source source = null ; if ( item != null ) { dynamicQueryContext . setContextItem ( item ) ; } else { source = in . getBody ( Source . class ) ; if ( source == null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No body available on exchange so using an empty document: " + exchange ) ; } source = converter . toSource ( converter . createDocument ( ) ) ; } DocumentInfo doc = getStaticQueryContext ( ) . buildDocument ( source ) ; dynamicQueryContext . setContextItem ( doc ) ; } configureQuery ( dynamicQueryContext , exchange ) ; return dynamicQueryContext ; } protected void configureQuery ( DynamicQueryContext dynamicQueryContext , Exchange exchange ) throws Exception { addParameters ( dynamicQueryContext , exchange . getProperties ( ) ) ; addParameters ( dynamicQueryContext , exchange . getIn ( ) . getHeaders ( ) ) ; addParameters ( dynamicQueryContext , getParameters ( ) ) ; dynamicQueryContext . setParameter ( "exchange" , exchange ) ; if ( exchange . getPattern ( ) . isOutCapable ( ) ) { dynamicQueryContext . setParameter ( "out" , exchange . getOut ( ) ) ; } } protected void addParameters ( DynamicQueryContext dynamicQueryContext , Map < String , Object > map ) { Set < Map . Entry < String , Object > > propertyEntries = map . entrySet ( ) ; for ( Map . Entry < String , Object > entry : propertyEntries ) { dynamicQueryContext . setParameter ( entry . getKey ( ) , entry . getValue ( ) ) ; } } protected boolean matches ( Exchange exchange , List results ) { return ObjectHelper . matches ( results ) ; } protected synchronized void initialize ( ) throws XPathException , IOException { if ( ! initialized . get ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Initializing XQueryBuilder " + this ) ; } configuration = new Configuration ( ) ; configuration . setHostLanguage ( Configuration . XQUERY ) ; staticQueryContext = new StaticQueryContext ( getConfiguration ( ) ) ; Set < Map . Entry < String , String > > entries = namespacePrefixes . entrySet ( ) ; for ( Map . Entry < String , String > entry : entries ) { String prefix = entry . getKey ( ) ; String uri = entry . getValue ( ) ; staticQueryContext . declareNamespace ( prefix , uri ) ; staticQueryContext . setInheritNamespaces ( true ) ; } expression = createQueryExpression ( staticQueryContext ) ; initialized . set ( true ) ; } } } 	0
package org . apache . camel . impl . converter ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Method ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; import static java . lang . reflect . Modifier . isAbstract ; import static java . lang . reflect . Modifier . isPublic ; import static java . lang . reflect . Modifier . isStatic ; import org . apache . camel . Converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ResolverUtil ; import org . apache . camel . util . WebSphereResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AnnotationTypeConverterLoader implements TypeConverterLoader { public static final String META_INF_SERVICES = "META-INF/services/org/apache/camel/TypeConverter" ; private static final transient Log LOG = LogFactory . getLog ( AnnotationTypeConverterLoader . class ) ; private ResolverUtil resolver = new ResolverUtil ( ) ; private Set < Class > visitedClasses = new HashSet < Class > ( ) ; public AnnotationTypeConverterLoader ( ) { if ( WebSphereResolverUtil . isWebSphereClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ) { LOG . info ( "Using WebSphere specific ResolverUtil" ) ; resolver = new WebSphereResolverUtil ( META_INF_SERVICES ) ; } } public void load ( TypeConverterRegistry registry ) throws Exception { String [ ] packageNames = findPackageNames ( ) ; resolver . findAnnotated ( Converter . class , packageNames ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class type : classes ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading converter class: " + ObjectHelper . name ( type ) ) ; } loadConverterMethods ( registry , type ) ; } } protected String [ ] findPackageNames ( ) throws IOException { Set < String > packages = new HashSet < String > ( ) ; findPackages ( packages , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; findPackages ( packages , getClass ( ) . getClassLoader ( ) ) ; return packages . toArray ( new String [ packages . size ( ) ] ) ; } protected void findPackages ( Set < String > packages , ClassLoader classLoader ) throws IOException { Enumeration < URL > resources = classLoader . getResources ( META_INF_SERVICES ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; if ( url != null ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ; try { while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } finally { ObjectHelper . close ( reader , null , LOG ) ; } } } } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected void loadConverterMethods ( TypeConverterRegistry registry , Class type ) { if ( visitedClasses . contains ( type ) ) { return ; } visitedClasses . add ( type ) ; try { Method [ ] methods = type . getDeclaredMethods ( ) ; CachingInjector injector = null ; for ( Method method : methods ) { Converter annotation = method . getAnnotation ( Converter . class ) ; if ( annotation != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes == null || parameterTypes . length != 1 ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method should have one parameter" ) ; } else { int modifiers = method . getModifiers ( ) ; if ( isAbstract ( modifiers ) || ! isPublic ( modifiers ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method is not a public and concrete method" ) ; } else { Class toType = method . getReturnType ( ) ; if ( toType . equals ( Void . class ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method returns a void method" ) ; } else { Class fromType = parameterTypes [ 0 ] ; if ( isStatic ( modifiers ) ) { registerTypeConverter ( registry , method , toType , fromType , new StaticMethodTypeConverter ( method ) ) ; } else { if ( injector == null ) { injector = new CachingInjector ( registry , type ) ; } registerTypeConverter ( registry , method , toType , fromType , new InstanceMethodTypeConverter ( injector , method ) ) ; } } } } } } Class superclass = type . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { loadConverterMethods ( registry , superclass ) ; } } catch ( NoClassDefFoundError e ) { LOG . debug ( "Ignoring converter type: " + type . getName ( ) + " as a dependent class could not be found: " + e , e ) ; } } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { registry . addTypeConverter ( toType , fromType , typeConverter ) ; } } 	1
package org . apache . camel . component . jdbc ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . DefaultExchange ; public class JdbcComponent extends DefaultComponent < DefaultExchange > { public JdbcComponent ( ) { } public JdbcComponent ( CamelContext context ) { super ( context ) ; } @ Override protected Endpoint < DefaultExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new JdbcEndpoint ( uri , remaining , this ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; public interface ErrorHandlerBuilder { ErrorHandlerBuilder copy ( ) ; Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception ; void addErrorHandlers ( ExceptionType exception ) ; } 	1
package org . apache . camel . model . loadbalancer ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; @ XmlRootElement ( name = "sticky" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class StickyLoadBalanceStrategy extends LoadBalancerType { @ XmlElement ( required = true , name = "expression" , type = ExpressionType . class ) private ExpressionType expressionType ; @ XmlElement ( required = false , name = "loadBalancer" , type = ExpressionType . class ) private LoadBalancerType loadBalancerType ; public StickyLoadBalanceStrategy ( ) { super ( "org.apache.camel.processor.loadbalancer.StickyLoadBalancer" ) ; } public StickyLoadBalanceStrategy ( ExpressionType expressionType ) { this ( ) ; this . expressionType = expressionType ; } public StickyLoadBalanceStrategy ( ExpressionType expressionType , LoadBalancerType loadBalancerType ) { this ( ) ; this . expressionType = expressionType ; this . loadBalancerType = loadBalancerType ; } public void setExpressionType ( ExpressionType expressionType ) { this . expressionType = expressionType ; } public ExpressionType getExpressionType ( ) { return expressionType ; } public void setLoadBalancerType ( LoadBalancerType loadBalancerType ) { this . loadBalancerType = loadBalancerType ; } public LoadBalancerType getLoadBalancerType ( ) { return loadBalancerType ; } @ Override protected void configureLoadBalancer ( LoadBalancer loadBalancer ) { ExpressionType expression = getExpressionType ( ) ; if ( expression != null ) { setProperty ( loadBalancer , "correlationExpression" , expression ) ; } LoadBalancerType type = getLoadBalancerType ( ) ; if ( type != null ) { setProperty ( loadBalancer , "loadBalancer" , type ) ; } } @ Override public String toString ( ) { return "StickyLoadBalanceStrategy[" + expressionType + ", " + loadBalancerType + "]" ; } } 	0
package org . apache . camel . model . dataformat ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Exchange ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "dataFormatType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DataFormatType extends IdentifiedType implements DataFormat { @ XmlTransient private DataFormat dataFormat ; @ XmlTransient private String dataFormatTypeName ; public DataFormatType ( ) { } public DataFormatType ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } protected DataFormatType ( String dataFormatTypeName ) { this . dataFormatTypeName = dataFormatTypeName ; } public static DataFormat getDataFormat ( RouteContext routeContext , DataFormatType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; DataFormat dataFormat = routeContext . lookup ( ref , DataFormat . class ) ; if ( dataFormat instanceof DataFormatType ) { type = ( DataFormatType ) dataFormat ; } else { return dataFormat ; } } return type . getDataFormat ( routeContext ) ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; dataFormat . marshal ( exchange , graph , stream ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; return dataFormat . unmarshal ( exchange , stream ) ; } public DataFormat getDataFormat ( RouteContext routeContext ) { if ( dataFormat == null ) { dataFormat = createDataFormat ( routeContext ) ; ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; configureDataFormat ( dataFormat ) ; } return dataFormat ; } protected DataFormat createDataFormat ( RouteContext routeContext ) { if ( dataFormatTypeName != null ) { Class type = ObjectHelper . loadClass ( dataFormatTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + dataFormatTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } return ( DataFormat ) ObjectHelper . newInstance ( type ) ; } return null ; } protected void configureDataFormat ( DataFormat dataFormat ) { } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } } 	1
package org . apache . camel . language . ognl ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; public class RootObject { private final Exchange exchange ; public RootObject ( Exchange exchange ) { this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } public CamelContext getContext ( ) { return exchange . getContext ( ) ; } public Throwable getException ( ) { return exchange . getException ( ) ; } public String getExchangeId ( ) { return exchange . getExchangeId ( ) ; } public Message getFault ( ) { return exchange . getFault ( ) ; } public Message getRequest ( ) { return exchange . getIn ( ) ; } public Message getIn ( ) { return exchange . getIn ( ) ; } public Message getOut ( ) { return exchange . getOut ( ) ; } public Message getResponse ( ) { return exchange . getOut ( ) ; } public Map < String , Object > getProperties ( ) { return exchange . getProperties ( ) ; } public Object getProperty ( String name ) { return exchange . getProperty ( name ) ; } public < T > T getProperty ( String name , Class < T > type ) { return exchange . getProperty ( name , type ) ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultExchange implements Exchange { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; protected final CamelContext context ; private Map < String , Object > properties ; private Message in ; private Message out ; private Message fault ; private Throwable exception ; private String exchangeId ; private UnitOfWork unitOfWork ; private ExchangePattern pattern ; public DefaultExchange ( CamelContext context ) { this ( context , ExchangePattern . InOnly ) ; } public DefaultExchange ( CamelContext context , ExchangePattern pattern ) { this . context = context ; this . pattern = pattern ; } public DefaultExchange ( DefaultExchange parent ) { this ( parent . getContext ( ) , parent . getPattern ( ) ) ; this . unitOfWork = parent . getUnitOfWork ( ) ; } @ Override public String toString ( ) { return "Exchange[" + in + "]" ; } public Exchange copy ( ) { Exchange exchange = newInstance ( ) ; exchange . copyFrom ( this ) ; return exchange ; } public void copyFrom ( Exchange exchange ) { if ( exchange == this ) { return ; } setProperties ( safeCopy ( exchange . getProperties ( ) ) ) ; safeCopy ( getIn ( ) , exchange , exchange . getIn ( ) ) ; Message copyOut = exchange . getOut ( false ) ; if ( copyOut != null ) { safeCopy ( getOut ( true ) , exchange , copyOut ) ; } Message copyFault = exchange . getFault ( false ) ; if ( copyFault != null ) { safeCopy ( getFault ( true ) , exchange , copyFault ) ; } setException ( exchange . getException ( ) ) ; unitOfWork = exchange . getUnitOfWork ( ) ; pattern = exchange . getPattern ( ) ; } private static void safeCopy ( Message message , Exchange exchange , Message that ) { if ( message != null ) { message . copyFrom ( that ) ; } } private static Map < String , Object > safeCopy ( Map < String , Object > properties ) { if ( properties == null ) { return null ; } return new HashMap < String , Object > ( properties ) ; } private static Message safeCopy ( Exchange exchange , Message message ) { if ( message == null ) { return null ; } Message answer = message . copy ( ) ; if ( answer instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) answer ; messageSupport . setExchange ( exchange ) ; } return answer ; } public Exchange newInstance ( ) { return new DefaultExchange ( this ) ; } public CamelContext getContext ( ) { return context ; } public Object getProperty ( String name ) { if ( properties != null ) { return properties . get ( name ) ; } return null ; } public < T > T getProperty ( String name , Class < T > type ) { Object value = getProperty ( name ) ; ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { validateExchangePropertyIsExpectedType ( property , type , value ) ; } return getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setProperty ( String name , Object value ) { ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { Class type = value . getClass ( ) ; validateExchangePropertyIsExpectedType ( property , type , value ) ; } getProperties ( ) . put ( name , value ) ; } private < T > void validateExchangePropertyIsExpectedType ( ExchangeProperty < ? > property , Class < T > type , Object value ) { if ( value != null && property != null && ! property . type ( ) . isAssignableFrom ( type ) ) { throw new RuntimeCamelException ( "Type cast exception while getting an " + "Exchange Property value '" + value . toString ( ) + "' on Exchange " + this + " for a well known Exchange Property with these traits: " + property ) ; } } public Object removeProperty ( String name ) { return getProperties ( ) . remove ( name ) ; } public Map < String , Object > getProperties ( ) { if ( properties == null ) { properties = new HashMap < String , Object > ( ) ; } return properties ; } public void setProperties ( Map < String , Object > properties ) { this . properties = properties ; } public Message getIn ( ) { if ( in == null ) { in = createInMessage ( ) ; configureMessage ( in ) ; } return in ; } public void setIn ( Message in ) { this . in = in ; configureMessage ( in ) ; } public Message getOut ( ) { return getOut ( true ) ; } public Message getOut ( boolean lazyCreate ) { if ( out == null && lazyCreate ) { out = createOutMessage ( ) ; configureMessage ( out ) ; } return out ; } public void setOut ( Message out ) { this . out = out ; configureMessage ( out ) ; } public Throwable getException ( ) { return exception ; } public void setException ( Throwable exception ) { this . exception = exception ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } public void throwException ( ) throws Exception { if ( exception == null ) { return ; } if ( exception instanceof RuntimeException ) { throw ( RuntimeException ) exception ; } if ( exception instanceof Exception ) { throw ( Exception ) exception ; } throw new RuntimeCamelException ( exception ) ; } public Message getFault ( ) { return getFault ( true ) ; } public Message getFault ( boolean lazyCreate ) { if ( fault == null && lazyCreate ) { fault = createFaultMessage ( ) ; configureMessage ( fault ) ; } return fault ; } public void setFault ( Message fault ) { this . fault = fault ; configureMessage ( fault ) ; } public String getExchangeId ( ) { if ( exchangeId == null ) { exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( ) ; } return exchangeId ; } public void setExchangeId ( String id ) { this . exchangeId = id ; } public boolean isFailed ( ) { Message faultMessage = getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return getException ( ) != null ; } public boolean isTransacted ( ) { ExchangeProperty < ? > property = ExchangeProperty . get ( "transacted" ) ; return property != null && property . get ( this ) == Boolean . TRUE ; } public UnitOfWork getUnitOfWork ( ) { return unitOfWork ; } public void setUnitOfWork ( UnitOfWork unitOfWork ) { this . unitOfWork = unitOfWork ; } protected Message createInMessage ( ) { return new DefaultMessage ( ) ; } protected Message createOutMessage ( ) { return new DefaultMessage ( ) ; } protected Message createFaultMessage ( ) { return new DefaultMessage ( ) ; } protected void configureMessage ( Message message ) { if ( message instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) message ; messageSupport . setExchange ( this ) ; } } } 	1
package org . apache . camel . component . quartz ; import java . net . URI ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . quartz . CronTrigger ; import org . quartz . JobDetail ; import org . quartz . Scheduler ; import org . quartz . SchedulerException ; import org . quartz . SchedulerFactory ; import org . quartz . Trigger ; import org . quartz . impl . StdSchedulerFactory ; public class QuartzComponent extends DefaultComponent < QuartzExchange > { private static final transient Log LOG = LogFactory . getLog ( QuartzComponent . class ) ; private SchedulerFactory factory ; private Scheduler scheduler ; private Map < Trigger , JobDetail > triggers ; public QuartzComponent ( ) { } public QuartzComponent ( CamelContext context ) { super ( context ) ; } @ Override protected QuartzEndpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { QuartzEndpoint answer = new QuartzEndpoint ( uri , this , getScheduler ( ) ) ; URI u = new URI ( uri ) ; String name ; String group = "Camel" ; String path = u . getPath ( ) ; CronTrigger cronTrigger = null ; if ( path != null && path . length ( ) > 1 ) { if ( path . startsWith ( "/" ) ) { path = path . substring ( 1 ) ; } int idx = path . indexOf ( '/' ) ; if ( idx > 0 ) { cronTrigger = new CronTrigger ( ) ; name = path . substring ( 0 , idx ) ; String cronExpression = path . substring ( idx + 1 ) ; cronExpression = cronExpression . replace ( '/' , ' ' ) ; cronExpression = cronExpression . replace ( '$' , '?' ) ; LOG . debug ( "Creating cron trigger: " + cronExpression ) ; cronTrigger . setCronExpression ( cronExpression ) ; answer . setTrigger ( cronTrigger ) ; } else { name = path ; } group = u . getHost ( ) ; } else { name = u . getHost ( ) ; } Trigger trigger = cronTrigger ; if ( trigger == null ) { trigger = answer . getTrigger ( ) ; } trigger . setName ( name ) ; trigger . setGroup ( group ) ; Map triggerParameters = IntrospectionSupport . extractProperties ( parameters , "trigger." ) ; Map jobParameters = IntrospectionSupport . extractProperties ( parameters , "job." ) ; setProperties ( trigger , triggerParameters ) ; setProperties ( answer . getJobDetail ( ) , jobParameters ) ; return answer ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; getScheduler ( ) . start ( ) ; } @ Override protected void doStop ( ) throws Exception { if ( scheduler != null ) { scheduler . shutdown ( ) ; } super . doStop ( ) ; } public SchedulerFactory getFactory ( ) { if ( factory == null ) { factory = createSchedulerFactory ( ) ; } return factory ; } public void setFactory ( SchedulerFactory factory ) { this . factory = factory ; } public Scheduler getScheduler ( ) throws SchedulerException { if ( scheduler == null ) { scheduler = createScheduler ( ) ; } return scheduler ; } public void setScheduler ( Scheduler scheduler ) { this . scheduler = scheduler ; } public Map getTriggers ( ) { return triggers ; } public void setTriggers ( Map triggers ) { this . triggers = triggers ; } protected SchedulerFactory createSchedulerFactory ( ) { return new StdSchedulerFactory ( ) ; } protected Scheduler createScheduler ( ) throws SchedulerException { return getFactory ( ) . getScheduler ( ) ; } } 	0
package org . apache . camel . model ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . loadbalancer . LoadBalancerType ; import org . apache . camel . model . loadbalancer . RandomLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . RoundRobinLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . StickyLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . TopicLoadBalanceStrategy ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RandomLoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . processor . loadbalancer . StickyLoadBalancer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; @ XmlRootElement ( name = "loadBalance" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalanceType extends OutputType < LoadBalanceType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "roundRobin" , type = RoundRobinLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "random" , type = RandomLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "sticky" , type = StickyLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "topic" , type = TopicLoadBalanceStrategy . class ) } ) private LoadBalancerType loadBalancerType ; public LoadBalanceType ( ) { } @ Override public String getShortName ( ) { return "loadbalance" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public LoadBalancerType getLoadBalancerType ( ) { return loadBalancerType ; } public void setLoadBalancerType ( LoadBalancerType loadbalancer ) { loadBalancerType = loadbalancer ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : outputs ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : getOutputs ( ) ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } public LoadBalanceType setLoadBalancer ( LoadBalancer loadBalancer ) { loadBalancerType = new LoadBalancerType ( loadBalancer ) ; return this ; } public LoadBalanceType roundRobin ( ) { loadBalancerType = new LoadBalancerType ( new RoundRobinLoadBalancer ( ) ) ; return this ; } public LoadBalanceType random ( ) { loadBalancerType = new LoadBalancerType ( new RandomLoadBalancer ( ) ) ; return this ; } public LoadBalanceType sticky ( Expression < Exchange > correlationExpression ) { loadBalancerType = new LoadBalancerType ( new StickyLoadBalancer ( correlationExpression ) ) ; return this ; } public LoadBalanceType topic ( ) { loadBalancerType = new LoadBalancerType ( new TopicLoadBalancer ( ) ) ; return this ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < ProcessorType < ? > > list = getOutputs ( ) ; for ( ProcessorType < ? > processorType : list ) { buffer . append ( processorType . getLabel ( ) ) ; } return buffer . toString ( ) ; } @ Override public String toString ( ) { String result ; if ( loadBalancerType != null ) { result = "LoadBalanceType[" + loadBalancerType + ", " ; } else { result = "LoadBalanceType[" + ref + ", " ; } result = result + getOutputs ( ) + "]" ; return result ; } } 	1
package org . apache . camel . language . juel ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . List ; import javax . el . BeanELResolver ; import javax . el . ELContext ; import javax . el . PropertyNotFoundException ; public class BeanAndMethodELResolver extends BeanELResolver { public BeanAndMethodELResolver ( ) { super ( false ) ; } @ Override public Object getValue ( ELContext elContext , Object base , Object property ) { try { return super . getValue ( elContext , base , property ) ; } catch ( PropertyNotFoundException e ) { Method method = findMethod ( elContext , base , property ) ; if ( method != null ) { elContext . setPropertyResolved ( true ) ; return method ; } else { throw e ; } } } protected Method findMethod ( ELContext elContext , Object base , Object property ) { if ( base != null && property instanceof String ) { Method [ ] methods = base . getClass ( ) . getMethods ( ) ; List < Method > matching = new ArrayList < Method > ( ) ; for ( Method method : methods ) { if ( method . getName ( ) . equals ( property ) && Modifier . isPublic ( method . getModifiers ( ) ) ) { matching . add ( method ) ; } } int size = matching . size ( ) ; if ( size > 0 ) { if ( size > 1 ) { for ( Method method : matching ) { Class < ? > [ ] paramTypes = method . getParameterTypes ( ) ; if ( paramTypes . length == 1 ) { return method ; } } } return matching . get ( 0 ) ; } } return null ; } } 	0
package org . apache . camel . processor . aggregate ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class PredicateAggregationCollection extends AggregationCollection { private Predicate aggregationCompletedPredicate ; private List < Exchange > collection = new ArrayList < Exchange > ( ) ; public PredicateAggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { super ( correlationExpression , aggregationStrategy ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } @ Override protected void onAggregation ( Object correlationKey , Exchange newExchange ) { if ( aggregationCompletedPredicate . matches ( newExchange ) ) { super . getMap ( ) . remove ( correlationKey ) ; collection . add ( newExchange ) ; } } @ Override public Iterator < Exchange > iterator ( ) { return collection . iterator ( ) ; } @ Override public int size ( ) { return collection . size ( ) ; } @ Override public void clear ( ) { collection . clear ( ) ; super . clear ( ) ; } } 	1
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import static org . apache . camel . util . ObjectHelper . notNull ; public abstract class BinaryPredicateSupport < E extends Exchange > implements Predicate < E > { private final Expression < E > left ; private final Expression < E > right ; protected BinaryPredicateSupport ( Expression < E > left , Expression < E > right ) { notNull ( left , "left" ) ; notNull ( right , "right" ) ; this . left = left ; this . right = right ; } @ Override public String toString ( ) { return left + " " + getOperationText ( ) + " " + right ; } public boolean matches ( E exchange ) { Object leftValue = left . evaluate ( exchange ) ; Object rightValue = right . evaluate ( exchange ) ; return matches ( exchange , leftValue , rightValue ) ; } public void assertMatches ( String text , E exchange ) { Object leftValue = left . evaluate ( exchange ) ; Object rightValue = right . evaluate ( exchange ) ; if ( ! matches ( exchange , leftValue , rightValue ) ) { throw new AssertionError ( text + assertionFailureMessage ( exchange , leftValue , rightValue ) ) ; } } protected abstract boolean matches ( E exchange , Object leftValue , Object rightValue ) ; protected abstract String getOperationText ( ) ; protected String assertionFailureMessage ( E exchange , Object leftValue , Object rightValue ) { return this + " failed on " + exchange + " with left value <" + leftValue + "> right value <" + rightValue + ">" ; } } 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Body ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Header ; import org . apache . camel . Headers ; import org . apache . camel . Message ; import org . apache . camel . OutHeaders ; import org . apache . camel . Properties ; import org . apache . camel . Property ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ExchangeHelper . convertToType ; public class BeanInfo { private static final transient Log LOG = LogFactory . getLog ( BeanInfo . class ) ; private final CamelContext camelContext ; private Class type ; private ParameterMappingStrategy strategy ; private Map < String , MethodInfo > operations = new ConcurrentHashMap < String , MethodInfo > ( ) ; private MethodInfo defaultMethod ; private List < MethodInfo > operationsWithBody = new ArrayList < MethodInfo > ( ) ; private List < MethodInfo > operationsWithCustomAnnotation = new ArrayList < MethodInfo > ( ) ; public BeanInfo ( CamelContext camelContext , Class type ) { this ( camelContext , type , createParameterMappingStrategy ( camelContext ) ) ; } public BeanInfo ( CamelContext camelContext , Class type , ParameterMappingStrategy strategy ) { this . camelContext = camelContext ; this . type = type ; this . strategy = strategy ; introspect ( getType ( ) ) ; if ( operations . size ( ) == 1 ) { Collection < MethodInfo > methodInfos = operations . values ( ) ; for ( MethodInfo methodInfo : methodInfos ) { defaultMethod = methodInfo ; } } } public Class getType ( ) { return type ; } public CamelContext getCamelContext ( ) { return camelContext ; } public MethodInvocation createInvocation ( Method method , Object pojo , Exchange exchange ) throws RuntimeCamelException { MethodInfo methodInfo = introspect ( type , method ) ; if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } public MethodInvocation createInvocation ( Object pojo , Exchange exchange ) throws RuntimeCamelException , AmbiguousMethodCallException { MethodInfo methodInfo = null ; String name = exchange . getIn ( ) . getHeader ( BeanProcessor . METHOD_NAME , String . class ) ; if ( name != null ) { methodInfo = operations . get ( name ) ; } if ( methodInfo == null ) { methodInfo = chooseMethod ( pojo , exchange ) ; } if ( methodInfo == null ) { methodInfo = defaultMethod ; } if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } protected void introspect ( Class clazz ) { Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( isValidMethod ( clazz , method ) ) { introspect ( clazz , method ) ; } } Class superclass = clazz . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { introspect ( superclass ) ; } } protected MethodInfo introspect ( Class clazz , Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; Annotation [ ] [ ] parametersAnnotations = method . getParameterAnnotations ( ) ; List < ParameterInfo > parameters = new ArrayList < ParameterInfo > ( ) ; List < ParameterInfo > bodyParameters = new ArrayList < ParameterInfo > ( ) ; boolean hasCustomAnnotation = false ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { Class parameterType = parameterTypes [ i ] ; Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] ; Expression expression = createParameterUnmarshalExpression ( clazz , method , parameterType , parameterAnnotations ) ; hasCustomAnnotation |= expression != null ; ParameterInfo parameterInfo = new ParameterInfo ( i , parameterType , parameterAnnotations , expression ) ; parameters . add ( parameterInfo ) ; if ( expression == null ) { hasCustomAnnotation |= ObjectHelper . hasAnnotation ( parameterAnnotations , Body . class ) ; if ( bodyParameters . isEmpty ( ) ) { if ( Exchange . class . isAssignableFrom ( parameterType ) ) { expression = ExpressionBuilder . exchangeExpression ( ) ; } else { expression = ExpressionBuilder . bodyExpression ( parameterType ) ; } parameterInfo . setExpression ( expression ) ; bodyParameters . add ( parameterInfo ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No expression available for method: " + method . toString ( ) + " which already has a body so ignoring parameter: " + i + " so ignoring method" ) ; } return null ; } } } String opName = method . getName ( ) ; MethodInfo methodInfo = new MethodInfo ( clazz , method , parameters , bodyParameters , hasCustomAnnotation ) ; operations . put ( opName , methodInfo ) ; if ( methodInfo . hasBodyParameter ( ) ) { operationsWithBody . add ( methodInfo ) ; } if ( methodInfo . isHasCustomAnnotation ( ) && ! methodInfo . hasBodyParameter ( ) ) { operationsWithCustomAnnotation . add ( methodInfo ) ; } return methodInfo ; } protected MethodInfo chooseMethod ( Object pojo , Exchange exchange ) throws AmbiguousMethodCallException { if ( operationsWithBody . size ( ) == 1 ) { return operationsWithBody . get ( 0 ) ; } else if ( ! operationsWithBody . isEmpty ( ) ) { return chooseMethodWithMatchingBody ( exchange , operationsWithBody ) ; } else if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return null ; } protected MethodInfo chooseMethodWithMatchingBody ( Exchange exchange , Collection < MethodInfo > operationList ) throws AmbiguousMethodCallException { Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; if ( body != null ) { Class bodyType = body . getClass ( ) ; List < MethodInfo > possibles = new ArrayList < MethodInfo > ( ) ; for ( MethodInfo methodInfo : operationList ) { boolean out = exchange . getPattern ( ) . isOutCapable ( ) ; if ( out && methodInfo . isReturnTypeVoid ( ) ) { continue ; } if ( methodInfo . bodyParameterMatches ( bodyType ) ) { possibles . add ( methodInfo ) ; } } if ( possibles . size ( ) == 1 ) { return possibles . get ( 0 ) ; } else if ( possibles . isEmpty ( ) ) { Object newBody = null ; MethodInfo matched = null ; for ( MethodInfo methodInfo : operationList ) { Object value = convertToType ( exchange , methodInfo . getBodyParameterType ( ) , body ) ; if ( value != null ) { if ( newBody != null ) { throw new AmbiguousMethodCallException ( exchange , Arrays . asList ( matched , methodInfo ) ) ; } else { newBody = value ; matched = methodInfo ; } } } if ( matched != null ) { in . setBody ( newBody ) ; return matched ; } } else { if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return chooseMethodWithCustomAnnotations ( exchange , possibles ) ; } } return null ; } protected MethodInfo chooseMethodWithCustomAnnotations ( Exchange exchange , Collection < MethodInfo > possibles ) throws AmbiguousMethodCallException { MethodInfo chosen = null ; for ( MethodInfo possible : possibles ) { if ( possible . isHasCustomAnnotation ( ) ) { if ( chosen != null ) { chosen = null ; break ; } else { chosen = possible ; } } } if ( chosen != null ) { return chosen ; } throw new AmbiguousMethodCallException ( exchange , possibles ) ; } protected Expression createParameterUnmarshalExpression ( Class clazz , Method method , Class parameterType , Annotation [ ] parameterAnnotation ) { for ( Annotation annotation : parameterAnnotation ) { Expression answer = createParameterUnmarshalExpressionForAnnotation ( clazz , method , parameterType , annotation ) ; if ( answer != null ) { return answer ; } } return strategy . getDefaultParameterTypeExpression ( parameterType ) ; } protected boolean isPossibleBodyParameter ( Annotation [ ] annotations ) { if ( annotations != null ) { for ( Annotation annotation : annotations ) { if ( ( annotation instanceof Property ) || ( annotation instanceof Header ) || ( annotation instanceof Headers ) || ( annotation instanceof OutHeaders ) || ( annotation instanceof Properties ) ) { return false ; } LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { return false ; } } } return true ; } protected Expression createParameterUnmarshalExpressionForAnnotation ( Class clazz , Method method , Class parameterType , Annotation annotation ) { if ( annotation instanceof Property ) { Property propertyAnnotation = ( Property ) annotation ; return ExpressionBuilder . propertyExpression ( propertyAnnotation . name ( ) ) ; } else if ( annotation instanceof Properties ) { return ExpressionBuilder . propertiesExpression ( ) ; } else if ( annotation instanceof Header ) { Header headerAnnotation = ( Header ) annotation ; return ExpressionBuilder . headerExpression ( headerAnnotation . name ( ) ) ; } else if ( annotation instanceof Headers ) { return ExpressionBuilder . headersExpression ( ) ; } else if ( annotation instanceof OutHeaders ) { return ExpressionBuilder . outHeadersExpression ( ) ; } else { LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { Class < ? > type = languageAnnotation . factory ( ) ; Object object = camelContext . getInjector ( ) . newInstance ( type ) ; if ( object instanceof AnnotationExpressionFactory ) { AnnotationExpressionFactory expressionFactory = ( AnnotationExpressionFactory ) object ; return expressionFactory . createExpression ( camelContext , annotation , languageAnnotation , parameterType ) ; } else { LOG . error ( "Ignoring bad annotation: " + languageAnnotation + "on method: " + method + " which declares a factory: " + type . getName ( ) + " which does not implement " + AnnotationExpressionFactory . class . getName ( ) ) ; } } } return null ; } protected boolean isValidMethod ( Class clazz , Method method ) { if ( ! Modifier . isPublic ( method . getModifiers ( ) ) ) { return false ; } if ( method . getReturnType ( ) != null && Exchange . class . isAssignableFrom ( method . getReturnType ( ) ) ) { return false ; } return true ; } public static ParameterMappingStrategy createParameterMappingStrategy ( CamelContext camelContext ) { Registry registry = camelContext . getRegistry ( ) ; ParameterMappingStrategy answer = registry . lookup ( ParameterMappingStrategy . class . getName ( ) , ParameterMappingStrategy . class ) ; if ( answer == null ) { answer = new DefaultParameterMappingStrategy ( ) ; } return answer ; } } 	1
package org . apache . camel . model . loadbalancer ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "topic" ) public class TopicLoadBalanceStrategy extends LoadBalancerType { @ Override protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { return new org . apache . camel . processor . loadbalancer . TopicLoadBalancer ( ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "filter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FilterType extends ExpressionNode implements Block { public FilterType ( ) { } public FilterType ( ExpressionType expression ) { super ( expression ) ; } public FilterType ( Predicate predicate ) { super ( predicate ) ; } @ Override public String toString ( ) { return "Filter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "filter" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . component . cxf . util ; import java . net . MalformedURLException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URL ; import org . apache . camel . component . cxf . CxfConstants ; import org . apache . cxf . common . classloader . ClassLoaderUtils ; public final class UriUtils { private UriUtils ( ) { } static URL getWsdlUrl ( final URI uri ) throws MalformedURLException { URL wsdlUrl = null ; if ( uri . getScheme ( ) . equals ( CxfConstants . PROTOCOL_NAME_RES ) ) { if ( uri . getPath ( ) != null ) { String path = uri . isAbsolute ( ) ? getRelativePath ( uri ) : uri . getPath ( ) ; wsdlUrl = ClassLoaderUtils . getResource ( path , UriUtils . class ) ; } } else { wsdlUrl = new URL ( uri . getScheme ( ) , uri . getHost ( ) , uri . getPort ( ) , uri . getPath ( ) ) ; } return wsdlUrl ; } private static String getRelativePath ( URI uri ) { URI base = null ; try { base = new URI ( CxfConstants . PROTOCOL_NAME_RES , "" , "/" , "" ) ; } catch ( URISyntaxException e ) { e . printStackTrace ( ) ; } return base . relativize ( uri ) . getPath ( ) ; } } 	0
package org . apache . camel . component . seda ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . PollingConsumerSupport ; @ Deprecated public class ListPollingConsumer extends PollingConsumerSupport { private final List < Exchange > exchanges ; public ListPollingConsumer ( Endpoint endpoint , List < Exchange > exchanges ) { super ( endpoint ) ; this . exchanges = exchanges ; } public Exchange receive ( ) { return receiveNoWait ( ) ; } public Exchange receiveNoWait ( ) { if ( exchanges . isEmpty ( ) ) { return null ; } else { return exchanges . remove ( 0 ) ; } } public Exchange receive ( long timeout ) { return receiveNoWait ( ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	1
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . util . ServiceHelper ; public class Interceptor extends DelegateProcessor implements Intercept { private Processor interceptorLogic ; public Interceptor ( ) { } public Interceptor ( Processor interceptorLogic ) { this . interceptorLogic = interceptorLogic ; } public void process ( Exchange exchange ) throws Exception { interceptorLogic . process ( exchange ) ; } public Processor getInterceptorLogic ( ) { return interceptorLogic ; } public void setInterceptorLogic ( Processor interceptorLogic ) { this . interceptorLogic = interceptorLogic ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startService ( interceptorLogic ) ; super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopService ( interceptorLogic ) ; super . doStop ( ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . LogFactory ; public class LoggingExceptionHandler implements ExceptionHandler { private final Logger logger ; public LoggingExceptionHandler ( Class ownerType ) { this ( new Logger ( LogFactory . getLog ( ownerType ) , LoggingLevel . ERROR ) ) ; } public LoggingExceptionHandler ( Logger logger ) { this . logger = logger ; } public void handleException ( Throwable exception ) { logger . log ( exception . getMessage ( ) , exception ) ; } } 	1
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelException ; import org . apache . camel . Processor ; import org . apache . camel . processor . ThrowFaultProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "throwFault" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThrowFaultType extends ProcessorType < ThrowFaultType > { @ XmlTransient private Throwable fault ; @ XmlTransient private Processor processor ; @ XmlAttribute ( required = true ) private String faultRef ; public ThrowFaultType ( ) { } @ Override public String getShortName ( ) { return "throwFault" ; } public void setFault ( Throwable fault ) { this . fault = fault ; } public Throwable getFault ( ) { return fault ; } public void setFaultRef ( String ref ) { this . faultRef = ref ; } public String getFaultRef ( ) { return faultRef ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { if ( processor == null ) { if ( fault == null ) { fault = routeContext . lookup ( faultRef , Throwable . class ) ; if ( fault == null ) { fault = new CamelException ( faultRef ) ; } } processor = new ThrowFaultProcessor ( fault ) ; } return processor ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class FileComponent extends DefaultComponent < FileExchange > { public static final String HEADER_FILE_NAME = "org.apache.camel.file.name" ; public static final String HEADER_FILE_NAME_PRODUCED = "org.apache.camel.file.name.produced" ; public FileComponent ( ) { } public FileComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < FileExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { File file = new File ( remaining ) ; FileEndpoint result = new FileEndpoint ( file , uri , this ) ; setProperties ( result , parameters ) ; return result ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; public abstract class DefaultProducer < E extends Exchange > extends ServiceSupport implements Producer < E > { private Endpoint < E > endpoint ; public DefaultProducer ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } @ Override public String toString ( ) { return "Producer[" + endpoint . getEndpointUri ( ) + "]" ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public E createExchange ( ) { return endpoint . createExchange ( ) ; } public E createExchange ( ExchangePattern pattern ) { return endpoint . createExchange ( pattern ) ; } public E createExchange ( E exchange ) { return endpoint . createExchange ( exchange ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "expression" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LanguageExpression extends ExpressionType { @ XmlAttribute private String language ; public LanguageExpression ( ) { } public LanguageExpression ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . UuidGenerator ; public abstract class MessageSupport implements Message { private static final UuidGenerator DEFALT_ID_GENERATOR = new UuidGenerator ( ) ; private Exchange exchange ; private Object body ; private String messageId ; public Object getBody ( ) { if ( body == null ) { body = createBody ( ) ; } return body ; } @ SuppressWarnings ( { "unchecked" } ) public < T > T getBody ( Class < T > type ) { return getBody ( type , getBody ( ) ) ; } protected < T > T getBody ( Class < T > type , Object body ) { Exchange e = getExchange ( ) ; if ( e != null ) { CamelContext camelContext = e . getContext ( ) ; if ( camelContext != null ) { TypeConverter converter = camelContext . getTypeConverter ( ) ; T answer = converter . convertTo ( type , body ) ; if ( answer == null ) { answer = converter . convertTo ( type , this ) ; } return answer ; } } return ( T ) getBody ( ) ; } public void setBody ( Object body ) { this . body = body ; } public < T > void setBody ( Object value , Class < T > type ) { Exchange e = getExchange ( ) ; if ( e != null ) { T v = e . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; if ( v != null ) { value = v ; } } setBody ( value ) ; } public Message copy ( ) { Message answer = newInstance ( ) ; answer . copyFrom ( this ) ; return answer ; } public void copyFrom ( Message that ) { setMessageId ( that . getMessageId ( ) ) ; setBody ( that . getBody ( ) ) ; getHeaders ( ) . putAll ( that . getHeaders ( ) ) ; getAttachments ( ) . putAll ( that . getAttachments ( ) ) ; } public Exchange getExchange ( ) { return exchange ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public abstract Message newInstance ( ) ; protected Object createBody ( ) { return null ; } public String getMessageId ( ) { if ( messageId == null ) { messageId = createMessageId ( ) ; } return this . messageId ; } public void setMessageId ( String messageId ) { this . messageId = messageId ; } protected String createMessageId ( ) { return DEFALT_ID_GENERATOR . generateId ( ) ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class Tracer implements InterceptStrategy { private TraceFormatter formatter = new TraceFormatter ( ) ; public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; return new TraceInterceptor ( processorType , target , formatter ) ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . management ; import java . util . concurrent . atomic . AtomicLong ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedOperation ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "Counter" , currencyTimeLimit = 15 ) public class Counter { protected AtomicLong numExchanges = new AtomicLong ( 0L ) ; @ ManagedOperation ( description = "Reset counters" ) public void reset ( ) { numExchanges . set ( 0L ) ; } @ ManagedAttribute ( description = "Total number of exchanges" ) public long getNumExchanges ( ) throws Exception { return numExchanges . get ( ) ; } public long increment ( ) { return numExchanges . incrementAndGet ( ) ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class JMXExchange extends DefaultExchange { public JMXExchange ( CamelContext camelContext , ExchangePattern pattern , Notification notification ) { super ( camelContext , pattern ) ; setIn ( new JMXMessage ( notification ) ) ; } } 	1
package org . apache . camel . component . jms ; import java . util . Collections ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . jms . core . JmsOperations ; public class JmsQueueEndpoint extends JmsEndpoint implements BrowsableEndpoint < JmsExchange > { private static final transient Log LOG = LogFactory . getLog ( JmsQueueEndpoint . class ) ; private int maximumBrowseSize = - 1 ; private final QueueBrowseStrategy queueBrowseStrategy ; public JmsQueueEndpoint ( String uri , JmsComponent component , String destination , JmsConfiguration configuration ) { this ( uri , component , destination , configuration , null ) ; } public JmsQueueEndpoint ( String uri , JmsComponent component , String destination , JmsConfiguration configuration , QueueBrowseStrategy queueBrowseStrategy ) { super ( uri , component , destination , false , configuration ) ; if ( queueBrowseStrategy == null ) { this . queueBrowseStrategy = createQueueBrowseStrategy ( ) ; } else { this . queueBrowseStrategy = queueBrowseStrategy ; } } public JmsQueueEndpoint ( String endpointUri , String destination , QueueBrowseStrategy queueBrowseStrategy ) { super ( endpointUri , destination , false ) ; if ( queueBrowseStrategy == null ) { this . queueBrowseStrategy = createQueueBrowseStrategy ( ) ; } else { this . queueBrowseStrategy = queueBrowseStrategy ; } } public JmsQueueEndpoint ( String endpointUri , String destination ) { super ( endpointUri , destination , false ) ; queueBrowseStrategy = createQueueBrowseStrategy ( ) ; } public int getMaximumBrowseSize ( ) { return maximumBrowseSize ; } public void setMaximumBrowseSize ( int maximumBrowseSize ) { this . maximumBrowseSize = maximumBrowseSize ; } public List < Exchange > getExchanges ( ) { if ( queueBrowseStrategy == null ) { return Collections . EMPTY_LIST ; } String queue = getDestination ( ) ; JmsOperations template = getConfiguration ( ) . createInOnlyTemplate ( this , false , queue ) ; return queueBrowseStrategy . browse ( template , queue , this ) ; } protected static QueueBrowseStrategy createQueueBrowseStrategy ( ) { QueueBrowseStrategy answer = null ; try { answer = JmsComponent . tryCreateDefaultQueueBrowseStrategy ( ) ; } catch ( Throwable e ) { LOG . debug ( "Caught exception trying to create default QueueBrowseStrategy. " + "This could be due to spring 2.0.x on classpath? Cause: " + e , e ) ; } if ( answer == null ) { LOG . warn ( "Cannot browse queues as no QueueBrowseStrategy specified. Are you using Spring 2.0.x by any chance? If you upgrade to 2.5.x or later then queue browsing is supported" ) ; } return answer ; } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . language . bean . BeanExpression ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "methodCall" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MethodCallExpression extends ExpressionType { @ XmlAttribute ( required = false ) private String bean ; @ XmlAttribute ( required = false ) private String method ; public MethodCallExpression ( ) { } public MethodCallExpression ( String beanName ) { super ( beanName ) ; } public MethodCallExpression ( String beanName , String method ) { super ( beanName ) ; this . method = method ; } public String getLanguage ( ) { return "bean" ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Override public Expression createExpression ( RouteContext routeContext ) { return new BeanExpression ( beanName ( ) , getMethod ( ) ) ; } @ Override public Predicate < Exchange > createPredicate ( RouteContext routeContext ) { return new BeanExpression < Exchange > ( beanName ( ) , getMethod ( ) ) ; } protected String beanName ( ) { if ( bean != null ) { return bean ; } return getExpression ( ) ; } } 	1
package org . apache . camel . processor . idempotent ; public interface MessageIdRepository { boolean contains ( String messageId ) ; } 	0
package org . apache . camel . util ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import org . w3c . dom . NodeList ; public final class CollectionHelper { private CollectionHelper ( ) { } public static Integer size ( Object value ) { if ( value != null ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . size ( ) ; } else if ( value instanceof Map ) { Map map = ( Map ) value ; return map . size ( ) ; } else if ( value instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) value ; return array . length ; } else if ( value . getClass ( ) . isArray ( ) ) { return Array . getLength ( value ) ; } else if ( value instanceof NodeList ) { NodeList nodeList = ( NodeList ) value ; return nodeList . getLength ( ) ; } } return null ; } public static void appendValue ( Map map , Object key , Object value ) { Object oldValue = map . get ( key ) ; if ( oldValue != null ) { List list ; if ( oldValue instanceof List ) { list = ( List ) oldValue ; } else { list = new ArrayList ( ) ; list . add ( oldValue ) ; } list . add ( value ) ; } else { map . put ( key , value ) ; } } } 	1
package org . apache . camel . component . cxf . invoker ; import java . util . Map ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . cxf . Bus ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . endpoint . ClientImpl ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . ExchangeImpl ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . PhaseInterceptorChain ; import org . apache . cxf . service . Service ; import org . apache . cxf . service . model . BindingInfo ; import org . apache . cxf . service . model . BindingMessageInfo ; import org . apache . cxf . service . model . BindingOperationInfo ; import org . apache . cxf . service . model . OperationInfo ; import org . apache . cxf . transport . MessageObserver ; public class CxfClient extends ClientImpl { private static final Logger LOG = LogUtils . getL7dLogger ( CxfClient . class ) ; public CxfClient ( Bus b , Endpoint e ) { super ( b , e ) ; } public Object dispatch ( Map < Class , Object > params , Map < String , Object > context , Exchange exchange ) throws Exception { Object retval = null ; InvokingContext invokingContext = exchange . get ( InvokingContext . class ) ; assert invokingContext != null ; BindingOperationInfo inBoundOp = exchange . get ( BindingOperationInfo . class ) ; BindingOperationInfo outBoundOp = null ; if ( inBoundOp != null ) { BindingInfo bi = getEndpoint ( ) . getEndpointInfo ( ) . getBinding ( ) ; outBoundOp = bi . getOperation ( inBoundOp . getOperationInfo ( ) . getName ( ) ) ; if ( outBoundOp != null && inBoundOp . isUnwrapped ( ) ) { outBoundOp = outBoundOp . getUnwrappedOperation ( ) ; } } retval = invokeWithMessageStream ( outBoundOp , params , context , invokingContext ) ; return retval ; } @ SuppressWarnings ( "unchecked" ) public Object invokeWithMessageStream ( BindingOperationInfo bi , Map < Class , Object > param , Map < String , Object > context , InvokingContext invokingContext ) throws Exception { Object retval = null ; Map < String , Object > requestContext = null ; Map < String , Object > responseContext = null ; if ( null != context ) { requestContext = ( Map < String , Object > ) context . get ( REQUEST_CONTEXT ) ; responseContext = ( Map < String , Object > ) context . get ( RESPONSE_CONTEXT ) ; } Exchange exchange = new ExchangeImpl ( ) ; setExchangeProperties ( exchange , getEndpoint ( ) , bi ) ; exchange . put ( InvokingContext . class , invokingContext ) ; if ( bi != null ) { exchange . put ( BindingMessageInfo . class , bi . getInput ( ) ) ; exchange . setOneWay ( bi . getOperationInfo ( ) . isOneWay ( ) ) ; } Message message = prepareMessage ( exchange , requestContext , param , invokingContext ) ; message . put ( Message . INVOCATION_CONTEXT , context ) ; Endpoint ep = getEndpoint ( ) ; if ( ep != null ) { message . putAll ( ep ) ; } PhaseInterceptorChain chain = setupInterceptorChain ( getEndpoint ( ) ) ; message . setInterceptorChain ( chain ) ; modifyChain ( chain , requestContext ) ; chain . setFaultObserver ( outFaultObserver ) ; prepareConduitSelector ( message ) ; modifyChain ( chain , null ) ; chain . doIntercept ( message ) ; Exception ex = message . getContent ( Exception . class ) ; if ( ex != null ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Exception in outgoing chain: " + ex . toString ( ) ) ; } throw ex ; } if ( ! exchange . isOneWay ( ) ) { synchronized ( exchange ) { waitResponse ( exchange ) ; } ex = getException ( exchange ) ; if ( ex != null ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Exception in incoming chain: " + ex . toString ( ) ) ; } throw ex ; } retval = invokingContext . getResponseObject ( exchange , responseContext ) ; } return retval ; } private void waitResponse ( Exchange exchange ) { int remaining = synchronousTimeout ; while ( ! Boolean . TRUE . equals ( exchange . get ( FINISHED ) ) && remaining > 0 ) { long start = System . currentTimeMillis ( ) ; try { exchange . wait ( remaining ) ; } catch ( InterruptedException ex ) { } long end = System . currentTimeMillis ( ) ; remaining -= ( int ) ( end - start ) ; } if ( ! Boolean . TRUE . equals ( exchange . get ( FINISHED ) ) ) { LogUtils . log ( LOG , Level . WARNING , "RESPONSE_TIMEOUT" , exchange . get ( OperationInfo . class ) . getName ( ) . toString ( ) ) ; } } private Message prepareMessage ( Exchange exchange , Map < String , Object > requestContext , Map < Class , Object > param , InvokingContext invokingContext ) { Message message = getEndpoint ( ) . getBinding ( ) . createMessage ( ) ; message . put ( Message . REQUESTOR_ROLE , Boolean . TRUE ) ; message . put ( Message . INBOUND_MESSAGE , Boolean . FALSE ) ; if ( requestContext != null ) { message . putAll ( requestContext ) ; } if ( param != null ) { invokingContext . setRequestOutMessageContent ( message , param ) ; } if ( null != requestContext ) { exchange . putAll ( requestContext ) ; } exchange . setOutMessage ( message ) ; return message ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setBody" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetBodyType extends ExpressionNode { public SetBodyType ( ) { } public SetBodyType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "SetBody[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setBody" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; return ProcessorBuilder . setBody ( expr ) ; } } 	1
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Processor ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; public class RegistryBean implements BeanHolder { private final CamelContext context ; private final String name ; private final Registry registry ; private Processor processor ; private BeanInfo beanInfo ; private Object bean ; private ParameterMappingStrategy parameterMappingStrategy ; public RegistryBean ( CamelContext context , String name ) { this . context = context ; this . name = name ; this . registry = context . getRegistry ( ) ; } public RegistryBean ( CamelContext context , String name , ParameterMappingStrategy parameterMappingStrategy ) { this ( context , name ) ; this . parameterMappingStrategy = parameterMappingStrategy ; } @ Override public String toString ( ) { return "bean: " + name ; } public ConstantBeanHolder createCacheHolder ( ) throws Exception { return new ConstantBeanHolder ( getBean ( ) , getBeanInfo ( ) ) ; } public Object getBean ( ) throws Exception { Object value = lookupBean ( ) ; if ( value == null ) { throw new NoBeanAvailableException ( name ) ; } if ( value != bean ) { bean = value ; processor = null ; if ( ! ObjectHelper . equal ( ObjectHelper . type ( bean ) , ObjectHelper . type ( value ) ) ) { beanInfo = null ; } } return value ; } public Processor getProcessor ( ) { if ( processor == null && bean != null ) { processor = CamelContextHelper . convertTo ( context , Processor . class , bean ) ; } return processor ; } public BeanInfo getBeanInfo ( ) { if ( beanInfo == null && bean != null ) { this . beanInfo = createBeanInfo ( ) ; } return beanInfo ; } public String getName ( ) { return name ; } public Registry getRegistry ( ) { return registry ; } public CamelContext getContext ( ) { return context ; } public ParameterMappingStrategy getParameterMappingStrategy ( ) { if ( parameterMappingStrategy == null ) { parameterMappingStrategy = createParameterMappingStrategy ( ) ; } return parameterMappingStrategy ; } public void setParameterMappingStrategy ( ParameterMappingStrategy parameterMappingStrategy ) { this . parameterMappingStrategy = parameterMappingStrategy ; } protected BeanInfo createBeanInfo ( ) { return new BeanInfo ( context , bean . getClass ( ) , getParameterMappingStrategy ( ) ) ; } protected ParameterMappingStrategy createParameterMappingStrategy ( ) { return BeanInfo . createParameterMappingStrategy ( context ) ; } protected Object lookupBean ( ) throws Exception { return registry . lookup ( name ) ; } } 	0
package org . apache . camel . processor . exceptionpolicy ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . model . ExceptionType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultExceptionPolicyStrategy implements ExceptionPolicyStrategy { private static final transient Log LOG = LogFactory . getLog ( DefaultExceptionPolicyStrategy . class ) ; public ExceptionType getExceptionPolicy ( Map < Class , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finding best suited exception policy for thrown exception " + exception . getClass ( ) . getName ( ) ) ; } int targetLevel = getInheritanceLevel ( exception . getClass ( ) ) ; ExceptionType candidate = null ; int candidateDiff = Integer . MAX_VALUE ; Set < Map . Entry < Class , ExceptionType > > entries = exceptionPolicices . entrySet ( ) ; for ( Map . Entry < Class , ExceptionType > entry : entries ) { Class clazz = entry . getKey ( ) ; ExceptionType type = entry . getValue ( ) ; if ( clazz . isInstance ( exception ) ) { if ( clazz . equals ( exception . getClass ( ) ) ) { candidate = type ; break ; } int level = getInheritanceLevel ( clazz ) ; int diff = targetLevel - level ; if ( diff < candidateDiff ) { candidate = type ; candidateDiff = diff ; } } } if ( LOG . isDebugEnabled ( ) ) { if ( candidate != null ) { LOG . debug ( "Using " + candidate + " as the exception policy" ) ; } else { LOG . debug ( "No candidate found to be used as exception policy" ) ; } } return candidate ; } private static int getInheritanceLevel ( Class clazz ) { if ( clazz == null || "java.lang.Object" . equals ( clazz . getName ( ) ) ) { return 0 ; } return 1 + getInheritanceLevel ( clazz . getSuperclass ( ) ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "completedPredicate" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CompletedPredicate { @ XmlElementRef private ExpressionType completePredicate ; @ XmlTransient private Predicate predicate ; public CompletedPredicate ( ) { } public CompletedPredicate ( Predicate predicate ) { this . predicate = predicate ; } public ExpressionType getCompletePredicate ( ) { return completePredicate ; } public void setCompletePredicate ( ExpressionType completePredicate ) { this . completePredicate = completePredicate ; } public Predicate getPredicate ( ) { return predicate ; } public void setPredicate ( Predicate predicate ) { this . predicate = predicate ; } public Predicate createPredicate ( RouteContext routeContext ) { ExpressionType predicateType = getCompletePredicate ( ) ; if ( predicateType != null && predicate == null ) { predicate = predicateType . createPredicate ( routeContext ) ; } return predicate ; } } 	0
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URLDecoder ; import java . net . URLEncoder ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class URISupport { public static class CompositeData { public String host ; String scheme ; String path ; URI components [ ] ; Map parameters ; String fragment ; public URI [ ] getComponents ( ) { return components ; } public String getFragment ( ) { return fragment ; } public Map getParameters ( ) { return parameters ; } public String getScheme ( ) { return scheme ; } public String getPath ( ) { return path ; } public String getHost ( ) { return host ; } public URI toURI ( ) throws URISyntaxException { StringBuffer sb = new StringBuffer ( ) ; if ( scheme != null ) { sb . append ( scheme ) ; sb . append ( ':' ) ; } if ( host != null && host . length ( ) != 0 ) { sb . append ( host ) ; } else { sb . append ( '(' ) ; for ( int i = 0 ; i < components . length ; i ++ ) { if ( i != 0 ) { sb . append ( ',' ) ; } sb . append ( components [ i ] . toString ( ) ) ; } sb . append ( ')' ) ; } if ( path != null ) { sb . append ( '/' ) ; sb . append ( path ) ; } if ( ! parameters . isEmpty ( ) ) { sb . append ( "?" ) ; sb . append ( createQueryString ( parameters ) ) ; } if ( fragment != null ) { sb . append ( "#" ) ; sb . append ( fragment ) ; } return new URI ( sb . toString ( ) ) ; } } public static Map parseQuery ( String uri ) throws URISyntaxException { try { Map rc = new HashMap ( ) ; if ( uri != null ) { String [ ] parameters = uri . split ( "&" ) ; for ( String parameter : parameters ) { int p = parameter . indexOf ( "=" ) ; if ( p >= 0 ) { String name = URLDecoder . decode ( parameter . substring ( 0 , p ) , "UTF-8" ) ; String value = URLDecoder . decode ( parameter . substring ( p + 1 ) , "UTF-8" ) ; rc . put ( name , value ) ; } else { rc . put ( parameter , null ) ; } } } return rc ; } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static Map parseParameters ( URI uri ) throws URISyntaxException { String query = uri . getQuery ( ) ; if ( query == null ) { String schemeSpecificPart = uri . getSchemeSpecificPart ( ) ; int idx = schemeSpecificPart . lastIndexOf ( '?' ) ; if ( idx < 0 ) { return Collections . EMPTY_MAP ; } else { query = schemeSpecificPart . substring ( idx + 1 ) ; } } else { query = stripPrefix ( query , "?" ) ; } return parseQuery ( query ) ; } public static URI removeQuery ( URI uri ) throws URISyntaxException { return createURIWithQuery ( uri , null ) ; } public static URI createURIWithQuery ( URI uri , String query ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getUserInfo ( ) , uri . getHost ( ) , uri . getPort ( ) , uri . getPath ( ) , query , uri . getFragment ( ) ) ; } public static CompositeData parseComposite ( URI uri ) throws URISyntaxException { CompositeData rc = new CompositeData ( ) ; rc . scheme = uri . getScheme ( ) ; String ssp = stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) . trim ( ) ; parseComposite ( uri , rc , ssp ) ; rc . fragment = uri . getFragment ( ) ; return rc ; } private static void parseComposite ( URI uri , CompositeData rc , String ssp ) throws URISyntaxException { String componentString ; String params ; if ( ! checkParenthesis ( ssp ) ) { throw new URISyntaxException ( uri . toString ( ) , "Not a matching number of '(' and ')' parenthesis" ) ; } int p ; int intialParen = ssp . indexOf ( "(" ) ; if ( intialParen == 0 ) { rc . host = ssp . substring ( 0 , intialParen ) ; p = rc . host . indexOf ( "/" ) ; if ( p >= 0 ) { rc . path = rc . host . substring ( p ) ; rc . host = rc . host . substring ( 0 , p ) ; } p = ssp . lastIndexOf ( ")" ) ; componentString = ssp . substring ( intialParen + 1 , p ) ; params = ssp . substring ( p + 1 ) . trim ( ) ; } else { componentString = ssp ; params = "" ; } String components [ ] = splitComponents ( componentString ) ; rc . components = new URI [ components . length ] ; for ( int i = 0 ; i < components . length ; i ++ ) { rc . components [ i ] = new URI ( components [ i ] . trim ( ) ) ; } p = params . indexOf ( "?" ) ; if ( p >= 0 ) { if ( p > 0 ) { rc . path = stripPrefix ( params . substring ( 0 , p ) , "/" ) ; } rc . parameters = parseQuery ( params . substring ( p + 1 ) ) ; } else { if ( params . length ( ) > 0 ) { rc . path = stripPrefix ( params , "/" ) ; } rc . parameters = Collections . EMPTY_MAP ; } } private static String [ ] splitComponents ( String str ) { ArrayList l = new ArrayList ( ) ; int last = 0 ; int depth = 0 ; char chars [ ] = str . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { switch ( chars [ i ] ) { case '(' : depth ++ ; break ; case ')' : depth -- ; break ; case ',' : if ( depth == 0 ) { String s = str . substring ( last , i ) ; l . add ( s ) ; last = i + 1 ; } break ; default : } } String s = str . substring ( last ) ; if ( s . length ( ) != 0 ) { l . add ( s ) ; } String rc [ ] = new String [ l . size ( ) ] ; l . toArray ( rc ) ; return rc ; } public static String stripPrefix ( String value , String prefix ) { if ( value . startsWith ( prefix ) ) { return value . substring ( prefix . length ( ) ) ; } return value ; } public static URI stripScheme ( URI uri ) throws URISyntaxException { return new URI ( stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) ) ; } public static String createQueryString ( Map options ) throws URISyntaxException { try { if ( options . size ( ) > 0 ) { StringBuffer rc = new StringBuffer ( ) ; boolean first = true ; for ( Iterator iter = options . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { if ( first ) { first = false ; } else { rc . append ( "&" ) ; } String key = ( String ) iter . next ( ) ; String value = ( String ) options . get ( key ) ; rc . append ( URLEncoder . encode ( key , "UTF-8" ) ) ; rc . append ( "=" ) ; rc . append ( URLEncoder . encode ( value , "UTF-8" ) ) ; } return rc . toString ( ) ; } else { return "" ; } } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static URI createRemainingURI ( URI originalURI , Map params ) throws URISyntaxException { String s = createQueryString ( params ) ; if ( s . length ( ) == 0 ) { s = null ; } return createURIWithQuery ( originalURI , s ) ; } public static URI changeScheme ( URI bindAddr , String scheme ) throws URISyntaxException { return new URI ( scheme , bindAddr . getUserInfo ( ) , bindAddr . getHost ( ) , bindAddr . getPort ( ) , bindAddr . getPath ( ) , bindAddr . getQuery ( ) , bindAddr . getFragment ( ) ) ; } public static boolean checkParenthesis ( String str ) { boolean result = true ; if ( str != null ) { int open = 0 ; int closed = 0 ; int i = 0 ; while ( ( i = str . indexOf ( '(' , i ) ) >= 0 ) { i ++ ; open ++ ; } i = 0 ; while ( ( i = str . indexOf ( ')' , i ) ) >= 0 ) { i ++ ; closed ++ ; } result = open == closed ; } return result ; } @ Deprecated public int indexOfParenthesisMatch ( String str ) { int result = - 1 ; return result ; } } 	1
package org . apache . camel . component . cxf ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . URISupport ; public class CxfSoapComponent extends DefaultComponent { @ Override protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { Map soapProps = IntrospectionSupport . extractProperties ( parameters , "soap." ) ; if ( parameters . size ( ) > 0 ) { remaining += "?" + URISupport . createQueryString ( parameters ) ; } Endpoint endpoint = CamelContextHelper . getMandatoryEndpoint ( getCamelContext ( ) , remaining ) ; CxfSoapEndpoint soapEndpoint = new CxfSoapEndpoint ( endpoint ) ; setProperties ( soapEndpoint , soapProps ) ; soapEndpoint . init ( ) ; return soapEndpoint ; } @ Override protected boolean useIntrospectionOnEndpoint ( ) { return false ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BatchProcessor extends ServiceSupport implements Runnable , Processor { public static final long DEFAULT_BATCH_TIMEOUT = 1000L ; public static final int DEFAULT_BATCH_SIZE = 100 ; private static final transient Log LOG = LogFactory . getLog ( BatchProcessor . class ) ; private Endpoint endpoint ; private Processor processor ; private Collection < Exchange > collection ; private long batchTimeout = DEFAULT_BATCH_TIMEOUT ; private int batchSize = DEFAULT_BATCH_SIZE ; private PollingConsumer consumer ; private ExceptionHandler exceptionHandler ; public BatchProcessor ( Endpoint endpoint , Processor processor , Collection < Exchange > collection ) { this . endpoint = endpoint ; this . processor = processor ; this . collection = collection ; } @ Override public String toString ( ) { return "BatchProcessor[to: " + processor + "]" ; } public void run ( ) { LOG . debug ( "Starting thread for " + this ) ; while ( isRunAllowed ( ) ) { try { processBatch ( ) ; } catch ( Exception e ) { getExceptionHandler ( ) . handleException ( e ) ; } } collection . clear ( ) ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public Endpoint getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } protected synchronized void processBatch ( ) throws Exception { long start = System . currentTimeMillis ( ) ; long end = start + batchTimeout ; for ( int i = 0 ; ! isBatchCompleted ( i ) ; i ++ ) { long timeout = end - System . currentTimeMillis ( ) ; if ( timeout < 0L ) { LOG . debug ( "batch timeout expired at batch index:" + i ) ; break ; } Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { LOG . debug ( "receive with timeout: " + timeout + " expired at batch index:" + i ) ; break ; } collection . add ( exchange ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finished batch size: " + batchSize + " timeout: " + batchTimeout + " so sending set: " + collection ) ; } Iterator < Exchange > iter = collection . iterator ( ) ; while ( iter . hasNext ( ) ) { Exchange exchange = iter . next ( ) ; iter . remove ( ) ; processExchange ( exchange ) ; } } protected boolean isBatchCompleted ( int index ) { return index >= batchSize ; } protected void processExchange ( Exchange exchange ) throws Exception { processor . process ( exchange ) ; } protected void doStart ( ) throws Exception { consumer = endpoint . createPollingConsumer ( ) ; ServiceHelper . startServices ( processor , consumer ) ; Thread thread = new Thread ( this , this + " Polling Thread" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( consumer , processor ) ; collection . clear ( ) ; } protected Collection < Exchange > getCollection ( ) { return collection ; } public void process ( Exchange exchange ) throws Exception { } } 	1
package org . apache . camel . model . language ; import java . util . Map ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . spi . RouteContext ; @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class NamespaceAwareExpression extends ExpressionType implements NamespaceAware { @ XmlTransient private Map < String , String > namespaces ; public NamespaceAwareExpression ( ) { } public NamespaceAwareExpression ( String expression ) { super ( expression ) ; } public Map < String , String > getNamespaces ( ) { return namespaces ; } public void setNamespaces ( Map < String , String > namespaces ) { this . namespaces = namespaces ; } @ Override protected void configureExpression ( RouteContext routeContext , Expression expression ) { configureNamespaceAware ( expression ) ; } @ Override protected void configurePredicate ( RouteContext routeContext , Predicate predicate ) { configureNamespaceAware ( predicate ) ; } protected void configureNamespaceAware ( Object builder ) { if ( namespaces != null && builder instanceof NamespaceAware ) { NamespaceAware namespaceAware = ( NamespaceAware ) builder ; namespaceAware . setNamespaces ( namespaces ) ; } } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . BlockingQueue ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class QueueComponent extends SedaComponent { private static final transient Log LOG = LogFactory . getLog ( QueueComponent . class ) ; public QueueComponent ( ) { LOG . warn ( "This component has been deprecated; please use the seda: URI format instead of queue:" ) ; } } 	1
package org . apache . camel . component . stream ; import org . apache . camel . impl . DefaultMessage ; public class StreamMessage extends DefaultMessage { private Object o ; public StreamMessage ( Object o ) { this . o = o ; } @ Override protected Object createBody ( ) { return o ; } @ Override public Object getBody ( ) { return o ; } @ Override public String toString ( ) { return o . toString ( ) ; } } 	0
package org . apache . camel ; import java . util . Map ; public interface Endpoint < E extends Exchange > { boolean isSingleton ( ) ; String getEndpointUri ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( Exchange exchange ) ; CamelContext getCamelContext ( ) ; Producer < E > createProducer ( ) throws Exception ; Consumer < E > createConsumer ( Processor processor ) throws Exception ; PollingConsumer < E > createPollingConsumer ( ) throws Exception ; void configureProperties ( Map options ) ; void setCamelContext ( CamelContext context ) ; @ Deprecated CamelContext getContext ( ) ; @ Deprecated void setContext ( CamelContext context ) ; } 	1
package org . apache . camel . spi ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; public interface InterceptStrategy { Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "recipientList" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RecipientListType extends ExpressionNode { public RecipientListType ( ) { } public RecipientListType ( ExpressionType expression ) { super ( expression ) ; } public RecipientListType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "RecipientList[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "recipientList" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new RecipientList ( getExpression ( ) . createExpression ( routeContext ) ) ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Session ; import javax . jms . TemporaryQueue ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . SessionCallback ; public class JmsTemporaryQueueEndpoint extends JmsQueueEndpoint implements DestinationEndpoint { private Destination jmsDestination ; public JmsTemporaryQueueEndpoint ( String uri , JmsComponent component , String destination , JmsConfiguration configuration ) { super ( uri , component , destination , configuration ) ; } public JmsTemporaryQueueEndpoint ( String uri , JmsComponent component , String destination , JmsConfiguration configuration , QueueBrowseStrategy queueBrowseStrategy ) { super ( uri , component , destination , configuration , queueBrowseStrategy ) ; } public JmsTemporaryQueueEndpoint ( String endpointUri , String destination ) { super ( endpointUri , destination ) ; } public boolean isSingleton ( ) { return true ; } public synchronized Destination getJmsDestination ( Session session ) throws JMSException { if ( jmsDestination == null ) { jmsDestination = createJmsDestination ( session ) ; } return jmsDestination ; } protected Destination createJmsDestination ( Session session ) throws JMSException { return session . createTemporaryQueue ( ) ; } } 	0
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "convertBodyTo" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ConvertBodyType extends ProcessorType < ProcessorType > { @ XmlAttribute private String type ; @ XmlTransient private Class typeClass ; public ConvertBodyType ( ) { } public ConvertBodyType ( String type ) { setType ( type ) ; } public ConvertBodyType ( Class typeClass ) { setTypeClass ( typeClass ) ; } @ Override public String toString ( ) { return "convertBodyTo[ " + getType ( ) + "]" ; } @ Override public String getShortName ( ) { return "convertBodyTo" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new ConvertBodyProcessor ( getTypeClass ( ) ) ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } protected Class createTypeClass ( ) { return ObjectHelper . loadClass ( getType ( ) , getClass ( ) . getClassLoader ( ) ) ; } public void setType ( String type ) { this . type = type ; } public String getType ( ) { return type ; } public void setTypeClass ( Class typeClass ) { this . typeClass = typeClass ; } public Class getTypeClass ( ) { if ( typeClass == null ) { setTypeClass ( createTypeClass ( ) ) ; } return typeClass ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . CamelContext ; public interface LanguageResolver { Language resolveLanguage ( String name , CamelContext context ) ; } 	0
package org . apache . camel ; import java . util . Map ; public interface ProducerTemplate < E extends Exchange > extends Service { E send ( E exchange ) ; E send ( Processor processor ) ; Object sendBody ( Object body ) ; Object sendBodyAndHeader ( Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) ; E send ( String endpointUri , E exchange ) ; E send ( String endpointUri , Processor processor ) ; E send ( String endpointUri , ExchangePattern pattern , Processor processor ) ; E send ( String endpointUri , Processor processor , AsyncCallback callback ) ; E send ( Endpoint < E > endpoint , E exchange ) ; E send ( Endpoint < E > endpoint , Processor processor ) ; E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) ; E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) ; Object sendBody ( Endpoint < E > endpoint , Object body ) ; Object sendBody ( String endpointUri , Object body ) ; Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) ; Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) ; Object sendBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( String endpointUri , Object body , Map < String , Object > headers ) ; Object sendBodyAndHeaders ( Endpoint endpoint , Object body , Map < String , Object > headers ) ; E request ( Endpoint < E > endpoint , Processor processor ) ; Object requestBody ( Endpoint < E > endpoint , Object body ) ; Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) ; E request ( String endpointUri , Processor processor ) ; Object requestBody ( String endpointUri , Object body ) ; Object requestBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; } 	1
package org . apache . camel . component . mina ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; import org . apache . mina . common . IoSession ; import org . apache . mina . common . WriteFuture ; public final class MinaHelper { private MinaHelper ( ) { } public static void writeBody ( IoSession session , Object body , Exchange exchange ) throws CamelExchangeException { WriteFuture future = session . write ( body ) ; future . join ( ) ; if ( ! future . isWritten ( ) ) { throw new CamelExchangeException ( "Could not write body" , exchange ) ; } } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . FileOutputStream ; import java . io . InputStream ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( FileProducer . class ) ; private FileEndpoint endpoint ; public FileProducer ( FileEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public FileEndpoint getEndpoint ( ) { return ( FileEndpoint ) super . getEndpoint ( ) ; } public void process ( Exchange exchange ) throws Exception { FileExchange fileExchange = endpoint . createExchange ( exchange ) ; process ( fileExchange ) ; ExchangeHelper . copyResults ( exchange , fileExchange ) ; } public void process ( FileExchange exchange ) throws Exception { InputStream in = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; File file = createFileName ( exchange . getIn ( ) ) ; buildDirectory ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to: " + file + " from exchange: " + exchange ) ; } FileChannel fc = null ; try { if ( getEndpoint ( ) . isAppend ( ) ) { fc = new RandomAccessFile ( file , "rw" ) . getChannel ( ) ; fc . position ( fc . size ( ) ) ; } else { fc = new FileOutputStream ( file ) . getChannel ( ) ; } int size = getEndpoint ( ) . getBufferSize ( ) ; byte [ ] buffer = new byte [ size ] ; ByteBuffer byteBuffer = ByteBuffer . wrap ( buffer ) ; while ( true ) { int count = in . read ( buffer ) ; if ( count <= 0 ) { break ; } else if ( count < size ) { byteBuffer = ByteBuffer . wrap ( buffer , 0 , count ) ; fc . write ( byteBuffer ) ; break ; } else { fc . write ( byteBuffer ) ; byteBuffer . clear ( ) ; } } } finally { ObjectHelper . close ( in , file . getName ( ) , LOG ) ; ObjectHelper . close ( fc , file . getName ( ) , LOG ) ; } } protected File createFileName ( Message message ) { File answer ; String name = null ; if ( ! endpoint . isIgnoreFileNameHeader ( ) ) { name = message . getHeader ( FileComponent . HEADER_FILE_NAME , String . class ) ; } File endpointFile = endpoint . getFile ( ) ; if ( endpointFile . isDirectory ( ) ) { if ( name != null ) { answer = new File ( endpointFile , name ) ; if ( answer . isDirectory ( ) ) { answer = new File ( answer , endpoint . getGeneratedFileName ( message ) ) ; } } else { answer = new File ( endpointFile , endpoint . getGeneratedFileName ( message ) ) ; } } else { if ( name == null ) { answer = endpointFile ; } else { answer = new File ( endpointFile , name ) ; } } message . setHeader ( FileComponent . HEADER_FILE_NAME_PRODUCED , answer . getAbsolutePath ( ) ) ; return answer ; } private void buildDirectory ( File file ) { String dirName = file . getAbsolutePath ( ) ; int index = dirName . lastIndexOf ( File . separatorChar ) ; if ( index > 0 ) { dirName = dirName . substring ( 0 , index ) ; File dir = new File ( dirName ) ; dir . mkdirs ( ) ; } } } 	1
package org . apache . camel ; public interface TypeConverter { < T > T convertTo ( Class < T > type , Object value ) ; } 	0
package org . apache . camel . language . simple ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . language . IllegalSyntaxException ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class SimpleLanguage implements Language { public static Expression simple ( String expression ) { SimpleLanguage language = new SimpleLanguage ( ) ; return language . createExpression ( expression ) ; } public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { if ( expression . indexOf ( "${" ) >= 0 ) { return createComplexExpression ( expression ) ; } return createSimpleExpression ( expression ) ; } protected Expression < Exchange > createComplexExpression ( String expression ) { List < Expression > results = new ArrayList < Expression > ( ) ; int pivot = 0 ; int size = expression . length ( ) ; while ( pivot < size ) { int idx = expression . indexOf ( "${" , pivot ) ; if ( idx < 0 ) { results . add ( createConstantExpression ( expression , pivot , size ) ) ; break ; } else { if ( pivot < idx ) { results . add ( createConstantExpression ( expression , pivot , idx ) ) ; } pivot = idx + 2 ; int endIdx = expression . indexOf ( "}" , pivot ) ; if ( endIdx < 0 ) { throw new IllegalArgumentException ( "Expecting } but found end of string for simple expression: " + expression ) ; } String simpleText = expression . substring ( pivot , endIdx ) ; Expression simpleExpression = createSimpleExpression ( simpleText ) ; results . add ( simpleExpression ) ; pivot = endIdx + 1 ; } } return ExpressionBuilder . concatExpression ( results , expression ) ; } protected Expression createConstantExpression ( String expression , int start , int end ) { return ExpressionBuilder . constantExpression ( expression . substring ( start , end ) ) ; } protected Expression < Exchange > createSimpleExpression ( String expression ) { if ( ObjectHelper . isEqualToAny ( expression , "body" , "in.body" ) ) { return ExpressionBuilder . bodyExpression ( ) ; } else if ( ObjectHelper . equal ( expression , "out.body" ) ) { return ExpressionBuilder . outBodyExpression ( ) ; } String remainder = ifStartsWithReturnRemainder ( "in.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "header." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "headers." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "in.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . headerExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "out.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "out.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . outHeaderExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "property." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "sys." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } throw new IllegalSyntaxException ( this , expression ) ; } protected String ifStartsWithReturnRemainder ( String prefix , String text ) { if ( text . startsWith ( prefix ) ) { String remainder = text . substring ( prefix . length ( ) ) ; if ( remainder . length ( ) > 0 ) { return remainder ; } } return null ; } } 	1
package org . apache . camel . component . dataset ; import org . apache . camel . Exchange ; public interface DataSet { String INDEX_HEADER = "camelDataSetIndex" ; void populateMessage ( Exchange exchange , long messageIndex ) throws Exception ; long getSize ( ) ; void assertMessageExpected ( DataSetEndpoint dataSetEndpoint , Exchange expected , Exchange actual , long index ) throws Exception ; long getReportCount ( ) ; } 	0
package org . apache . camel . component . file ; import java . io . File ; public interface FileProcessStrategy { boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; } 	1
package org . apache . camel . component . atom ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Feed ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class AtomPollingConsumer extends AtomConsumerSupport { public AtomPollingConsumer ( AtomEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; } protected void poll ( ) throws Exception { Document < Feed > document = AtomUtils . parseDocument ( endpoint . getAtomUri ( ) ) ; Feed feed = document . getRoot ( ) ; Exchange exchange = endpoint . createExchange ( feed ) ; getProcessor ( ) . process ( exchange ) ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . MBeanServer ; import javax . management . Notification ; import javax . management . ObjectName ; import javax . management . monitor . CounterMonitor ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JMXEndpoint extends DefaultEndpoint < JMXExchange > { private static final transient Log LOG = LogFactory . getLog ( JMXEndpoint . class ) ; private String name ; private ObjectName ourName ; private String observedObjectName ; private String attributeName ; private long granularityPeriod = 5000 ; private Number threshold ; private Number offset ; private MBeanServer mbeanServer ; private CounterMonitor counterMonitor = new CounterMonitor ( ) ; protected JMXEndpoint ( String endpointUri , JMXComponent component ) { super ( endpointUri , component ) ; observedObjectName = endpointUri ; } public JMXEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < JMXExchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "Producer not supported" ) ; } public Consumer < JMXExchange > createConsumer ( Processor proc ) throws Exception { ObjectName observedName = new ObjectName ( observedObjectName ) ; if ( name == null ) { String type = observedName . getKeyProperty ( "type" ) ; type = type != null ? type : "UNKNOWN" ; name = mbeanServer . getDefaultDomain ( ) + ":type=CounterMonitor_" + type ; } JMXConsumer result = new JMXConsumer ( this , proc ) ; ourName = new ObjectName ( name ) ; counterMonitor . setNotify ( true ) ; counterMonitor . addObservedObject ( observedName ) ; counterMonitor . setObservedAttribute ( attributeName ) ; counterMonitor . setGranularityPeriod ( granularityPeriod ) ; counterMonitor . setDifferenceMode ( false ) ; counterMonitor . setInitThreshold ( threshold ) ; counterMonitor . setOffset ( offset ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Registering and adding notification listener for [" + counterMonitor + "] with name [" + ourName + "]" ) ; } mbeanServer . registerMBean ( counterMonitor , ourName ) ; mbeanServer . addNotificationListener ( ourName , result , null , new Object ( ) ) ; return result ; } public boolean isSingleton ( ) { return true ; } public JMXExchange createExchange ( Notification notification ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , notification ) ; } public JMXExchange createExchange ( ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , null ) ; } public JMXExchange createExchange ( ExchangePattern pattern ) { return new JMXExchange ( getCamelContext ( ) , pattern , null ) ; } public String getAttributeName ( ) { return attributeName ; } public void setAttributeName ( String attributeName ) { this . attributeName = attributeName ; } public long getGranularityPeriod ( ) { return granularityPeriod ; } public void setGranularityPeriod ( long granularityPeriod ) { this . granularityPeriod = granularityPeriod ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Number getOffset ( ) { return offset ; } public void setOffset ( Number offset ) { this . offset = offset ; } public Number getThreshold ( ) { return threshold ; } public void setThreshold ( Number threshold ) { this . threshold = threshold ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	1
package org . apache . camel . component . dataset ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . util . CamelContextHelper ; public class DataSetComponent extends DefaultComponent < Exchange > { @ Override protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { DataSet dataSet = CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , remaining , DataSet . class ) ; return new DataSetEndpoint ( uri , this , dataSet ) ; } } 	0
package org . apache . camel ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . Callable ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; public interface CamelContext extends Service { String getName ( ) ; void addComponent ( String componentName , Component component ) ; Component getComponent ( String componentName ) ; < T extends Component > T getComponent ( String name , Class < T > componentType ) ; Component removeComponent ( String componentName ) ; Component getOrCreateComponent ( String componentName , Callable < Component > factory ) ; Endpoint getEndpoint ( String uri ) ; < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) ; Collection < Endpoint > getSingletonEndpoints ( ) ; Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception ; Endpoint removeSingletonEndpoint ( String uri ) throws Exception ; List < RouteType > getRouteDefinitions ( ) ; List < Route > getRoutes ( ) ; void setRoutes ( List < Route > routes ) ; void addRoutes ( Collection < Route > routes ) throws Exception ; void addRoutes ( Routes builder ) throws Exception ; void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception ; ExchangeConverter getExchangeConverter ( ) ; TypeConverter getTypeConverter ( ) ; Registry getRegistry ( ) ; Injector getInjector ( ) ; LifecycleStrategy getLifecycleStrategy ( ) ; Language resolveLanguage ( String language ) ; < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; } 	1
package org . apache . camel . management ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "Managed Endpoint" , currencyTimeLimit = 15 ) public class ManagedEndpoint { private Endpoint < ? extends Exchange > endpoint ; public ManagedEndpoint ( Endpoint < ? extends Exchange > endpoint ) { this . endpoint = endpoint ; } public Endpoint < ? extends Exchange > getEndpoint ( ) { return endpoint ; } @ ManagedAttribute ( description = "Endpoint Uri" ) public String getUri ( ) throws Exception { return endpoint . getEndpointUri ( ) ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . RejectedExecutionException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannel extends ErrorHandlerSupport implements AsyncProcessor { public static final String REDELIVERY_COUNTER = "org.apache.camel.RedeliveryCounter" ; public static final String REDELIVERED = "org.apache.camel.Redelivered" ; public static final String EXCEPTION_CAUSE_PROPERTY = "CamelCauseException" ; private class RedeliveryData { int redeliveryCounter ; long redeliveryDelay ; boolean sync = true ; RedeliveryPolicy currentRedeliveryPolicy = redeliveryPolicy ; Processor failureProcessor = deadLetter ; } private static final transient Log LOG = LogFactory . getLog ( DeadLetterChannel . class ) ; private static final String FAILURE_HANDLED_PROPERTY = DeadLetterChannel . class . getName ( ) + ".FAILURE_HANDLED" ; private Processor output ; private Processor deadLetter ; private AsyncProcessor outputAsync ; private RedeliveryPolicy redeliveryPolicy ; private Logger logger ; public DeadLetterChannel ( Processor output , Processor deadLetter ) { this ( output , deadLetter , new RedeliveryPolicy ( ) , DeadLetterChannel . createDefaultLogger ( ) , ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ) ; } public DeadLetterChannel ( Processor output , Processor deadLetter , RedeliveryPolicy redeliveryPolicy , Logger logger , ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . deadLetter = deadLetter ; this . output = output ; this . outputAsync = AsyncProcessorTypeConverter . convert ( output ) ; this . redeliveryPolicy = redeliveryPolicy ; this . logger = logger ; setExceptionPolicy ( exceptionPolicyStrategy ) ; } public static < E extends Exchange > Logger createDefaultLogger ( ) { return new Logger ( LOG , LoggingLevel . ERROR ) ; } @ Override public String toString ( ) { return "DeadLetterChannel[" + output + ", " + deadLetter + ", " + redeliveryPolicy + "]" ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { return process ( exchange , callback , new RedeliveryData ( ) ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { while ( true ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return data . sync ; } if ( exchange . isTransacted ( ) && exchange . getException ( ) != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Transacted Exchange, this DeadLetterChannel is bypassed: " + exchange ) ; } return data . sync ; } if ( exchange . getException ( ) != null ) { Throwable e = exchange . getException ( ) ; exchange . setException ( null ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". On delivery attempt: " + data . redeliveryCounter + " caught: " + e , e ) ; data . redeliveryCounter = incrementRedeliveryCounter ( exchange , e ) ; ExceptionType exceptionPolicy = getExceptionPolicy ( exchange , e ) ; if ( exceptionPolicy != null ) { data . currentRedeliveryPolicy = exceptionPolicy . createRedeliveryPolicy ( data . currentRedeliveryPolicy ) ; Processor processor = exceptionPolicy . getErrorHandler ( ) ; if ( processor != null ) { data . failureProcessor = processor ; } } } if ( ! data . currentRedeliveryPolicy . shouldRedeliver ( data . redeliveryCounter ) ) { setFailureHandled ( exchange , true ) ; AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( data . failureProcessor ) ; boolean sync = afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { restoreExceptionOnExchange ( exchange ) ; callback . done ( data . sync ) ; } } ) ; restoreExceptionOnExchange ( exchange ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". Handled by the failure processor: " + data . failureProcessor ) ; return sync ; } if ( data . redeliveryCounter > 0 ) { data . redeliveryDelay = data . currentRedeliveryPolicy . sleep ( data . redeliveryDelay ) ; } exchange . setProperty ( EXCEPTION_CAUSE_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; boolean sync = outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null ) { process ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; if ( ! sync ) { return false ; } if ( exchange . getException ( ) == null || isFailureHandled ( exchange ) ) { callback . done ( true ) ; return true ; } } } public static boolean isFailureHandled ( Exchange exchange ) { return exchange . getProperty ( FAILURE_HANDLED_PROPERTY ) != null ; } public static void setFailureHandled ( Exchange exchange , boolean isHandled ) { if ( isHandled ) { exchange . setProperty ( FAILURE_HANDLED_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; } else { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; exchange . removeProperty ( FAILURE_HANDLED_PROPERTY ) ; } } public static void restoreExceptionOnExchange ( Exchange exchange ) { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public Processor getOutput ( ) { return output ; } public Processor getDeadLetter ( ) { return deadLetter ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } protected int incrementRedeliveryCounter ( Exchange exchange , Throwable e ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; int next = 1 ; if ( counter != null ) { next = counter + 1 ; } in . setHeader ( REDELIVERY_COUNTER , next ) ; in . setHeader ( REDELIVERED , Boolean . TRUE ) ; exchange . setException ( e ) ; return next ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output , deadLetter ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( deadLetter , output ) ; } } 	1
package org . apache . camel . component . irc ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultEndpoint ; import org . schwering . irc . lib . IRCModeParser ; import org . schwering . irc . lib . IRCUser ; public class IrcEndpoint extends DefaultEndpoint < IrcExchange > { private IrcBinding binding ; private IrcConfiguration configuration ; private IrcComponent component ; public IrcEndpoint ( String endpointUri , IrcComponent component , IrcConfiguration configuration ) { super ( endpointUri , component ) ; this . component = component ; this . configuration = configuration ; } public boolean isSingleton ( ) { return true ; } public IrcExchange createExchange ( ExchangePattern pattern ) { return new IrcExchange ( getCamelContext ( ) , pattern , getBinding ( ) ) ; } public IrcExchange createOnPrivmsgExchange ( String target , IRCUser user , String msg ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "PRIVMSG" , target , user , msg ) ) ; } public IrcExchange createOnNickExchange ( IRCUser user , String newNick ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "NICK" , user , newNick ) ) ; } public IrcExchange createOnQuitExchange ( IRCUser user , String msg ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "QUIT" , user , msg ) ) ; } public IrcExchange createOnJoinExchange ( String channel , IRCUser user ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "JOIN" , channel , user ) ) ; } public IrcExchange createOnKickExchange ( String channel , IRCUser user , String whoWasKickedNick , String msg ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "KICK" , channel , user , whoWasKickedNick , msg ) ) ; } public IrcExchange createOnModeExchange ( String channel , IRCUser user , IRCModeParser modeParser ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "MODE" , channel , user , modeParser . getLine ( ) ) ) ; } public IrcExchange createOnPartExchange ( String channel , IRCUser user , String msg ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "PART" , channel , user , msg ) ) ; } public IrcExchange createOnTopicExchange ( String channel , IRCUser user , String topic ) { return new IrcExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , new IrcMessage ( "TOPIC" , channel , user , topic ) ) ; } public IrcProducer createProducer ( ) throws Exception { return new IrcProducer ( this , component . getIRCConnection ( configuration ) ) ; } public IrcConsumer createConsumer ( Processor processor ) throws Exception { return new IrcConsumer ( this , processor , component . getIRCConnection ( configuration ) ) ; } public IrcComponent getComponent ( ) { return component ; } public void setComponent ( IrcComponent component ) { this . component = component ; } public IrcBinding getBinding ( ) { if ( binding == null ) { binding = new IrcBinding ( ) ; } return binding ; } public void setBinding ( IrcBinding binding ) { this . binding = binding ; } public IrcConfiguration getConfiguration ( ) { return configuration ; } public void setConfiguration ( IrcConfiguration configuration ) { this . configuration = configuration ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "onException" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExceptionType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElement ( name = "redeliveryPolicy" , required = false ) private RedeliveryPolicyType redeliveryPolicy ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; @ XmlTransient private Processor errorHandler ; public ExceptionType ( ) { } public ExceptionType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public ExceptionType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Exception[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { if ( redeliveryPolicy != null ) { return redeliveryPolicy . createRedeliveryPolicy ( parentPolicy ) ; } else if ( errorHandler != null ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; answer . setMaximumRedeliveries ( 0 ) ; return answer ; } return parentPolicy ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { errorHandler = routeContext . createProcessor ( this ) ; ErrorHandlerBuilder builder = routeContext . getRoute ( ) . getErrorHandlerBuilder ( ) ; builder . addErrorHandlers ( this ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public ExceptionType backOffMultiplier ( double backOffMultiplier ) { getOrCreateRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public ExceptionType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public ExceptionType collisionAvoidancePercent ( short collisionAvoidancePercent ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public ExceptionType initialRedeliveryDelay ( long initialRedeliveryDelay ) { getOrCreateRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public ExceptionType maximumRedeliveries ( int maximumRedeliveries ) { getOrCreateRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public ExceptionType useCollisionAvoidance ( ) { getOrCreateRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public ExceptionType useExponentialBackOff ( ) { getOrCreateRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } public Processor getErrorHandler ( ) { return errorHandler ; } public RedeliveryPolicyType getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicyType redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } protected RedeliveryPolicyType getOrCreateRedeliveryPolicy ( ) { if ( redeliveryPolicy == null ) { redeliveryPolicy = new RedeliveryPolicyType ( ) ; } return redeliveryPolicy ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel ; import org . apache . camel . spi . Registry ; public class NoSuchBeanException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String name ; public NoSuchBeanException ( String name ) { super ( "No bean could be found in the registry for: " + name ) ; this . name = name ; } public String getName ( ) { return name ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultExchangeFormatter ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . processor . interceptor . TraceInterceptor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Logger implements Processor { private Log log ; private LoggingLevel level ; private ExchangeFormatter formatter = DefaultExchangeFormatter . getInstance ( ) ; public Logger ( ) { this ( LogFactory . getLog ( Logger . class ) ) ; } public Logger ( Log log ) { this ( log , LoggingLevel . INFO ) ; } public Logger ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public Logger ( String logName ) { this ( LogFactory . getLog ( logName ) ) ; } public Logger ( String logName , LoggingLevel level ) { this ( LogFactory . getLog ( logName ) , level ) ; } public Logger ( Log log , ExchangeFormatter formatter ) { this ( log ) ; this . formatter = formatter ; } @ Override public String toString ( ) { return "Logger[" + log + "]" ; } public void process ( Exchange exchange ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void process ( Exchange exchange , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void log ( String message ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message ) ; } } public void log ( String message , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message , exception ) ; } } protected Object logMessage ( Exchange exchange ) { return formatter . format ( exchange ) ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public void setFormatter ( ExchangeFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Session ; import javax . jms . TemporaryTopic ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . SessionCallback ; public class JmsTemporaryTopicEndpoint extends JmsEndpoint implements DestinationEndpoint { private Destination jmsDestination ; public JmsTemporaryTopicEndpoint ( String uri , JmsComponent component , String destination , JmsConfiguration configuration ) { super ( uri , component , destination , true , configuration ) ; } public JmsTemporaryTopicEndpoint ( String endpointUri , String destination ) { super ( endpointUri , destination ) ; } public boolean isSingleton ( ) { return true ; } public synchronized Destination getJmsDestination ( Session session ) throws JMSException { if ( jmsDestination == null ) { jmsDestination = createJmsDestination ( session ) ; } return jmsDestination ; } protected Destination createJmsDestination ( Session session ) throws JMSException { return session . createTemporaryTopic ( ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TransformProcessor extends DelegateProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( TransformProcessor . class ) ; private Expression expression ; public TransformProcessor ( Expression expression ) { this . expression = expression ; } public TransformProcessor ( Expression expression , Processor childProcessor ) { super ( childProcessor ) ; this . expression = expression ; } public void process ( Exchange exchange ) throws Exception { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; exchange . getOut ( ) . getHeaders ( ) . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; super . process ( exchange ) ; } @ Override public String toString ( ) { return "transform(" + expression + ")" ; } } 	1
package org . apache . camel . impl ; import java . util . concurrent . ScheduledExecutorService ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; public class DefaultScheduledPollConsumer < E extends Exchange > extends ScheduledPollConsumer < E > { private PollingConsumer < E > pollingConsumer ; public DefaultScheduledPollConsumer ( DefaultEndpoint < E > defaultEndpoint , Processor processor ) { super ( defaultEndpoint , processor ) ; } public DefaultScheduledPollConsumer ( Endpoint < E > endpoint , Processor processor , ScheduledExecutorService executor ) { super ( endpoint , processor , executor ) ; } protected void poll ( ) throws Exception { while ( true ) { E exchange = pollingConsumer . receiveNoWait ( ) ; if ( exchange == null ) { break ; } Message out = exchange . getOut ( false ) ; if ( out != null ) { E newExchange = getEndpoint ( ) . createExchange ( ) ; newExchange . getIn ( ) . copyFrom ( out ) ; exchange = newExchange ; } getProcessor ( ) . process ( exchange ) ; } } @ Override protected void doStart ( ) throws Exception { pollingConsumer = getEndpoint ( ) . createPollingConsumer ( ) ; super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { super . doStop ( ) ; if ( pollingConsumer != null ) { pollingConsumer . stop ( ) ; } } } 	0
package org . apache . camel . processor ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . TreeSet ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ExpressionListComparator ; public class Resequencer extends BatchProcessor { public Resequencer ( Endpoint endpoint , Processor processor , Expression < Exchange > expression ) { this ( endpoint , processor , createSet ( expression ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , List < Expression > expressions ) { this ( endpoint , processor , createSet ( expressions ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , Set < Exchange > collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Resequencer[to: " + getProcessor ( ) + "]" ; } protected static Set < Exchange > createSet ( Expression < Exchange > expression ) { return createSet ( new ExpressionComparator < Exchange > ( expression ) ) ; } protected static Set < Exchange > createSet ( List < Expression > expressions ) { if ( expressions . size ( ) == 1 ) { return createSet ( expressions . get ( 0 ) ) ; } return createSet ( new ExpressionListComparator ( expressions ) ) ; } protected static Set < Exchange > createSet ( Comparator < ? super Exchange > comparator ) { return new TreeSet < Exchange > ( comparator ) ; } } 	1
package org . apache . camel . impl . converter ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import org . apache . camel . TypeConverter ; public class ArrayTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > type , Object value ) { if ( type . isArray ( ) ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; Object array = Array . newInstance ( type . getComponentType ( ) , collection . size ( ) ) ; if ( array instanceof Object [ ] ) { collection . toArray ( ( Object [ ] ) array ) ; } else { int index = 0 ; for ( Object element : collection ) { Array . set ( array , index ++ , element ) ; } } return ( T ) array ; } else if ( value != null && value . getClass ( ) . isArray ( ) ) { int size = Array . getLength ( value ) ; Object answer = Array . newInstance ( type . getComponentType ( ) , size ) ; for ( int i = 0 ; i < size ; i ++ ) { Array . set ( answer , i , Array . get ( value , i ) ) ; } return ( T ) answer ; } } else if ( Collection . class . isAssignableFrom ( type ) ) { if ( value != null ) { if ( value instanceof Object [ ] ) { return ( T ) Arrays . asList ( ( Object [ ] ) value ) ; } else if ( value . getClass ( ) . isArray ( ) ) { int size = Array . getLength ( value ) ; List answer = new ArrayList ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { answer . add ( Array . get ( value , i ) ) ; } return ( T ) answer ; } } } return null ; } } 	0
package org . apache . camel . view ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . AggregatorType ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FilterType ; import org . apache . camel . model . FromType ; import org . apache . camel . model . OtherwiseType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RecipientListType ; import org . apache . camel . model . ResequencerType ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . model . SplitterType ; import org . apache . camel . model . ToType ; import org . apache . camel . model . WhenType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; public class NodeData { public String id ; public String image ; public String label ; public String shape ; public String edgeLabel ; public String tooltop ; public String nodeType ; public boolean nodeWritten ; public String url ; public List < ProcessorType > outputs ; public String association = "property" ; private final String imagePrefix ; public NodeData ( String id , Object node , String imagePrefix ) { this . id = id ; this . imagePrefix = imagePrefix ; if ( node instanceof ProcessorType ) { ProcessorType processorType = ( ProcessorType ) node ; this . edgeLabel = processorType . getLabel ( ) ; } if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; this . tooltop = fromType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; this . tooltop = toType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof FilterType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "Message Filter" ; } else if ( node instanceof WhenType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "When Filter" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; } else if ( node instanceof OtherwiseType ) { this . nodeType = "Otherwise" ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; this . tooltop = "Otherwise" ; } else if ( node instanceof ChoiceType ) { this . image = imagePrefix + "ContentBasedRouterIcon.png" ; this . nodeType = "Content Based Router" ; this . label = "" ; this . edgeLabel = "" ; ChoiceType choice = ( ChoiceType ) node ; List < ProcessorType > outputs = new ArrayList < ProcessorType > ( choice . getWhenClauses ( ) ) ; if ( choice . getOtherwise ( ) != null ) { outputs . add ( choice . getOtherwise ( ) ) ; } this . outputs = outputs ; } else if ( node instanceof RecipientListType ) { this . image = imagePrefix + "RecipientListIcon.png" ; this . nodeType = "Recipient List" ; } else if ( node instanceof RoutingSlipType ) { this . image = imagePrefix + "RoutingTableIcon.png" ; this . nodeType = "Routing Slip" ; this . url = "http://activemq.apache.org/camel/routing-slip.html" ; this . tooltop = ( ( RoutingSlipType ) node ) . getHeaderName ( ) ; } else if ( node instanceof SplitterType ) { this . image = imagePrefix + "SplitterIcon.png" ; this . nodeType = "Splitter" ; } else if ( node instanceof AggregatorType ) { this . image = imagePrefix + "AggregatorIcon.png" ; this . nodeType = "Aggregator" ; } else if ( node instanceof ResequencerType ) { this . image = imagePrefix + "ResequencerIcon.png" ; this . nodeType = "Resequencer" ; } if ( isNullOrBlank ( this . nodeType ) && node != null ) { String name = node . getClass ( ) . getName ( ) ; int idx = name . lastIndexOf ( '.' ) ; if ( idx > 0 ) { name = name . substring ( idx + 1 ) ; } if ( name . endsWith ( "Type" ) ) { name = name . substring ( 0 , name . length ( ) - 4 ) ; } this . nodeType = insertSpacesBetweenCamelCase ( name ) ; } if ( this . label == null ) { if ( isNullOrBlank ( this . image ) ) { this . label = this . nodeType ; this . shape = "box" ; } else if ( isNotNullAndNonEmpty ( this . edgeLabel ) ) { this . label = "" ; } else { this . label = node . toString ( ) ; } } if ( isNullOrBlank ( this . tooltop ) ) { if ( isNotNullAndNonEmpty ( this . nodeType ) ) { String description = isNotNullAndNonEmpty ( this . edgeLabel ) ? this . edgeLabel : this . label ; this . tooltop = this . nodeType + ": " + description ; } else { this . tooltop = this . label ; } } if ( isNullOrBlank ( this . url ) && isNotNullAndNonEmpty ( this . nodeType ) ) { this . url = "http://activemq.apache.org/camel/" + this . nodeType . toLowerCase ( ) . replace ( ' ' , '-' ) + ".html" ; } if ( node instanceof ProcessorType && this . outputs == null ) { ProcessorType processorType = ( ProcessorType ) node ; this . outputs = processorType . getOutputs ( ) ; } } protected String removeQueryString ( String text ) { int idx = text . indexOf ( "?" ) ; if ( idx <= 0 ) { return text ; } else { return text . substring ( 0 , idx ) ; } } public static String insertSpacesBetweenCamelCase ( String name ) { boolean lastCharacterLowerCase = false ; StringBuffer buffer = new StringBuffer ( ) ; int i = 0 ; for ( int size = name . length ( ) ; i < size ; i ++ ) { char ch = name . charAt ( i ) ; if ( Character . isUpperCase ( ch ) ) { if ( lastCharacterLowerCase ) { buffer . append ( ' ' ) ; } lastCharacterLowerCase = false ; } else { lastCharacterLowerCase = true ; } buffer . append ( ch ) ; } return buffer . toString ( ) ; } } 	1
package org . apache . camel . component . direct ; import java . util . List ; import java . util . concurrent . CopyOnWriteArrayList ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DirectEndpoint < E extends Exchange > extends DefaultEndpoint < E > { private static final transient Log LOG = LogFactory . getLog ( DirectEndpoint . class ) ; private boolean allowMultipleConsumers = true ; private final CopyOnWriteArrayList < DefaultConsumer < E > > consumers = new CopyOnWriteArrayList < DefaultConsumer < E > > ( ) ; public DirectEndpoint ( String uri , DirectComponent < E > component ) { super ( uri , component ) ; } public DirectEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer createProducer ( ) throws Exception { return new DirectProducer < E > ( this ) ; } public Consumer < E > createConsumer ( Processor processor ) throws Exception { return new DefaultConsumer < E > ( this , processor ) { @ Override public void start ( ) throws Exception { if ( ! allowMultipleConsumers && ! consumers . isEmpty ( ) ) { throw new IllegalStateException ( "Endpoint " + getEndpointUri ( ) + " only allows 1 active consumer but you attempted to start a 2nd consumer." ) ; } consumers . add ( this ) ; super . start ( ) ; } @ Override public void stop ( ) throws Exception { super . stop ( ) ; consumers . remove ( this ) ; } } ; } public boolean isAllowMultipleConsumers ( ) { return allowMultipleConsumers ; } public void setAllowMultipleConsumers ( boolean allowMutlipleConsumers ) { this . allowMultipleConsumers = allowMutlipleConsumers ; } public boolean isSingleton ( ) { return true ; } public List < DefaultConsumer < E > > getConsumers ( ) { return consumers ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . impl . DefaultMessage ; public class JMXMessage extends DefaultMessage { private Notification notification ; public JMXMessage ( ) { this ( null ) ; } public JMXMessage ( Notification notification ) { this . notification = notification ; } @ Override public String toString ( ) { return "JMXMessage: " + notification ; } @ Override public JMXExchange getExchange ( ) { return ( JMXExchange ) super . getExchange ( ) ; } @ Override public JMXMessage newInstance ( ) { return new JMXMessage ( ) ; } public Notification getNotification ( ) { return notification ; } } 	1
package org . apache . camel . component . xquery ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . language . NamespacePrefix ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "xquery" , factory = XQueryAnnotationExpressionFactory . class ) public @ interface XQuery { String value ( ) ; NamespacePrefix [ ] namespaces ( ) default { @ NamespacePrefix ( prefix = "soap" , uri = "http://www.w3.org/2003/05/soap-envelope" ) , @ NamespacePrefix ( prefix = "xsd" , uri = "http://www.w3.org/2001/XMLSchema" ) } ; } 	0
package org . apache . camel . converter ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Converter ; import org . apache . camel . util . ObjectHelper ; @ Converter public final class ObjectConverter { private ObjectConverter ( ) { } public static boolean isCollection ( Object value ) { return value instanceof Collection || ( value != null && value . getClass ( ) . isArray ( ) ) ; } @ SuppressWarnings ( "unchecked" ) @ Converter @ Deprecated public static Iterator iterator ( Object value ) { return ObjectHelper . createIterator ( value ) ; } @ Converter public static boolean toBool ( Object value ) { Boolean answer = toBoolean ( value ) ; if ( answer != null ) { return answer . booleanValue ( ) ; } return false ; } @ Converter public static Boolean toBoolean ( Object value ) { return ObjectHelper . toBoolean ( value ) ; } @ Converter public static Boolean toBoolean ( Boolean value ) { if ( value != null ) { return value ; } return Boolean . FALSE ; } @ Converter public static Byte toByte ( Object value ) { if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Byte . valueOf ( number . byteValue ( ) ) ; } else if ( value instanceof String ) { return Byte . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static byte [ ] toByteArray ( String value ) { return value . getBytes ( ) ; } @ Converter public static char [ ] toCharArray ( String value ) { return value . toCharArray ( ) ; } @ Converter public static String fromCharArray ( char [ ] value ) { return new String ( value ) ; } @ Converter public static Short toShort ( Object value ) { if ( value instanceof Short ) { return ( Short ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Short . valueOf ( number . shortValue ( ) ) ; } else if ( value instanceof String ) { return Short . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Integer toInteger ( Object value ) { if ( value instanceof Integer ) { return ( Integer ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Integer . valueOf ( number . intValue ( ) ) ; } else if ( value instanceof String ) { return Integer . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Long toLong ( Object value ) { if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Long . valueOf ( number . longValue ( ) ) ; } else if ( value instanceof String ) { return Long . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Float toFloat ( Object value ) { if ( value instanceof Float ) { return ( Float ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Float . valueOf ( number . floatValue ( ) ) ; } else if ( value instanceof String ) { return Float . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Double toDouble ( Object value ) { if ( value instanceof Double ) { return ( Double ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Double . valueOf ( number . doubleValue ( ) ) ; } else if ( value instanceof String ) { return Double . valueOf ( ( String ) value ) ; } else { return null ; } } } 	1
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; public class NoErrorHandlerBuilder extends ErrorHandlerBuilderSupport { public ErrorHandlerBuilder copy ( ) { return this ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) { return processor ; } } 	0
package org . apache . camel . processor . resequencer ; import java . util . Queue ; import java . util . Timer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResequencerEngine < E > implements TimeoutHandler { private static final transient Log LOG = LogFactory . getLog ( ResequencerEngine . class ) ; private long timeout ; private int capacity ; private Queue < E > outQueue ; private Element < E > lastDelivered ; private Sequence < Element < E > > sequence ; private Timer timer ; public ResequencerEngine ( SequenceElementComparator < E > comparator ) { this ( comparator , Integer . MAX_VALUE ) ; } public ResequencerEngine ( SequenceElementComparator < E > comparator , int capacity ) { this . timer = new Timer ( "Resequencer Timer" ) ; this . sequence = createSequence ( comparator ) ; this . capacity = capacity ; this . timeout = 2000L ; this . lastDelivered = null ; } public void stop ( ) { this . timer . cancel ( ) ; } public Queue < E > getOutQueue ( ) { return outQueue ; } public void setOutQueue ( Queue < E > outQueue ) { this . outQueue = outQueue ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public synchronized void timeout ( Timeout timout ) { try { while ( deliver ( ) ) { } } catch ( RuntimeException e ) { LOG . error ( "error during delivery" , e ) ; } } public synchronized void add ( E o ) { if ( sequence . size ( ) >= capacity ) { throw new IllegalStateException ( "maximum capacity is reached" ) ; } insert ( o ) ; } public synchronized void put ( E o ) throws InterruptedException { if ( sequence . size ( ) >= capacity ) { wait ( ) ; } insert ( o ) ; } E getLastDelivered ( ) { if ( lastDelivered == null ) { return null ; } return lastDelivered . getObject ( ) ; } void setLastDelivered ( E o ) { lastDelivered = new Element < E > ( o ) ; } private void insert ( E o ) { Element < E > element = new Element < E > ( o ) ; sequence . add ( element ) ; Element < E > successor = sequence . successor ( element ) ; if ( successor != null ) { successor . cancel ( ) ; } if ( successorOfLastDelivered ( element ) ) { } else if ( sequence . predecessor ( element ) != null ) { } else { Timeout t = defineTimeout ( ) ; element . schedule ( t ) ; } while ( deliver ( ) ) { } } private boolean deliver ( ) { if ( sequence . size ( ) == 0 ) { return false ; } Element < E > element = sequence . first ( ) ; if ( element . scheduled ( ) ) { return false ; } sequence . remove ( element ) ; lastDelivered = element ; notify ( ) ; outQueue . add ( element . getObject ( ) ) ; return true ; } private boolean successorOfLastDelivered ( Element < E > element ) { if ( lastDelivered == null ) { return false ; } if ( sequence . comparator ( ) . successor ( element , lastDelivered ) ) { return true ; } return false ; } private Timeout defineTimeout ( ) { Timeout result = new Timeout ( timer , timeout ) ; result . addTimeoutHandler ( this ) ; return result ; } private static < E > Sequence < Element < E > > createSequence ( SequenceElementComparator < E > comparator ) { return new Sequence < Element < E > > ( new ElementComparator < E > ( comparator ) ) ; } } 	1
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import org . apache . camel . Processor ; public interface LoadBalancer extends Processor { void addProcessor ( Processor processor ) ; void removeProcessor ( Processor processor ) ; List < Processor > getProcessors ( ) ; } 	0
package org . apache . camel . processor ; import java . text . NumberFormat ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Exchange ; import org . apache . commons . logging . Log ; public class ThroughputLogger extends Logger { private int groupSize = 100 ; private long startTime ; private long groupStartTime ; private AtomicInteger receivedCounter = new AtomicInteger ( ) ; private NumberFormat numberFormat = NumberFormat . getNumberInstance ( ) ; private String action = "Received" ; private String logMessage ; public ThroughputLogger ( ) { } public ThroughputLogger ( Log log ) { super ( log ) ; } public ThroughputLogger ( Log log , LoggingLevel level ) { super ( log , level ) ; } public ThroughputLogger ( String logName ) { super ( logName ) ; } public ThroughputLogger ( String logName , LoggingLevel level ) { super ( logName , level ) ; } public ThroughputLogger ( String logName , LoggingLevel level , int groupSize ) { super ( logName , level ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( String logName , int groupSize ) { super ( logName ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( int groupSize ) { setGroupSize ( groupSize ) ; } @ Override public void process ( Exchange exchange ) { if ( startTime == 0 ) { startTime = System . currentTimeMillis ( ) ; } int receivedCount = receivedCounter . incrementAndGet ( ) ; if ( receivedCount % groupSize == 0 ) { logMessage = createLogMessage ( exchange , receivedCount ) ; super . process ( exchange ) ; } } public int getGroupSize ( ) { return groupSize ; } public void setGroupSize ( int groupSize ) { if ( groupSize == 0 ) { throw new IllegalArgumentException ( "groupSize cannot be zero!" ) ; } this . groupSize = groupSize ; } public NumberFormat getNumberFormat ( ) { return numberFormat ; } public void setNumberFormat ( NumberFormat numberFormat ) { this . numberFormat = numberFormat ; } public String getAction ( ) { return action ; } public void setAction ( String action ) { this . action = action ; } @ Override protected Object logMessage ( Exchange exchange ) { return logMessage ; } protected String createLogMessage ( Exchange exchange , int receivedCount ) { long time = System . currentTimeMillis ( ) ; if ( groupStartTime == 0 ) { groupStartTime = startTime ; } double rate = messagesPerSecond ( groupSize , groupStartTime , time ) ; double average = messagesPerSecond ( receivedCount , startTime , time ) ; groupStartTime = time ; return getAction ( ) + ": " + receivedCount + " messages so far. Last group took: " + ( time - groupStartTime ) + " millis which is: " + numberFormat . format ( rate ) + " messages per second. average: " + numberFormat . format ( average ) ; } protected double messagesPerSecond ( long messageCount , long startTime , long endTime ) { double rate = messageCount * 1000.0 ; rate /= endTime - startTime ; return rate ; } } 	1
package org . apache . camel . spring . remoting ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Endpoint ; import org . apache . camel . component . bean . ProxyHelper ; import org . springframework . beans . factory . FactoryBean ; import org . springframework . remoting . support . UrlBasedRemoteAccessor ; public class CamelProxyFactoryBean extends UrlBasedRemoteAccessor implements FactoryBean , CamelContextAware { private CamelContext camelContext ; private Endpoint endpoint ; private Object serviceProxy ; @ Override public void afterPropertiesSet ( ) { super . afterPropertiesSet ( ) ; try { if ( endpoint == null ) { if ( getServiceUrl ( ) == null || camelContext == null ) { throw new IllegalArgumentException ( "If endpoint is not specified, the serviceUrl and camelContext must be specified." ) ; } endpoint = camelContext . getEndpoint ( getServiceUrl ( ) ) ; if ( endpoint == null ) { throw new IllegalArgumentException ( "Could not resolve endpoint: " + getServiceUrl ( ) ) ; } } this . serviceProxy = ProxyHelper . createProxy ( endpoint , getServiceInterface ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( e ) ; } } public Class getServiceInterface ( ) { return super . getServiceInterface ( ) ; } public String getServiceUrl ( ) { return super . getServiceUrl ( ) ; } public Object getObject ( ) throws Exception { return serviceProxy ; } public Class getObjectType ( ) { return getServiceInterface ( ) ; } public boolean isSingleton ( ) { return true ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } } 	0
package org . apache . camel . processor . aggregate ; import java . util . AbstractCollection ; import java . util . Collection ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AggregationCollection extends AbstractCollection < Exchange > { private static final transient Log LOG = LogFactory . getLog ( AggregationCollection . class ) ; private final Expression < Exchange > correlationExpression ; private final AggregationStrategy aggregationStrategy ; private Map < Object , Exchange > map = new LinkedHashMap < Object , Exchange > ( ) ; public AggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy ) { this . correlationExpression = correlationExpression ; this . aggregationStrategy = aggregationStrategy ; } protected Map < Object , Exchange > getMap ( ) { return map ; } @ Override public boolean add ( Exchange exchange ) { Object correlationKey = correlationExpression . evaluate ( exchange ) ; Exchange oldExchange = map . get ( correlationKey ) ; Exchange newExchange = exchange ; if ( oldExchange != null ) { newExchange = aggregationStrategy . aggregate ( oldExchange , newExchange ) ; } if ( newExchange != oldExchange ) { LOG . debug ( "put exchange:" + newExchange + " for key:" + correlationKey ) ; map . put ( correlationKey , newExchange ) ; } onAggregation ( correlationKey , newExchange ) ; return true ; } public Iterator < Exchange > iterator ( ) { return map . values ( ) . iterator ( ) ; } public int size ( ) { return map . size ( ) ; } @ Override public void clear ( ) { map . clear ( ) ; } protected void onAggregation ( Object correlationKey , Exchange newExchange ) { } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "el" ) public class ELExpression extends ExpressionType { public ELExpression ( ) { } public ELExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "el" ; } } 	0
package org . apache . camel . util ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . InvalidPayloadException ; import org . apache . camel . InvalidTypeException ; import org . apache . camel . Message ; import org . apache . camel . NoSuchBeanException ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . NoSuchHeaderException ; import org . apache . camel . NoSuchPropertyException ; public final class ExchangeHelper { private ExchangeHelper ( ) { } public static < T > T getExchangeProperty ( Exchange exchange , String propertyName , Class < T > type , T defaultValue ) { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { return defaultValue ; } return answer ; } @ SuppressWarnings ( { "unchecked" } ) public static < E extends Exchange > Endpoint < E > resolveEndpoint ( E exchange , Object value ) throws NoSuchEndpointException { Endpoint < E > endpoint ; if ( value instanceof Endpoint ) { endpoint = ( Endpoint < E > ) value ; } else { String uri = value . toString ( ) ; endpoint = CamelContextHelper . getMandatoryEndpoint ( exchange . getContext ( ) , uri ) ; } return endpoint ; } public static < T > T getMandatoryProperty ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchPropertyException { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchPropertyException ( exchange , propertyName , type ) ; } return answer ; } public static < T > T getMandatoryHeader ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchHeaderException { T answer = exchange . getIn ( ) . getHeader ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchHeaderException ( exchange , propertyName , type ) ; } return answer ; } public static Object getMandatoryInBody ( Exchange exchange ) throws InvalidPayloadException { Object answer = exchange . getIn ( ) . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class ) ; } return answer ; } public static < T > T getMandatoryInBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { T answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type ) ; } return answer ; } public static Object getMandatoryOutBody ( Exchange exchange ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; Object answer = out . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class , out ) ; } return answer ; } public static < T > T getMandatoryOutBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; T answer = out . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type , out ) ; } return answer ; } public static < T > T convertToMandatoryType ( Exchange exchange , Class < T > type , Object value ) throws InvalidTypeException { T answer = convertToType ( exchange , type , value ) ; if ( answer == null ) { throw new InvalidTypeException ( exchange , value , type ) ; } return answer ; } public static < T > T convertToType ( Exchange exchange , Class < T > type , Object value ) { return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public static void copyResults ( Exchange result , Exchange source ) { if ( result != source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } Message out = source . getOut ( false ) ; if ( out != null ) { result . getOut ( true ) . copyFrom ( out ) ; } else { result . getOut ( true ) . copyFrom ( source . getIn ( ) ) ; } result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } public static boolean isInCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isInCapable ( ) ; } public static boolean isOutCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isOutCapable ( ) ; } public static < T > T newInstance ( Exchange exchange , Class < T > type ) { return exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } public static Map createVariableMap ( Exchange exchange ) { Map answer = new HashMap ( ) ; populateVariableMap ( exchange , answer ) ; return answer ; } public static void populateVariableMap ( Exchange exchange , Map map ) { map . put ( "exchange" , exchange ) ; Message in = exchange . getIn ( ) ; map . put ( "in" , in ) ; map . put ( "request" , in ) ; map . put ( "headers" , in . getHeaders ( ) ) ; map . put ( "body" , in . getBody ( ) ) ; if ( isOutCapable ( exchange ) ) { Message out = exchange . getOut ( true ) ; map . put ( "out" , out ) ; map . put ( "response" , out ) ; } map . put ( "camelContext" , exchange . getContext ( ) ) ; } public static String getContentType ( Exchange exchange ) { return exchange . getIn ( ) . getHeader ( "Content-Type" , String . class ) ; } public static Object lookupMandatoryBean ( Exchange exchange , String name ) { Object value = lookupBean ( exchange , name ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static < T > T lookupMandatoryBean ( Exchange exchange , String name , Class < T > type ) { T value = lookupBean ( exchange , name , type ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static Object lookupBean ( Exchange exchange , String name ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookupBean ( Exchange exchange , String name , Class < T > type ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } } 	1
package org . apache . camel . component . cxf ; import java . util . Map ; import org . apache . camel . impl . DefaultMessage ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . MessageContentsList ; import org . apache . cxf . message . MessageImpl ; public class CxfMessage extends DefaultMessage { private Message cxfMessage ; public CxfMessage ( ) { this ( new MessageImpl ( ) ) ; } public CxfMessage ( Message cxfMessage ) { if ( cxfMessage == null ) { this . cxfMessage = new MessageImpl ( ) ; } else { this . cxfMessage = cxfMessage ; } } @ Override public void copyFrom ( org . apache . camel . Message that ) { setMessageId ( that . getMessageId ( ) ) ; setBody ( that . getBody ( ) ) ; if ( that . getBody ( ) instanceof Message ) { setMessage ( ( Message ) that . getBody ( ) ) ; } getHeaders ( ) . putAll ( that . getHeaders ( ) ) ; if ( that instanceof CxfMessage ) { CxfMessage orig = ( CxfMessage ) that ; setMessage ( orig . getMessage ( ) ) ; } } @ Override public String toString ( ) { if ( cxfMessage != null ) { return "CxfMessage: " + cxfMessage ; } else { return "CxfMessage: " + getBody ( ) ; } } @ Override public CxfExchange getExchange ( ) { return ( CxfExchange ) super . getExchange ( ) ; } public Message getMessage ( ) { return cxfMessage ; } public void setMessage ( Message cxfMessage ) { this . cxfMessage = cxfMessage ; } public Object getHeader ( String name ) { return cxfMessage . get ( name ) ; } @ Override public void setHeader ( String name , Object value ) { cxfMessage . put ( name , value ) ; } @ Override public Map < String , Object > getHeaders ( ) { return cxfMessage ; } @ Override public CxfMessage newInstance ( ) { return new CxfMessage ( ) ; } @ Override protected Object createBody ( ) { return CxfBinding . extractBodyFromCxf ( getExchange ( ) , cxfMessage ) ; } @ Override public void setBody ( Object body ) { super . setBody ( body ) ; if ( body instanceof Message ) { setMessage ( ( Message ) body ) ; } } public < T > T getBody ( Class < T > type ) { if ( ! ( MessageContentsList . class . isAssignableFrom ( type ) ) && getBody ( ) instanceof MessageContentsList ) { MessageContentsList list = ( MessageContentsList ) getBody ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Object value = list . get ( i ) ; T answer = getBody ( type , value ) ; if ( answer != null ) { return answer ; } } } return super . getBody ( type ) ; } } 	0
package org . apache . camel ; public class NoSuchEndpointException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String uri ; public NoSuchEndpointException ( String uri ) { super ( "No endpoint could be found for: " + uri ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	1
package org . apache . camel . component . timer ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; import java . util . Timer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; public class TimerComponent extends DefaultComponent < Exchange > { private Map < String , Timer > timers = new HashMap < String , Timer > ( ) ; public Timer getTimer ( TimerEndpoint endpoint ) { String key = endpoint . getTimerName ( ) ; if ( ! endpoint . isDaemon ( ) ) { key = "nonDaemon:" + key ; } Timer answer = timers . get ( key ) ; if ( answer == null ) { answer = new Timer ( endpoint . getTimerName ( ) , endpoint . isDaemon ( ) ) ; timers . put ( key , answer ) ; } return answer ; } @ Override protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { TimerEndpoint answer = new TimerEndpoint ( uri , this , remaining ) ; setProperties ( answer , parameters ) ; return answer ; } @ Override protected void doStop ( ) throws Exception { Collection < Timer > collection = timers . values ( ) ; for ( Timer timer : collection ) { timer . cancel ( ) ; } timers . clear ( ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class DefaultConsumer < E extends Exchange > extends ServiceSupport implements Consumer < E > { private Endpoint < E > endpoint ; private Processor processor ; private AsyncProcessor asyncProcessor ; private ExceptionHandler exceptionHandler ; public DefaultConsumer ( Endpoint < E > endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; } @ Override public String toString ( ) { return "Consumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } public AsyncProcessor getAsyncProcessor ( ) { if ( asyncProcessor == null ) { asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; } return asyncProcessor ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void handleException ( Throwable t ) { getExceptionHandler ( ) . handleException ( t ) ; } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Message ; @ XmlType ( name = "headerType" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public abstract class HeaderType { @ XmlAttribute private String name ; public HeaderType ( ) { } protected HeaderType ( String name ) { this . name = name ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public abstract Object getValue ( ) ; public abstract void setValue ( Object value ) ; } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanProcessor extends ServiceSupport implements Processor { public static final String METHOD_NAME = "org.apache.camel.MethodName" ; private static final transient Log LOG = LogFactory . getLog ( BeanProcessor . class ) ; private Method methodObject ; private String method ; private BeanHolder beanHolder ; public BeanProcessor ( Object pojo , BeanInfo beanInfo ) { this ( new ConstantBeanHolder ( pojo , beanInfo ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext , ParameterMappingStrategy parameterMappingStrategy ) { this ( pojo , new BeanInfo ( camelContext , pojo . getClass ( ) , parameterMappingStrategy ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext ) { this ( pojo , camelContext , BeanInfo . createParameterMappingStrategy ( camelContext ) ) ; } public BeanProcessor ( BeanHolder beanHolder ) { this . beanHolder = beanHolder ; } @ Override public String toString ( ) { String description = methodObject != null ? " " + methodObject : "" ; return "BeanProcessor[" + beanHolder + description + "]" ; } public void process ( Exchange exchange ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> invoking method for: " + exchange ) ; } Object bean = beanHolder . getBean ( ) ; exchange . setProperty ( "org.apache.camel.bean.BeanHolder" , beanHolder ) ; Processor processor = getProcessor ( ) ; BeanInfo beanInfo = beanHolder . getBeanInfo ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return ; } Message in = exchange . getIn ( ) ; BeanInvocation beanInvoke = in . getBody ( BeanInvocation . class ) ; if ( beanInvoke != null ) { beanInvoke . invoke ( bean , exchange ) ; return ; } boolean isExplicitMethod = false ; String prevMethod = null ; MethodInvocation invocation ; if ( methodObject != null ) { invocation = beanInfo . createInvocation ( methodObject , bean , exchange ) ; } else { if ( ObjectHelper . isNotNullAndNonEmpty ( method ) ) { prevMethod = in . getHeader ( METHOD_NAME , String . class ) ; in . setHeader ( METHOD_NAME , method ) ; isExplicitMethod = true ; } invocation = beanInfo . createInvocation ( bean , exchange ) ; } if ( invocation == null ) { throw new IllegalStateException ( "No method invocation could be created, " + "no maching method could be found on: " + bean ) ; } try { Object value = invocation . proceed ( ) ; if ( value != null ) { if ( exchange . getPattern ( ) . isOutCapable ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on OUT message: " + value ) ; } exchange . getOut ( true ) . setBody ( value ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on IN message: " + value ) ; } exchange . getIn ( ) . setBody ( value ) ; } } } catch ( InvocationTargetException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof Exception ) { throw ( Exception ) cause ; } else { throw e ; } } catch ( Exception e ) { throw e ; } catch ( Throwable throwable ) { throw new Exception ( throwable ) ; } finally { if ( isExplicitMethod ) { in . setHeader ( METHOD_NAME , prevMethod ) ; } } } protected Processor getProcessor ( ) { return beanHolder . getProcessor ( ) ; } public Method getMethodObject ( ) { return methodObject ; } public void setMethodObject ( Method methodObject ) { this . methodObject = methodObject ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Deprecated public void setMethodName ( String method ) { setMethod ( method ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startService ( getProcessor ( ) ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopService ( getProcessor ( ) ) ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . List ; import java . util . ResourceBundle ; import java . util . logging . Level ; import java . util . logging . Logger ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . apache . cxf . common . i18n . BundleUtils ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . service . model . BindingInfo ; import org . apache . cxf . service . model . BindingMessageInfo ; import org . apache . cxf . service . model . BindingOperationInfo ; import org . apache . cxf . service . model . OperationInfo ; import org . apache . cxf . staxutils . StaxUtils ; public abstract class AbstractMessageInInterceptor < T extends Message > extends AbstractPhaseInterceptor < T > { public AbstractMessageInInterceptor ( String phase ) { super ( phase ) ; } protected boolean isRequestor ( Message message ) { return Boolean . TRUE . equals ( message . get ( Message . REQUESTOR_ROLE ) ) ; } public void handleMessage ( T message ) throws Fault { Logger logger = getLogger ( ) ; if ( isFaultMessage ( message ) ) { message . getInterceptorChain ( ) . abort ( ) ; Endpoint ep = message . getExchange ( ) . get ( Endpoint . class ) ; if ( ep . getInFaultObserver ( ) != null ) { ep . getInFaultObserver ( ) . onMessage ( message ) ; return ; } } Document document = createDOMMessage ( message ) ; Element payloadEl = ( Element ) document . getChildNodes ( ) . item ( 0 ) ; Exchange ex = message . getExchange ( ) ; BindingOperationInfo boi = ex . get ( BindingOperationInfo . class ) ; if ( boi == null ) { BindingInfo bi = ex . get ( BindingInfo . class ) ; if ( bi == null ) { Endpoint ep = ex . get ( Endpoint . class ) ; bi = ep . getEndpointInfo ( ) . getBinding ( ) ; ex . put ( BindingInfo . class , bi ) ; } if ( logger . isLoggable ( Level . INFO ) ) { logger . info ( "AbstractRoutingMessageInInterceptor Infer BindingOperationInfo." ) ; } boi = getBindingOperation ( message , document ) ; if ( boi == null ) { QName startQName = new QName ( payloadEl . getNamespaceURI ( ) , payloadEl . getLocalName ( ) ) ; throw new Fault ( new org . apache . cxf . common . i18n . Message ( "REQ_NOT_UNDERSTOOD" , getLogger ( ) , startQName ) ) ; } if ( boi != null ) { ex . put ( BindingOperationInfo . class , boi ) ; ex . put ( OperationInfo . class , boi . getOperationInfo ( ) ) ; ex . setOneWay ( boi . getOperationInfo ( ) . isOneWay ( ) ) ; if ( logger . isLoggable ( Level . INFO ) ) { logger . info ( "DOMInInterceptor- BindingOperation is:" + boi . getName ( ) ) ; } } } BindingMessageInfo bmi = isRequestor ( message ) ? boi . getOutput ( ) : boi . getInput ( ) ; List < Element > partList = getPartList ( message , payloadEl , bmi ) ; message . put ( List . class , partList ) ; Element header = getHeader ( message ) ; message . put ( Element . class , header ) ; } protected Document createDOMMessage ( T message ) { Document doc = null ; try { if ( getLogger ( ) . isLoggable ( Level . INFO ) ) { getLogger ( ) . info ( "AbstractMessageInInterceptor Converting Stax Stream to DOM" ) ; } XMLStreamReader xsr = message . getContent ( XMLStreamReader . class ) ; doc = StaxUtils . read ( xsr ) ; } catch ( XMLStreamException xe ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "STAX_READ_EXC" , getLogger ( ) ) , xe ) ; } return doc ; } protected abstract Logger getLogger ( ) ; protected abstract boolean isFaultMessage ( T message ) ; protected abstract BindingOperationInfo getBindingOperation ( T inMessage , Document document ) ; protected abstract List < Element > getPartList ( T inMessage , Element rootElement , BindingMessageInfo boi ) ; protected abstract Element getHeader ( T inMessage ) ; } 	0
package org . apache . camel ; import org . apache . camel . impl . DefaultProducerTemplate ; @ Deprecated public class CamelTemplate < E extends Exchange > extends DefaultProducerTemplate < E > { public CamelTemplate ( CamelContext context ) { super ( context ) ; } public CamelTemplate ( CamelContext context , Endpoint defaultEndpoint ) { super ( context , defaultEndpoint ) ; } } 	1
package org . apache . camel . component . xmpp ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . jivesoftware . smack . packet . Message ; public class XmppBinding { public void populateXmppMessage ( Message message , Exchange exchange ) { message . setBody ( exchange . getIn ( ) . getBody ( String . class ) ) ; Set < Map . Entry < String , Object > > entries = exchange . getIn ( ) . getHeaders ( ) . entrySet ( ) ; for ( Map . Entry < String , Object > entry : entries ) { String name = entry . getKey ( ) ; Object value = entry . getValue ( ) ; if ( shouldOutputHeader ( exchange , name , value ) ) { message . setProperty ( name , value ) ; } } String id = exchange . getExchangeId ( ) ; if ( id != null ) { message . setProperty ( "exchangeId" , id ) ; } } public Object extractBodyFromXmpp ( XmppExchange exchange , Message message ) { return message . getBody ( ) ; } protected boolean shouldOutputHeader ( Exchange exchange , String headerName , Object headerValue ) { return true ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeleteFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( DeleteFileProcessStrategy . class ) ; public DeleteFileProcessStrategy ( ) { } public DeleteFileProcessStrategy ( boolean lockFile ) { super ( lockFile ) ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Deleting file: " + file ) ; } boolean deleted = file . delete ( ) ; if ( ! deleted ) { LOG . warn ( "Could not delete file: " + file ) ; } super . commit ( endpoint , exchange , file ) ; } } 	1
package org . apache . camel . component . spring . integration . converter ; import java . util . Map ; import org . apache . camel . Converter ; import org . apache . camel . Endpoint ; import org . apache . camel . component . spring . integration . SpringIntegrationEndpoint ; import org . apache . camel . component . spring . integration . SpringIntegrationMessage ; import org . springframework . integration . channel . MessageChannel ; import org . springframework . integration . message . DefaultMessageHeader ; import org . springframework . integration . message . GenericMessage ; @ Converter public final class SpringIntegrationConverter { private SpringIntegrationConverter ( ) { } @ Converter public static Endpoint toEndpoint ( final MessageChannel channel ) throws Exception { if ( channel == null ) { throw new IllegalArgumentException ( "The MessageChannel is null" ) ; } Endpoint answer = new SpringIntegrationEndpoint ( "URL" , channel , null ) ; return answer ; } @ SuppressWarnings ( "unchecked" ) @ Converter public static org . springframework . integration . message . Message toSpringMessage ( final org . apache . camel . Message camelMessage ) throws Exception { if ( camelMessage instanceof SpringIntegrationMessage ) { SpringIntegrationMessage siMessage = ( SpringIntegrationMessage ) camelMessage ; org . springframework . integration . message . Message message = siMessage . getMessage ( ) ; if ( message != null ) { return message ; } } DefaultMessageHeader messageHeader = new DefaultMessageHeader ( ) ; Map < String , Object > headers = camelMessage . getHeaders ( ) ; for ( String key : headers . keySet ( ) ) { Object value = headers . get ( key ) ; messageHeader . setAttribute ( key , value ) ; } return new GenericMessage ( camelMessage . getBody ( ) , messageHeader ) ; } @ Converter public static org . apache . camel . Message toCamelMessage ( final org . springframework . integration . message . Message springMessage ) throws Exception { return new SpringIntegrationMessage ( springMessage ) ; } } 	0
package org . apache . camel . processor . validation ; import java . util . ArrayList ; import java . util . List ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultValidationErrorHandler implements ValidatorErrorHandler { private static final transient Log LOG = LogFactory . getLog ( DefaultValidationErrorHandler . class ) ; private List < SAXParseException > warnings = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > errors = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > fatalErrors = new ArrayList < SAXParseException > ( ) ; public void warning ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "warning: " + e , e ) ; } warnings . add ( e ) ; } public void error ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "error: " + e , e ) ; } errors . add ( e ) ; } public void fatalError ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "fatalError: " + e , e ) ; } fatalErrors . add ( e ) ; } public void reset ( ) { warnings . clear ( ) ; errors . clear ( ) ; fatalErrors . clear ( ) ; } public boolean isValid ( ) { return errors . isEmpty ( ) && fatalErrors . isEmpty ( ) ; } public void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } public void handleErrors ( Exchange exchange , Object schema ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } } 	1
package org . apache . camel . component . vm ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . component . seda . SedaComponent ; import org . apache . camel . component . seda . SedaEndpoint ; public class VmComponent extends SedaComponent { protected static final Map < String , BlockingQueue > QUEUES = new HashMap < String , BlockingQueue > ( ) ; private static final AtomicInteger START_COUNTER = new AtomicInteger ( ) ; @ Override protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { BlockingQueue < Exchange > blockingQueue = getBlockingQueue ( uri , parameters ) ; return new SedaEndpoint ( uri , this , blockingQueue ) ; } protected BlockingQueue < Exchange > getBlockingQueue ( String uri , Map parameters ) { synchronized ( QUEUES ) { BlockingQueue < Exchange > answer = QUEUES . get ( uri ) ; if ( answer == null ) { answer = createQueue ( uri , parameters ) ; QUEUES . put ( uri , answer ) ; } return answer ; } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; START_COUNTER . incrementAndGet ( ) ; } @ Override protected void doStop ( ) throws Exception { super . doStop ( ) ; if ( START_COUNTER . decrementAndGet ( ) == 0 ) { synchronized ( QUEUES ) { for ( BlockingQueue q : QUEUES . values ( ) ) { q . clear ( ) ; } QUEUES . clear ( ) ; } } } } 	0
package org . apache . camel . model ; import java . util . concurrent . LinkedBlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Splitter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "splitter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SplitterType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; public SplitterType ( ) { } public SplitterType ( Expression expression ) { super ( expression ) ; } public SplitterType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Splitter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "splitter" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } if ( threadPoolExecutor == null ) { threadPoolExecutor = new ThreadPoolExecutor ( 4 , 16 , 0L , TimeUnit . MILLISECONDS , new LinkedBlockingQueue ( ) ) ; } return new Splitter ( getExpression ( ) . createExpression ( routeContext ) , childProcessor , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public void setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public void setThreadPoolExecutor ( ThreadPoolExecutor threadPoolExecutor ) { this . threadPoolExecutor = threadPoolExecutor ; } } 	1
package org . apache . camel ; public interface CamelContextAware { void setCamelContext ( CamelContext camelContext ) ; } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import javax . activation . DataHandler ; import org . apache . camel . Message ; public class DefaultMessage extends MessageSupport { private Map < String , Object > headers ; private Map < String , DataHandler > attachments ; @ Override public String toString ( ) { return "Message: " + getBody ( ) ; } public Object getHeader ( String name ) { return getHeaders ( ) . get ( name ) ; } public < T > T getHeader ( String name , Class < T > type ) { Object value = getHeader ( name ) ; return getExchange ( ) . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setHeader ( String name , Object value ) { if ( headers == null ) { headers = createHeaders ( ) ; } headers . put ( name , value ) ; } public Object removeHeader ( String name ) { if ( headers != null ) { return headers . remove ( name ) ; } else { return null ; } } public Map < String , Object > getHeaders ( ) { if ( headers == null ) { headers = createHeaders ( ) ; } return headers ; } public void setHeaders ( Map < String , Object > headers ) { this . headers = headers ; } public DefaultMessage newInstance ( ) { return new DefaultMessage ( ) ; } protected Map < String , Object > createHeaders ( ) { HashMap < String , Object > map = new HashMap < String , Object > ( ) ; populateInitialHeaders ( map ) ; return map ; } protected void populateInitialHeaders ( Map < String , Object > map ) { } protected Map < String , DataHandler > createAttachments ( ) { HashMap < String , DataHandler > map = new HashMap < String , DataHandler > ( ) ; populateInitialAttachments ( map ) ; return map ; } protected void populateInitialAttachments ( Map < String , DataHandler > map ) { } public void addAttachment ( String id , DataHandler content ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } attachments . put ( id , content ) ; } public DataHandler getAttachment ( String id ) { return getAttachments ( ) . get ( id ) ; } public Set < String > getAttachmentNames ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments . keySet ( ) ; } public void removeAttachment ( String id ) { if ( attachments != null && attachments . containsKey ( id ) ) { attachments . remove ( id ) ; } } public Map < String , DataHandler > getAttachments ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments ; } public void setAttachments ( Map < String , DataHandler > attachments ) { this . attachments = attachments ; } public boolean hasAttachments ( ) { return this . attachments != null && this . attachments . size ( ) > 0 ; } protected boolean hasPopulatedHeaders ( ) { return headers != null ; } } 	1
package org . apache . camel . component . seda ; import java . util . Map ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; public class SedaComponent extends DefaultComponent < Exchange > { public BlockingQueue < Exchange > createQueue ( String uri , Map parameters ) { int size = getAndRemoveParameter ( parameters , "size" , Integer . class , 1000 ) ; return new LinkedBlockingQueue < Exchange > ( size ) ; } @ Override protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new SedaEndpoint ( uri , this , parameters ) ; } } 	0
package org . apache . camel . processor . interceptor ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . converter . stream . StreamCache ; import org . apache . camel . model . InterceptorRef ; import org . apache . camel . model . InterceptorType ; import org . apache . camel . processor . Interceptor ; public class StreamCachingInterceptor extends Interceptor { public StreamCachingInterceptor ( ) { super ( ) ; setInterceptorLogic ( new Processor ( ) { public void process ( Exchange exchange ) throws Exception { Object newBody = exchange . getIn ( ) . getBody ( StreamCache . class ) ; if ( newBody != null ) { exchange . getIn ( ) . setBody ( newBody ) ; } proceed ( exchange ) ; } } ) ; } public StreamCachingInterceptor ( Processor processor ) { this ( ) ; setProcessor ( processor ) ; } @ Override public String toString ( ) { return "StreamCachingInterceptor" ; } public static void noStreamCaching ( List < InterceptorType > interceptors ) { for ( int i = 0 ; i < interceptors . size ( ) ; i ++ ) { InterceptorType interceptor = interceptors . get ( i ) ; if ( interceptor instanceof InterceptorRef && ( ( InterceptorRef ) interceptor ) . getInterceptor ( ) instanceof StreamCachingInterceptor ) { interceptors . remove ( interceptor ) ; } } } } 	1
package org . apache . camel . component . jms ; import java . util . Map ; import javax . jms . ConnectionFactory ; import javax . jms . ExceptionListener ; import javax . jms . Session ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . component . jms . requestor . Requestor ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . core . task . TaskExecutor ; import org . springframework . jms . connection . JmsTransactionManager ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . listener . serversession . ServerSessionFactory ; import org . springframework . jms . support . converter . MessageConverter ; import org . springframework . jms . support . destination . DestinationResolver ; import org . springframework . transaction . PlatformTransactionManager ; import static org . apache . camel . util . ObjectHelper . removeStartingCharacters ; public class JmsComponent extends DefaultComponent < JmsExchange > implements ApplicationContextAware { private static final transient Log LOG = LogFactory . getLog ( JmsComponent . class ) ; private static final String DEFAULT_QUEUE_BROWSE_STRATEGY = "org.apache.camel.component.jms.DefaultQueueBrowseStrategy" ; private JmsConfiguration configuration ; private ApplicationContext applicationContext ; private Requestor requestor ; private QueueBrowseStrategy queueBrowseStrategy ; private boolean attemptedToCreateQueueBrowserStrategy ; public JmsComponent ( ) { } public JmsComponent ( JmsConfiguration configuration ) { this . configuration = configuration ; } public JmsComponent ( CamelContext context ) { super ( context ) ; } public static JmsComponent jmsComponent ( ) { return new JmsComponent ( ) ; } public static JmsComponent jmsComponent ( JmsConfiguration configuration ) { return new JmsComponent ( configuration ) ; } public static JmsComponent jmsComponent ( ConnectionFactory connectionFactory ) { return jmsComponent ( new JmsConfiguration ( connectionFactory ) ) ; } public static JmsComponent jmsComponentClientAcknowledge ( ConnectionFactory connectionFactory ) { JmsConfiguration template = new JmsConfiguration ( connectionFactory ) ; template . setAcknowledgementMode ( Session . CLIENT_ACKNOWLEDGE ) ; return jmsComponent ( template ) ; } public static JmsComponent jmsComponentAutoAcknowledge ( ConnectionFactory connectionFactory ) { JmsConfiguration template = new JmsConfiguration ( connectionFactory ) ; template . setAcknowledgementMode ( Session . AUTO_ACKNOWLEDGE ) ; return jmsComponent ( template ) ; } public static JmsComponent jmsComponentTransacted ( ConnectionFactory connectionFactory ) { JmsTransactionManager transactionManager = new JmsTransactionManager ( ) ; transactionManager . setConnectionFactory ( connectionFactory ) ; return jmsComponentTransacted ( connectionFactory , transactionManager ) ; } public static JmsComponent jmsComponentTransacted ( ConnectionFactory connectionFactory , PlatformTransactionManager transactionManager ) { JmsConfiguration template = new JmsConfiguration ( connectionFactory ) ; template . setTransactionManager ( transactionManager ) ; template . setTransacted ( true ) ; return jmsComponent ( template ) ; } public JmsConfiguration getConfiguration ( ) { if ( configuration == null ) { configuration = createConfiguration ( ) ; if ( applicationContext != null ) { Map beansOfType = applicationContext . getBeansOfType ( ConnectionFactory . class ) ; if ( ! beansOfType . isEmpty ( ) ) { ConnectionFactory cf = ( ConnectionFactory ) beansOfType . values ( ) . iterator ( ) . next ( ) ; configuration . setConnectionFactory ( cf ) ; } beansOfType = applicationContext . getBeansOfType ( DestinationResolver . class ) ; if ( ! beansOfType . isEmpty ( ) ) { DestinationResolver destinationResolver = ( DestinationResolver ) beansOfType . values ( ) . iterator ( ) . next ( ) ; configuration . setDestinationResolver ( destinationResolver ) ; } } } return configuration ; } public void setConfiguration ( JmsConfiguration configuration ) { this . configuration = configuration ; } public void setAcceptMessagesWhileStopping ( boolean acceptMessagesWhileStopping ) { getConfiguration ( ) . setAcceptMessagesWhileStopping ( acceptMessagesWhileStopping ) ; } public void setAcknowledgementMode ( int consumerAcknowledgementMode ) { getConfiguration ( ) . setAcknowledgementMode ( consumerAcknowledgementMode ) ; } public void setAcknowledgementModeName ( String consumerAcknowledgementMode ) { getConfiguration ( ) . setAcknowledgementModeName ( consumerAcknowledgementMode ) ; } public void setAutoStartup ( boolean autoStartup ) { getConfiguration ( ) . setAutoStartup ( autoStartup ) ; } public void setCacheLevel ( int cacheLevel ) { getConfiguration ( ) . setCacheLevel ( cacheLevel ) ; } public void setCacheLevelName ( String cacheName ) { getConfiguration ( ) . setCacheLevelName ( cacheName ) ; } public void setClientId ( String consumerClientId ) { getConfiguration ( ) . setClientId ( consumerClientId ) ; } public void setConcurrentConsumers ( int concurrentConsumers ) { getConfiguration ( ) . setConcurrentConsumers ( concurrentConsumers ) ; } public void setConnectionFactory ( ConnectionFactory connectionFactory ) { getConfiguration ( ) . setConnectionFactory ( connectionFactory ) ; } public void setConsumerType ( ConsumerType consumerType ) { getConfiguration ( ) . setConsumerType ( consumerType ) ; } public void setDeliveryPersistent ( boolean deliveryPersistent ) { getConfiguration ( ) . setDeliveryPersistent ( deliveryPersistent ) ; } public void setDurableSubscriptionName ( String durableSubscriptionName ) { getConfiguration ( ) . setDurableSubscriptionName ( durableSubscriptionName ) ; } public void setExceptionListener ( ExceptionListener exceptionListener ) { getConfiguration ( ) . setExceptionListener ( exceptionListener ) ; } public void setExplicitQosEnabled ( boolean explicitQosEnabled ) { getConfiguration ( ) . setExplicitQosEnabled ( explicitQosEnabled ) ; } public void setExposeListenerSession ( boolean exposeListenerSession ) { getConfiguration ( ) . setExposeListenerSession ( exposeListenerSession ) ; } public void setIdleTaskExecutionLimit ( int idleTaskExecutionLimit ) { getConfiguration ( ) . setIdleTaskExecutionLimit ( idleTaskExecutionLimit ) ; } public void setMaxConcurrentConsumers ( int maxConcurrentConsumers ) { getConfiguration ( ) . setMaxConcurrentConsumers ( maxConcurrentConsumers ) ; } public void setMaxMessagesPerTask ( int maxMessagesPerTask ) { getConfiguration ( ) . setMaxMessagesPerTask ( maxMessagesPerTask ) ; } public void setMessageConverter ( MessageConverter messageConverter ) { getConfiguration ( ) . setMessageConverter ( messageConverter ) ; } public void setMessageIdEnabled ( boolean messageIdEnabled ) { getConfiguration ( ) . setMessageIdEnabled ( messageIdEnabled ) ; } public void setMessageTimestampEnabled ( boolean messageTimestampEnabled ) { getConfiguration ( ) . setMessageTimestampEnabled ( messageTimestampEnabled ) ; } public void setAlwaysCopyMessage ( boolean alwaysCopyMessage ) { getConfiguration ( ) . setAlwaysCopyMessage ( alwaysCopyMessage ) ; } public void setUseMessageIDAsCorrelationID ( boolean useMessageIDAsCorrelationID ) { getConfiguration ( ) . setUseMessageIDAsCorrelationID ( useMessageIDAsCorrelationID ) ; } public void setPriority ( int priority ) { getConfiguration ( ) . setPriority ( priority ) ; } public void setPubSubNoLocal ( boolean pubSubNoLocal ) { getConfiguration ( ) . setPubSubNoLocal ( pubSubNoLocal ) ; } public void setReceiveTimeout ( long receiveTimeout ) { getConfiguration ( ) . setReceiveTimeout ( receiveTimeout ) ; } public void setRecoveryInterval ( long recoveryInterval ) { getConfiguration ( ) . setRecoveryInterval ( recoveryInterval ) ; } public void setServerSessionFactory ( ServerSessionFactory serverSessionFactory ) { getConfiguration ( ) . setServerSessionFactory ( serverSessionFactory ) ; } public void setSubscriptionDurable ( boolean subscriptionDurable ) { getConfiguration ( ) . setSubscriptionDurable ( subscriptionDurable ) ; } public void setTaskExecutor ( TaskExecutor taskExecutor ) { getConfiguration ( ) . setTaskExecutor ( taskExecutor ) ; } public void setTimeToLive ( long timeToLive ) { getConfiguration ( ) . setTimeToLive ( timeToLive ) ; } public void setTransacted ( boolean consumerTransacted ) { getConfiguration ( ) . setTransacted ( consumerTransacted ) ; } public void setTransactionManager ( PlatformTransactionManager transactionManager ) { getConfiguration ( ) . setTransactionManager ( transactionManager ) ; } public void setTransactionName ( String transactionName ) { getConfiguration ( ) . setTransactionName ( transactionName ) ; } public void setTransactionTimeout ( int transactionTimeout ) { getConfiguration ( ) . setTransactionTimeout ( transactionTimeout ) ; } public void setUseVersion102 ( boolean useVersion102 ) { getConfiguration ( ) . setUseVersion102 ( useVersion102 ) ; } public void setJmsOperations ( JmsOperations jmsOperations ) { getConfiguration ( ) . setJmsOperations ( jmsOperations ) ; } public void setDestinationResolver ( DestinationResolver destinationResolver ) { getConfiguration ( ) . setDestinationResolver ( destinationResolver ) ; } public synchronized Requestor getRequestor ( ) throws Exception { if ( requestor == null ) { requestor = new Requestor ( getConfiguration ( ) , getExecutorService ( ) ) ; requestor . start ( ) ; } return requestor ; } public void setRequestor ( Requestor requestor ) { this . requestor = requestor ; } public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { this . applicationContext = applicationContext ; } public QueueBrowseStrategy getQueueBrowseStrategy ( ) { if ( queueBrowseStrategy == null ) { if ( ! attemptedToCreateQueueBrowserStrategy ) { attemptedToCreateQueueBrowserStrategy = true ; try { queueBrowseStrategy = tryCreateDefaultQueueBrowseStrategy ( ) ; } catch ( Throwable e ) { LOG . warn ( "Could not instantiate the QueueBrowseStrategy are you using Spring 2.0.x" + " by any chance? Error: " + e , e ) ; } } } return queueBrowseStrategy ; } public void setQueueBrowseStrategy ( QueueBrowseStrategy queueBrowseStrategy ) { this . queueBrowseStrategy = queueBrowseStrategy ; } @ Override protected void doStop ( ) throws Exception { if ( requestor != null ) { requestor . stop ( ) ; } super . doStop ( ) ; } @ Override protected Endpoint < JmsExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { boolean pubSubDomain = false ; boolean tempDestination = false ; if ( remaining . startsWith ( JmsConfiguration . QUEUE_PREFIX ) ) { pubSubDomain = false ; remaining = removeStartingCharacters ( remaining . substring ( JmsConfiguration . QUEUE_PREFIX . length ( ) ) , '/' ) ; } else if ( remaining . startsWith ( JmsConfiguration . TOPIC_PREFIX ) ) { pubSubDomain = true ; remaining = removeStartingCharacters ( remaining . substring ( JmsConfiguration . TOPIC_PREFIX . length ( ) ) , '/' ) ; } else if ( remaining . startsWith ( JmsConfiguration . TEMP_QUEUE_PREFIX ) ) { pubSubDomain = false ; tempDestination = true ; remaining = removeStartingCharacters ( remaining . substring ( JmsConfiguration . TEMP_QUEUE_PREFIX . length ( ) ) , '/' ) ; } else if ( remaining . startsWith ( JmsConfiguration . TEMP_TOPIC_PREFIX ) ) { pubSubDomain = true ; tempDestination = true ; remaining = removeStartingCharacters ( remaining . substring ( JmsConfiguration . TEMP_TOPIC_PREFIX . length ( ) ) , '/' ) ; } final String subject = convertPathToActualDestination ( remaining , parameters ) ; JmsConfiguration newConfiguration = getConfiguration ( ) . copy ( ) ; JmsEndpoint endpoint ; if ( pubSubDomain ) { if ( tempDestination ) { endpoint = new JmsTemporaryTopicEndpoint ( uri , this , subject , newConfiguration ) ; } else { endpoint = new JmsEndpoint ( uri , this , subject , pubSubDomain , newConfiguration ) ; } } else { QueueBrowseStrategy strategy = getQueueBrowseStrategy ( ) ; if ( tempDestination ) { endpoint = new JmsTemporaryQueueEndpoint ( uri , this , subject , newConfiguration , strategy ) ; } else { endpoint = new JmsQueueEndpoint ( uri , this , subject , newConfiguration , strategy ) ; } } String selector = getAndRemoveParameter ( parameters , "selector" , String . class ) ; if ( selector != null ) { endpoint . setSelector ( selector ) ; } setProperties ( endpoint . getConfiguration ( ) , parameters ) ; return endpoint ; } protected String convertPathToActualDestination ( String path , Map parameters ) { return path ; } protected JmsConfiguration createConfiguration ( ) { return new JmsConfiguration ( ) ; } protected static QueueBrowseStrategy tryCreateDefaultQueueBrowseStrategy ( ) { Class < ? > type = ObjectHelper . loadClass ( DEFAULT_QUEUE_BROWSE_STRATEGY ) ; if ( type == null ) { LOG . warn ( "Could not load class: " + DEFAULT_QUEUE_BROWSE_STRATEGY + " maybe you are on Spring 2.0.x?" ) ; return null ; } else { return ( QueueBrowseStrategy ) ObjectHelper . newInstance ( type ) ; } } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . CollectionHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class Splitter extends MulticastProcessor implements Processor { public static final String SPLIT_SIZE = "org.apache.camel.splitSize" ; public static final String SPLIT_COUNTER = "org.apache.camel.splitCounter" ; private final Expression expression ; public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy ) { this ( expression , destination , aggregationStrategy , false , null ) ; } public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { super ( Collections . singleton ( destination ) , aggregationStrategy , parallelProcessing , threadPoolExecutor ) ; this . expression = expression ; notNull ( expression , "expression" ) ; notNull ( destination , "destination" ) ; } @ Override public String toString ( ) { return "Splitter[on: " + expression + " to: " + getProcessors ( ) . iterator ( ) . next ( ) + " aggregate: " + getAggregationStrategy ( ) + "]" ; } @ Override protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; Integer collectionSize = CollectionHelper . size ( value ) ; List < ProcessorExchangePair > result ; if ( collectionSize != null ) { result = new ArrayList < ProcessorExchangePair > ( collectionSize ) ; } else { result = new ArrayList < ProcessorExchangePair > ( ) ; } Iterator < Object > iter = ObjectConverter . iterator ( value ) ; while ( iter . hasNext ( ) ) { Object part = iter . next ( ) ; Exchange newExchange = exchange . copy ( ) ; Message in = newExchange . getIn ( ) ; in . setBody ( part ) ; result . add ( new ProcessorExchangePair ( getProcessors ( ) . iterator ( ) . next ( ) , newExchange ) ) ; } return result ; } @ Override protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { exchange . getIn ( ) . setHeader ( SPLIT_COUNTER , i ) ; exchange . getIn ( ) . setHeader ( SPLIT_SIZE , allPairs . size ( ) ) ; } } 	1
package org . apache . camel . component . jpa ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . METHOD } ) public @ interface Consumed { } 	0
package org . apache . camel . model ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . MulticastProcessor ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "multicast" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MulticastType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; @ Override public String toString ( ) { return "Multicast[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "multicast" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } protected Processor createCompositeProcessor ( List < Processor > list ) { if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } return new MulticastProcessor ( list , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public MulticastType setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; return this ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public MulticastType setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; return this ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public MulticastType setThreadPoolExecutor ( ThreadPoolExecutor executor ) { this . threadPoolExecutor = executor ; return this ; } @ Override protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { return new StreamCachingInterceptor ( target ) ; } } 	1
package org . apache . camel . converter . jaxp ; import org . w3c . dom . Attr ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . w3c . dom . Text ; import org . apache . camel . Converter ; @ Converter public final class DomConverter { private DomConverter ( ) { } @ Converter public static String toString ( NodeList nodeList ) { StringBuffer buffer = new StringBuffer ( ) ; append ( buffer , nodeList ) ; return buffer . toString ( ) ; } protected static void append ( StringBuffer buffer , NodeList nodeList ) { int size = nodeList . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { append ( buffer , nodeList . item ( i ) ) ; } } protected static void append ( StringBuffer buffer , Node node ) { if ( node instanceof Text ) { Text text = ( Text ) node ; buffer . append ( text . getTextContent ( ) ) ; } else if ( node instanceof Attr ) { Attr attribute = ( Attr ) node ; buffer . append ( attribute . getTextContent ( ) ) ; } else if ( node instanceof Element ) { Element element = ( Element ) node ; append ( buffer , element . getChildNodes ( ) ) ; } else if ( node instanceof Document ) { Document doc = ( Document ) node ; append ( buffer , doc . getChildNodes ( ) ) ; } } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . model . config . BatchResequencerConfig ; import org . apache . camel . model . config . StreamResequencerConfig ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Resequencer ; import org . apache . camel . processor . StreamResequencer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "resequencer" ) public class ResequencerType extends ProcessorType < ProcessorType > { @ XmlElementRef private List < ExpressionType > expressions = new ArrayList < ExpressionType > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; private BatchResequencerConfig batchConfig ; private StreamResequencerConfig streamConfig ; @ XmlTransient private List < Expression > expressionList ; public ResequencerType ( ) { this ( null ) ; } public ResequencerType ( List < Expression > expressions ) { this . expressionList = expressions ; this . batch ( ) ; } @ Override public String getShortName ( ) { return "resequencer" ; } public ResequencerType stream ( ) { return stream ( StreamResequencerConfig . getDefault ( ) ) ; } public ResequencerType batch ( ) { return batch ( BatchResequencerConfig . getDefault ( ) ) ; } public ResequencerType stream ( StreamResequencerConfig config ) { this . streamConfig = config ; this . batchConfig = null ; return this ; } public ResequencerType batch ( BatchResequencerConfig config ) { this . batchConfig = config ; this . streamConfig = null ; return this ; } public ResequencerType expression ( ExpressionType expression ) { expressions . add ( expression ) ; return this ; } @ Override public String toString ( ) { return "Resequencer[ " + getExpressions ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return ExpressionType . getLabel ( getExpressions ( ) ) ; } public List < ExpressionType > getExpressions ( ) { return expressions ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public BatchResequencerConfig getBatchConfig ( ) { return batchConfig ; } public BatchResequencerConfig getBatchConfig ( BatchResequencerConfig defaultConfig ) { return batchConfig ; } public StreamResequencerConfig getStreamConfig ( ) { return streamConfig ; } @ XmlElement ( name = "batch-config" , required = false ) public void setBatchConfig ( BatchResequencerConfig batchConfig ) { batch ( batchConfig ) ; } @ XmlElement ( name = "stream-config" , required = false ) public void setStreamConfig ( StreamResequencerConfig streamConfig ) { stream ( streamConfig ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { if ( batchConfig != null ) { return createBatchResequencer ( routeContext , batchConfig ) ; } else { return createStreamResequencer ( routeContext , streamConfig ) ; } } @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { if ( batchConfig != null ) { routes . add ( createBatchResequencerRoute ( routeContext ) ) ; } else { super . addRoutes ( routeContext , routes ) ; } } private Route < ? extends Exchange > createBatchResequencerRoute ( RouteContext routeContext ) throws Exception { final Resequencer resequencer = createBatchResequencer ( routeContext , batchConfig ) ; return new Route ( routeContext . getEndpoint ( ) , resequencer ) { @ Override public String toString ( ) { return "BatchResequencerRoute[" + getEndpoint ( ) + " -> " + resequencer . getProcessor ( ) + "]" ; } } ; } protected Resequencer createBatchResequencer ( RouteContext routeContext , BatchResequencerConfig config ) throws Exception { Processor processor = routeContext . createProcessor ( this ) ; Resequencer resequencer = new Resequencer ( routeContext . getEndpoint ( ) , processor , resolveExpressionList ( routeContext ) ) ; resequencer . setBatchSize ( config . getBatchSize ( ) ) ; resequencer . setBatchTimeout ( config . getBatchTimeout ( ) ) ; return resequencer ; } protected StreamResequencer createStreamResequencer ( RouteContext routeContext , StreamResequencerConfig config ) throws Exception { config . getComparator ( ) . setExpressions ( resolveExpressionList ( routeContext ) ) ; Processor processor = routeContext . createProcessor ( this ) ; StreamResequencer resequencer = new StreamResequencer ( processor , config . getComparator ( ) , config . getCapacity ( ) ) ; resequencer . setTimeout ( config . getTimeout ( ) ) ; return resequencer ; } private List < Expression > resolveExpressionList ( RouteContext routeContext ) { if ( expressionList == null ) { expressionList = new ArrayList < Expression > ( ) ; for ( ExpressionType expression : expressions ) { expressionList . add ( expression . createExpression ( routeContext ) ) ; } } if ( expressionList . isEmpty ( ) ) { throw new IllegalArgumentException ( "No expressions configured for: " + this ) ; } return expressionList ; } } 	1
package org . apache . camel . component . cxf ; public interface CxfConstants { String METHOD = "method" ; String SERVICE_CLASS = "serviceClass" ; String DATA_FORMAT = "dataFormat" ; String SET_DEFAULT_BUS = "setDefaultBus" ; String WSDL_URL = "wsdlURL" ; String ADDRESS = "address" ; String SERVICE_NAME = "serviceName" ; String PORT_NAME = "portName" ; String PROTOCOL_NAME_RES = "res" ; String OPERATION_NAME = "operationName" ; String OPERATION_NAMESPACE = "operationNameSpace" ; String SPRING_CONTEXT_ENDPOINT = "bean:" ; String CAMEL_TRANSPORT_PREFIX = "camel:" ; String CXF_EXCHANGE = "org.apache.cxf.message.exchange" ; String CAMEL_EXCHANGE = "org.apache.camel.exchange" ; } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . util . ObjectHelper ; public class DefaultProducerTemplate < E extends Exchange > extends ServiceSupport implements ProducerTemplate < E > { private CamelContext context ; private final ProducerCache < E > producerCache = new ProducerCache < E > ( ) ; private boolean useEndpointCache = true ; private final Map < String , Endpoint < E > > endpointCache = new HashMap < String , Endpoint < E > > ( ) ; private Endpoint < E > defaultEndpoint ; public DefaultProducerTemplate ( CamelContext context ) { this . context = context ; } public DefaultProducerTemplate ( CamelContext context , Endpoint defaultEndpoint ) { this ( context ) ; this . defaultEndpoint = defaultEndpoint ; } public E send ( String endpointUri , E exchange ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , exchange ) ; } public E send ( String endpointUri , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor ) ; } public E send ( String endpointUri , Processor processor , AsyncCallback callback ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor , callback ) ; } public E send ( String endpointUri , ExchangePattern pattern , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , pattern , processor ) ; } public E send ( Endpoint < E > endpoint , E exchange ) { E convertedExchange = exchange ; producerCache . send ( endpoint , convertedExchange ) ; return convertedExchange ; } public E send ( Endpoint < E > endpoint , Processor processor ) { return producerCache . send ( endpoint , processor ) ; } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { return producerCache . send ( endpoint , processor , callback ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { return producerCache . send ( endpoint , pattern , processor ) ; } public Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) { E result = send ( endpoint , pattern , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBody ( Endpoint < E > endpoint , Object body ) { E result = send ( endpoint , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result ) ; } public Object sendBody ( String endpointUri , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , body ) ; } public Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , pattern , body ) ; } public Object sendBodyAndHeader ( String endpointUri , final Object body , final String header , final Object headerValue ) { return sendBodyAndHeader ( resolveMandatoryEndpoint ( endpointUri ) , body , header , headerValue ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeaders ( String endpointUri , final Object body , final Map < String , Object > headers ) { return sendBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , body , headers ) ; } public Object sendBodyAndHeaders ( Endpoint endpoint , final Object body , final Map < String , Object > headers ) { E result = send ( endpoint , new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; for ( Map . Entry < String , Object > header : headers . entrySet ( ) ) { in . setHeader ( header . getKey ( ) , header . getValue ( ) ) ; } in . setBody ( body ) ; } } ) ; return extractResultBody ( result ) ; } public E request ( Endpoint < E > endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( Endpoint < E > endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public E request ( String endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( String endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( String endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public Object sendBody ( Object body ) { return sendBody ( getMandatoryDefaultEndpoint ( ) , body ) ; } public E send ( E exchange ) { return send ( getMandatoryDefaultEndpoint ( ) , exchange ) ; } public E send ( Processor processor ) { return send ( getMandatoryDefaultEndpoint ( ) , processor ) ; } public Object sendBodyAndHeader ( Object body , String header , Object headerValue ) { return sendBodyAndHeader ( getMandatoryDefaultEndpoint ( ) , body , header , headerValue ) ; } public Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) { return sendBodyAndHeaders ( getMandatoryDefaultEndpoint ( ) , body , headers ) ; } public Producer < E > getProducer ( Endpoint < E > endpoint ) { return producerCache . getProducer ( endpoint ) ; } public CamelContext getContext ( ) { return context ; } public Endpoint < E > getDefaultEndpoint ( ) { return defaultEndpoint ; } public void setDefaultEndpoint ( Endpoint < E > defaultEndpoint ) { this . defaultEndpoint = defaultEndpoint ; } public void setDefaultEndpointUri ( String endpointUri ) { setDefaultEndpoint ( getContext ( ) . getEndpoint ( endpointUri ) ) ; } public boolean isUseEndpointCache ( ) { return useEndpointCache ; } public void setUseEndpointCache ( boolean useEndpointCache ) { this . useEndpointCache = useEndpointCache ; } public < T extends Endpoint < ? > > T getResolvedEndpoint ( String endpointUri , Class < T > expectedClass ) { Endpoint < ? > e = null ; synchronized ( endpointCache ) { e = endpointCache . get ( endpointUri ) ; } if ( e != null && expectedClass . isAssignableFrom ( e . getClass ( ) ) ) { return expectedClass . asSubclass ( expectedClass ) . cast ( e ) ; } return null ; } protected Processor createBodyAndHeaderProcessor ( final Object body , final String header , final Object headerValue ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setHeader ( header , headerValue ) ; in . setBody ( body ) ; } } ; } protected Processor createSetBodyProcessor ( final Object body ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setBody ( body ) ; } } ; } protected Endpoint resolveMandatoryEndpoint ( String endpointUri ) { Endpoint endpoint = null ; if ( isUseEndpointCache ( ) ) { synchronized ( endpointCache ) { endpoint = endpointCache . get ( endpointUri ) ; if ( endpoint == null ) { endpoint = context . getEndpoint ( endpointUri ) ; if ( endpoint != null ) { endpointCache . put ( endpointUri , endpoint ) ; } } } } else { endpoint = context . getEndpoint ( endpointUri ) ; } if ( endpoint == null ) { throw new NoSuchEndpointException ( endpointUri ) ; } return endpoint ; } protected Endpoint < E > getMandatoryDefaultEndpoint ( ) { Endpoint < E > answer = getDefaultEndpoint ( ) ; ObjectHelper . notNull ( answer , "defaultEndpoint" ) ; return answer ; } protected void doStart ( ) throws Exception { producerCache . start ( ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; endpointCache . clear ( ) ; } protected Object extractResultBody ( E result ) { return extractResultBody ( result , null ) ; } protected Object extractResultBody ( E result , ExchangePattern pattern ) { Object answer = null ; if ( result != null ) { boolean notOut = pattern != null && ! pattern . isOutCapable ( ) ; boolean hasOut = result . getOut ( false ) != null ; if ( hasOut && ! notOut ) { answer = result . getOut ( ) . getBody ( ) ; } else { answer = result . getIn ( ) . getBody ( ) ; } } return answer ; } } 	1
package org . apache . camel . model . loadbalancer ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "loadBalancerType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalancerType extends IdentifiedType implements LoadBalancer { @ XmlTransient private LoadBalancer loadBalancer ; @ XmlTransient private String loadBalancerTypeName ; public LoadBalancerType ( ) { } public LoadBalancerType ( LoadBalancer loadBalancer ) { this . loadBalancer = loadBalancer ; } protected LoadBalancerType ( String loadBalancerTypeName ) { this . loadBalancerTypeName = loadBalancerTypeName ; } public static LoadBalancer getLoadBalancer ( RouteContext routeContext , LoadBalancerType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or LoadBalancerType" ) ; LoadBalancer loadBalancer = routeContext . lookup ( ref , LoadBalancer . class ) ; if ( loadBalancer instanceof LoadBalancerType ) { type = ( LoadBalancerType ) loadBalancer ; } else { return loadBalancer ; } } return type . getLoadBalancer ( routeContext ) ; } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } protected void configureLoadBalancer ( LoadBalancer loadBalancer ) { } public LoadBalancer getLoadBalancer ( RouteContext routeContext ) { if ( loadBalancer == null ) { loadBalancer = createLoadBalancer ( routeContext ) ; ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; configureLoadBalancer ( loadBalancer ) ; } return loadBalancer ; } protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { if ( loadBalancerTypeName != null ) { Class type = ObjectHelper . loadClass ( loadBalancerTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + loadBalancerTypeName + " is not on the classpath! Cannot use the loadBalancer " + this ) ; } return ( LoadBalancer ) ObjectHelper . newInstance ( type ) ; } return null ; } public void addProcessor ( Processor processor ) { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; loadBalancer . addProcessor ( processor ) ; } public List < Processor > getProcessors ( ) { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; return loadBalancer . getProcessors ( ) ; } public void removeProcessor ( Processor processor ) { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; loadBalancer . removeProcessor ( processor ) ; } public void process ( Exchange exchange ) throws Exception { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; loadBalancer . process ( exchange ) ; } } 	0
package org . apache . camel . component . mock ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . ValueBuilder ; import static org . apache . camel . builder . ExpressionBuilder . bodyExpression ; import static org . apache . camel . builder . ExpressionBuilder . headerExpression ; public abstract class AssertionClause implements Runnable { private List < Predicate < Exchange > > predicates = new ArrayList < Predicate < Exchange > > ( ) ; public AssertionClause predicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return this ; } public ExpressionClause < AssertionClause > predicate ( ) { ExpressionClause < AssertionClause > clause = new ExpressionClause < AssertionClause > ( this ) ; addPredicate ( clause ) ; return clause ; } public ValueBuilder < Exchange > header ( String name ) { Expression < Exchange > expression = headerExpression ( name ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder body ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder bodyAs ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder outBody ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder outBody ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } protected void applyAssertionOn ( MockEndpoint endpoint , int index , Exchange exchange ) { for ( Predicate < Exchange > predicate : predicates ) { predicate . assertMatches ( endpoint . getEndpointUri ( ) + " " , exchange ) ; } } protected void addPredicate ( Predicate < Exchange > predicate ) { predicates . add ( predicate ) ; } public class PredicateValueBuilder extends ValueBuilder < Exchange > { public PredicateValueBuilder ( Expression < Exchange > expression ) { super ( expression ) ; } protected Predicate < Exchange > onNewPredicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return predicate ; } } } 	1
package org . apache . camel . processor . resequencer ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public class DefaultExchangeComparator implements ExpressionResultComparator < Exchange > { private Expression < Exchange > expression ; public Expression < Exchange > getExpression ( ) { return expression ; } public void setExpression ( Expression < Exchange > expression ) { this . expression = expression ; } @ SuppressWarnings ( "unchecked" ) public void setExpressions ( List < Expression > expressions ) { if ( expressions . isEmpty ( ) ) { throw new IllegalArgumentException ( "Expression required to resolve sequence number" ) ; } else if ( expressions . size ( ) > 1 ) { throw new IllegalArgumentException ( "More than one expression currently not supported" ) ; } expression = expressions . get ( 0 ) ; } public boolean predecessor ( Exchange o1 , Exchange o2 ) { long n1 = getSequenceNumber ( o1 ) ; long n2 = getSequenceNumber ( o2 ) ; return n1 == ( n2 - 1L ) ; } public boolean successor ( Exchange o1 , Exchange o2 ) { long n1 = getSequenceNumber ( o1 ) ; long n2 = getSequenceNumber ( o2 ) ; return n2 == ( n1 - 1L ) ; } public int compare ( Exchange o1 , Exchange o2 ) { Long n1 = getSequenceNumber ( o1 ) ; Long n2 = getSequenceNumber ( o2 ) ; return n1 . compareTo ( n2 ) ; } private long getSequenceNumber ( Exchange exchange ) { return ( Long ) expression . evaluate ( exchange ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . DelegateProcessor ; @ XmlRootElement ( name = "routes" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RoutesType extends OptionalIdentifiedType < RoutesType > implements RouteContainer { @ XmlAttribute private Boolean inheritErrorHandlerFlag ; @ XmlElementRef private List < RouteType > routes = new ArrayList < RouteType > ( ) ; @ XmlElementRef private List < ServiceActivationType > activations = new ArrayList < ServiceActivationType > ( ) ; @ XmlTransient private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlTransient private List < InterceptType > intercepts = new ArrayList < InterceptType > ( ) ; @ XmlTransient private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; @ XmlTransient private CamelContext camelContext ; @ XmlTransient private ErrorHandlerBuilder errorHandlerBuilder ; @ Override public String toString ( ) { return "Routes: " + routes ; } public List < RouteType > getRoutes ( ) { return routes ; } public void setRoutes ( List < RouteType > routes ) { this . routes = routes ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < InterceptType > getIntercepts ( ) { return intercepts ; } public void setIntercepts ( List < InterceptType > intercepts ) { this . intercepts = intercepts ; } public List < ExceptionType > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < ExceptionType > exceptions ) { this . exceptions = exceptions ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public boolean isInheritErrorHandler ( ) { return ProcessorType . isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public RouteType route ( ) { RouteType route = createRoute ( ) ; return route ( route ) ; } public RouteType from ( String uri ) { RouteType route = createRoute ( ) ; route . from ( uri ) ; return route ( route ) ; } public RouteType from ( Endpoint endpoint ) { RouteType route = createRoute ( ) ; route . from ( endpoint ) ; return route ( route ) ; } public RouteType route ( RouteType route ) { route . setCamelContext ( getCamelContext ( ) ) ; route . setInheritErrorHandlerFlag ( getInheritErrorHandlerFlag ( ) ) ; List < InterceptorType > list = getInterceptors ( ) ; for ( InterceptorType interceptorType : list ) { route . addInterceptor ( interceptorType ) ; } List < InterceptType > intercepts = getIntercepts ( ) ; for ( InterceptType intercept : intercepts ) { InterceptType proxy = intercept . createProxy ( ) ; route . addOutput ( proxy ) ; route . pushBlock ( proxy . getProceed ( ) ) ; } route . getOutputs ( ) . addAll ( getExceptions ( ) ) ; getRoutes ( ) . add ( route ) ; return route ; } public RoutesType intercept ( DelegateProcessor interceptor ) { getInterceptors ( ) . add ( new InterceptorRef ( interceptor ) ) ; return this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer . when ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; getExceptions ( ) . add ( answer ) ; return answer ; } protected RouteType createRoute ( ) { RouteType route = new RouteType ( ) ; ErrorHandlerBuilder handler = getErrorHandlerBuilder ( ) ; if ( isInheritErrorHandler ( ) && handler != null ) { route . setErrorHandlerBuilderIfNull ( handler ) ; } return route ; } } 	1
package org . apache . camel ; import java . util . Map ; import java . util . Set ; import javax . activation . DataHandler ; public interface Message { String getMessageId ( ) ; void setMessageId ( String messageId ) ; Exchange getExchange ( ) ; Object getHeader ( String name ) ; < T > T getHeader ( String name , Class < T > type ) ; void setHeader ( String name , Object value ) ; Object removeHeader ( String name ) ; Map < String , Object > getHeaders ( ) ; void setHeaders ( Map < String , Object > headers ) ; Object getBody ( ) ; < T > T getBody ( Class < T > type ) ; void setBody ( Object body ) ; < T > void setBody ( Object body , Class < T > type ) ; Message copy ( ) ; void copyFrom ( Message message ) ; DataHandler getAttachment ( String id ) ; Set < String > getAttachmentNames ( ) ; void removeAttachment ( String id ) ; void addAttachment ( String id , DataHandler content ) ; Map < String , DataHandler > getAttachments ( ) ; void setAttachments ( Map < String , DataHandler > attachments ) ; boolean hasAttachments ( ) ; } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . ErrorHandlerSupport ; public abstract class ErrorHandlerBuilderSupport implements ErrorHandlerBuilder { private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; public void addErrorHandlers ( ExceptionType exception ) { exceptions . add ( exception ) ; } protected void configure ( ErrorHandlerSupport handler ) { for ( ExceptionType exception : exceptions ) { handler . addExceptionPolicy ( exception ) ; } } public List < ExceptionType > getExceptions ( ) { return exceptions ; } } 	1
package org . apache . camel . spring . spi ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . transaction . TransactionDefinition ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . DefaultTransactionStatus ; import org . springframework . transaction . support . TransactionCallbackWithoutResult ; import org . springframework . transaction . support . TransactionSynchronizationManager ; import org . springframework . transaction . support . TransactionTemplate ; public class TransactionInterceptor extends DelegateProcessor { public static final ExchangeProperty < Boolean > TRANSACTED = new ExchangeProperty < Boolean > ( "transacted" , "org.apache.camel.transacted" , Boolean . class ) ; private static final transient Log LOG = LogFactory . getLog ( TransactionInterceptor . class ) ; private final TransactionTemplate transactionTemplate ; private ThreadLocal < RedeliveryData > previousRollback = new ThreadLocal < RedeliveryData > ( ) { @ Override protected RedeliveryData initialValue ( ) { return new RedeliveryData ( ) ; } } ; private RedeliveryPolicy redeliveryPolicy ; public TransactionInterceptor ( TransactionTemplate transactionTemplate ) { this . transactionTemplate = transactionTemplate ; } public TransactionInterceptor ( Processor processor , TransactionTemplate transactionTemplate ) { super ( processor ) ; this . transactionTemplate = transactionTemplate ; } public TransactionInterceptor ( Processor processor , TransactionTemplate transactionTemplate , RedeliveryPolicy redeliveryPolicy ) { this ( processor , transactionTemplate ) ; this . redeliveryPolicy = redeliveryPolicy ; } @ Override public String toString ( ) { return "TransactionInterceptor:" + propagationBehaviorToString ( transactionTemplate . getPropagationBehavior ( ) ) + "[" + getProcessor ( ) + "]" ; } public void process ( final Exchange exchange ) { LOG . debug ( "Transaction begin" ) ; final RedeliveryData redeliveryData = previousRollback . get ( ) ; transactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { protected void doInTransactionWithoutResult ( TransactionStatus status ) { if ( redeliveryPolicy != null && redeliveryData . previousRollback ) { redeliveryData . redeliveryDelay = redeliveryPolicy . sleep ( redeliveryData . redeliveryDelay ) ; } RuntimeCamelException rce = null ; boolean activeTx = false ; try { activeTx = TransactionSynchronizationManager . isActualTransactionActive ( ) ; if ( ! activeTx ) { activeTx = status . isNewTransaction ( ) && ! status . isCompleted ( ) ; if ( ! activeTx ) { if ( DefaultTransactionStatus . class . isAssignableFrom ( status . getClass ( ) ) ) { DefaultTransactionStatus defStatus = DefaultTransactionStatus . class . cast ( status ) ; activeTx = defStatus . hasTransaction ( ) && ! status . isCompleted ( ) ; } } } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Is actual transaction active: " + activeTx ) ; } if ( activeTx ) { TRANSACTED . set ( exchange , Boolean . TRUE ) ; } processNext ( exchange ) ; if ( exchange . getException ( ) != null ) { rce = new RuntimeCamelException ( exchange . getException ( ) ) ; } } catch ( Exception e ) { rce = new RuntimeCamelException ( e ) ; } if ( rce != null ) { redeliveryData . previousRollback = true ; if ( activeTx ) { status . setRollbackOnly ( ) ; LOG . debug ( "Transaction rollback" ) ; } throw rce ; } } } ) ; redeliveryData . previousRollback = false ; redeliveryData . redeliveryDelay = 0L ; LOG . debug ( "Transaction commit" ) ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } protected static class RedeliveryData { boolean previousRollback ; long redeliveryDelay ; } protected String propagationBehaviorToString ( int propagationBehavior ) { String rc ; switch ( propagationBehavior ) { case TransactionDefinition . PROPAGATION_MANDATORY : rc = "PROPAGATION_MANDATORY" ; break ; case TransactionDefinition . PROPAGATION_NESTED : rc = "PROPAGATION_NESTED" ; break ; case TransactionDefinition . PROPAGATION_NEVER : rc = "PROPAGATION_NEVER" ; break ; case TransactionDefinition . PROPAGATION_NOT_SUPPORTED : rc = "PROPAGATION_NOT_SUPPORTED" ; break ; case TransactionDefinition . PROPAGATION_REQUIRED : rc = "PROPAGATION_REQUIRED" ; break ; case TransactionDefinition . PROPAGATION_REQUIRES_NEW : rc = "PROPAGATION_REQUIRES_NEW" ; break ; case TransactionDefinition . PROPAGATION_SUPPORTS : rc = "PROPAGATION_SUPPORTS" ; break ; default : rc = "UNKNOWN" ; } return rc ; } } 	0
package org . apache . camel . component . file . strategy ; public class NoOpFileProcessStrategy extends FileProcessStrategySupport { public NoOpFileProcessStrategy ( ) { super ( true ) ; } public NoOpFileProcessStrategy ( boolean isLock ) { super ( isLock ) ; } } 	1
package org . apache . camel . builder . xml ; import java . io . StringWriter ; import javax . xml . transform . Result ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Message ; public class StringResultHandler implements ResultHandler { StringWriter buffer = new StringWriter ( ) ; StreamResult result = new StreamResult ( buffer ) ; public Result getResult ( ) { return result ; } public void setBody ( Message in ) { in . setBody ( buffer . toString ( ) ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . model . InterceptType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . RoutesType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public abstract class RouteBuilder extends BuilderSupport implements Routes { private AtomicBoolean initialized = new AtomicBoolean ( false ) ; private RoutesType routeCollection = new RoutesType ( ) ; private List < Route > routes = new ArrayList < Route > ( ) ; public RouteBuilder ( ) { this ( null ) ; } public RouteBuilder ( CamelContext context ) { super ( context ) ; } @ Override public String toString ( ) { return routeCollection . toString ( ) ; } public abstract void configure ( ) throws Exception ; public RouteType from ( String uri ) { RouteType answer = routeCollection . from ( uri ) ; configureRoute ( answer ) ; return answer ; } public RouteType from ( Endpoint endpoint ) { RouteType answer = routeCollection . from ( endpoint ) ; configureRoute ( answer ) ; return answer ; } public RouteBuilder errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return this ; } public RouteBuilder inheritErrorHandler ( boolean value ) { routeCollection . setInheritErrorHandlerFlag ( value ) ; return this ; } public RouteBuilder intercept ( DelegateProcessor interceptor ) { routeCollection . intercept ( interceptor ) ; return this ; } public InterceptType intercept ( ) { return routeCollection . intercept ( ) ; } public ChoiceType intercept ( Predicate predicate ) { return routeCollection . intercept ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { return routeCollection . exception ( exceptionType ) ; } public CamelContext getContext ( ) { CamelContext context = super . getContext ( ) ; if ( context == null ) { context = createContainer ( ) ; setContext ( context ) ; } return context ; } public List < Route > getRouteList ( ) throws Exception { checkInitialized ( ) ; return routes ; } @ Override public void setInheritErrorHandler ( boolean inheritErrorHandler ) { super . setInheritErrorHandler ( inheritErrorHandler ) ; routeCollection . setInheritErrorHandlerFlag ( inheritErrorHandler ) ; } @ Override public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { super . setErrorHandlerBuilder ( errorHandlerBuilder ) ; routeCollection . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } protected void checkInitialized ( ) throws Exception { if ( initialized . compareAndSet ( false , true ) ) { configure ( ) ; populateRoutes ( routes ) ; } } protected void populateRoutes ( List < Route > routes ) throws Exception { CamelContext camelContext = getContext ( ) ; if ( camelContext == null ) { throw new IllegalArgumentException ( "No CamelContext has been injected!" ) ; } routeCollection . setCamelContext ( camelContext ) ; camelContext . addRouteDefinitions ( routeCollection . getRoutes ( ) ) ; } public void setRouteCollection ( RoutesType routeCollection ) { this . routeCollection = routeCollection ; } public RoutesType getRouteCollection ( ) { return this . routeCollection ; } public void noStreamCaching ( ) { StreamCachingInterceptor . noStreamCaching ( routeCollection . getInterceptors ( ) ) ; } public void streamCaching ( ) { routeCollection . intercept ( new StreamCachingInterceptor ( ) ) ; } protected CamelContext createContainer ( ) { return new DefaultCamelContext ( ) ; } protected void configureRoute ( RouteType route ) { route . setGroup ( getClass ( ) . getName ( ) ) ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . io . InputStream ; import java . io . OutputStream ; import org . apache . commons . io . IOUtils ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . phase . Phase ; public class RawMessageContentRedirectInterceptor extends AbstractPhaseInterceptor < Message > { public RawMessageContentRedirectInterceptor ( ) { super ( Phase . WRITE ) ; } public void handleMessage ( Message message ) throws Fault { Exception ex = message . getContent ( Exception . class ) ; if ( ex != null ) { if ( ex instanceof Fault ) { throw ( Fault ) ex ; } else { throw new Fault ( ex ) ; } } InputStream is = message . getContent ( InputStream . class ) ; OutputStream os = message . getContent ( OutputStream . class ) ; try { IOUtils . copy ( is , os ) ; is . close ( ) ; os . flush ( ) ; } catch ( Exception e ) { throw new Fault ( e ) ; } } } 	0
package org . apache . camel . util ; import java . beans . PropertyEditor ; import java . beans . PropertyEditorManager ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Set ; import org . apache . camel . TypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class IntrospectionSupport { private static final transient Log LOG = LogFactory . getLog ( IntrospectionSupport . class ) ; private IntrospectionSupport ( ) { } public static boolean getProperties ( Object target , Map props , String optionPrefix ) { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } if ( optionPrefix == null ) { optionPrefix = "" ; } Class clazz = target . getClass ( ) ; Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { String name = method . getName ( ) ; Class type = method . getReturnType ( ) ; Class params [ ] = method . getParameterTypes ( ) ; if ( name . startsWith ( "get" ) && params . length == 0 && type != null && isSettableType ( type ) ) { try { Object value = method . invoke ( target ) ; if ( value == null ) { continue ; } String strValue = convertToString ( value , type ) ; if ( strValue == null ) { continue ; } name = name . substring ( 3 , 4 ) . toLowerCase ( ) + name . substring ( 4 ) ; props . put ( optionPrefix + name , strValue ) ; rc = true ; } catch ( Throwable ignore ) { } } } return rc ; } public static Object getProperty ( Object target , String prop ) throws SecurityException , NoSuchMethodException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( prop == null ) { throw new IllegalArgumentException ( "prop was null." ) ; } prop = prop . substring ( 0 , 1 ) . toUpperCase ( ) + prop . substring ( 1 ) ; Class clazz = target . getClass ( ) ; Method method = getPropertyGetter ( clazz , prop ) ; return method . invoke ( target ) ; } public static Method getPropertyGetter ( Class type , String propertyName ) throws NoSuchMethodException { Method method = type . getMethod ( "get" + ObjectHelper . capitalize ( propertyName ) ) ; return method ; } public static boolean setProperties ( Object target , Map props , String optionPrefix ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; if ( setProperty ( target , name , value ) ) { iter . remove ( ) ; rc = true ; } } } return rc ; } public static Map extractProperties ( Map props , String optionPrefix ) { if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } HashMap rc = new HashMap ( props . size ( ) ) ; for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; rc . put ( name , value ) ; iter . remove ( ) ; } } return rc ; } public static boolean setProperties ( TypeConverter typeConverter , Object target , Map props ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( setProperty ( typeConverter , target , ( String ) entry . getKey ( ) , entry . getValue ( ) ) ) { iter . remove ( ) ; rc = true ; } } return rc ; } public static boolean setProperties ( Object target , Map props ) throws Exception { return setProperties ( null , target , props ) ; } public static boolean setProperty ( TypeConverter typeConverter , Object target , String name , Object value ) throws Exception { try { Class clazz = target . getClass ( ) ; Method setter = findSetterMethod ( typeConverter , clazz , name , value ) ; if ( setter == null ) { return false ; } if ( value == null || value . getClass ( ) == setter . getParameterTypes ( ) [ 0 ] ) { setter . invoke ( target , value ) ; } else { Object convertedValue = convert ( typeConverter , setter . getParameterTypes ( ) [ 0 ] , value ) ; setter . invoke ( target , convertedValue ) ; } return true ; } catch ( InvocationTargetException e ) { Throwable throwable = e . getTargetException ( ) ; if ( throwable instanceof Exception ) { Exception exception = ( Exception ) throwable ; throw exception ; } else { Error error = ( Error ) throwable ; throw error ; } } } public static boolean setProperty ( Object target , String name , Object value ) throws Exception { return setProperty ( null , target , name , value ) ; } private static Object convert ( TypeConverter typeConverter , Class type , Object value ) throws URISyntaxException { if ( typeConverter != null ) { Object answer = typeConverter . convertTo ( type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Could not convert \"" + value + "\" to " + type . getName ( ) ) ; } return answer ; } PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setAsText ( value . toString ( ) ) ; return editor . getValue ( ) ; } if ( type == URI . class ) { return new URI ( value . toString ( ) ) ; } return null ; } private static String convertToString ( Object value , Class type ) throws URISyntaxException { PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setValue ( value ) ; return editor . getAsText ( ) ; } if ( type == URI . class ) { return value . toString ( ) ; } return null ; } private static Method findSetterMethod ( TypeConverter typeConverter , Class clazz , String name , Object value ) { name = "set" + ObjectHelper . capitalize ( name ) ; while ( clazz != Object . class ) { Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { Class params [ ] = method . getParameterTypes ( ) ; if ( method . getName ( ) . equals ( name ) && params . length == 1 ) { Class paramType = params [ 0 ] ; if ( typeConverter != null || isSettableType ( paramType ) || paramType . isInstance ( value ) ) { return method ; } } } clazz = clazz . getSuperclass ( ) ; } return null ; } private static boolean isSettableType ( Class clazz ) { if ( PropertyEditorManager . findEditor ( clazz ) != null ) { return true ; } if ( clazz == URI . class ) { return true ; } if ( clazz == Boolean . class ) { return true ; } return false ; } public static String toString ( Object target ) { return toString ( target , Object . class ) ; } public static String toString ( Object target , Class stopClass ) { LinkedHashMap map = new LinkedHashMap ( ) ; addFields ( target , target . getClass ( ) , stopClass , map ) ; StringBuffer buffer = new StringBuffer ( simpleName ( target . getClass ( ) ) ) ; buffer . append ( " {" ) ; Set entrySet = map . entrySet ( ) ; boolean first = true ; for ( Iterator iter = entrySet . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( first ) { first = false ; } else { buffer . append ( ", " ) ; } buffer . append ( entry . getKey ( ) ) ; buffer . append ( " = " ) ; appendToString ( buffer , entry . getValue ( ) ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } protected static void appendToString ( StringBuffer buffer , Object value ) { buffer . append ( value ) ; } public static String simpleName ( Class clazz ) { String name = clazz . getName ( ) ; int p = name . lastIndexOf ( "." ) ; if ( p >= 0 ) { name = name . substring ( p + 1 ) ; } return name ; } private static void addFields ( Object target , Class startClass , Class stopClass , LinkedHashMap map ) { if ( startClass != stopClass ) { addFields ( target , startClass . getSuperclass ( ) , stopClass , map ) ; } Field [ ] fields = startClass . getDeclaredFields ( ) ; for ( Field field : fields ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) || Modifier . isTransient ( field . getModifiers ( ) ) || Modifier . isPrivate ( field . getModifiers ( ) ) ) { continue ; } try { field . setAccessible ( true ) ; Object o = field . get ( target ) ; if ( o != null && o . getClass ( ) . isArray ( ) ) { try { o = Arrays . asList ( ( Object [ ] ) o ) ; } catch ( Throwable e ) { } } map . put ( field . getName ( ) , o ) ; } catch ( Throwable e ) { LOG . debug ( "Error adding fields" , e ) ; } } } } 	1
package org . apache . camel . component . spring . integration ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . spring . SpringCamelContext ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . integration . channel . ChannelRegistry ; import org . springframework . integration . channel . MessageChannel ; import org . springframework . integration . config . MessageBusParser ; public class SpringIntegrationProducer extends DefaultProducer < SpringIntegrationExchange > { private static final transient Log LOG = LogFactory . getLog ( SpringIntegrationProducer . class ) ; private SpringCamelContext context ; private MessageChannel inputChannel ; private MessageChannel outputChannel ; private String outputChannelName ; private ChannelRegistry channelRegistry ; private SpringIntegrationEndpoint endpoint ; public SpringIntegrationProducer ( SpringIntegrationEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; context = ( SpringCamelContext ) endpoint . getCamelContext ( ) ; if ( context != null && endpoint . getMessageChannel ( ) == null ) { outputChannelName = endpoint . getDefaultChannel ( ) ; channelRegistry = ( ChannelRegistry ) context . getApplicationContext ( ) . getBean ( MessageBusParser . MESSAGE_BUS_BEAN_NAME ) ; if ( ObjectHelper . isNullOrBlank ( outputChannelName ) ) { outputChannelName = endpoint . getInputChannel ( ) ; } if ( ObjectHelper . isNullOrBlank ( outputChannelName ) ) { throw new RuntimeCamelException ( "Can't find the right outputChannelName," + "please check the endpoint uri outputChannel part!" ) ; } else { outputChannel = ( MessageChannel ) channelRegistry . lookupChannel ( outputChannelName ) ; } } else { if ( endpoint . getMessageChannel ( ) != null ) { outputChannel = endpoint . getMessageChannel ( ) ; } else { throw new RuntimeCamelException ( "Can't find the right message channel, please check your configuration." ) ; } } if ( endpoint . isInOut ( ) ) { endpoint . setExchangePattern ( ExchangePattern . InOut ) ; if ( ObjectHelper . isNullOrBlank ( endpoint . getInputChannel ( ) ) ) { throw new RuntimeCamelException ( "Can't find the right inputChannel, " + "please check the endpoint uri inputChannel part!" ) ; } else { inputChannel = ( MessageChannel ) channelRegistry . lookupChannel ( endpoint . getInputChannel ( ) ) ; } } } public void process ( Exchange exchange ) throws Exception { org . springframework . integration . message . Message siOutmessage = SpringIntegrationBinding . createSpringIntegrationMessage ( exchange ) ; if ( exchange . getPattern ( ) . isInCapable ( ) ) { siOutmessage . getHeader ( ) . setReturnAddress ( inputChannel ) ; outputChannel . send ( siOutmessage ) ; org . springframework . integration . message . Message siInMessage = inputChannel . receive ( ) ; SpringIntegrationBinding . storeToCamelMessage ( siInMessage , exchange . getOut ( ) ) ; } else { outputChannel . send ( siOutmessage ) ; } } } 	0
package org . apache . camel . view ; import java . io . PrintWriter ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; public class RouteDotGenerator extends GraphGeneratorSupport { public RouteDotGenerator ( String dir ) { super ( dir , ".dot" ) ; } protected void printRoutes ( PrintWriter writer , Map < String , List < RouteType > > map ) { Set < Map . Entry < String , List < RouteType > > > entries = map . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { String group = entry . getKey ( ) ; printRoutes ( writer , group , entry . getValue ( ) ) ; } } protected void printRoutes ( PrintWriter writer , String group , List < RouteType > routes ) { if ( group != null ) { writer . println ( "subgraph cluster_" + ( clusterCounter ++ ) + " {" ) ; writer . println ( "label = \"" + group + "\";" ) ; writer . println ( "color = grey;" ) ; writer . println ( "style = \"dashed\";" ) ; writer . println ( "URL = \"" + group + ".html\";" ) ; writer . println ( ) ; } for ( RouteType route : routes ) { List < FromType > inputs = route . getInputs ( ) ; for ( FromType input : inputs ) { printRoute ( writer , route , input ) ; } writer . println ( ) ; } if ( group != null ) { writer . println ( "}" ) ; writer . println ( ) ; } } protected String escapeNodeId ( String text ) { return text . replace ( '.' , '_' ) . replace ( "$" , "_" ) ; } protected void printRoute ( PrintWriter writer , final RouteType route , FromType input ) { NodeData nodeData = getNodeData ( input ) ; printNode ( writer , nodeData ) ; NodeData from = nodeData ; for ( ProcessorType output : route . getOutputs ( ) ) { NodeData newData = printNode ( writer , from , output ) ; from = newData ; } } protected NodeData printNode ( PrintWriter writer , NodeData fromData , ProcessorType node ) { if ( node instanceof MulticastType ) { List < ProcessorType > outputs = node . getOutputs ( ) ; for ( ProcessorType output : outputs ) { printNode ( writer , fromData , output ) ; } return fromData ; } NodeData toData = getNodeData ( node ) ; printNode ( writer , toData ) ; if ( fromData != null ) { writer . print ( fromData . id ) ; writer . print ( " -> " ) ; writer . print ( toData . id ) ; writer . println ( " [" ) ; String label = fromData . edgeLabel ; if ( isNotNullAndNonEmpty ( label ) ) { writer . println ( "label = \"" + label + "\"" ) ; } writer . println ( "];" ) ; } List < ProcessorType > outputs = toData . outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { NodeData newData = printNode ( writer , toData , output ) ; if ( ! isMulticastNode ( node ) ) { toData = newData ; } } } return toData ; } protected void printNode ( PrintWriter writer , NodeData data ) { if ( ! data . nodeWritten ) { data . nodeWritten = true ; writer . println ( ) ; writer . print ( data . id ) ; writer . println ( " [" ) ; writer . println ( "label = \"" + data . label + "\"" ) ; writer . println ( "tooltip = \"" + data . tooltop + "\"" ) ; if ( data . url != null ) { writer . println ( "URL = \"" + data . url + "\"" ) ; } String image = data . image ; if ( image != null ) { writer . println ( "shapefile = \"" + image + "\"" ) ; writer . println ( "peripheries=0" ) ; } String shape = data . shape ; if ( shape == null && image != null ) { shape = "custom" ; } if ( shape != null ) { writer . println ( "shape = \"" + shape + "\"" ) ; } writer . println ( "];" ) ; writer . println ( ) ; } } protected void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) { writer . println ( "digraph CamelRoutes {" ) ; writer . println ( ) ; writer . println ( "node [style = \"rounded,filled\", fillcolor = yellow, " + "fontname=\"Helvetica-Oblique\"];" ) ; writer . println ( ) ; printRoutes ( writer , map ) ; writer . println ( "}" ) ; } } 	1
package org . apache . camel . bam . model ; import java . util . List ; import javax . persistence . Entity ; import javax . persistence . GeneratedValue ; import javax . persistence . Id ; import javax . persistence . UniqueConstraint ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . orm . jpa . JpaTemplate ; @ Entity @ UniqueConstraint ( columnNames = { "name" } ) public class ProcessDefinition extends EntitySupport { private static final transient Log LOG = LogFactory . getLog ( ProcessDefinition . class ) ; private String name ; @ Override @ Id @ GeneratedValue public Long getId ( ) { return super . getId ( ) ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public static ProcessDefinition getRefreshedProcessDefinition ( JpaTemplate template , ProcessDefinition definition ) { ObjectHelper . notNull ( definition , "definition" ) ; Long id = definition . getId ( ) ; if ( id == null ) { LOG . warn ( "No primary key is available!" ) ; return findOrCreateProcessDefinition ( template , definition . getName ( ) ) ; } definition = template . find ( ProcessDefinition . class , id ) ; return definition ; } public static ProcessDefinition findOrCreateProcessDefinition ( JpaTemplate template , String processName ) { List < ProcessDefinition > list = template . find ( "select x from " + ProcessDefinition . class . getName ( ) + " x where x.name = ?1" , processName ) ; if ( ! list . isEmpty ( ) ) { return list . get ( 0 ) ; } else { ProcessDefinition answer = new ProcessDefinition ( ) ; answer . setName ( processName ) ; template . persist ( answer ) ; return answer ; } } } 	0
package org . apache . camel . processor ; import java . io . Serializable ; import java . util . Random ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RedeliveryPolicy implements Cloneable , Serializable { protected static transient Random randomNumberGenerator ; private static final transient Log LOG = LogFactory . getLog ( RedeliveryPolicy . class ) ; protected int maximumRedeliveries = 6 ; protected long initialRedeliveryDelay = 1000L ; protected long maximumRedeliveryDelay = 60 * 1000L ; protected double backOffMultiplier = 2 ; protected boolean useExponentialBackOff ; protected double collisionAvoidanceFactor = 0.15d ; protected boolean useCollisionAvoidance ; public RedeliveryPolicy ( ) { } @ Override public String toString ( ) { return "RedeliveryPolicy[maximumRedeliveries=" + maximumRedeliveries + "]" ; } public RedeliveryPolicy copy ( ) { try { return ( RedeliveryPolicy ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( "Could not clone: " + e , e ) ; } } public boolean shouldRedeliver ( int redeliveryCounter ) { if ( getMaximumRedeliveries ( ) < 0 ) { return true ; } return redeliveryCounter < getMaximumRedeliveries ( ) ; } public long sleep ( long redeliveryDelay ) { redeliveryDelay = getRedeliveryDelay ( redeliveryDelay ) ; if ( redeliveryDelay > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + redeliveryDelay + " millis until attempting redelivery" ) ; } try { Thread . sleep ( redeliveryDelay ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Thread interrupted: " + e , e ) ; } } } return redeliveryDelay ; } public long getRedeliveryDelay ( long previousDelay ) { long redeliveryDelay ; if ( previousDelay == 0 ) { redeliveryDelay = initialRedeliveryDelay ; } else if ( useExponentialBackOff && backOffMultiplier > 1 ) { redeliveryDelay = Math . round ( backOffMultiplier * previousDelay ) ; } else { redeliveryDelay = previousDelay ; } if ( useCollisionAvoidance ) { Random random = getRandomNumberGenerator ( ) ; double variance = ( random . nextBoolean ( ) ? collisionAvoidanceFactor : - collisionAvoidanceFactor ) * random . nextDouble ( ) ; redeliveryDelay += redeliveryDelay * variance ; } if ( maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay ) { redeliveryDelay = maximumRedeliveryDelay ; } return redeliveryDelay ; } public RedeliveryPolicy maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicy initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicy useCollisionAvoidance ( ) { setUseCollisionAvoidance ( true ) ; return this ; } public RedeliveryPolicy useExponentialBackOff ( ) { setUseExponentialBackOff ( true ) ; return this ; } public RedeliveryPolicy backOffMultiplier ( double multiplier ) { useExponentialBackOff ( ) ; setBackOffMultiplier ( multiplier ) ; return this ; } public RedeliveryPolicy collisionAvoidancePercent ( double collisionAvoidancePercent ) { useCollisionAvoidance ( ) ; setCollisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public RedeliveryPolicy maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { setMaximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public short getCollisionAvoidancePercent ( ) { return ( short ) Math . round ( collisionAvoidanceFactor * 100 ) ; } public void setCollisionAvoidancePercent ( double collisionAvoidancePercent ) { this . collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d ; } public double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public int getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( int maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public long getMaximumRedeliveryDelay ( ) { return maximumRedeliveryDelay ; } public void setMaximumRedeliveryDelay ( long maximumRedeliveryDelay ) { this . maximumRedeliveryDelay = maximumRedeliveryDelay ; } public boolean isUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public boolean isUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } protected static synchronized Random getRandomNumberGenerator ( ) { if ( randomNumberGenerator == null ) { randomNumberGenerator = new Random ( ) ; } return randomNumberGenerator ; } } 	1
package org . apache . camel . spring . util ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . Arrays ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . factory . InitializingBean ; import static org . apache . camel . util . ObjectHelper . name ; public class MainRunner implements InitializingBean , Runnable { private static final Log LOG = LogFactory . getLog ( MainRunner . class ) ; private Class main ; private String [ ] args = { } ; private boolean asyncRun = true ; private long delay ; public String toString ( ) { return "MainRunner(" + name ( main ) + " " + Arrays . asList ( getArgs ( ) ) + ")" ; } public void run ( ) { try { runMethodWithoutCatchingExceptions ( ) ; } catch ( NoSuchMethodException e ) { LOG . error ( "Class: " + name ( main ) + " does not have a main method: " + e , e ) ; } catch ( IllegalAccessException e ) { LOG . error ( "Failed to run: " + this + ". Reason: " + e , e ) ; } catch ( InvocationTargetException e ) { Throwable throwable = e . getTargetException ( ) ; LOG . error ( "Failed to run: " + this + ". Reason: " + throwable , throwable ) ; } } public void runMethodWithoutCatchingExceptions ( ) throws NoSuchMethodException , IllegalAccessException , InvocationTargetException { if ( delay > 0 ) { try { Thread . sleep ( delay ) ; } catch ( InterruptedException e ) { LOG . info ( "Caught: " + e , e ) ; } } Method method = main . getMethod ( "main" , String [ ] . class ) ; if ( ! Modifier . isStatic ( method . getModifiers ( ) ) ) { throw new IllegalArgumentException ( "The main method is not static!: " + method ) ; } Object [ ] arguments = { getArgs ( ) } ; method . invoke ( null , arguments ) ; } public String [ ] getArgs ( ) { return args ; } public void setArgs ( String [ ] args ) { this . args = args ; } public boolean isAsyncRun ( ) { return asyncRun ; } public void setAsyncRun ( boolean asyncRun ) { this . asyncRun = asyncRun ; } public Class getMain ( ) { return main ; } public void setMain ( Class main ) { this . main = main ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } public void afterPropertiesSet ( ) throws Exception { if ( main == null ) { throw new IllegalArgumentException ( "You must specify a main class!" ) ; } if ( isAsyncRun ( ) ) { Thread thread = new Thread ( this , "Thread for: " + this ) ; thread . start ( ) ; } else { runMethodWithoutCatchingExceptions ( ) ; } } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RecipientList extends ServiceSupport implements Processor { private final Expression < Exchange > expression ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RecipientList ( Expression < Exchange > expression ) { notNull ( expression , "expression" ) ; this . expression = expression ; } @ Override public String toString ( ) { return "RecipientList[" + expression + "]" ; } public void process ( Exchange exchange ) throws Exception { Object receipientList = expression . evaluate ( exchange ) ; Iterator iter = ObjectConverter . iterator ( receipientList ) ; List < Processor > processors = new ArrayList < Processor > ( ) ; while ( iter . hasNext ( ) ) { Object recipient = iter . next ( ) ; Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , recipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; processors . add ( producer ) ; } MulticastProcessor mp = new MulticastProcessor ( processors , new UseLatestAggregationStrategy ( ) ) ; mp . process ( exchange ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } } 	1
package org . apache . camel . impl . converter ; import java . lang . reflect . Method ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; public class EnumTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > type , Object value ) { if ( type . isEnum ( ) && value != null ) { String text = value . toString ( ) ; Method method = null ; try { method = type . getMethod ( "valueOf" , String . class ) ; } catch ( NoSuchMethodException e ) { throw new RuntimeCamelException ( "Could not find valueOf method on enum type: " + type . getName ( ) ) ; } return ( T ) ObjectHelper . invokeMethod ( method , null , text ) ; } return null ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "when" ) public class WhenType < Type extends ProcessorType > extends ExpressionNode { public WhenType ( ) { } public WhenType ( Predicate predicate ) { super ( predicate ) ; } public WhenType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "When[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "when" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Processor ; import org . apache . camel . spi . Policy ; public class NoPolicy < E > implements Policy < E > { public Processor wrap ( Processor processor ) { return processor ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . SetHeaderProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setHeader" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetHeaderType extends ExpressionNode { @ XmlAttribute private String headerName ; @ XmlAttribute ( required = false ) private String value ; public SetHeaderType ( ) { } public SetHeaderType ( String headerName , ExpressionType expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , Expression expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , String value ) { super ( ExpressionBuilder . constantExpression ( value ) ) ; setHeaderName ( headerName ) ; } @ Override public String toString ( ) { return "SetHeader[ " + getHeaderName ( ) + ", " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setHeader" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr ; if ( getValue ( ) == null ) { expr = getExpression ( ) . createExpression ( routeContext ) ; } else { expr = ExpressionBuilder . constantExpression ( getValue ( ) ) ; } Processor childProcessor = routeContext . createProcessor ( this ) ; return new SetHeaderProcessor ( getHeaderName ( ) , expr , childProcessor ) ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return headerName ; } public void setValue ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlType ( name = "interceptorType" ) public abstract class InterceptorType extends OutputType implements Block { public abstract DelegateProcessor createInterceptor ( RouteContext routeContext ) throws Exception ; } 	0
package org . apache . camel . converter . stream ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import javax . xml . transform . TransformerException ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . converter . jaxp . XmlConverter ; @ Converter public class StreamCacheConverter { private XmlConverter converter = new XmlConverter ( ) ; @ Converter public StreamCache convertToStreamCache ( StreamSource source ) throws TransformerException { return new StreamSourceCache ( converter . toString ( source ) ) ; } @ Converter public StreamCache convertToStreamCache ( InputStream stream ) throws IOException { return new InputStreamCache ( IOConverter . toBytes ( stream ) ) ; } private class StreamSourceCache extends StringSource implements StreamCache { private static final long serialVersionUID = 4147248494104812945L ; public StreamSourceCache ( String text ) { super ( text ) ; } } private class InputStreamCache extends ByteArrayInputStream implements StreamCache { public InputStreamCache ( byte [ ] data ) { super ( data ) ; } } } 	1
package org . apache . camel . util . jndi ; import java . io . Serializable ; import java . util . HashMap ; import java . util . Hashtable ; import java . util . Iterator ; import java . util . Map ; import javax . naming . Binding ; import javax . naming . CompositeName ; import javax . naming . Context ; import javax . naming . LinkRef ; import javax . naming . Name ; import javax . naming . NameClassPair ; import javax . naming . NameNotFoundException ; import javax . naming . NameParser ; import javax . naming . NamingEnumeration ; import javax . naming . NamingException ; import javax . naming . NotContextException ; import javax . naming . OperationNotSupportedException ; import javax . naming . Reference ; import javax . naming . spi . NamingManager ; import org . apache . camel . spi . Injector ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ReflectionInjector ; public class JndiContext implements Context , Serializable { public static final String SEPARATOR = "/" ; protected static final NameParser NAME_PARSER = new NameParser ( ) { public Name parse ( String name ) throws NamingException { return new CompositeName ( name ) ; } } ; protected static final Injector INJETOR = new ReflectionInjector ( ) ; private static final long serialVersionUID = - 5754338187296859149L ; private final Hashtable environment ; private final Map bindings ; private final Map treeBindings ; private boolean frozen ; private String nameInNamespace = "" ; public JndiContext ( ) throws Exception { this ( new Hashtable ( ) ) ; } public JndiContext ( Hashtable env ) throws Exception { this ( env , createBindingsMapFromEnvironment ( env ) ) ; } public JndiContext ( Hashtable environment , Map bindings ) { if ( environment == null ) { this . environment = new Hashtable ( ) ; } else { this . environment = new Hashtable ( environment ) ; } this . bindings = bindings ; treeBindings = new HashMap ( ) ; } public JndiContext ( Hashtable environment , Map bindings , String nameInNamespace ) { this ( environment , bindings ) ; this . nameInNamespace = nameInNamespace ; } protected JndiContext ( JndiContext clone , Hashtable env ) { this . bindings = clone . bindings ; this . treeBindings = clone . treeBindings ; this . environment = new Hashtable ( env ) ; } protected JndiContext ( JndiContext clone , Hashtable env , String nameInNamespace ) { this ( clone , env ) ; this . nameInNamespace = nameInNamespace ; } public static Map createBindingsMapFromEnvironment ( Hashtable env ) throws Exception { Map answer = new HashMap ( env ) ; for ( Object object : env . entrySet ( ) ) { Map . Entry entry = ( Map . Entry ) object ; Object key = entry . getKey ( ) ; Object value = entry . getValue ( ) ; if ( key instanceof String && value instanceof String ) { String keyText = ( String ) key ; String valueText = ( String ) value ; if ( keyText . endsWith ( ".class" ) ) { Class < ? > type = ObjectHelper . loadClass ( valueText ) ; if ( type != null ) { String newEntry = keyText . substring ( 0 , keyText . length ( ) - ".class" . length ( ) ) ; Object bean = createBean ( type , answer , newEntry + "." ) ; if ( bean != null ) { answer . put ( newEntry , bean ) ; } } } } } return answer ; } public void freeze ( ) { frozen = true ; } boolean isFrozen ( ) { return frozen ; } protected Map internalBind ( String name , Object value ) throws NamingException { assert name != null && name . length ( ) > 0 ; assert ! frozen ; Map newBindings = new HashMap ( ) ; int pos = name . indexOf ( '/' ) ; if ( pos == - 1 ) { if ( treeBindings . put ( name , value ) != null ) { throw new NamingException ( "Something already bound at " + name ) ; } bindings . put ( name , value ) ; newBindings . put ( name , value ) ; } else { String segment = name . substring ( 0 , pos ) ; assert segment != null ; assert ! segment . equals ( "" ) ; Object o = treeBindings . get ( segment ) ; if ( o == null ) { o = newContext ( ) ; treeBindings . put ( segment , o ) ; bindings . put ( segment , o ) ; newBindings . put ( segment , o ) ; } else if ( ! ( o instanceof JndiContext ) ) { throw new NamingException ( "Something already bound where a subcontext should go" ) ; } JndiContext defaultContext = ( JndiContext ) o ; String remainder = name . substring ( pos + 1 ) ; Map subBindings = defaultContext . internalBind ( remainder , value ) ; for ( Iterator iterator = subBindings . entrySet ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iterator . next ( ) ; String subName = segment + "/" + ( String ) entry . getKey ( ) ; Object bound = entry . getValue ( ) ; treeBindings . put ( subName , bound ) ; newBindings . put ( subName , bound ) ; } } return newBindings ; } protected JndiContext newContext ( ) { try { return new JndiContext ( ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( e ) ; } } public Object addToEnvironment ( String propName , Object propVal ) throws NamingException { return environment . put ( propName , propVal ) ; } public Hashtable getEnvironment ( ) throws NamingException { return ( Hashtable ) environment . clone ( ) ; } public Object removeFromEnvironment ( String propName ) throws NamingException { return environment . remove ( propName ) ; } public Object lookup ( String name ) throws NamingException { if ( name . length ( ) == 0 ) { return this ; } Object result = treeBindings . get ( name ) ; if ( result == null ) { result = bindings . get ( name ) ; } if ( result == null ) { int pos = name . indexOf ( ':' ) ; if ( pos > 0 ) { String scheme = name . substring ( 0 , pos ) ; Context ctx = NamingManager . getURLContext ( scheme , environment ) ; if ( ctx == null ) { throw new NamingException ( "scheme " + scheme + " not recognized" ) ; } return ctx . lookup ( name ) ; } else { CompositeName path = new CompositeName ( name ) ; if ( path . size ( ) == 0 ) { return this ; } else { String first = path . get ( 0 ) ; Object value = bindings . get ( first ) ; if ( value == null ) { throw new NameNotFoundException ( name ) ; } else if ( value instanceof Context && path . size ( ) > 1 ) { Context subContext = ( Context ) value ; value = subContext . lookup ( path . getSuffix ( 1 ) ) ; } return value ; } } } if ( result instanceof LinkRef ) { LinkRef ref = ( LinkRef ) result ; result = lookup ( ref . getLinkName ( ) ) ; } if ( result instanceof Reference ) { try { result = NamingManager . getObjectInstance ( result , null , null , this . environment ) ; } catch ( NamingException e ) { throw e ; } catch ( Exception e ) { throw ( NamingException ) new NamingException ( "could not look up : " + name ) . initCause ( e ) ; } } if ( result instanceof JndiContext ) { String prefix = getNameInNamespace ( ) ; if ( prefix . length ( ) > 0 ) { prefix = prefix + SEPARATOR ; } result = new JndiContext ( ( JndiContext ) result , environment , prefix + name ) ; } return result ; } public Object lookup ( Name name ) throws NamingException { return lookup ( name . toString ( ) ) ; } public Object lookupLink ( String name ) throws NamingException { return lookup ( name ) ; } public Name composeName ( Name name , Name prefix ) throws NamingException { Name result = ( Name ) prefix . clone ( ) ; result . addAll ( name ) ; return result ; } public String composeName ( String name , String prefix ) throws NamingException { CompositeName result = new CompositeName ( prefix ) ; result . addAll ( new CompositeName ( name ) ) ; return result . toString ( ) ; } public NamingEnumeration list ( String name ) throws NamingException { Object o = lookup ( name ) ; if ( o == this ) { return new ListEnumeration ( ) ; } else if ( o instanceof Context ) { return ( ( Context ) o ) . list ( "" ) ; } else { throw new NotContextException ( ) ; } } public NamingEnumeration listBindings ( String name ) throws NamingException { Object o = lookup ( name ) ; if ( o == this ) { return new ListBindingEnumeration ( ) ; } else if ( o instanceof Context ) { return ( ( Context ) o ) . listBindings ( "" ) ; } else { throw new NotContextException ( ) ; } } public Object lookupLink ( Name name ) throws NamingException { return lookupLink ( name . toString ( ) ) ; } public NamingEnumeration list ( Name name ) throws NamingException { return list ( name . toString ( ) ) ; } public NamingEnumeration listBindings ( Name name ) throws NamingException { return listBindings ( name . toString ( ) ) ; } public void bind ( Name name , Object value ) throws NamingException { bind ( name . toString ( ) , value ) ; } public void bind ( String name , Object value ) throws NamingException { if ( isFrozen ( ) ) { throw new OperationNotSupportedException ( ) ; } else { internalBind ( name , value ) ; } } public void close ( ) throws NamingException { } public Context createSubcontext ( Name name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public Context createSubcontext ( String name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void destroySubcontext ( Name name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void destroySubcontext ( String name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public String getNameInNamespace ( ) throws NamingException { return nameInNamespace ; } public NameParser getNameParser ( Name name ) throws NamingException { return NAME_PARSER ; } public NameParser getNameParser ( String name ) throws NamingException { return NAME_PARSER ; } public void rebind ( Name name , Object value ) throws NamingException { bind ( name , value ) ; } public void rebind ( String name , Object value ) throws NamingException { bind ( name , value ) ; } public void rename ( Name oldName , Name newName ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void rename ( String oldName , String newName ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void unbind ( Name name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void unbind ( String name ) throws NamingException { bindings . remove ( name ) ; treeBindings . remove ( name ) ; } private abstract class LocalNamingEnumeration implements NamingEnumeration { private Iterator i = bindings . entrySet ( ) . iterator ( ) ; public boolean hasMore ( ) throws NamingException { return i . hasNext ( ) ; } public boolean hasMoreElements ( ) { return i . hasNext ( ) ; } protected Map . Entry getNext ( ) { return ( Map . Entry ) i . next ( ) ; } public void close ( ) throws NamingException { } } private class ListEnumeration extends LocalNamingEnumeration { ListEnumeration ( ) { } public Object next ( ) throws NamingException { return nextElement ( ) ; } public Object nextElement ( ) { Map . Entry entry = getNext ( ) ; return new NameClassPair ( ( String ) entry . getKey ( ) , entry . getValue ( ) . getClass ( ) . getName ( ) ) ; } } private class ListBindingEnumeration extends LocalNamingEnumeration { ListBindingEnumeration ( ) { } public Object next ( ) throws NamingException { return nextElement ( ) ; } public Object nextElement ( ) { Map . Entry entry = getNext ( ) ; return new Binding ( ( String ) entry . getKey ( ) , entry . getValue ( ) ) ; } } protected static Object createBean ( Class < ? > type , Map properties , String prefix ) throws Exception { Object value = INJETOR . newInstance ( type ) ; IntrospectionSupport . setProperties ( value , properties , prefix ) ; return value ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . ObjectInput ; import java . io . ObjectInputStream ; import java . io . ObjectOutput ; import java . io . ObjectOutputStream ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Reader ; import java . io . StringReader ; import java . io . Writer ; import java . net . URL ; import java . util . Properties ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Converter ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class IOConverter { private static final transient Log LOG = LogFactory . getLog ( IOConverter . class ) ; private IOConverter ( ) { } @ Converter public static InputStream toInputStream ( URL url ) throws IOException { return url . openStream ( ) ; } @ Converter public static InputStream toInputStream ( File file ) throws FileNotFoundException { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } @ Converter public static BufferedReader toReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new FileReader ( file ) ) ; } @ Converter public static File toFile ( String name ) throws FileNotFoundException { return new File ( name ) ; } @ Converter public static OutputStream toOutputStream ( File file ) throws FileNotFoundException { return new BufferedOutputStream ( new FileOutputStream ( file ) ) ; } @ Converter public static BufferedWriter toWriter ( File file ) throws IOException { return new BufferedWriter ( new FileWriter ( file ) ) ; } @ Converter public static Reader toReader ( InputStream in ) throws FileNotFoundException { return new InputStreamReader ( in ) ; } @ Converter public static Writer toWriter ( OutputStream out ) throws FileNotFoundException { return new OutputStreamWriter ( out ) ; } @ Converter public static StringReader toReader ( String text ) { return new StringReader ( text ) ; } @ Converter public static InputStream toInputStream ( String text ) { return toInputStream ( text . getBytes ( ) ) ; } @ Converter public static InputStream toInputStream ( BufferedReader buffer ) throws IOException { return toInputStream ( toString ( buffer ) ) ; } @ Converter public static InputStream toInputStrean ( DOMSource source ) throws TransformerException , IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( toString ( source ) . getBytes ( ) ) ; return bais ; } @ Converter public static String toString ( byte [ ] data ) { return new String ( data ) ; } @ Converter public static String toString ( File file ) throws IOException { return toString ( toReader ( file ) ) ; } @ Converter public static String toString ( URL url ) throws IOException { return toString ( toInputStream ( url ) ) ; } @ Converter public static String toString ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toString ( ( BufferedReader ) reader ) ; } else { return toString ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } try { CollectionStringBuffer builder = new CollectionStringBuffer ( "\n" ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { return builder . toString ( ) ; } builder . append ( line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } } @ Converter public static String toString ( InputStream in ) throws IOException { return toString ( toReader ( in ) ) ; } public static String toString ( Source source ) throws TransformerException , IOException { return toString ( source , null ) ; } public static String toString ( Source source , Properties props ) throws TransformerException , IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; StreamResult sr = new StreamResult ( bos ) ; Transformer trans = TransformerFactory . newInstance ( ) . newTransformer ( ) ; if ( props == null ) { props = new Properties ( ) ; props . put ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; } trans . setOutputProperties ( props ) ; trans . transform ( source , sr ) ; bos . close ( ) ; return bos . toString ( ) ; } @ Converter public static InputStream toInputStream ( byte [ ] data ) { return new ByteArrayInputStream ( data ) ; } @ Converter public static ObjectOutput toObjectOutput ( OutputStream stream ) throws IOException { if ( stream instanceof ObjectOutput ) { return ( ObjectOutput ) stream ; } else { return new ObjectOutputStream ( stream ) ; } } @ Converter public static ObjectInput toObjectInput ( InputStream stream ) throws IOException { if ( stream instanceof ObjectInput ) { return ( ObjectInput ) stream ; } else { return new ObjectInputStream ( stream ) ; } } @ Converter public static byte [ ] toBytes ( InputStream stream ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; copy ( stream , bos ) ; return bos . toByteArray ( ) ; } protected static void copy ( InputStream stream , ByteArrayOutputStream bos ) throws IOException { byte [ ] data = new byte [ 4096 ] ; int read = stream . read ( data ) ; while ( read != - 1 ) { bos . write ( data , 0 , read ) ; read = stream . read ( data ) ; } bos . flush ( ) ; } } 	1
package org . apache . camel . converter . jaxp ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . Reader ; import java . io . Writer ; import javax . xml . stream . XMLEventReader ; import javax . xml . stream . XMLEventWriter ; import javax . xml . stream . XMLInputFactory ; import javax . xml . stream . XMLOutputFactory ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . stream . XMLStreamWriter ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import org . apache . camel . Converter ; @ Converter public class StaxConverter { private XMLInputFactory inputFactory ; private XMLOutputFactory outputFactory ; @ Converter public XMLEventWriter createXMLEventWriter ( OutputStream out ) throws XMLStreamException { return getOutputFactory ( ) . createXMLEventWriter ( out ) ; } @ Converter public XMLEventWriter createXMLEventWriter ( Writer writer ) throws XMLStreamException { return getOutputFactory ( ) . createXMLEventWriter ( writer ) ; } @ Converter public XMLEventWriter createXMLEventWriter ( Result result ) throws XMLStreamException { return getOutputFactory ( ) . createXMLEventWriter ( result ) ; } @ Converter public XMLStreamWriter createXMLStreamWriter ( OutputStream outputStream ) throws XMLStreamException { return getOutputFactory ( ) . createXMLStreamWriter ( outputStream ) ; } @ Converter public XMLStreamWriter createXMLStreamWriter ( Writer writer ) throws XMLStreamException { return getOutputFactory ( ) . createXMLStreamWriter ( writer ) ; } @ Converter public XMLStreamWriter createXMLStreamWriter ( Result result ) throws XMLStreamException { return getOutputFactory ( ) . createXMLStreamWriter ( result ) ; } @ Converter public XMLStreamReader createXMLStreamReader ( InputStream in ) throws XMLStreamException { return getInputFactory ( ) . createXMLStreamReader ( in ) ; } @ Converter public XMLStreamReader createXMLStreamReader ( Reader in ) throws XMLStreamException { return getInputFactory ( ) . createXMLStreamReader ( in ) ; } @ Converter public XMLStreamReader createXMLStreamReader ( Source in ) throws XMLStreamException { return getInputFactory ( ) . createXMLStreamReader ( in ) ; } @ Converter public XMLEventReader createXMLEventReader ( InputStream in ) throws XMLStreamException { return getInputFactory ( ) . createXMLEventReader ( in ) ; } @ Converter public XMLEventReader createXMLEventReader ( Reader in ) throws XMLStreamException { return getInputFactory ( ) . createXMLEventReader ( in ) ; } @ Converter public XMLEventReader createXMLEventReader ( XMLStreamReader in ) throws XMLStreamException { return getInputFactory ( ) . createXMLEventReader ( in ) ; } @ Converter public XMLEventReader createXMLEventReader ( Source in ) throws XMLStreamException { return getInputFactory ( ) . createXMLEventReader ( in ) ; } public XMLInputFactory getInputFactory ( ) { if ( inputFactory == null ) { inputFactory = XMLInputFactory . newInstance ( ) ; } return inputFactory ; } public void setInputFactory ( XMLInputFactory inputFactory ) { this . inputFactory = inputFactory ; } public XMLOutputFactory getOutputFactory ( ) { if ( outputFactory == null ) { outputFactory = XMLOutputFactory . newInstance ( ) ; } return outputFactory ; } public void setOutputFactory ( XMLOutputFactory outputFactory ) { this . outputFactory = outputFactory ; } } 	0
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; public interface RouteContext { Endpoint < ? extends Exchange > getEndpoint ( ) ; FromType getFrom ( ) ; RouteType getRoute ( ) ; CamelContext getCamelContext ( ) ; Processor createProcessor ( ProcessorType node ) throws Exception ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) ; < T > T lookup ( String name , Class < T > type ) ; void commit ( ) ; void addEventDrivenProcessor ( Processor processor ) ; void intercept ( Intercept interceptor ) ; Processor createProceedProcessor ( ) ; List < InterceptStrategy > getInterceptStrategies ( ) ; void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) ; void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) ; void setIsRouteAdded ( boolean value ) ; boolean isRouteAdded ( ) ; } 	1
package org . apache . camel . component . amqp ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . component . jms . JmsComponent ; import org . apache . camel . component . jms . JmsConfiguration ; import org . apache . qpid . client . AMQConnectionFactory ; import org . apache . qpid . url . URLSyntaxException ; public class AMQPComponent extends JmsComponent { public AMQPComponent ( ) { init ( ) ; } public AMQPComponent ( JmsConfiguration configuration ) { super ( configuration ) ; } public AMQPComponent ( CamelContext context ) { super ( context ) ; init ( ) ; } public AMQPComponent ( AMQConnectionFactory connectionFactory ) { setConnectionFactory ( connectionFactory ) ; } public static Component amqpComponent ( String uri ) throws URLSyntaxException { AMQConnectionFactory connectionFactory = new AMQConnectionFactory ( uri ) ; return new AMQPComponent ( connectionFactory ) ; } private void init ( ) { AMQConnectionFactory connectionFactory = new AMQConnectionFactory ( ) ; setConnectionFactory ( connectionFactory ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class Throttler extends DelayProcessorSupport { private long maximumRequestsPerPeriod ; private long timePeriodMillis ; private long startTimeMillis ; private long requestCount ; public Throttler ( Processor processor , long maximumRequestsPerPeriod ) { this ( processor , maximumRequestsPerPeriod , 1000 ) ; } public Throttler ( Processor processor , long maximumRequestsPerPeriod , long timePeriodMillis ) { super ( processor ) ; this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; this . timePeriodMillis = timePeriodMillis ; } @ Override public String toString ( ) { return "Throttler[requests: " + maximumRequestsPerPeriod + " per: " + timePeriodMillis + " (ms) to: " + getProcessor ( ) + "]" ; } public long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } public long getRequestCount ( ) { return requestCount ; } public long getStartTimeMillis ( ) { return startTimeMillis ; } protected void delay ( Exchange exchange ) throws Exception { long now = currentSystemTime ( ) ; if ( startTimeMillis == 0 ) { startTimeMillis = now ; } if ( now - startTimeMillis > timePeriodMillis ) { requestCount = 1 ; startTimeMillis = now ; } else { if ( ++ requestCount > maximumRequestsPerPeriod ) { long time = startTimeMillis + timePeriodMillis ; waitUntil ( time , exchange ) ; } } } } 	1
package org . apache . camel . component . jdbc ; import java . sql . Connection ; import java . sql . ResultSet ; import java . sql . ResultSetMetaData ; import java . sql . SQLException ; import java . sql . Statement ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import javax . sql . DataSource ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JdbcProducer extends DefaultProducer < DefaultExchange > { private static final transient Log LOG = LogFactory . getLog ( JdbcProducer . class ) ; private DataSource source ; private int readSize = 2000 ; public JdbcProducer ( JdbcEndpoint endpoint , String remaining , int readSize ) throws Exception { super ( endpoint ) ; this . readSize = readSize ; source = ( DataSource ) getEndpoint ( ) . getCamelContext ( ) . getRegistry ( ) . lookup ( remaining ) ; } public void process ( Exchange exchange ) throws Exception { String sql = exchange . getIn ( ) . getBody ( String . class ) ; Connection conn = null ; Statement stmt = null ; ResultSet rs = null ; try { conn = source . getConnection ( ) ; stmt = conn . createStatement ( ) ; if ( stmt . execute ( sql ) ) { rs = stmt . getResultSet ( ) ; setResultSet ( exchange , rs ) ; } else { int updateCount = stmt . getUpdateCount ( ) ; exchange . getOut ( ) . setHeader ( "jdbc.updateCount" , updateCount ) ; } } finally { try { if ( rs != null ) { rs . close ( ) ; } if ( stmt != null ) { stmt . close ( ) ; } if ( conn != null ) { conn . close ( ) ; } } catch ( SQLException e ) { LOG . warn ( "Error closing JDBC resource: " + e , e ) ; } } } public int getReadSize ( ) { return this . readSize ; } public void setReadSize ( int readSize ) { this . readSize = readSize ; } public void setResultSet ( Exchange exchange , ResultSet rs ) throws SQLException { ResultSetMetaData meta = rs . getMetaData ( ) ; HashMap < String , Object > props = new HashMap < String , Object > ( ) ; IntrospectionSupport . getProperties ( meta , props , "jdbc." ) ; exchange . getOut ( ) . setHeaders ( props ) ; int count = meta . getColumnCount ( ) ; List < HashMap < String , Object > > data = new ArrayList < HashMap < String , Object > > ( ) ; int rowNumber = 0 ; while ( rs . next ( ) && rowNumber < readSize ) { HashMap < String , Object > row = new HashMap < String , Object > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { int columnNumber = i + 1 ; String columnName = meta . getColumnName ( columnNumber ) ; row . put ( columnName , rs . getObject ( columnName ) ) ; } data . add ( row ) ; rowNumber ++ ; } exchange . getOut ( ) . setBody ( data ) ; } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "jaxb" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class JaxbDataFormat extends DataFormatType { @ XmlAttribute ( required = true ) private String contextPath ; @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public JaxbDataFormat ( ) { super ( "org.apache.camel.converter.jaxb.JaxbDataFormat" ) ; } public JaxbDataFormat ( boolean prettyPrint ) { this ( ) ; setPrettyPrint ( prettyPrint ) ; } public String getContextPath ( ) { return contextPath ; } public void setContextPath ( String contextPath ) { this . contextPath = contextPath ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } @ Override protected void configureDataFormat ( DataFormat dataFormat ) { Boolean answer = ObjectHelper . toBoolean ( getPrettyPrint ( ) ) ; if ( answer != null && answer . booleanValue ( ) ) { setProperty ( dataFormat , "prettyPrint" , Boolean . TRUE ) ; } setProperty ( dataFormat , "contextPath" , contextPath ) ; } } 	1
package org . apache . camel . bam . model ; import java . util . Collection ; import java . util . Date ; import java . util . HashSet ; import javax . persistence . CascadeType ; import javax . persistence . Entity ; import javax . persistence . FetchType ; import javax . persistence . Id ; import javax . persistence . ManyToOne ; import javax . persistence . OneToMany ; import javax . persistence . Temporal ; import javax . persistence . TemporalType ; import javax . persistence . Transient ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Entity public class ProcessInstance { private static final transient Log LOG = LogFactory . getLog ( ProcessInstance . class ) ; private ProcessDefinition processDefinition ; private Collection < ActivityState > activityStates = new HashSet < ActivityState > ( ) ; private String correlationKey ; private Date timeStarted ; private Date timeCompleted ; public ProcessInstance ( ) { setTimeStarted ( new Date ( ) ) ; } public String toString ( ) { return "ProcessInstance[" + getCorrelationKey ( ) + "]" ; } @ Id public String getCorrelationKey ( ) { return correlationKey ; } public void setCorrelationKey ( String correlationKey ) { this . correlationKey = correlationKey ; } @ ManyToOne ( fetch = FetchType . LAZY , cascade = { CascadeType . PERSIST , CascadeType . MERGE } ) public ProcessDefinition getProcessDefinition ( ) { return processDefinition ; } public void setProcessDefinition ( ProcessDefinition processDefinition ) { this . processDefinition = processDefinition ; } @ OneToMany ( mappedBy = "processInstance" , fetch = FetchType . LAZY , cascade = { CascadeType . ALL } ) public Collection < ActivityState > getActivityStates ( ) { return activityStates ; } public void setActivityStates ( Collection < ActivityState > activityStates ) { this . activityStates = activityStates ; } @ Transient public boolean isStarted ( ) { return timeStarted != null ; } @ Transient public boolean isCompleted ( ) { return timeCompleted != null ; } @ Temporal ( TemporalType . TIME ) public Date getTimeStarted ( ) { return timeStarted ; } public void setTimeStarted ( Date timeStarted ) { this . timeStarted = timeStarted ; } @ Temporal ( TemporalType . TIME ) public Date getTimeCompleted ( ) { return timeCompleted ; } public void setTimeCompleted ( Date timeCompleted ) { this . timeCompleted = timeCompleted ; } public ActivityState getActivityState ( ActivityRules activityRules ) { for ( ActivityState activityState : getActivityStates ( ) ) { if ( activityState . isActivity ( activityRules ) ) { return activityState ; } } return null ; } public ActivityState getOrCreateActivityState ( ActivityRules activityRules ) { ActivityState state = getActivityState ( activityRules ) ; if ( state == null ) { state = createActivityState ( ) ; state . setProcessInstance ( this ) ; state . setActivityDefinition ( activityRules . getActivityDefinition ( ) ) ; } return state ; } protected ActivityState createActivityState ( ) { return new ActivityState ( ) ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . util . Properties ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . file . strategy . FileProcessStrategySupport ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileEndpoint extends ScheduledPollEndpoint < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileEndpoint . class ) ; private static final String DEFAULT_STRATEGYFACTORY_CLASS = "org.apache.camel.component.file.strategy.FileProcessStrategyFactory" ; private File file ; private FileProcessStrategy fileProcessStrategy ; private boolean autoCreate = true ; private boolean lock = true ; private boolean delete ; private boolean noop ; private boolean append = true ; private String moveNamePrefix ; private String moveNamePostfix ; private String [ ] excludedNamePrefixes = { "." } ; private String [ ] excludedNamePostfixes = { FileProcessStrategySupport . DEFAULT_LOCK_FILE_POSTFIX } ; private int bufferSize = 128 * 1024 ; private boolean ignoreFileNameHeader ; protected FileEndpoint ( File file , String endpointUri , FileComponent component ) { super ( endpointUri , component ) ; this . file = file ; } public FileEndpoint ( String endpointUri , File file ) { super ( endpointUri ) ; this . file = file ; } public FileEndpoint ( File file ) { this . file = file ; } public FileEndpoint ( ) { } public Producer < FileExchange > createProducer ( ) throws Exception { Producer < FileExchange > result = new FileProducer ( this ) ; return result ; } public Consumer < FileExchange > createConsumer ( Processor processor ) throws Exception { Consumer < FileExchange > result = new FileConsumer ( this , processor ) ; configureConsumer ( result ) ; return result ; } public FileExchange createExchange ( File file ) { return new FileExchange ( getCamelContext ( ) , getExchangePattern ( ) , file ) ; } @ Override public FileExchange createExchange ( ) { return createExchange ( getFile ( ) ) ; } @ Override public FileExchange createExchange ( ExchangePattern pattern ) { return new FileExchange ( getCamelContext ( ) , pattern , file ) ; } public String getGeneratedFileName ( Message message ) { return getFileFriendlyMessageId ( message . getMessageId ( ) ) ; } public void configureMessage ( File file , Message message ) { message . setBody ( file ) ; String relativePath = file . getPath ( ) . substring ( getFile ( ) . getPath ( ) . length ( ) ) ; if ( relativePath . startsWith ( File . separator ) || relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } message . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } public File getFile ( ) { ObjectHelper . notNull ( file , "file" ) ; if ( autoCreate && ! file . exists ( ) ) { file . mkdirs ( ) ; } return file ; } public void setFile ( File file ) { this . file = file ; } public boolean isSingleton ( ) { return true ; } public boolean isAutoCreate ( ) { return this . autoCreate ; } public void setAutoCreate ( boolean autoCreate ) { this . autoCreate = autoCreate ; } public FileProcessStrategy getFileStrategy ( ) { if ( fileProcessStrategy == null ) { fileProcessStrategy = createFileStrategy ( ) ; LOG . debug ( "Using file process strategy: " + fileProcessStrategy ) ; } return fileProcessStrategy ; } public void setFileStrategy ( FileProcessStrategy fileProcessStrategy ) { this . fileProcessStrategy = fileProcessStrategy ; } public boolean isDelete ( ) { return delete ; } public void setDelete ( boolean delete ) { this . delete = delete ; } public boolean isLock ( ) { return lock ; } public void setLock ( boolean lock ) { this . lock = lock ; } public String getMoveNamePostfix ( ) { return moveNamePostfix ; } public void setMoveNamePostfix ( String moveNamePostfix ) { this . moveNamePostfix = moveNamePostfix ; } public String getMoveNamePrefix ( ) { return moveNamePrefix ; } public void setMoveNamePrefix ( String moveNamePrefix ) { this . moveNamePrefix = moveNamePrefix ; } public String [ ] getExcludedNamePrefixes ( ) { return excludedNamePrefixes ; } public void setExcludedNamePrefixes ( String [ ] excludedNamePrefixes ) { this . excludedNamePrefixes = excludedNamePrefixes ; } public String [ ] getExcludedNamePostfixes ( ) { return excludedNamePostfixes ; } public void setExcludedNamePostfixes ( String [ ] excludedNamePostfixes ) { this . excludedNamePostfixes = excludedNamePostfixes ; } public boolean isNoop ( ) { return noop ; } public void setNoop ( boolean noop ) { this . noop = noop ; } public boolean isAppend ( ) { return append ; } public void setAppend ( boolean append ) { this . append = append ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public boolean isIgnoreFileNameHeader ( ) { return ignoreFileNameHeader ; } public void setIgnoreFileNameHeader ( boolean ignoreFileNameHeader ) { this . ignoreFileNameHeader = ignoreFileNameHeader ; } protected FileProcessStrategy createFileStrategy ( ) { Class < ? > factory = null ; try { FactoryFinder finder = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; factory = finder . findClass ( "file" , "strategy.factory." ) ; } catch ( ClassNotFoundException e ) { LOG . debug ( "'strategy.factory.class' not found" , e ) ; } catch ( IOException e ) { LOG . debug ( "No strategy factory defined in 'META-INF/services/org/apache/camel/component/file'" , e ) ; } if ( factory == null ) { factory = ObjectHelper . loadClass ( DEFAULT_STRATEGYFACTORY_CLASS ) ; if ( factory == null ) { throw new TypeNotPresentException ( "FileProcessStrategyFactory class not found" , null ) ; } } try { Method factoryMethod = factory . getMethod ( "createFileProcessStrategy" , Properties . class ) ; return ( FileProcessStrategy ) ObjectHelper . invokeMethod ( factoryMethod , null , getParamsAsProperties ( ) ) ; } catch ( NoSuchMethodException e ) { throw new TypeNotPresentException ( factory . getSimpleName ( ) + ".createFileProcessStrategy(Properties params) method not found" , e ) ; } } protected Properties getParamsAsProperties ( ) { Properties params = new Properties ( ) ; if ( isNoop ( ) ) { params . setProperty ( "noop" , Boolean . toString ( true ) ) ; } if ( isDelete ( ) ) { params . setProperty ( "delete" , Boolean . toString ( true ) ) ; } if ( isAppend ( ) ) { params . setProperty ( "append" , Boolean . toString ( true ) ) ; } if ( isLock ( ) ) { params . setProperty ( "lock" , Boolean . toString ( true ) ) ; } if ( moveNamePrefix != null ) { params . setProperty ( "moveNamePrefix" , moveNamePrefix ) ; } if ( moveNamePostfix != null ) { params . setProperty ( "moveNamePostfix" , moveNamePostfix ) ; } return params ; } @ Override protected String createEndpointUri ( ) { return "file://" + getFile ( ) . getAbsolutePath ( ) ; } protected String getFileFriendlyMessageId ( String id ) { return UuidGenerator . generateSanitizedId ( id ) ; } } 	1
package org . apache . camel . processor . aggregate ; import org . apache . camel . Exchange ; public interface AggregationStrategy { Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Delayer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "delayer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DelayerType extends ExpressionNode { private Long delay = 0L ; public DelayerType ( ) { } public DelayerType ( Expression processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( ExpressionType processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( Expression processAtExpression , long delay ) { super ( processAtExpression ) ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "delayer" ; } public Long getDelay ( ) { return delay ; } public void setDelay ( Long delay ) { this . delay = delay ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; Expression processAtExpression = getExpression ( ) != null ? getExpression ( ) . createExpression ( routeContext ) : null ; return new Delayer ( childProcessor , processAtExpression , delay ) ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "javaScript" ) public class JavaScriptExpression extends ExpressionType { public JavaScriptExpression ( ) { } public JavaScriptExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "js" ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RenameFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( RenameFileProcessStrategy . class ) ; private FileRenamer renamer ; public RenameFileProcessStrategy ( ) { this ( true ) ; } public RenameFileProcessStrategy ( boolean lock ) { this ( lock , ".camel/" , "" ) ; } public RenameFileProcessStrategy ( boolean lock , String namePrefix , String namePostfix ) { this ( lock , new DefaultFileRenamer ( namePrefix , namePostfix ) ) ; } public RenameFileProcessStrategy ( boolean lock , FileRenamer renamer ) { super ( lock ) ; this . renamer = renamer ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { File newName = renamer . renameFile ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Renaming file: " + file + " to: " + newName ) ; } if ( newName . exists ( ) ) { newName . delete ( ) ; } newName . getParentFile ( ) . mkdirs ( ) ; boolean renamed = file . renameTo ( newName ) ; if ( ! renamed ) { LOG . warn ( "Could not rename file from: " + file + " to " + newName ) ; } super . commit ( endpoint , exchange , file ) ; } public FileRenamer getRenamer ( ) { return renamer ; } public void setRenamer ( FileRenamer renamer ) { this . renamer = renamer ; } } 	1
package org . apache . camel . component ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import org . apache . camel . Component ; import org . apache . camel . Processor ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . io . DefaultResourceLoader ; import org . springframework . core . io . Resource ; import org . springframework . core . io . ResourceLoader ; public abstract class ResourceBasedEndpoint extends ProcessorEndpoint { protected final transient Log log = LogFactory . getLog ( getClass ( ) ) ; private final String resourceUri ; private ResourceLoader resourceLoader = new DefaultResourceLoader ( ) ; private Resource resource ; private boolean contentCache ; private byte [ ] buffer ; public ResourceBasedEndpoint ( String endpointUri , Component component , String resourceUri , Processor processor ) { super ( endpointUri , component , processor ) ; this . resourceUri = resourceUri ; } protected ResourceBasedEndpoint ( String endpointUri , Processor processor , String resourceUri ) { super ( endpointUri , processor ) ; this . resourceUri = resourceUri ; } public Resource getResource ( ) { if ( resource == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Loading resource: " + resourceUri + " using: " + getResourceLoader ( ) ) ; } resource = getResourceLoader ( ) . getResource ( resourceUri ) ; if ( resource == null ) { throw new IllegalArgumentException ( "Could not find resource for URI: " + resourceUri + " using: " + getResourceLoader ( ) ) ; } } return resource ; } public boolean isContentCache ( ) { return contentCache ; } public void setContentCache ( boolean contentCache ) { this . contentCache = contentCache ; } public InputStream getResourceAsInputStream ( ) throws IOException { if ( resource == null ) { resource = getResource ( ) ; } if ( contentCache ) { synchronized ( resource ) { if ( buffer == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Reading resource: " + resourceUri + " into the content cache" ) ; } buffer = IOConverter . toBytes ( resource . getInputStream ( ) ) ; } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Using resource: " + resourceUri + " from the content cache" ) ; } return new ByteArrayInputStream ( buffer ) ; } return resource . getInputStream ( ) ; } public ResourceLoader getResourceLoader ( ) { return resourceLoader ; } public void setResourceLoader ( ResourceLoader resourceLoader ) { this . resourceLoader = resourceLoader ; } } 	0
package org . apache . camel . processor . validation ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import javax . xml . XMLConstants ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . validation . Schema ; import javax . xml . validation . SchemaFactory ; import javax . xml . validation . Validator ; import org . xml . sax . SAXException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class ValidatingProcessor implements Processor { private Schema schema ; private ValidatorErrorHandler errorHandler = new DefaultValidationErrorHandler ( ) ; private String schemaLanguage = XMLConstants . W3C_XML_SCHEMA_NS_URI ; private Source schemaSource ; private SchemaFactory schemaFactory ; private URL schemaUrl ; private File schemaFile ; public void process ( Exchange exchange ) throws Exception { Schema schema = getSchema ( ) ; Validator validator = schema . newValidator ( ) ; Source source = exchange . getIn ( ) . getBody ( DOMSource . class ) ; if ( source == null ) { throw new NoXmlBodyValidationException ( exchange ) ; } errorHandler . reset ( ) ; validator . setErrorHandler ( errorHandler ) ; DOMResult result = new DOMResult ( ) ; validator . validate ( source , result ) ; errorHandler . handleErrors ( exchange , schema , result ) ; } public Schema getSchema ( ) throws IOException , SAXException { if ( schema == null ) { schema = createSchema ( ) ; } return schema ; } public void setSchema ( Schema schema ) { this . schema = schema ; } public String getSchemaLanguage ( ) { return schemaLanguage ; } public void setSchemaLanguage ( String schemaLanguage ) { this . schemaLanguage = schemaLanguage ; } public Source getSchemaSource ( ) throws IOException { if ( schemaSource == null ) { schemaSource = createSchemaSource ( ) ; } return schemaSource ; } public void setSchemaSource ( Source schemaSource ) { this . schemaSource = schemaSource ; } public URL getSchemaUrl ( ) { return schemaUrl ; } public void setSchemaUrl ( URL schemaUrl ) { this . schemaUrl = schemaUrl ; } public File getSchemaFile ( ) { return schemaFile ; } public void setSchemaFile ( File schemaFile ) { this . schemaFile = schemaFile ; } public SchemaFactory getSchemaFactory ( ) { if ( schemaFactory == null ) { schemaFactory = createSchemaFactory ( ) ; } return schemaFactory ; } public void setSchemaFactory ( SchemaFactory schemaFactory ) { this . schemaFactory = schemaFactory ; } public ValidatorErrorHandler getErrorHandler ( ) { return errorHandler ; } public void setErrorHandler ( ValidatorErrorHandler errorHandler ) { this . errorHandler = errorHandler ; } protected SchemaFactory createSchemaFactory ( ) { return SchemaFactory . newInstance ( schemaLanguage ) ; } protected Source createSchemaSource ( ) throws IOException { throw new IllegalArgumentException ( "You must specify a schema, " + "schemaFile, schemaSource or schemaUrl property" ) ; } protected Schema createSchema ( ) throws SAXException , IOException { SchemaFactory factory = getSchemaFactory ( ) ; URL url = getSchemaUrl ( ) ; if ( url != null ) { return factory . newSchema ( url ) ; } File file = getSchemaFile ( ) ; if ( file != null ) { return factory . newSchema ( file ) ; } return factory . newSchema ( getSchemaSource ( ) ) ; } } 	1
package org . apache . camel . converter . jaxb ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; import javax . xml . bind . Marshaller ; import javax . xml . bind . Unmarshaller ; import org . apache . camel . Exchange ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . IOHelper ; public class JaxbDataFormat implements DataFormat { private JAXBContext context ; private String contextPath ; private boolean prettyPrint = true ; private Marshaller marshaller ; private Unmarshaller unmarshaller ; public JaxbDataFormat ( ) { } public JaxbDataFormat ( JAXBContext context ) { this . context = context ; } public JaxbDataFormat ( String contextPath ) { this . contextPath = contextPath ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { try { getMarshaller ( ) . marshal ( graph , stream ) ; } catch ( JAXBException e ) { throw IOHelper . createIOException ( e ) ; } } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { try { return getUnmarshaller ( ) . unmarshal ( stream ) ; } catch ( JAXBException e ) { throw IOHelper . createIOException ( e ) ; } } public JAXBContext getContext ( ) throws JAXBException { if ( context == null ) { context = createContext ( ) ; } return context ; } public void setContext ( JAXBContext context ) { this . context = context ; } public String getContextPath ( ) { return contextPath ; } public void setContextPath ( String contextPath ) { this . contextPath = contextPath ; } public Marshaller getMarshaller ( ) throws JAXBException { if ( marshaller == null ) { marshaller = getContext ( ) . createMarshaller ( ) ; } return marshaller ; } public void setMarshaller ( Marshaller marshaller ) { this . marshaller = marshaller ; } public boolean isPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } public Unmarshaller getUnmarshaller ( ) throws JAXBException { if ( unmarshaller == null ) { unmarshaller = getContext ( ) . createUnmarshaller ( ) ; } return unmarshaller ; } public void setUnmarshaller ( Unmarshaller unmarshaller ) { this . unmarshaller = unmarshaller ; } protected JAXBContext createContext ( ) throws JAXBException { if ( contextPath != null ) { return JAXBContext . newInstance ( contextPath ) ; } else { return JAXBContext . newInstance ( ) ; } } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileConsumer extends ScheduledPollConsumer < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileConsumer . class ) ; private FileEndpoint endpoint ; private ConcurrentHashMap < File , File > filesBeingProcessed = new ConcurrentHashMap < File , File > ( ) ; private ConcurrentHashMap < File , Long > fileSizes = new ConcurrentHashMap < File , Long > ( ) ; private ConcurrentHashMap < File , Long > noopMap = new ConcurrentHashMap < File , Long > ( ) ; private boolean generateEmptyExchangeWhenIdle ; private boolean recursive = true ; private String regexPattern = "" ; private long lastPollTime ; private int unchangedDelay ; private boolean unchangedSize ; public FileConsumer ( final FileEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } protected synchronized void poll ( ) throws Exception { int rc = pollFileOrDirectory ( endpoint . getFile ( ) , isRecursive ( ) ) ; if ( rc == 0 && generateEmptyExchangeWhenIdle ) { final FileExchange exchange = endpoint . createExchange ( ( File ) null ) ; getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } lastPollTime = System . currentTimeMillis ( ) ; } protected int pollFileOrDirectory ( File fileOrDirectory , boolean processDir ) { if ( ! fileOrDirectory . isDirectory ( ) ) { return pollFile ( fileOrDirectory ) ; } else if ( processDir ) { int rc = 0 ; if ( isValidFile ( fileOrDirectory ) ) { LOG . debug ( "Polling directory " + fileOrDirectory ) ; File [ ] files = fileOrDirectory . listFiles ( ) ; for ( File file : files ) { rc += pollFileOrDirectory ( file , isRecursive ( ) ) ; } } return rc ; } else { LOG . debug ( "Skipping directory " + fileOrDirectory ) ; return 0 ; } } protected int pollFile ( final File file ) { if ( ! file . exists ( ) ) { return 0 ; } if ( ! isValidFile ( file ) ) { return 0 ; } if ( ! endpoint . isNoop ( ) ) { if ( filesBeingProcessed . contains ( file ) ) { return 1 ; } filesBeingProcessed . put ( file , file ) ; } final FileProcessStrategy processStrategy = endpoint . getFileStrategy ( ) ; final FileExchange exchange = endpoint . createExchange ( file ) ; endpoint . configureMessage ( file , exchange . getIn ( ) ) ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to process file: " + file + " using exchange: " + exchange ) ; } if ( processStrategy . begin ( endpoint , exchange , file ) ) { getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { boolean failed = exchange . isFailed ( ) ; boolean handled = DeadLetterChannel . isFailureHandled ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Done processing file: " + file + ". Status is: " + ( failed ? "failed: " + failed + ", handled by failure processor: " + handled : "OK" ) ) ; } if ( ! failed || handled ) { processStrategyCommit ( processStrategy , exchange , file , handled ) ; } else if ( failed && ! handled ) { handleException ( exchange . getException ( ) ) ; } filesBeingProcessed . remove ( file ) ; } } ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " cannot process file: " + file ) ; } } } catch ( Throwable e ) { handleException ( e ) ; } return 1 ; } protected void processStrategyCommit ( FileProcessStrategy processStrategy , FileExchange exchange , File file , boolean failureHandled ) { try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Committing file strategy: " + processStrategy + " for file: " + file + ( failureHandled ? " that was handled by the failure processor." : "" ) ) ; } processStrategy . commit ( endpoint , exchange , file ) ; } catch ( Exception e ) { LOG . warn ( "Error committing file strategy: " + processStrategy , e ) ; handleException ( e ) ; } } protected boolean isValidFile ( File file ) { boolean result = false ; if ( file != null && file . exists ( ) ) { if ( isMatched ( file ) && isChanged ( file ) ) { result = true ; } } return result ; } protected boolean isChanged ( File file ) { if ( file == null ) { return false ; } else if ( file . isDirectory ( ) ) { return true ; } else { boolean lastModifiedCheck = false ; long modifiedDuration = 0 ; if ( getUnchangedDelay ( ) > 0 ) { modifiedDuration = System . currentTimeMillis ( ) - file . lastModified ( ) ; lastModifiedCheck = modifiedDuration >= getUnchangedDelay ( ) ; } long fileModified = file . lastModified ( ) ; Long previousModified = noopMap . get ( file ) ; noopMap . put ( file , fileModified ) ; if ( previousModified == null || fileModified > previousModified ) { lastModifiedCheck = true ; } boolean sizeCheck = false ; long sizeDifference = 0 ; if ( isUnchangedSize ( ) ) { Long value = fileSizes . get ( file ) ; if ( value == null ) { sizeCheck = true ; } else { sizeCheck = file . length ( ) != value ; } } boolean answer = lastModifiedCheck || sizeCheck ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "file:" + file + " isChanged:" + answer + " " + "sizeCheck:" + sizeCheck + "(" + sizeDifference + ") " + "lastModifiedCheck:" + lastModifiedCheck + "(" + modifiedDuration + ")" ) ; } if ( isUnchangedSize ( ) ) { if ( answer ) { fileSizes . put ( file , file . length ( ) ) ; } else { fileSizes . remove ( file ) ; } } return answer ; } } protected boolean isMatched ( File file ) { String name = file . getName ( ) ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { if ( ! name . matches ( getRegexPattern ( ) ) ) { return false ; } } String [ ] prefixes = endpoint . getExcludedNamePrefixes ( ) ; if ( prefixes != null ) { for ( String prefix : prefixes ) { if ( name . startsWith ( prefix ) ) { return false ; } } } String [ ] postfixes = endpoint . getExcludedNamePostfixes ( ) ; if ( postfixes != null ) { for ( String postfix : postfixes ) { if ( name . endsWith ( postfix ) ) { return false ; } } } return true ; } public boolean isRecursive ( ) { return this . recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public String getRegexPattern ( ) { return this . regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isGenerateEmptyExchangeWhenIdle ( ) { return generateEmptyExchangeWhenIdle ; } public void setGenerateEmptyExchangeWhenIdle ( boolean generateEmptyExchangeWhenIdle ) { this . generateEmptyExchangeWhenIdle = generateEmptyExchangeWhenIdle ; } public int getUnchangedDelay ( ) { return unchangedDelay ; } public void setUnchangedDelay ( int unchangedDelay ) { this . unchangedDelay = unchangedDelay ; } public boolean isUnchangedSize ( ) { return unchangedSize ; } public void setUnchangedSize ( boolean unchangedSize ) { this . unchangedSize = unchangedSize ; } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "header" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class StringHeader extends HeaderType { @ XmlAttribute ( name = "value" , required = true ) private String text ; public StringHeader ( ) { } public StringHeader ( String name , String text ) { super ( name ) ; this . text = text ; } public String getText ( ) { return text ; } public void setText ( String text ) { this . text = text ; } public Object getValue ( ) { return getText ( ) ; } public void setValue ( Object value ) { if ( value instanceof String ) { setText ( ( String ) value ) ; } else { throw new IllegalArgumentException ( "Value must be a String" ) ; } } } 	0
package org . apache . camel . impl ; import java . net . URI ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import java . util . concurrent . ThreadFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . URISupport ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DefaultComponent < E extends Exchange > extends ServiceSupport implements Component < E > { private static final transient Log LOG = LogFactory . getLog ( DefaultComponent . class ) ; private int defaultThreadPoolSize = 5 ; private CamelContext camelContext ; private ScheduledExecutorService executorService ; public DefaultComponent ( ) { } public DefaultComponent ( CamelContext context ) { this . camelContext = context ; } public Endpoint < E > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; if ( path . startsWith ( "//" ) ) { path = path . substring ( 2 ) ; } int idx = path . indexOf ( '?' ) ; if ( idx > 0 ) { path = path . substring ( 0 , idx ) ; } Map parameters = URISupport . parseParameters ( u ) ; validateURI ( uri , path , parameters ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating endpoint uri=[" + uri + "], path=[" + path + "], parameters=[" + parameters + "]" ) ; } Endpoint < E > endpoint = createEndpoint ( uri , path , parameters ) ; if ( endpoint == null ) { return null ; } if ( parameters != null ) { endpoint . configureProperties ( parameters ) ; if ( useIntrospectionOnEndpoint ( ) ) { setProperties ( endpoint , parameters ) ; } if ( parameters . size ( ) > 0 ) { throw new ResolveEndpointFailedException ( uri , "There are " + parameters . size ( ) + " parameters that couldn't be set on the endpoint." + " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint." + " Unknown parameters=[" + parameters + "]" ) ; } } return endpoint ; } protected void validateURI ( String uri , String path , Map parameters ) throws ResolveEndpointFailedException { if ( uri . contains ( "&" ) && ! uri . contains ( "?" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: no ? marker however the uri " + "has & parameter separators. Check the uri if its missing a ? marker." ) ; } if ( uri . contains ( "&&" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: Double && marker found. " + "Check the uri and remove the duplicate & marker." ) ; } } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext context ) { this . camelContext = context ; } public ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { executorService = createExecutorService ( ) ; } return executorService ; } public void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } protected ScheduledExecutorService createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( defaultThreadPoolSize , new ThreadFactory ( ) { int counter ; public synchronized Thread newThread ( Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "Thread: " + ( ++ counter ) + " " + DefaultComponent . this . toString ( ) ) ; return thread ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { if ( executorService != null ) { executorService . shutdown ( ) ; } } protected abstract Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception ; protected void setProperties ( Object bean , Map parameters ) throws Exception { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , bean , parameters ) ; } protected boolean useIntrospectionOnEndpoint ( ) { return true ; } public < T > T convertTo ( Class < T > type , Object value ) { return CamelContextHelper . convertTo ( getCamelContext ( ) , type , value ) ; } public < T > T mandatoryConvertTo ( Class < T > type , Object value ) { return CamelContextHelper . mandatoryConvertTo ( getCamelContext ( ) , type , value ) ; } public < T > T newInstance ( Class < T > beanType ) { return getCamelContext ( ) . getInjector ( ) . newInstance ( beanType ) ; } public Object lookup ( String name ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name ) ; } public < T > T lookup ( String name , Class < T > beanType ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , beanType ) ; } public Object mandatoryLookup ( String name ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name ) ; } public < T > T mandatoryLookup ( String name , Class < T > beanType ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name , beanType ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type ) { return getAndRemoveParameter ( parameters , key , type , null ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type , T defaultValue ) { Object value = parameters . remove ( key ) ; if ( value == null ) { value = defaultValue ; } if ( value == null ) { return null ; } return convertTo ( type , value ) ; } } 	1
package org . apache . camel . bam ; import java . util . Date ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . camel . bam . rules . TemporalRule ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . equal ; public abstract class TimeExpression { private ActivityRules activityRules ; private ActivityBuilder builder ; private ActivityLifecycle lifecycle ; public TimeExpression ( ActivityBuilder builder , ActivityLifecycle lifecycle ) { this . lifecycle = lifecycle ; this . builder = builder ; this . activityRules = builder . getActivityRules ( ) ; } public boolean isActivityLifecycle ( ActivityRules activityRules , ActivityLifecycle lifecycle ) { return equal ( activityRules , this . activityRules ) && equal ( lifecycle , this . lifecycle ) ; } public TemporalRule after ( TimeExpression expression ) { TemporalRule rule = new TemporalRule ( expression , this ) ; rule . getSecond ( ) . getActivityRules ( ) . addRule ( rule ) ; return rule ; } public Date evaluate ( ProcessInstance processInstance ) { ActivityState state = processInstance . getActivityState ( activityRules ) ; if ( state != null ) { return evaluate ( processInstance , state ) ; } return null ; } public abstract Date evaluate ( ProcessInstance instance , ActivityState state ) ; public ActivityBuilder getBuilder ( ) { return builder ; } public ActivityRules getActivityRules ( ) { return activityRules ; } public ActivityLifecycle getLifecycle ( ) { return lifecycle ; } public ActivityState getActivityState ( ProcessInstance instance ) { return instance . getActivityState ( activityRules ) ; } public ActivityState getOrCreateActivityState ( ProcessInstance instance ) { return instance . getOrCreateActivityState ( activityRules ) ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . RandomAccessFile ; import java . nio . channels . Channel ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . component . file . FileProcessStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class FileProcessStrategySupport implements FileProcessStrategy { public static final String DEFAULT_LOCK_FILE_POSTFIX = ".cameLock" ; private static final transient Log LOG = LogFactory . getLog ( FileProcessStrategySupport . class ) ; private boolean lockFile ; private FileRenamer lockFileRenamer ; protected FileProcessStrategySupport ( ) { this ( true ) ; } protected FileProcessStrategySupport ( boolean lockFile ) { this ( lockFile , new DefaultFileRenamer ( null , DEFAULT_LOCK_FILE_POSTFIX ) ) ; } protected FileProcessStrategySupport ( boolean lockFile , FileRenamer lockFileRenamer ) { this . lockFile = lockFile ; this . lockFileRenamer = lockFileRenamer ; } public boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { File newFile = lockFileRenamer . renameFile ( file ) ; String lockFileName = newFile . getAbsolutePath ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Locking the file: " + file + " using the lock file name: " + lockFileName ) ; } FileChannel channel = new RandomAccessFile ( lockFileName , "rw" ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; if ( lock != null ) { exchange . setProperty ( "org.apache.camel.fileChannel" , channel ) ; exchange . setProperty ( "org.apache.camel.file.lock" , lock ) ; exchange . setProperty ( "org.apache.camel.file.lock.name" , lockFileName ) ; return true ; } return false ; } return true ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { Channel channel = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.fileChannel" , Channel . class ) ; String lockfile = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock.name" , String . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unlocking file: " + file ) ; } channel . close ( ) ; File lock = new File ( lockfile ) ; lock . delete ( ) ; } } public boolean isLockFile ( ) { return lockFile ; } public void setLockFile ( boolean lockFile ) { this . lockFile = lockFile ; } public FileRenamer getLockFileRenamer ( ) { return lockFileRenamer ; } public void setLockFileRenamer ( FileRenamer lockFileRenamer ) { this . lockFileRenamer = lockFileRenamer ; } } 	1
package org . apache . camel . processor ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AlreadyStoppedException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DelayProcessorSupport extends DelegateProcessor { private static final transient Log LOG = LogFactory . getLog ( Delayer . class ) ; private CountDownLatch stoppedLatch = new CountDownLatch ( 1 ) ; private boolean fastStop = true ; public DelayProcessorSupport ( Processor processor ) { super ( processor ) ; } public void process ( Exchange exchange ) throws Exception { delay ( exchange ) ; super . process ( exchange ) ; } public boolean isFastStop ( ) { return fastStop ; } public void setFastStop ( boolean fastStop ) { this . fastStop = fastStop ; } protected void doStop ( ) throws Exception { stoppedLatch . countDown ( ) ; super . doStop ( ) ; } protected abstract void delay ( Exchange exchange ) throws Exception ; protected void waitUntil ( long time , Exchange exchange ) throws Exception { while ( true ) { long delay = time - currentSystemTime ( ) ; if ( delay < 0 ) { return ; } else { if ( isFastStop ( ) && ! isRunAllowed ( ) ) { throw new AlreadyStoppedException ( ) ; } try { sleep ( delay ) ; } catch ( InterruptedException e ) { handleSleepInteruptedException ( e ) ; } } } } protected void sleep ( long delay ) throws InterruptedException { if ( delay <= 0 ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + delay + " millis" ) ; } if ( isFastStop ( ) ) { stoppedLatch . await ( delay , TimeUnit . MILLISECONDS ) ; } else { Thread . sleep ( delay ) ; } } protected void handleSleepInteruptedException ( InterruptedException e ) { LOG . debug ( "Sleep interupted: " + e , e ) ; } protected long currentSystemTime ( ) { return System . currentTimeMillis ( ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . StringTokenizer ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; public final class ExpressionBuilder { private ExpressionBuilder ( ) { } public static < E extends Exchange > Expression < E > headerExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getIn ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "header(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > headersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "headers" ; } } ; } public static < E extends Exchange > Expression < E > outHeaderExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } Object header = out . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "outHeader(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > outHeadersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "outHeaders" ; } } ; } public static < E extends Exchange > Expression < E > propertyExpression ( final String propertyName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperty ( propertyName ) ; } @ Override public String toString ( ) { return "property(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertiesExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperties ( ) ; } @ Override public String toString ( ) { return "properties" ; } } ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName ) { return systemPropertyExpression ( propertyName , null ) ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( propertyName , defaultValue ) ; } @ Override public String toString ( ) { return "systemProperty(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > constantExpression ( final Object value ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return value ; } @ Override public String toString ( ) { return "" + value ; } } ; } public static < E extends Exchange > Expression < E > bodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "body" ; } } ; } public static < E extends Exchange , T > Expression < E > bodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "bodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > outBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( ) ; } @ Override public String toString ( ) { return "outBody" ; } } ; } public static < E extends Exchange , T > Expression < E > outBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( type ) ; } @ Override public String toString ( ) { return "outBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > faultBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "faultBody" ; } } ; } public static < E extends Exchange , T > Expression < E > faultBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "faultBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > exchangeExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange ; } @ Override public String toString ( ) { return "exchange" ; } } ; } public static < E extends Exchange > Expression < E > inMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) ; } @ Override public String toString ( ) { return "inMessage" ; } } ; } public static < E extends Exchange > Expression < E > outMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) ; } @ Override public String toString ( ) { return "outMessage" ; } } ; } public static < E extends Exchange > Expression < E > convertTo ( final Expression expression , final Class type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } @ Override public String toString ( ) { return "" + expression + ".convertTo(" + type . getName ( ) + ".class)" ; } } ; } public static < E extends Exchange > Expression < E > tokenizeExpression ( final Expression < E > expression , final String token ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } StringTokenizer iter = new StringTokenizer ( text , token ) ; List < String > answer = new ArrayList < String > ( ) ; while ( iter . hasMoreTokens ( ) ) { answer . add ( iter . nextToken ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "tokenize(" + expression + ", " + token + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexTokenize ( final Expression < E > expression , String regexTokenizer ) { final Pattern pattern = Pattern . compile ( regexTokenizer ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return Arrays . asList ( pattern . split ( text ) ) ; } @ Override public String toString ( ) { return "regexTokenize(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final String replacement ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final Expression < E > replacementExpression ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; String replacement = evaluateStringExpression ( replacementExpression , exchange ) ; if ( text == null || replacement == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > append ( final Expression < E > left , final Expression < E > right ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return evaluateStringExpression ( left , exchange ) + evaluateStringExpression ( right , exchange ) ; } @ Override public String toString ( ) { return "append(" + left + ", " + right + ")" ; } } ; } public static < E extends Exchange > String evaluateStringExpression ( Expression < E > expression , E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , value ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( name , defaultValue ) ; } } ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions ) { return concatExpression ( expressions , null ) ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions , final String expression ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Expression < E > expression : expressions ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text != null ) { buffer . append ( text ) ; } } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( expression != null ) { return expression ; } else { return "concat" + expressions ; } } } ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . ByteArrayOutputStream ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . ScheduledPollEndpoint ; public abstract class RemoteFileEndpoint < T extends RemoteFileExchange > extends ScheduledPollEndpoint < T > { private RemoteFileBinding binding ; private RemoteFileConfiguration configuration ; public RemoteFileEndpoint ( String uri , RemoteFileComponent component , RemoteFileConfiguration configuration ) { super ( uri , component ) ; this . configuration = configuration ; } protected RemoteFileEndpoint ( String endpointUri , RemoteFileConfiguration configuration ) { super ( endpointUri ) ; this . configuration = configuration ; } protected RemoteFileEndpoint ( String endpointUri ) { this ( endpointUri , new RemoteFileConfiguration ( ) ) ; } protected RemoteFileBinding createRemoteFileBinding ( ) { return new RemoteFileBinding ( ) ; } public T createExchange ( ) { return ( T ) new RemoteFileExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) ) ; } public T createExchange ( ExchangePattern pattern ) { return ( T ) new RemoteFileExchange ( getCamelContext ( ) , pattern , getBinding ( ) ) ; } public T createExchange ( String fullFileName , ByteArrayOutputStream outputStream ) { return ( T ) new RemoteFileExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , getConfiguration ( ) . getHost ( ) , fullFileName , outputStream ) ; } public RemoteFileBinding getBinding ( ) { if ( binding == null ) { binding = createRemoteFileBinding ( ) ; } return binding ; } public void setBinding ( RemoteFileBinding binding ) { this . binding = binding ; } public boolean isSingleton ( ) { return true ; } public RemoteFileConfiguration getConfiguration ( ) { return configuration ; } public void setConfiguration ( RemoteFileConfiguration configuration ) { this . configuration = configuration ; } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SedaConsumer extends ServiceSupport implements Consumer , Runnable { private static final transient Log LOG = LogFactory . getLog ( SedaConsumer . class ) ; private SedaEndpoint endpoint ; private AsyncProcessor processor ; private Thread thread ; public SedaConsumer ( SedaEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; } @ Override public String toString ( ) { return "SedaConsumer: " + endpoint . getEndpointUri ( ) ; } public void run ( ) { while ( isRunAllowed ( ) ) { final Exchange exchange ; try { exchange = endpoint . getQueue ( ) . poll ( 1000 , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Interupted: " + e , e ) ; } continue ; } if ( exchange != null && isRunAllowed ( ) ) { try { processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } catch ( Exception e ) { LOG . error ( "Seda queue caught: " + e , e ) ; } } } } protected void doStart ( ) throws Exception { thread = new Thread ( this , getThreadName ( endpoint . getEndpointUri ( ) ) ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { thread . join ( ) ; } } 	1
package org . apache . camel . spring . spi ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import org . aopalliance . intercept . MethodInvocation ; import org . apache . camel . Converter ; import org . apache . camel . component . bean . BeanInvocation ; import org . springframework . core . io . ByteArrayResource ; import org . springframework . core . io . FileSystemResource ; import org . springframework . core . io . Resource ; import org . springframework . core . io . UrlResource ; @ Converter public final class SpringConverters { private SpringConverters ( ) { } @ Converter public static InputStream toInputStream ( Resource resource ) throws IOException { return resource . getInputStream ( ) ; } @ Converter public static File toFile ( Resource resource ) throws IOException { return resource . getFile ( ) ; } @ Converter public static URL toUrl ( Resource resource ) throws IOException { return resource . getURL ( ) ; } @ Converter public static UrlResource toResource ( String uri ) throws IOException { return new UrlResource ( uri ) ; } @ Converter public static UrlResource toResource ( URL uri ) throws IOException { return new UrlResource ( uri ) ; } @ Converter public static FileSystemResource toResource ( File file ) throws IOException { return new FileSystemResource ( file ) ; } @ Converter public static ByteArrayResource toResource ( byte [ ] data ) throws IOException { return new ByteArrayResource ( data ) ; } @ Converter public static BeanInvocation toBeanInvocation ( MethodInvocation invocation ) { return new BeanInvocation ( invocation . getMethod ( ) , invocation . getArguments ( ) ) ; } } 	0
package org . apache . camel . model ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "optionalIdentifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class OptionalIdentifiedType < T extends OptionalIdentifiedType > { @ XmlTransient protected static Map < String , AtomicInteger > nodeCounters = new HashMap < String , AtomicInteger > ( ) ; @ XmlAttribute ( required = false ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlElement ( required = false ) private Description description ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Description getDescription ( ) { return description ; } public void setDescription ( Description description ) { this . description = description ; } public String getShortName ( ) { return "node" ; } public T description ( String text ) { if ( description == null ) { description = new Description ( ) ; } description . setText ( text ) ; return ( T ) this ; } public T description ( String text , String lang ) { description ( text ) ; description . setLang ( lang ) ; return ( T ) this ; } public T id ( String id ) { setId ( id ) ; return ( T ) this ; } public String idOrCreate ( ) { if ( id == null ) { setId ( createId ( ) ) ; } return getId ( ) ; } protected String createId ( ) { String key = getShortName ( ) ; return key + getNodeCounter ( key ) . incrementAndGet ( ) ; } protected static synchronized AtomicInteger getNodeCounter ( String key ) { AtomicInteger answer = nodeCounters . get ( key ) ; if ( answer == null ) { answer = new AtomicInteger ( 0 ) ; nodeCounters . put ( key , answer ) ; } return answer ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . concurrent . ScheduledExecutorService ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . component . file . FileComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . commons . net . ftp . FTPClient ; import org . apache . commons . net . ftp . FTPConnectionClosedException ; import org . apache . commons . net . ftp . FTPFile ; public class FtpConsumer extends RemoteFileConsumer < RemoteFileExchange > { private static final transient Log LOG = LogFactory . getLog ( FtpConsumer . class ) ; private FtpEndpoint endpoint ; private long lastPollTime ; private FTPClient client ; private boolean recursive = true ; private String regexPattern ; private boolean setNames = true ; public FtpConsumer ( FtpEndpoint endpoint , Processor processor , FTPClient client ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; this . client = client ; } public FtpConsumer ( FtpEndpoint endpoint , Processor processor , FTPClient client , ScheduledExecutorService executor ) { super ( endpoint , processor , executor ) ; this . endpoint = endpoint ; this . client = client ; } protected void connectIfNecessary ( ) throws IOException { if ( ! client . isConnected ( ) ) { LOG . warn ( "FtpConsumer's client isn't connected, trying to reconnect..." ) ; endpoint . connect ( client ) ; LOG . info ( "Connected to " + endpoint . getConfiguration ( ) ) ; } } protected void disconnect ( ) throws IOException { LOG . info ( "FtpConsumer's client is being explicitly disconnected" ) ; endpoint . disconnect ( client ) ; } protected void poll ( ) throws Exception { connectIfNecessary ( ) ; try { final String fileName = endpoint . getConfiguration ( ) . getFile ( ) ; if ( endpoint . getConfiguration ( ) . isDirectory ( ) ) { pollDirectory ( fileName ) ; } else { client . changeWorkingDirectory ( fileName . substring ( 0 , fileName . lastIndexOf ( '/' ) ) ) ; final FTPFile [ ] files = client . listFiles ( fileName . substring ( fileName . lastIndexOf ( '/' ) + 1 ) ) ; pollFile ( files [ 0 ] ) ; } lastPollTime = System . currentTimeMillis ( ) ; } catch ( FTPConnectionClosedException e ) { LOG . warn ( "Disconnecting due to exception: " + e . toString ( ) ) ; disconnect ( ) ; throw e ; } catch ( RuntimeCamelException e ) { LOG . warn ( "Caught RuntimeCamelException: " + e . toString ( ) ) ; LOG . warn ( "Hoping an explicit disconnect/reconnect will solve the problem" ) ; disconnect ( ) ; throw e ; } } protected void pollDirectory ( String dir ) throws Exception { client . changeWorkingDirectory ( dir ) ; for ( FTPFile ftpFile : client . listFiles ( ) ) { if ( ftpFile . isFile ( ) ) { pollFile ( ftpFile ) ; } else if ( ftpFile . isDirectory ( ) ) { if ( isRecursive ( ) ) { pollDirectory ( getFullFileName ( ftpFile ) ) ; } } else { LOG . warn ( "Unsupported type of FTPFile: " + ftpFile + " not a file or directory" ) ; } } } protected String getFullFileName ( FTPFile ftpFile ) throws IOException { return client . printWorkingDirectory ( ) + "/" + ftpFile . getName ( ) ; } private void pollFile ( FTPFile ftpFile ) throws Exception { if ( ftpFile . getTimestamp ( ) . getTimeInMillis ( ) > lastPollTime ) { if ( isMatched ( ftpFile ) ) { String fullFileName = getFullFileName ( ftpFile ) ; final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; client . retrieveFile ( ftpFile . getName ( ) , byteArrayOutputStream ) ; RemoteFileExchange exchange = endpoint . createExchange ( fullFileName , byteArrayOutputStream ) ; if ( isSetNames ( ) ) { String ftpBasePath = endpoint . getConfiguration ( ) . getFile ( ) ; String relativePath = fullFileName . substring ( ftpBasePath . length ( ) + 1 ) ; relativePath = relativePath . replaceFirst ( "/" , "" ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting exchange filename to " + relativePath ) ; } exchange . getIn ( ) . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } getProcessor ( ) . process ( exchange ) ; } } } protected boolean isMatched ( FTPFile file ) { boolean result = true ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { result = file . getName ( ) . matches ( regexPattern ) ; } return result ; } public boolean isRecursive ( ) { return recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public long getLastPollTime ( ) { return lastPollTime ; } public void setLastPollTime ( long lastPollTime ) { this . lastPollTime = lastPollTime ; } public String getRegexPattern ( ) { return regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isSetNames ( ) { return setNames ; } public void setSetNames ( boolean setNames ) { this . setNames = setNames ; } } 	0
package org . apache . camel . util ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . lang . annotation . Annotation ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class ObjectHelper { private static final transient Log LOG = LogFactory . getLog ( ObjectHelper . class ) ; private ObjectHelper ( ) { } @ Deprecated public static boolean equals ( Object a , Object b ) { return equal ( a , b ) ; } public static boolean equal ( Object a , Object b ) { if ( a == b ) { return true ; } if ( a instanceof byte [ ] && b instanceof byte [ ] ) { return equalByteArray ( ( byte [ ] ) a , ( byte [ ] ) b ) ; } return a != null && b != null && a . equals ( b ) ; } public static boolean equalByteArray ( byte [ ] a , byte [ ] b ) { if ( a == b ) { return true ; } if ( a != null && b != null && a . length == b . length ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] != b [ i ] ) { return false ; } } return true ; } return false ; } public static boolean isEqualToAny ( Object object , Object ... values ) { for ( Object value : values ) { if ( equal ( object , value ) ) { return true ; } } return false ; } public static int compare ( Object a , Object b ) { if ( a == b ) { return 0 ; } if ( a == null ) { return - 1 ; } if ( b == null ) { return 1 ; } if ( a instanceof Comparable ) { Comparable comparable = ( Comparable ) a ; return comparable . compareTo ( b ) ; } else { int answer = a . getClass ( ) . getName ( ) . compareTo ( b . getClass ( ) . getName ( ) ) ; if ( answer == 0 ) { answer = a . hashCode ( ) - b . hashCode ( ) ; } return answer ; } } public static Boolean toBoolean ( Object value ) { if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return "true" . equalsIgnoreCase ( value . toString ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } if ( value instanceof Integer ) { return ( Integer ) value > 0 ? Boolean . TRUE : Boolean . FALSE ; } return null ; } public static void notNull ( Object value , String name ) { if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified" ) ; } } public static String [ ] splitOnCharacter ( String value , String needle , int count ) { String rc [ ] = new String [ count ] ; rc [ 0 ] = value ; for ( int i = 1 ; i < count ; i ++ ) { String v = rc [ i - 1 ] ; int p = v . indexOf ( needle ) ; if ( p < 0 ) { return rc ; } rc [ i - 1 ] = v . substring ( 0 , p ) ; rc [ i ] = v . substring ( p + 1 ) ; } return rc ; } public static String removeStartingCharacters ( String text , char ch ) { int idx = 0 ; while ( text . charAt ( idx ) == ch ) { idx ++ ; } if ( idx > 0 ) { return text . substring ( idx ) ; } return text ; } public static String capitalize ( String text ) { if ( text == null ) { return null ; } int length = text . length ( ) ; if ( length == 0 ) { return text ; } String answer = text . substring ( 0 , 1 ) . toUpperCase ( ) ; if ( length > 1 ) { answer += text . substring ( 1 , length ) ; } return answer ; } @ SuppressWarnings ( "unchecked" ) public static boolean contains ( Object collectionOrArray , Object value ) { if ( collectionOrArray instanceof Collection ) { Collection collection = ( Collection ) collectionOrArray ; return collection . contains ( value ) ; } else if ( collectionOrArray instanceof String && value instanceof String ) { String str = ( String ) collectionOrArray ; String subStr = ( String ) value ; return str . contains ( subStr ) ; } else { Iterator iter = createIterator ( collectionOrArray ) ; while ( iter . hasNext ( ) ) { if ( equal ( value , iter . next ( ) ) ) { return true ; } } } return false ; } @ SuppressWarnings ( "unchecked" ) public static Iterator createIterator ( Object value ) { if ( value == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . iterator ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { List < Object > list = Arrays . asList ( ( Object [ ] ) value ) ; return list . iterator ( ) ; } else if ( value instanceof NodeList ) { final NodeList nodeList = ( NodeList ) value ; return new Iterator < Node > ( ) { int idx = - 1 ; public boolean hasNext ( ) { return ++ idx < nodeList . getLength ( ) ; } public Node next ( ) { return nodeList . item ( idx ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } else { return Collections . singletonList ( value ) . iterator ( ) ; } } public static boolean matches ( List list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof Boolean ) { Boolean flag = ( Boolean ) value ; return flag . booleanValue ( ) ; } else { return true ; } } return false ; } public static boolean isNotNullAndNonEmpty ( String text ) { return text != null && text . trim ( ) . length ( ) > 0 ; } public static boolean isNullOrBlank ( String text ) { return text == null || text . trim ( ) . length ( ) <= 0 ; } public static String getSystemProperty ( String name , String defaultValue ) { try { return System . getProperty ( name , defaultValue ) ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Caught security exception accessing system property: " + name + ". Reason: " + e , e ) ; } return defaultValue ; } } public static String name ( Class type ) { return type != null ? type . getName ( ) : null ; } public static String className ( Object value ) { return name ( value != null ? value . getClass ( ) : null ) ; } public static Class < ? > loadClass ( String name ) { return loadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } public static Class < ? > loadClass ( String name , ClassLoader loader ) { ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { try { return contextClassLoader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { try { return loader . loadClass ( name ) ; } catch ( ClassNotFoundException e1 ) { LOG . debug ( "Could not find class: " + name + ". Reason: " + e ) ; } } } return null ; } public static InputStream loadResourceAsStream ( String name ) { InputStream in = null ; ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { in = contextClassLoader . getResourceAsStream ( name ) ; } if ( in == null ) { in = ObjectHelper . class . getClassLoader ( ) . getResourceAsStream ( name ) ; } return in ; } public static Object invokeMethod ( Method method , Object instance , Object ... parameters ) { try { return method . invoke ( instance , parameters ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType ) { List < Method > answer = new ArrayList < Method > ( ) ; do { Method [ ] methods = type . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( method . getAnnotation ( annotationType ) != null ) { answer . add ( method ) ; } } type = type . getSuperclass ( ) ; } while ( type != null ) ; return answer ; } public static String asString ( Object [ ] objects ) { if ( objects == null ) { return "null" ; } else { StringBuffer buffer = new StringBuffer ( "{" ) ; int counter = 0 ; for ( Object object : objects ) { if ( counter ++ > 0 ) { buffer . append ( ", " ) ; } String text = ( object == null ) ? "null" : object . toString ( ) ; buffer . append ( text ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } } public static boolean isAssignableFrom ( Class a , Class b ) { a = convertPrimitiveTypeToWrapperType ( a ) ; b = convertPrimitiveTypeToWrapperType ( b ) ; return a . isAssignableFrom ( b ) ; } public static Class convertPrimitiveTypeToWrapperType ( Class type ) { Class rc = type ; if ( type . isPrimitive ( ) ) { if ( type == int . class ) { rc = Integer . class ; } else if ( type == long . class ) { rc = Long . class ; } else if ( type == double . class ) { rc = Double . class ; } else if ( type == float . class ) { rc = Float . class ; } else if ( type == short . class ) { rc = Short . class ; } else if ( type == byte . class ) { rc = Byte . class ; } } return rc ; } public static String getDefaultCharacterSet ( ) { return Charset . defaultCharset ( ) . name ( ) ; } public static String getPropertyName ( Method method ) { String propertyName = method . getName ( ) ; if ( propertyName . startsWith ( "set" ) && method . getParameterTypes ( ) . length == 1 ) { propertyName = propertyName . substring ( 3 , 4 ) . toLowerCase ( ) + propertyName . substring ( 4 ) ; } return propertyName ; } public static boolean hasAnnotation ( Annotation [ ] annotations , Class < ? > type ) { for ( Annotation annotation : annotations ) { if ( type . isInstance ( annotation ) ) { return true ; } } return false ; } public static void close ( Closeable closeable , String name , Log log ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException e ) { if ( log != null ) { log . warn ( "Could not close: " + name + ". Reason: " + e , e ) ; } } } } public static < T > T cast ( Class < T > toType , Object value ) { if ( toType == boolean . class ) { return ( T ) cast ( Boolean . class , value ) ; } else if ( toType . isPrimitive ( ) ) { Class newType = convertPrimitiveTypeToWrapperType ( toType ) ; if ( newType != toType ) { return ( T ) cast ( newType , value ) ; } } try { return toType . cast ( value ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( "Failed to convert: " + value + " to type: " + toType . getName ( ) + " due to: " + e , e ) ; } } public static < T > T newInstance ( Class < T > type ) { try { return type . newInstance ( ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static < T > T newInstance ( Class < ? > actualType , Class < T > expectedType ) { try { Object value = actualType . newInstance ( ) ; return cast ( expectedType , value ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isJavaIdentifier ( String name ) { if ( name == null ) { return false ; } int size = name . length ( ) ; if ( size < 1 ) { return false ; } if ( Character . isJavaIdentifierStart ( name . charAt ( 0 ) ) ) { for ( int i = 1 ; i < size ; i ++ ) { if ( ! Character . isJavaIdentifierPart ( name . charAt ( i ) ) ) { return false ; } } return true ; } return false ; } public static Object type ( Object bean ) { return bean != null ? bean . getClass ( ) : null ; } public static boolean evaluateValuePredicate ( Object value ) { if ( value instanceof Boolean ) { Boolean aBoolean = ( Boolean ) value ; return aBoolean . booleanValue ( ) ; } return value != null ; } } 	1
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Producer ; import org . apache . camel . Service ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SendProcessor extends ServiceSupport implements AsyncProcessor , Service { private static final transient Log LOG = LogFactory . getLog ( SendProcessor . class ) ; private Endpoint destination ; private Producer producer ; private AsyncProcessor processor ; public SendProcessor ( Endpoint destination ) { if ( destination == null ) { throw new IllegalArgumentException ( "Endpoint cannot be null!" ) ; } this . destination = destination ; } @ Override public String toString ( ) { return "sendTo(" + destination + ")" ; } public void process ( Exchange exchange ) throws Exception { if ( producer == null ) { if ( isStopped ( ) ) { LOG . warn ( "Ignoring exchange sent after processor is stopped: " + exchange ) ; } else { throw new IllegalStateException ( "No producer, this processor has not been started!" ) ; } } else { producer . process ( exchange ) ; } } public boolean process ( Exchange exchange , AsyncCallback callback ) { if ( producer == null ) { if ( isStopped ( ) ) { LOG . warn ( "Ignoring exchange sent after processor is stopped: " + exchange ) ; } else { exchange . setException ( new IllegalStateException ( "No producer, this processor has not been started!" ) ) ; } callback . done ( true ) ; return true ; } else { return processor . process ( exchange , callback ) ; } } public Endpoint getDestination ( ) { return destination ; } protected void doStart ( ) throws Exception { this . producer = destination . createProducer ( ) ; this . producer . start ( ) ; this . processor = AsyncProcessorTypeConverter . convert ( producer ) ; } protected void doStop ( ) throws Exception { if ( producer != null ) { try { producer . stop ( ) ; } finally { producer = null ; processor = null ; } } } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; public class MethodInfo { private Class type ; private Method method ; private final List < ParameterInfo > parameters ; private final List < ParameterInfo > bodyParameters ; private final boolean hasCustomAnnotation ; private Expression parametersExpression ; public MethodInfo ( Class type , Method method , List < ParameterInfo > parameters , List < ParameterInfo > bodyParameters , boolean hasCustomAnnotation ) { this . type = type ; this . method = method ; this . parameters = parameters ; this . bodyParameters = bodyParameters ; this . hasCustomAnnotation = hasCustomAnnotation ; this . parametersExpression = createParametersExpression ( ) ; } public String toString ( ) { return method . toString ( ) ; } public MethodInvocation createMethodInvocation ( final Object pojo , final Exchange messageExchange ) { final Object [ ] arguments = ( Object [ ] ) parametersExpression . evaluate ( messageExchange ) ; return new MethodInvocation ( ) { public Method getMethod ( ) { return method ; } public Object [ ] getArguments ( ) { return arguments ; } public Object proceed ( ) throws Throwable { return invoke ( method , pojo , arguments , messageExchange ) ; } public Object getThis ( ) { return pojo ; } public AccessibleObject getStaticPart ( ) { return method ; } } ; } public Class getType ( ) { return type ; } public Method getMethod ( ) { return method ; } public Expression getParametersExpression ( ) { return parametersExpression ; } public List < ParameterInfo > getBodyParameters ( ) { return bodyParameters ; } public Class getBodyParameterType ( ) { ParameterInfo parameterInfo = bodyParameters . get ( 0 ) ; return parameterInfo . getType ( ) ; } public boolean bodyParameterMatches ( Class bodyType ) { Class actualType = getBodyParameterType ( ) ; return actualType != null && ObjectHelper . isAssignableFrom ( bodyType , actualType ) ; } public List < ParameterInfo > getParameters ( ) { return parameters ; } public boolean hasBodyParameter ( ) { return ! bodyParameters . isEmpty ( ) ; } public boolean isHasCustomAnnotation ( ) { return hasCustomAnnotation ; } public boolean isReturnTypeVoid ( ) { return method . getReturnType ( ) . getName ( ) . equals ( "void" ) ; } protected Object invoke ( Method mth , Object pojo , Object [ ] arguments , Exchange exchange ) throws IllegalAccessException , InvocationTargetException { return mth . invoke ( pojo , arguments ) ; } protected Expression createParametersExpression ( ) { final int size = parameters . size ( ) ; final Expression [ ] expressions = new Expression [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Expression parameterExpression = parameters . get ( i ) . getExpression ( ) ; expressions [ i ] = parameterExpression ; } return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object [ ] answer = new Object [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Object value = expressions [ i ] . evaluate ( exchange ) ; Class expectedType = parameters . get ( i ) . getType ( ) ; value = ExchangeHelper . convertToType ( exchange , expectedType , value ) ; answer [ i ] = value ; } return answer ; } @ Override public String toString ( ) { return "ParametersExpression: " + Arrays . asList ( expressions ) ; } } ; } } 	1
package org . apache . camel . util ; public interface TimeoutMap extends Runnable { Object get ( Object key ) ; Object [ ] getKeys ( ) ; int size ( ) ; void put ( Object key , Object value , long timeoutMillis ) ; void remove ( Object key ) ; void purge ( ) ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . bean . RegistryBean ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "bean" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class BeanRef extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlAttribute ( required = false ) private String method ; @ XmlAttribute ( required = false ) private Class beanType ; @ XmlTransient private Object bean ; public BeanRef ( ) { } public BeanRef ( String ref ) { this . ref = ref ; } public BeanRef ( String ref , String method ) { this . ref = ref ; this . method = method ; } @ Override public String toString ( ) { return "Bean[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "bean" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public void setBean ( Object bean ) { this . bean = bean ; } public Class getBeanType ( ) { return beanType ; } public void setBeanType ( Class beanType ) { this . beanType = beanType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { BeanProcessor answer ; if ( ref != null ) { answer = new BeanProcessor ( new RegistryBean ( routeContext . getCamelContext ( ) , ref ) ) ; } else { if ( bean == null ) { ObjectHelper . notNull ( beanType , "bean, ref or beanType" ) ; bean = CamelContextHelper . newInstance ( routeContext . getCamelContext ( ) , beanType ) ; } answer = new BeanProcessor ( bean , routeContext . getCamelContext ( ) ) ; } if ( method != null ) { answer . setMethod ( method ) ; } return answer ; } @ Override public String getLabel ( ) { if ( ref != null ) { String methodText = "" ; if ( method != null ) { methodText = " method: " + method ; } return "ref: " + ref + methodText ; } else if ( bean != null ) { return bean . toString ( ) ; } else if ( beanType != null ) { return beanType . getName ( ) ; } else { return "" ; } } } 	1
package org . apache . camel . component . cxf ; public enum DataFormat { PAYLOAD , MESSAGE , POJO , UNKNOWN ; public static DataFormat asEnum ( String value ) { try { return valueOf ( value . toUpperCase ( ) ) ; } catch ( Exception e ) { return UNKNOWN ; } } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . Service ; import org . apache . camel . util . ServiceHelper ; public abstract class ServiceSupport implements Service { private static int threadCounter ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private AtomicBoolean starting = new AtomicBoolean ( false ) ; private AtomicBoolean stopping = new AtomicBoolean ( false ) ; private AtomicBoolean stopped = new AtomicBoolean ( false ) ; private Collection childServices ; public void start ( ) throws Exception { if ( started . compareAndSet ( false , true ) ) { starting . set ( true ) ; try { if ( childServices != null ) { ServiceHelper . startServices ( childServices ) ; } doStart ( ) ; } finally { starting . set ( false ) ; } } } public void stop ( ) throws Exception { if ( started . get ( ) && stopping . compareAndSet ( false , true ) ) { try { doStop ( ) ; } finally { if ( childServices != null ) { ServiceHelper . stopServices ( childServices ) ; } stopped . set ( true ) ; started . set ( false ) ; stopping . set ( false ) ; } } } public boolean isStarted ( ) { return started . get ( ) ; } public boolean isStarting ( ) { return starting . get ( ) ; } public boolean isStopping ( ) { return stopping . get ( ) ; } protected boolean isRunAllowed ( ) { return ! ( stopping . get ( ) || stopped . get ( ) ) ; } public boolean isStopped ( ) { return stopped . get ( ) ; } protected abstract void doStart ( ) throws Exception ; protected abstract void doStop ( ) throws Exception ; protected String getThreadName ( String prefix ) { return prefix + " thread:" + nextThreadCounter ( ) ; } protected static synchronized int nextThreadCounter ( ) { return ++ threadCounter ; } protected void addChildService ( Object childService ) { if ( childServices == null ) { childServices = new ArrayList ( ) ; } childServices . add ( childService ) ; } protected boolean removeChildService ( Object childService ) { if ( childServices != null ) { return childServices . remove ( childService ) ; } else { return false ; } } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . HandleFaultProcessor ; @ XmlRootElement ( name = "handleFault" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class HandleFaultType extends InterceptorRef { public HandleFaultType ( ) { super ( new HandleFaultProcessor ( ) ) ; } @ Override public String getShortName ( ) { return "handleFault" ; } @ Override public String toString ( ) { return "HandleFault[" + getLabel ( ) + "]" ; } } 	0
package org . apache . camel . converter . stream ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public interface StreamCache { } 	1
package org . apache . camel . component . bean ; import org . apache . camel . Expression ; public interface ParameterMappingStrategy { Expression getDefaultParameterTypeExpression ( Class parameterType ) ; } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import javax . xml . transform . stream . StreamSource ; public class BytesSource extends StreamSource { private byte [ ] data ; public BytesSource ( byte [ ] data ) { this . data = data ; } public BytesSource ( byte [ ] data , String systemId ) { this . data = data ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { return new ByteArrayInputStream ( data ) ; } public Reader getReader ( ) { return new InputStreamReader ( getInputStream ( ) ) ; } public byte [ ] getData ( ) { return data ; } public String toString ( ) { return "BytesSource[" + new String ( data ) + "]" ; } } 	1
package org . apache . camel . builder . script ; import org . apache . camel . CamelContext ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; public class ScriptLanguageResolver implements LanguageResolver { public Language resolveLanguage ( String name , CamelContext context ) { return new ScriptLanguage ( name ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . Proxy ; import org . apache . camel . Endpoint ; import org . apache . camel . Producer ; public final class ProxyHelper { private ProxyHelper ( ) { } public static Object createProxy ( final Endpoint endpoint , ClassLoader cl , Class interfaces [ ] ) throws Exception { final Producer producer = endpoint . createProducer ( ) ; return Proxy . newProxyInstance ( cl , interfaces , new CamelInvocationHandler ( endpoint , producer ) ) ; } public static Object createProxy ( Endpoint endpoint , Class interfaces [ ] ) throws Exception { if ( interfaces . length < 1 ) { throw new IllegalArgumentException ( "You must provide at least 1 interface class." ) ; } return createProxy ( endpoint , interfaces [ 0 ] . getClassLoader ( ) , interfaces ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , ClassLoader cl , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , cl , new Class [ ] { interfaceClass } ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , new Class [ ] { interfaceClass } ) ; } } 	1
package org . apache . camel . component . quartz ; import java . util . Map ; import org . apache . camel . impl . DefaultMessage ; import org . quartz . JobExecutionContext ; import org . quartz . Trigger ; public class QuartzMessage extends DefaultMessage { private final JobExecutionContext jobExecutionContext ; public QuartzMessage ( QuartzExchange exchange , JobExecutionContext jobExecutionContext ) { this . jobExecutionContext = jobExecutionContext ; setExchange ( exchange ) ; if ( jobExecutionContext != null ) { setBody ( jobExecutionContext . getJobDetail ( ) ) ; } } public JobExecutionContext getJobExecutionContext ( ) { return jobExecutionContext ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { super . populateInitialHeaders ( map ) ; if ( jobExecutionContext != null ) { map . put ( "calendar" , jobExecutionContext . getCalendar ( ) ) ; map . put ( "fireTime" , jobExecutionContext . getFireTime ( ) ) ; map . put ( "jobDetail" , jobExecutionContext . getJobDetail ( ) ) ; map . put ( "jobInstance" , jobExecutionContext . getJobInstance ( ) ) ; map . put ( "jobRunTime" , jobExecutionContext . getJobRunTime ( ) ) ; map . put ( "mergedJobDataMap" , jobExecutionContext . getMergedJobDataMap ( ) ) ; map . put ( "nextFireTime" , jobExecutionContext . getNextFireTime ( ) ) ; map . put ( "previousFireTime" , jobExecutionContext . getPreviousFireTime ( ) ) ; map . put ( "refireCount" , jobExecutionContext . getRefireCount ( ) ) ; map . put ( "result" , jobExecutionContext . getResult ( ) ) ; map . put ( "scheduledFireTime" , jobExecutionContext . getScheduledFireTime ( ) ) ; map . put ( "scheduler" , jobExecutionContext . getScheduler ( ) ) ; Trigger trigger = jobExecutionContext . getTrigger ( ) ; map . put ( "trigger" , trigger ) ; map . put ( "triggerName" , trigger . getName ( ) ) ; map . put ( "triggerGroup" , trigger . getGroup ( ) ) ; } } } 	0
package org . apache . camel . model ; import java . util . Collection ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Aggregator ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "aggregator" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class AggregatorType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private AggregationCollection aggregationCollection ; @ XmlAttribute ( required = false ) private Integer batchSize ; @ XmlAttribute ( required = false ) private Long batchTimeout ; @ XmlAttribute ( required = false ) private String strategyRef ; @ XmlElement ( name = "completedPredicate" , required = false ) private CompletedPredicate completedPredicate ; public AggregatorType ( ) { } public AggregatorType ( Expression correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( ExpressionType correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { super ( correlationExpression ) ; this . aggregationStrategy = aggregationStrategy ; } @ Override public String toString ( ) { return "Aggregator[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "aggregator" ; } @ SuppressWarnings ( "unchecked" ) @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routes , aggregator ) ; } private void doAddRoute ( RouteContext routeContext , Collection < Route > routes , final Aggregator aggregator ) throws Exception { Route route = new Route < Exchange > ( aggregator . getEndpoint ( ) , aggregator ) { @ Override public String toString ( ) { return "AggregatorRoute[" + getEndpoint ( ) + " -> " + aggregator . getProcessor ( ) + "]" ; } } ; routes . add ( route ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routeContext . getCamelContext ( ) . getRoutes ( ) , aggregator ) ; routeContext . setIsRouteAdded ( true ) ; return aggregator ; } protected Aggregator createAggregator ( RouteContext routeContext ) throws Exception { Endpoint from = routeContext . getEndpoint ( ) ; final Processor processor = routeContext . createProcessor ( this ) ; final Aggregator aggregator ; if ( aggregationCollection != null ) { aggregator = new Aggregator ( from , processor , aggregationCollection ) ; } else { AggregationStrategy strategy = getAggregationStrategy ( ) ; if ( strategy == null && strategyRef != null ) { strategy = routeContext . lookup ( strategyRef , AggregationStrategy . class ) ; } if ( strategy == null ) { strategy = new UseLatestAggregationStrategy ( ) ; } Expression aggregateExpression = getExpression ( ) . createExpression ( routeContext ) ; Predicate predicate = null ; if ( completedPredicate != null ) { predicate = completedPredicate . createPredicate ( routeContext ) ; } if ( predicate != null ) { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy , predicate ) ; } else { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy ) ; } } if ( batchSize != null ) { aggregator . setBatchSize ( batchSize ) ; } if ( batchTimeout != null ) { aggregator . setBatchTimeout ( batchTimeout ) ; } return aggregator ; } public AggregationCollection getAggregationCollection ( ) { return aggregationCollection ; } public void setAggregationCollection ( AggregationCollection aggregationCollection ) { this . aggregationCollection = aggregationCollection ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public Integer getBatchSize ( ) { return batchSize ; } public void setBatchSize ( Integer batchSize ) { this . batchSize = batchSize ; } public Long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( Long batchTimeout ) { this . batchTimeout = batchTimeout ; } public String getStrategyRef ( ) { return strategyRef ; } public void setStrategyRef ( String strategyRef ) { this . strategyRef = strategyRef ; } public CompletedPredicate getCompletePredicate ( ) { return completedPredicate ; } public void setCompletePredicate ( CompletedPredicate completedPredicate ) { this . completedPredicate = completedPredicate ; } public AggregatorType batchSize ( int batchSize ) { setBatchSize ( batchSize ) ; return this ; } public AggregatorType batchTimeout ( long batchTimeout ) { setBatchTimeout ( batchTimeout ) ; return this ; } public ExpressionClause < AggregatorType > completedPredicate ( ) { checkNoCompletedPredicate ( ) ; ExpressionClause < AggregatorType > clause = new ExpressionClause < AggregatorType > ( this ) ; completedPredicate = new CompletedPredicate ( clause ) ; return clause ; } public AggregatorType completedPredicate ( Predicate predicate ) { checkNoCompletedPredicate ( ) ; completedPredicate = new CompletedPredicate ( predicate ) ; return this ; } protected void checkNoCompletedPredicate ( ) { if ( completedPredicate != null ) { throw new IllegalArgumentException ( "There already is a completedPredicate defined for this aggregator: " + this ) ; } } } 	1
package org . apache . camel . language ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "simple" ) public @ interface Simple { String value ( ) ; } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Method ; public interface MethodInvocation { Method getMethod ( ) ; Object [ ] getArguments ( ) ; Object proceed ( ) throws Throwable ; Object getThis ( ) ; AccessibleObject getStaticPart ( ) ; } 	1
package org . apache . camel ; public interface AsyncCallback { void done ( boolean doneSynchronously ) ; } 	0
package org . apache . camel . util ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLDecoder ; import java . util . Arrays ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . jar . JarEntry ; import java . util . jar . JarInputStream ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResolverUtil < T > { protected static final transient Log LOG = LogFactory . getLog ( ResolverUtil . class ) ; public static interface Test { boolean matches ( Class type ) ; } public static class IsA implements Test { private Class parent ; public IsA ( Class parentType ) { this . parent = parentType ; } public boolean matches ( Class type ) { return type != null && parent . isAssignableFrom ( type ) ; } @ Override public String toString ( ) { return "is assignable to " + parent . getSimpleName ( ) ; } } public static class AnnotatedWith implements Test { private Class < ? extends Annotation > annotation ; public AnnotatedWith ( Class < ? extends Annotation > annotation ) { this . annotation = annotation ; } public boolean matches ( Class type ) { return type != null && type . isAnnotationPresent ( annotation ) ; } @ Override public String toString ( ) { return "annotated with @" + annotation . getSimpleName ( ) ; } } private Set < Class < ? extends T > > matches = new HashSet < Class < ? extends T > > ( ) ; private Set < ClassLoader > classLoaders ; public Set < Class < ? extends T > > getClasses ( ) { return matches ; } public Set < ClassLoader > getClassLoaders ( ) { if ( classLoaders == null ) { classLoaders = new HashSet < ClassLoader > ( ) ; classLoaders . add ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; classLoaders . add ( ResolverUtil . class . getClassLoader ( ) ) ; } return classLoaders ; } public void setClassLoaders ( Set < ClassLoader > classLoaders ) { this . classLoaders = classLoaders ; } public void findImplementations ( Class parent , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for implementations of " + parent . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new IsA ( parent ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void findAnnotated ( Class < ? extends Annotation > annotation , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for annotations of " + annotation . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new AnnotatedWith ( annotation ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void find ( Test test , String packageName ) { packageName = packageName . replace ( '.' , '/' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; for ( ClassLoader classLoader : set ) { find ( test , packageName , classLoader ) ; } } protected void find ( Test test , String packageName , ClassLoader loader ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching for: " + test + " in package: " + packageName + " using classloader: " + loader . getClass ( ) . getName ( ) ) ; } if ( loader . getClass ( ) . getName ( ) . endsWith ( "org.apache.felix.framework.searchpolicy.ContentClassLoader" ) ) { LOG . trace ( "This is not an URL classloader, skipping" ) ; return ; } try { Method mth = loader . getClass ( ) . getMethod ( "getBundle" , new Class [ ] { } ) ; if ( mth != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from osgi buindle using classloader: " + loader ) ; } loadImplementationsInBundle ( test , packageName , loader , mth ) ; return ; } } catch ( NoSuchMethodException e ) { LOG . trace ( "It's not an osgi bundle classloader" ) ; } Enumeration < URL > urls ; try { urls = getResources ( loader , packageName ) ; if ( ! urls . hasMoreElements ( ) ) { LOG . trace ( "No URLs returned by classloader" ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read package: " + packageName , ioe ) ; return ; } while ( urls . hasMoreElements ( ) ) { URL url = null ; try { url = urls . nextElement ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "URL from classloader: " + url ) ; } String urlPath = url . getFile ( ) ; urlPath = URLDecoder . decode ( urlPath , "UTF-8" ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Decoded urlPath: " + urlPath ) ; } if ( urlPath . startsWith ( "file:" ) ) { urlPath = urlPath . substring ( 5 ) ; } if ( urlPath . startsWith ( "bundle:" ) ) { LOG . trace ( "It's a virtual osgi bundle, skipping" ) ; continue ; } if ( urlPath . indexOf ( '!' ) > 0 ) { urlPath = urlPath . substring ( 0 , urlPath . indexOf ( '!' ) ) ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Scanning for classes in [" + urlPath + "] matching criteria: " + test ) ; } File file = new File ( urlPath ) ; if ( file . isDirectory ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from directory: " + file ) ; } loadImplementationsInDirectory ( test , packageName , file ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from jar: " + file ) ; } loadImplementationsInJar ( test , packageName , file ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read entries in url: " + url , ioe ) ; } } } protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Getting resource URL for package: " + packageName + " with classloader: " + loader ) ; } return loader . getResources ( packageName ) ; } private void loadImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { Set < String > urls = OsgiUtil . getImplementationsInBundle ( test , packageName , loader , mth ) ; if ( urls != null ) { for ( String url : urls ) { addIfMatching ( test , url ) ; } } } private static final class OsgiUtil { private OsgiUtil ( ) { } static Set < String > getImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { try { org . osgi . framework . Bundle bundle = ( org . osgi . framework . Bundle ) mth . invoke ( loader ) ; org . osgi . framework . Bundle [ ] bundles = bundle . getBundleContext ( ) . getBundles ( ) ; Set < String > urls = new HashSet < String > ( ) ; for ( org . osgi . framework . Bundle bd : bundles ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching in bundle:" + bd ) ; } Enumeration < URL > paths = bd . findEntries ( "/" + packageName , "*.class" , true ) ; while ( paths != null && paths . hasMoreElements ( ) ) { URL path = paths . nextElement ( ) ; urls . add ( path . getPath ( ) . substring ( 1 ) ) ; } } return urls ; } catch ( Throwable t ) { LOG . error ( "Could not search osgi bundles for classes matching criteria: " + test + "due to an Exception: " + t . getMessage ( ) ) ; return null ; } } } private void loadImplementationsInDirectory ( Test test , String parent , File location ) { File [ ] files = location . listFiles ( ) ; StringBuilder builder = null ; for ( File file : files ) { builder = new StringBuilder ( 100 ) ; String name = file . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; builder . append ( parent ) . append ( "/" ) . append ( name ) ; String packageOrClass = parent == null ? name : builder . toString ( ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageOrClass , file ) ; } else if ( name . endsWith ( ".class" ) ) { addIfMatching ( test , packageOrClass ) ; } } } } private void loadImplementationsInJar ( Test test , String parent , File jarfile ) { JarInputStream jarStream = null ; try { jarStream = new JarInputStream ( new FileInputStream ( jarfile ) ) ; JarEntry entry ; while ( ( entry = jarStream . getNextJarEntry ( ) ) != null ) { String name = entry . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; if ( ! entry . isDirectory ( ) && name . startsWith ( parent ) && name . endsWith ( ".class" ) ) { addIfMatching ( test , name ) ; } } } } catch ( IOException ioe ) { LOG . error ( "Could not search jar file '" + jarfile + "' for classes matching criteria: " + test + " due to an IOException: " + ioe . getMessage ( ) , ioe ) ; } finally { ObjectHelper . close ( jarStream , jarfile . getPath ( ) , LOG ) ; } } protected void addIfMatching ( Test test , String fqn ) { try { String externalName = fqn . substring ( 0 , fqn . indexOf ( '.' ) ) . replace ( '/' , '.' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; boolean found = false ; for ( ClassLoader classLoader : set ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Testing for class " + externalName + " matches criteria [" + test + "]" ) ; } try { Class type = classLoader . loadClass ( externalName ) ; if ( test . matches ( type ) ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Found class: " + type + " in classloader: " + classLoader ) ; } matches . add ( ( Class < T > ) type ) ; } found = true ; break ; } catch ( ClassNotFoundException e ) { LOG . debug ( "Could not find class '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } catch ( NoClassDefFoundError e ) { LOG . debug ( "Could not find the class defintion '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } } if ( ! found ) { LOG . warn ( "Could not find class '" + fqn + "' in any classloaders: " + set ) ; } } catch ( Throwable t ) { LOG . warn ( "Could not examine class '" + fqn + "' due to a " + t . getClass ( ) . getName ( ) + " with message: " + t . getMessage ( ) , t ) ; } } } 	1
package org . apache . camel . language . jxpath ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; public class JXPathLanguage implements Language { public Expression < Exchange > createExpression ( String expression ) { return new JXPathExpression ( expression , Object . class ) ; } public Predicate < Exchange > createPredicate ( String predicate ) { return new JXPathExpression ( predicate , Boolean . class ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . UnmarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "unmarshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class UnmarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public UnmarshalType ( ) { } public UnmarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public UnmarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "unmarshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new UnmarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . component . spring . integration ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . impl . DefaultExchange ; public class SpringIntegrationExchange extends DefaultExchange { public SpringIntegrationExchange ( CamelContext context ) { super ( context ) ; } public SpringIntegrationExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } @ Override public Exchange newInstance ( ) { return new SpringIntegrationExchange ( this . getContext ( ) ) ; } @ Override public SpringIntegrationMessage getIn ( ) { return ( SpringIntegrationMessage ) super . getIn ( ) ; } @ Override public SpringIntegrationMessage getOut ( ) { return ( SpringIntegrationMessage ) super . getOut ( ) ; } @ Override public SpringIntegrationMessage getOut ( boolean lazyCreate ) { return ( SpringIntegrationMessage ) super . getOut ( lazyCreate ) ; } @ Override public SpringIntegrationMessage getFault ( ) { return ( SpringIntegrationMessage ) super . getFault ( ) ; } @ Override protected Message createFaultMessage ( ) { return new SpringIntegrationMessage ( ) ; } @ Override protected Message createInMessage ( ) { return new SpringIntegrationMessage ( ) ; } @ Override protected Message createOutMessage ( ) { return new SpringIntegrationMessage ( ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class BuilderSupport { private CamelContext context ; private ErrorHandlerBuilder errorHandlerBuilder ; private boolean inheritErrorHandler = true ; protected BuilderSupport ( CamelContext context ) { this . context = context ; } protected BuilderSupport ( BuilderSupport parent ) { this . context = parent . getContext ( ) ; this . inheritErrorHandler = parent . inheritErrorHandler ; if ( inheritErrorHandler && parent . errorHandlerBuilder != null ) { this . errorHandlerBuilder = parent . errorHandlerBuilder . copy ( ) ; } } public ValueBuilder header ( String name ) { return Builder . header ( name ) ; } public ValueBuilder body ( ) { return Builder . body ( ) ; } public < T > ValueBuilder body ( Class < T > type ) { return Builder . bodyAs ( type ) ; } public ValueBuilder outBody ( ) { return Builder . outBody ( ) ; } public < T > ValueBuilder outBody ( Class < T > type ) { return Builder . outBodyAs ( type ) ; } public ValueBuilder faultBody ( ) { return Builder . faultBody ( ) ; } public < T > ValueBuilder faultBodyAs ( Class < T > type ) { return Builder . faultBodyAs ( type ) ; } public ValueBuilder systemProperty ( String name ) { return Builder . systemProperty ( name ) ; } public ValueBuilder systemProperty ( String name , String defaultValue ) { return Builder . systemProperty ( name , defaultValue ) ; } public ValueBuilder constant ( Object value ) { return Builder . constant ( value ) ; } public Endpoint endpoint ( String uri ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; Endpoint endpoint = getContext ( ) . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public < T extends Endpoint > T endpoint ( String uri , Class < T > type ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; T endpoint = getContext ( ) . getEndpoint ( uri , type ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public List < Endpoint > endpoints ( String ... uris ) throws NoSuchEndpointException { List < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; for ( String uri : uris ) { endpoints . add ( endpoint ( uri ) ) ; } return endpoints ; } public List < Endpoint > endpoints ( Endpoint ... endpoints ) { List < Endpoint > answer = new ArrayList < Endpoint > ( ) ; answer . addAll ( Arrays . asList ( endpoints ) ) ; return answer ; } public NoErrorHandlerBuilder noErrorHandler ( ) { return new NoErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( ) { return new LoggingErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( String log ) { return loggingErrorHandler ( LogFactory . getLog ( log ) ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log ) { return new LoggingErrorHandlerBuilder ( log ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log , LoggingLevel level ) { return new LoggingErrorHandlerBuilder ( log , level ) ; } public DeadLetterChannelBuilder deadLetterChannel ( ) { return new DeadLetterChannelBuilder ( ) ; } public DeadLetterChannelBuilder deadLetterChannel ( String deadLetterUri ) { return deadLetterChannel ( endpoint ( deadLetterUri ) ) ; } public DeadLetterChannelBuilder deadLetterChannel ( Endpoint deadLetterEndpoint ) { return new DeadLetterChannelBuilder ( new SendProcessor ( deadLetterEndpoint ) ) ; } public CamelContext getContext ( ) { return context ; } public void setContext ( CamelContext context ) { this . context = context ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public boolean isInheritErrorHandler ( ) { return inheritErrorHandler ; } public void setInheritErrorHandler ( boolean inheritErrorHandler ) { this . inheritErrorHandler = inheritErrorHandler ; } } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlRootElement ( name = "artixDS" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ArtixDSDataFormat extends DataFormatType { private static final transient Log LOG = LogFactory . getLog ( ArtixDSDataFormat . class ) ; @ XmlAttribute ( required = false ) private String elementTypeName ; @ XmlAttribute ( required = false ) private String format ; @ XmlAttribute ( required = false ) private Class < ? > elementType ; @ XmlAttribute ( required = false ) private ArtixDSContentType contentType ; public ArtixDSDataFormat ( ) { super ( "org.apache.camel.artix.ds.ArtixDSFormat" ) ; } public ArtixDSDataFormat ( Class < ? > elementType ) { this ( ) ; this . elementType = elementType ; } public ArtixDSDataFormat ( Class < ? > elementType , ArtixDSContentType contentType ) { this ( ) ; this . elementType = elementType ; this . contentType = contentType ; } public ArtixDSDataFormat ( ArtixDSContentType contentType ) { this ( ) ; this . contentType = contentType ; } public String getElementTypeName ( ) { return elementTypeName ; } public void setElementTypeName ( String elementTypeName ) { this . elementTypeName = elementTypeName ; } public ArtixDSContentType getContentType ( ) { return contentType ; } public void setContentType ( ArtixDSContentType contentType ) { this . contentType = contentType ; } public Class < ? > getElementType ( ) { if ( elementType == null ) { if ( elementTypeName != null ) { elementType = ObjectHelper . loadClass ( elementTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( elementType == null ) { throw new IllegalArgumentException ( "The ArtixDS Element class " + elementTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } } } return elementType ; } public void setElementType ( Class < ? > elementType ) { this . elementType = elementType ; } public String getFormat ( ) { return format ; } public void setFormat ( String format ) { this . format = format ; } @ Override protected void configureDataFormat ( DataFormat dataFormat ) { Class < ? > type = getElementType ( ) ; if ( type != null ) { setProperty ( dataFormat , "elementType" , type ) ; } ArtixDSContentType content = getContentType ( ) ; if ( content != null ) { setProperty ( dataFormat , "contentType" , content ) ; } } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ThreadProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "thread" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThreadType extends ProcessorType < ProcessorType > { @ XmlAttribute ( required = false ) private Integer coreSize = 1 ; @ XmlAttribute ( required = false ) private Boolean daemon = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Long keepAliveTime ; @ XmlAttribute ( required = false ) private Integer maxSize = 1 ; @ XmlAttribute ( required = false ) private String name = "Thread Processor" ; @ XmlAttribute ( required = false ) private Integer priority = Thread . NORM_PRIORITY ; @ XmlAttribute ( required = false ) private Long stackSize ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private BlockingQueue < Runnable > taskQueue ; @ XmlTransient private ThreadGroup threadGroup ; @ XmlTransient private ThreadPoolExecutor executor ; public ThreadType ( ) { } public ThreadType ( int coreSize ) { this . coreSize = coreSize ; this . maxSize = coreSize ; } public ThreadType ( ThreadPoolExecutor executor ) { this . executor = executor ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } @ Override public String toString ( ) { return "Thread[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "thread" ; } @ Override public String getLabel ( ) { return "coreSize=" + coreSize ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ThreadProcessor thread = new ThreadProcessor ( ) ; thread . setExecutor ( executor ) ; if ( coreSize != null ) { thread . setCoreSize ( coreSize ) ; } if ( daemon != null ) { thread . setDaemon ( daemon ) ; } if ( keepAliveTime != null ) { thread . setKeepAliveTime ( keepAliveTime ) ; } if ( maxSize != null ) { thread . setMaxSize ( maxSize ) ; } thread . setName ( name ) ; thread . setPriority ( priority ) ; if ( stackSize != null ) { thread . setStackSize ( stackSize ) ; } thread . setTaskQueue ( taskQueue ) ; thread . setThreadGroup ( threadGroup ) ; ArrayList < Processor > pipe = new ArrayList < Processor > ( 2 ) ; pipe . add ( thread ) ; pipe . add ( createOutputsProcessor ( routeContext , outputs ) ) ; return new Pipeline ( pipe ) ; } public ThreadType coreSize ( int coreSize ) { setCoreSize ( coreSize ) ; return this ; } public ThreadType daemon ( boolean daemon ) { setDaemon ( daemon ) ; return this ; } public ThreadType keepAliveTime ( long keepAliveTime ) { setKeepAliveTime ( keepAliveTime ) ; return this ; } public ThreadType maxSize ( int maxSize ) { setMaxSize ( maxSize ) ; return this ; } public ThreadType name ( String name ) { setName ( name ) ; return this ; } public ThreadType priority ( int priority ) { setPriority ( priority ) ; return this ; } public ThreadType stackSize ( long stackSize ) { setStackSize ( stackSize ) ; return this ; } public ThreadType taskQueue ( BlockingQueue < Runnable > taskQueue ) { setTaskQueue ( taskQueue ) ; return this ; } public ThreadType threadGroup ( ThreadGroup threadGroup ) { setThreadGroup ( threadGroup ) ; return this ; } public ThreadType executor ( ThreadPoolExecutor executor ) { setExecutor ( executor ) ; return this ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public void setName ( String name ) { this . name = name ; } public void setPriority ( int priority ) { this . priority = priority ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public ThreadPoolExecutor getExecutor ( ) { return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "identifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class IdentifiedType { @ XmlAttribute @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } } 	0
package org . apache . camel . util ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . Registry ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class CamelContextHelper { private CamelContextHelper ( ) { } public static Endpoint getMandatoryEndpoint ( CamelContext camelContext , String uri ) throws NoSuchEndpointException { Endpoint endpoint = camelContext . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } else { return endpoint ; } } public static < T extends Endpoint > T getMandatoryEndpoint ( CamelContext camelContext , String uri , Class < T > type ) { Endpoint endpoint = getMandatoryEndpoint ( camelContext , uri ) ; return ObjectHelper . cast ( type , endpoint ) ; } public static < T > List < T > getSingletonEndpoints ( CamelContext camelContext , Class < T > type ) { List < T > answer = new ArrayList < T > ( ) ; Collection < Endpoint > endpoints = camelContext . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( type . isInstance ( endpoint ) ) { T value = type . cast ( endpoint ) ; answer . add ( value ) ; } } return answer ; } public static < T > T convertTo ( CamelContext context , Class < T > type , Object value ) { notNull ( context , "camelContext" ) ; return context . getTypeConverter ( ) . convertTo ( type , value ) ; } public static < T > T mandatoryConvertTo ( CamelContext context , Class < T > type , Object value ) { T answer = convertTo ( context , type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Value " + value + " converted to " + type . getName ( ) + " cannot be null" ) ; } return answer ; } public static < T > T newInstance ( CamelContext context , Class < T > beanType ) { return context . getInjector ( ) . newInstance ( beanType ) ; } public static Object lookup ( CamelContext context , String name ) { return context . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookup ( CamelContext context , String name , Class < T > beanType ) { return context . getRegistry ( ) . lookup ( name , beanType ) ; } public static Object mandatoryLookup ( CamelContext context , String name ) { Object answer = lookup ( context , name ) ; notNull ( answer , "registry entry called " + name ) ; return answer ; } public static < T > T mandatoryLookup ( CamelContext context , String name , Class < T > beanType ) { T answer = lookup ( context , name , beanType ) ; notNull ( answer , "registry entry called " + name + " of type " + beanType . getName ( ) ) ; return answer ; } public static Language resolveMandatoryLanguage ( CamelContext camelContext , String languageName ) { notNull ( camelContext , "camelContext" ) ; notNull ( languageName , "languageName" ) ; Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Could not resolve language: " + languageName ) ; } return language ; } public static Expression resolveMandatoryExpression ( CamelContext camelContext , String languageName , String expressionText ) { notNull ( expressionText , "expressionText" ) ; Language language = resolveMandatoryLanguage ( camelContext , languageName ) ; Expression < Exchange > expression = language . createExpression ( expressionText ) ; if ( expression == null ) { throw new IllegalArgumentException ( "Could not create expression: " + expressionText + " with language: " + language ) ; } return expression ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . List ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamWriter ; import org . w3c . dom . Element ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . staxutils . StaxUtils ; public class PayloadContentRedirectInterceptor extends AbstractPhaseInterceptor < Message > { public PayloadContentRedirectInterceptor ( ) { super ( Phase . POST_STREAM ) ; } @ SuppressWarnings ( "unchecked" ) public void handleMessage ( Message message ) throws Fault { Exception ex = message . getContent ( Exception . class ) ; if ( ex != null ) { if ( ex instanceof Fault ) { throw ( Fault ) ex ; } else { throw new Fault ( ex ) ; } } XMLStreamWriter out = message . getContent ( XMLStreamWriter . class ) ; List < Element > in = message . get ( List . class ) ; try { for ( Element el : in ) { StaxUtils . writeElement ( el , out , false , true ) ; } } catch ( XMLStreamException e ) { throw new Fault ( e ) ; } } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Pipeline extends MulticastProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( Pipeline . class ) ; public Pipeline ( Collection < Processor > processors ) { super ( processors ) ; } public static Processor newInstance ( List < Processor > processors ) { if ( processors . isEmpty ( ) ) { return null ; } else if ( processors . size ( ) == 1 ) { return processors . get ( 0 ) ; } return new Pipeline ( processors ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange original , AsyncCallback callback ) { Iterator < Processor > processors = getProcessors ( ) . iterator ( ) ; Exchange nextExchange = original ; boolean first = true ; while ( true ) { if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } if ( ! processors . hasNext ( ) ) { break ; } AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( first ) { first = false ; } else { nextExchange = createNextExchange ( processor , nextExchange ) ; } boolean sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return false ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( true ) ; return true ; } private boolean process ( final Exchange original , final Exchange exchange , final AsyncCallback callback , final Iterator < Processor > processors , AsyncProcessor processor ) { return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } Exchange nextExchange = exchange ; while ( processors . hasNext ( ) ) { AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } nextExchange = createNextExchange ( processor , nextExchange ) ; sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( false ) ; } } ) ; } protected Exchange createNextExchange ( Processor producer , Exchange previousExchange ) { Exchange answer = previousExchange . newInstance ( ) ; answer . getProperties ( ) . putAll ( previousExchange . getProperties ( ) ) ; Message previousOut = previousExchange . getOut ( false ) ; Message in = answer . getIn ( ) ; if ( previousOut != null ) { in . copyFrom ( previousOut ) ; } else { in . copyFrom ( previousExchange . getIn ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Pipeline" + getProcessors ( ) ; } } 	1
package org . apache . camel . spring . spi ; import org . apache . camel . spi . Injector ; import org . springframework . beans . factory . config . AutowireCapableBeanFactory ; import org . springframework . context . ConfigurableApplicationContext ; public class SpringInjector implements Injector { private final ConfigurableApplicationContext applicationContext ; private int autowireMode = AutowireCapableBeanFactory . AUTOWIRE_CONSTRUCTOR ; private boolean dependencyCheck ; public SpringInjector ( ConfigurableApplicationContext applicationContext ) { this . applicationContext = applicationContext ; } public < T > T newInstance ( Class < T > type ) { Object value = applicationContext . getBeanFactory ( ) . createBean ( type , autowireMode , dependencyCheck ) ; return type . cast ( value ) ; } public int getAutowireMode ( ) { return autowireMode ; } public void setAutowireMode ( int autowireMode ) { this . autowireMode = autowireMode ; } public boolean isDependencyCheck ( ) { return dependencyCheck ; } public void setDependencyCheck ( boolean dependencyCheck ) { this . dependencyCheck = dependencyCheck ; } } 	0
package org . apache . camel . component . mock ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MockEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( MockEndpoint . class ) ; private int expectedCount ; private int counter ; private Processor defaultProcessor ; private Map < Integer , Processor > processors ; private List < Exchange > receivedExchanges ; private List < Throwable > failures ; private List < Runnable > tests ; private CountDownLatch latch ; private long sleepForEmptyTest ; private long resultWaitTime ; private int expectedMinimumCount ; private List expectedBodyValues ; private List actualBodyValues ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; private String headerName ; private String headerValue ; private Object actualHeader ; private Processor reporter ; public MockEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; init ( ) ; } public MockEndpoint ( String endpointUri ) { super ( endpointUri ) ; init ( ) ; } public static MockEndpoint resolve ( CamelContext context , String uri ) { return CamelContextHelper . getMandatoryEndpoint ( context , uri , MockEndpoint . class ) ; } public static void assertWait ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; long left = unit . toMillis ( timeout ) ; long end = start + left ; for ( MockEndpoint endpoint : endpoints ) { if ( ! endpoint . await ( left , TimeUnit . MILLISECONDS ) ) { throw new AssertionError ( "Timeout waiting for endpoints to receive enough messages. " + endpoint . getEndpointUri ( ) + " timed out." ) ; } left = end - System . currentTimeMillis ( ) ; if ( left <= 0 ) { left = 0 ; } } } public static void assertIsSatisfied ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { assertWait ( timeout , unit , endpoints ) ; for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( CamelContext context ) throws InterruptedException { ObjectHelper . notNull ( context , "camelContext" ) ; Collection < Endpoint > endpoints = context . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( endpoint instanceof MockEndpoint ) { MockEndpoint mockEndpoint = ( MockEndpoint ) endpoint ; mockEndpoint . assertIsSatisfied ( ) ; } } } public static void expectsMessageCount ( int count , MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { MockEndpoint . expectsMessageCount ( count ) ; } } public List < Exchange > getExchanges ( ) { return getReceivedExchanges ( ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "You cannot consume from this endpoint" ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) { onExchange ( exchange ) ; } } ; } public void reset ( ) { init ( ) ; } public void whenExchangeReceived ( int index , Processor processor ) { this . processors . put ( index , processor ) ; } public void whenAnyExchangeReceived ( Processor processor ) { this . defaultProcessor = processor ; } public void assertIsSatisfied ( ) throws InterruptedException { assertIsSatisfied ( sleepForEmptyTest ) ; } public void assertIsSatisfied ( long timeoutForEmptyEndpoints ) throws InterruptedException { LOG . info ( "Asserting: " + this + " is satisfied" ) ; if ( expectedCount >= 0 ) { if ( expectedCount != getReceivedCounter ( ) ) { if ( expectedCount == 0 ) { if ( timeoutForEmptyEndpoints > 0 ) { LOG . debug ( "Sleeping for: " + timeoutForEmptyEndpoints + " millis to check there really are no messages received" ) ; Thread . sleep ( timeoutForEmptyEndpoints ) ; } } else { waitForCompleteLatch ( ) ; } } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedMinimumCount > 0 && getReceivedCounter ( ) < expectedMinimumCount ) { waitForCompleteLatch ( ) ; } if ( expectedMinimumCount >= 0 ) { int receivedCounter = getReceivedCounter ( ) ; assertTrue ( "Received message count " + receivedCounter + ", expected at least " + expectedCount , expectedCount <= receivedCounter ) ; } for ( Runnable test : tests ) { test . run ( ) ; } for ( Throwable failure : failures ) { if ( failure != null ) { LOG . error ( "Caught on " + getEndpointUri ( ) + " Exception: " + failure , failure ) ; fail ( "Failed due to caught exception: " + failure ) ; } } } public void assertIsNotSatisfied ( ) throws InterruptedException { try { assertIsSatisfied ( ) ; fail ( "Expected assertion failure!" ) ; } catch ( AssertionError e ) { LOG . info ( "Caught expected failure: " + e ) ; } } public void expectedMessageCount ( int expectedCount ) { setExpectedMessageCount ( expectedCount ) ; } public void expectedMinimumMessageCount ( int expectedCount ) { setMinimumExpectedMessageCount ( expectedCount ) ; } public void expectedHeaderReceived ( String name , String value ) { this . headerName = name ; this . headerValue = value ; expects ( new Runnable ( ) { public void run ( ) { assertTrue ( "No header with name " + headerName + " found." , actualHeader != null ) ; assertEquals ( "Header of message" , headerValue , actualHeader ) ; } } ) ; } public void expectedBodiesReceived ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; Object actualBody = actualBodyValues . get ( i ) ; assertEquals ( "Body of message: " + i , expectedBody , actualBody ) ; } } } ) ; } public void expectedBodiesReceived ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; bodyList . addAll ( Arrays . asList ( bodies ) ) ; expectedBodiesReceived ( bodyList ) ; } public void expectsAscending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesAscending ( expression ) ; } } ) ; } public void expectsDescending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesDescending ( expression ) ; } } ) ; } public void expectsNoDuplicates ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertNoDuplicates ( expression ) ; } } ) ; } public void assertMessagesAscending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , true ) ; } public void assertMessagesDescending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , false ) ; } protected void assertMessagesSorted ( Expression < Exchange > expression , boolean ascending ) { String type = ascending ? "ascending" : "descending" ; ExpressionComparator comparator = new ExpressionComparator ( expression ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 1 ; i < list . size ( ) ; i ++ ) { int j = i - 1 ; Exchange e1 = list . get ( j ) ; Exchange e2 = list . get ( i ) ; int result = comparator . compare ( e1 , e2 ) ; if ( result == 0 ) { fail ( "Messages not " + type + ". Messages" + j + " and " + i + " are equal with value: " + expression . evaluate ( e1 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { if ( ! ascending ) { result = result * - 1 ; } if ( result > 0 ) { fail ( "Messages not " + type + ". Message " + j + " has value: " + expression . evaluate ( e1 ) + " and message " + i + " has value: " + expression . evaluate ( e2 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } } } } public void assertNoDuplicates ( Expression < Exchange > expression ) { Map < Object , Exchange > map = new HashMap < Object , Exchange > ( ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Exchange e2 = list . get ( i ) ; Object key = expression . evaluate ( e2 ) ; Exchange e1 = map . get ( key ) ; if ( e1 != null ) { fail ( "Duplicate message found on message " + i + " has value: " + key + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { map . put ( key , e2 ) ; } } } public void expects ( Runnable runnable ) { tests . add ( runnable ) ; } public AssertionClause message ( final int messageIndex ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { applyAssertionOn ( MockEndpoint . this , messageIndex , assertExchangeReceived ( messageIndex ) ) ; } } ; expects ( clause ) ; return clause ; } public AssertionClause allMessages ( ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { applyAssertionOn ( MockEndpoint . this , index ++ , exchange ) ; } } } ; expects ( clause ) ; return clause ; } public Exchange assertExchangeReceived ( int index ) { int count = getReceivedCounter ( ) ; assertTrue ( "Not enough messages received. Was: " + count , count > index ) ; return getReceivedExchanges ( ) . get ( index ) ; } public List < Throwable > getFailures ( ) { return failures ; } public int getReceivedCounter ( ) { return getReceivedExchanges ( ) . size ( ) ; } public List < Exchange > getReceivedExchanges ( ) { return receivedExchanges ; } public int getExpectedCount ( ) { return expectedCount ; } public long getSleepForEmptyTest ( ) { return sleepForEmptyTest ; } public void setSleepForEmptyTest ( long sleepForEmptyTest ) { this . sleepForEmptyTest = sleepForEmptyTest ; } public long getResultWaitTime ( ) { return resultWaitTime ; } public void setResultWaitTime ( long resultWaitTime ) { this . resultWaitTime = resultWaitTime ; } public void setExpectedMessageCount ( int expectedCount ) { this . expectedCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedCount ) ; } } public void setMinimumExpectedMessageCount ( int expectedCount ) { this . expectedMinimumCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedMinimumCount ) ; } } public Processor getReporter ( ) { return reporter ; } public void setReporter ( Processor reporter ) { this . reporter = reporter ; } private void init ( ) { expectedCount = - 1 ; counter = 0 ; processors = new HashMap < Integer , Processor > ( ) ; receivedExchanges = new CopyOnWriteArrayList < Exchange > ( ) ; failures = new CopyOnWriteArrayList < Throwable > ( ) ; tests = new CopyOnWriteArrayList < Runnable > ( ) ; latch = null ; sleepForEmptyTest = 1000L ; resultWaitTime = 20000L ; expectedMinimumCount = - 1 ; expectedBodyValues = null ; actualBodyValues = new ArrayList ( ) ; } protected synchronized void onExchange ( Exchange exchange ) { try { if ( reporter != null ) { reporter . process ( exchange ) ; } performAssertions ( exchange ) ; } catch ( Throwable e ) { failures . add ( e ) ; } if ( latch != null ) { latch . countDown ( ) ; } } protected void performAssertions ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object actualBody = in . getBody ( ) ; if ( headerName != null ) { actualHeader = in . getHeader ( headerName ) ; } if ( expectedBodyValues != null ) { int index = actualBodyValues . size ( ) ; if ( expectedBodyValues . size ( ) > index ) { Object expectedBody = expectedBodyValues . get ( index ) ; if ( expectedBody != null ) { actualBody = in . getBody ( expectedBody . getClass ( ) ) ; } actualBodyValues . add ( actualBody ) ; } } LOG . debug ( getEndpointUri ( ) + " >>>> " + ( ++ counter ) + " : " + exchange + " with body: " + actualBody ) ; receivedExchanges . add ( exchange ) ; Processor processor = processors . get ( getReceivedCounter ( ) ) != null ? processors . get ( getReceivedCounter ( ) ) : defaultProcessor ; if ( processor != null ) { processor . process ( exchange ) ; } } protected void waitForCompleteLatch ( ) throws InterruptedException { if ( latch == null ) { fail ( "Should have a latch!" ) ; } LOG . debug ( "Waiting on the latch for: " + resultWaitTime + " millis" ) ; latch . await ( resultWaitTime , TimeUnit . MILLISECONDS ) ; } protected void assertEquals ( String message , Object expectedValue , Object actualValue ) { if ( ! ObjectHelper . equal ( expectedValue , actualValue ) ) { fail ( message + ". Expected: <" + expectedValue + "> but was: <" + actualValue + ">" ) ; } } protected void assertTrue ( String message , boolean predicate ) { if ( ! predicate ) { fail ( message ) ; } } protected void fail ( Object message ) { if ( LOG . isDebugEnabled ( ) ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { LOG . debug ( "Received[" + ( ++ index ) + "]: " + exchange ) ; } } throw new AssertionError ( getEndpointUri ( ) + " " + message ) ; } public int getExpectedMinimumCount ( ) { return expectedMinimumCount ; } public void await ( ) throws InterruptedException { if ( latch != null ) { latch . await ( ) ; } } public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { if ( latch != null ) { return latch . await ( timeout , unit ) ; } return true ; } public boolean isSingleton ( ) { return true ; } } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; @ XmlRootElement ( name = "xmlBeans" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class XMLBeansDataFormat extends DataFormatType { @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public XMLBeansDataFormat ( ) { super ( "org.apache.camel.converter.xmlbeans.XmlBeansDataFormat" ) ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . TransformProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "transform" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TransformType extends ExpressionNode { public TransformType ( ) { } public TransformType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Transform[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "transform" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; Processor childProcessor = routeContext . createProcessor ( this ) ; return new TransformProcessor ( expr , childProcessor ) ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . ConnectionFactory ; import javax . jms . Destination ; import javax . jms . ExceptionListener ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . MessageProducer ; import javax . jms . QueueSender ; import javax . jms . Session ; import javax . jms . TopicPublisher ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . PackageHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . task . TaskExecutor ; import org . springframework . jms . JmsException ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . JmsTemplate ; import org . springframework . jms . core . JmsTemplate102 ; import org . springframework . jms . core . MessageCreator ; import org . springframework . jms . core . SessionCallback ; import org . springframework . jms . listener . AbstractMessageListenerContainer ; import org . springframework . jms . listener . DefaultMessageListenerContainer ; import org . springframework . jms . listener . DefaultMessageListenerContainer102 ; import org . springframework . jms . listener . SimpleMessageListenerContainer ; import org . springframework . jms . listener . SimpleMessageListenerContainer102 ; import org . springframework . jms . listener . serversession . ServerSessionFactory ; import org . springframework . jms . listener . serversession . ServerSessionMessageListenerContainer ; import org . springframework . jms . listener . serversession . ServerSessionMessageListenerContainer102 ; import org . springframework . jms . support . JmsUtils ; import org . springframework . jms . support . converter . MessageConverter ; import org . springframework . jms . support . destination . DestinationResolver ; import org . springframework . transaction . PlatformTransactionManager ; import org . springframework . util . Assert ; import static org . apache . camel . util . ObjectHelper . removeStartingCharacters ; public class JmsConfiguration implements Cloneable { public static final String QUEUE_PREFIX = "queue:" ; public static final String TOPIC_PREFIX = "topic:" ; public static final String TEMP_QUEUE_PREFIX = "temp:queue:" ; public static final String TEMP_TOPIC_PREFIX = "temp:topic:" ; protected static final String TRANSACTED = "TRANSACTED" ; protected static final String CLIENT_ACKNOWLEDGE = "CLIENT_ACKNOWLEDGE" ; protected static final String AUTO_ACKNOWLEDGE = "AUTO_ACKNOWLEDGE" ; protected static final String DUPS_OK_ACKNOWLEDGE = "DUPS_OK_ACKNOWLEDGE" ; protected static final String REPLYTO_TEMP_DEST_AFFINITY_PER_COMPONENT = "component" ; protected static final String REPLYTO_TEMP_DEST_AFFINITY_PER_ENDPOINT = "endpoint" ; protected static final String REPLYTO_TEMP_DEST_AFFINITY_PER_PRODUCER = "producer" ; private static final transient Log LOG = LogFactory . getLog ( JmsConfiguration . class ) ; private JmsOperations jmsOperations ; private DestinationResolver destinationResolver ; private ConnectionFactory connectionFactory ; private ConnectionFactory templateConnectionFactory ; private ConnectionFactory listenerConnectionFactory ; private int acknowledgementMode = - 1 ; private String acknowledgementModeName ; private ExceptionListener exceptionListener ; private ConsumerType consumerType = ConsumerType . Default ; private boolean autoStartup = true ; private boolean acceptMessagesWhileStopping ; private String clientId ; private String durableSubscriptionName ; private boolean subscriptionDurable ; private boolean exposeListenerSession = true ; private TaskExecutor taskExecutor ; private boolean pubSubNoLocal ; private int concurrentConsumers = 1 ; private int maxMessagesPerTask = 1 ; private ServerSessionFactory serverSessionFactory ; private int cacheLevel = - 1 ; private String cacheLevelName ; private long recoveryInterval = - 1 ; private long receiveTimeout = - 1 ; private long requestTimeout = 20000L ; private int idleTaskExecutionLimit = 1 ; private int maxConcurrentConsumers = 1 ; private boolean useVersion102 ; private Boolean explicitQosEnabled ; private boolean deliveryPersistent = true ; private boolean replyToDeliveryPersistent = true ; private long timeToLive = - 1 ; private MessageConverter messageConverter ; private boolean messageIdEnabled = true ; private boolean messageTimestampEnabled = true ; private int priority = - 1 ; private boolean transacted ; private PlatformTransactionManager transactionManager ; private String transactionName ; private int transactionTimeout = - 1 ; private boolean preserveMessageQos ; private long requestMapPurgePollTimeMillis = 1000L ; private boolean disableReplyTo ; private boolean eagerLoadingOfProperties ; private boolean alwaysCopyMessage ; private boolean useMessageIDAsCorrelationID ; private JmsProviderMetadata providerMetadata = new JmsProviderMetadata ( ) ; private JmsOperations metadataJmsOperations ; private String replyToTempDestinationAffinity = REPLYTO_TEMP_DEST_AFFINITY_PER_ENDPOINT ; private String replyToDestination ; private String replyToDestinationSelectorName ; public JmsConfiguration ( ) { } public JmsConfiguration ( ConnectionFactory connectionFactory ) { this . connectionFactory = connectionFactory ; } public JmsConfiguration copy ( ) { try { return ( JmsConfiguration ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeCamelException ( e ) ; } } public static interface MessageSentCallback { void sent ( Message message ) ; } public static class CamelJmsTemplate extends JmsTemplate { private JmsConfiguration config ; public CamelJmsTemplate ( JmsConfiguration config , ConnectionFactory connectionFactory ) { super ( connectionFactory ) ; this . config = config ; } public void send ( final String destinationName , final MessageCreator messageCreator , final MessageSentCallback callback ) throws JmsException { execute ( new SessionCallback ( ) { public Object doInJms ( Session session ) throws JMSException { Destination destination = resolveDestinationName ( session , destinationName ) ; Assert . notNull ( messageCreator , "MessageCreator must not be null" ) ; MessageProducer producer = createProducer ( session , destination ) ; Message message = null ; try { message = messageCreator . createMessage ( session ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Sending created message: " + message ) ; } doSend ( producer , message ) ; if ( session . getTransacted ( ) && isSessionLocallyTransacted ( session ) ) { JmsUtils . commitIfNecessary ( session ) ; } } finally { JmsUtils . closeMessageProducer ( producer ) ; } if ( message != null && callback != null ) { callback . sent ( message ) ; } return null ; } } , false ) ; } @ Override protected void doSend ( MessageProducer producer , Message message ) throws JMSException { if ( config . isPreserveMessageQos ( ) ) { long ttl = message . getJMSExpiration ( ) ; if ( ttl != 0 ) { ttl = ttl - System . currentTimeMillis ( ) ; if ( ttl <= 0 ) { ttl = 1 ; } } producer . send ( message , message . getJMSDeliveryMode ( ) , message . getJMSPriority ( ) , ttl ) ; } else { super . doSend ( producer , message ) ; } } } public static class CamelJmsTeemplate102 extends JmsTemplate102 { private JmsConfiguration config ; public CamelJmsTeemplate102 ( JmsConfiguration config , ConnectionFactory connectionFactory , boolean pubSubDomain ) { super ( connectionFactory , pubSubDomain ) ; this . config = config ; } public void send ( final String destinationName , final MessageCreator messageCreator , final MessageSentCallback callback ) throws JmsException { execute ( new SessionCallback ( ) { public Object doInJms ( Session session ) throws JMSException { Destination destination = resolveDestinationName ( session , destinationName ) ; Assert . notNull ( messageCreator , "MessageCreator must not be null" ) ; MessageProducer producer = createProducer ( session , destination ) ; Message message = null ; try { message = messageCreator . createMessage ( session ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Sending created message: " + message ) ; } doSend ( producer , message ) ; if ( session . getTransacted ( ) && isSessionLocallyTransacted ( session ) ) { JmsUtils . commitIfNecessary ( session ) ; } } finally { JmsUtils . closeMessageProducer ( producer ) ; } if ( message != null && callback != null ) { callback . sent ( message ) ; } return null ; } } , false ) ; } @ Override protected void doSend ( MessageProducer producer , Message message ) throws JMSException { if ( config . isPreserveMessageQos ( ) ) { long ttl = message . getJMSExpiration ( ) ; if ( ttl != 0 ) { ttl = ttl - System . currentTimeMillis ( ) ; if ( ttl <= 0 ) { ttl = 1 ; } } if ( isPubSubDomain ( ) ) { ( ( TopicPublisher ) producer ) . publish ( message , message . getJMSDeliveryMode ( ) , message . getJMSPriority ( ) , ttl ) ; } else { ( ( QueueSender ) producer ) . send ( message , message . getJMSDeliveryMode ( ) , message . getJMSPriority ( ) , ttl ) ; } } else { super . doSend ( producer , message ) ; } } } public JmsOperations createInOutTemplate ( JmsEndpoint endpoint , boolean pubSubDomain , String destination , long requestTimeout ) { JmsOperations answer = createInOnlyTemplate ( endpoint , pubSubDomain , destination ) ; if ( answer instanceof JmsTemplate && requestTimeout > 0 ) { JmsTemplate jmsTemplate = ( JmsTemplate ) answer ; jmsTemplate . setExplicitQosEnabled ( true ) ; jmsTemplate . setTimeToLive ( requestTimeout ) ; } return answer ; } public JmsOperations createInOnlyTemplate ( JmsEndpoint endpoint , boolean pubSubDomain , String destination ) { if ( jmsOperations != null ) { return jmsOperations ; } ConnectionFactory factory = getTemplateConnectionFactory ( ) ; JmsTemplate template = useVersion102 ? new CamelJmsTeemplate102 ( this , factory , pubSubDomain ) : new CamelJmsTemplate ( this , factory ) ; template . setPubSubDomain ( pubSubDomain ) ; if ( destinationResolver != null ) { template . setDestinationResolver ( destinationResolver ) ; if ( endpoint instanceof DestinationEndpoint ) { LOG . debug ( "You are overloading the destinationResolver property on a DestinationEndpoint; are you sure you want to do that?" ) ; } } else if ( endpoint instanceof DestinationEndpoint ) { DestinationEndpoint destinationEndpoint = ( DestinationEndpoint ) endpoint ; template . setDestinationResolver ( createDestinationResolver ( destinationEndpoint ) ) ; } template . setDefaultDestinationName ( destination ) ; template . setExplicitQosEnabled ( isExplicitQosEnabled ( ) ) ; template . setDeliveryPersistent ( deliveryPersistent ) ; if ( messageConverter != null ) { template . setMessageConverter ( messageConverter ) ; } template . setMessageIdEnabled ( messageIdEnabled ) ; template . setMessageTimestampEnabled ( messageTimestampEnabled ) ; if ( priority >= 0 ) { template . setPriority ( priority ) ; } template . setPubSubNoLocal ( pubSubNoLocal ) ; if ( receiveTimeout >= 0 ) { template . setReceiveTimeout ( receiveTimeout ) ; } if ( timeToLive >= 0 ) { template . setTimeToLive ( timeToLive ) ; } template . setSessionTransacted ( transacted ) ; if ( transacted ) { template . setSessionAcknowledgeMode ( Session . SESSION_TRANSACTED ) ; } else { if ( acknowledgementMode >= 0 ) { template . setSessionAcknowledgeMode ( acknowledgementMode ) ; } else if ( acknowledgementModeName != null ) { template . setSessionAcknowledgeModeName ( acknowledgementModeName ) ; } } return template ; } public AbstractMessageListenerContainer createMessageListenerContainer ( JmsEndpoint endpoint ) { AbstractMessageListenerContainer container = chooseMessageListenerContainerImplementation ( ) ; configureMessageListenerContainer ( container , endpoint ) ; return container ; } public ConnectionFactory getConnectionFactory ( ) { if ( connectionFactory == null ) { connectionFactory = createConnectionFactory ( ) ; } return connectionFactory ; } public void setConnectionFactory ( ConnectionFactory connectionFactory ) { this . connectionFactory = connectionFactory ; } public ConnectionFactory getListenerConnectionFactory ( ) { if ( listenerConnectionFactory == null ) { listenerConnectionFactory = createListenerConnectionFactory ( ) ; } return listenerConnectionFactory ; } public void setListenerConnectionFactory ( ConnectionFactory listenerConnectionFactory ) { this . listenerConnectionFactory = listenerConnectionFactory ; } public ConnectionFactory getTemplateConnectionFactory ( ) { if ( templateConnectionFactory == null ) { templateConnectionFactory = createTemplateConnectionFactory ( ) ; } return templateConnectionFactory ; } public void setTemplateConnectionFactory ( ConnectionFactory templateConnectionFactory ) { this . templateConnectionFactory = templateConnectionFactory ; } public boolean isUseVersion102 ( ) { return useVersion102 ; } public void setUseVersion102 ( boolean useVersion102 ) { this . useVersion102 = useVersion102 ; } public boolean isAutoStartup ( ) { return autoStartup ; } public void setAutoStartup ( boolean autoStartup ) { this . autoStartup = autoStartup ; } public boolean isAcceptMessagesWhileStopping ( ) { return acceptMessagesWhileStopping ; } public void setAcceptMessagesWhileStopping ( boolean acceptMessagesWhileStopping ) { this . acceptMessagesWhileStopping = acceptMessagesWhileStopping ; } public String getClientId ( ) { return clientId ; } public void setClientId ( String consumerClientId ) { this . clientId = consumerClientId ; } public String getDurableSubscriptionName ( ) { return durableSubscriptionName ; } public void setDurableSubscriptionName ( String durableSubscriptionName ) { this . durableSubscriptionName = durableSubscriptionName ; } public ExceptionListener getExceptionListener ( ) { return exceptionListener ; } public void setExceptionListener ( ExceptionListener exceptionListener ) { this . exceptionListener = exceptionListener ; } public boolean isSubscriptionDurable ( ) { return subscriptionDurable ; } public void setSubscriptionDurable ( boolean subscriptionDurable ) { this . subscriptionDurable = subscriptionDurable ; } public String getAcknowledgementModeName ( ) { return acknowledgementModeName ; } public void setAcknowledgementModeName ( String consumerAcknowledgementMode ) { this . acknowledgementModeName = consumerAcknowledgementMode ; this . acknowledgementMode = - 1 ; } public boolean isExposeListenerSession ( ) { return exposeListenerSession ; } public void setExposeListenerSession ( boolean exposeListenerSession ) { this . exposeListenerSession = exposeListenerSession ; } public TaskExecutor getTaskExecutor ( ) { return taskExecutor ; } public void setTaskExecutor ( TaskExecutor taskExecutor ) { this . taskExecutor = taskExecutor ; } public boolean isPubSubNoLocal ( ) { return pubSubNoLocal ; } public void setPubSubNoLocal ( boolean pubSubNoLocal ) { this . pubSubNoLocal = pubSubNoLocal ; } public int getConcurrentConsumers ( ) { return concurrentConsumers ; } public void setConcurrentConsumers ( int concurrentConsumers ) { this . concurrentConsumers = concurrentConsumers ; } public int getMaxMessagesPerTask ( ) { return maxMessagesPerTask ; } public void setMaxMessagesPerTask ( int maxMessagesPerTask ) { this . maxMessagesPerTask = maxMessagesPerTask ; } public ServerSessionFactory getServerSessionFactory ( ) { return serverSessionFactory ; } public void setServerSessionFactory ( ServerSessionFactory serverSessionFactory ) { this . serverSessionFactory = serverSessionFactory ; } public int getCacheLevel ( ) { return cacheLevel ; } public void setCacheLevel ( int cacheLevel ) { this . cacheLevel = cacheLevel ; } public String getCacheLevelName ( ) { return cacheLevelName ; } public void setCacheLevelName ( String cacheName ) { this . cacheLevelName = cacheName ; } public long getRecoveryInterval ( ) { return recoveryInterval ; } public void setRecoveryInterval ( long recoveryInterval ) { this . recoveryInterval = recoveryInterval ; } public long getReceiveTimeout ( ) { return receiveTimeout ; } public void setReceiveTimeout ( long receiveTimeout ) { this . receiveTimeout = receiveTimeout ; } public PlatformTransactionManager getTransactionManager ( ) { return transactionManager ; } public void setTransactionManager ( PlatformTransactionManager transactionManager ) { this . transactionManager = transactionManager ; } public String getTransactionName ( ) { return transactionName ; } public void setTransactionName ( String transactionName ) { this . transactionName = transactionName ; } public int getTransactionTimeout ( ) { return transactionTimeout ; } public void setTransactionTimeout ( int transactionTimeout ) { this . transactionTimeout = transactionTimeout ; } public int getIdleTaskExecutionLimit ( ) { return idleTaskExecutionLimit ; } public void setIdleTaskExecutionLimit ( int idleTaskExecutionLimit ) { this . idleTaskExecutionLimit = idleTaskExecutionLimit ; } public int getMaxConcurrentConsumers ( ) { return maxConcurrentConsumers ; } public void setMaxConcurrentConsumers ( int maxConcurrentConsumers ) { this . maxConcurrentConsumers = maxConcurrentConsumers ; } public boolean isExplicitQosEnabled ( ) { return explicitQosEnabled != null ? explicitQosEnabled : false ; } public void setExplicitQosEnabled ( boolean explicitQosEnabled ) { this . explicitQosEnabled = explicitQosEnabled ; } public boolean isDeliveryPersistent ( ) { return deliveryPersistent ; } public void setDeliveryPersistent ( boolean deliveryPersistent ) { this . deliveryPersistent = deliveryPersistent ; configuredQoS ( ) ; } public boolean isReplyToDeliveryPersistent ( ) { return replyToDeliveryPersistent ; } public void setReplyToDeliveryPersistent ( boolean replyToDeliveryPersistent ) { this . replyToDeliveryPersistent = replyToDeliveryPersistent ; } public long getTimeToLive ( ) { return timeToLive ; } public void setTimeToLive ( long timeToLive ) { this . timeToLive = timeToLive ; configuredQoS ( ) ; } public MessageConverter getMessageConverter ( ) { return messageConverter ; } public void setMessageConverter ( MessageConverter messageConverter ) { this . messageConverter = messageConverter ; } public boolean isMessageIdEnabled ( ) { return messageIdEnabled ; } public void setMessageIdEnabled ( boolean messageIdEnabled ) { this . messageIdEnabled = messageIdEnabled ; } public boolean isMessageTimestampEnabled ( ) { return messageTimestampEnabled ; } public void setMessageTimestampEnabled ( boolean messageTimestampEnabled ) { this . messageTimestampEnabled = messageTimestampEnabled ; } public int getPriority ( ) { return priority ; } public void setPriority ( int priority ) { this . priority = priority ; configuredQoS ( ) ; } public ConsumerType getConsumerType ( ) { return consumerType ; } public void setConsumerType ( ConsumerType consumerType ) { this . consumerType = consumerType ; } public int getAcknowledgementMode ( ) { return acknowledgementMode ; } public void setAcknowledgementMode ( int consumerAcknowledgementMode ) { this . acknowledgementMode = consumerAcknowledgementMode ; this . acknowledgementModeName = null ; } public boolean isTransacted ( ) { return transacted ; } public void setTransacted ( boolean consumerTransacted ) { this . transacted = consumerTransacted ; } public boolean isEagerLoadingOfProperties ( ) { return eagerLoadingOfProperties ; } public void setEagerLoadingOfProperties ( boolean eagerLoadingOfProperties ) { this . eagerLoadingOfProperties = eagerLoadingOfProperties ; } public boolean isDisableReplyTo ( ) { return disableReplyTo ; } public void setDisableReplyTo ( boolean disableReplyTo ) { this . disableReplyTo = disableReplyTo ; } public void setPreserveMessageQos ( boolean preserveMessageQos ) { this . preserveMessageQos = preserveMessageQos ; } public JmsOperations getJmsOperations ( ) { return jmsOperations ; } public void setJmsOperations ( JmsOperations jmsOperations ) { this . jmsOperations = jmsOperations ; } public DestinationResolver getDestinationResolver ( ) { return destinationResolver ; } public void setDestinationResolver ( DestinationResolver destinationResolver ) { this . destinationResolver = destinationResolver ; } public long getRequestMapPurgePollTimeMillis ( ) { return requestMapPurgePollTimeMillis ; } public void setRequestMapPurgePollTimeMillis ( long requestMapPurgePollTimeMillis ) { this . requestMapPurgePollTimeMillis = requestMapPurgePollTimeMillis ; } public JmsProviderMetadata getProviderMetadata ( ) { return providerMetadata ; } public void setProviderMetadata ( JmsProviderMetadata providerMetadata ) { this . providerMetadata = providerMetadata ; } public JmsOperations getMetadataJmsOperations ( JmsEndpoint endpoint ) { if ( metadataJmsOperations == null ) { metadataJmsOperations = getJmsOperations ( ) ; if ( metadataJmsOperations == null ) { metadataJmsOperations = createInOnlyTemplate ( endpoint , false , null ) ; } } return metadataJmsOperations ; } public void setMetadataJmsOperations ( JmsOperations metadataJmsOperations ) { this . metadataJmsOperations = metadataJmsOperations ; } public static DestinationResolver createDestinationResolver ( final DestinationEndpoint destinationEndpoint ) { return new DestinationResolver ( ) { public Destination resolveDestinationName ( Session session , String destinationName , boolean pubSubDomain ) throws JMSException { return destinationEndpoint . getJmsDestination ( session ) ; } } ; } protected void configureMessageListenerContainer ( AbstractMessageListenerContainer container , JmsEndpoint endpoint ) { container . setConnectionFactory ( getListenerConnectionFactory ( ) ) ; if ( endpoint instanceof DestinationEndpoint ) { container . setDestinationResolver ( createDestinationResolver ( ( DestinationEndpoint ) endpoint ) ) ; } else if ( destinationResolver != null ) { container . setDestinationResolver ( destinationResolver ) ; } if ( autoStartup ) { container . setAutoStartup ( true ) ; } if ( clientId != null ) { container . setClientId ( clientId ) ; } container . setSubscriptionDurable ( subscriptionDurable ) ; if ( durableSubscriptionName != null ) { container . setDurableSubscriptionName ( durableSubscriptionName ) ; } if ( durableSubscriptionName != null && clientId != null ) { container . setSubscriptionDurable ( true ) ; } if ( exceptionListener != null ) { container . setExceptionListener ( exceptionListener ) ; } container . setAcceptMessagesWhileStopping ( acceptMessagesWhileStopping ) ; container . setExposeListenerSession ( exposeListenerSession ) ; container . setSessionTransacted ( transacted ) ; if ( transacted ) { container . setSessionAcknowledgeMode ( Session . SESSION_TRANSACTED ) ; } else { if ( acknowledgementMode >= 0 ) { container . setSessionAcknowledgeMode ( acknowledgementMode ) ; } else if ( acknowledgementModeName != null ) { container . setSessionAcknowledgeModeName ( acknowledgementModeName ) ; } } if ( endpoint . getSelector ( ) != null && endpoint . getSelector ( ) . length ( ) != 0 ) { container . setMessageSelector ( endpoint . getSelector ( ) ) ; } if ( container instanceof DefaultMessageListenerContainer ) { DefaultMessageListenerContainer listenerContainer = ( DefaultMessageListenerContainer ) container ; if ( concurrentConsumers >= 0 ) { listenerContainer . setConcurrentConsumers ( concurrentConsumers ) ; } if ( cacheLevel >= 0 ) { listenerContainer . setCacheLevel ( cacheLevel ) ; } else if ( cacheLevelName != null ) { listenerContainer . setCacheLevelName ( cacheLevelName ) ; } else { listenerContainer . setCacheLevel ( defaultCacheLevel ( endpoint ) ) ; } if ( idleTaskExecutionLimit >= 0 ) { listenerContainer . setIdleTaskExecutionLimit ( idleTaskExecutionLimit ) ; } if ( maxConcurrentConsumers >= 0 ) { listenerContainer . setMaxConcurrentConsumers ( maxConcurrentConsumers ) ; } if ( maxMessagesPerTask >= 0 ) { listenerContainer . setMaxMessagesPerTask ( maxMessagesPerTask ) ; } listenerContainer . setPubSubNoLocal ( pubSubNoLocal ) ; if ( receiveTimeout >= 0 ) { listenerContainer . setReceiveTimeout ( receiveTimeout ) ; } if ( recoveryInterval >= 0 ) { listenerContainer . setRecoveryInterval ( recoveryInterval ) ; } if ( taskExecutor != null ) { listenerContainer . setTaskExecutor ( taskExecutor ) ; } PlatformTransactionManager tm = getTransactionManager ( ) ; if ( tm != null ) { listenerContainer . setTransactionManager ( tm ) ; } else if ( transacted ) { throw new IllegalArgumentException ( "Property transacted is enabled but a transactionManager was not injected!" ) ; } if ( transactionName != null ) { listenerContainer . setTransactionName ( transactionName ) ; } if ( transactionTimeout >= 0 ) { listenerContainer . setTransactionTimeout ( transactionTimeout ) ; } } else if ( container instanceof ServerSessionMessageListenerContainer ) { ServerSessionMessageListenerContainer listenerContainer = ( ServerSessionMessageListenerContainer ) container ; if ( maxMessagesPerTask >= 0 ) { listenerContainer . setMaxMessagesPerTask ( maxMessagesPerTask ) ; } if ( serverSessionFactory != null ) { listenerContainer . setServerSessionFactory ( serverSessionFactory ) ; } } else if ( container instanceof SimpleMessageListenerContainer ) { SimpleMessageListenerContainer listenerContainer = ( SimpleMessageListenerContainer ) container ; if ( concurrentConsumers >= 0 ) { listenerContainer . setConcurrentConsumers ( concurrentConsumers ) ; } listenerContainer . setPubSubNoLocal ( pubSubNoLocal ) ; if ( taskExecutor != null ) { listenerContainer . setTaskExecutor ( taskExecutor ) ; } } } public void configure ( EndpointMessageListener listener ) { if ( isDisableReplyTo ( ) ) { listener . setDisableReplyTo ( true ) ; } if ( isEagerLoadingOfProperties ( ) ) { listener . setEagerLoadingOfProperties ( true ) ; } JmsOperations operations = listener . getTemplate ( ) ; if ( operations instanceof JmsTemplate ) { JmsTemplate template = ( JmsTemplate ) operations ; template . setDeliveryPersistent ( isReplyToDeliveryPersistent ( ) ) ; } } public AbstractMessageListenerContainer chooseMessageListenerContainerImplementation ( ) { switch ( consumerType ) { case Simple : return isUseVersion102 ( ) ? new SimpleMessageListenerContainer102 ( ) : new SimpleMessageListenerContainer ( ) ; case ServerSessionPool : return isUseVersion102 ( ) ? new ServerSessionMessageListenerContainer102 ( ) : new ServerSessionMessageListenerContainer ( ) ; case Default : return isUseVersion102 ( ) ? new DefaultMessageListenerContainer102 ( ) : new DefaultMessageListenerContainer ( ) ; default : throw new IllegalArgumentException ( "Unknown consumer type: " + consumerType ) ; } } protected int defaultCacheLevel ( JmsEndpoint endpoint ) { if ( PackageHelper . isValidVersion ( "org.springframework.jms" , 2.51D ) ) { return DefaultMessageListenerContainer . CACHE_CONSUMER ; } else { if ( endpoint . isPubSubDomain ( ) && ! isSubscriptionDurable ( ) ) { return DefaultMessageListenerContainer . CACHE_CONSUMER ; } else { return DefaultMessageListenerContainer . CACHE_CONNECTION ; } } } protected ConnectionFactory createConnectionFactory ( ) { ObjectHelper . notNull ( connectionFactory , "connectionFactory" ) ; return null ; } protected ConnectionFactory createListenerConnectionFactory ( ) { return getConnectionFactory ( ) ; } protected ConnectionFactory createTemplateConnectionFactory ( ) { return getConnectionFactory ( ) ; } public boolean isPreserveMessageQos ( ) { return preserveMessageQos ; } protected void configuredQoS ( ) { if ( explicitQosEnabled == null ) { explicitQosEnabled = true ; } } public boolean isAlwaysCopyMessage ( ) { return alwaysCopyMessage ; } public void setAlwaysCopyMessage ( boolean alwaysCopyMessage ) { this . alwaysCopyMessage = alwaysCopyMessage ; } public boolean isUseMessageIDAsCorrelationID ( ) { return useMessageIDAsCorrelationID ; } public void setUseMessageIDAsCorrelationID ( boolean useMessageIDAsCorrelationID ) { this . useMessageIDAsCorrelationID = useMessageIDAsCorrelationID ; } public String getReplyToTempDestinationAffinity ( ) { return replyToTempDestinationAffinity ; } public void setReplyToTempDestinationAffinity ( String replyToTempDestinationAffinity ) { this . replyToTempDestinationAffinity = replyToTempDestinationAffinity ; } public long getRequestTimeout ( ) { return requestTimeout ; } public void setRequestTimeout ( long requestTimeout ) { this . requestTimeout = requestTimeout ; } public String getReplyTo ( ) { return replyToDestination ; } public void setReplyTo ( String replyToDestination ) { if ( ! replyToDestination . startsWith ( QUEUE_PREFIX ) ) { throw new IllegalArgumentException ( "ReplyTo destination value has to be of type queue; " + "e.g: \"queue:replyQueue\"" ) ; } this . replyToDestination = removeStartingCharacters ( replyToDestination . substring ( QUEUE_PREFIX . length ( ) ) , '/' ) ; } public String getReplyToDestinationSelectorName ( ) { return replyToDestinationSelectorName ; } public void setReplyToDestinationSelectorName ( String replyToDestinationSelectorName ) { this . replyToDestinationSelectorName = replyToDestinationSelectorName ; if ( replyToDestinationSelectorName != null ) { setAlwaysCopyMessage ( true ) ; } } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . nio . ByteBuffer ; import org . apache . camel . Converter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class NIOConverter { private static final transient Log LOG = LogFactory . getLog ( NIOConverter . class ) ; private NIOConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { return buffer . array ( ) ; } @ Converter public static String toString ( ByteBuffer buffer ) { return IOConverter . toString ( buffer . array ( ) ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; } @ Converter public static ByteBuffer toByteBuffer ( File file ) throws IOException { InputStream in = null ; try { byte [ ] buf = new byte [ ( int ) file . length ( ) ] ; in = new BufferedInputStream ( new FileInputStream ( file ) ) ; int sizeLeft = ( int ) file . length ( ) ; int offset = 0 ; while ( sizeLeft > 0 ) { int readSize = in . read ( buf , offset , sizeLeft ) ; sizeLeft -= readSize ; offset += readSize ; } return ByteBuffer . wrap ( buf ) ; } finally { try { if ( in != null ) { in . close ( ) ; } } catch ( IOException e ) { LOG . warn ( "Failed to close file stream: " + file . getPath ( ) , e ) ; } } } @ Converter public static ByteBuffer toByteBuffer ( String value ) { ByteBuffer buf = ByteBuffer . allocate ( value . length ( ) ) ; byte [ ] bytes = value . getBytes ( ) ; buf . put ( bytes ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Short value ) { ByteBuffer buf = ByteBuffer . allocate ( 2 ) ; buf . putShort ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Integer value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Long value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putLong ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Float value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putFloat ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Double value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putDouble ( value ) ; return buf ; } @ Converter public static InputStream toInputStream ( ByteBuffer bufferbuffer ) { return IOConverter . toInputStream ( toByteArray ( bufferbuffer ) ) ; } } 	1
package org . apache . camel . component . timer ; import java . util . Date ; import java . util . Timer ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultEndpoint ; public class TimerEndpoint extends DefaultEndpoint < Exchange > { private String timerName ; private Date time ; private long period = 1000 ; private long delay ; private boolean fixedRate ; private boolean daemon = true ; private Timer timer ; public TimerEndpoint ( String fullURI , TimerComponent component , String timerName ) { super ( fullURI , component ) ; this . timer = component . getTimer ( this ) ; this . timerName = timerName ; } public TimerEndpoint ( String endpointUri , Timer timer ) { this ( endpointUri ) ; this . timer = timer ; } public TimerEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < Exchange > createProducer ( ) throws Exception { throw new RuntimeCamelException ( "Cannot produce to a TimerEndpoint: " + getEndpointUri ( ) ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { return new TimerConsumer ( this , processor ) ; } public String getTimerName ( ) { if ( timerName == null ) { timerName = getEndpointUri ( ) ; } return timerName ; } public void setTimerName ( String timerName ) { this . timerName = timerName ; } public boolean isDaemon ( ) { return daemon ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } public boolean isFixedRate ( ) { return fixedRate ; } public void setFixedRate ( boolean fixedRate ) { this . fixedRate = fixedRate ; } public long getPeriod ( ) { return period ; } public void setPeriod ( long period ) { this . period = period ; } public Date getTime ( ) { return time ; } public void setTime ( Date time ) { this . time = time ; } public boolean isSingleton ( ) { return true ; } public Timer getTimer ( ) { if ( timer == null ) { timer = new Timer ( ) ; } return timer ; } public void setTimer ( Timer timer ) { this . timer = timer ; } } 	0
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ObjectHelper ; public class Namespaces { public static final String DEFAULT_NAMESPACE = "http://activemq.apache.org/camel/schema/spring" ; public static final String IN_NAMESPACE = "http://camel.apache.org/xml/in/" ; public static final String OUT_NAMESPACE = "http://camel.apache.org/xml/out/" ; public static final String SYSTEM_PROPERTIES_NAMESPACE = "http://camel.apache.org/xml/variables/system-properties" ; public static final String ENVIRONMENT_VARIABLES = "http://camel.apache.org/xml/variables/environment-variables" ; public static final String EXCHANGE_PROPERTY = "http://camel.apache.org/xml/variables/exchange-property" ; private Map < String , String > namespaces = new HashMap < String , String > ( ) ; public Namespaces ( Element element ) { add ( element ) ; } public Namespaces ( String prefix , String uri ) { add ( prefix , uri ) ; } public static boolean isMatchingNamespaceOrEmptyNamespace ( String namespaceURI , String expectedNamespace ) { return ObjectHelper . isNullOrBlank ( namespaceURI ) || namespaceURI . equals ( expectedNamespace ) ; } public Namespaces add ( String prefix , String uri ) { namespaces . put ( prefix , uri ) ; return this ; } public Namespaces add ( Element element ) { Node parentNode = element . getParentNode ( ) ; if ( parentNode instanceof org . w3c . dom . Element ) { add ( ( Element ) parentNode ) ; } NamedNodeMap attributes = element . getAttributes ( ) ; int size = attributes . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Attr node = ( Attr ) attributes . item ( i ) ; String name = node . getName ( ) ; if ( name . startsWith ( "xmlns:" ) ) { String prefix = name . substring ( "xmlns:" . length ( ) ) ; String uri = node . getValue ( ) ; add ( prefix , uri ) ; } } return this ; } public XPathExpression xpath ( String expression ) { XPathExpression answer = new XPathExpression ( expression ) ; configure ( answer ) ; return answer ; } public XPathExpression xpath ( String expression , Class < ? > resultType ) { XPathExpression answer = xpath ( expression ) ; answer . setResultType ( resultType ) ; return answer ; } public XQueryExpression xquery ( String expression ) { XQueryExpression answer = new XQueryExpression ( expression ) ; configure ( answer ) ; return answer ; } public XQueryExpression xquery ( String expression , Class < ? > resultType ) { XQueryExpression answer = new XQueryExpression ( expression ) ; answer . setResultType ( resultType ) ; configure ( answer ) ; return answer ; } public Map < String , String > getNamespaces ( ) { return namespaces ; } public void configure ( NamespaceAware namespaceAware ) { namespaceAware . setNamespaces ( getNamespaces ( ) ) ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlRootElement ( name = "xquery" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class XQueryExpression extends NamespaceAwareExpression { private static final transient Log LOG = LogFactory . getLog ( XQueryExpression . class ) ; @ XmlAttribute ( required = false ) private String type ; @ XmlTransient private Class resultType ; public XQueryExpression ( ) { } public XQueryExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "xquery" ; } public String getType ( ) { return type ; } public void setType ( String type ) { this . type = type ; } public Class getResultType ( ) { return resultType ; } public void setResultType ( Class resultType ) { this . resultType = resultType ; } @ Override protected void configureExpression ( RouteContext routeContext , Expression expression ) { super . configureExpression ( routeContext , expression ) ; updateResultType ( ) ; if ( resultType != null ) { setProperty ( expression , "resultType" , resultType ) ; } } @ Override protected void configurePredicate ( RouteContext routeContext , Predicate predicate ) { super . configurePredicate ( routeContext , predicate ) ; updateResultType ( ) ; if ( resultType != null ) { setProperty ( predicate , "resultType" , resultType ) ; } } private void updateResultType ( ) { if ( resultType == null && type != null ) { try { resultType = Class . forName ( type ) ; } catch ( ClassNotFoundException e ) { LOG . error ( "ClassNotFoundException creating class: " + type ) ; } } } } 	0
package org . apache . camel . language . bean ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class BeanLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { ObjectHelper . notNull ( expression , "expression" ) ; int idx = expression . lastIndexOf ( '.' ) ; String beanName = expression ; String method = null ; if ( idx > 0 ) { beanName = expression . substring ( 0 , idx ) ; method = expression . substring ( idx + 1 ) ; } return new BeanExpression ( beanName , method ) ; } } 	1
package org . apache . camel . component . test ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Service ; import org . apache . camel . component . mock . MockEndpoint ; import org . apache . camel . util . EndpointHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TestEndpoint extends MockEndpoint implements Service { private static final transient Log LOG = LogFactory . getLog ( TestEndpoint . class ) ; private final Endpoint expectedMessageEndpoint ; private long timeout = 2000L ; public TestEndpoint ( String endpointUri , Component component , Endpoint expectedMessageEndpoint ) { super ( endpointUri , component ) ; this . expectedMessageEndpoint = expectedMessageEndpoint ; } public TestEndpoint ( String endpointUri , Endpoint expectedMessageEndpoint ) { super ( endpointUri ) ; this . expectedMessageEndpoint = expectedMessageEndpoint ; } public void start ( ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Consuming expected messages from: " + expectedMessageEndpoint ) ; } final List expectedBodies = new ArrayList ( ) ; EndpointHelper . pollEndpoint ( expectedMessageEndpoint , new Processor ( ) { public void process ( Exchange exchange ) throws Exception { Object body = getInBody ( exchange ) ; expectedBodies . add ( body ) ; } } , timeout ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Received: " + expectedBodies . size ( ) + " expected message(s) from: " + expectedMessageEndpoint ) ; } expectedBodiesReceived ( expectedBodies ) ; } public void stop ( ) throws Exception { } protected Object getInBody ( Exchange exchange ) { return exchange . getIn ( ) . getBody ( ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . PredicateAggregationCollection ; public class Aggregator extends BatchProcessor { private Predicate aggregationCompletedPredicate ; public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy ) { this ( endpoint , processor , new AggregationCollection ( correlationExpression , aggregationStrategy ) ) ; } public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { this ( endpoint , processor , new PredicateAggregationCollection ( correlationExpression , aggregationStrategy , aggregationCompletedPredicate ) ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } public Aggregator ( Endpoint endpoint , Processor processor , AggregationCollection collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Aggregator[to: " + getProcessor ( ) + "]" ; } @ Override protected boolean isBatchCompleted ( int index ) { if ( aggregationCompletedPredicate != null ) { if ( getCollection ( ) . size ( ) > 0 ) { return true ; } } return super . isBatchCompleted ( index ) ; } } 	1
package org . apache . camel . component . jhc ; import java . util . HashMap ; import java . util . Map ; import org . apache . http . params . HttpParams ; public final class JhcServerEngineFactory { private static Map < Integer , JhcServerEngine > portMap = new HashMap < Integer , JhcServerEngine > ( ) ; private JhcServerEngineFactory ( ) { } public static synchronized JhcServerEngine getJhcServerEngine ( final HttpParams params , final int port , final String protocol ) { JhcServerEngine engine = portMap . get ( port ) ; if ( engine == null ) { engine = new JhcServerEngine ( params , port , protocol . trim ( ) ) ; portMap . put ( port , engine ) ; } else { if ( ! engine . getProtocol ( ) . equals ( protocol . trim ( ) ) ) { throw new IllegalArgumentException ( "Jhc protocol error, the engine's protocol is " + engine . getProtocol ( ) + " you want is " + protocol ) ; } } return engine ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; public class HandleFaultProcessor extends DelegateProcessor { @ Override public void process ( Exchange exchange ) throws Exception { super . process ( exchange ) ; final Message faultMessage = exchange . getFault ( false ) ; if ( faultMessage != null ) { final Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { if ( faultBody instanceof Throwable ) { exchange . setException ( ( Throwable ) faultBody ) ; } else { exchange . setException ( new CamelException ( "Message contains fault of type " + faultBody . getClass ( ) . getName ( ) + ":\n" + faultBody ) ) ; } } } } } 	1
package org . apache . camel . builder . script ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; public class ScriptLanguage implements Language { private final String language ; public ScriptLanguage ( String language ) { this . language = language ; } public Predicate < Exchange > createPredicate ( String expression ) { return new ScriptBuilder ( language , expression ) ; } public Expression < Exchange > createExpression ( String expression ) { return new ScriptBuilder ( language , expression ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "proceed" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProceedType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "proceed" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	1
package org . apache . camel . component . http ; import java . net . URI ; import java . net . URISyntaxException ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultPollingEndpoint ; import org . apache . commons . httpclient . HttpClient ; import org . apache . commons . httpclient . HttpConnectionManager ; import org . apache . commons . httpclient . params . HttpClientParams ; public class HttpEndpoint extends DefaultPollingEndpoint < HttpExchange > { private HttpBinding binding ; private HttpComponent component ; private URI httpUri ; private HttpClientParams clientParams ; private HttpClientConfigurer httpClientConfigurer ; private HttpConnectionManager httpConnectionManager ; public HttpEndpoint ( String endPointURI , HttpComponent component , URI httpURI , HttpConnectionManager httpConnectionManager ) throws URISyntaxException { this ( endPointURI , component , httpURI , new HttpClientParams ( ) , httpConnectionManager , null ) ; } public HttpEndpoint ( String endPointURI , HttpComponent component , URI httpURI , HttpClientParams clientParams , HttpConnectionManager httpConnectionManager , HttpClientConfigurer clientConfigurer ) throws URISyntaxException { super ( endPointURI , component ) ; this . component = component ; this . httpUri = httpURI ; this . clientParams = clientParams ; this . httpClientConfigurer = clientConfigurer ; this . httpConnectionManager = httpConnectionManager ; } public Producer < HttpExchange > createProducer ( ) throws Exception { return new HttpProducer ( this ) ; } @ Override public PollingConsumer < HttpExchange > createPollingConsumer ( ) throws Exception { return new HttpPollingConsumer ( this ) ; } public HttpExchange createExchange ( ExchangePattern pattern ) { return new HttpExchange ( this , pattern ) ; } public HttpExchange createExchange ( HttpServletRequest request , HttpServletResponse response ) { return new HttpExchange ( this , request , response ) ; } public HttpClient createHttpClient ( ) { HttpClient answer = new HttpClient ( getClientParams ( ) ) ; answer . setHttpConnectionManager ( httpConnectionManager ) ; HttpClientConfigurer configurer = getHttpClientConfigurer ( ) ; if ( configurer != null ) { configurer . configureHttpClient ( answer ) ; } return answer ; } public void connect ( HttpConsumer consumer ) throws Exception { component . connect ( consumer ) ; } public void disconnect ( HttpConsumer consumer ) throws Exception { component . disconnect ( consumer ) ; } public HttpClientParams getClientParams ( ) { return clientParams ; } public void setClientParams ( HttpClientParams clientParams ) { this . clientParams = clientParams ; } public HttpClientConfigurer getHttpClientConfigurer ( ) { return httpClientConfigurer ; } public void setHttpClientConfigurer ( HttpClientConfigurer httpClientConfigurer ) { this . httpClientConfigurer = httpClientConfigurer ; } public HttpBinding getBinding ( ) { if ( binding == null ) { binding = new HttpBinding ( ) ; } return binding ; } public void setBinding ( HttpBinding binding ) { this . binding = binding ; } public boolean isSingleton ( ) { return true ; } public String getPath ( ) { return httpUri . getPath ( ) ; } public int getPort ( ) { if ( httpUri . getPort ( ) == - 1 ) { if ( "https" . equals ( getProtocol ( ) ) ) { return 443 ; } else { return 80 ; } } return httpUri . getPort ( ) ; } public String getProtocol ( ) { return httpUri . getScheme ( ) ; } public URI getHttpUri ( ) { return httpUri ; } } 	0
package org . apache . camel . processor . aggregate ; import org . apache . camel . Exchange ; public class UseLatestAggregationStrategy implements AggregationStrategy { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { return newExchange ; } } 	1
package org . apache . camel ; public class RuntimeExchangeException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final Exchange exchange ; public RuntimeExchangeException ( String message , Exchange exchange ) { super ( message + " on the exchange: " + exchange ) ; this . exchange = exchange ; } public RuntimeExchangeException ( Exception e , Exchange exchange ) { super ( e . getMessage ( ) , e ) ; this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public final class ProcessorBuilder { private ProcessorBuilder ( ) { } public static Processor setBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setBody(" + expression + ")" ; } } ; } public static Processor setOutBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setOutBody(" + expression + ")" ; } } ; } public static Processor setFaultBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setFaultBody(" + expression + ")" ; } } ; } public static Processor setHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setOutHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setOutHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setFaultHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setFaultHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setProperty ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . setProperty ( name , value ) ; } @ Override public String toString ( ) { return "setProperty(" + name + ", " + expression + ")" ; } } ; } public static Processor removeHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getIn ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeHeader(" + name + ")" ; } } ; } public static Processor removeOutHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { out . removeHeader ( name ) ; } } @ Override public String toString ( ) { return "removeOutHeader(" + name + ")" ; } } ; } public static Processor removeFaultHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getFault ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeFaultHeader(" + name + ")" ; } } ; } public static Processor removeProperty ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . removeProperty ( name ) ; } @ Override public String toString ( ) { return "removeProperty(" + name + ")" ; } } ; } public static Processor throwException ( final Exception ex ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { throw ex ; } @ Override public String toString ( ) { return "throwException(" + ex . toString ( ) + ")" ; } } ; } } 	1
package org . apache . camel . builder . xml ; import javax . xml . transform . Result ; import org . apache . camel . Message ; public interface ResultHandler { Result getResult ( ) ; void setBody ( Message in ) ; } 	0
package org . apache . camel . builder ; import java . util . Map ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . model . ExpressionNode ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . MethodCallExpression ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; public class ExpressionClause < T > extends ExpressionType { private T result ; private String language ; public ExpressionClause ( T result ) { this . result = result ; } public static < T extends ExpressionNode > ExpressionClause < T > createAndSetExpression ( T result ) { ExpressionClause < T > clause = new ExpressionClause < T > ( result ) ; result . setExpression ( clause ) ; return clause ; } public T expression ( Expression expression ) { setExpressionValue ( expression ) ; return result ; } public T constant ( Object value ) { return expression ( ExpressionBuilder . constantExpression ( value ) ) ; } public T exchange ( ) { return expression ( ExpressionBuilder . exchangeExpression ( ) ) ; } public T inMessage ( ) { return expression ( ExpressionBuilder . inMessageExpression ( ) ) ; } public T outMessage ( ) { return expression ( ExpressionBuilder . outMessageExpression ( ) ) ; } public T body ( ) { return expression ( ExpressionBuilder . bodyExpression ( ) ) ; } public T body ( Class expectedType ) { return expression ( ExpressionBuilder . bodyExpression ( expectedType ) ) ; } public T outBody ( ) { return expression ( ExpressionBuilder . outBodyExpression ( ) ) ; } public T outBody ( Class expectedType ) { return expression ( ExpressionBuilder . outBodyExpression ( expectedType ) ) ; } public T header ( String name ) { return expression ( ExpressionBuilder . headerExpression ( name ) ) ; } public T headers ( ) { return expression ( ExpressionBuilder . headersExpression ( ) ) ; } public T outHeader ( String name ) { return expression ( ExpressionBuilder . outHeaderExpression ( name ) ) ; } public T outHeaders ( ) { return expression ( ExpressionBuilder . outHeadersExpression ( ) ) ; } public T property ( String name ) { return expression ( ExpressionBuilder . propertyExpression ( name ) ) ; } public T properties ( ) { return expression ( ExpressionBuilder . propertiesExpression ( ) ) ; } public T method ( String bean ) { MethodCallExpression expression = new MethodCallExpression ( bean ) ; setExpressionType ( expression ) ; return result ; } public T method ( String bean , String method ) { MethodCallExpression expression = new MethodCallExpression ( bean , method ) ; setExpressionType ( expression ) ; return result ; } public T el ( String text ) { return language ( "el" , text ) ; } public T groovy ( String text ) { return language ( "groovy" , text ) ; } public T javaScript ( String text ) { return language ( "js" , text ) ; } public T jxpath ( String text ) { return language ( "jxpath" , text ) ; } public T ognl ( String text ) { return language ( "ognl" , text ) ; } public T php ( String text ) { return language ( "php" , text ) ; } public T python ( String text ) { return language ( "python" , text ) ; } public T ruby ( String text ) { return language ( "ruby" , text ) ; } public T sql ( String text ) { return language ( "sql" , text ) ; } public T simple ( String text ) { return language ( "simple" , text ) ; } public T xpath ( String text ) { return language ( "xpath" , text ) ; } public T xpath ( String text , Class resultType ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Class resultType , Namespaces namespaces ) { return xpath ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Class resultType , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Namespaces namespaces ) { return xpath ( text , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text ) { return language ( "xquery" , text ) ; } public T xquery ( String text , Class resultType ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Class resultType , Namespaces namespaces ) { return xquery ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Class resultType , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Namespaces namespaces ) { return xquery ( text , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T language ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; return result ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import org . apache . http . HttpException ; import org . apache . http . HttpResponse ; public interface AsyncResponseHandler { void sendResponse ( HttpResponse response ) throws IOException , HttpException ; } 	0
package org . apache . camel . processor ; public enum LoggingLevel { DEBUG , ERROR , FATAL , INFO , TRACE , WARN } 	1
package org . apache . camel . component . cxf . transport . spring ; import org . apache . camel . component . cxf . transport . CamelDestination ; public class CamelDestinationDefinitionParser extends AbstractCamelContextBeanDefinitionParser { public CamelDestinationDefinitionParser ( ) { super ( ) ; setBeanClass ( CamelDestination . class ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . TryProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "try" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TryType extends OutputType < TryType > { @ XmlTransient private List < CatchType > catchClauses ; @ XmlTransient private FinallyType finallyClause ; @ XmlTransient private boolean initialized ; @ XmlTransient private List < ProcessorType < ? > > outputsWithoutCatches ; @ Override public String toString ( ) { return "Try[ " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "try" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor tryProcessor = createOutputsProcessor ( routeContext , getOutputsWithoutCatches ( ) ) ; Processor finallyProcessor = null ; if ( finallyClause != null ) { finallyProcessor = finallyClause . createProcessor ( routeContext ) ; } List < CatchProcessor > catchProcessors = new ArrayList < CatchProcessor > ( ) ; if ( catchClauses != null ) { for ( CatchType catchClause : catchClauses ) { catchProcessors . add ( catchClause . createProcessor ( routeContext ) ) ; } } return new TryProcessor ( tryProcessor , catchProcessors , finallyProcessor ) ; } public TryType handle ( Class < ? > exceptionType ) { popBlock ( ) ; CatchType answer = new CatchType ( exceptionType ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Deprecated public TryType handleAll ( ) { return finallyBlock ( ) ; } public TryType finallyBlock ( ) { popBlock ( ) ; FinallyType answer = new FinallyType ( ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Override public ProcessorType < ? extends ProcessorType > end ( ) { popBlock ( ) ; return super . end ( ) ; } public List < CatchType > getCatchClauses ( ) { if ( catchClauses == null ) { checkInitialized ( ) ; } return catchClauses ; } public FinallyType getFinallyClause ( ) { if ( finallyClause == null ) { checkInitialized ( ) ; } return finallyClause ; } public List < ProcessorType < ? > > getOutputsWithoutCatches ( ) { if ( outputsWithoutCatches == null ) { checkInitialized ( ) ; } return outputsWithoutCatches ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { initialized = false ; super . setOutputs ( outputs ) ; } @ Override public void addOutput ( ProcessorType output ) { initialized = false ; super . addOutput ( output ) ; } protected void checkInitialized ( ) { if ( ! initialized ) { initialized = true ; outputsWithoutCatches = new ArrayList < ProcessorType < ? > > ( ) ; catchClauses = new ArrayList < CatchType > ( ) ; finallyClause = null ; for ( ProcessorType output : outputs ) { if ( output instanceof CatchType ) { catchClauses . add ( ( CatchType ) output ) ; } else if ( output instanceof FinallyType ) { if ( finallyClause != null ) { throw new IllegalArgumentException ( "Multiple finally clauses added: " + finallyClause + " and " + output ) ; } else { finallyClause = ( FinallyType ) output ; } } else { outputsWithoutCatches . add ( output ) ; } } } } } 	1
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . util . BitSet ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class UnsafeUriCharactersEncoder { private static BitSet unsafeCharacters ; private static final transient Log LOG = LogFactory . getLog ( UnsafeUriCharactersEncoder . class ) ; private static final char [ ] HEX_DIGITS = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ; static { unsafeCharacters = new BitSet ( 256 ) ; unsafeCharacters . set ( ' ' ) ; unsafeCharacters . set ( '"' ) ; unsafeCharacters . set ( '<' ) ; unsafeCharacters . set ( '>' ) ; unsafeCharacters . set ( '#' ) ; unsafeCharacters . set ( '%' ) ; unsafeCharacters . set ( '{' ) ; unsafeCharacters . set ( '}' ) ; unsafeCharacters . set ( '|' ) ; unsafeCharacters . set ( '\\' ) ; unsafeCharacters . set ( '^' ) ; unsafeCharacters . set ( '~' ) ; unsafeCharacters . set ( '[' ) ; unsafeCharacters . set ( ']' ) ; unsafeCharacters . set ( '`' ) ; } private UnsafeUriCharactersEncoder ( ) { } public static String encode ( String s ) { int n = s . length ( ) ; if ( n == 0 ) { return s ; } try { byte [ ] bytes = s . getBytes ( "UTF8" ) ; for ( int i = 0 ; ; ) { if ( unsafeCharacters . get ( bytes [ i ] ) ) { break ; } if ( ++ i >= bytes . length ) { return s ; } } StringBuffer sb = new StringBuffer ( ) ; for ( byte b : bytes ) { if ( unsafeCharacters . get ( b ) ) { appendEscape ( sb , b ) ; } else { sb . append ( ( char ) b ) ; } } return sb . toString ( ) ; } catch ( UnsupportedEncodingException e ) { LOG . error ( "Can't encoding the uri: " , e ) ; return null ; } } private static void appendEscape ( StringBuffer sb , byte b ) { sb . append ( '%' ) ; sb . append ( HEX_DIGITS [ ( b > > 4 ) & 0x0f ] ) ; sb . append ( HEX_DIGITS [ ( b > > 0 ) & 0x0f ] ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultComponentResolver < E extends Exchange > implements ComponentResolver < E > { protected static final FactoryFinder COMPONENT_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; private static final transient Log LOG = LogFactory . getLog ( DefaultComponentResolver . class ) ; public Component < E > resolveComponent ( String name , CamelContext context ) { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } } Class type ; try { type = COMPONENT_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { return null ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " via type: " + type . getName ( ) + " via " + COMPONENT_FACTORY . getPath ( ) + name ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component < E > ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	1
package org . apache . camel . component . sql ; import java . util . Map ; import javax . sql . DataSource ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . util . IntrospectionSupport ; import org . springframework . jdbc . core . JdbcTemplate ; public class SqlEndpoint extends DefaultEndpoint { private JdbcTemplate jdbcTemplate ; private String query ; public SqlEndpoint ( String uri , String query , Component component , DataSource dataSource , Map parameters ) throws Exception { super ( uri , component ) ; this . jdbcTemplate = new JdbcTemplate ( dataSource ) ; IntrospectionSupport . setProperties ( jdbcTemplate , parameters , "template." ) ; this . query = query ; } public SqlEndpoint ( String endpointUri , JdbcTemplate jdbcTemplate , String query ) { super ( endpointUri ) ; this . jdbcTemplate = jdbcTemplate ; this . query = query ; } public Consumer createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "Not yet implemented" ) ; } public Producer createProducer ( ) throws Exception { return new SqlProducer ( this , query , jdbcTemplate ) ; } public boolean isSingleton ( ) { return false ; } } 	0
package org . apache . camel . util ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Properties ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . spi . Injector ; public class FactoryFinder { private final String path ; private final ConcurrentHashMap classMap = new ConcurrentHashMap ( ) ; public FactoryFinder ( ) { this ( "META-INF/services/org/apache/camel/" ) ; } public FactoryFinder ( String path ) { this . path = path ; } public Object newInstance ( String key ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { return newInstance ( key , ( String ) null ) ; } public Object newInstance ( String key , String propertyPrefix ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { Class clazz = findClass ( key , propertyPrefix ) ; return clazz . newInstance ( ) ; } public Object newInstance ( String key , Injector injector ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , ( String ) null ) ; } public Object newInstance ( String key , Injector injector , String propertyPrefix ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; return injector . newInstance ( type ) ; } public < T > T newInstance ( String key , Injector injector , Class < T > expectedType ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , null , expectedType ) ; } public < T > T newInstance ( String key , Injector injector , String propertyPrefix , Class < T > expectedType ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; Object value = injector . newInstance ( type ) ; if ( expectedType . isInstance ( value ) ) { return expectedType . cast ( value ) ; } else { throw new ClassCastException ( "Not instanceof " + expectedType . getName ( ) + " value: " + value ) ; } } public < T > List < T > newInstances ( String key , Injector injector , Class < T > type ) throws IOException , ClassNotFoundException { List < Class > list = findClasses ( key ) ; List < T > answer = new ArrayList < T > ( list . size ( ) ) ; answer . add ( newInstance ( key , injector , type ) ) ; return answer ; } public Class findClass ( String key ) throws ClassNotFoundException , IOException { return findClass ( key , null ) ; } public Class findClass ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { if ( propertyPrefix == null ) { propertyPrefix = "" ; } Class clazz = ( Class ) classMap . get ( propertyPrefix + key ) ; if ( clazz == null ) { clazz = newInstance ( doFindFactoryProperties ( key ) , propertyPrefix ) ; classMap . put ( propertyPrefix + key , clazz ) ; } return clazz ; } public List < Class > findClasses ( String key ) throws ClassNotFoundException , IOException { return findClasses ( key , null ) ; } public List < Class > findClasses ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { Class type = findClass ( key , propertyPrefix ) ; return Collections . singletonList ( type ) ; } public String getPath ( ) { return path ; } private Class newInstance ( Properties properties , String propertyPrefix ) throws ClassNotFoundException , IOException { String className = properties . getProperty ( propertyPrefix + "class" ) ; if ( className == null ) { throw new IOException ( "Expected property is missing: " + propertyPrefix + "class" ) ; } return ObjectHelper . loadClass ( className ) ; } private Properties doFindFactoryProperties ( String key ) throws IOException { String uri = path + key ; InputStream in = ObjectHelper . loadResourceAsStream ( uri ) ; if ( in == null ) { throw new NoFactoryAvailableException ( uri ) ; } BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( in ) ; Properties properties = new Properties ( ) ; properties . load ( reader ) ; return properties ; } finally { ObjectHelper . close ( reader , key , null ) ; ObjectHelper . close ( in , key , null ) ; } } } 	1
package org . apache . camel . component . jms ; import javax . jms . JMSException ; public class RuntimeJmsException extends RuntimeException { private static final long serialVersionUID = - 2141493732308871761L ; public RuntimeJmsException ( String message , JMSException cause ) { super ( message , cause ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor { protected AsyncProcessor processor ; public DelegateAsyncProcessor ( ) { } public DelegateAsyncProcessor ( AsyncProcessor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public AsyncProcessor getProcessor ( ) { return processor ; } public void setProcessor ( AsyncProcessor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } } 	1
package org . apache . camel . component . cxf . transport . spring ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . util . ObjectHelper ; import org . apache . cxf . configuration . spring . AbstractBeanDefinitionParser ; import org . springframework . beans . factory . config . BeanDefinition ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . ParserContext ; public class AbstractCamelContextBeanDefinitionParser extends AbstractBeanDefinitionParser { private static final String DEFAULT_CAMEL_CONTEXT_NAME = "camelContext" ; private String getContextId ( String contextId ) { if ( ObjectHelper . isNullOrBlank ( contextId ) ) { return DEFAULT_CAMEL_CONTEXT_NAME ; } else { return contextId ; } } protected void wireCamelContext ( BeanDefinitionBuilder bean , String camelContextId ) { bean . addPropertyReference ( "camelContext" , camelContextId ) ; } protected void doParse ( Element element , ParserContext ctx , BeanDefinitionBuilder bean ) { bean . setAbstract ( true ) ; NodeList children = element . getChildNodes ( ) ; for ( int i = 0 ; i < children . getLength ( ) ; i ++ ) { Node n = children . item ( i ) ; if ( n . getNodeType ( ) == Node . ELEMENT_NODE ) { String name = n . getLocalName ( ) ; if ( "camelContext" . equals ( name ) ) { BeanDefinition bd = ctx . getDelegate ( ) . parseCustomElement ( ( Element ) n ) ; String contextId = ( String ) bd . getPropertyValues ( ) . getPropertyValue ( "id" ) . getValue ( ) ; wireCamelContext ( bean , getContextId ( contextId ) ) ; } else if ( "camelContextRef" . equals ( name ) ) { String contextId = n . getTextContent ( ) ; wireCamelContext ( bean , getContextId ( contextId ) ) ; } } } } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . DataFormatClause ; import org . apache . camel . builder . DeadLetterChannelBuilder ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . ErrorHandlerBuilderRef ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . NoErrorHandlerBuilder ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . LanguageExpression ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlAccessorType ( XmlAccessType . PROPERTY ) public abstract class ProcessorType < Type extends ProcessorType > extends OptionalIdentifiedType < Type > implements Block { public static final String DEFAULT_TRACE_CATEGORY = "org.apache.camel.TRACE" ; private static final transient Log LOG = LogFactory . getLog ( ProcessorType . class ) ; private ErrorHandlerBuilder errorHandlerBuilder ; private Boolean inheritErrorHandlerFlag ; private NodeFactory nodeFactory ; private LinkedList < Block > blocks = new LinkedList < Block > ( ) ; private ProcessorType < ? extends ProcessorType > parent ; private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; private String errorHandlerRef ; public abstract List < ProcessorType < ? > > getOutputs ( ) ; public Processor createProcessor ( RouteContext routeContext ) throws Exception { throw new UnsupportedOperationException ( "Not implemented yet for class: " + getClass ( ) . getName ( ) ) ; } public Processor createOutputsProcessor ( RouteContext routeContext ) throws Exception { Collection < ProcessorType < ? > > outputs = getOutputs ( ) ; return createOutputsProcessor ( routeContext , outputs ) ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Processor processor = makeProcessor ( routeContext ) ; if ( ! routeContext . isRouteAdded ( ) ) { routeContext . addEventDrivenProcessor ( processor ) ; } } public Processor wrapProcessor ( RouteContext routeContext , Processor processor ) throws Exception { processor = wrapProcessorInInterceptors ( routeContext , processor ) ; return wrapInErrorHandler ( routeContext , processor ) ; } public Type to ( String uri ) { addOutput ( new ToType ( uri ) ) ; return ( Type ) this ; } public Type to ( Endpoint endpoint ) { addOutput ( new ToType ( endpoint ) ) ; return ( Type ) this ; } public Type to ( String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri ) ) ; } return ( Type ) this ; } public Type to ( Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( Collection < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public MulticastType multicast ( ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public Type pipeline ( String ... uris ) { return to ( uris ) ; } public Type pipeline ( Endpoint ... endpoints ) { return to ( endpoints ) ; } public Type pipeline ( Collection < Endpoint > endpoints ) { return to ( endpoints ) ; } public ProcessorType < ? extends ProcessorType > end ( ) { if ( blocks . isEmpty ( ) ) { if ( parent == null ) { throw new IllegalArgumentException ( "Root node with no active block" ) ; } return parent ; } popBlock ( ) ; return this ; } public ThreadType thread ( int coreSize ) { ThreadType answer = new ThreadType ( coreSize ) ; addOutput ( answer ) ; return answer ; } public ProcessorType < Type > thread ( ThreadPoolExecutor executor ) { ThreadType answer = new ThreadType ( executor ) ; addOutput ( answer ) ; return this ; } public IdempotentConsumerType idempotentConsumer ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( messageIdExpression , messageIdRepository ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < IdempotentConsumerType > idempotentConsumer ( MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( ) ; answer . setMessageIdRepository ( messageIdRepository ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < FilterType > filter ( ) { FilterType filter = new FilterType ( ) ; addOutput ( filter ) ; return ExpressionClause . createAndSetExpression ( filter ) ; } public FilterType filter ( Predicate predicate ) { FilterType filter = new FilterType ( predicate ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( ExpressionType expression ) { FilterType filter = getNodeFactory ( ) . createFilter ( ) ; filter . setExpression ( expression ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( String language , String expression ) { return filter ( new LanguageExpression ( language , expression ) ) ; } public LoadBalanceType loadBalance ( ) { LoadBalanceType answer = new LoadBalanceType ( ) ; addOutput ( answer ) ; return answer ; } public ChoiceType choice ( ) { ChoiceType answer = new ChoiceType ( ) ; addOutput ( answer ) ; return answer ; } public TryType tryBlock ( ) { TryType answer = new TryType ( ) ; addOutput ( answer ) ; return answer ; } public Type recipientList ( Expression receipients ) { RecipientListType answer = new RecipientListType ( receipients ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > recipientList ( ) { RecipientListType answer = new RecipientListType ( ) ; addOutput ( answer ) ; ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; answer . setExpression ( clause ) ; return clause ; } public Type routingSlip ( String header , String uriDelimiter ) { RoutingSlipType answer = new RoutingSlipType ( header , uriDelimiter ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( String header ) { RoutingSlipType answer = new RoutingSlipType ( header ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( ) { RoutingSlipType answer = new RoutingSlipType ( ) ; addOutput ( answer ) ; return ( Type ) this ; } public SplitterType splitter ( Expression receipients ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression receipients , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < ResequencerType > resequencer ( ) { ResequencerType answer = new ResequencerType ( ) ; addOutput ( answer ) ; ExpressionClause < ResequencerType > clause = new ExpressionClause < ResequencerType > ( answer ) ; answer . expression ( clause ) ; return clause ; } public ResequencerType resequencer ( Expression < Exchange > expression ) { return resequencer ( Collections . < Expression > singletonList ( expression ) ) ; } public ResequencerType resequencer ( List < Expression > expressions ) { ResequencerType answer = new ResequencerType ( expressions ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression ... expressions ) { List < Expression > list = new ArrayList < Expression > ( ) ; list . addAll ( Arrays . asList ( expressions ) ) ; return resequencer ( list ) ; } public ExpressionClause < AggregatorType > aggregator ( ) { AggregatorType answer = new AggregatorType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationCollection aggregationCollection ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationCollection ( aggregationCollection ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public AggregatorType aggregator ( Expression correlationExpression ) { AggregatorType answer = new AggregatorType ( correlationExpression ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( correlationExpression , aggregationStrategy ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( Expression < Exchange > processAtExpression ) { return delayer ( processAtExpression , 0L ) ; } public DelayerType delayer ( Expression < Exchange > processAtExpression , long delay ) { DelayerType answer = new DelayerType ( processAtExpression , delay ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < DelayerType > delayer ( ) { DelayerType answer = new DelayerType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public DelayerType delayer ( long delay ) { return delayer ( null , delay ) ; } public ThrottlerType throttler ( long maximumRequestCount ) { ThrottlerType answer = new ThrottlerType ( maximumRequestCount ) ; addOutput ( answer ) ; return answer ; } public Type throwFault ( Throwable fault ) { ThrowFaultType answer = new ThrowFaultType ( ) ; answer . setFault ( fault ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type throwFault ( String message ) { return throwFault ( new CamelException ( message ) ) ; } public Type interceptor ( String ref ) { InterceptorRef interceptor = new InterceptorRef ( ref ) ; intercept ( interceptor ) ; return ( Type ) this ; } public Type intercept ( DelegateProcessor interceptor ) { intercept ( new InterceptorRef ( interceptor ) ) ; return ( Type ) this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer ; } public void intercept ( InterceptorType interceptor ) { addOutput ( interceptor ) ; pushBlock ( interceptor ) ; } public void addInterceptor ( InterceptorType interceptor ) { interceptors . add ( interceptor ) ; } public void addInterceptor ( DelegateProcessor interceptor ) { addInterceptor ( new InterceptorRef ( interceptor ) ) ; } protected void pushBlock ( Block block ) { blocks . add ( block ) ; } protected Block popBlock ( ) { return blocks . isEmpty ( ) ? null : blocks . removeLast ( ) ; } public Type proceed ( ) { ProceedType proceed = null ; ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { proceed = ( ( InterceptType ) currentProcessor ) . getProceed ( ) ; LOG . info ( "proceed() is the implied and hence not needed for an intercept()" ) ; } if ( proceed == null ) { for ( ProcessorType node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { InterceptType intercept = ( InterceptType ) node ; proceed = intercept . getProceed ( ) ; break ; } } if ( proceed == null ) { throw new IllegalArgumentException ( "Cannot use proceed() without being within an intercept() block" ) ; } } addOutput ( proceed ) ; return ( Type ) this ; } public Type stop ( ) { ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { ( ( InterceptType ) currentProcessor ) . stopIntercept ( ) ; } else { ProcessorType node ; for ( node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { ( ( InterceptType ) node ) . stopIntercept ( ) ; break ; } } if ( node == null ) { throw new IllegalArgumentException ( "Cannot use stop() without being within an intercept() block" ) ; } } return ( Type ) this ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer . when ( predicate ) ; } public Type interceptors ( String ... refs ) { for ( String ref : refs ) { interceptor ( ref ) ; } return ( Type ) this ; } public Type trace ( ) { return trace ( DEFAULT_TRACE_CATEGORY ) ; } public Type trace ( String category ) { final Log log = LogFactory . getLog ( category ) ; return intercept ( new DelegateProcessor ( ) { @ Override public void process ( Exchange exchange ) throws Exception { log . trace ( exchange ) ; processNext ( exchange ) ; } } ) ; } public PolicyRef policies ( ) { PolicyRef answer = new PolicyRef ( ) ; addOutput ( answer ) ; return answer ; } public PolicyRef policy ( Policy policy ) { PolicyRef answer = new PolicyRef ( policy ) ; addOutput ( answer ) ; return answer ; } public Type handleFault ( ) { intercept ( new HandleFaultType ( ) ) ; return ( Type ) this ; } public Type errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return ( Type ) this ; } public Type inheritErrorHandler ( boolean condition ) { setInheritErrorHandlerFlag ( condition ) ; return ( Type ) this ; } public Type process ( Processor processor ) { ProcessorRef answer = new ProcessorRef ( processor ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type processRef ( String ref ) { ProcessorRef answer = new ProcessorRef ( ) ; answer . setRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref ) { BeanRef answer = new BeanRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref , String method ) { BeanRef answer = new BeanRef ( ref , method ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setBody ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetBodyType answer = new SetBodyType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setBody ( Expression expression ) { SetBodyType answer = new SetBodyType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } @ Deprecated public Type setOutBody ( Expression expression ) { return transform ( expression ) ; } @ Deprecated public ExpressionClause < ProcessorType < Type > > setOutBody ( ) { return transform ( ) ; } public Type transform ( Expression expression ) { TransformType answer = new TransformType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > transform ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; TransformType answer = new TransformType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setFaultBody ( Expression expression ) { return process ( ProcessorBuilder . setFaultBody ( expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetHeaderType answer = new SetHeaderType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type setHeader ( String name , Expression expression ) { SetHeaderType answer = new SetHeaderType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setHeader ( String name , String value ) { SetHeaderType answer = new SetHeaderType ( name , value ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setOutHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setOutHeader ( name , clause ) ) ; return clause ; } public Type setOutHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setOutHeader ( name , expression ) ) ; } public Type setOutHeader ( String name , String value ) { return ( Type ) setOutHeader ( name ) . constant ( value ) ; } public Type setFaultHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setFaultHeader ( name , expression ) ) ; } public Type setProperty ( String name , Expression expression ) { return process ( ProcessorBuilder . setProperty ( name , expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setProperty ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setProperty ( name , clause ) ) ; return clause ; } public Type removeHeader ( String name ) { return process ( ProcessorBuilder . removeHeader ( name ) ) ; } public Type removeOutHeader ( String name ) { return process ( ProcessorBuilder . removeOutHeader ( name ) ) ; } public Type removeFaultHeader ( String name ) { return process ( ProcessorBuilder . removeFaultHeader ( name ) ) ; } public Type removeProperty ( String name ) { return process ( ProcessorBuilder . removeProperty ( name ) ) ; } public Type convertBodyTo ( Class type ) { addOutput ( new ConvertBodyType ( type ) ) ; return ( Type ) this ; } @ Deprecated public Type convertOutBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } @ Deprecated public Type convertFaultBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } public DataFormatClause < ProcessorType < Type > > unmarshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Unmarshal ) ; } public Type unmarshal ( DataFormatType dataFormatType ) { addOutput ( new UnmarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type unmarshal ( DataFormat dataFormat ) { return unmarshal ( new DataFormatType ( dataFormat ) ) ; } public Type unmarshal ( String dataTypeRef ) { addOutput ( new UnmarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } public DataFormatClause < ProcessorType < Type > > marshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Marshal ) ; } public Type marshal ( DataFormatType dataFormatType ) { addOutput ( new MarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type marshal ( DataFormat dataFormat ) { return marshal ( new DataFormatType ( dataFormat ) ) ; } public Type marshal ( String dataTypeRef ) { addOutput ( new MarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } @ XmlTransient public ProcessorType < ? extends ProcessorType > getParent ( ) { return parent ; } public void setParent ( ProcessorType < ? extends ProcessorType > parent ) { this . parent = parent ; } @ XmlTransient public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void setErrorHandlerBuilderIfNull ( ErrorHandlerBuilder errorHandlerBuilder ) { if ( this . errorHandlerBuilder == null ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; } } public String getErrorHandlerRef ( ) { return errorHandlerRef ; } @ XmlAttribute ( required = false ) public void setErrorHandlerRef ( String errorHandlerRef ) { this . errorHandlerRef = errorHandlerRef ; setErrorHandlerBuilder ( new ErrorHandlerBuilderRef ( errorHandlerRef ) ) ; } @ XmlTransient public boolean isInheritErrorHandler ( ) { return isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public static boolean isInheritErrorHandler ( Boolean value ) { return value == null || value . booleanValue ( ) ; } @ XmlAttribute ( name = "inheritErrorHandler" , required = false ) public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } @ XmlTransient public NodeFactory getNodeFactory ( ) { if ( nodeFactory == null ) { nodeFactory = new NodeFactory ( ) ; } return nodeFactory ; } public void setNodeFactory ( NodeFactory nodeFactory ) { this . nodeFactory = nodeFactory ; } public String getLabel ( ) { return "" ; } protected Processor makeProcessor ( RouteContext routeContext ) throws Exception { Processor processor = createProcessor ( routeContext ) ; return wrapProcessor ( routeContext , processor ) ; } protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } List < InterceptStrategy > strategies = new ArrayList < InterceptStrategy > ( ) ; CamelContext camelContext = routeContext . getCamelContext ( ) ; if ( camelContext instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) camelContext ; strategies . addAll ( defaultCamelContext . getInterceptStrategies ( ) ) ; } strategies . addAll ( routeContext . getInterceptStrategies ( ) ) ; for ( InterceptStrategy strategy : strategies ) { if ( strategy != null ) { target = strategy . wrapProcessorInInterceptors ( this , target ) ; } } List < InterceptorType > list = routeContext . getRoute ( ) . getInterceptors ( ) ; if ( interceptors != null ) { list . addAll ( interceptors ) ; } Collections . reverse ( list ) ; Set < Processor > interceptors = new HashSet < Processor > ( ) ; interceptors . add ( target ) ; for ( InterceptorType interceptorType : list ) { DelegateProcessor interceptor = interceptorType . createInterceptor ( routeContext ) ; if ( ! interceptors . contains ( interceptor ) ) { interceptors . add ( interceptor ) ; if ( interceptor . getProcessor ( ) != null ) { LOG . warn ( "Interceptor " + interceptor + " currently wraps target " + interceptor . getProcessor ( ) + " is attempting to change target " + target + " new wrapping has been denied." ) ; } else { interceptor . setProcessor ( target ) ; target = interceptor ; } } } return target ; } protected Processor wrapInErrorHandler ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } ErrorHandlerWrappingStrategy strategy = routeContext . getErrorHandlerWrappingStrategy ( ) ; if ( strategy != null ) { return strategy . wrapProcessorInErrorHandler ( routeContext , this , target ) ; } return getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( errorHandlerRef != null ) { return new ErrorHandlerBuilderRef ( errorHandlerRef ) ; } if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } protected void configureChild ( ProcessorType output ) { output . setNodeFactory ( getNodeFactory ( ) ) ; } public void addOutput ( ProcessorType processorType ) { processorType . setParent ( this ) ; configureChild ( processorType ) ; if ( blocks . isEmpty ( ) ) { getOutputs ( ) . add ( processorType ) ; } else { Block block = blocks . getLast ( ) ; block . addOutput ( processorType ) ; } } protected Processor createCompositeProcessor ( List < Processor > list ) { return new Pipeline ( list ) ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { List < Processor > list = new ArrayList < Processor > ( ) ; for ( ProcessorType output : outputs ) { Processor processor = output . createProcessor ( routeContext ) ; processor = output . wrapProcessorInInterceptors ( routeContext , processor ) ; ProcessorType currentProcessor = this ; if ( ! ( currentProcessor instanceof ExceptionType || currentProcessor instanceof TryType ) ) { processor = output . wrapInErrorHandler ( routeContext , processor ) ; } list . add ( processor ) ; } Processor processor = null ; if ( ! list . isEmpty ( ) ) { if ( list . size ( ) == 1 ) { processor = list . get ( 0 ) ; } else { processor = createCompositeProcessor ( list ) ; } } return processor ; } public void clearOutput ( ) { getOutputs ( ) . clear ( ) ; blocks . clear ( ) ; } } 	1
package org . apache . camel . spring . handler ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import javax . xml . bind . Binder ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . model . loadbalancer . RandomLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . RoundRobinLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . StickyLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . TopicLoadBalanceStrategy ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . spring . CamelBeanPostProcessor ; import org . apache . camel . spring . CamelContextFactoryBean ; import org . apache . camel . spring . CamelJMXAgentType ; import org . apache . camel . spring . CamelTemplateFactoryBean ; import org . apache . camel . spring . EndpointFactoryBean ; import org . apache . camel . spring . remoting . CamelProxyFactoryBean ; import org . apache . camel . spring . remoting . CamelServiceExporter ; import org . apache . camel . util . ObjectHelper ; import org . springframework . beans . factory . BeanDefinitionStoreException ; import org . springframework . beans . factory . config . BeanDefinition ; import org . springframework . beans . factory . config . RuntimeBeanReference ; import org . springframework . beans . factory . parsing . BeanComponentDefinition ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . NamespaceHandlerSupport ; import org . springframework . beans . factory . xml . ParserContext ; public class CamelNamespaceHandler extends NamespaceHandlerSupport { protected BeanDefinitionParser endpointParser = new BeanDefinitionParser ( EndpointFactoryBean . class ) ; protected BeanDefinitionParser beanPostProcessorParser = new BeanDefinitionParser ( CamelBeanPostProcessor . class ) ; protected Set < String > parserElementNames = new HashSet < String > ( ) ; private JAXBContext jaxbContext ; private Map < String , BeanDefinitionParser > parserMap = new HashMap < String , BeanDefinitionParser > ( ) ; private Binder < Node > binder ; public void init ( ) { addBeanDefinitionParser ( "proxy" , CamelProxyFactoryBean . class ) ; addBeanDefinitionParser ( "template" , CamelTemplateFactoryBean . class ) ; addBeanDefinitionParser ( "export" , CamelServiceExporter . class ) ; addBeanDefinitionParser ( "artixDS" , ArtixDSDataFormat . class ) ; addBeanDefinitionParser ( "jaxb" , JaxbDataFormat . class ) ; addBeanDefinitionParser ( "serialization" , SerializationDataFormat . class ) ; addBeanDefinitionParser ( "xmlBeans" , XMLBeansDataFormat . class ) ; addBeanDefinitionParser ( "roundRobin" , RoundRobinLoadBalanceStrategy . class ) ; addBeanDefinitionParser ( "random" , RandomLoadBalanceStrategy . class ) ; addBeanDefinitionParser ( "sticky" , StickyLoadBalanceStrategy . class ) ; addBeanDefinitionParser ( "topic" , TopicLoadBalanceStrategy . class ) ; addBeanDefinitionParser ( "jmxAgent" , CamelJMXAgentType . class ) ; registerParser ( "endpoint" , endpointParser ) ; Class cl = CamelContextFactoryBean . class ; try { cl = Class . forName ( "org.apache.camel.osgi.CamelContextFactoryBean" ) ; } catch ( Throwable t ) { } registerParser ( "camelContext" , new CamelContextBeanDefinitionParser ( cl ) ) ; } private void addBeanDefinitionParser ( String elementName , Class < ? > type ) { BeanDefinitionParser parser = new BeanDefinitionParser ( type ) ; registerParser ( elementName , parser ) ; parserMap . put ( elementName , parser ) ; } protected void createBeanPostProcessor ( ParserContext parserContext , String contextId , Element childElement , BeanDefinitionBuilder parentBuilder ) { String beanPostProcessorId = contextId + ":beanPostProcessor" ; childElement . setAttribute ( "id" , beanPostProcessorId ) ; BeanDefinition definition = beanPostProcessorParser . parse ( childElement , parserContext ) ; definition . getPropertyValues ( ) . addPropertyValue ( "camelContext" , new RuntimeBeanReference ( contextId ) ) ; parentBuilder . addPropertyReference ( "beanPostProcessor" , beanPostProcessorId ) ; } protected void registerScriptParser ( String elementName , String engineName ) { registerParser ( elementName , new ScriptDefinitionParser ( engineName ) ) ; } protected void registerParser ( String name , org . springframework . beans . factory . xml . BeanDefinitionParser parser ) { parserElementNames . add ( name ) ; registerBeanDefinitionParser ( name , parser ) ; } public Set < String > getParserElementNames ( ) { return parserElementNames ; } protected Object parseUsingJaxb ( Element element , ParserContext parserContext ) { try { binder = getJaxbContext ( ) . createBinder ( ) ; return binder . unmarshal ( element ) ; } catch ( JAXBException e ) { throw new BeanDefinitionStoreException ( "Failed to parse JAXB element: " + e , e ) ; } } protected JAXBContext getJaxbContext ( ) throws JAXBException { if ( jaxbContext == null ) { jaxbContext = createJaxbContext ( ) ; } return jaxbContext ; } protected JAXBContext createJaxbContext ( ) throws JAXBException { StringBuilder packages = new StringBuilder ( ) ; for ( Class cl : getJaxbPackages ( ) ) { if ( packages . length ( ) > 0 ) { packages . append ( ":" ) ; } packages . append ( cl . getName ( ) . substring ( 0 , cl . getName ( ) . lastIndexOf ( '.' ) ) ) ; } return JAXBContext . newInstance ( packages . toString ( ) , getClass ( ) . getClassLoader ( ) ) ; } protected Set < Class > getJaxbPackages ( ) { Set < Class > classes = new HashSet < Class > ( ) ; classes . add ( org . apache . camel . spring . CamelContextFactoryBean . class ) ; classes . add ( org . apache . camel . model . RouteType . class ) ; classes . add ( org . apache . camel . model . config . StreamResequencerConfig . class ) ; classes . add ( org . apache . camel . model . dataformat . DataFormatType . class ) ; classes . add ( org . apache . camel . model . language . ExpressionType . class ) ; classes . add ( org . apache . camel . model . loadbalancer . LoadBalancerType . class ) ; return classes ; } protected class CamelContextBeanDefinitionParser extends BeanDefinitionParser { public CamelContextBeanDefinitionParser ( Class type ) { super ( type ) ; } @ Override protected void doParse ( Element element , ParserContext parserContext , BeanDefinitionBuilder builder ) { super . doParse ( element , parserContext , builder ) ; String contextId = element . getAttribute ( "id" ) ; if ( ObjectHelper . isNullOrBlank ( contextId ) ) { contextId = "camelContext" ; element . setAttribute ( "id" , contextId ) ; } Object value = parseUsingJaxb ( element , parserContext ) ; if ( value instanceof CamelContextFactoryBean ) { CamelContextFactoryBean factoryBean = ( CamelContextFactoryBean ) value ; builder . addPropertyValue ( "id" , contextId ) ; builder . addPropertyValue ( "routes" , factoryBean . getRoutes ( ) ) ; builder . addPropertyValue ( "builderRefs" , factoryBean . getBuilderRefs ( ) ) ; if ( factoryBean . getPackages ( ) . length > 0 ) { builder . addPropertyValue ( "packages" , factoryBean . getPackages ( ) ) ; } } boolean createdBeanPostProcessor = false ; NodeList list = element . getChildNodes ( ) ; int size = list . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Node child = list . item ( i ) ; if ( child instanceof Element ) { Element childElement = ( Element ) child ; String localName = child . getLocalName ( ) ; if ( localName . equals ( "beanPostProcessor" ) ) { createBeanPostProcessor ( parserContext , contextId , childElement , builder ) ; createdBeanPostProcessor = true ; } else if ( localName . equals ( "endpoint" ) ) { BeanDefinition definition = endpointParser . parse ( childElement , parserContext ) ; String id = childElement . getAttribute ( "id" ) ; if ( ObjectHelper . isNotNullAndNonEmpty ( id ) ) { definition . getPropertyValues ( ) . addPropertyValue ( "camelContext" , new RuntimeBeanReference ( contextId ) ) ; parserContext . registerComponent ( new BeanComponentDefinition ( definition , id ) ) ; } } else { BeanDefinitionParser parser = parserMap . get ( localName ) ; if ( parser != null ) { BeanDefinition definition = parser . parse ( childElement , parserContext ) ; String id = childElement . getAttribute ( "id" ) ; if ( ObjectHelper . isNotNullAndNonEmpty ( id ) ) { parserContext . registerComponent ( new BeanComponentDefinition ( definition , id ) ) ; if ( localName . equals ( "jmxAgent" ) ) { builder . addPropertyReference ( "camelJMXAgent" , id ) ; } } } } } } injectNamespaces ( element ) ; if ( ! createdBeanPostProcessor ) { Element childElement = element . getOwnerDocument ( ) . createElement ( "beanPostProcessor" ) ; element . appendChild ( childElement ) ; createBeanPostProcessor ( parserContext , contextId , childElement , builder ) ; } } } protected void injectNamespaces ( Element element ) { NodeList list = element . getChildNodes ( ) ; Namespaces namespaces = null ; int size = list . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Node child = list . item ( i ) ; if ( child instanceof Element ) { Element childElement = ( Element ) child ; Object object = binder . getJAXBNode ( child ) ; if ( object instanceof NamespaceAware ) { NamespaceAware namespaceAware = ( NamespaceAware ) object ; if ( namespaces == null ) { namespaces = new Namespaces ( element ) ; } namespaces . configure ( namespaceAware ) ; } injectNamespaces ( childElement ) ; } } } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionHelper ; public class Delayer extends DelayProcessorSupport { private Expression < Exchange > timeExpression ; private long delay ; public Delayer ( Processor processor , Expression < Exchange > timeExpression , long delay ) { super ( processor ) ; this . timeExpression = timeExpression ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[on: " + timeExpression + " delay: " + delay + " to: " + getProcessor ( ) + "]" ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } protected void delay ( Exchange exchange ) throws Exception { long time = 0 ; if ( timeExpression != null ) { Long longValue = ExpressionHelper . evaluateAsType ( timeExpression , exchange , Long . class ) ; if ( longValue != null ) { time = longValue . longValue ( ) ; } } if ( time <= 0 ) { time = defaultProcessTime ( exchange ) ; } time += delay ; waitUntil ( time , exchange ) ; } protected long defaultProcessTime ( Exchange exchange ) { return currentSystemTime ( ) ; } } 	1
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public abstract class QueueLoadBalancer extends LoadBalancerSupport { public void process ( Exchange exchange ) throws Exception { List < Processor > list = getProcessors ( ) ; if ( list . isEmpty ( ) ) { throw new IllegalStateException ( "No processors available to process " + exchange ) ; } Processor processor = chooseProcessor ( list , exchange ) ; if ( processor == null ) { throw new IllegalStateException ( "No processors could be chosen to process " + exchange ) ; } else { processor . process ( exchange ) ; } } protected abstract Processor chooseProcessor ( List < Processor > processors , Exchange exchange ) ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandler extends ErrorHandlerSupport { private Processor output ; private Log log ; private LoggingLevel level ; public LoggingErrorHandler ( Processor output ) { this ( output , LogFactory . getLog ( LoggingErrorHandler . class ) , LoggingLevel . INFO ) ; } public LoggingErrorHandler ( Processor output , Log log , LoggingLevel level ) { this . output = output ; this . log = log ; this . level = level ; } @ Override public String toString ( ) { return "LoggingErrorHandler[" + output + "]" ; } public void process ( Exchange exchange ) throws Exception { try { output . process ( exchange ) ; } catch ( Throwable e ) { if ( ! customProcessorForException ( exchange , e ) ) { logError ( exchange , e ) ; } } } public Processor getOutput ( ) { return output ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } protected void logError ( Exchange exchange , Throwable e ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange , e ) , e ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange , e ) , e ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange , e ) , e ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange , e ) , e ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange , e ) , e ) ; } } protected Object logMessage ( Exchange exchange , Throwable e ) { return e + " while processing exchange: " + exchange ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( output ) ; } } 	1
package org . apache . camel . component . cxf . spring ; import java . util . Map ; import javax . xml . namespace . QName ; import org . w3c . dom . Element ; import org . apache . cxf . common . util . StringUtils ; import org . apache . cxf . configuration . spring . AbstractBeanDefinitionParser ; import org . springframework . beans . factory . BeanDefinitionStoreException ; import org . springframework . beans . factory . support . AbstractBeanDefinition ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . ParserContext ; public class CxfEndpointBeanDefinitionParser extends AbstractBeanDefinitionParser { @ Override protected Class getBeanClass ( Element arg0 ) { return CxfEndpointBean . class ; } @ Override protected void mapAttribute ( BeanDefinitionBuilder bean , Element e , String name , String val ) { if ( "endpointName" . equals ( name ) || "serviceName" . equals ( name ) ) { QName q = parseQName ( e , val ) ; bean . addPropertyValue ( name , q ) ; } else { mapToProperty ( bean , name , val ) ; } } @ Override protected void mapElement ( ParserContext ctx , BeanDefinitionBuilder bean , Element el , String name ) { if ( "properties" . equals ( name ) ) { Map map = ctx . getDelegate ( ) . parseMapElement ( el , bean . getBeanDefinition ( ) ) ; bean . addPropertyValue ( "properties" , map ) ; } else if ( "binding" . equals ( name ) ) { setFirstChildAsProperty ( el , ctx , bean , "bindingConfig" ) ; } else if ( "inInterceptors" . equals ( name ) || "inFaultInterceptors" . equals ( name ) || "outInterceptors" . equals ( name ) || "outFaultInterceptors" . equals ( name ) || "features" . equals ( name ) || "schemaLocations" . equals ( name ) ) { java . util . List list = ( java . util . List ) ctx . getDelegate ( ) . parseListElement ( el , bean . getBeanDefinition ( ) ) ; bean . addPropertyValue ( name , list ) ; } else { setFirstChildAsProperty ( el , ctx , bean , name ) ; } } @ Override protected void doParse ( Element element , ParserContext ctx , BeanDefinitionBuilder bean ) { super . doParse ( element , ctx , bean ) ; bean . setLazyInit ( false ) ; } @ Override protected String resolveId ( Element elem , AbstractBeanDefinition definition , ParserContext ctx ) throws BeanDefinitionStoreException { String id = super . resolveId ( elem , definition , ctx ) ; if ( StringUtils . isEmpty ( id ) ) { throw new BeanDefinitionStoreException ( "The bean id is needed." ) ; } return id ; } @ Override protected boolean hasBusProperty ( ) { return true ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . processor . resequencer . ResequencerEngine ; import org . apache . camel . processor . resequencer . SequenceElementComparator ; import org . apache . camel . processor . resequencer . SequenceSender ; public class StreamResequencer extends DelegateProcessor implements Processor { private ResequencerEngine < Exchange > reseq ; private BlockingQueue < Exchange > queue ; private SequenceSender sender ; public StreamResequencer ( Processor processor , SequenceElementComparator < Exchange > comparator , int capacity ) { super ( processor ) ; queue = new LinkedBlockingQueue < Exchange > ( ) ; reseq = new ResequencerEngine < Exchange > ( comparator , capacity ) ; reseq . setOutQueue ( queue ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; sender = new SequenceSender ( getProcessor ( ) ) ; sender . setQueue ( queue ) ; sender . start ( ) ; } @ Override protected void doStop ( ) throws Exception { reseq . stop ( ) ; sender . cancel ( ) ; super . doStop ( ) ; } @ Override public void process ( Exchange exchange ) throws Exception { reseq . put ( exchange ) ; } public long getTimeout ( ) { return reseq . getTimeout ( ) ; } public void setTimeout ( long timeout ) { reseq . setTimeout ( timeout ) ; } @ Override public String toString ( ) { return "StreamResequencer[to: " + getProcessor ( ) + "]" ; } } 	1
package org . apache . camel . bam ; public enum ActivityLifecycle { Started , Completed } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TraceInterceptor extends DelegateProcessor implements ExchangeFormatter { private final ProcessorType node ; private Predicate traceFilter ; private boolean traceExceptions = true ; private Logger logger = new Logger ( LogFactory . getLog ( TraceInterceptor . class ) , this ) ; private TraceFormatter formatter ; public TraceInterceptor ( ProcessorType node , Processor target , TraceFormatter formatter ) { super ( target ) ; this . node = node ; this . formatter = formatter ; } @ Override public String toString ( ) { return "TraceInterceptor[" + node + "]" ; } public void process ( Exchange exchange ) throws Exception { try { if ( shouldLogExchange ( exchange ) ) { logExchange ( exchange ) ; } super . proceed ( exchange ) ; } catch ( Exception e ) { logException ( exchange , e ) ; throw e ; } catch ( Error e ) { logException ( exchange , e ) ; throw e ; } } public Object format ( Exchange exchange ) { return formatter . format ( this , exchange ) ; } public ProcessorType getNode ( ) { return node ; } public Predicate getTraceFilter ( ) { return traceFilter ; } public void setTraceFilter ( Predicate traceFilter ) { this . traceFilter = traceFilter ; } public boolean isTraceExceptions ( ) { return traceExceptions ; } public void setTraceExceptions ( boolean traceExceptions ) { this . traceExceptions = traceExceptions ; } public Logger getLogger ( ) { return logger ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } public LoggingLevel getLevel ( ) { return getLogger ( ) . getLevel ( ) ; } public Log getLog ( ) { return getLogger ( ) . getLog ( ) ; } public void setLog ( Log log ) { getLogger ( ) . setLog ( log ) ; } public void setLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; } protected void logExchange ( Exchange exchange ) { logger . process ( exchange ) ; } protected void logException ( Exchange exchange , Throwable throwable ) { logger . process ( exchange , throwable ) ; } protected boolean shouldLogExchange ( Exchange exchange ) { return traceFilter == null || traceFilter . matches ( exchange ) ; } } 	1
package org . apache . camel . spring . handler ; import org . apache . camel . util . ObjectHelper ; public class LazyLoadingBeanDefinitionParser extends BeanDefinitionParser { private String className ; private String moduleName ; public LazyLoadingBeanDefinitionParser ( String className , String moduleName ) { this . className = className ; this . moduleName = moduleName ; } @ Override protected Class loadType ( ) { Class < ? > answer = ObjectHelper . loadClass ( className , getClass ( ) . getClassLoader ( ) ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Class: " + className + " could not be found. You need to add Camel module: " + moduleName + " to your classpath" ) ; } return answer ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class ValueBuilder < E extends Exchange > implements Expression < E > { private Expression < E > expression ; public ValueBuilder ( Expression < E > expression ) { this . expression = expression ; } public Object evaluate ( E exchange ) { return expression . evaluate ( exchange ) ; } public Expression < E > getExpression ( ) { return expression ; } @ Override public String toString ( ) { return expression . toString ( ) ; } public Predicate < E > isNotEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isNotEqualTo ( expression , right ) ) ; } public Predicate < E > isEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isEqualTo ( expression , right ) ) ; } public Predicate < E > isLessThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThan ( expression , right ) ) ; } public Predicate < E > isLessThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isGreaterThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThan ( expression , right ) ) ; } public Predicate < E > isGreaterThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isInstanceOf ( Class type ) { return onNewPredicate ( PredicateBuilder . isInstanceOf ( expression , type ) ) ; } public Predicate < E > matchesRegex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public Predicate < E > isNull ( ) { return onNewPredicate ( PredicateBuilder . isNull ( expression ) ) ; } public Predicate < E > isNotNull ( ) { return onNewPredicate ( PredicateBuilder . isNotNull ( expression ) ) ; } public Predicate < E > contains ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . contains ( expression , right ) ) ; } public Predicate < E > regex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public ValueBuilder < E > tokenize ( ) { return tokenize ( "\n" ) ; } public ValueBuilder < E > tokenize ( String token ) { Expression < E > newExp = ExpressionBuilder . tokenizeExpression ( expression , token ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexTokenize ( String regex ) { Expression < E > newExp = ExpressionBuilder . regexTokenize ( expression , regex ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , String replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , Expression < E > replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertTo ( Class type ) { Expression < E > newExp = ExpressionBuilder . convertTo ( expression , type ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertToString ( ) { return convertTo ( String . class ) ; } public ValueBuilder < E > append ( Object value ) { return new ValueBuilder < E > ( ExpressionBuilder . append ( expression , asExpression ( value ) ) ) ; } protected Predicate < E > onNewPredicate ( Predicate < E > predicate ) { return predicate ; } protected Expression < E > asExpression ( Object value ) { if ( value instanceof Expression ) { return ( Expression < E > ) value ; } else { return ExpressionBuilder . constantExpression ( value ) ; } } } 	1
package org . apache . camel . component . cxf . transport . spring ; import org . apache . camel . component . cxf . transport . CamelConduit ; public class CamelConduitDefinitionParser extends AbstractCamelContextBeanDefinitionParser { public CamelConduitDefinitionParser ( ) { super ( ) ; setBeanClass ( CamelConduit . class ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "catch" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CatchType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; public CatchType ( ) { } public CatchType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public CatchType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Catch[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "catch" ; } @ Override public String getLabel ( ) { return getExceptionClasses ( ) . toString ( ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . language ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . Language ; public class IllegalSyntaxException extends RuntimeCamelException { private final Language language ; private final String expression ; public IllegalSyntaxException ( Language language , String expression ) { super ( "Illegal syntax for language: " + language + ". Expression: " + expression ) ; this . language = language ; this . expression = expression ; } public String getExpression ( ) { return expression ; } public Language getLanguage ( ) { return language ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . MarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "marshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public MarshalType ( ) { } public MarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public MarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "marshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new MarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . component . cxf ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . cxf . spring . CxfEndpointBean ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . spring . SpringCamelContext ; import org . apache . cxf . configuration . spring . ConfigurerImpl ; import org . apache . cxf . message . Message ; import org . springframework . context . ApplicationContext ; public class CxfEndpoint extends DefaultEndpoint < CxfExchange > { private final CxfComponent component ; private final String address ; private String wsdlURL ; private String serviceClass ; private String portName ; private String serviceName ; private String dataFormat ; private String beanId ; private boolean isWrapped ; private boolean isSpringContextEndpoint ; private boolean inOut = true ; private Boolean isSetDefaultBus ; private ConfigurerImpl configurer ; private CxfEndpointBean cxfEndpointBean ; public CxfEndpoint ( String uri , String address , CxfComponent component ) { super ( uri , component ) ; this . component = component ; this . address = address ; if ( address . startsWith ( CxfConstants . SPRING_CONTEXT_ENDPOINT ) ) { isSpringContextEndpoint = true ; beanId = address . substring ( CxfConstants . SPRING_CONTEXT_ENDPOINT . length ( ) ) ; if ( beanId . startsWith ( "//" ) ) { beanId = beanId . substring ( 2 ) ; } SpringCamelContext context = ( SpringCamelContext ) this . getCamelContext ( ) ; configurer = new ConfigurerImpl ( context . getApplicationContext ( ) ) ; cxfEndpointBean = ( CxfEndpointBean ) context . getApplicationContext ( ) . getBean ( beanId ) ; assert cxfEndpointBean != null ; } } public Producer < CxfExchange > createProducer ( ) throws Exception { return new CxfProducer ( this ) ; } public Consumer < CxfExchange > createConsumer ( Processor processor ) throws Exception { return new CxfConsumer ( this , processor ) ; } public CxfExchange createExchange ( ) { return new CxfExchange ( getCamelContext ( ) , getExchangePattern ( ) ) ; } public CxfExchange createExchange ( ExchangePattern pattern ) { return new CxfExchange ( getCamelContext ( ) , pattern ) ; } public CxfExchange createExchange ( Message inMessage ) { return new CxfExchange ( getCamelContext ( ) , getExchangePattern ( ) , inMessage ) ; } public String getDataFormat ( ) { return dataFormat ; } public void setDataFormat ( String format ) { dataFormat = format ; } public boolean isSpringContextEndpoint ( ) { return isSpringContextEndpoint ; } public String getAddress ( ) { return address ; } public String getWsdlURL ( ) { return wsdlURL ; } public void setWsdlURL ( String url ) { wsdlURL = url ; } public void setSetDefaultBus ( Boolean set ) { isSetDefaultBus = set ; } public Boolean isSetDefaultBus ( ) { return isSetDefaultBus ; } public String getServiceClass ( ) { return serviceClass ; } public void setServiceClass ( String className ) { serviceClass = className ; } public void setPortName ( String port ) { portName = port ; } public void setServiceName ( String service ) { serviceName = service ; } public String getPortName ( ) { return portName ; } public String getServiceName ( ) { return serviceName ; } public boolean isInOut ( ) { return inOut ; } public void setInOut ( boolean inOut ) { this . inOut = inOut ; } public boolean isWrapped ( ) { return isWrapped ; } public void setWrapped ( boolean wrapped ) { isWrapped = wrapped ; } public CxfComponent getComponent ( ) { return component ; } public boolean isSingleton ( ) { return true ; } public String getBeanId ( ) { return beanId ; } public CxfEndpointBean getCxfEndpointBean ( ) { return cxfEndpointBean ; } public void configure ( Object beanInstance ) { configurer . configureBean ( beanId , beanInstance ) ; } public ApplicationContext getApplicationContext ( ) { if ( getCamelContext ( ) instanceof SpringCamelContext ) { SpringCamelContext context = ( SpringCamelContext ) getCamelContext ( ) ; return context . getApplicationContext ( ) ; } else { return null ; } } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . RejectedExecutionHandler ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ServiceHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class MulticastProcessor extends ServiceSupport implements Processor { static class ProcessorExchangePair { private final Processor processor ; private final Exchange exchange ; public ProcessorExchangePair ( Processor processor , Exchange exchange ) { this . processor = processor ; this . exchange = exchange ; } public Processor getProcessor ( ) { return processor ; } public Exchange getExchange ( ) { return exchange ; } } private Collection < Processor > processors ; private AggregationStrategy aggregationStrategy ; private boolean isParallelProcessing ; private ThreadPoolExecutor executor ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; public MulticastProcessor ( Collection < Processor > processors ) { this ( processors , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy ) { this ( processors , aggregationStrategy , false , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor executor ) { notNull ( processors , "processors" ) ; this . processors = processors ; this . aggregationStrategy = aggregationStrategy ; this . isParallelProcessing = parallelProcessing ; if ( isParallelProcessing ) { if ( executor != null ) { this . executor = executor ; } else { this . executor = new ThreadPoolExecutor ( processors . size ( ) , processors . size ( ) , 0 , TimeUnit . MILLISECONDS , new ArrayBlockingQueue < Runnable > ( processors . size ( ) ) ) ; } } } public static < E extends Exchange > Collection < Processor > toProducers ( Collection < Endpoint > endpoints ) throws Exception { Collection < Processor > answer = new ArrayList < Processor > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint . createProducer ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Multicast" + getProcessors ( ) ; } class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; private final Processor processor ; public ProcessCall ( Exchange exchange , Processor processor , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; this . processor = processor ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; callback . done ( false ) ; } else { try { processor . process ( exchange ) ; } catch ( Exception ex ) { exchange . setException ( ex ) ; } callback . done ( false ) ; } } } public void process ( Exchange exchange ) throws Exception { Exchange result = null ; List < ProcessorExchangePair > pairs = createProcessorExchangePairs ( exchange ) ; if ( isParallelProcessing ) { Exchange [ ] exchanges = new Exchange [ pairs . size ( ) ] ; final CountDownLatch completedExchanges = new CountDownLatch ( pairs . size ( ) ) ; int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; exchanges [ i ] = pair . getExchange ( ) ; updateNewExchange ( exchanges [ i ] , i , pairs ) ; ProcessCall call = new ProcessCall ( exchanges [ i ] , producer , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { completedExchanges . countDown ( ) ; } } ) ; executor . execute ( call ) ; i ++ ; } completedExchanges . await ( ) ; if ( aggregationStrategy != null ) { for ( Exchange resultExchange : exchanges ) { if ( result == null ) { result = resultExchange ; } else { result = aggregationStrategy . aggregate ( result , resultExchange ) ; } } } } else { int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; Exchange subExchange = pair . getExchange ( ) ; updateNewExchange ( subExchange , i , pairs ) ; producer . process ( subExchange ) ; if ( aggregationStrategy != null ) { if ( result == null ) { result = subExchange ; } else { result = aggregationStrategy . aggregate ( result , subExchange ) ; } } i ++ ; } } if ( result != null ) { ExchangeHelper . copyResults ( exchange , result ) ; } } protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { } protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { List < ProcessorExchangePair > result = new ArrayList < ProcessorExchangePair > ( processors . size ( ) ) ; Processor [ ] processorsArray = processors . toArray ( new Processor [ processors . size ( ) ] ) ; for ( int i = 0 ; i < processorsArray . length ; i ++ ) { result . add ( new ProcessorExchangePair ( processorsArray [ i ] , exchange . copy ( ) ) ) ; } return result ; } protected void doStop ( ) throws Exception { shutdown . set ( true ) ; if ( executor != null ) { executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } ServiceHelper . stopServices ( processors ) ; } protected void doStart ( ) throws Exception { shutdown . set ( false ) ; if ( executor != null ) { executor . setRejectedExecutionHandler ( new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor executor ) { ProcessCall call = ( ProcessCall ) runnable ; call . exchange . setException ( new RejectedExecutionException ( ) ) ; call . callback . done ( false ) ; } } ) ; } ServiceHelper . startServices ( processors ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; @ XmlRootElement ( name = "csv" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CsvDataFormat extends DataFormatType { public CsvDataFormat ( ) { super ( "org.apache.camel.dataformat.csv.CsvDataFormat" ) ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import javax . naming . Context ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . management . InstrumentationLifecycleStrategy ; import org . apache . camel . management . JmxSystemPropertyKeys ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . interceptor . Tracer ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ReflectionInjector ; import org . apache . camel . util . SystemHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; public class DefaultCamelContext extends ServiceSupport implements CamelContext , Service { private static final transient Log LOG = LogFactory . getLog ( DefaultCamelContext . class ) ; private static final String NAME_PREFIX = "camel-" ; private static int nameSuffix ; private String name ; private final Map < String , Endpoint > endpoints = new HashMap < String , Endpoint > ( ) ; private final Map < String , Component > components = new HashMap < String , Component > ( ) ; private List < Route > routes ; private List < Service > servicesToClose = new ArrayList < Service > ( ) ; private TypeConverter typeConverter ; private ExchangeConverter exchangeConverter ; private Injector injector ; private ComponentResolver componentResolver ; private boolean autoCreateComponents = true ; private LanguageResolver languageResolver = new DefaultLanguageResolver ( ) ; private Registry registry ; private LifecycleStrategy lifecycleStrategy ; private List < RouteType > routeDefinitions = new ArrayList < RouteType > ( ) ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private Boolean trace ; private ErrorHandlerBuilder errorHandlerBuilder ; public DefaultCamelContext ( ) { name = NAME_PREFIX + ++ nameSuffix ; if ( Boolean . getBoolean ( JmxSystemPropertyKeys . DISABLED ) ) { LOG . info ( "JMX is disabled. Using DefaultLifecycleStrategy." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } else { try { LOG . info ( "JMX enabled. Using InstrumentationLifecycleStrategy." ) ; lifecycleStrategy = new InstrumentationLifecycleStrategy ( ) ; } catch ( NoClassDefFoundError e ) { LOG . warn ( "Could not find needed classes for JMX lifecycle strategy." + " Are you missing spring-context.jar by any chance? NoClassDefFoundError: " + e . getMessage ( ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not create JMX lifecycle strategy, caused by: " + e . getMessage ( ) ) ; } if ( lifecycleStrategy == null ) { LOG . warn ( "Not possible to use JMX lifecycle strategy. Using DefaultLifecycleStrategy instead." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } } } public DefaultCamelContext ( Context jndiContext ) { this ( new JndiRegistry ( jndiContext ) ) ; } public DefaultCamelContext ( Registry registry ) { this ( ) ; this . registry = registry ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public void addComponent ( String componentName , final Component component ) { if ( component == null ) { throw new IllegalArgumentException ( "Component cannot be null" ) ; } synchronized ( components ) { if ( components . containsKey ( componentName ) ) { throw new IllegalArgumentException ( "Component previously added: " + componentName ) ; } component . setCamelContext ( this ) ; components . put ( componentName , component ) ; } } public Component getComponent ( String name ) { synchronized ( components ) { Component component = components . get ( name ) ; if ( component == null && autoCreateComponents ) { try { component = getComponentResolver ( ) . resolveComponent ( name , this ) ; if ( component != null ) { addComponent ( name , component ) ; if ( isStarted ( ) ) { startServices ( component ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( "Could not auto create component: " + name , e ) ; } } return component ; } } public < T extends Component > T getComponent ( String name , Class < T > componentType ) { Component component = getComponent ( name ) ; if ( componentType . isInstance ( component ) ) { return componentType . cast ( component ) ; } else { throw new IllegalArgumentException ( "The component is not of type: " + componentType + " but is: " + component ) ; } } public Component removeComponent ( String componentName ) { synchronized ( components ) { return components . remove ( componentName ) ; } } public Component getOrCreateComponent ( String componentName , Callable < Component > factory ) { synchronized ( components ) { Component component = components . get ( componentName ) ; if ( component == null ) { try { component = factory . call ( ) ; if ( component == null ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component, it returned null." ) ; } components . put ( componentName , component ) ; component . setCamelContext ( this ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component" , e ) ; } } return component ; } } public Collection < Endpoint > getSingletonEndpoints ( ) { synchronized ( endpoints ) { return new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } } public Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { startServices ( endpoint ) ; oldEndpoint = endpoints . remove ( uri ) ; endpoints . put ( uri , endpoint ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint removeSingletonEndpoint ( String uri ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { oldEndpoint = endpoints . remove ( uri ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint getEndpoint ( String uri ) { Endpoint answer ; synchronized ( endpoints ) { answer = endpoints . get ( uri ) ; if ( answer == null ) { try { String splitURI [ ] = ObjectHelper . splitOnCharacter ( uri , ":" , 2 ) ; if ( splitURI [ 1 ] != null ) { String scheme = splitURI [ 0 ] ; Component component = getComponent ( scheme ) ; if ( component != null ) { answer = component . createEndpoint ( uri ) ; if ( answer != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( uri + " converted to endpoint: " + answer + " by component: " + component ) ; } } } if ( answer == null ) { answer = createEndpoint ( uri ) ; } if ( answer != null ) { addService ( answer ) ; if ( answer . isSingleton ( ) ) { endpoints . put ( uri , answer ) ; lifecycleStrategy . onEndpointAdd ( answer ) ; } } } catch ( Exception e ) { LOG . debug ( "Failed to resolve endpoint " + uri + ". Reason: " + e , e ) ; throw new ResolveEndpointFailedException ( uri , e ) ; } } } return answer ; } public < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) { Endpoint endpoint = getEndpoint ( name ) ; if ( endpointType . isInstance ( endpoint ) ) { return endpointType . cast ( endpoint ) ; } else { throw new IllegalArgumentException ( "The endpoint is not of type: " + endpointType + " but is: " + endpoint ) ; } } public List < Route > getRoutes ( ) { if ( routes == null ) { routes = new ArrayList < Route > ( ) ; } return routes ; } public void setRoutes ( List < Route > routes ) { this . routes = routes ; } public void addRoutes ( Collection < Route > routes ) throws Exception { if ( this . routes == null ) { this . routes = new ArrayList < Route > ( routes ) ; } else { this . routes . addAll ( routes ) ; } lifecycleStrategy . onRoutesAdd ( routes ) ; if ( shouldStartRoutes ( ) ) { startRoutes ( routes ) ; } } public void addRoutes ( Routes builder ) throws Exception { builder . setContext ( this ) ; List < Route > routeList = builder . getRouteList ( ) ; LOG . debug ( "Adding routes from: " + builder + " routes: " + routeList ) ; addRoutes ( routeList ) ; } public void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception { this . routeDefinitions . addAll ( routeDefinitions ) ; if ( shouldStartRoutes ( ) ) { startRouteDefinitions ( routeDefinitions ) ; } } public void addService ( Object object ) throws Exception { if ( object instanceof Service ) { Service service = ( Service ) object ; service . start ( ) ; servicesToClose . add ( service ) ; } } public Language resolveLanguage ( String language ) { return getLanguageResolver ( ) . resolveLanguage ( language , this ) ; } public ExchangeConverter getExchangeConverter ( ) { if ( exchangeConverter == null ) { exchangeConverter = createExchangeConverter ( ) ; } return exchangeConverter ; } public void setExchangeConverter ( ExchangeConverter exchangeConverter ) { this . exchangeConverter = exchangeConverter ; } public TypeConverter getTypeConverter ( ) { if ( typeConverter == null ) { typeConverter = createTypeConverter ( ) ; } return typeConverter ; } public void setTypeConverter ( TypeConverter typeConverter ) { this . typeConverter = typeConverter ; } public Injector getInjector ( ) { if ( injector == null ) { injector = createInjector ( ) ; } return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } public ComponentResolver getComponentResolver ( ) { if ( componentResolver == null ) { componentResolver = createComponentResolver ( ) ; } return componentResolver ; } public void setComponentResolver ( ComponentResolver componentResolver ) { this . componentResolver = componentResolver ; } public LanguageResolver getLanguageResolver ( ) { return languageResolver ; } public void setLanguageResolver ( LanguageResolver languageResolver ) { this . languageResolver = languageResolver ; } public boolean isAutoCreateComponents ( ) { return autoCreateComponents ; } public void setAutoCreateComponents ( boolean autoCreateComponents ) { this . autoCreateComponents = autoCreateComponents ; } public Registry getRegistry ( ) { if ( registry == null ) { registry = createRegistry ( ) ; } return registry ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public LifecycleStrategy getLifecycleStrategy ( ) { return lifecycleStrategy ; } public void setLifecycleStrategy ( LifecycleStrategy lifecycleStrategy ) { this . lifecycleStrategy = lifecycleStrategy ; } public List < RouteType > getRouteDefinitions ( ) { return routeDefinitions ; } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public boolean getTrace ( ) { final Boolean value = getTracing ( ) ; if ( value != null ) { return value ; } else { return SystemHelper . isSystemProperty ( "canel.trace" ) ; } } public Boolean getTracing ( ) { return trace ; } public void setTrace ( Boolean trace ) { this . trace = trace ; } public < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) { return new DefaultProducerTemplate < E > ( this ) ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void doStart ( ) throws Exception { if ( getTrace ( ) ) { boolean found = false ; final List < InterceptStrategy > list = getInterceptStrategies ( ) ; for ( InterceptStrategy strategy : list ) { if ( strategy instanceof Tracer ) { found = true ; } } if ( ! found ) { addInterceptStrategy ( new Tracer ( ) ) ; } } lifecycleStrategy . onContextStart ( this ) ; forceLazyInitialization ( ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { startServices ( component ) ; } } startRouteDefinitions ( routeDefinitions ) ; startRoutes ( routes ) ; } protected void startRouteDefinitions ( Collection < RouteType > list ) throws Exception { if ( list != null ) { Collection < Route > routes = new ArrayList < Route > ( ) ; for ( RouteType route : list ) { route . addRoutes ( this , routes ) ; } addRoutes ( routes ) ; } } protected void doStop ( ) throws Exception { stopServices ( servicesToClose ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { stopServices ( component ) ; } } } protected void startRoutes ( Collection < Route > routeList ) throws Exception { if ( routeList != null ) { for ( Route < Exchange > route : routeList ) { List < Service > services = route . getServicesForRoute ( ) ; for ( Service service : services ) { addService ( service ) ; } } } } protected void forceLazyInitialization ( ) { getExchangeConverter ( ) ; getInjector ( ) ; getLanguageResolver ( ) ; getTypeConverter ( ) ; } protected ExchangeConverter createExchangeConverter ( ) { return new DefaultExchangeConverter ( ) ; } protected TypeConverter createTypeConverter ( ) { return new DefaultTypeConverter ( getInjector ( ) ) ; } protected Injector createInjector ( ) { FactoryFinder finder = new FactoryFinder ( ) ; try { return ( Injector ) finder . newInstance ( "Injector" ) ; } catch ( NoFactoryAvailableException e ) { return new ReflectionInjector ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } protected ComponentResolver createComponentResolver ( ) { return new DefaultComponentResolver ( ) ; } protected Registry createRegistry ( ) { return new JndiRegistry ( ) ; } protected Endpoint createEndpoint ( String uri ) { Object value = getRegistry ( ) . lookup ( uri ) ; if ( value instanceof Endpoint ) { return ( Endpoint ) value ; } else if ( value instanceof Processor ) { return new ProcessorEndpoint ( uri , this , ( Processor ) value ) ; } else if ( value != null ) { return convertBeanToEndpoint ( uri , value ) ; } return null ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { throw new IllegalArgumentException ( "uri: " + uri + " bean: " + bean + " could not be converted to an Endpoint" ) ; } protected boolean shouldStartRoutes ( ) { return isStarted ( ) && ! isStarting ( ) ; } } 	1
package org . apache . camel . component . http ; import org . apache . commons . httpclient . HttpClient ; public interface HttpClientConfigurer { void configureHttpClient ( HttpClient client ) ; } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class Builder { private Builder ( ) { } public static < E extends Exchange > ValueBuilder < E > constant ( Object value ) { Expression < E > expression = ExpressionBuilder . constantExpression ( value ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > header ( String name ) { Expression < E > expression = ExpressionBuilder . headerExpression ( name ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > body ( ) { Expression < E > expression = ExpressionBuilder . bodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > bodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > bodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > outBody ( ) { Expression < E > expression = ExpressionBuilder . outBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > outBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > outBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > faultBody ( ) { Expression < E > expression = ExpressionBuilder . faultBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > faultBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > faultBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name , final String defaultValue ) { return new ValueBuilder < E > ( ExpressionBuilder . < E > systemProperty ( name , defaultValue ) ) ; } } 	1
package org . apache . camel . component . list ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class ListComponent extends DefaultComponent { protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new ListEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . component . log ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . ThroughputLogger ; public class LogComponent extends DefaultComponent < Exchange > { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { LoggingLevel level = getLoggingLevel ( parameters ) ; Integer groupSize = getAndRemoveParameter ( parameters , "groupSize" , Integer . class ) ; Logger logger ; if ( groupSize != null ) { logger = new ThroughputLogger ( remaining , level , ObjectConverter . toInteger ( groupSize ) ) ; } else { LogFormatter formatter = new LogFormatter ( ) ; IntrospectionSupport . setProperties ( formatter , parameters ) ; logger = new Logger ( remaining ) ; logger . setLevel ( level ) ; logger . setFormatter ( formatter ) ; } return new ProcessorEndpoint ( uri , this , logger ) ; } protected LoggingLevel getLoggingLevel ( Map parameters ) { String levelText = getAndRemoveParameter ( parameters , "level" , String . class , "INFO" ) ; return LoggingLevel . valueOf ( levelText . toUpperCase ( ) ) ; } } 	1
package org . apache . camel . component . cxf ; import java . lang . reflect . Method ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . camel . ExchangePattern ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . frontend . MethodDispatcher ; import org . apache . cxf . helpers . CastUtils ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . MessageContentsList ; import org . apache . cxf . service . Service ; import org . apache . cxf . service . invoker . Invoker ; import org . apache . cxf . service . model . BindingMessageInfo ; import org . apache . cxf . service . model . BindingOperationInfo ; public class CamelInvoker implements Invoker , MessageInvoker { private static final Logger LOG = LogUtils . getL7dLogger ( CamelInvoker . class ) ; private CxfConsumer cxfConsumer ; public CamelInvoker ( CxfConsumer consumer ) { cxfConsumer = consumer ; } public void invoke ( Exchange exchange ) { Message inMessage = exchange . getInMessage ( ) ; CxfEndpoint endpoint = cxfConsumer . getEndpoint ( ) ; CxfExchange cxfExchange = endpoint . createExchange ( inMessage ) ; BindingOperationInfo bop = exchange . get ( BindingOperationInfo . class ) ; if ( bop != null && bop . getOperationInfo ( ) . isOneWay ( ) ) { cxfExchange . setPattern ( ExchangePattern . InOnly ) ; } else { cxfExchange . setPattern ( ExchangePattern . InOut ) ; } try { cxfConsumer . getProcessor ( ) . process ( cxfExchange ) ; } catch ( Exception ex ) { throw new Fault ( ex ) ; } copybackExchange ( cxfExchange , exchange ) ; Message outMessage = exchange . getOutMessage ( ) ; outMessage . put ( Message . INBOUND_MESSAGE , Boolean . FALSE ) ; BindingOperationInfo boi = exchange . get ( BindingOperationInfo . class ) ; if ( boi != null ) { exchange . put ( BindingMessageInfo . class , boi . getOutput ( ) ) ; } } public void copybackExchange ( CxfExchange result , Exchange exchange ) { final Endpoint endpoint = exchange . get ( Endpoint . class ) ; Message outMessage = null ; if ( result . isFailed ( ) ) { CxfMessage fault = result . getFault ( ) ; outMessage = exchange . getInFaultMessage ( ) ; if ( outMessage == null ) { outMessage = endpoint . getBinding ( ) . createMessage ( ) ; outMessage . setExchange ( exchange ) ; exchange . setInFaultMessage ( outMessage ) ; } Exception ex = ( Exception ) fault . getBody ( ) ; outMessage . setContent ( Exception . class , ex ) ; } else { outMessage = result . getOutMessage ( ) ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( "Get the response outMessage " + outMessage ) ; } org . apache . camel . Message camelMessage = result . getOut ( ) ; CxfBinding . copyMessage ( camelMessage , outMessage ) ; } exchange . setOutMessage ( outMessage ) ; } @ SuppressWarnings ( "unchecked" ) public void updateContext ( Map < String , Object > from , Map < String , Object > to ) { if ( to != null && from != null ) { for ( Iterator iter = from . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; String key = ( String ) entry . getKey ( ) ; if ( ! ( Message . INBOUND_MESSAGE . equals ( key ) || Message . REQUESTOR_ROLE . equals ( key ) || Message . PROTOCOL_HEADERS . equals ( key ) ) ) { to . put ( key , entry . getValue ( ) ) ; } } } } public Object invoke ( Exchange exchange , Object o ) { CxfEndpoint endpoint = cxfConsumer . getEndpoint ( ) ; Object params = null ; if ( o instanceof List ) { params = CastUtils . cast ( ( List < ? > ) o ) ; } else if ( o != null ) { params = new MessageContentsList ( o ) ; } CxfExchange cxfExchange = endpoint . createExchange ( exchange . getInMessage ( ) ) ; BindingOperationInfo bop = exchange . get ( BindingOperationInfo . class ) ; MethodDispatcher md = ( MethodDispatcher ) exchange . get ( Service . class ) . get ( MethodDispatcher . class . getName ( ) ) ; Method m = md . getMethod ( bop ) ; if ( bop != null && bop . getOperationInfo ( ) . isOneWay ( ) ) { cxfExchange . setPattern ( ExchangePattern . InOnly ) ; } else { cxfExchange . setPattern ( ExchangePattern . InOut ) ; } if ( bop != null && bop . getName ( ) != null ) { cxfExchange . getIn ( ) . setHeader ( CxfConstants . OPERATION_NAMESPACE , bop . getName ( ) . getNamespaceURI ( ) ) ; cxfExchange . getIn ( ) . setHeader ( CxfConstants . OPERATION_NAME , bop . getName ( ) . getLocalPart ( ) ) ; } else { cxfExchange . getIn ( ) . setHeader ( CxfConstants . OPERATION_NAME , m . getName ( ) ) ; } cxfExchange . getIn ( ) . setBody ( params ) ; try { cxfConsumer . getProcessor ( ) . process ( cxfExchange ) ; } catch ( Exception ex ) { throw new Fault ( ex ) ; } Object result = null ; if ( cxfExchange . isFailed ( ) ) { Exception ex = ( Exception ) cxfExchange . getFault ( ) . getBody ( ) ; if ( ex instanceof Fault ) { throw ( Fault ) ex ; } else { throw new Fault ( ex ) ; } } else { result = cxfExchange . getOut ( ) . getBody ( ) ; if ( result != null ) { if ( result instanceof MessageContentsList || result instanceof List || result . getClass ( ) . isArray ( ) ) { return result ; } else { MessageContentsList resList = new MessageContentsList ( ) ; resList . add ( result ) ; return resList ; } } } return result ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . Externalizable ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . Reader ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import javax . xml . transform . stream . StreamSource ; public class StringSource extends StreamSource implements Externalizable { private String text ; private String encoding = "UTF-8" ; public StringSource ( ) { } public StringSource ( String text ) { if ( text == null ) { throw new NullPointerException ( "text can not be null" ) ; } this . text = text ; } public StringSource ( String text , String systemId ) { this ( text ) ; setSystemId ( systemId ) ; } public StringSource ( String text , String systemId , String encoding ) { this . text = text ; this . encoding = encoding ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { try { return new ByteArrayInputStream ( text . getBytes ( encoding ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } public Reader getReader ( ) { return new StringReader ( text ) ; } public String toString ( ) { return "StringSource[" + text + "]" ; } public String getText ( ) { return text ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public void setText ( String text ) { this . text = text ; } public void writeExternal ( ObjectOutput out ) throws IOException { out . writeUTF ( text ) ; out . writeUTF ( encoding ) ; out . writeUTF ( getPublicId ( ) ) ; out . writeUTF ( getSystemId ( ) ) ; } public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { text = in . readUTF ( ) ; encoding = in . readUTF ( ) ; setPublicId ( in . readUTF ( ) ) ; setSystemId ( in . readUTF ( ) ) ; } } 	1
package org . apache . camel . component . jpa ; import org . apache . camel . Service ; import org . springframework . orm . jpa . JpaCallback ; public interface TransactionStrategy extends Service { Object execute ( JpaCallback callback ) ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ConvertBodyProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( ConvertBodyProcessor . class ) ; private final Class type ; public ConvertBodyProcessor ( Class type ) { this . type = type ; } public void process ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object value = in . getBody ( type ) ; if ( value == null ) { LOG . warn ( "Could not convert body of IN message: " + in + " to type: " + type . getName ( ) ) ; } if ( exchange . getPattern ( ) . isOutCapable ( ) ) { Message out = exchange . getOut ( ) ; out . copyFrom ( in ) ; out . setBody ( value ) ; } else { in . setBody ( value ) ; } } } 	1
package org . apache . camel ; public interface Producer < E extends Exchange > extends Processor , Service { Endpoint < E > getEndpoint ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( E exchange ) ; } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . spi . Synchronization ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultUnitOfWork implements UnitOfWork { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; private String id ; private List < Synchronization > synchronizations ; private List < AsyncCallback > asyncCallbacks ; private CountDownLatch latch ; public DefaultUnitOfWork ( ) { } public synchronized void addSynchronization ( Synchronization synchronization ) { if ( synchronizations == null ) { synchronizations = new ArrayList < Synchronization > ( ) ; } synchronizations . add ( synchronization ) ; } public synchronized void removeSynchronization ( Synchronization synchronization ) { if ( synchronizations != null ) { synchronizations . remove ( synchronization ) ; } } public void reset ( ) { } public void done ( Exchange exchange ) { if ( synchronizations != null ) { boolean failed = exchange . isFailed ( ) ; for ( Synchronization synchronization : synchronizations ) { if ( failed ) { synchronization . onFailure ( exchange ) ; } else { synchronization . onComplete ( exchange ) ; } } } } public boolean isSynchronous ( ) { return asyncCallbacks == null || asyncCallbacks . isEmpty ( ) ; } public String getId ( ) { if ( id == null ) { id = DEFAULT_ID_GENERATOR . generateId ( ) ; } return id ; } } 	1
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; public abstract class PredicateSupport < E extends Exchange > implements Predicate < E > { public void assertMatches ( String text , E exchange ) { if ( ! matches ( exchange ) ) { throw new AssertionError ( assertionFailureMessage ( exchange ) + " on " + exchange ) ; } } protected String assertionFailureMessage ( E exchange ) { return toString ( ) ; } } 	0
package org . apache . camel . model ; public class NodeFactory { public FilterType createFilter ( ) { return new FilterType ( ) ; } public RouteType createRoute ( ) { return new RouteType ( ) ; } } 	1
package org . apache . camel . component . mail ; import javax . mail . Flags ; import javax . mail . Folder ; import javax . mail . FolderNotFoundException ; import javax . mail . Message ; import javax . mail . MessagingException ; import javax . mail . Store ; import javax . mail . search . FlagTerm ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . mail . javamail . JavaMailSenderImpl ; public class MailConsumer extends ScheduledPollConsumer < MailExchange > { public static final long DEFAULT_CONSUMER_DELAY = 60 * 1000L ; private static final transient Log LOG = LogFactory . getLog ( MailConsumer . class ) ; private final MailEndpoint endpoint ; private final JavaMailSenderImpl sender ; private Folder folder ; private Store store ; public MailConsumer ( MailEndpoint endpoint , Processor processor , JavaMailSenderImpl sender ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; this . sender = sender ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { if ( folder != null && folder . isOpen ( ) ) { folder . close ( true ) ; } if ( store != null && store . isConnected ( ) ) { store . close ( ) ; } super . doStop ( ) ; } protected void poll ( ) throws Exception { ensureIsConnected ( ) ; if ( store == null || folder == null ) { throw new IllegalStateException ( "MailConsumer did not connect properly to the MailStore: " + endpoint . getConfiguration ( ) . getMailStoreLogInformation ( ) ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Polling mailfolder: " + endpoint . getConfiguration ( ) . getMailStoreLogInformation ( ) ) ; } if ( endpoint . getConfiguration ( ) . getFetchSize ( ) == 0 ) { LOG . warn ( "Fetch size is 0 meaning the configuration is set to poll no new messages at all. Camel will skip this poll." ) ; return ; } if ( ! folder . isOpen ( ) ) { folder . open ( Folder . READ_WRITE ) ; } try { int count = folder . getMessageCount ( ) ; if ( count > 0 ) { Message [ ] messages ; if ( endpoint . getConfiguration ( ) . isProcessOnlyUnseenMessages ( ) ) { messages = folder . search ( new FlagTerm ( new Flags ( Flags . Flag . SEEN ) , false ) ) ; } else { messages = folder . getMessages ( ) ; } processMessages ( messages ) ; } else if ( count == - 1 ) { throw new MessagingException ( "Folder: " + folder . getFullName ( ) + " is closed" ) ; } } finally { if ( folder . isOpen ( ) ) { folder . close ( true ) ; } } } protected void ensureIsConnected ( ) throws MessagingException { MailConfiguration config = endpoint . getConfiguration ( ) ; if ( store == null || ! store . isConnected ( ) ) { store = sender . getSession ( ) . getStore ( config . getProtocol ( ) ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connecting to MailStore " + endpoint . getConfiguration ( ) . getMailStoreLogInformation ( ) ) ; } store . connect ( config . getHost ( ) , config . getPort ( ) , config . getUsername ( ) , config . getPassword ( ) ) ; } if ( folder == null ) { folder = store . getFolder ( config . getFolderName ( ) ) ; if ( folder == null || ! folder . exists ( ) ) { throw new FolderNotFoundException ( folder , "Folder not found or invalid: " + config . getFolderName ( ) ) ; } } } protected void processMessages ( Message [ ] messages ) throws Exception { int fetchSize = endpoint . getConfiguration ( ) . getFetchSize ( ) ; int count = fetchSize == - 1 ? messages . length : Math . min ( fetchSize , messages . length ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Fetching " + count + " messages. Total " + messages . length + " messages." ) ; } for ( int i = 0 ; i < count ; i ++ ) { Message message = messages [ i ] ; if ( ! message . getFlags ( ) . contains ( Flags . Flag . DELETED ) ) { processMessage ( message ) ; flagMessageProcessed ( message ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Skipping message as it was flagged as deleted: " + MailUtils . dumpMessage ( message ) ) ; } } } } protected void processMessage ( Message message ) throws Exception { MailExchange exchange = endpoint . createExchange ( message ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Processing message: " + MailUtils . dumpMessage ( message ) ) ; } getProcessor ( ) . process ( exchange ) ; } protected void flagMessageProcessed ( Message message ) throws MessagingException { if ( endpoint . getConfiguration ( ) . isDeleteProcessedMessages ( ) ) { message . setFlag ( Flags . Flag . DELETED , true ) ; } else { message . setFlag ( Flags . Flag . SEEN , true ) ; } } } 	0
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class BeanExchange extends DefaultExchange { public BeanExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public BeanExchange ( DefaultExchange parent ) { super ( parent ) ; } public BeanInvocation getInvocation ( ) { return getIn ( ) . getBody ( BeanInvocation . class ) ; } public void setInvocation ( BeanInvocation invocation ) { getIn ( ) . setBody ( invocation ) ; } @ Override public Exchange newInstance ( ) { return new BeanExchange ( this ) ; } } 	1
package org . apache . camel . component . bean ; import java . io . Externalizable ; import java . io . IOException ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import org . apache . camel . Exchange ; import org . apache . camel . util . IOHelper ; import org . apache . camel . util . ObjectHelper ; public class BeanInvocation implements Externalizable { private Object [ ] args ; private MethodBean methodBean ; private transient Method method ; public BeanInvocation ( ) { } public BeanInvocation ( Method method , Object [ ] args ) { this . method = method ; this . args = args ; } @ Override public String toString ( ) { Object list = null ; if ( args != null ) { list = Arrays . asList ( args ) ; } return "BeanInvocation " + method + " with " + list + "]" ; } public Object [ ] getArgs ( ) { return args ; } public Method getMethod ( ) { return method ; } public void setMethod ( Method method ) { this . method = method ; } public void setArgs ( Object [ ] args ) { this . args = args ; } public void invoke ( Object pojo , Exchange exchange ) { try { Object response = getMethod ( ) . invoke ( pojo , getArgs ( ) ) ; exchange . getOut ( ) . setBody ( response ) ; } catch ( InvocationTargetException e ) { exchange . setException ( e . getCause ( ) ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Throwable e ) { throw new RuntimeException ( e ) ; } } public void readExternal ( ObjectInput objectInput ) throws IOException , ClassNotFoundException { methodBean = ObjectHelper . cast ( MethodBean . class , objectInput . readObject ( ) ) ; try { method = methodBean . getMethod ( ) ; } catch ( NoSuchMethodException e ) { throw IOHelper . createIOException ( e ) ; } args = ObjectHelper . cast ( Object [ ] . class , objectInput . readObject ( ) ) ; } public void writeExternal ( ObjectOutput objectOutput ) throws IOException { if ( methodBean == null ) { methodBean = new MethodBean ( method ) ; } objectOutput . writeObject ( methodBean ) ; objectOutput . writeObject ( args ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . processor . ErrorHandlerSupport ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannelBuilder extends ErrorHandlerBuilderSupport { private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; private ExceptionPolicyStrategy exceptionPolicyStrategy = ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ; private ProcessorFactory deadLetterFactory ; private Processor defaultDeadLetterEndpoint ; private Expression defaultDeadLetterEndpointExpression ; private String defaultDeadLetterEndpointUri = "log:org.apache.camel.DeadLetterChannel?level=error" ; private Logger logger = DeadLetterChannel . createDefaultLogger ( ) ; public DeadLetterChannelBuilder ( ) { } public DeadLetterChannelBuilder ( Processor processor ) { this ( new ConstantProcessorBuilder ( processor ) ) ; } public DeadLetterChannelBuilder ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public ErrorHandlerBuilder copy ( ) { DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( deadLetterFactory ) ; answer . setRedeliveryPolicy ( getRedeliveryPolicy ( ) . copy ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { Processor deadLetter = getDeadLetterFactory ( ) . createProcessor ( ) ; DeadLetterChannel answer = new DeadLetterChannel ( processor , deadLetter , getRedeliveryPolicy ( ) , getLogger ( ) , getExceptionPolicyStrategy ( ) ) ; configure ( answer ) ; return answer ; } public DeadLetterChannelBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public DeadLetterChannelBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public DeadLetterChannelBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { getRedeliveryPolicy ( ) . maximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public DeadLetterChannelBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public DeadLetterChannelBuilder logger ( Logger logger ) { setLogger ( logger ) ; return this ; } public DeadLetterChannelBuilder loggingLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; return this ; } public DeadLetterChannelBuilder log ( Log log ) { getLogger ( ) . setLog ( log ) ; return this ; } public DeadLetterChannelBuilder log ( String log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder log ( Class log ) { return log ( LogFactory . getLog ( log ) ) ; } public ErrorHandlerBuilderSupport exceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { setExceptionPolicyStrategy ( exceptionPolicyStrategy ) ; return this ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ProcessorFactory getDeadLetterFactory ( ) { if ( deadLetterFactory == null ) { deadLetterFactory = new ProcessorFactory ( ) { public Processor createProcessor ( ) { return getDefaultDeadLetterEndpoint ( ) ; } } ; } return deadLetterFactory ; } public void setDeadLetterFactory ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public Processor getDefaultDeadLetterEndpoint ( ) { if ( defaultDeadLetterEndpoint == null ) { defaultDeadLetterEndpoint = new RecipientList ( getDefaultDeadLetterEndpointExpression ( ) ) ; } return defaultDeadLetterEndpoint ; } public void setDefaultDeadLetterEndpoint ( Processor defaultDeadLetterEndpoint ) { this . defaultDeadLetterEndpoint = defaultDeadLetterEndpoint ; } public Expression getDefaultDeadLetterEndpointExpression ( ) { if ( defaultDeadLetterEndpointExpression == null ) { defaultDeadLetterEndpointExpression = ExpressionBuilder . constantExpression ( getDefaultDeadLetterEndpointUri ( ) ) ; } return defaultDeadLetterEndpointExpression ; } public void setDefaultDeadLetterEndpointExpression ( Expression defaultDeadLetterEndpointExpression ) { this . defaultDeadLetterEndpointExpression = defaultDeadLetterEndpointExpression ; } public String getDefaultDeadLetterEndpointUri ( ) { return defaultDeadLetterEndpointUri ; } public void setDefaultDeadLetterEndpointUri ( String defaultDeadLetterEndpointUri ) { this . defaultDeadLetterEndpointUri = defaultDeadLetterEndpointUri ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } public ExceptionPolicyStrategy getExceptionPolicyStrategy ( ) { return exceptionPolicyStrategy ; } public void setExceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . exceptionPolicyStrategy = exceptionPolicyStrategy ; } } 	1
package org . apache . camel . component . mock ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . processor . ThroughputLogger ; public class MockComponent extends DefaultComponent < Exchange > { @ Override protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { MockEndpoint endpoint = new MockEndpoint ( uri , this ) ; Integer value = getAndRemoveParameter ( parameters , "reportGroup" , Integer . class ) ; if ( value != null ) { Processor reporter = new ThroughputLogger ( "org.apache.camel.mock:" + remaining , value ) ; endpoint . setReporter ( reporter ) ; } return endpoint ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RoutingSlip extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( RoutingSlip . class ) ; private final String header ; private final String uriDelimiter ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RoutingSlip ( String header ) { this ( header , RoutingSlipType . DEFAULT_DELIMITER ) ; } public RoutingSlip ( String header , String uriDelimiter ) { notNull ( header , "header" ) ; notNull ( uriDelimiter , "uriDelimiter" ) ; this . header = header ; this . uriDelimiter = uriDelimiter ; } @ Override public String toString ( ) { return "RoutingSlip[header=" + header + " uriDelimiter=" + uriDelimiter + "]" ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getIn ( ) ; String [ ] recipients = recipients ( message ) ; Exchange current = exchange ; for ( String nextRecipient : recipients ) { Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , nextRecipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; Exchange ex = endpoint . createExchange ( ExchangePattern . InOut ) ; updateRoutingSlip ( current ) ; copyOutToIn ( ex , current ) ; producer . process ( ex ) ; current = ex ; } ExchangeHelper . copyResults ( exchange , current ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } private void updateRoutingSlip ( Exchange current ) { Message message = getResultMessage ( current ) ; message . setHeader ( header , removeFirstElement ( recipients ( message ) ) ) ; } private Message getResultMessage ( Exchange exchange ) { Message message = exchange . getOut ( false ) ; if ( message == null ) { message = exchange . getIn ( ) ; } return message ; } private String [ ] recipients ( Message message ) { Object headerValue = message . getHeader ( header ) ; if ( headerValue != null && ! headerValue . equals ( "" ) ) { return headerValue . toString ( ) . split ( uriDelimiter ) ; } return new String [ ] { } ; } private String removeFirstElement ( String [ ] elements ) { CollectionStringBuffer updatedElements = new CollectionStringBuffer ( uriDelimiter ) ; for ( int i = 1 ; i < elements . length ; i ++ ) { updatedElements . append ( elements [ i ] ) ; } return updatedElements . toString ( ) ; } private void copyOutToIn ( Exchange result , Exchange source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } result . setIn ( getResultMessage ( source ) ) ; result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } 	1
package org . apache . camel . component . xmpp ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import org . jivesoftware . smack . packet . Message ; public class XmppExchange extends DefaultExchange { private XmppBinding binding ; public XmppExchange ( CamelContext context , ExchangePattern pattern , XmppBinding binding ) { super ( context , pattern ) ; this . binding = binding ; } public XmppExchange ( CamelContext context , ExchangePattern pattern , XmppBinding binding , Message message ) { this ( context , pattern , binding ) ; setIn ( new XmppMessage ( message ) ) ; } public XmppExchange ( DefaultExchange parent , XmppBinding binding ) { super ( parent ) ; this . binding = binding ; } @ Override public XmppMessage getIn ( ) { return ( XmppMessage ) super . getIn ( ) ; } @ Override public XmppMessage getOut ( ) { return ( XmppMessage ) super . getOut ( ) ; } @ Override public XmppMessage getOut ( boolean lazyCreate ) { return ( XmppMessage ) super . getOut ( lazyCreate ) ; } @ Override public XmppMessage getFault ( ) { return ( XmppMessage ) super . getFault ( ) ; } public XmppBinding getBinding ( ) { return binding ; } @ Override public Exchange newInstance ( ) { return new XmppExchange ( this , binding ) ; } public Message getInMessage ( ) { return getIn ( ) . getXmppMessage ( ) ; } public Message getOutMessage ( ) { return getOut ( ) . getXmppMessage ( ) ; } public Message getFaultMessage ( ) { return getOut ( ) . getXmppMessage ( ) ; } @ Override protected XmppMessage createInMessage ( ) { return new XmppMessage ( ) ; } @ Override protected XmppMessage createOutMessage ( ) { return new XmppMessage ( ) ; } } 	0
package org . apache . camel . component . log ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . util . ObjectHelper ; public class LogFormatter implements ExchangeFormatter { private boolean showExchangeId ; private boolean showProperties ; private boolean showHeaders ; private boolean showBodyType = true ; private boolean showBody = true ; private boolean showOut ; private boolean showAll ; private boolean multiline ; public Object format ( Exchange exchange ) { Message in = exchange . getIn ( ) ; StringBuilder sb = new StringBuilder ( "" ) ; if ( showAll || showExchangeId ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Id:" ) . append ( exchange . getExchangeId ( ) ) ; } if ( showAll || showProperties ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Properties:" ) . append ( exchange . getProperties ( ) ) ; } if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Headers:" ) . append ( in . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", BodyType:" ) . append ( getBodyTypeAsString ( in ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Body:" ) . append ( getBodyAsString ( in ) ) ; } Message out = exchange . getOut ( false ) ; if ( showAll || showOut ) { if ( out != null ) { if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutHeaders:" ) . append ( out . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBodyType:" ) . append ( getBodyTypeAsString ( out ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBody:" ) . append ( getBodyAsString ( out ) ) ; } } else { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Out: null" ) ; } } return "Exchange[" + ( multiline ? sb . append ( ']' ) . toString ( ) : sb . toString ( ) . substring ( 2 ) + "]" ) ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowOut ( ) { return showOut ; } public void setShowOut ( boolean showOut ) { this . showOut = showOut ; } public boolean isShowAll ( ) { return showAll ; } public void setShowAll ( boolean showAll ) { this . showAll = showAll ; } public boolean isMultiline ( ) { return multiline ; } public void setMultiline ( boolean multiline ) { this . multiline = multiline ; } protected Object getBodyAsString ( Message message ) { Object answer = message . getBody ( String . class ) ; if ( answer == null ) { answer = message . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } } 	1
package org . apache . camel . component . http ; import java . io . IOException ; import java . io . InputStream ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . camel . Message ; public class HttpBinding { public static final Set < String > DEFAULT_HEADERS_TO_IGNORE = new HashSet < String > ( Arrays . asList ( "content-length" , "content-type" , HttpProducer . HTTP_RESPONSE_CODE . toLowerCase ( ) ) ) ; private Set < String > ignoredHeaders = DEFAULT_HEADERS_TO_IGNORE ; private boolean useReaderForPayload ; public void writeResponse ( HttpExchange exchange , HttpServletResponse response ) throws IOException { Message out = exchange . getOut ( ) ; if ( out != null ) { if ( out . getHeader ( HttpProducer . HTTP_RESPONSE_CODE ) != null ) { int responseCode = ( ( Integer ) out . getHeader ( HttpProducer . HTTP_RESPONSE_CODE ) ) . intValue ( ) ; response . setStatus ( responseCode ) ; } for ( String key : out . getHeaders ( ) . keySet ( ) ) { String value = out . getHeader ( key , String . class ) ; if ( shouldHeaderBePropagated ( key , value ) ) { response . setHeader ( key , value ) ; } } if ( out . getBody ( ) != null ) { InputStream is = out . getBody ( InputStream . class ) ; if ( is != null ) { ServletOutputStream os = response . getOutputStream ( ) ; int c ; while ( ( c = is . read ( ) ) >= 0 ) { os . write ( c ) ; } } else { String data = out . getBody ( String . class ) ; if ( data != null ) { response . getWriter ( ) . print ( data ) ; } } } } } public Object parseBody ( HttpMessage httpMessage ) throws IOException { HttpServletRequest request = httpMessage . getRequest ( ) ; if ( isUseReaderForPayload ( ) ) { return request . getReader ( ) ; } else { return request . getInputStream ( ) ; } } public boolean shouldHeaderBePropagated ( String headerName , String headerValue ) { if ( headerValue == null ) { return false ; } if ( headerName . startsWith ( "org.apache.camel" ) ) { return false ; } if ( getIgnoredHeaders ( ) . contains ( headerName . toLowerCase ( ) ) ) { return false ; } return true ; } public void setIgnoredHeaders ( Set < String > headersToIgnore ) { ignoredHeaders = headersToIgnore ; } public Set < String > getIgnoredHeaders ( ) { return ignoredHeaders ; } public boolean isUseReaderForPayload ( ) { return useReaderForPayload ; } public void setUseReaderForPayload ( boolean useReaderForPayload ) { this . useReaderForPayload = useReaderForPayload ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . idempotent . IdempotentConsumer ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "idempotentConsumer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class IdempotentConsumerType extends ExpressionNode { @ XmlAttribute private String messageIdRepositoryRef ; @ XmlTransient private MessageIdRepository messageIdRepository ; public IdempotentConsumerType ( ) { } public IdempotentConsumerType ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { super ( messageIdExpression ) ; this . messageIdRepository = messageIdRepository ; } @ Override public String toString ( ) { return "IdempotentConsumer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "idempotentConsumer" ; } public String getMessageIdRepositoryRef ( ) { return messageIdRepositoryRef ; } public void setMessageIdRepositoryRef ( String messageIdRepositoryRef ) { this . messageIdRepositoryRef = messageIdRepositoryRef ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public void setMessageIdRepository ( MessageIdRepository messageIdRepository ) { this . messageIdRepository = messageIdRepository ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; MessageIdRepository messageIdRepository = resolveMessageIdRepository ( routeContext ) ; return new IdempotentConsumer ( getExpression ( ) . createExpression ( routeContext ) , messageIdRepository , childProcessor ) ; } public MessageIdRepository resolveMessageIdRepository ( RouteContext routeContext ) { if ( messageIdRepository == null ) { messageIdRepository = routeContext . lookup ( messageIdRepositoryRef , MessageIdRepository . class ) ; } return messageIdRepository ; } } 	1
package org . apache . camel . component . cxf . invoker ; import java . util . Map ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; public interface InvokingContext { void setRequestOutMessageContent ( Message message , Map < Class , Object > contents ) ; Object getResponseObject ( Exchange exchange , Map < String , Object > responseContext ) ; void setResponseContent ( Message outMessage , Object resultPayload ) ; Map < Class , Object > getRequestContent ( Message inMessage ) ; } 	0
package org . apache . camel ; import java . util . List ; public interface Routes { CamelContext getContext ( ) ; void setContext ( CamelContext context ) ; List < Route > getRouteList ( ) throws Exception ; } 	1
package org . apache . camel . component . test ; import java . net . URI ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; public class TestComponent extends DefaultComponent < Exchange > { public Endpoint < Exchange > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; return createEndpoint ( uri , path , new HashMap ( ) ) ; } @ Override protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { Endpoint endpoint = CamelContextHelper . getMandatoryEndpoint ( getCamelContext ( ) , remaining ) ; return new TestEndpoint ( uri , this , endpoint ) ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . ObjectHelper ; public class TraceFormatter { private boolean showBreadCrumb = true ; private boolean showNode = true ; private boolean showExchangeId ; private boolean showProperties = true ; private boolean showHeaders = true ; private boolean showBody = true ; private boolean showBodyType = true ; public Object format ( TraceInterceptor interceptor , Exchange exchange ) { Message in = exchange . getIn ( ) ; Throwable exception = exchange . getException ( ) ; return ( showBreadCrumb ? getBreadCrumbID ( exchange ) + " " : "" ) + "-> " + getNodeMessage ( interceptor ) + " " + ( showNode ? interceptor . getNode ( ) + " " : "" ) + exchange . getPattern ( ) + ( showExchangeId ? " Id: " + exchange . getExchangeId ( ) : "" ) + ( showProperties ? " Properties:" + exchange . getProperties ( ) : "" ) + ( showHeaders ? " Headers:" + in . getHeaders ( ) : "" ) + ( showBodyType ? " BodyType:" + getBodyTypeAsString ( in ) : "" ) + ( showBody ? " Body:" + getBodyAsString ( in ) : "" ) + ( exception != null ? " Exception: " + exception : "" ) ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBreadCrumb ( ) { return showBreadCrumb ; } public void setShowBreadCrumb ( boolean showBreadCrumb ) { this . showBreadCrumb = showBreadCrumb ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowNode ( ) { return showNode ; } public void setShowNode ( boolean showNode ) { this . showNode = showNode ; } protected Object getBreadCrumbID ( Exchange exchange ) { UnitOfWork unitOfWork = exchange . getUnitOfWork ( ) ; return unitOfWork . getId ( ) ; } protected Object getBodyAsString ( Message in ) { Object answer = in . getBody ( String . class ) ; if ( answer == null ) { answer = in . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } protected String getNodeMessage ( TraceInterceptor interceptor ) { return interceptor . getNode ( ) . idOrCreate ( ) ; } } 	1
package org . apache . camel . component . cxf . invoker ; import java . util . List ; import org . w3c . dom . Element ; public class PayloadMessage { private List < Element > payload ; private Element header ; public PayloadMessage ( List < Element > payload , Element header ) { this . payload = payload ; this . header = header ; } public List < Element > getPayload ( ) { return payload ; } public Element getHeader ( ) { return header ; } public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( "payload: " + payload ) ; buf . append ( " header: " + header ) ; return buf . toString ( ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; public class CamelInvocationHandler implements InvocationHandler { private final Endpoint endpoint ; private final Producer producer ; public CamelInvocationHandler ( Endpoint endpoint , Producer producer ) { this . endpoint = endpoint ; this . producer = producer ; } public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { BeanInvocation invocation = new BeanInvocation ( method , args ) ; BeanExchange exchange = new BeanExchange ( endpoint . getCamelContext ( ) , ExchangePattern . InOut ) ; exchange . setInvocation ( invocation ) ; producer . process ( exchange ) ; Throwable fault = exchange . getException ( ) ; if ( fault != null ) { throw new InvocationTargetException ( fault ) ; } return exchange . getOut ( true ) . getBody ( ) ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import org . apache . http . ConnectionReuseStrategy ; import org . apache . http . HttpException ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . HttpResponseFactory ; import org . apache . http . HttpStatus ; import org . apache . http . HttpVersion ; import org . apache . http . ProtocolVersion ; import org . apache . http . impl . DefaultConnectionReuseStrategy ; import org . apache . http . impl . DefaultHttpResponseFactory ; import org . apache . http . nio . NHttpServerConnection ; import org . apache . http . nio . util . ByteBufferAllocator ; import org . apache . http . params . HttpParams ; import org . apache . http . params . HttpParamsLinker ; import org . apache . http . protocol . BasicHttpProcessor ; import org . apache . http . protocol . ExecutionContext ; import org . apache . http . protocol . HttpContext ; import org . apache . http . protocol . HttpProcessor ; import org . apache . http . protocol . HttpRequestHandler ; import org . apache . http . protocol . ResponseConnControl ; import org . apache . http . protocol . ResponseContent ; import org . apache . http . protocol . ResponseDate ; import org . apache . http . protocol . ResponseServer ; public class AsyncBufferingHttpServiceHandler extends BufferingHttpServiceHandler { public AsyncBufferingHttpServiceHandler ( final HttpParams params ) { super ( createDefaultProcessor ( ) , new DefaultHttpResponseFactory ( ) , new DefaultConnectionReuseStrategy ( ) , params ) ; } public AsyncBufferingHttpServiceHandler ( final HttpProcessor httpProcessor , final HttpResponseFactory responseFactory , final ConnectionReuseStrategy connStrategy , final HttpParams params ) { super ( httpProcessor , responseFactory , connStrategy , params ) ; } public AsyncBufferingHttpServiceHandler ( final HttpProcessor httpProcessor , final HttpResponseFactory responseFactory , final ConnectionReuseStrategy connStrategy , final ByteBufferAllocator allocator , final HttpParams params ) { super ( httpProcessor , responseFactory , connStrategy , allocator , params ) ; } protected static HttpProcessor createDefaultProcessor ( ) { BasicHttpProcessor httpproc = new BasicHttpProcessor ( ) ; httpproc . addInterceptor ( new ResponseDate ( ) ) ; httpproc . addInterceptor ( new ResponseServer ( ) ) ; httpproc . addInterceptor ( new ResponseContent ( ) ) ; httpproc . addInterceptor ( new ResponseConnControl ( ) ) ; return httpproc ; } protected void processRequest ( final NHttpServerConnection conn , final HttpRequest request ) throws IOException , HttpException { HttpContext context = conn . getContext ( ) ; ProtocolVersion ver = request . getRequestLine ( ) . getProtocolVersion ( ) ; if ( ! ver . lessEquals ( HttpVersion . HTTP_1_1 ) ) { ver = HttpVersion . HTTP_1_1 ; } context . setAttribute ( ExecutionContext . HTTP_REQUEST , request ) ; context . setAttribute ( ExecutionContext . HTTP_CONNECTION , conn ) ; try { this . httpProcessor . process ( request , context ) ; HttpRequestHandler handler = null ; if ( handlerResolver != null ) { String requestURI = request . getRequestLine ( ) . getUri ( ) ; handler = handlerResolver . lookup ( requestURI ) ; } if ( handler != null ) { if ( handler instanceof AsyncHttpRequestHandler ) { ( ( AsyncHttpRequestHandler ) handler ) . handle ( request , context , new AsyncResponseHandler ( ) { public void sendResponse ( HttpResponse response ) throws IOException , HttpException { try { AsyncBufferingHttpServiceHandler . this . sendResponse ( conn , response ) ; } catch ( HttpException ex ) { response = AsyncBufferingHttpServiceHandler . this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , conn . getContext ( ) ) ; HttpParamsLinker . link ( response , AsyncBufferingHttpServiceHandler . this . params ) ; AsyncBufferingHttpServiceHandler . this . handleException ( ex , response ) ; AsyncBufferingHttpServiceHandler . this . sendResponse ( conn , response ) ; } } } ) ; } else { HttpResponse response = this . responseFactory . newHttpResponse ( ver , HttpStatus . SC_OK , conn . getContext ( ) ) ; HttpParamsLinker . link ( response , this . params ) ; context . setAttribute ( ExecutionContext . HTTP_RESPONSE , response ) ; handler . handle ( request , response , context ) ; sendResponse ( conn , response ) ; } } else { HttpResponse response = this . responseFactory . newHttpResponse ( ver , HttpStatus . SC_OK , conn . getContext ( ) ) ; response . setStatusCode ( HttpStatus . SC_NOT_IMPLEMENTED ) ; } } catch ( HttpException ex ) { HttpResponse response = this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , context ) ; HttpParamsLinker . link ( response , this . params ) ; handleException ( ex , response ) ; sendResponse ( conn , response ) ; } } } 	0
package org . apache . camel ; @ Deprecated public class InvalidHeaderTypeException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; private final Object headerValue ; public InvalidHeaderTypeException ( Throwable cause , Object headerValue ) { super ( cause . getMessage ( ) + " headerValue is: " + headerValue + " of type: " + typeName ( headerValue ) , cause ) ; this . headerValue = headerValue ; } public InvalidHeaderTypeException ( String message , Object headerValue ) { super ( message ) ; this . headerValue = headerValue ; } public Object getHeaderValue ( ) { return headerValue ; } protected static String typeName ( Object headerValue ) { return ( headerValue != null ) ? headerValue . getClass ( ) . getName ( ) : "null" ; } } 	1
package org . apache . camel . processor ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . ThreadFactory ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Service ; import org . apache . camel . util . AsyncProcessorHelper ; public class ThreadProcessor implements AsyncProcessor , Service { private ThreadPoolExecutor executor ; private long stackSize ; private ThreadGroup threadGroup ; private int priority = Thread . NORM_PRIORITY ; private boolean daemon = true ; private String name = "Thread Processor" ; private BlockingQueue < Runnable > taskQueue ; private long keepAliveTime ; private int maxSize = 1 ; private int coreSize = 1 ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; private boolean callerRunsWhenRejected = true ; class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; public ProcessCall ( Exchange exchange , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( false ) ; } } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( shutdown . get ( ) ) { throw new IllegalStateException ( "ThreadProcessor is not running." ) ; } ProcessCall call = new ProcessCall ( exchange , callback ) ; try { executor . execute ( call ) ; return false ; } catch ( RejectedExecutionException e ) { if ( callerRunsWhenRejected ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } else { callback . done ( true ) ; } } else { exchange . setException ( e ) ; } return true ; } } public void start ( ) throws Exception { shutdown . set ( false ) ; getExecutor ( ) ; } public void stop ( ) throws Exception { shutdown . set ( true ) ; executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } public long getStackSize ( ) { return stackSize ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public ThreadGroup getThreadGroup ( ) { return threadGroup ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public int getPriority ( ) { return priority ; } public void setPriority ( int priority ) { this . priority = priority ; } public boolean isDaemon ( ) { return daemon ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public long getKeepAliveTime ( ) { return keepAliveTime ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public int getMaxSize ( ) { return maxSize ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public int getCoreSize ( ) { return coreSize ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public BlockingQueue < Runnable > getTaskQueue ( ) { if ( taskQueue == null ) { taskQueue = new ArrayBlockingQueue < Runnable > ( 1000 ) ; } return taskQueue ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public ThreadPoolExecutor getExecutor ( ) { if ( executor == null ) { executor = new ThreadPoolExecutor ( getCoreSize ( ) , getMaxSize ( ) , getKeepAliveTime ( ) , TimeUnit . MILLISECONDS , getTaskQueue ( ) , new ThreadFactory ( ) { public Thread newThread ( Runnable runnable ) { Thread thread ; if ( getStackSize ( ) > 0 ) { thread = new Thread ( getThreadGroup ( ) , runnable , getName ( ) , getStackSize ( ) ) ; } else { thread = new Thread ( getThreadGroup ( ) , runnable , getName ( ) ) ; } thread . setDaemon ( isDaemon ( ) ) ; thread . setPriority ( getPriority ( ) ) ; return thread ; } } ) ; } return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } public boolean isCallerRunsWhenRejected ( ) { return callerRunsWhenRejected ; } public void setCallerRunsWhenRejected ( boolean callerRunsWhenRejected ) { this . callerRunsWhenRejected = callerRunsWhenRejected ; } } 	0
package org . apache . camel ; import java . util . Map ; import org . apache . camel . spi . UnitOfWork ; public interface Exchange { ExchangePattern getPattern ( ) ; void setPattern ( ExchangePattern pattern ) ; Object getProperty ( String name ) ; < T > T getProperty ( String name , Class < T > type ) ; void setProperty ( String name , Object value ) ; Object removeProperty ( String name ) ; Map < String , Object > getProperties ( ) ; Message getIn ( ) ; void setIn ( Message in ) ; Message getOut ( ) ; Message getOut ( boolean lazyCreate ) ; void setOut ( Message out ) ; Message getFault ( ) ; Message getFault ( boolean lazyCreate ) ; Throwable getException ( ) ; void setException ( Throwable e ) ; boolean isFailed ( ) ; boolean isTransacted ( ) ; CamelContext getContext ( ) ; Exchange newInstance ( ) ; Exchange copy ( ) ; void copyFrom ( Exchange source ) ; UnitOfWork getUnitOfWork ( ) ; void setUnitOfWork ( UnitOfWork unitOfWork ) ; String getExchangeId ( ) ; void setExchangeId ( String id ) ; } 	1
package org . apache . camel . component . dataset ; import org . apache . camel . Processor ; public class SimpleDataSet extends DataSetSupport { private Object defaultBody = "<hello>world!</hello>" ; private Processor inputTransformer ; public SimpleDataSet ( ) { } public SimpleDataSet ( int size ) { super ( size ) ; } public Object getDefaultBody ( ) { return defaultBody ; } public void setDefaultBody ( Object defaultBody ) { this . defaultBody = defaultBody ; } public Processor getInputTransformer ( ) { return inputTransformer ; } public void setInputTransformer ( Processor inputTransformer ) { this . inputTransformer = inputTransformer ; } protected Object createMessageBody ( long messageIndex ) { return getDefaultBody ( ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . RedeliveryPolicy ; @ XmlRootElement ( name = "redeliveryPolicy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RedeliveryPolicyType { private Integer maximumRedeliveries ; private Long initialRedeliveryDelay ; private Double backOffMultiplier ; private Boolean useExponentialBackOff ; private Double collisionAvoidanceFactor ; private Boolean useCollisionAvoidance ; public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; if ( maximumRedeliveries != null ) { answer . setMaximumRedeliveries ( maximumRedeliveries ) ; } if ( initialRedeliveryDelay != null ) { answer . setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; } if ( backOffMultiplier != null ) { answer . setBackOffMultiplier ( backOffMultiplier ) ; } if ( useExponentialBackOff != null ) { answer . setUseExponentialBackOff ( useExponentialBackOff ) ; } if ( collisionAvoidanceFactor != null ) { answer . setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; } if ( useCollisionAvoidance != null ) { answer . setUseCollisionAvoidance ( useCollisionAvoidance ) ; } return answer ; } public String toString ( ) { return "RedeliveryPolicy[maxRedeliveries: " + maximumRedeliveries + "]" ; } public RedeliveryPolicyType backOffMultiplier ( double backOffMultiplier ) { setBackOffMultiplier ( backOffMultiplier ) ; return this ; } public RedeliveryPolicyType collisionAvoidancePercent ( double collisionAvoidancePercent ) { setCollisionAvoidanceFactor ( collisionAvoidancePercent * 0.01d ) ; return this ; } public RedeliveryPolicyType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public RedeliveryPolicyType initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicyType maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicyType useCollisionAvoidance ( ) { setUseCollisionAvoidance ( Boolean . TRUE ) ; return this ; } public RedeliveryPolicyType useExponentialBackOff ( ) { setUseExponentialBackOff ( Boolean . TRUE ) ; return this ; } public Double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( Double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public Double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( Double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public Long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( Long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public Integer getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( Integer maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public Boolean getUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( Boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public Boolean getUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( Boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } } 	1
package org . apache . camel . dataformat . csv ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . csv . CSVParser ; import org . apache . commons . csv . CSVStrategy ; import org . apache . commons . csv . writer . CSVConfig ; import org . apache . commons . csv . writer . CSVField ; import org . apache . commons . csv . writer . CSVWriter ; public class CsvDataFormat implements DataFormat { private CSVStrategy strategy = CSVStrategy . DEFAULT_STRATEGY ; private CSVConfig config = new CSVConfig ( ) ; public void marshal ( Exchange exchange , Object object , OutputStream outputStream ) throws Exception { Map map = ExchangeHelper . convertToMandatoryType ( exchange , Map . class , object ) ; OutputStreamWriter out = new OutputStreamWriter ( outputStream ) ; try { CSVConfig conf = getConfig ( ) ; Set set = map . keySet ( ) ; for ( Object value : set ) { if ( value != null ) { String text = value . toString ( ) ; CSVField field = new CSVField ( text ) ; conf . addField ( field ) ; } } CSVWriter writer = new CSVWriter ( conf ) ; writer . setWriter ( out ) ; writer . writeRecord ( map ) ; } finally { out . close ( ) ; } } public Object unmarshal ( Exchange exchange , InputStream inputStream ) throws Exception { InputStreamReader in = new InputStreamReader ( inputStream ) ; try { CSVParser parser = new CSVParser ( in , getStrategy ( ) ) ; List < List < String > > list = new ArrayList < List < String > > ( ) ; while ( true ) { String [ ] strings = parser . getLine ( ) ; if ( strings == null ) { break ; } List < String > line = Arrays . asList ( strings ) ; list . add ( line ) ; } if ( list . size ( ) == 1 ) { return list . get ( 0 ) ; } else { return list ; } } finally { in . close ( ) ; } } public CSVConfig getConfig ( ) { if ( config == null ) { config = createConfig ( ) ; } return config ; } public void setConfig ( CSVConfig config ) { this . config = config ; } public CSVStrategy getStrategy ( ) { return strategy ; } public void setStrategy ( CSVStrategy strategy ) { this . strategy = strategy ; } protected CSVConfig createConfig ( ) { return new CSVConfig ( ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingErrorHandler ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandlerBuilder extends ErrorHandlerBuilderSupport { private Log log = LogFactory . getLog ( Logger . class ) ; private LoggingLevel level = LoggingLevel . INFO ; public LoggingErrorHandlerBuilder ( ) { } public LoggingErrorHandlerBuilder ( Log log ) { this . log = log ; } public LoggingErrorHandlerBuilder ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public ErrorHandlerBuilder copy ( ) { LoggingErrorHandlerBuilder answer = new LoggingErrorHandlerBuilder ( ) ; answer . setLog ( getLog ( ) ) ; answer . setLevel ( getLevel ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) { LoggingErrorHandler handler = new LoggingErrorHandler ( processor , log , level ) ; configure ( handler ) ; return handler ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } } 	1
package org . apache . camel . component . jms . requestor ; import java . math . BigInteger ; import java . util . Random ; import java . util . concurrent . ScheduledExecutorService ; import javax . jms . Destination ; import javax . jms . ExceptionListener ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . Session ; import org . apache . camel . component . jms . JmsConfiguration ; import org . apache . camel . component . jms . requestor . DeferredRequestReplyMap . DeferredMessageSentCallback ; import org . springframework . core . task . TaskExecutor ; import org . springframework . jms . listener . AbstractMessageListenerContainer ; import org . springframework . jms . listener . DefaultMessageListenerContainer ; import org . springframework . jms . listener . DefaultMessageListenerContainer102 ; import org . springframework . jms . support . destination . DestinationResolver ; import org . springframework . transaction . PlatformTransactionManager ; public class PersistentReplyToRequestor extends Requestor { private String replyToSelectorValue ; public class DestinationResolverDelegate implements DestinationResolver { private DestinationResolver delegate ; private Destination destination ; public DestinationResolverDelegate ( DestinationResolver delegate ) { this . delegate = delegate ; } public Destination resolveDestinationName ( Session session , String destinationName , boolean pubSubDomain ) throws JMSException { synchronized ( getOutterInstance ( ) ) { try { if ( destination == null ) { destination = delegate . resolveDestinationName ( session , destinationName , pubSubDomain ) ; setReplyTo ( destination ) ; } } finally { getOutterInstance ( ) . notifyAll ( ) ; } } return destination ; } } ; public static interface MessageSelectorComposer { void addCorrelationID ( String id ) ; void removeCorrelationID ( String id ) ; } public static class CamelDefaultMessageListenerContainer102 extends DefaultMessageListenerContainer102 implements MessageSelectorComposer { MessageSelectorProvider provider = new MessageSelectorProvider ( ) ; public void addCorrelationID ( String id ) { provider . addCorrelationID ( id ) ; } public void removeCorrelationID ( String id ) { provider . removeCorrelationID ( id ) ; } @ Override public void setMessageSelector ( String messageSelector ) { throw new UnsupportedOperationException ( ) ; } @ Override public String getMessageSelector ( ) { return provider . get ( ) ; } } public static class CamelDefaultMessageListenerContainer extends DefaultMessageListenerContainer implements MessageSelectorComposer { MessageSelectorProvider provider = new MessageSelectorProvider ( ) ; public void addCorrelationID ( String id ) { provider . addCorrelationID ( id ) ; } public void removeCorrelationID ( String id ) { provider . removeCorrelationID ( id ) ; } @ Override public void setMessageSelector ( String messageSelector ) { throw new UnsupportedOperationException ( ) ; } @ Override public String getMessageSelector ( ) { return provider . get ( ) ; } } public PersistentReplyToRequestor ( JmsConfiguration configuration , ScheduledExecutorService executorService ) { super ( configuration , executorService ) ; } @ Override protected FutureHandler createFutureHandler ( String correlationID ) { boolean dynamicSelector = getConfiguration ( ) . getReplyToDestinationSelectorName ( ) == null ; if ( dynamicSelector ) { return new PersistentReplyToFutureHandler ( this , correlationID ) ; } return new FutureHandler ( ) ; } @ Override protected FutureHandler createFutureHandler ( DeferredMessageSentCallback callback ) { boolean dynamicSelector = getConfiguration ( ) . getReplyToDestinationSelectorName ( ) == null ; if ( dynamicSelector ) { return new PersistentReplyToFutureHandler ( this , callback ) ; } return new FutureHandler ( ) ; } @ Override public AbstractMessageListenerContainer createListenerContainer ( ) { JmsConfiguration config = getConfiguration ( ) ; String replyToSelectorName = getConfiguration ( ) . getReplyToDestinationSelectorName ( ) ; AbstractMessageListenerContainer container = config . isUseVersion102 ( ) ? ( replyToSelectorName != null ) ? new DefaultMessageListenerContainer102 ( ) : new CamelDefaultMessageListenerContainer102 ( ) : ( replyToSelectorName != null ) ? new DefaultMessageListenerContainer ( ) : new CamelDefaultMessageListenerContainer ( ) ; container . setConnectionFactory ( config . getListenerConnectionFactory ( ) ) ; DestinationResolver resolver = config . getDestinationResolver ( ) ; if ( resolver == null ) { resolver = container . getDestinationResolver ( ) ; } container . setDestinationResolver ( new DestinationResolverDelegate ( resolver ) ) ; container . setDestinationName ( getConfiguration ( ) . getReplyTo ( ) ) ; if ( replyToSelectorName != null ) { replyToSelectorValue = "ID:" + new BigInteger ( 24 * 8 , new Random ( ) ) . toString ( 16 ) ; container . setMessageSelector ( replyToSelectorName + "='" + replyToSelectorValue + "'" ) ; } else { ( ( MessageSelectorComposer ) container ) . addCorrelationID ( "ID:" + new BigInteger ( 24 * 8 , new Random ( ) ) . toString ( 16 ) ) ; } container . setAutoStartup ( true ) ; container . setMessageListener ( this ) ; container . setPubSubDomain ( false ) ; container . setSubscriptionDurable ( false ) ; ExceptionListener exceptionListener = config . getExceptionListener ( ) ; if ( exceptionListener != null ) { container . setExceptionListener ( exceptionListener ) ; } container . setSessionTransacted ( config . isTransacted ( ) ) ; if ( config . isTransacted ( ) ) { container . setSessionAcknowledgeMode ( Session . SESSION_TRANSACTED ) ; } else { if ( config . getAcknowledgementMode ( ) >= 0 ) { container . setSessionAcknowledgeMode ( config . getAcknowledgementMode ( ) ) ; } else if ( config . getAcknowledgementModeName ( ) != null ) { container . setSessionAcknowledgeModeName ( config . getAcknowledgementModeName ( ) ) ; } } if ( container instanceof DefaultMessageListenerContainer ) { DefaultMessageListenerContainer defContainer = ( DefaultMessageListenerContainer ) container ; defContainer . setConcurrentConsumers ( 1 ) ; defContainer . setCacheLevel ( DefaultMessageListenerContainer . CACHE_SESSION ) ; if ( config . getReceiveTimeout ( ) >= 0 ) { defContainer . setReceiveTimeout ( config . getReceiveTimeout ( ) ) ; } if ( config . getRecoveryInterval ( ) >= 0 ) { defContainer . setRecoveryInterval ( config . getRecoveryInterval ( ) ) ; } TaskExecutor taskExecutor = config . getTaskExecutor ( ) ; if ( taskExecutor != null ) { defContainer . setTaskExecutor ( taskExecutor ) ; } PlatformTransactionManager tm = config . getTransactionManager ( ) ; if ( tm != null ) { defContainer . setTransactionManager ( tm ) ; } else if ( config . isTransacted ( ) ) { throw new IllegalArgumentException ( "Property transacted is enabled but a transactionManager was not injected!" ) ; } if ( config . getTransactionName ( ) != null ) { defContainer . setTransactionName ( config . getTransactionName ( ) ) ; } if ( config . getTransactionTimeout ( ) >= 0 ) { defContainer . setTransactionTimeout ( config . getTransactionTimeout ( ) ) ; } } return container ; } @ Override public void setReplyToSelectorHeader ( org . apache . camel . Message in , Message jmsIn ) throws JMSException { String replyToSelectorName = getConfiguration ( ) . getReplyToDestinationSelectorName ( ) ; if ( replyToSelectorValue != null ) { in . setHeader ( replyToSelectorName , replyToSelectorValue ) ; jmsIn . setStringProperty ( replyToSelectorName , replyToSelectorValue ) ; } } } 	0
package org . apache . camel . impl ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . util . ObjectHelper ; public abstract class DefaultEndpoint < E extends Exchange > implements Endpoint < E > , CamelContextAware { private String endpointUri ; private CamelContext camelContext ; private Component component ; private ScheduledExecutorService executorService ; private ExchangePattern exchangePattern = ExchangePattern . InOnly ; protected DefaultEndpoint ( String endpointUri , Component component ) { this ( endpointUri , component . getCamelContext ( ) ) ; this . component = component ; } protected DefaultEndpoint ( String endpointUri , CamelContext camelContext ) { this ( endpointUri ) ; this . camelContext = camelContext ; } protected DefaultEndpoint ( String endpointUri ) { this . setEndpointUri ( endpointUri ) ; } protected DefaultEndpoint ( ) { } public int hashCode ( ) { return getEndpointUri ( ) . hashCode ( ) * 37 + 1 ; } @ Override public boolean equals ( Object object ) { if ( object instanceof DefaultEndpoint ) { DefaultEndpoint that = ( DefaultEndpoint ) object ; return ObjectHelper . equal ( this . getEndpointUri ( ) , that . getEndpointUri ( ) ) ; } return false ; } @ Override public String toString ( ) { return "Endpoint[" + getEndpointUri ( ) + "]" ; } public String getEndpointUri ( ) { if ( endpointUri == null ) { endpointUri = createEndpointUri ( ) ; if ( endpointUri == null ) { throw new IllegalArgumentException ( "endpointUri is not specified and " + getClass ( ) . getName ( ) + " does not implement createEndpointUri() to create a default value" ) ; } } return endpointUri ; } public CamelContext getCamelContext ( ) { return camelContext ; } public Component getComponent ( ) { return component ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public synchronized ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { Component c = getComponent ( ) ; if ( c != null && c instanceof DefaultComponent ) { DefaultComponent dc = ( DefaultComponent ) c ; executorService = dc . getExecutorService ( ) ; } if ( executorService == null ) { executorService = createExecutorService ( ) ; } } return executorService ; } public synchronized void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } public PollingConsumer < E > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < E > ( this ) ; } public E convertTo ( Class < E > type , Exchange exchange ) { if ( type . isInstance ( exchange ) ) { return type . cast ( exchange ) ; } return getCamelContext ( ) . getExchangeConverter ( ) . convertTo ( type , exchange ) ; } public E createExchange ( Exchange exchange ) { Class < E > exchangeType = getExchangeType ( ) ; if ( exchangeType != null ) { if ( exchangeType . isInstance ( exchange ) ) { return exchangeType . cast ( exchange ) ; } } E answer = createExchange ( ) ; answer . copyFrom ( exchange ) ; return answer ; } public Class < E > getExchangeType ( ) { Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { return ( Class < E > ) argumentType ; } } } return null ; } public E createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public E createExchange ( ExchangePattern pattern ) { return ( E ) new DefaultExchange ( getCamelContext ( ) , pattern ) ; } public ExchangePattern getExchangePattern ( ) { return exchangePattern ; } public void setExchangePattern ( ExchangePattern exchangePattern ) { this . exchangePattern = exchangePattern ; } protected ScheduledThreadPoolExecutor createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( 10 ) ; } public void configureProperties ( Map options ) { } protected String createEndpointUri ( ) { return null ; } protected void setEndpointUri ( String endpointUri ) { this . endpointUri = endpointUri ; } @ Deprecated public CamelContext getContext ( ) { return getCamelContext ( ) ; } @ Deprecated public void setContext ( CamelContext context ) { setCamelContext ( context ) ; } } 	1
package org . apache . camel . component . quartz ; import org . apache . camel . CamelContext ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import org . quartz . JobExecutionContext ; public class QuartzExchange extends DefaultExchange { public QuartzExchange ( CamelContext context , ExchangePattern pattern , JobExecutionContext jobExecutionContext ) { super ( context , pattern ) ; setIn ( new QuartzMessage ( this , jobExecutionContext ) ) ; } @ Override public QuartzMessage getIn ( ) { return ( QuartzMessage ) super . getIn ( ) ; } public JobExecutionContext getJobExecutionContext ( ) { return getIn ( ) . getJobExecutionContext ( ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultUnitOfWork ; public final class UnitOfWorkProcessor extends DelegateAsyncProcessor { public UnitOfWorkProcessor ( AsyncProcessor processor ) { super ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( exchange . getUnitOfWork ( ) == null ) { exchange . setUnitOfWork ( new DefaultUnitOfWork ( ) ) ; return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( sync ) ; exchange . getUnitOfWork ( ) . done ( exchange ) ; exchange . setUnitOfWork ( null ) ; } } ) ; } else { return processor . process ( exchange , callback ) ; } } } 	1
package org . apache . camel . component . validator ; import java . io . IOException ; import javax . xml . transform . Source ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . processor . validation . ValidatingProcessor ; import org . springframework . core . io . Resource ; public class SpringValidator extends ValidatingProcessor { private Resource schemaResource ; public Resource getSchemaResource ( ) { return schemaResource ; } public void setSchemaResource ( Resource schemaResource ) { this . schemaResource = schemaResource ; } @ Override protected Source createSchemaSource ( ) throws IOException { if ( schemaResource != null ) { if ( schemaResource . getURL ( ) == null ) { return new StreamSource ( schemaResource . getInputStream ( ) ) ; } else { return new StreamSource ( schemaResource . getInputStream ( ) , schemaResource . getURL ( ) . toExternalForm ( ) ) ; } } else { throw new IllegalArgumentException ( "You must specify a schema, schemaFile, schemaResource, schemaSource or schemaUrl property" ) ; } } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; public class SerializationDataFormat implements DataFormat { public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { ObjectOutput out = IOConverter . toObjectOutput ( stream ) ; out . writeObject ( graph ) ; out . flush ( ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { ObjectInput in = IOConverter . toObjectInput ( stream ) ; return in . readObject ( ) ; } } 	1
package org . apache . camel . component . spring . integration . adapter . config ; import org . springframework . beans . factory . xml . NamespaceHandlerSupport ; public class NamespaceHandler extends NamespaceHandlerSupport { public void init ( ) { registerBeanDefinitionParser ( "camelSource" , new CamelSourceAdpaterParser ( ) ) ; registerBeanDefinitionParser ( "camelTarget" , new CamelTargetAdapterParser ( ) ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ProceedProcessor ; import org . apache . camel . processor . UnitOfWorkProcessor ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . RouteContext ; public class DefaultRouteContext implements RouteContext { private RouteType route ; private FromType from ; private Collection < Route > routes ; private Endpoint < ? extends Exchange > endpoint ; private List < Processor > eventDrivenProcessors = new ArrayList < Processor > ( ) ; private Interceptor lastInterceptor ; private CamelContext camelContext ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private ErrorHandlerWrappingStrategy errorHandlerWrappingStrategy ; private boolean routeAdded ; public DefaultRouteContext ( RouteType route , FromType from , Collection < Route > routes ) { this . route = route ; this . from = from ; this . routes = routes ; } public DefaultRouteContext ( CamelContext camelContext ) { this . camelContext = camelContext ; routes = new ArrayList < Route > ( ) ; route = new RouteType ( "temporary" ) ; } public Endpoint < ? extends Exchange > getEndpoint ( ) { if ( endpoint == null ) { endpoint = from . resolveEndpoint ( this ) ; } return endpoint ; } public FromType getFrom ( ) { return from ; } public RouteType getRoute ( ) { return route ; } public CamelContext getCamelContext ( ) { if ( camelContext == null ) { camelContext = getRoute ( ) . getCamelContext ( ) ; } return camelContext ; } public Processor createProcessor ( ProcessorType node ) throws Exception { return node . createOutputsProcessor ( this ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) { return route . resolveEndpoint ( uri ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) { Endpoint < ? extends Exchange > endpoint = null ; if ( uri != null ) { endpoint = resolveEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } } if ( ref != null ) { endpoint = lookup ( ref , Endpoint . class ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( "ref:" + ref ) ; } } if ( endpoint == null ) { throw new IllegalArgumentException ( "Either 'uri' or 'ref' must be specified on: " + this ) ; } else { return endpoint ; } } public < T > T lookup ( String name , Class < T > type ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } public void commit ( ) { if ( ! eventDrivenProcessors . isEmpty ( ) ) { Processor processor = Pipeline . newInstance ( eventDrivenProcessors ) ; final AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; Processor unitOfWorkProcessor = new UnitOfWorkProcessor ( asyncProcessor ) ; Route edcr = new EventDrivenConsumerRoute ( getEndpoint ( ) , unitOfWorkProcessor ) ; edcr . getProperties ( ) . put ( Route . PARENT_PROPERTY , Integer . toHexString ( route . hashCode ( ) ) ) ; if ( route . getGroup ( ) != null ) { edcr . getProperties ( ) . put ( Route . GROUP_PROPERTY , route . getGroup ( ) ) ; } routes . add ( edcr ) ; } } public void addEventDrivenProcessor ( Processor processor ) { eventDrivenProcessors . add ( processor ) ; } public void intercept ( Intercept interceptor ) { lastInterceptor = ( Interceptor ) interceptor ; } public Processor createProceedProcessor ( ) { if ( lastInterceptor == null ) { throw new IllegalArgumentException ( "Cannot proceed() from outside of an interceptor!" ) ; } else { return new ProceedProcessor ( lastInterceptor ) ; } } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) { return errorHandlerWrappingStrategy ; } public void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) { errorHandlerWrappingStrategy = strategy ; } public boolean isRouteAdded ( ) { return routeAdded ; } public void setIsRouteAdded ( boolean b ) { routeAdded = b ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . ResourceBundle ; import java . util . logging . Logger ; import org . apache . cxf . binding . soap . SoapMessage ; import org . apache . cxf . common . i18n . BundleUtils ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . interceptor . MessageSenderInterceptor ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . XMLMessage ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . phase . Phase ; public class DOMOutInterceptor extends AbstractPhaseInterceptor < Message > { private static final Logger LOG = LogUtils . getL7dLogger ( DOMOutInterceptor . class ) ; private final XMLMessageOutInterceptor xmlInterceptor = new XMLMessageOutInterceptor ( ) ; private final SoapMessageOutInterceptor soapInterceptor = new SoapMessageOutInterceptor ( ) ; public DOMOutInterceptor ( ) { super ( Phase . PREPARE_SEND ) ; this . addBefore ( MessageSenderInterceptor . class . getName ( ) ) ; } public boolean isRequestor ( Message message ) { return Boolean . TRUE . equals ( message . get ( Message . REQUESTOR_ROLE ) ) ; } @ SuppressWarnings ( "unchecked" ) public void handleMessage ( Message message ) throws Fault { if ( message instanceof XMLMessage ) { xmlInterceptor . handleMessage ( ( XMLMessage ) message ) ; } else if ( message instanceof SoapMessage ) { soapInterceptor . handleMessage ( ( SoapMessage ) message ) ; } else { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "NOT_SUPPORTED_MESSAGE" , LOG , message . getClass ( ) . getName ( ) ) ) ; } } } 	0
package org . apache . camel . management ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationProcessor extends DelegateProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private PerformanceCounter counter ; public InstrumentationProcessor ( PerformanceCounter counter ) { this . counter = counter ; } public InstrumentationProcessor ( ) { } public void setCounter ( PerformanceCounter counter ) { this . counter = counter ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { final long startTime = System . nanoTime ( ) ; if ( processor instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) processor ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( doneSynchronously ) ; } } ) ; } try { processor . process ( exchange ) ; } catch ( Exception e ) { exchange . setException ( e ) ; } if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( true ) ; return true ; } protected void recordTime ( Exchange exchange , double duration ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Recording duration: " + duration + " millis for exchange: " + exchange ) ; } if ( ! exchange . isFailed ( ) && exchange . getException ( ) == null ) { counter . completedExchange ( duration ) ; } else { counter . failedExchange ( ) ; } } } 	1
package org . apache . camel . component . seda ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import java . util . concurrent . BlockingQueue ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . spi . BrowsableEndpoint ; public class SedaEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private BlockingQueue < Exchange > queue ; public SedaEndpoint ( String endpointUri , Component component , BlockingQueue < Exchange > queue ) { super ( endpointUri , component ) ; this . queue = queue ; } public SedaEndpoint ( String uri , SedaComponent component , Map parameters ) { this ( uri , component , component . createQueue ( uri , parameters ) ) ; } public SedaEndpoint ( String endpointUri , BlockingQueue < Exchange > queue ) { super ( endpointUri ) ; this . queue = queue ; } public Producer createProducer ( ) throws Exception { return new CollectionProducer ( this , getQueue ( ) ) ; } public Consumer createConsumer ( Processor processor ) throws Exception { return new SedaConsumer ( this , processor ) ; } public BlockingQueue < Exchange > getQueue ( ) { return queue ; } public boolean isSingleton ( ) { return true ; } public List < Exchange > getExchanges ( ) { return new ArrayList < Exchange > ( getQueue ( ) ) ; } } 	0
package org . apache . camel . impl . converter ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Method ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; import static java . lang . reflect . Modifier . isAbstract ; import static java . lang . reflect . Modifier . isPublic ; import static java . lang . reflect . Modifier . isStatic ; import org . apache . camel . Converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ResolverUtil ; import org . apache . camel . util . WebSphereResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AnnotationTypeConverterLoader implements TypeConverterLoader { public static final String META_INF_SERVICES = "META-INF/services/org/apache/camel/TypeConverter" ; private static final transient Log LOG = LogFactory . getLog ( AnnotationTypeConverterLoader . class ) ; private ResolverUtil resolver = new ResolverUtil ( ) ; private Set < Class > visitedClasses = new HashSet < Class > ( ) ; public AnnotationTypeConverterLoader ( ) { if ( WebSphereResolverUtil . isWebSphereClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ) { LOG . info ( "Using WebSphere specific ResolverUtil" ) ; resolver = new WebSphereResolverUtil ( META_INF_SERVICES ) ; } } public void load ( TypeConverterRegistry registry ) throws Exception { String [ ] packageNames = findPackageNames ( ) ; resolver . findAnnotated ( Converter . class , packageNames ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class type : classes ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading converter class: " + ObjectHelper . name ( type ) ) ; } loadConverterMethods ( registry , type ) ; } } protected String [ ] findPackageNames ( ) throws IOException { Set < String > packages = new HashSet < String > ( ) ; findPackages ( packages , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; findPackages ( packages , getClass ( ) . getClassLoader ( ) ) ; return packages . toArray ( new String [ packages . size ( ) ] ) ; } protected void findPackages ( Set < String > packages , ClassLoader classLoader ) throws IOException { Enumeration < URL > resources = classLoader . getResources ( META_INF_SERVICES ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; if ( url != null ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ; try { while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } finally { ObjectHelper . close ( reader , null , LOG ) ; } } } } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected void loadConverterMethods ( TypeConverterRegistry registry , Class type ) { if ( visitedClasses . contains ( type ) ) { return ; } visitedClasses . add ( type ) ; try { Method [ ] methods = type . getDeclaredMethods ( ) ; CachingInjector injector = null ; for ( Method method : methods ) { Converter annotation = method . getAnnotation ( Converter . class ) ; if ( annotation != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes == null || parameterTypes . length != 1 ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method should have one parameter" ) ; } else { int modifiers = method . getModifiers ( ) ; if ( isAbstract ( modifiers ) || ! isPublic ( modifiers ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method is not a public and concrete method" ) ; } else { Class toType = method . getReturnType ( ) ; if ( toType . equals ( Void . class ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method returns a void method" ) ; } else { Class fromType = parameterTypes [ 0 ] ; if ( isStatic ( modifiers ) ) { registerTypeConverter ( registry , method , toType , fromType , new StaticMethodTypeConverter ( method ) ) ; } else { if ( injector == null ) { injector = new CachingInjector ( registry , type ) ; } registerTypeConverter ( registry , method , toType , fromType , new InstanceMethodTypeConverter ( injector , method ) ) ; } } } } } } Class superclass = type . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { loadConverterMethods ( registry , superclass ) ; } } catch ( NoClassDefFoundError e ) { LOG . debug ( "Ignoring converter type: " + type . getName ( ) + " as a dependent class could not be found: " + e , e ) ; } } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { registry . addTypeConverter ( toType , fromType , typeConverter ) ; } } 	1
package org . apache . camel . component . cxf . invoker ; import java . io . InputStream ; import java . util . IdentityHashMap ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; import java . util . logging . Logger ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; public class RawMessageInvokingContext extends AbstractInvokingContext { private static final Logger LOG = LogUtils . getL7dLogger ( RawMessageInvokingContext . class ) ; public RawMessageInvokingContext ( ) { } public void setRequestOutMessageContent ( Message message , Map < Class , Object > contents ) { Set entries = contents . keySet ( ) ; Iterator iter = entries . iterator ( ) ; while ( iter . hasNext ( ) ) { Object obj = iter . next ( ) ; if ( obj instanceof Class ) { message . setContent ( ( Class < ? > ) obj , contents . get ( ( Class < ? > ) obj ) ) ; } } } public Object getResponseObject ( Exchange exchange , Map < String , Object > responseContext ) { return getResponseObject ( exchange . getInMessage ( ) , responseContext , InputStream . class ) ; } public void setResponseContent ( Message outMessage , Object resultPayload ) { LOG . info ( "Set content: " + resultPayload ) ; outMessage . setContent ( InputStream . class , resultPayload ) ; } public Map < Class , Object > getRequestContent ( Message inMessage ) { IdentityHashMap < Class , Object > contents = new IdentityHashMap < Class , Object > ( ) ; Set set = inMessage . getContentFormats ( ) ; Iterator iter = set . iterator ( ) ; while ( iter . hasNext ( ) ) { Object obj = iter . next ( ) ; if ( obj instanceof Class ) { contents . put ( ( Class < ? > ) obj , inMessage . getContent ( ( Class < ? > ) obj ) ) ; } } return contents ; } @ Override protected Logger getLogger ( ) { return LOG ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; public interface ErrorHandlerBuilder { ErrorHandlerBuilder copy ( ) ; Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception ; void addErrorHandlers ( ExceptionType exception ) ; } 	1
package org . apache . camel . processor . interceptor ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Debugger implements InterceptStrategy { private static final transient Log LOG = LogFactory . getLog ( Debugger . class ) ; private int exchangeBufferSize = - 1 ; private Map < String , DebugInterceptor > interceptors = new HashMap < String , DebugInterceptor > ( ) ; private boolean logExchanges = true ; private TraceFormatter formatter = new TraceFormatter ( ) ; public static Debugger getDebugger ( CamelContext context ) { if ( context instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) context ; List < InterceptStrategy > list = defaultCamelContext . getInterceptStrategies ( ) ; for ( InterceptStrategy interceptStrategy : list ) { if ( interceptStrategy instanceof Debugger ) { return ( Debugger ) interceptStrategy ; } } } return null ; } public DebugInterceptor getInterceptor ( String id ) { return interceptors . get ( id ) ; } public List < Exchange > getExchanges ( String id ) { DebugInterceptor interceptor = getInterceptor ( id ) ; if ( interceptor == null ) { return null ; } else { return interceptor . getExchanges ( ) ; } } public Breakpoint getBreakpoint ( String id ) { DebugInterceptor interceptor = getInterceptor ( id ) ; if ( interceptor == null ) { return null ; } else { return interceptor . getBreakpoint ( ) ; } } public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; if ( logExchanges ) { target = new TraceInterceptor ( processorType , target , formatter ) ; } DebugInterceptor interceptor = new DebugInterceptor ( processorType , target , createExchangeList ( ) , createExceptionsList ( ) ) ; interceptors . put ( id , interceptor ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Adding " + id + " interceptor: " + interceptor ) ; } return interceptor ; } protected List < Exchange > createExchangeList ( ) { if ( exchangeBufferSize == 0 ) { return null ; } else if ( exchangeBufferSize > 0 ) { return new ArrayList < Exchange > ( ) ; } else { return new ArrayList < Exchange > ( ) ; } } protected List < ExceptionEvent > createExceptionsList ( ) { return new ArrayList < ExceptionEvent > ( ) ; } } 	0
package org . apache . camel . model . dataformat ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Exchange ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "dataFormatType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DataFormatType extends IdentifiedType implements DataFormat { @ XmlTransient private DataFormat dataFormat ; @ XmlTransient private String dataFormatTypeName ; public DataFormatType ( ) { } public DataFormatType ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } protected DataFormatType ( String dataFormatTypeName ) { this . dataFormatTypeName = dataFormatTypeName ; } public static DataFormat getDataFormat ( RouteContext routeContext , DataFormatType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; DataFormat dataFormat = routeContext . lookup ( ref , DataFormat . class ) ; if ( dataFormat instanceof DataFormatType ) { type = ( DataFormatType ) dataFormat ; } else { return dataFormat ; } } return type . getDataFormat ( routeContext ) ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; dataFormat . marshal ( exchange , graph , stream ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; return dataFormat . unmarshal ( exchange , stream ) ; } public DataFormat getDataFormat ( RouteContext routeContext ) { if ( dataFormat == null ) { dataFormat = createDataFormat ( routeContext ) ; ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; configureDataFormat ( dataFormat ) ; } return dataFormat ; } protected DataFormat createDataFormat ( RouteContext routeContext ) { if ( dataFormatTypeName != null ) { Class type = ObjectHelper . loadClass ( dataFormatTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + dataFormatTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } return ( DataFormat ) ObjectHelper . newInstance ( type ) ; } return null ; } protected void configureDataFormat ( DataFormat dataFormat ) { } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } } 	1
package org . apache . camel . util ; import java . util . Map ; public class TimeoutMapEntry implements Comparable , Map . Entry { private Object key ; private Object value ; private long timeout ; private long expireTime ; public TimeoutMapEntry ( Object id , Object handler , long timeout ) { this . key = id ; this . value = handler ; this . timeout = timeout ; } public Object getKey ( ) { return key ; } public long getExpireTime ( ) { return expireTime ; } public void setExpireTime ( long expireTime ) { this . expireTime = expireTime ; } public Object getValue ( ) { return value ; } public Object setValue ( Object value ) { Object oldValue = value ; this . value = value ; return oldValue ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public int compareTo ( Object that ) { if ( this == that ) { return 0 ; } if ( that instanceof TimeoutMapEntry ) { return compareTo ( ( TimeoutMapEntry ) that ) ; } return 1 ; } public int compareTo ( TimeoutMapEntry that ) { long diff = this . expireTime - that . expireTime ; if ( diff > 0 ) { return 1 ; } else if ( diff < 0 ) { return - 1 ; } return this . key . hashCode ( ) - that . key . hashCode ( ) ; } public String toString ( ) { return "Entry for key: " + key ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultExchange implements Exchange { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; protected final CamelContext context ; private Map < String , Object > properties ; private Message in ; private Message out ; private Message fault ; private Throwable exception ; private String exchangeId ; private UnitOfWork unitOfWork ; private ExchangePattern pattern ; public DefaultExchange ( CamelContext context ) { this ( context , ExchangePattern . InOnly ) ; } public DefaultExchange ( CamelContext context , ExchangePattern pattern ) { this . context = context ; this . pattern = pattern ; } public DefaultExchange ( DefaultExchange parent ) { this ( parent . getContext ( ) , parent . getPattern ( ) ) ; this . unitOfWork = parent . getUnitOfWork ( ) ; } @ Override public String toString ( ) { return "Exchange[" + in + "]" ; } public Exchange copy ( ) { Exchange exchange = newInstance ( ) ; exchange . copyFrom ( this ) ; return exchange ; } public void copyFrom ( Exchange exchange ) { if ( exchange == this ) { return ; } setProperties ( safeCopy ( exchange . getProperties ( ) ) ) ; safeCopy ( getIn ( ) , exchange , exchange . getIn ( ) ) ; Message copyOut = exchange . getOut ( false ) ; if ( copyOut != null ) { safeCopy ( getOut ( true ) , exchange , copyOut ) ; } Message copyFault = exchange . getFault ( false ) ; if ( copyFault != null ) { safeCopy ( getFault ( true ) , exchange , copyFault ) ; } setException ( exchange . getException ( ) ) ; unitOfWork = exchange . getUnitOfWork ( ) ; pattern = exchange . getPattern ( ) ; } private static void safeCopy ( Message message , Exchange exchange , Message that ) { if ( message != null ) { message . copyFrom ( that ) ; } } private static Map < String , Object > safeCopy ( Map < String , Object > properties ) { if ( properties == null ) { return null ; } return new HashMap < String , Object > ( properties ) ; } private static Message safeCopy ( Exchange exchange , Message message ) { if ( message == null ) { return null ; } Message answer = message . copy ( ) ; if ( answer instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) answer ; messageSupport . setExchange ( exchange ) ; } return answer ; } public Exchange newInstance ( ) { return new DefaultExchange ( this ) ; } public CamelContext getContext ( ) { return context ; } public Object getProperty ( String name ) { if ( properties != null ) { return properties . get ( name ) ; } return null ; } public < T > T getProperty ( String name , Class < T > type ) { Object value = getProperty ( name ) ; ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { validateExchangePropertyIsExpectedType ( property , type , value ) ; } return getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setProperty ( String name , Object value ) { ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { Class type = value . getClass ( ) ; validateExchangePropertyIsExpectedType ( property , type , value ) ; } getProperties ( ) . put ( name , value ) ; } private < T > void validateExchangePropertyIsExpectedType ( ExchangeProperty < ? > property , Class < T > type , Object value ) { if ( value != null && property != null && ! property . type ( ) . isAssignableFrom ( type ) ) { throw new RuntimeCamelException ( "Type cast exception while getting an " + "Exchange Property value '" + value . toString ( ) + "' on Exchange " + this + " for a well known Exchange Property with these traits: " + property ) ; } } public Object removeProperty ( String name ) { return getProperties ( ) . remove ( name ) ; } public Map < String , Object > getProperties ( ) { if ( properties == null ) { properties = new HashMap < String , Object > ( ) ; } return properties ; } public void setProperties ( Map < String , Object > properties ) { this . properties = properties ; } public Message getIn ( ) { if ( in == null ) { in = createInMessage ( ) ; configureMessage ( in ) ; } return in ; } public void setIn ( Message in ) { this . in = in ; configureMessage ( in ) ; } public Message getOut ( ) { return getOut ( true ) ; } public Message getOut ( boolean lazyCreate ) { if ( out == null && lazyCreate ) { out = createOutMessage ( ) ; configureMessage ( out ) ; } return out ; } public void setOut ( Message out ) { this . out = out ; configureMessage ( out ) ; } public Throwable getException ( ) { return exception ; } public void setException ( Throwable exception ) { this . exception = exception ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } public void throwException ( ) throws Exception { if ( exception == null ) { return ; } if ( exception instanceof RuntimeException ) { throw ( RuntimeException ) exception ; } if ( exception instanceof Exception ) { throw ( Exception ) exception ; } throw new RuntimeCamelException ( exception ) ; } public Message getFault ( ) { return getFault ( true ) ; } public Message getFault ( boolean lazyCreate ) { if ( fault == null && lazyCreate ) { fault = createFaultMessage ( ) ; configureMessage ( fault ) ; } return fault ; } public void setFault ( Message fault ) { this . fault = fault ; configureMessage ( fault ) ; } public String getExchangeId ( ) { if ( exchangeId == null ) { exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( ) ; } return exchangeId ; } public void setExchangeId ( String id ) { this . exchangeId = id ; } public boolean isFailed ( ) { Message faultMessage = getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return getException ( ) != null ; } public boolean isTransacted ( ) { ExchangeProperty < ? > property = ExchangeProperty . get ( "transacted" ) ; return property != null && property . get ( this ) == Boolean . TRUE ; } public UnitOfWork getUnitOfWork ( ) { return unitOfWork ; } public void setUnitOfWork ( UnitOfWork unitOfWork ) { this . unitOfWork = unitOfWork ; } protected Message createInMessage ( ) { return new DefaultMessage ( ) ; } protected Message createOutMessage ( ) { return new DefaultMessage ( ) ; } protected Message createFaultMessage ( ) { return new DefaultMessage ( ) ; } protected void configureMessage ( Message message ) { if ( message instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) message ; messageSupport . setExchange ( this ) ; } } } 	1
package org . apache . camel . builder . xml ; import java . io . ByteArrayOutputStream ; import javax . xml . transform . Result ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Message ; public class StreamResultHandler implements ResultHandler { ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; StreamResult result = new StreamResult ( buffer ) ; public Result getResult ( ) { return result ; } public void setBody ( Message in ) { in . setBody ( buffer . toByteArray ( ) ) ; } } 	0
package org . apache . camel . model ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . loadbalancer . LoadBalancerType ; import org . apache . camel . model . loadbalancer . RandomLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . RoundRobinLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . StickyLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . TopicLoadBalanceStrategy ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RandomLoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . processor . loadbalancer . StickyLoadBalancer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; @ XmlRootElement ( name = "loadBalance" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalanceType extends OutputType < LoadBalanceType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "roundRobin" , type = RoundRobinLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "random" , type = RandomLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "sticky" , type = StickyLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "topic" , type = TopicLoadBalanceStrategy . class ) } ) private LoadBalancerType loadBalancerType ; public LoadBalanceType ( ) { } @ Override public String getShortName ( ) { return "loadbalance" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public LoadBalancerType getLoadBalancerType ( ) { return loadBalancerType ; } public void setLoadBalancerType ( LoadBalancerType loadbalancer ) { loadBalancerType = loadbalancer ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : outputs ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : getOutputs ( ) ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } public LoadBalanceType setLoadBalancer ( LoadBalancer loadBalancer ) { loadBalancerType = new LoadBalancerType ( loadBalancer ) ; return this ; } public LoadBalanceType roundRobin ( ) { loadBalancerType = new LoadBalancerType ( new RoundRobinLoadBalancer ( ) ) ; return this ; } public LoadBalanceType random ( ) { loadBalancerType = new LoadBalancerType ( new RandomLoadBalancer ( ) ) ; return this ; } public LoadBalanceType sticky ( Expression < Exchange > correlationExpression ) { loadBalancerType = new LoadBalancerType ( new StickyLoadBalancer ( correlationExpression ) ) ; return this ; } public LoadBalanceType topic ( ) { loadBalancerType = new LoadBalancerType ( new TopicLoadBalancer ( ) ) ; return this ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < ProcessorType < ? > > list = getOutputs ( ) ; for ( ProcessorType < ? > processorType : list ) { buffer . append ( processorType . getLabel ( ) ) ; } return buffer . toString ( ) ; } @ Override public String toString ( ) { String result ; if ( loadBalancerType != null ) { result = "LoadBalanceType[" + loadBalancerType + ", " ; } else { result = "LoadBalanceType[" + ref + ", " ; } result = result + getOutputs ( ) + "]" ; return result ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . Message ; import javax . jms . TemporaryQueue ; import javax . jms . TemporaryTopic ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . component . jms . requestor . Requestor ; import org . apache . camel . impl . DefaultEndpoint ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . JmsTemplate ; import org . springframework . jms . listener . AbstractMessageListenerContainer ; public class JmsEndpoint extends DefaultEndpoint < JmsExchange > { private final boolean pubSubDomain ; private JmsBinding binding ; private String destination ; private String selector ; private JmsConfiguration configuration ; private Requestor requestor ; private long requestTimeout ; public JmsEndpoint ( String uri , JmsComponent component , String destination , boolean pubSubDomain , JmsConfiguration configuration ) { super ( uri , component ) ; this . configuration = configuration ; this . destination = destination ; this . pubSubDomain = pubSubDomain ; this . requestTimeout = configuration . getRequestTimeout ( ) ; } public JmsEndpoint ( String endpointUri , JmsBinding binding , JmsConfiguration configuration , String destination , boolean pubSubDomain ) { super ( endpointUri ) ; this . binding = binding ; this . configuration = configuration ; this . destination = destination ; this . pubSubDomain = pubSubDomain ; this . requestTimeout = configuration . getRequestTimeout ( ) ; } public JmsEndpoint ( String endpointUri , String destination , boolean pubSubDomain ) { this ( endpointUri , new JmsBinding ( ) , new JmsConfiguration ( ) , destination , pubSubDomain ) ; } public JmsEndpoint ( String endpointUri , String destination ) { this ( endpointUri , destination , true ) ; } public JmsProducer createProducer ( ) throws Exception { return new JmsProducer ( this ) ; } public JmsProducer createProducer ( JmsOperations template ) throws Exception { JmsProducer answer = createProducer ( ) ; if ( template instanceof JmsTemplate ) { JmsTemplate jmsTemplate = ( JmsTemplate ) template ; jmsTemplate . setPubSubDomain ( pubSubDomain ) ; jmsTemplate . setDefaultDestinationName ( destination ) ; } answer . setInOnlyTemplate ( template ) ; return answer ; } public JmsConsumer createConsumer ( Processor processor ) throws Exception { AbstractMessageListenerContainer listenerContainer = configuration . createMessageListenerContainer ( this ) ; return createConsumer ( processor , listenerContainer ) ; } public JmsConsumer createConsumer ( Processor processor , AbstractMessageListenerContainer listenerContainer ) throws Exception { listenerContainer . setDestinationName ( destination ) ; listenerContainer . setPubSubDomain ( pubSubDomain ) ; return new JmsConsumer ( this , processor , listenerContainer ) ; } @ Override public PollingConsumer < JmsExchange > createPollingConsumer ( ) throws Exception { JmsOperations template = createInOnlyTemplate ( ) ; return new JmsPollingConsumer ( this , template ) ; } @ Override public JmsExchange createExchange ( ExchangePattern pattern ) { return new JmsExchange ( getCamelContext ( ) , pattern , getBinding ( ) ) ; } public JmsExchange createExchange ( Message message ) { return new JmsExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , message ) ; } public JmsOperations createInOnlyTemplate ( ) { return configuration . createInOnlyTemplate ( this , pubSubDomain , destination ) ; } public JmsOperations createInOutTemplate ( ) { return configuration . createInOutTemplate ( this , pubSubDomain , destination , getRequestTimeout ( ) ) ; } public JmsBinding getBinding ( ) { if ( binding == null ) { binding = new JmsBinding ( this ) ; } return binding ; } public void setBinding ( JmsBinding binding ) { this . binding = binding ; } public String getDestination ( ) { return destination ; } public JmsConfiguration getConfiguration ( ) { return configuration ; } public String getSelector ( ) { return selector ; } public void setSelector ( String selector ) { this . selector = selector ; } public boolean isSingleton ( ) { return false ; } public synchronized Requestor getRequestor ( ) throws Exception { if ( requestor == null ) { requestor = new Requestor ( getConfiguration ( ) , getExecutorService ( ) ) ; requestor . start ( ) ; } return requestor ; } public void setRequestor ( Requestor requestor ) { this . requestor = requestor ; } public long getRequestTimeout ( ) { return requestTimeout ; } public void setRequestTimeout ( long requestTimeout ) { this . requestTimeout = requestTimeout ; } public boolean isPubSubDomain ( ) { return pubSubDomain ; } public Class < ? extends TemporaryQueue > getTemporaryQueueType ( ) { JmsProviderMetadata metadata = getProviderMetadata ( ) ; JmsOperations template = getMetadataJmsOperations ( ) ; return metadata . getTemporaryQueueType ( template ) ; } public Class < ? extends TemporaryTopic > getTemporaryTopicType ( ) { JmsOperations template = getMetadataJmsOperations ( ) ; JmsProviderMetadata metadata = getProviderMetadata ( ) ; return metadata . getTemporaryTopicType ( template ) ; } protected JmsProviderMetadata getProviderMetadata ( ) { JmsConfiguration conf = getConfiguration ( ) ; JmsProviderMetadata metadata = conf . getProviderMetadata ( ) ; return metadata ; } protected JmsOperations getMetadataJmsOperations ( ) { JmsOperations template = getConfiguration ( ) . getMetadataJmsOperations ( this ) ; if ( template == null ) { throw new IllegalArgumentException ( "No Metadata JmsTemplate supplied!" ) ; } return template ; } public void checkValidTemplate ( JmsTemplate template ) { if ( template . getDestinationResolver ( ) == null ) { if ( this instanceof DestinationEndpoint ) { final DestinationEndpoint destinationEndpoint = ( DestinationEndpoint ) this ; template . setDestinationResolver ( JmsConfiguration . createDestinationResolver ( destinationEndpoint ) ) ; } } } } 	0
package org . apache . camel . processor . aggregate ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class PredicateAggregationCollection extends AggregationCollection { private Predicate aggregationCompletedPredicate ; private List < Exchange > collection = new ArrayList < Exchange > ( ) ; public PredicateAggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { super ( correlationExpression , aggregationStrategy ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } @ Override protected void onAggregation ( Object correlationKey , Exchange newExchange ) { if ( aggregationCompletedPredicate . matches ( newExchange ) ) { super . getMap ( ) . remove ( correlationKey ) ; collection . add ( newExchange ) ; } } @ Override public Iterator < Exchange > iterator ( ) { return collection . iterator ( ) ; } @ Override public int size ( ) { return collection . size ( ) ; } @ Override public void clear ( ) { collection . clear ( ) ; super . clear ( ) ; } } 	1
package org . apache . camel . component . atom ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AtomProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( AtomProducer . class ) ; private final AtomEndpoint endpoint ; public AtomProducer ( AtomEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public void process ( Exchange exchange ) throws Exception { throw new UnsupportedOperationException ( "AtomProducer is not implemented" ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Body ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Header ; import org . apache . camel . Headers ; import org . apache . camel . Message ; import org . apache . camel . OutHeaders ; import org . apache . camel . Properties ; import org . apache . camel . Property ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ExchangeHelper . convertToType ; public class BeanInfo { private static final transient Log LOG = LogFactory . getLog ( BeanInfo . class ) ; private final CamelContext camelContext ; private Class type ; private ParameterMappingStrategy strategy ; private Map < String , MethodInfo > operations = new ConcurrentHashMap < String , MethodInfo > ( ) ; private MethodInfo defaultMethod ; private List < MethodInfo > operationsWithBody = new ArrayList < MethodInfo > ( ) ; private List < MethodInfo > operationsWithCustomAnnotation = new ArrayList < MethodInfo > ( ) ; public BeanInfo ( CamelContext camelContext , Class type ) { this ( camelContext , type , createParameterMappingStrategy ( camelContext ) ) ; } public BeanInfo ( CamelContext camelContext , Class type , ParameterMappingStrategy strategy ) { this . camelContext = camelContext ; this . type = type ; this . strategy = strategy ; introspect ( getType ( ) ) ; if ( operations . size ( ) == 1 ) { Collection < MethodInfo > methodInfos = operations . values ( ) ; for ( MethodInfo methodInfo : methodInfos ) { defaultMethod = methodInfo ; } } } public Class getType ( ) { return type ; } public CamelContext getCamelContext ( ) { return camelContext ; } public MethodInvocation createInvocation ( Method method , Object pojo , Exchange exchange ) throws RuntimeCamelException { MethodInfo methodInfo = introspect ( type , method ) ; if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } public MethodInvocation createInvocation ( Object pojo , Exchange exchange ) throws RuntimeCamelException , AmbiguousMethodCallException { MethodInfo methodInfo = null ; String name = exchange . getIn ( ) . getHeader ( BeanProcessor . METHOD_NAME , String . class ) ; if ( name != null ) { methodInfo = operations . get ( name ) ; } if ( methodInfo == null ) { methodInfo = chooseMethod ( pojo , exchange ) ; } if ( methodInfo == null ) { methodInfo = defaultMethod ; } if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } protected void introspect ( Class clazz ) { Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( isValidMethod ( clazz , method ) ) { introspect ( clazz , method ) ; } } Class superclass = clazz . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { introspect ( superclass ) ; } } protected MethodInfo introspect ( Class clazz , Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; Annotation [ ] [ ] parametersAnnotations = method . getParameterAnnotations ( ) ; List < ParameterInfo > parameters = new ArrayList < ParameterInfo > ( ) ; List < ParameterInfo > bodyParameters = new ArrayList < ParameterInfo > ( ) ; boolean hasCustomAnnotation = false ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { Class parameterType = parameterTypes [ i ] ; Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] ; Expression expression = createParameterUnmarshalExpression ( clazz , method , parameterType , parameterAnnotations ) ; hasCustomAnnotation |= expression != null ; ParameterInfo parameterInfo = new ParameterInfo ( i , parameterType , parameterAnnotations , expression ) ; parameters . add ( parameterInfo ) ; if ( expression == null ) { hasCustomAnnotation |= ObjectHelper . hasAnnotation ( parameterAnnotations , Body . class ) ; if ( bodyParameters . isEmpty ( ) ) { if ( Exchange . class . isAssignableFrom ( parameterType ) ) { expression = ExpressionBuilder . exchangeExpression ( ) ; } else { expression = ExpressionBuilder . bodyExpression ( parameterType ) ; } parameterInfo . setExpression ( expression ) ; bodyParameters . add ( parameterInfo ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No expression available for method: " + method . toString ( ) + " which already has a body so ignoring parameter: " + i + " so ignoring method" ) ; } return null ; } } } String opName = method . getName ( ) ; MethodInfo methodInfo = new MethodInfo ( clazz , method , parameters , bodyParameters , hasCustomAnnotation ) ; operations . put ( opName , methodInfo ) ; if ( methodInfo . hasBodyParameter ( ) ) { operationsWithBody . add ( methodInfo ) ; } if ( methodInfo . isHasCustomAnnotation ( ) && ! methodInfo . hasBodyParameter ( ) ) { operationsWithCustomAnnotation . add ( methodInfo ) ; } return methodInfo ; } protected MethodInfo chooseMethod ( Object pojo , Exchange exchange ) throws AmbiguousMethodCallException { if ( operationsWithBody . size ( ) == 1 ) { return operationsWithBody . get ( 0 ) ; } else if ( ! operationsWithBody . isEmpty ( ) ) { return chooseMethodWithMatchingBody ( exchange , operationsWithBody ) ; } else if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return null ; } protected MethodInfo chooseMethodWithMatchingBody ( Exchange exchange , Collection < MethodInfo > operationList ) throws AmbiguousMethodCallException { Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; if ( body != null ) { Class bodyType = body . getClass ( ) ; List < MethodInfo > possibles = new ArrayList < MethodInfo > ( ) ; for ( MethodInfo methodInfo : operationList ) { boolean out = exchange . getPattern ( ) . isOutCapable ( ) ; if ( out && methodInfo . isReturnTypeVoid ( ) ) { continue ; } if ( methodInfo . bodyParameterMatches ( bodyType ) ) { possibles . add ( methodInfo ) ; } } if ( possibles . size ( ) == 1 ) { return possibles . get ( 0 ) ; } else if ( possibles . isEmpty ( ) ) { Object newBody = null ; MethodInfo matched = null ; for ( MethodInfo methodInfo : operationList ) { Object value = convertToType ( exchange , methodInfo . getBodyParameterType ( ) , body ) ; if ( value != null ) { if ( newBody != null ) { throw new AmbiguousMethodCallException ( exchange , Arrays . asList ( matched , methodInfo ) ) ; } else { newBody = value ; matched = methodInfo ; } } } if ( matched != null ) { in . setBody ( newBody ) ; return matched ; } } else { if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return chooseMethodWithCustomAnnotations ( exchange , possibles ) ; } } return null ; } protected MethodInfo chooseMethodWithCustomAnnotations ( Exchange exchange , Collection < MethodInfo > possibles ) throws AmbiguousMethodCallException { MethodInfo chosen = null ; for ( MethodInfo possible : possibles ) { if ( possible . isHasCustomAnnotation ( ) ) { if ( chosen != null ) { chosen = null ; break ; } else { chosen = possible ; } } } if ( chosen != null ) { return chosen ; } throw new AmbiguousMethodCallException ( exchange , possibles ) ; } protected Expression createParameterUnmarshalExpression ( Class clazz , Method method , Class parameterType , Annotation [ ] parameterAnnotation ) { for ( Annotation annotation : parameterAnnotation ) { Expression answer = createParameterUnmarshalExpressionForAnnotation ( clazz , method , parameterType , annotation ) ; if ( answer != null ) { return answer ; } } return strategy . getDefaultParameterTypeExpression ( parameterType ) ; } protected boolean isPossibleBodyParameter ( Annotation [ ] annotations ) { if ( annotations != null ) { for ( Annotation annotation : annotations ) { if ( ( annotation instanceof Property ) || ( annotation instanceof Header ) || ( annotation instanceof Headers ) || ( annotation instanceof OutHeaders ) || ( annotation instanceof Properties ) ) { return false ; } LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { return false ; } } } return true ; } protected Expression createParameterUnmarshalExpressionForAnnotation ( Class clazz , Method method , Class parameterType , Annotation annotation ) { if ( annotation instanceof Property ) { Property propertyAnnotation = ( Property ) annotation ; return ExpressionBuilder . propertyExpression ( propertyAnnotation . name ( ) ) ; } else if ( annotation instanceof Properties ) { return ExpressionBuilder . propertiesExpression ( ) ; } else if ( annotation instanceof Header ) { Header headerAnnotation = ( Header ) annotation ; return ExpressionBuilder . headerExpression ( headerAnnotation . name ( ) ) ; } else if ( annotation instanceof Headers ) { return ExpressionBuilder . headersExpression ( ) ; } else if ( annotation instanceof OutHeaders ) { return ExpressionBuilder . outHeadersExpression ( ) ; } else { LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { Class < ? > type = languageAnnotation . factory ( ) ; Object object = camelContext . getInjector ( ) . newInstance ( type ) ; if ( object instanceof AnnotationExpressionFactory ) { AnnotationExpressionFactory expressionFactory = ( AnnotationExpressionFactory ) object ; return expressionFactory . createExpression ( camelContext , annotation , languageAnnotation , parameterType ) ; } else { LOG . error ( "Ignoring bad annotation: " + languageAnnotation + "on method: " + method + " which declares a factory: " + type . getName ( ) + " which does not implement " + AnnotationExpressionFactory . class . getName ( ) ) ; } } } return null ; } protected boolean isValidMethod ( Class clazz , Method method ) { if ( ! Modifier . isPublic ( method . getModifiers ( ) ) ) { return false ; } if ( method . getReturnType ( ) != null && Exchange . class . isAssignableFrom ( method . getReturnType ( ) ) ) { return false ; } return true ; } public static ParameterMappingStrategy createParameterMappingStrategy ( CamelContext camelContext ) { Registry registry = camelContext . getRegistry ( ) ; ParameterMappingStrategy answer = registry . lookup ( ParameterMappingStrategy . class . getName ( ) , ParameterMappingStrategy . class ) ; if ( answer == null ) { answer = new DefaultParameterMappingStrategy ( ) ; } return answer ; } } 	1
package org . apache . camel . component . jetty ; import java . io . IOException ; import javax . servlet . ServletException ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . camel . AsyncCallback ; import org . apache . camel . component . http . CamelServlet ; import org . apache . camel . component . http . HttpConsumer ; import org . apache . camel . component . http . HttpExchange ; import org . mortbay . util . ajax . Continuation ; import org . mortbay . util . ajax . ContinuationSupport ; public class CamelContinuationServlet extends CamelServlet { @ Override protected void service ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { try { HttpConsumer consumer = resolve ( request ) ; if ( consumer == null ) { response . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; return ; } final Continuation continuation = ContinuationSupport . getContinuation ( request , null ) ; if ( continuation . isNew ( ) ) { final HttpExchange exchange = new HttpExchange ( consumer . getEndpoint ( ) , request , response ) ; boolean sync = consumer . getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } continuation . setObject ( exchange ) ; continuation . resume ( ) ; } } ) ; if ( ! sync ) { continuation . suspend ( 0 ) ; } consumer . getBinding ( ) . writeResponse ( exchange , response ) ; return ; } if ( continuation . isResumed ( ) ) { HttpExchange exchange = ( HttpExchange ) continuation . getObject ( ) ; consumer . getBinding ( ) . writeResponse ( exchange , response ) ; return ; } } catch ( Exception e ) { throw new ServletException ( e ) ; } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "filter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FilterType extends ExpressionNode implements Block { public FilterType ( ) { } public FilterType ( ExpressionType expression ) { super ( expression ) ; } public FilterType ( Predicate predicate ) { super ( predicate ) ; } @ Override public String toString ( ) { return "Filter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "filter" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface Property { String name ( ) ; } 	0
package org . apache . camel . component . seda ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . PollingConsumerSupport ; @ Deprecated public class ListPollingConsumer extends PollingConsumerSupport { private final List < Exchange > exchanges ; public ListPollingConsumer ( Endpoint endpoint , List < Exchange > exchanges ) { super ( endpoint ) ; this . exchanges = exchanges ; } public Exchange receive ( ) { return receiveNoWait ( ) ; } public Exchange receiveNoWait ( ) { if ( exchanges . isEmpty ( ) ) { return null ; } else { return exchanges . remove ( 0 ) ; } } public Exchange receive ( long timeout ) { return receiveNoWait ( ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	1
package org . apache . camel . spring . util ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . util . ObjectHelper ; public class SimpleRouteBuilder extends RouteBuilder { private List < String > fromUris = new ArrayList < String > ( ) ; private List < String > toUris = new ArrayList < String > ( ) ; private Class beanType ; private String beanClass ; private String beanRef ; private String beanMethod ; public void configure ( ) throws Exception { if ( fromUris . isEmpty ( ) ) { throw new IllegalArgumentException ( "the fromUris property must contain at least one valid URI" ) ; } for ( String fromUri : fromUris ) { ProcessorType route = from ( fromUri ) ; addBeanCall ( route ) ; for ( String toUri : toUris ) { route = route . to ( toUri ) ; } } } public void setFromUri ( String uri ) { setFromUris ( singletonList ( uri ) ) ; } public void setToUri ( String uri ) { setToUris ( singletonList ( uri ) ) ; } public List < String > getFromUris ( ) { return fromUris ; } public void setFromUris ( List < String > fromUris ) { this . fromUris = fromUris ; } public List < String > getToUris ( ) { return toUris ; } public void setToUris ( List < String > toUris ) { this . toUris = toUris ; } public String getBeanClass ( ) { return beanClass ; } public void setBeanClass ( String beanClass ) { this . beanClass = beanClass ; } public String getBeanRef ( ) { return beanRef ; } public void setBeanRef ( String beanRef ) { this . beanRef = beanRef ; } public Class getBeanType ( ) { if ( beanType == null ) { if ( beanClass != null ) { beanType = ObjectHelper . loadClass ( beanClass , getClass ( ) . getClassLoader ( ) ) ; } } return beanType ; } public void setBeanType ( Class beanType ) { this . beanType = beanType ; } public String getBeanMethod ( ) { return beanMethod ; } public void setBeanMethod ( String beanMethod ) { this . beanMethod = beanMethod ; } protected void addBeanCall ( ProcessorType route ) { Class type = getBeanType ( ) ; if ( type != null ) { if ( beanMethod != null ) { route = route . bean ( type , beanMethod ) ; } else { route = route . bean ( type ) ; } } else if ( beanRef != null ) { if ( beanMethod != null ) { route = route . beanRef ( beanRef , beanMethod ) ; } else { route = route . beanRef ( beanRef ) ; } } } protected List < String > singletonList ( String value ) { List < String > uris = new ArrayList < String > ( ) ; uris . add ( value ) ; return uris ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . LogFactory ; public class LoggingExceptionHandler implements ExceptionHandler { private final Logger logger ; public LoggingExceptionHandler ( Class ownerType ) { this ( new Logger ( LogFactory . getLog ( ownerType ) , LoggingLevel . ERROR ) ) ; } public LoggingExceptionHandler ( Logger logger ) { this . logger = logger ; } public void handleException ( Throwable exception ) { logger . log ( exception . getMessage ( ) , exception ) ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . Message ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class JmsExchange extends DefaultExchange { private JmsBinding binding ; public JmsExchange ( CamelContext context , ExchangePattern pattern , JmsBinding binding ) { super ( context , pattern ) ; this . binding = binding ; } public JmsExchange ( CamelContext context , ExchangePattern pattern , JmsBinding binding , Message message ) { this ( context , pattern , binding ) ; setIn ( new JmsMessage ( message ) ) ; } public JmsExchange ( DefaultExchange parent , JmsBinding binding ) { super ( parent ) ; this . binding = binding ; } @ Override public JmsMessage getIn ( ) { return ( JmsMessage ) super . getIn ( ) ; } @ Override public JmsMessage getOut ( ) { return ( JmsMessage ) super . getOut ( ) ; } @ Override public JmsMessage getOut ( boolean lazyCreate ) { return ( JmsMessage ) super . getOut ( lazyCreate ) ; } @ Override public JmsMessage getFault ( ) { return ( JmsMessage ) super . getFault ( ) ; } public JmsBinding getBinding ( ) { return binding ; } @ Override public Exchange newInstance ( ) { return new JmsExchange ( this , binding ) ; } public Message getInMessage ( ) { return getIn ( ) . getJmsMessage ( ) ; } public Message getOutMessage ( ) { return getOut ( ) . getJmsMessage ( ) ; } public Message getFaultMessage ( ) { return getOut ( ) . getJmsMessage ( ) ; } @ Override protected JmsMessage createInMessage ( ) { return new JmsMessage ( ) ; } @ Override protected JmsMessage createOutMessage ( ) { return new JmsMessage ( ) ; } @ Override protected org . apache . camel . Message createFaultMessage ( ) { return new JmsMessage ( ) ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class FileComponent extends DefaultComponent < FileExchange > { public static final String HEADER_FILE_NAME = "org.apache.camel.file.name" ; public static final String HEADER_FILE_NAME_PRODUCED = "org.apache.camel.file.name.produced" ; public FileComponent ( ) { } public FileComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < FileExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { File file = new File ( remaining ) ; FileEndpoint result = new FileEndpoint ( file , uri , this ) ; setProperties ( result , parameters ) ; return result ; } } 	1
package org . apache . camel . component . stream ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; public class StreamComponent extends DefaultComponent < Exchange > { @ Override protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new StreamEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "expression" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LanguageExpression extends ExpressionType { @ XmlAttribute private String language ; public LanguageExpression ( ) { } public LanguageExpression ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . component . spring . integration ; import java . util . Map ; import org . apache . camel . impl . DefaultComponent ; public class SpringIntegrationComponent extends DefaultComponent < SpringIntegrationExchange > { protected SpringIntegrationEndpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { SpringIntegrationEndpoint endpoint = new SpringIntegrationEndpoint ( uri , remaining , this ) ; setProperties ( endpoint , parameters ) ; return endpoint ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class Tracer implements InterceptStrategy { private TraceFormatter formatter = new TraceFormatter ( ) ; public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; return new TraceInterceptor ( processorType , target , formatter ) ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . spi ; public interface Provider < T > { T get ( ) ; } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class JMXExchange extends DefaultExchange { public JMXExchange ( CamelContext camelContext , ExchangePattern pattern , Notification notification ) { super ( camelContext , pattern ) ; setIn ( new JMXMessage ( notification ) ) ; } } 	1
package org . apache . camel . component . spring . integration ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . impl . DefaultMessage ; import org . springframework . integration . message . MessageHeader ; public class SpringIntegrationMessage extends DefaultMessage { private org . springframework . integration . message . Message siMessage ; public SpringIntegrationMessage ( org . springframework . integration . message . Message message ) { siMessage = message ; } public SpringIntegrationMessage ( ) { } public void setMessage ( org . springframework . integration . message . Message message ) { siMessage = message ; } public org . springframework . integration . message . Message getMessage ( ) { return siMessage ; } @ Override public void copyFrom ( org . apache . camel . Message that ) { setMessageId ( that . getMessageId ( ) ) ; setBody ( that . getBody ( ) ) ; getHeaders ( ) . putAll ( that . getHeaders ( ) ) ; if ( that instanceof SpringIntegrationMessage ) { SpringIntegrationMessage orig = ( SpringIntegrationMessage ) that ; setMessage ( orig . getMessage ( ) ) ; } } @ Override public String toString ( ) { if ( siMessage != null ) { return "SpringIntegrationMessage: " + siMessage ; } else { return "SpringIntegrationMessage: " + getBody ( ) ; } } @ Override public SpringIntegrationExchange getExchange ( ) { return ( SpringIntegrationExchange ) super . getExchange ( ) ; } public Object getHeader ( String name ) { if ( siMessage != null ) { return siMessage . getHeader ( ) . getAttribute ( name ) ; } else { return super . getHeader ( name ) ; } } @ Override public void setHeader ( String name , Object value ) { if ( siMessage != null ) { siMessage . getHeader ( ) . setAttribute ( name , value ) ; } else { super . setHeader ( name , value ) ; } } @ Override public Map < String , Object > getHeaders ( ) { if ( siMessage != null ) { Map < String , Object > answer = new HashMap < String , Object > ( ) ; MessageHeader header = siMessage . getHeader ( ) ; for ( String name : header . getAttributeNames ( ) ) { answer . put ( name , header . getAttribute ( name ) ) ; } return answer ; } else { return super . getHeaders ( ) ; } } @ Override public SpringIntegrationMessage newInstance ( ) { return new SpringIntegrationMessage ( ) ; } @ Override protected Object createBody ( ) { return siMessage . getPayload ( ) ; } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . language . bean . BeanExpression ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "methodCall" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MethodCallExpression extends ExpressionType { @ XmlAttribute ( required = false ) private String bean ; @ XmlAttribute ( required = false ) private String method ; public MethodCallExpression ( ) { } public MethodCallExpression ( String beanName ) { super ( beanName ) ; } public MethodCallExpression ( String beanName , String method ) { super ( beanName ) ; this . method = method ; } public String getLanguage ( ) { return "bean" ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Override public Expression createExpression ( RouteContext routeContext ) { return new BeanExpression ( beanName ( ) , getMethod ( ) ) ; } @ Override public Predicate < Exchange > createPredicate ( RouteContext routeContext ) { return new BeanExpression < Exchange > ( beanName ( ) , getMethod ( ) ) ; } protected String beanName ( ) { if ( bean != null ) { return bean ; } return getExpression ( ) ; } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "intHeader" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class IntegerHeader extends HeaderType { @ XmlAttribute ( name = "value" ) private Integer number ; public IntegerHeader ( ) { } public IntegerHeader ( String name , Integer number ) { super ( name ) ; this . number = number ; } public Integer getNumber ( ) { return number ; } public void setNumber ( Integer number ) { this . number = number ; } public Object getValue ( ) { return getNumber ( ) ; } public void setValue ( Object value ) { if ( value instanceof Number ) { Number n = ( Number ) value ; setNumber ( n . intValue ( ) ) ; } else { throw new IllegalArgumentException ( "Value must be an Integer" ) ; } } } 	0
package org . apache . camel . util ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import org . w3c . dom . NodeList ; public final class CollectionHelper { private CollectionHelper ( ) { } public static Integer size ( Object value ) { if ( value != null ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . size ( ) ; } else if ( value instanceof Map ) { Map map = ( Map ) value ; return map . size ( ) ; } else if ( value instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) value ; return array . length ; } else if ( value . getClass ( ) . isArray ( ) ) { return Array . getLength ( value ) ; } else if ( value instanceof NodeList ) { NodeList nodeList = ( NodeList ) value ; return nodeList . getLength ( ) ; } } return null ; } public static void appendValue ( Map map , Object key , Object value ) { Object oldValue = map . get ( key ) ; if ( oldValue != null ) { List list ; if ( oldValue instanceof List ) { list = ( List ) oldValue ; } else { list = new ArrayList ( ) ; list . add ( oldValue ) ; } list . add ( value ) ; } else { map . put ( key , value ) ; } } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "interceptor" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class InterceptorRef extends InterceptorType { @ XmlAttribute ( required = true ) private String ref ; @ XmlTransient private DelegateProcessor interceptor ; public InterceptorRef ( ) { } public InterceptorRef ( String ref ) { setRef ( ref ) ; } public InterceptorRef ( DelegateProcessor interceptor ) { this . interceptor = interceptor ; } @ Override public String toString ( ) { return "Interceptor[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "interceptor" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { DelegateProcessor processor = createInterceptor ( routeContext ) ; Processor child = createOutputsProcessor ( routeContext ) ; processor . setProcessor ( child ) ; return processor ; } public DelegateProcessor createInterceptor ( RouteContext routeContext ) { if ( interceptor == null ) { interceptor = routeContext . lookup ( getRef ( ) , DelegateProcessor . class ) ; } if ( interceptor == null ) { throw new IllegalArgumentException ( "No DelegateProcessor bean available for reference: " + getRef ( ) ) ; } return interceptor ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getLabel ( ) { if ( ref != null ) { return "ref:  " + ref ; } else if ( interceptor != null ) { return interceptor . toString ( ) ; } else { return "" ; } } @ XmlTransient public DelegateProcessor getInterceptor ( ) { return interceptor ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setBody" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetBodyType extends ExpressionNode { public SetBodyType ( ) { } public SetBodyType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "SetBody[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setBody" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; return ProcessorBuilder . setBody ( expr ) ; } } 	1
package org . apache . camel . component . jetty ; import java . net . URI ; import java . net . URISyntaxException ; import org . apache . camel . Consumer ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . http . HttpConsumer ; import org . apache . camel . component . http . HttpEndpoint ; import org . apache . camel . component . http . HttpExchange ; import org . apache . camel . impl . EventDrivenPollingConsumer ; import org . apache . commons . httpclient . HttpConnectionManager ; public class JettyHttpEndpoint extends HttpEndpoint { private JettyHttpComponent component ; private boolean sessionSupport ; public JettyHttpEndpoint ( JettyHttpComponent component , String uri , URI httpURL , HttpConnectionManager httpConnectionManager ) throws URISyntaxException { super ( uri , component , httpURL , httpConnectionManager ) ; this . component = component ; } @ Override public Producer < HttpExchange > createProducer ( ) throws Exception { return super . createProducer ( ) ; } @ Override public Consumer < HttpExchange > createConsumer ( Processor processor ) throws Exception { return new HttpConsumer ( this , processor ) ; } @ Override public PollingConsumer < HttpExchange > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < HttpExchange > ( this ) ; } @ Override public JettyHttpComponent getComponent ( ) { return component ; } public void setSessionSupport ( boolean support ) { sessionSupport = support ; } public boolean isSessionSupport ( ) { return sessionSupport ; } } 	0
package org . apache . camel . processor . exceptionpolicy ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . model . ExceptionType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultExceptionPolicyStrategy implements ExceptionPolicyStrategy { private static final transient Log LOG = LogFactory . getLog ( DefaultExceptionPolicyStrategy . class ) ; public ExceptionType getExceptionPolicy ( Map < Class , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finding best suited exception policy for thrown exception " + exception . getClass ( ) . getName ( ) ) ; } int targetLevel = getInheritanceLevel ( exception . getClass ( ) ) ; ExceptionType candidate = null ; int candidateDiff = Integer . MAX_VALUE ; Set < Map . Entry < Class , ExceptionType > > entries = exceptionPolicices . entrySet ( ) ; for ( Map . Entry < Class , ExceptionType > entry : entries ) { Class clazz = entry . getKey ( ) ; ExceptionType type = entry . getValue ( ) ; if ( clazz . isInstance ( exception ) ) { if ( clazz . equals ( exception . getClass ( ) ) ) { candidate = type ; break ; } int level = getInheritanceLevel ( clazz ) ; int diff = targetLevel - level ; if ( diff < candidateDiff ) { candidate = type ; candidateDiff = diff ; } } } if ( LOG . isDebugEnabled ( ) ) { if ( candidate != null ) { LOG . debug ( "Using " + candidate + " as the exception policy" ) ; } else { LOG . debug ( "No candidate found to be used as exception policy" ) ; } } return candidate ; } private static int getInheritanceLevel ( Class clazz ) { if ( clazz == null || "java.lang.Object" . equals ( clazz . getName ( ) ) ) { return 0 ; } return 1 + getInheritanceLevel ( clazz . getSuperclass ( ) ) ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import org . apache . camel . Converter ; import org . apache . http . HttpEntity ; import org . apache . http . entity . InputStreamEntity ; import org . apache . http . entity . StringEntity ; import org . apache . http . util . EntityUtils ; @ Converter public final class JhcConverter { private JhcConverter ( ) { } @ Converter public static InputStream toInputStream ( HttpEntity entity ) throws IOException { return entity . getContent ( ) ; } @ Converter public static byte [ ] toByteArray ( HttpEntity entity ) throws IOException { return EntityUtils . toByteArray ( entity ) ; } @ Converter public static String toString ( HttpEntity entity ) throws IOException { return EntityUtils . toString ( entity ) ; } @ Converter public static HttpEntity toEntity ( InputStream is ) { return new InputStreamEntity ( is , - 1 ) ; } @ Converter public static HttpEntity toEntity ( String str ) throws UnsupportedEncodingException { return new StringEntity ( str ) ; } } 	0
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URLDecoder ; import java . net . URLEncoder ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class URISupport { public static class CompositeData { public String host ; String scheme ; String path ; URI components [ ] ; Map parameters ; String fragment ; public URI [ ] getComponents ( ) { return components ; } public String getFragment ( ) { return fragment ; } public Map getParameters ( ) { return parameters ; } public String getScheme ( ) { return scheme ; } public String getPath ( ) { return path ; } public String getHost ( ) { return host ; } public URI toURI ( ) throws URISyntaxException { StringBuffer sb = new StringBuffer ( ) ; if ( scheme != null ) { sb . append ( scheme ) ; sb . append ( ':' ) ; } if ( host != null && host . length ( ) != 0 ) { sb . append ( host ) ; } else { sb . append ( '(' ) ; for ( int i = 0 ; i < components . length ; i ++ ) { if ( i != 0 ) { sb . append ( ',' ) ; } sb . append ( components [ i ] . toString ( ) ) ; } sb . append ( ')' ) ; } if ( path != null ) { sb . append ( '/' ) ; sb . append ( path ) ; } if ( ! parameters . isEmpty ( ) ) { sb . append ( "?" ) ; sb . append ( createQueryString ( parameters ) ) ; } if ( fragment != null ) { sb . append ( "#" ) ; sb . append ( fragment ) ; } return new URI ( sb . toString ( ) ) ; } } public static Map parseQuery ( String uri ) throws URISyntaxException { try { Map rc = new HashMap ( ) ; if ( uri != null ) { String [ ] parameters = uri . split ( "&" ) ; for ( String parameter : parameters ) { int p = parameter . indexOf ( "=" ) ; if ( p >= 0 ) { String name = URLDecoder . decode ( parameter . substring ( 0 , p ) , "UTF-8" ) ; String value = URLDecoder . decode ( parameter . substring ( p + 1 ) , "UTF-8" ) ; rc . put ( name , value ) ; } else { rc . put ( parameter , null ) ; } } } return rc ; } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static Map parseParameters ( URI uri ) throws URISyntaxException { String query = uri . getQuery ( ) ; if ( query == null ) { String schemeSpecificPart = uri . getSchemeSpecificPart ( ) ; int idx = schemeSpecificPart . lastIndexOf ( '?' ) ; if ( idx < 0 ) { return Collections . EMPTY_MAP ; } else { query = schemeSpecificPart . substring ( idx + 1 ) ; } } else { query = stripPrefix ( query , "?" ) ; } return parseQuery ( query ) ; } public static URI removeQuery ( URI uri ) throws URISyntaxException { return createURIWithQuery ( uri , null ) ; } public static URI createURIWithQuery ( URI uri , String query ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getUserInfo ( ) , uri . getHost ( ) , uri . getPort ( ) , uri . getPath ( ) , query , uri . getFragment ( ) ) ; } public static CompositeData parseComposite ( URI uri ) throws URISyntaxException { CompositeData rc = new CompositeData ( ) ; rc . scheme = uri . getScheme ( ) ; String ssp = stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) . trim ( ) ; parseComposite ( uri , rc , ssp ) ; rc . fragment = uri . getFragment ( ) ; return rc ; } private static void parseComposite ( URI uri , CompositeData rc , String ssp ) throws URISyntaxException { String componentString ; String params ; if ( ! checkParenthesis ( ssp ) ) { throw new URISyntaxException ( uri . toString ( ) , "Not a matching number of '(' and ')' parenthesis" ) ; } int p ; int intialParen = ssp . indexOf ( "(" ) ; if ( intialParen == 0 ) { rc . host = ssp . substring ( 0 , intialParen ) ; p = rc . host . indexOf ( "/" ) ; if ( p >= 0 ) { rc . path = rc . host . substring ( p ) ; rc . host = rc . host . substring ( 0 , p ) ; } p = ssp . lastIndexOf ( ")" ) ; componentString = ssp . substring ( intialParen + 1 , p ) ; params = ssp . substring ( p + 1 ) . trim ( ) ; } else { componentString = ssp ; params = "" ; } String components [ ] = splitComponents ( componentString ) ; rc . components = new URI [ components . length ] ; for ( int i = 0 ; i < components . length ; i ++ ) { rc . components [ i ] = new URI ( components [ i ] . trim ( ) ) ; } p = params . indexOf ( "?" ) ; if ( p >= 0 ) { if ( p > 0 ) { rc . path = stripPrefix ( params . substring ( 0 , p ) , "/" ) ; } rc . parameters = parseQuery ( params . substring ( p + 1 ) ) ; } else { if ( params . length ( ) > 0 ) { rc . path = stripPrefix ( params , "/" ) ; } rc . parameters = Collections . EMPTY_MAP ; } } private static String [ ] splitComponents ( String str ) { ArrayList l = new ArrayList ( ) ; int last = 0 ; int depth = 0 ; char chars [ ] = str . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { switch ( chars [ i ] ) { case '(' : depth ++ ; break ; case ')' : depth -- ; break ; case ',' : if ( depth == 0 ) { String s = str . substring ( last , i ) ; l . add ( s ) ; last = i + 1 ; } break ; default : } } String s = str . substring ( last ) ; if ( s . length ( ) != 0 ) { l . add ( s ) ; } String rc [ ] = new String [ l . size ( ) ] ; l . toArray ( rc ) ; return rc ; } public static String stripPrefix ( String value , String prefix ) { if ( value . startsWith ( prefix ) ) { return value . substring ( prefix . length ( ) ) ; } return value ; } public static URI stripScheme ( URI uri ) throws URISyntaxException { return new URI ( stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) ) ; } public static String createQueryString ( Map options ) throws URISyntaxException { try { if ( options . size ( ) > 0 ) { StringBuffer rc = new StringBuffer ( ) ; boolean first = true ; for ( Iterator iter = options . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { if ( first ) { first = false ; } else { rc . append ( "&" ) ; } String key = ( String ) iter . next ( ) ; String value = ( String ) options . get ( key ) ; rc . append ( URLEncoder . encode ( key , "UTF-8" ) ) ; rc . append ( "=" ) ; rc . append ( URLEncoder . encode ( value , "UTF-8" ) ) ; } return rc . toString ( ) ; } else { return "" ; } } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static URI createRemainingURI ( URI originalURI , Map params ) throws URISyntaxException { String s = createQueryString ( params ) ; if ( s . length ( ) == 0 ) { s = null ; } return createURIWithQuery ( originalURI , s ) ; } public static URI changeScheme ( URI bindAddr , String scheme ) throws URISyntaxException { return new URI ( scheme , bindAddr . getUserInfo ( ) , bindAddr . getHost ( ) , bindAddr . getPort ( ) , bindAddr . getPath ( ) , bindAddr . getQuery ( ) , bindAddr . getFragment ( ) ) ; } public static boolean checkParenthesis ( String str ) { boolean result = true ; if ( str != null ) { int open = 0 ; int closed = 0 ; int i = 0 ; while ( ( i = str . indexOf ( '(' , i ) ) >= 0 ) { i ++ ; open ++ ; } i = 0 ; while ( ( i = str . indexOf ( ')' , i ) ) >= 0 ) { i ++ ; closed ++ ; } result = open == closed ; } return result ; } @ Deprecated public int indexOfParenthesisMatch ( String str ) { int result = - 1 ; return result ; } } 	1
package org . apache . camel . component . atom ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; public abstract class AtomConsumerSupport extends ScheduledPollConsumer < Exchange > { public static final long DEFAULT_CONSUMER_DELAY = 60 * 1000L ; protected final AtomEndpoint endpoint ; public AtomConsumerSupport ( AtomEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BatchProcessor extends ServiceSupport implements Runnable , Processor { public static final long DEFAULT_BATCH_TIMEOUT = 1000L ; public static final int DEFAULT_BATCH_SIZE = 100 ; private static final transient Log LOG = LogFactory . getLog ( BatchProcessor . class ) ; private Endpoint endpoint ; private Processor processor ; private Collection < Exchange > collection ; private long batchTimeout = DEFAULT_BATCH_TIMEOUT ; private int batchSize = DEFAULT_BATCH_SIZE ; private PollingConsumer consumer ; private ExceptionHandler exceptionHandler ; public BatchProcessor ( Endpoint endpoint , Processor processor , Collection < Exchange > collection ) { this . endpoint = endpoint ; this . processor = processor ; this . collection = collection ; } @ Override public String toString ( ) { return "BatchProcessor[to: " + processor + "]" ; } public void run ( ) { LOG . debug ( "Starting thread for " + this ) ; while ( isRunAllowed ( ) ) { try { processBatch ( ) ; } catch ( Exception e ) { getExceptionHandler ( ) . handleException ( e ) ; } } collection . clear ( ) ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public Endpoint getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } protected synchronized void processBatch ( ) throws Exception { long start = System . currentTimeMillis ( ) ; long end = start + batchTimeout ; for ( int i = 0 ; ! isBatchCompleted ( i ) ; i ++ ) { long timeout = end - System . currentTimeMillis ( ) ; if ( timeout < 0L ) { LOG . debug ( "batch timeout expired at batch index:" + i ) ; break ; } Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { LOG . debug ( "receive with timeout: " + timeout + " expired at batch index:" + i ) ; break ; } collection . add ( exchange ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finished batch size: " + batchSize + " timeout: " + batchTimeout + " so sending set: " + collection ) ; } Iterator < Exchange > iter = collection . iterator ( ) ; while ( iter . hasNext ( ) ) { Exchange exchange = iter . next ( ) ; iter . remove ( ) ; processExchange ( exchange ) ; } } protected boolean isBatchCompleted ( int index ) { return index >= batchSize ; } protected void processExchange ( Exchange exchange ) throws Exception { processor . process ( exchange ) ; } protected void doStart ( ) throws Exception { consumer = endpoint . createPollingConsumer ( ) ; ServiceHelper . startServices ( processor , consumer ) ; Thread thread = new Thread ( this , this + " Polling Thread" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( consumer , processor ) ; collection . clear ( ) ; } protected Collection < Exchange > getCollection ( ) { return collection ; } public void process ( Exchange exchange ) throws Exception { } } 	1
package org . apache . camel . component . http ; import java . net . URI ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . commons . httpclient . HttpConnectionManager ; import org . apache . commons . httpclient . MultiThreadedHttpConnectionManager ; import org . apache . commons . httpclient . params . HttpClientParams ; public class HttpComponent extends DefaultComponent < HttpExchange > { private HttpClientConfigurer httpClientConfigurer ; private HttpConnectionManager httpConnectionManager = new MultiThreadedHttpConnectionManager ( ) ; public void connect ( HttpConsumer consumer ) throws Exception { } public void disconnect ( HttpConsumer consumer ) throws Exception { } public HttpClientConfigurer getHttpClientConfigurer ( ) { return httpClientConfigurer ; } public void setHttpClientConfigurer ( HttpClientConfigurer httpClientConfigurer ) { this . httpClientConfigurer = httpClientConfigurer ; } public HttpConnectionManager getHttpConnectionManager ( ) { return httpConnectionManager ; } public void setHttpConnectionManager ( HttpConnectionManager httpConnectionManager ) { this . httpConnectionManager = httpConnectionManager ; } @ Override protected Endpoint < HttpExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { HttpClientParams params = new HttpClientParams ( ) ; IntrospectionSupport . setProperties ( params , parameters , "httpClient." ) ; return new HttpEndpoint ( uri , this , new URI ( uri ) , params , httpConnectionManager , httpClientConfigurer ) ; } @ Override protected boolean useIntrospectionOnEndpoint ( ) { return false ; } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . BlockingQueue ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class QueueComponent extends SedaComponent { private static final transient Log LOG = LogFactory . getLog ( QueueComponent . class ) ; public QueueComponent ( ) { LOG . warn ( "This component has been deprecated; please use the seda: URI format instead of queue:" ) ; } } 	1
package org . apache . camel . component . direct ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; public class DirectComponent < E extends Exchange > extends DefaultComponent < E > { protected Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { Endpoint < E > endpoint = new DirectEndpoint < E > ( uri , this ) ; setProperties ( endpoint , parameters ) ; return endpoint ; } } 	0
package org . apache . camel ; import java . util . Map ; public interface Endpoint < E extends Exchange > { boolean isSingleton ( ) ; String getEndpointUri ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( Exchange exchange ) ; CamelContext getCamelContext ( ) ; Producer < E > createProducer ( ) throws Exception ; Consumer < E > createConsumer ( Processor processor ) throws Exception ; PollingConsumer < E > createPollingConsumer ( ) throws Exception ; void configureProperties ( Map options ) ; void setCamelContext ( CamelContext context ) ; @ Deprecated CamelContext getContext ( ) ; @ Deprecated void setContext ( CamelContext context ) ; } 	1
package org . apache . camel . converter ; import org . apache . camel . Converter ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; @ Converter public class CamelConverter { @ Converter public Processor toProcessor ( final Predicate < Exchange > predicate ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { boolean answer = predicate . matches ( exchange ) ; Message out = exchange . getOut ( ) ; out . copyFrom ( exchange . getIn ( ) ) ; out . setBody ( answer ) ; } } ; } @ Converter public Processor toProcessor ( final Expression < Exchange > expresion ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { Object answer = expresion . evaluate ( exchange ) ; Message out = exchange . getOut ( ) ; out . copyFrom ( exchange . getIn ( ) ) ; out . setBody ( answer ) ; } } ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "recipientList" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RecipientListType extends ExpressionNode { public RecipientListType ( ) { } public RecipientListType ( ExpressionType expression ) { super ( expression ) ; } public RecipientListType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "RecipientList[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "recipientList" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new RecipientList ( getExpression ( ) . createExpression ( routeContext ) ) ; } } 	1
package org . apache . camel . component . mina ; import java . io . Serializable ; import java . util . LinkedHashMap ; import java . util . Map ; import org . apache . camel . Exchange ; public class MinaPayloadHolder implements Serializable { private static final long serialVersionUID = 1L ; private Object inBody ; private Object outBody ; private Map < String , Object > inHeaders = new LinkedHashMap < String , Object > ( ) ; private Map < String , Object > outHeaders = new LinkedHashMap < String , Object > ( ) ; private Map < String , Object > properties = new LinkedHashMap < String , Object > ( ) ; private Throwable exception ; public static MinaPayloadHolder marshal ( Exchange exchange ) { MinaPayloadHolder payload = new MinaPayloadHolder ( ) ; payload . inBody = exchange . getIn ( ) . getBody ( ) ; if ( exchange . getOut ( false ) != null ) { payload . outBody = exchange . getOut ( ) . getBody ( ) ; } payload . inHeaders . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; payload . outHeaders . putAll ( exchange . getOut ( ) . getHeaders ( ) ) ; payload . properties . putAll ( exchange . getProperties ( ) ) ; payload . exception = exchange . getException ( ) ; return payload ; } public static void unmarshal ( Exchange exchange , MinaPayloadHolder payload ) { exchange . getIn ( ) . setBody ( payload . inBody ) ; exchange . getOut ( ) . setBody ( payload . outBody ) ; exchange . getIn ( ) . setHeaders ( payload . inHeaders ) ; exchange . getOut ( ) . setHeaders ( payload . outHeaders ) ; for ( String key : payload . properties . keySet ( ) ) { exchange . setProperty ( key , payload . properties . get ( key ) ) ; } exchange . setException ( payload . exception ) ; } public String toString ( ) { return "MinaPayloadHolder{" + "inBody=" + inBody + ", outBody=" + outBody + ", inHeaders=" + inHeaders + ", outHeaders=" + outHeaders + ", properties=" + properties + ", exception=" + exception + '}' ; } } 	0
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "convertBodyTo" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ConvertBodyType extends ProcessorType < ProcessorType > { @ XmlAttribute private String type ; @ XmlTransient private Class typeClass ; public ConvertBodyType ( ) { } public ConvertBodyType ( String type ) { setType ( type ) ; } public ConvertBodyType ( Class typeClass ) { setTypeClass ( typeClass ) ; } @ Override public String toString ( ) { return "convertBodyTo[ " + getType ( ) + "]" ; } @ Override public String getShortName ( ) { return "convertBodyTo" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new ConvertBodyProcessor ( getTypeClass ( ) ) ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } protected Class createTypeClass ( ) { return ObjectHelper . loadClass ( getType ( ) , getClass ( ) . getClassLoader ( ) ) ; } public void setType ( String type ) { this . type = type ; } public String getType ( ) { return type ; } public void setTypeClass ( Class typeClass ) { this . typeClass = typeClass ; } public Class getTypeClass ( ) { if ( typeClass == null ) { setTypeClass ( createTypeClass ( ) ) ; } return typeClass ; } } 	1
package org . apache . camel . builder . sql ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "sql" ) public @ interface SQL { String value ( ) ; } 	0
package org . apache . camel ; import java . util . Map ; public interface ProducerTemplate < E extends Exchange > extends Service { E send ( E exchange ) ; E send ( Processor processor ) ; Object sendBody ( Object body ) ; Object sendBodyAndHeader ( Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) ; E send ( String endpointUri , E exchange ) ; E send ( String endpointUri , Processor processor ) ; E send ( String endpointUri , ExchangePattern pattern , Processor processor ) ; E send ( String endpointUri , Processor processor , AsyncCallback callback ) ; E send ( Endpoint < E > endpoint , E exchange ) ; E send ( Endpoint < E > endpoint , Processor processor ) ; E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) ; E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) ; Object sendBody ( Endpoint < E > endpoint , Object body ) ; Object sendBody ( String endpointUri , Object body ) ; Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) ; Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) ; Object sendBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( String endpointUri , Object body , Map < String , Object > headers ) ; Object sendBodyAndHeaders ( Endpoint endpoint , Object body , Map < String , Object > headers ) ; E request ( Endpoint < E > endpoint , Processor processor ) ; Object requestBody ( Endpoint < E > endpoint , Object body ) ; Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) ; E request ( String endpointUri , Processor processor ) ; Object requestBody ( String endpointUri , Object body ) ; Object requestBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; } 	1
package org . apache . camel . component . jms . requestor ; import javax . jms . JMSException ; import javax . jms . Message ; public interface ReplyHandler { boolean handle ( Message message ) throws JMSException ; } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . FileOutputStream ; import java . io . InputStream ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( FileProducer . class ) ; private FileEndpoint endpoint ; public FileProducer ( FileEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public FileEndpoint getEndpoint ( ) { return ( FileEndpoint ) super . getEndpoint ( ) ; } public void process ( Exchange exchange ) throws Exception { FileExchange fileExchange = endpoint . createExchange ( exchange ) ; process ( fileExchange ) ; ExchangeHelper . copyResults ( exchange , fileExchange ) ; } public void process ( FileExchange exchange ) throws Exception { InputStream in = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; File file = createFileName ( exchange . getIn ( ) ) ; buildDirectory ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to: " + file + " from exchange: " + exchange ) ; } FileChannel fc = null ; try { if ( getEndpoint ( ) . isAppend ( ) ) { fc = new RandomAccessFile ( file , "rw" ) . getChannel ( ) ; fc . position ( fc . size ( ) ) ; } else { fc = new FileOutputStream ( file ) . getChannel ( ) ; } int size = getEndpoint ( ) . getBufferSize ( ) ; byte [ ] buffer = new byte [ size ] ; ByteBuffer byteBuffer = ByteBuffer . wrap ( buffer ) ; while ( true ) { int count = in . read ( buffer ) ; if ( count <= 0 ) { break ; } else if ( count < size ) { byteBuffer = ByteBuffer . wrap ( buffer , 0 , count ) ; fc . write ( byteBuffer ) ; break ; } else { fc . write ( byteBuffer ) ; byteBuffer . clear ( ) ; } } } finally { ObjectHelper . close ( in , file . getName ( ) , LOG ) ; ObjectHelper . close ( fc , file . getName ( ) , LOG ) ; } } protected File createFileName ( Message message ) { File answer ; String name = null ; if ( ! endpoint . isIgnoreFileNameHeader ( ) ) { name = message . getHeader ( FileComponent . HEADER_FILE_NAME , String . class ) ; } File endpointFile = endpoint . getFile ( ) ; if ( endpointFile . isDirectory ( ) ) { if ( name != null ) { answer = new File ( endpointFile , name ) ; if ( answer . isDirectory ( ) ) { answer = new File ( answer , endpoint . getGeneratedFileName ( message ) ) ; } } else { answer = new File ( endpointFile , endpoint . getGeneratedFileName ( message ) ) ; } } else { if ( name == null ) { answer = endpointFile ; } else { answer = new File ( endpointFile , name ) ; } } message . setHeader ( FileComponent . HEADER_FILE_NAME_PRODUCED , answer . getAbsolutePath ( ) ) ; return answer ; } private void buildDirectory ( File file ) { String dirName = file . getAbsolutePath ( ) ; int index = dirName . lastIndexOf ( File . separatorChar ) ; if ( index > 0 ) { dirName = dirName . substring ( 0 , index ) ; File dir = new File ( dirName ) ; dir . mkdirs ( ) ; } } } 	1
package org . apache . camel . component . jms ; public class DestinationTransformProcessor { } 	0
package org . apache . camel . language . simple ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . language . IllegalSyntaxException ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class SimpleLanguage implements Language { public static Expression simple ( String expression ) { SimpleLanguage language = new SimpleLanguage ( ) ; return language . createExpression ( expression ) ; } public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { if ( expression . indexOf ( "${" ) >= 0 ) { return createComplexExpression ( expression ) ; } return createSimpleExpression ( expression ) ; } protected Expression < Exchange > createComplexExpression ( String expression ) { List < Expression > results = new ArrayList < Expression > ( ) ; int pivot = 0 ; int size = expression . length ( ) ; while ( pivot < size ) { int idx = expression . indexOf ( "${" , pivot ) ; if ( idx < 0 ) { results . add ( createConstantExpression ( expression , pivot , size ) ) ; break ; } else { if ( pivot < idx ) { results . add ( createConstantExpression ( expression , pivot , idx ) ) ; } pivot = idx + 2 ; int endIdx = expression . indexOf ( "}" , pivot ) ; if ( endIdx < 0 ) { throw new IllegalArgumentException ( "Expecting } but found end of string for simple expression: " + expression ) ; } String simpleText = expression . substring ( pivot , endIdx ) ; Expression simpleExpression = createSimpleExpression ( simpleText ) ; results . add ( simpleExpression ) ; pivot = endIdx + 1 ; } } return ExpressionBuilder . concatExpression ( results , expression ) ; } protected Expression createConstantExpression ( String expression , int start , int end ) { return ExpressionBuilder . constantExpression ( expression . substring ( start , end ) ) ; } protected Expression < Exchange > createSimpleExpression ( String expression ) { if ( ObjectHelper . isEqualToAny ( expression , "body" , "in.body" ) ) { return ExpressionBuilder . bodyExpression ( ) ; } else if ( ObjectHelper . equal ( expression , "out.body" ) ) { return ExpressionBuilder . outBodyExpression ( ) ; } String remainder = ifStartsWithReturnRemainder ( "in.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "header." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "headers." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "in.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . headerExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "out.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "out.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . outHeaderExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "property." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "sys." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } throw new IllegalSyntaxException ( this , expression ) ; } protected String ifStartsWithReturnRemainder ( String prefix , String text ) { if ( text . startsWith ( prefix ) ) { String remainder = text . substring ( prefix . length ( ) ) ; if ( remainder . length ( ) > 0 ) { return remainder ; } } return null ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; public interface ErrorHandlerWrappingStrategy { Processor wrapProcessorInErrorHandler ( RouteContext routeContext , ProcessorType processorType , Processor target ) throws Exception ; } 	0
package org . apache . camel . component . file ; import java . io . File ; public interface FileProcessStrategy { boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . Collection ; import java . util . Collections ; import org . apache . cxf . service . model . BindingFaultInfo ; import org . apache . cxf . service . model . BindingInfo ; import org . apache . cxf . service . model . BindingOperationInfo ; import org . apache . cxf . service . model . OperationInfo ; import org . apache . cxf . service . model . ServiceInfo ; public class FakeBindingOperationInfo extends BindingOperationInfo { public FakeBindingOperationInfo ( ) { super ( ) ; } public boolean isUnwrapped ( ) { return false ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . MBeanServer ; import javax . management . Notification ; import javax . management . ObjectName ; import javax . management . monitor . CounterMonitor ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JMXEndpoint extends DefaultEndpoint < JMXExchange > { private static final transient Log LOG = LogFactory . getLog ( JMXEndpoint . class ) ; private String name ; private ObjectName ourName ; private String observedObjectName ; private String attributeName ; private long granularityPeriod = 5000 ; private Number threshold ; private Number offset ; private MBeanServer mbeanServer ; private CounterMonitor counterMonitor = new CounterMonitor ( ) ; protected JMXEndpoint ( String endpointUri , JMXComponent component ) { super ( endpointUri , component ) ; observedObjectName = endpointUri ; } public JMXEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < JMXExchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "Producer not supported" ) ; } public Consumer < JMXExchange > createConsumer ( Processor proc ) throws Exception { ObjectName observedName = new ObjectName ( observedObjectName ) ; if ( name == null ) { String type = observedName . getKeyProperty ( "type" ) ; type = type != null ? type : "UNKNOWN" ; name = mbeanServer . getDefaultDomain ( ) + ":type=CounterMonitor_" + type ; } JMXConsumer result = new JMXConsumer ( this , proc ) ; ourName = new ObjectName ( name ) ; counterMonitor . setNotify ( true ) ; counterMonitor . addObservedObject ( observedName ) ; counterMonitor . setObservedAttribute ( attributeName ) ; counterMonitor . setGranularityPeriod ( granularityPeriod ) ; counterMonitor . setDifferenceMode ( false ) ; counterMonitor . setInitThreshold ( threshold ) ; counterMonitor . setOffset ( offset ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Registering and adding notification listener for [" + counterMonitor + "] with name [" + ourName + "]" ) ; } mbeanServer . registerMBean ( counterMonitor , ourName ) ; mbeanServer . addNotificationListener ( ourName , result , null , new Object ( ) ) ; return result ; } public boolean isSingleton ( ) { return true ; } public JMXExchange createExchange ( Notification notification ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , notification ) ; } public JMXExchange createExchange ( ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , null ) ; } public JMXExchange createExchange ( ExchangePattern pattern ) { return new JMXExchange ( getCamelContext ( ) , pattern , null ) ; } public String getAttributeName ( ) { return attributeName ; } public void setAttributeName ( String attributeName ) { this . attributeName = attributeName ; } public long getGranularityPeriod ( ) { return granularityPeriod ; } public void setGranularityPeriod ( long granularityPeriod ) { this . granularityPeriod = granularityPeriod ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Number getOffset ( ) { return offset ; } public void setOffset ( Number offset ) { this . offset = offset ; } public Number getThreshold ( ) { return threshold ; } public void setThreshold ( Number threshold ) { this . threshold = threshold ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	1
package org . apache . camel . component . bean ; import org . apache . camel . Processor ; public interface BeanHolder { Object getBean ( ) throws Exception ; Processor getProcessor ( ) ; BeanInfo getBeanInfo ( ) ; } 	0
package org . apache . camel ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . Callable ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; public interface CamelContext extends Service { String getName ( ) ; void addComponent ( String componentName , Component component ) ; Component getComponent ( String componentName ) ; < T extends Component > T getComponent ( String name , Class < T > componentType ) ; Component removeComponent ( String componentName ) ; Component getOrCreateComponent ( String componentName , Callable < Component > factory ) ; Endpoint getEndpoint ( String uri ) ; < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) ; Collection < Endpoint > getSingletonEndpoints ( ) ; Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception ; Endpoint removeSingletonEndpoint ( String uri ) throws Exception ; List < RouteType > getRouteDefinitions ( ) ; List < Route > getRoutes ( ) ; void setRoutes ( List < Route > routes ) ; void addRoutes ( Collection < Route > routes ) throws Exception ; void addRoutes ( Routes builder ) throws Exception ; void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception ; ExchangeConverter getExchangeConverter ( ) ; TypeConverter getTypeConverter ( ) ; Registry getRegistry ( ) ; Injector getInjector ( ) ; LifecycleStrategy getLifecycleStrategy ( ) ; Language resolveLanguage ( String language ) ; < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; } 	1
package org . apache . camel . language . jxpath ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . impl . ExpressionSupport ; import org . apache . camel . language . ExpressionEvaluationException ; import org . apache . commons . jxpath . CompiledExpression ; import org . apache . commons . jxpath . JXPathContext ; import org . apache . commons . jxpath . JXPathException ; public class JXPathExpression extends ExpressionSupport < Exchange > { private String expression ; private CompiledExpression compiledExpression ; private final Class < ? > type ; public JXPathExpression ( String expression , Class < ? > type ) { super ( ) ; this . expression = expression ; this . type = type ; } public Object evaluate ( Exchange exchange ) { try { JXPathContext context = JXPathContext . newContext ( exchange ) ; Object result = getJXPathExpression ( ) . getValue ( context , type ) ; assertResultType ( exchange , result ) ; return result ; } catch ( JXPathException e ) { throw new ExpressionEvaluationException ( this , exchange , e ) ; } } private void assertResultType ( Exchange exchange , Object result ) { if ( result != null && ! type . isAssignableFrom ( result . getClass ( ) ) ) { throw new JXPathException ( "JXPath result type is " + result . getClass ( ) + " instead of required type " + type ) ; } } @ Override protected String assertionFailureMessage ( Exchange exchange ) { return expression . toString ( ) ; } private synchronized CompiledExpression getJXPathExpression ( ) { if ( compiledExpression == null ) { compiledExpression = JXPathContext . compile ( expression ) ; } return compiledExpression ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . RejectedExecutionException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannel extends ErrorHandlerSupport implements AsyncProcessor { public static final String REDELIVERY_COUNTER = "org.apache.camel.RedeliveryCounter" ; public static final String REDELIVERED = "org.apache.camel.Redelivered" ; public static final String EXCEPTION_CAUSE_PROPERTY = "CamelCauseException" ; private class RedeliveryData { int redeliveryCounter ; long redeliveryDelay ; boolean sync = true ; RedeliveryPolicy currentRedeliveryPolicy = redeliveryPolicy ; Processor failureProcessor = deadLetter ; } private static final transient Log LOG = LogFactory . getLog ( DeadLetterChannel . class ) ; private static final String FAILURE_HANDLED_PROPERTY = DeadLetterChannel . class . getName ( ) + ".FAILURE_HANDLED" ; private Processor output ; private Processor deadLetter ; private AsyncProcessor outputAsync ; private RedeliveryPolicy redeliveryPolicy ; private Logger logger ; public DeadLetterChannel ( Processor output , Processor deadLetter ) { this ( output , deadLetter , new RedeliveryPolicy ( ) , DeadLetterChannel . createDefaultLogger ( ) , ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ) ; } public DeadLetterChannel ( Processor output , Processor deadLetter , RedeliveryPolicy redeliveryPolicy , Logger logger , ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . deadLetter = deadLetter ; this . output = output ; this . outputAsync = AsyncProcessorTypeConverter . convert ( output ) ; this . redeliveryPolicy = redeliveryPolicy ; this . logger = logger ; setExceptionPolicy ( exceptionPolicyStrategy ) ; } public static < E extends Exchange > Logger createDefaultLogger ( ) { return new Logger ( LOG , LoggingLevel . ERROR ) ; } @ Override public String toString ( ) { return "DeadLetterChannel[" + output + ", " + deadLetter + ", " + redeliveryPolicy + "]" ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { return process ( exchange , callback , new RedeliveryData ( ) ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { while ( true ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return data . sync ; } if ( exchange . isTransacted ( ) && exchange . getException ( ) != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Transacted Exchange, this DeadLetterChannel is bypassed: " + exchange ) ; } return data . sync ; } if ( exchange . getException ( ) != null ) { Throwable e = exchange . getException ( ) ; exchange . setException ( null ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". On delivery attempt: " + data . redeliveryCounter + " caught: " + e , e ) ; data . redeliveryCounter = incrementRedeliveryCounter ( exchange , e ) ; ExceptionType exceptionPolicy = getExceptionPolicy ( exchange , e ) ; if ( exceptionPolicy != null ) { data . currentRedeliveryPolicy = exceptionPolicy . createRedeliveryPolicy ( data . currentRedeliveryPolicy ) ; Processor processor = exceptionPolicy . getErrorHandler ( ) ; if ( processor != null ) { data . failureProcessor = processor ; } } } if ( ! data . currentRedeliveryPolicy . shouldRedeliver ( data . redeliveryCounter ) ) { setFailureHandled ( exchange , true ) ; AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( data . failureProcessor ) ; boolean sync = afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { restoreExceptionOnExchange ( exchange ) ; callback . done ( data . sync ) ; } } ) ; restoreExceptionOnExchange ( exchange ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". Handled by the failure processor: " + data . failureProcessor ) ; return sync ; } if ( data . redeliveryCounter > 0 ) { data . redeliveryDelay = data . currentRedeliveryPolicy . sleep ( data . redeliveryDelay ) ; } exchange . setProperty ( EXCEPTION_CAUSE_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; boolean sync = outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null ) { process ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; if ( ! sync ) { return false ; } if ( exchange . getException ( ) == null || isFailureHandled ( exchange ) ) { callback . done ( true ) ; return true ; } } } public static boolean isFailureHandled ( Exchange exchange ) { return exchange . getProperty ( FAILURE_HANDLED_PROPERTY ) != null ; } public static void setFailureHandled ( Exchange exchange , boolean isHandled ) { if ( isHandled ) { exchange . setProperty ( FAILURE_HANDLED_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; } else { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; exchange . removeProperty ( FAILURE_HANDLED_PROPERTY ) ; } } public static void restoreExceptionOnExchange ( Exchange exchange ) { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public Processor getOutput ( ) { return output ; } public Processor getDeadLetter ( ) { return deadLetter ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } protected int incrementRedeliveryCounter ( Exchange exchange , Throwable e ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; int next = 1 ; if ( counter != null ) { next = counter + 1 ; } in . setHeader ( REDELIVERY_COUNTER , next ) ; in . setHeader ( REDELIVERED , Boolean . TRUE ) ; exchange . setException ( e ) ; return next ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output , deadLetter ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( deadLetter , output ) ; } } 	1
package org . apache . camel ; import org . apache . camel . util . ExchangeHelper ; public class NoSuchHeaderException extends CamelExchangeException { private static final long serialVersionUID = - 8721487431101572630L ; private final String headerName ; private final Class < ? > type ; public NoSuchHeaderException ( Exchange exchange , String headerName , Class < ? > type ) { super ( "No '" + headerName + "' header available of type: " + type . getName ( ) + reason ( exchange , headerName ) , exchange ) ; this . headerName = headerName ; this . type = type ; } public String getHeaderName ( ) { return headerName ; } public Class < ? > getType ( ) { return type ; } protected static String reason ( Exchange exchange , String propertyName ) { Object value = exchange . getProperty ( propertyName ) ; return valueDescription ( value ) ; } static String valueDescription ( Object value ) { if ( value == null ) { return "" ; } return " but has value: " + value + " of type: " + value . getClass ( ) . getName ( ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "onException" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExceptionType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElement ( name = "redeliveryPolicy" , required = false ) private RedeliveryPolicyType redeliveryPolicy ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; @ XmlTransient private Processor errorHandler ; public ExceptionType ( ) { } public ExceptionType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public ExceptionType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Exception[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { if ( redeliveryPolicy != null ) { return redeliveryPolicy . createRedeliveryPolicy ( parentPolicy ) ; } else if ( errorHandler != null ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; answer . setMaximumRedeliveries ( 0 ) ; return answer ; } return parentPolicy ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { errorHandler = routeContext . createProcessor ( this ) ; ErrorHandlerBuilder builder = routeContext . getRoute ( ) . getErrorHandlerBuilder ( ) ; builder . addErrorHandlers ( this ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public ExceptionType backOffMultiplier ( double backOffMultiplier ) { getOrCreateRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public ExceptionType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public ExceptionType collisionAvoidancePercent ( short collisionAvoidancePercent ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public ExceptionType initialRedeliveryDelay ( long initialRedeliveryDelay ) { getOrCreateRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public ExceptionType maximumRedeliveries ( int maximumRedeliveries ) { getOrCreateRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public ExceptionType useCollisionAvoidance ( ) { getOrCreateRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public ExceptionType useExponentialBackOff ( ) { getOrCreateRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } public Processor getErrorHandler ( ) { return errorHandler ; } public RedeliveryPolicyType getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicyType redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } protected RedeliveryPolicyType getOrCreateRedeliveryPolicy ( ) { if ( redeliveryPolicy == null ) { redeliveryPolicy = new RedeliveryPolicyType ( ) ; } return redeliveryPolicy ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import javax . xml . namespace . QName ; import javax . xml . xpath . XPathVariableResolver ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . builder . xml . Namespaces . ENVIRONMENT_VARIABLES ; import static org . apache . camel . builder . xml . Namespaces . EXCHANGE_PROPERTY ; import static org . apache . camel . builder . xml . Namespaces . IN_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . OUT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . SYSTEM_PROPERTIES_NAMESPACE ; public class MessageVariableResolver implements XPathVariableResolver { private static final transient Log LOG = LogFactory . getLog ( MessageVariableResolver . class ) ; private Exchange exchange ; private Map < String , Object > variables = new HashMap < String , Object > ( ) ; public Exchange getExchange ( ) { return exchange ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public Object resolveVariable ( QName name ) { String uri = name . getNamespaceURI ( ) ; String localPart = name . getLocalPart ( ) ; Object answer = null ; Message in = exchange . getIn ( ) ; if ( uri == null || uri . length ( ) == 0 ) { answer = variables . get ( localPart ) ; if ( answer == null ) { Message message = in ; if ( message != null ) { answer = message . getHeader ( localPart ) ; } if ( answer == null ) { answer = exchange . getProperty ( localPart ) ; } } } else if ( uri . equals ( SYSTEM_PROPERTIES_NAMESPACE ) ) { try { answer = System . getProperty ( localPart ) ; } catch ( Exception e ) { LOG . debug ( "Security exception evaluating system property: " + localPart + ". Reason: " + e , e ) ; } } else if ( uri . equals ( ENVIRONMENT_VARIABLES ) ) { answer = System . getenv ( ) . get ( localPart ) ; } else if ( uri . equals ( EXCHANGE_PROPERTY ) ) { answer = exchange . getProperty ( localPart ) ; } else if ( uri . equals ( IN_NAMESPACE ) ) { answer = in . getHeader ( localPart ) ; if ( answer == null && localPart . equals ( "body" ) ) { answer = in . getBody ( ) ; } } else if ( uri . equals ( OUT_NAMESPACE ) ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { answer = out . getHeader ( localPart ) ; if ( answer == null && localPart . equals ( "body" ) ) { answer = out . getBody ( ) ; } } } return answer ; } public void addVariable ( String localPart , Object value ) { variables . put ( localPart , value ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultExchangeFormatter ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . processor . interceptor . TraceInterceptor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Logger implements Processor { private Log log ; private LoggingLevel level ; private ExchangeFormatter formatter = DefaultExchangeFormatter . getInstance ( ) ; public Logger ( ) { this ( LogFactory . getLog ( Logger . class ) ) ; } public Logger ( Log log ) { this ( log , LoggingLevel . INFO ) ; } public Logger ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public Logger ( String logName ) { this ( LogFactory . getLog ( logName ) ) ; } public Logger ( String logName , LoggingLevel level ) { this ( LogFactory . getLog ( logName ) , level ) ; } public Logger ( Log log , ExchangeFormatter formatter ) { this ( log ) ; this . formatter = formatter ; } @ Override public String toString ( ) { return "Logger[" + log + "]" ; } public void process ( Exchange exchange ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void process ( Exchange exchange , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void log ( String message ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message ) ; } } public void log ( String message , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message , exception ) ; } } protected Object logMessage ( Exchange exchange ) { return formatter . format ( exchange ) ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public void setFormatter ( ExchangeFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . spi ; import javax . management . JMException ; import javax . management . MBeanServer ; import javax . management . ObjectName ; import org . apache . camel . Service ; public interface InstrumentationAgent extends Service { void register ( Object obj , ObjectName name ) throws JMException ; void register ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException ; void unregister ( ObjectName name ) throws JMException ; MBeanServer getMBeanServer ( ) ; String getMBeanObjectDomainName ( ) ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TransformProcessor extends DelegateProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( TransformProcessor . class ) ; private Expression expression ; public TransformProcessor ( Expression expression ) { this . expression = expression ; } public TransformProcessor ( Expression expression , Processor childProcessor ) { super ( childProcessor ) ; this . expression = expression ; } public void process ( Exchange exchange ) throws Exception { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; exchange . getOut ( ) . getHeaders ( ) . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; super . process ( exchange ) ; } @ Override public String toString ( ) { return "transform(" + expression + ")" ; } } 	1
package org . apache . camel . component ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . io . DefaultResourceLoader ; import org . springframework . core . io . Resource ; import org . springframework . core . io . ResourceLoader ; public abstract class ResourceBasedComponent extends DefaultComponent < Exchange > { protected final transient Log log = LogFactory . getLog ( getClass ( ) ) ; private ResourceLoader resourceLoader = new DefaultResourceLoader ( ) ; public ResourceLoader getResourceLoader ( ) { return resourceLoader ; } public void setResourceLoader ( ResourceLoader resourceLoader ) { this . resourceLoader = resourceLoader ; } protected Resource resolveMandatoryResource ( String uri ) { Resource resource = getResourceLoader ( ) . getResource ( uri ) ; if ( resource == null ) { throw new IllegalArgumentException ( "Could not find resource for URI: " + uri + " using: " + getResourceLoader ( ) ) ; } else { return resource ; } } } 	0
package org . apache . camel . processor ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . TreeSet ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ExpressionListComparator ; public class Resequencer extends BatchProcessor { public Resequencer ( Endpoint endpoint , Processor processor , Expression < Exchange > expression ) { this ( endpoint , processor , createSet ( expression ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , List < Expression > expressions ) { this ( endpoint , processor , createSet ( expressions ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , Set < Exchange > collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Resequencer[to: " + getProcessor ( ) + "]" ; } protected static Set < Exchange > createSet ( Expression < Exchange > expression ) { return createSet ( new ExpressionComparator < Exchange > ( expression ) ) ; } protected static Set < Exchange > createSet ( List < Expression > expressions ) { if ( expressions . size ( ) == 1 ) { return createSet ( expressions . get ( 0 ) ) ; } return createSet ( new ExpressionListComparator ( expressions ) ) ; } protected static Set < Exchange > createSet ( Comparator < ? super Exchange > comparator ) { return new TreeSet < Exchange > ( comparator ) ; } } 	1
package org . apache . camel . component . irc ; import java . net . URI ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . schwering . irc . lib . IRCConnection ; public class IrcComponent extends DefaultComponent < IrcExchange > { private static final transient Log LOG = LogFactory . getLog ( IrcComponent . class ) ; private IrcConfiguration configuration ; private final Map < String , IRCConnection > connectionCache = new HashMap < String , IRCConnection > ( ) ; public IrcComponent ( ) { configuration = new IrcConfiguration ( ) ; } public IrcComponent ( IrcConfiguration configuration ) { this . configuration = configuration ; } public IrcComponent ( CamelContext context ) { super ( context ) ; configuration = new IrcConfiguration ( ) ; } public static IrcComponent ircComponent ( ) { return new IrcComponent ( ) ; } protected IrcEndpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { IrcConfiguration config = getConfiguration ( ) . copy ( ) ; config . configure ( new URI ( uri ) ) ; final IrcEndpoint endpoint = new IrcEndpoint ( uri , this , config ) ; setProperties ( endpoint . getConfiguration ( ) , parameters ) ; return endpoint ; } public IrcConfiguration getConfiguration ( ) { return configuration ; } public void setConfiguration ( IrcConfiguration configuration ) { this . configuration = configuration ; } public synchronized IRCConnection getIRCConnection ( IrcConfiguration configuration ) { final IRCConnection connection ; if ( connectionCache . containsKey ( configuration . getCacheKey ( ) ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Returning Cached Connection to " + configuration . getHostname ( ) + " " + configuration . getTarget ( ) ) ; } connection = connectionCache . get ( configuration . getCacheKey ( ) ) ; } else { connection = createConnection ( configuration ) ; connectionCache . put ( configuration . getCacheKey ( ) , connection ) ; } return connection ; } protected IRCConnection createConnection ( IrcConfiguration configuration ) { LOG . debug ( "Creating Connection to " + configuration . getHostname ( ) + " destination: " + configuration . getTarget ( ) + " nick: " + configuration . getNickname ( ) + " user: " + configuration . getUsername ( ) ) ; final IRCConnection conn = new IRCConnection ( configuration . getHostname ( ) , configuration . getPorts ( ) , configuration . getPassword ( ) , configuration . getNickname ( ) , configuration . getUsername ( ) , configuration . getRealname ( ) ) ; conn . setEncoding ( "UTF-8" ) ; conn . setColors ( configuration . isColors ( ) ) ; conn . setPong ( true ) ; try { conn . connect ( ) ; } catch ( Exception e ) { LOG . error ( "Failed to connect: " + e , e ) ; throw new RuntimeCamelException ( e ) ; } return conn ; } public void closeConnection ( String key , IRCConnection connection ) { try { connection . doQuit ( ) ; connection . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } @ Override protected synchronized void doStop ( ) throws Exception { Map < String , IRCConnection > map = new HashMap < String , IRCConnection > ( connectionCache ) ; connectionCache . clear ( ) ; for ( Map . Entry < String , IRCConnection > entry : map . entrySet ( ) ) { closeConnection ( entry . getKey ( ) , entry . getValue ( ) ) ; } super . doStop ( ) ; } } 	0
package org . apache . camel . view ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . AggregatorType ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FilterType ; import org . apache . camel . model . FromType ; import org . apache . camel . model . OtherwiseType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RecipientListType ; import org . apache . camel . model . ResequencerType ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . model . SplitterType ; import org . apache . camel . model . ToType ; import org . apache . camel . model . WhenType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; public class NodeData { public String id ; public String image ; public String label ; public String shape ; public String edgeLabel ; public String tooltop ; public String nodeType ; public boolean nodeWritten ; public String url ; public List < ProcessorType > outputs ; public String association = "property" ; private final String imagePrefix ; public NodeData ( String id , Object node , String imagePrefix ) { this . id = id ; this . imagePrefix = imagePrefix ; if ( node instanceof ProcessorType ) { ProcessorType processorType = ( ProcessorType ) node ; this . edgeLabel = processorType . getLabel ( ) ; } if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; this . tooltop = fromType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; this . tooltop = toType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof FilterType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "Message Filter" ; } else if ( node instanceof WhenType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "When Filter" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; } else if ( node instanceof OtherwiseType ) { this . nodeType = "Otherwise" ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; this . tooltop = "Otherwise" ; } else if ( node instanceof ChoiceType ) { this . image = imagePrefix + "ContentBasedRouterIcon.png" ; this . nodeType = "Content Based Router" ; this . label = "" ; this . edgeLabel = "" ; ChoiceType choice = ( ChoiceType ) node ; List < ProcessorType > outputs = new ArrayList < ProcessorType > ( choice . getWhenClauses ( ) ) ; if ( choice . getOtherwise ( ) != null ) { outputs . add ( choice . getOtherwise ( ) ) ; } this . outputs = outputs ; } else if ( node instanceof RecipientListType ) { this . image = imagePrefix + "RecipientListIcon.png" ; this . nodeType = "Recipient List" ; } else if ( node instanceof RoutingSlipType ) { this . image = imagePrefix + "RoutingTableIcon.png" ; this . nodeType = "Routing Slip" ; this . url = "http://activemq.apache.org/camel/routing-slip.html" ; this . tooltop = ( ( RoutingSlipType ) node ) . getHeaderName ( ) ; } else if ( node instanceof SplitterType ) { this . image = imagePrefix + "SplitterIcon.png" ; this . nodeType = "Splitter" ; } else if ( node instanceof AggregatorType ) { this . image = imagePrefix + "AggregatorIcon.png" ; this . nodeType = "Aggregator" ; } else if ( node instanceof ResequencerType ) { this . image = imagePrefix + "ResequencerIcon.png" ; this . nodeType = "Resequencer" ; } if ( isNullOrBlank ( this . nodeType ) && node != null ) { String name = node . getClass ( ) . getName ( ) ; int idx = name . lastIndexOf ( '.' ) ; if ( idx > 0 ) { name = name . substring ( idx + 1 ) ; } if ( name . endsWith ( "Type" ) ) { name = name . substring ( 0 , name . length ( ) - 4 ) ; } this . nodeType = insertSpacesBetweenCamelCase ( name ) ; } if ( this . label == null ) { if ( isNullOrBlank ( this . image ) ) { this . label = this . nodeType ; this . shape = "box" ; } else if ( isNotNullAndNonEmpty ( this . edgeLabel ) ) { this . label = "" ; } else { this . label = node . toString ( ) ; } } if ( isNullOrBlank ( this . tooltop ) ) { if ( isNotNullAndNonEmpty ( this . nodeType ) ) { String description = isNotNullAndNonEmpty ( this . edgeLabel ) ? this . edgeLabel : this . label ; this . tooltop = this . nodeType + ": " + description ; } else { this . tooltop = this . label ; } } if ( isNullOrBlank ( this . url ) && isNotNullAndNonEmpty ( this . nodeType ) ) { this . url = "http://activemq.apache.org/camel/" + this . nodeType . toLowerCase ( ) . replace ( ' ' , '-' ) + ".html" ; } if ( node instanceof ProcessorType && this . outputs == null ) { ProcessorType processorType = ( ProcessorType ) node ; this . outputs = processorType . getOutputs ( ) ; } } protected String removeQueryString ( String text ) { int idx = text . indexOf ( "?" ) ; if ( idx <= 0 ) { return text ; } else { return text . substring ( 0 , idx ) ; } } public static String insertSpacesBetweenCamelCase ( String name ) { boolean lastCharacterLowerCase = false ; StringBuffer buffer = new StringBuffer ( ) ; int i = 0 ; for ( int size = name . length ( ) ; i < size ; i ++ ) { char ch = name . charAt ( i ) ; if ( Character . isUpperCase ( ch ) ) { if ( lastCharacterLowerCase ) { buffer . append ( ' ' ) ; } lastCharacterLowerCase = false ; } else { lastCharacterLowerCase = true ; } buffer . append ( ch ) ; } return buffer . toString ( ) ; } } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "php" ) public @ interface PHP { String value ( ) ; } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . impl . DefaultMessage ; public class JMXMessage extends DefaultMessage { private Notification notification ; public JMXMessage ( ) { this ( null ) ; } public JMXMessage ( Notification notification ) { this . notification = notification ; } @ Override public String toString ( ) { return "JMXMessage: " + notification ; } @ Override public JMXExchange getExchange ( ) { return ( JMXExchange ) super . getExchange ( ) ; } @ Override public JMXMessage newInstance ( ) { return new JMXMessage ( ) ; } public Notification getNotification ( ) { return notification ; } } 	1
package org . apache . camel . component . jpa ; import java . util . Map ; import javax . persistence . EntityManager ; import javax . persistence . EntityManagerFactory ; import javax . persistence . Persistence ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . springframework . orm . jpa . JpaTemplate ; public class JpaEndpoint extends ScheduledPollEndpoint < Exchange > { private EntityManagerFactory entityManagerFactory ; private String persistenceUnit = "camel" ; private JpaTemplate template ; private Expression < Exchange > producerExpression ; private int maximumResults = - 1 ; private Class < ? > entityType ; private Map entityManagerProperties ; private boolean consumeDelete = true ; private boolean consumeLockEntity = true ; private boolean flushOnSend = true ; public JpaEndpoint ( String uri , JpaComponent component ) { super ( uri , component ) ; entityManagerFactory = component . getEntityManagerFactory ( ) ; } public JpaEndpoint ( String endpointUri , EntityManagerFactory entityManagerFactory ) { super ( endpointUri ) ; this . entityManagerFactory = entityManagerFactory ; } public JpaEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < Exchange > createProducer ( ) throws Exception { validate ( ) ; return new JpaProducer ( this , getProducerExpression ( ) ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { validate ( ) ; JpaConsumer consumer = new JpaConsumer ( this , processor ) ; configureConsumer ( consumer ) ; return consumer ; } @ Override public void configureProperties ( Map options ) { super . configureProperties ( options ) ; Map emProperties = IntrospectionSupport . extractProperties ( options , "emf." ) ; if ( emProperties != null ) { setEntityManagerProperties ( emProperties ) ; } } public boolean isSingleton ( ) { return false ; } public JpaTemplate getTemplate ( ) { if ( template == null ) { template = createTemplate ( ) ; } return template ; } public void setTemplate ( JpaTemplate template ) { this . template = template ; } public Expression < Exchange > getProducerExpression ( ) { if ( producerExpression == null ) { producerExpression = createProducerExpression ( ) ; } return producerExpression ; } public void setProducerExpression ( Expression < Exchange > producerExpression ) { this . producerExpression = producerExpression ; } public int getMaximumResults ( ) { return maximumResults ; } public void setMaximumResults ( int maximumResults ) { this . maximumResults = maximumResults ; } public Class < ? > getEntityType ( ) { return entityType ; } public void setEntityType ( Class < ? > entityType ) { this . entityType = entityType ; } public EntityManagerFactory getEntityManagerFactory ( ) { if ( entityManagerFactory == null ) { entityManagerFactory = createEntityManagerFactory ( ) ; } return entityManagerFactory ; } public void setEntityManagerFactory ( EntityManagerFactory entityManagerFactory ) { this . entityManagerFactory = entityManagerFactory ; } public Map getEntityManagerProperties ( ) { if ( entityManagerProperties == null ) { entityManagerProperties = System . getProperties ( ) ; } return entityManagerProperties ; } public void setEntityManagerProperties ( Map entityManagerProperties ) { this . entityManagerProperties = entityManagerProperties ; } public String getPersistenceUnit ( ) { return persistenceUnit ; } public void setPersistenceUnit ( String persistenceUnit ) { this . persistenceUnit = persistenceUnit ; } public boolean isConsumeDelete ( ) { return consumeDelete ; } public void setConsumeDelete ( boolean consumeDelete ) { this . consumeDelete = consumeDelete ; } public boolean isConsumeLockEntity ( ) { return consumeLockEntity ; } public void setConsumeLockEntity ( boolean consumeLockEntity ) { this . consumeLockEntity = consumeLockEntity ; } public boolean isFlushOnSend ( ) { return flushOnSend ; } public void setFlushOnSend ( boolean flushOnSend ) { this . flushOnSend = flushOnSend ; } protected void validate ( ) { ObjectHelper . notNull ( getEntityManagerFactory ( ) , "entityManagerFactory property" ) ; } protected JpaTemplate createTemplate ( ) { return new JpaTemplate ( getEntityManagerFactory ( ) ) ; } protected EntityManagerFactory createEntityManagerFactory ( ) { return Persistence . createEntityManagerFactory ( persistenceUnit , getEntityManagerProperties ( ) ) ; } protected EntityManager createEntityManager ( ) { return getEntityManagerFactory ( ) . createEntityManager ( ) ; } protected TransactionStrategy createTransactionStrategy ( ) { EntityManagerFactory emf = getEntityManagerFactory ( ) ; return JpaTemplateTransactionStrategy . newInstance ( emf , getTemplate ( ) ) ; } protected Expression < Exchange > createProducerExpression ( ) { final Class < ? > type = getEntityType ( ) ; if ( type == null ) { return ExpressionBuilder . bodyExpression ( ) ; } else { return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { Object defaultValue = exchange . getIn ( ) . getBody ( ) ; if ( defaultValue != null ) { throw new NoTypeConversionAvailableException ( defaultValue , type ) ; } answer = exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } return answer ; } } ; } } } 	0
package org . apache . camel . converter ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Converter ; import org . apache . camel . util . ObjectHelper ; @ Converter public final class ObjectConverter { private ObjectConverter ( ) { } public static boolean isCollection ( Object value ) { return value instanceof Collection || ( value != null && value . getClass ( ) . isArray ( ) ) ; } @ SuppressWarnings ( "unchecked" ) @ Converter @ Deprecated public static Iterator iterator ( Object value ) { return ObjectHelper . createIterator ( value ) ; } @ Converter public static boolean toBool ( Object value ) { Boolean answer = toBoolean ( value ) ; if ( answer != null ) { return answer . booleanValue ( ) ; } return false ; } @ Converter public static Boolean toBoolean ( Object value ) { return ObjectHelper . toBoolean ( value ) ; } @ Converter public static Boolean toBoolean ( Boolean value ) { if ( value != null ) { return value ; } return Boolean . FALSE ; } @ Converter public static Byte toByte ( Object value ) { if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Byte . valueOf ( number . byteValue ( ) ) ; } else if ( value instanceof String ) { return Byte . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static byte [ ] toByteArray ( String value ) { return value . getBytes ( ) ; } @ Converter public static char [ ] toCharArray ( String value ) { return value . toCharArray ( ) ; } @ Converter public static String fromCharArray ( char [ ] value ) { return new String ( value ) ; } @ Converter public static Short toShort ( Object value ) { if ( value instanceof Short ) { return ( Short ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Short . valueOf ( number . shortValue ( ) ) ; } else if ( value instanceof String ) { return Short . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Integer toInteger ( Object value ) { if ( value instanceof Integer ) { return ( Integer ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Integer . valueOf ( number . intValue ( ) ) ; } else if ( value instanceof String ) { return Integer . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Long toLong ( Object value ) { if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Long . valueOf ( number . longValue ( ) ) ; } else if ( value instanceof String ) { return Long . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Float toFloat ( Object value ) { if ( value instanceof Float ) { return ( Float ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Float . valueOf ( number . floatValue ( ) ) ; } else if ( value instanceof String ) { return Float . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Double toDouble ( Object value ) { if ( value instanceof Double ) { return ( Double ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Double . valueOf ( number . doubleValue ( ) ) ; } else if ( value instanceof String ) { return Double . valueOf ( ( String ) value ) ; } else { return null ; } } } 	1
package org . apache . camel . view ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . CamelContext ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . ToType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class GraphGeneratorSupport { private static final transient Log LOG = LogFactory . getLog ( RouteDotGenerator . class ) ; protected String dir ; protected int clusterCounter ; protected String extension ; private String imagePrefix = "http://activemq.apache.org/camel/images/eip/" ; private Map < Object , NodeData > nodeMap = new HashMap < Object , NodeData > ( ) ; private boolean makeParentDirs = true ; private Map < String , List < RouteType > > routeGroupMap ; protected GraphGeneratorSupport ( String dir , String extension ) { this . dir = dir ; this . extension = extension ; } public String getDir ( ) { return dir ; } public void setDir ( String dir ) { this . dir = dir ; } public void drawRoutes ( CamelContext context ) throws IOException { File parent = new File ( dir ) ; if ( makeParentDirs ) { parent . mkdirs ( ) ; } List < RouteType > routes = context . getRouteDefinitions ( ) ; routeGroupMap = createRouteGroupMap ( routes ) ; generateFile ( parent , "routes" + extension , routeGroupMap ) ; if ( routeGroupMap . size ( ) >= 1 ) { Set < Map . Entry < String , List < RouteType > > > entries = routeGroupMap . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { Map < String , List < RouteType > > map = new HashMap < String , List < RouteType > > ( ) ; String group = entry . getKey ( ) ; map . put ( group , entry . getValue ( ) ) ; generateFile ( parent , group + extension , map ) ; } } } private void generateFile ( File parent , String fileName , Map < String , List < RouteType > > map ) throws IOException { nodeMap . clear ( ) ; clusterCounter = 0 ; PrintWriter writer = new PrintWriter ( new FileWriter ( new File ( parent , fileName ) ) ) ; try { generateFile ( writer , map ) ; } finally { writer . close ( ) ; } } protected abstract void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) ; protected boolean isMulticastNode ( ProcessorType node ) { return node instanceof MulticastType || node instanceof ChoiceType ; } protected String getLabel ( List < ExpressionType > expressions ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; for ( ExpressionType expression : expressions ) { buffer . append ( getLabel ( expression ) ) ; } return buffer . toString ( ) ; } protected String getLabel ( ExpressionType expression ) { if ( expression != null ) { return expression . getLabel ( ) ; } return "" ; } protected NodeData getNodeData ( Object node ) { Object key = node ; if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; key = fromType . getUriOrRef ( ) ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; key = toType . getUriOrRef ( ) ; } NodeData answer = nodeMap . get ( key ) ; if ( answer == null ) { String id = "node" + ( nodeMap . size ( ) + 1 ) ; answer = new NodeData ( id , node , imagePrefix ) ; nodeMap . put ( key , answer ) ; } return answer ; } protected Map < String , List < RouteType > > createRouteGroupMap ( List < RouteType > routes ) { Map < String , List < RouteType > > map = new HashMap < String , List < RouteType > > ( ) ; for ( RouteType route : routes ) { String group = route . getGroup ( ) ; if ( group == null ) { group = "Camel Routes" ; } List < RouteType > list = map . get ( group ) ; if ( list == null ) { list = new ArrayList < RouteType > ( ) ; map . put ( group , list ) ; } list . add ( route ) ; } return map ; } } 	0
package org . apache . camel . processor . resequencer ; import java . util . Queue ; import java . util . Timer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResequencerEngine < E > implements TimeoutHandler { private static final transient Log LOG = LogFactory . getLog ( ResequencerEngine . class ) ; private long timeout ; private int capacity ; private Queue < E > outQueue ; private Element < E > lastDelivered ; private Sequence < Element < E > > sequence ; private Timer timer ; public ResequencerEngine ( SequenceElementComparator < E > comparator ) { this ( comparator , Integer . MAX_VALUE ) ; } public ResequencerEngine ( SequenceElementComparator < E > comparator , int capacity ) { this . timer = new Timer ( "Resequencer Timer" ) ; this . sequence = createSequence ( comparator ) ; this . capacity = capacity ; this . timeout = 2000L ; this . lastDelivered = null ; } public void stop ( ) { this . timer . cancel ( ) ; } public Queue < E > getOutQueue ( ) { return outQueue ; } public void setOutQueue ( Queue < E > outQueue ) { this . outQueue = outQueue ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public synchronized void timeout ( Timeout timout ) { try { while ( deliver ( ) ) { } } catch ( RuntimeException e ) { LOG . error ( "error during delivery" , e ) ; } } public synchronized void add ( E o ) { if ( sequence . size ( ) >= capacity ) { throw new IllegalStateException ( "maximum capacity is reached" ) ; } insert ( o ) ; } public synchronized void put ( E o ) throws InterruptedException { if ( sequence . size ( ) >= capacity ) { wait ( ) ; } insert ( o ) ; } E getLastDelivered ( ) { if ( lastDelivered == null ) { return null ; } return lastDelivered . getObject ( ) ; } void setLastDelivered ( E o ) { lastDelivered = new Element < E > ( o ) ; } private void insert ( E o ) { Element < E > element = new Element < E > ( o ) ; sequence . add ( element ) ; Element < E > successor = sequence . successor ( element ) ; if ( successor != null ) { successor . cancel ( ) ; } if ( successorOfLastDelivered ( element ) ) { } else if ( sequence . predecessor ( element ) != null ) { } else { Timeout t = defineTimeout ( ) ; element . schedule ( t ) ; } while ( deliver ( ) ) { } } private boolean deliver ( ) { if ( sequence . size ( ) == 0 ) { return false ; } Element < E > element = sequence . first ( ) ; if ( element . scheduled ( ) ) { return false ; } sequence . remove ( element ) ; lastDelivered = element ; notify ( ) ; outQueue . add ( element . getObject ( ) ) ; return true ; } private boolean successorOfLastDelivered ( Element < E > element ) { if ( lastDelivered == null ) { return false ; } if ( sequence . comparator ( ) . successor ( element , lastDelivered ) ) { return true ; } return false ; } private Timeout defineTimeout ( ) { Timeout result = new Timeout ( timer , timeout ) ; result . addTimeoutHandler ( this ) ; return result ; } private static < E > Sequence < Element < E > > createSequence ( SequenceElementComparator < E > comparator ) { return new Sequence < Element < E > > ( new ElementComparator < E > ( comparator ) ) ; } } 	1
package org . apache . camel . language . juel ; import java . util . Properties ; import javax . el . ArrayELResolver ; import javax . el . CompositeELResolver ; import javax . el . ELContext ; import javax . el . ELResolver ; import javax . el . ExpressionFactory ; import javax . el . ListELResolver ; import javax . el . MapELResolver ; import javax . el . ResourceBundleELResolver ; import javax . el . ValueExpression ; import de . odysseus . el . util . SimpleContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . impl . ExpressionSupport ; public class JuelExpression extends ExpressionSupport < Exchange > { private final String expression ; private final Class < ? > type ; private ExpressionFactory expressionFactory ; private Properties expressionFactoryProperties ; public JuelExpression ( String expression , Class < ? > type ) { this . expression = expression ; this . type = type ; } public static JuelExpression el ( String expression ) { return new JuelExpression ( expression , Object . class ) ; } public Object evaluate ( Exchange exchange ) { ELContext context = populateContext ( createContext ( ) , exchange ) ; ValueExpression valueExpression = getExpressionFactory ( ) . createValueExpression ( context , expression , type ) ; return valueExpression . getValue ( context ) ; } public ExpressionFactory getExpressionFactory ( ) { if ( expressionFactory == null ) { Properties properties = getExpressionFactoryProperties ( ) ; expressionFactory = ExpressionFactory . newInstance ( properties ) ; } return expressionFactory ; } public void setExpressionFactory ( ExpressionFactory expressionFactory ) { this . expressionFactory = expressionFactory ; } public Properties getExpressionFactoryProperties ( ) { if ( expressionFactoryProperties == null ) { expressionFactoryProperties = new Properties ( ) ; populateDefaultExpressionProperties ( expressionFactoryProperties ) ; } return expressionFactoryProperties ; } public void setExpressionFactoryProperties ( Properties expressionFactoryProperties ) { this . expressionFactoryProperties = expressionFactoryProperties ; } protected ELContext populateContext ( ELContext context , Exchange exchange ) { setVariable ( context , "exchange" , exchange , Exchange . class ) ; setVariable ( context , "in" , exchange . getIn ( ) , Message . class ) ; Message out = exchange . getOut ( false ) ; setVariable ( context , "out" , out , Message . class ) ; return context ; } protected void populateDefaultExpressionProperties ( Properties properties ) { properties . setProperty ( "javax.el.methodInvocations" , "true" ) ; } protected void setVariable ( ELContext context , String name , Object value , Class < ? > type ) { ValueExpression valueExpression = getExpressionFactory ( ) . createValueExpression ( value , type ) ; SimpleContext simpleContext = ( SimpleContext ) context ; simpleContext . setVariable ( name , valueExpression ) ; } protected ELContext createContext ( ) { ELResolver resolver = new CompositeELResolver ( ) { { add ( new ArrayELResolver ( false ) ) ; add ( new ListELResolver ( false ) ) ; add ( new MapELResolver ( false ) ) ; add ( new ResourceBundleELResolver ( ) ) ; add ( new BeanAndMethodELResolver ( ) ) ; } } ; return new SimpleContext ( resolver ) ; } protected String assertionFailureMessage ( Exchange exchange ) { return expression ; } } 	0
package org . apache . camel . processor ; import java . text . NumberFormat ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Exchange ; import org . apache . commons . logging . Log ; public class ThroughputLogger extends Logger { private int groupSize = 100 ; private long startTime ; private long groupStartTime ; private AtomicInteger receivedCounter = new AtomicInteger ( ) ; private NumberFormat numberFormat = NumberFormat . getNumberInstance ( ) ; private String action = "Received" ; private String logMessage ; public ThroughputLogger ( ) { } public ThroughputLogger ( Log log ) { super ( log ) ; } public ThroughputLogger ( Log log , LoggingLevel level ) { super ( log , level ) ; } public ThroughputLogger ( String logName ) { super ( logName ) ; } public ThroughputLogger ( String logName , LoggingLevel level ) { super ( logName , level ) ; } public ThroughputLogger ( String logName , LoggingLevel level , int groupSize ) { super ( logName , level ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( String logName , int groupSize ) { super ( logName ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( int groupSize ) { setGroupSize ( groupSize ) ; } @ Override public void process ( Exchange exchange ) { if ( startTime == 0 ) { startTime = System . currentTimeMillis ( ) ; } int receivedCount = receivedCounter . incrementAndGet ( ) ; if ( receivedCount % groupSize == 0 ) { logMessage = createLogMessage ( exchange , receivedCount ) ; super . process ( exchange ) ; } } public int getGroupSize ( ) { return groupSize ; } public void setGroupSize ( int groupSize ) { if ( groupSize == 0 ) { throw new IllegalArgumentException ( "groupSize cannot be zero!" ) ; } this . groupSize = groupSize ; } public NumberFormat getNumberFormat ( ) { return numberFormat ; } public void setNumberFormat ( NumberFormat numberFormat ) { this . numberFormat = numberFormat ; } public String getAction ( ) { return action ; } public void setAction ( String action ) { this . action = action ; } @ Override protected Object logMessage ( Exchange exchange ) { return logMessage ; } protected String createLogMessage ( Exchange exchange , int receivedCount ) { long time = System . currentTimeMillis ( ) ; if ( groupStartTime == 0 ) { groupStartTime = startTime ; } double rate = messagesPerSecond ( groupSize , groupStartTime , time ) ; double average = messagesPerSecond ( receivedCount , startTime , time ) ; groupStartTime = time ; return getAction ( ) + ": " + receivedCount + " messages so far. Last group took: " + ( time - groupStartTime ) + " millis which is: " + numberFormat . format ( rate ) + " messages per second. average: " + numberFormat . format ( average ) ; } protected double messagesPerSecond ( long messageCount , long startTime , long endTime ) { double rate = messageCount * 1000.0 ; rate /= endTime - startTime ; return rate ; } } 	1
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Processor ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "to" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ToType extends ProcessorType < ProcessorType > { @ XmlAttribute private String uri ; @ XmlAttribute private String ref ; @ XmlTransient private Endpoint endpoint ; public ToType ( ) { } public ToType ( String uri ) { setUri ( uri ) ; } public ToType ( Endpoint endpoint ) { setEndpoint ( endpoint ) ; } @ Override public String toString ( ) { return "To[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "to" ; } @ Override public String getLabel ( ) { return FromType . description ( getUri ( ) , getRef ( ) , getEndpoint ( ) ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Endpoint endpoint = resolveEndpoint ( routeContext ) ; return new SendProcessor ( endpoint ) ; } public Endpoint resolveEndpoint ( RouteContext context ) { if ( endpoint == null ) { endpoint = context . resolveEndpoint ( getUri ( ) , getRef ( ) ) ; } return endpoint ; } public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } public Object getUriOrRef ( ) { if ( ObjectHelper . isNullOrBlank ( uri ) ) { return uri ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } return ref ; } } 	0
package org . apache . camel . processor . aggregate ; import java . util . AbstractCollection ; import java . util . Collection ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AggregationCollection extends AbstractCollection < Exchange > { private static final transient Log LOG = LogFactory . getLog ( AggregationCollection . class ) ; private final Expression < Exchange > correlationExpression ; private final AggregationStrategy aggregationStrategy ; private Map < Object , Exchange > map = new LinkedHashMap < Object , Exchange > ( ) ; public AggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy ) { this . correlationExpression = correlationExpression ; this . aggregationStrategy = aggregationStrategy ; } protected Map < Object , Exchange > getMap ( ) { return map ; } @ Override public boolean add ( Exchange exchange ) { Object correlationKey = correlationExpression . evaluate ( exchange ) ; Exchange oldExchange = map . get ( correlationKey ) ; Exchange newExchange = exchange ; if ( oldExchange != null ) { newExchange = aggregationStrategy . aggregate ( oldExchange , newExchange ) ; } if ( newExchange != oldExchange ) { LOG . debug ( "put exchange:" + newExchange + " for key:" + correlationKey ) ; map . put ( correlationKey , newExchange ) ; } onAggregation ( correlationKey , newExchange ) ; return true ; } public Iterator < Exchange > iterator ( ) { return map . values ( ) . iterator ( ) ; } public int size ( ) { return map . size ( ) ; } @ Override public void clear ( ) { map . clear ( ) ; } protected void onAggregation ( Object correlationKey , Exchange newExchange ) { } } 	1
package org . apache . camel . util ; import java . io . IOException ; public class NoFactoryAvailableException extends IOException { private final String uri ; public NoFactoryAvailableException ( String uri ) { super ( "Could not find factory class for resource: " + uri ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	0
package org . apache . camel . util ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . InvalidPayloadException ; import org . apache . camel . InvalidTypeException ; import org . apache . camel . Message ; import org . apache . camel . NoSuchBeanException ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . NoSuchHeaderException ; import org . apache . camel . NoSuchPropertyException ; public final class ExchangeHelper { private ExchangeHelper ( ) { } public static < T > T getExchangeProperty ( Exchange exchange , String propertyName , Class < T > type , T defaultValue ) { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { return defaultValue ; } return answer ; } @ SuppressWarnings ( { "unchecked" } ) public static < E extends Exchange > Endpoint < E > resolveEndpoint ( E exchange , Object value ) throws NoSuchEndpointException { Endpoint < E > endpoint ; if ( value instanceof Endpoint ) { endpoint = ( Endpoint < E > ) value ; } else { String uri = value . toString ( ) ; endpoint = CamelContextHelper . getMandatoryEndpoint ( exchange . getContext ( ) , uri ) ; } return endpoint ; } public static < T > T getMandatoryProperty ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchPropertyException { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchPropertyException ( exchange , propertyName , type ) ; } return answer ; } public static < T > T getMandatoryHeader ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchHeaderException { T answer = exchange . getIn ( ) . getHeader ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchHeaderException ( exchange , propertyName , type ) ; } return answer ; } public static Object getMandatoryInBody ( Exchange exchange ) throws InvalidPayloadException { Object answer = exchange . getIn ( ) . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class ) ; } return answer ; } public static < T > T getMandatoryInBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { T answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type ) ; } return answer ; } public static Object getMandatoryOutBody ( Exchange exchange ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; Object answer = out . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class , out ) ; } return answer ; } public static < T > T getMandatoryOutBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; T answer = out . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type , out ) ; } return answer ; } public static < T > T convertToMandatoryType ( Exchange exchange , Class < T > type , Object value ) throws InvalidTypeException { T answer = convertToType ( exchange , type , value ) ; if ( answer == null ) { throw new InvalidTypeException ( exchange , value , type ) ; } return answer ; } public static < T > T convertToType ( Exchange exchange , Class < T > type , Object value ) { return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public static void copyResults ( Exchange result , Exchange source ) { if ( result != source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } Message out = source . getOut ( false ) ; if ( out != null ) { result . getOut ( true ) . copyFrom ( out ) ; } else { result . getOut ( true ) . copyFrom ( source . getIn ( ) ) ; } result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } public static boolean isInCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isInCapable ( ) ; } public static boolean isOutCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isOutCapable ( ) ; } public static < T > T newInstance ( Exchange exchange , Class < T > type ) { return exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } public static Map createVariableMap ( Exchange exchange ) { Map answer = new HashMap ( ) ; populateVariableMap ( exchange , answer ) ; return answer ; } public static void populateVariableMap ( Exchange exchange , Map map ) { map . put ( "exchange" , exchange ) ; Message in = exchange . getIn ( ) ; map . put ( "in" , in ) ; map . put ( "request" , in ) ; map . put ( "headers" , in . getHeaders ( ) ) ; map . put ( "body" , in . getBody ( ) ) ; if ( isOutCapable ( exchange ) ) { Message out = exchange . getOut ( true ) ; map . put ( "out" , out ) ; map . put ( "response" , out ) ; } map . put ( "camelContext" , exchange . getContext ( ) ) ; } public static String getContentType ( Exchange exchange ) { return exchange . getIn ( ) . getHeader ( "Content-Type" , String . class ) ; } public static Object lookupMandatoryBean ( Exchange exchange , String name ) { Object value = lookupBean ( exchange , name ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static < T > T lookupMandatoryBean ( Exchange exchange , String name , Class < T > type ) { T value = lookupBean ( exchange , name , type ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static Object lookupBean ( Exchange exchange , String name ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookupBean ( Exchange exchange , String name , Class < T > type ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } } 	1
package org . apache . camel . builder . xml ; public class StreamResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new StreamResultHandler ( ) ; } } 	0
package org . apache . camel ; public class NoSuchEndpointException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String uri ; public NoSuchEndpointException ( String uri ) { super ( "No endpoint could be found for: " + uri ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	1
package org . apache . camel . component . velocity ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . velocity . app . VelocityEngine ; public class VelocityComponent extends DefaultComponent { private VelocityEngine velocityEngine = new VelocityEngine ( ) ; public VelocityEngine getVelocityEngine ( ) { return velocityEngine ; } public void setVelocityEngine ( VelocityEngine velocityEngine ) { this . velocityEngine = velocityEngine ; } protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new VelocityEndpoint ( uri , this , remaining , parameters ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class DefaultConsumer < E extends Exchange > extends ServiceSupport implements Consumer < E > { private Endpoint < E > endpoint ; private Processor processor ; private AsyncProcessor asyncProcessor ; private ExceptionHandler exceptionHandler ; public DefaultConsumer ( Endpoint < E > endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; } @ Override public String toString ( ) { return "Consumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } public AsyncProcessor getAsyncProcessor ( ) { if ( asyncProcessor == null ) { asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; } return asyncProcessor ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void handleException ( Throwable t ) { getExceptionHandler ( ) . handleException ( t ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "from" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FromType extends OptionalIdentifiedType < FromType > { @ XmlAttribute private String uri ; @ XmlAttribute private String ref ; @ XmlTransient private Endpoint < ? extends Exchange > endpoint ; public FromType ( ) { } public FromType ( String uri ) { setUri ( uri ) ; } public FromType ( Endpoint < ? extends Exchange > endpoint ) { this . endpoint = endpoint ; } @ Override public String toString ( ) { return "From[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "from" ; } public String getLabel ( ) { return description ( getUri ( ) , getRef ( ) , getEndpoint ( ) ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( RouteContext context ) { if ( endpoint == null ) { endpoint = context . resolveEndpoint ( getUri ( ) , getRef ( ) ) ; } return endpoint ; } public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public Object getUriOrRef ( ) { if ( ObjectHelper . isNullOrBlank ( uri ) ) { return uri ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } return ref ; } protected static String description ( String uri , String ref , Endpoint endpoint ) { if ( ref != null ) { return "ref:" + ref ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } else if ( uri != null ) { return uri ; } else { return "no uri or ref supplied!" ; } } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanProcessor extends ServiceSupport implements Processor { public static final String METHOD_NAME = "org.apache.camel.MethodName" ; private static final transient Log LOG = LogFactory . getLog ( BeanProcessor . class ) ; private Method methodObject ; private String method ; private BeanHolder beanHolder ; public BeanProcessor ( Object pojo , BeanInfo beanInfo ) { this ( new ConstantBeanHolder ( pojo , beanInfo ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext , ParameterMappingStrategy parameterMappingStrategy ) { this ( pojo , new BeanInfo ( camelContext , pojo . getClass ( ) , parameterMappingStrategy ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext ) { this ( pojo , camelContext , BeanInfo . createParameterMappingStrategy ( camelContext ) ) ; } public BeanProcessor ( BeanHolder beanHolder ) { this . beanHolder = beanHolder ; } @ Override public String toString ( ) { String description = methodObject != null ? " " + methodObject : "" ; return "BeanProcessor[" + beanHolder + description + "]" ; } public void process ( Exchange exchange ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> invoking method for: " + exchange ) ; } Object bean = beanHolder . getBean ( ) ; exchange . setProperty ( "org.apache.camel.bean.BeanHolder" , beanHolder ) ; Processor processor = getProcessor ( ) ; BeanInfo beanInfo = beanHolder . getBeanInfo ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return ; } Message in = exchange . getIn ( ) ; BeanInvocation beanInvoke = in . getBody ( BeanInvocation . class ) ; if ( beanInvoke != null ) { beanInvoke . invoke ( bean , exchange ) ; return ; } boolean isExplicitMethod = false ; String prevMethod = null ; MethodInvocation invocation ; if ( methodObject != null ) { invocation = beanInfo . createInvocation ( methodObject , bean , exchange ) ; } else { if ( ObjectHelper . isNotNullAndNonEmpty ( method ) ) { prevMethod = in . getHeader ( METHOD_NAME , String . class ) ; in . setHeader ( METHOD_NAME , method ) ; isExplicitMethod = true ; } invocation = beanInfo . createInvocation ( bean , exchange ) ; } if ( invocation == null ) { throw new IllegalStateException ( "No method invocation could be created, " + "no maching method could be found on: " + bean ) ; } try { Object value = invocation . proceed ( ) ; if ( value != null ) { if ( exchange . getPattern ( ) . isOutCapable ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on OUT message: " + value ) ; } exchange . getOut ( true ) . setBody ( value ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on IN message: " + value ) ; } exchange . getIn ( ) . setBody ( value ) ; } } } catch ( InvocationTargetException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof Exception ) { throw ( Exception ) cause ; } else { throw e ; } } catch ( Exception e ) { throw e ; } catch ( Throwable throwable ) { throw new Exception ( throwable ) ; } finally { if ( isExplicitMethod ) { in . setHeader ( METHOD_NAME , prevMethod ) ; } } } protected Processor getProcessor ( ) { return beanHolder . getProcessor ( ) ; } public Method getMethodObject ( ) { return methodObject ; } public void setMethodObject ( Method methodObject ) { this . methodObject = methodObject ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Deprecated public void setMethodName ( String method ) { setMethod ( method ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startService ( getProcessor ( ) ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopService ( getProcessor ( ) ) ; } } 	1
package org . apache . camel . processor . validation ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; public class NoXmlBodyValidationException extends ValidationException { public NoXmlBodyValidationException ( Exchange exchange ) { super ( exchange , "No XML body could be found on the input message" + exchange ) ; } } 	0
package org . apache . camel ; import org . apache . camel . impl . DefaultProducerTemplate ; @ Deprecated public class CamelTemplate < E extends Exchange > extends DefaultProducerTemplate < E > { public CamelTemplate ( CamelContext context ) { super ( context ) ; } public CamelTemplate ( CamelContext context , Endpoint defaultEndpoint ) { super ( context , defaultEndpoint ) ; } } 	1
package org . apache . camel . util ; import java . util . LinkedHashMap ; import java . util . Map ; public class LRUCache < K , V > extends LinkedHashMap < K , V > { private static final long serialVersionUID = - 342098639681884413L ; private int maxCacheSize = 10000 ; public LRUCache ( int maximumCacheSize ) { this ( maximumCacheSize , maximumCacheSize , 0.75f , true ) ; } public LRUCache ( int initialCapacity , int maximumCacheSize , float loadFactor , boolean accessOrder ) { super ( initialCapacity , loadFactor , accessOrder ) ; this . maxCacheSize = maximumCacheSize ; } public int getMaxCacheSize ( ) { return maxCacheSize ; } protected boolean removeEldestEntry ( Map . Entry entry ) { return size ( ) > maxCacheSize ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeleteFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( DeleteFileProcessStrategy . class ) ; public DeleteFileProcessStrategy ( ) { } public DeleteFileProcessStrategy ( boolean lockFile ) { super ( lockFile ) ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Deleting file: " + file ) ; } boolean deleted = file . delete ( ) ; if ( ! deleted ) { LOG . warn ( "Could not delete file: " + file ) ; } super . commit ( endpoint , exchange , file ) ; } } 	1
package org . apache . camel . component . stream ; import java . nio . charset . Charset ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class StreamEndpoint extends DefaultEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( StreamEndpoint . class ) ; private String uri ; private String file ; private String url ; private long delay ; private String encoding ; public StreamEndpoint ( String endpointUri , Component component ) throws Exception { super ( endpointUri , component ) ; this . uri = endpointUri ; } public StreamEndpoint ( String endpointUri ) { super ( endpointUri ) ; this . uri = endpointUri ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { return new StreamConsumer ( this , processor , uri ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new StreamProducer ( this , uri ) ; } public boolean isSingleton ( ) { return true ; } public String getFile ( ) { return file ; } public void setFile ( String file ) { this . file = file ; } public String getUrl ( ) { return url ; } public void setUrl ( String url ) { this . url = url ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } Charset getCharset ( ) { if ( encoding == null ) { encoding = Charset . defaultCharset ( ) . name ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No encoding parameter using default charset: " + encoding ) ; } } if ( ! Charset . isSupported ( encoding ) ) { throw new IllegalArgumentException ( "The encoding: " + encoding + " is not supported" ) ; } return Charset . forName ( encoding ) ; } } 	0
package org . apache . camel . processor . validation ; import java . util . ArrayList ; import java . util . List ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultValidationErrorHandler implements ValidatorErrorHandler { private static final transient Log LOG = LogFactory . getLog ( DefaultValidationErrorHandler . class ) ; private List < SAXParseException > warnings = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > errors = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > fatalErrors = new ArrayList < SAXParseException > ( ) ; public void warning ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "warning: " + e , e ) ; } warnings . add ( e ) ; } public void error ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "error: " + e , e ) ; } errors . add ( e ) ; } public void fatalError ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "fatalError: " + e , e ) ; } fatalErrors . add ( e ) ; } public void reset ( ) { warnings . clear ( ) ; errors . clear ( ) ; fatalErrors . clear ( ) ; } public boolean isValid ( ) { return errors . isEmpty ( ) && fatalErrors . isEmpty ( ) ; } public void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } public void handleErrors ( Exchange exchange , Object schema ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . spi . Registry ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . CONSTRUCTOR } ) public @ interface EndpointInject { String uri ( ) default "" ; String name ( ) default "" ; } 	0
package org . apache . camel . model ; import java . util . concurrent . LinkedBlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Splitter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "splitter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SplitterType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; public SplitterType ( ) { } public SplitterType ( Expression expression ) { super ( expression ) ; } public SplitterType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Splitter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "splitter" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } if ( threadPoolExecutor == null ) { threadPoolExecutor = new ThreadPoolExecutor ( 4 , 16 , 0L , TimeUnit . MILLISECONDS , new LinkedBlockingQueue ( ) ) ; } return new Splitter ( getExpression ( ) . createExpression ( routeContext ) , childProcessor , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public void setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public void setThreadPoolExecutor ( ThreadPoolExecutor threadPoolExecutor ) { this . threadPoolExecutor = threadPoolExecutor ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "ruby" ) public class RubyExpression extends ExpressionType { public RubyExpression ( ) { } public RubyExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "ruby" ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import javax . activation . DataHandler ; import org . apache . camel . Message ; public class DefaultMessage extends MessageSupport { private Map < String , Object > headers ; private Map < String , DataHandler > attachments ; @ Override public String toString ( ) { return "Message: " + getBody ( ) ; } public Object getHeader ( String name ) { return getHeaders ( ) . get ( name ) ; } public < T > T getHeader ( String name , Class < T > type ) { Object value = getHeader ( name ) ; return getExchange ( ) . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setHeader ( String name , Object value ) { if ( headers == null ) { headers = createHeaders ( ) ; } headers . put ( name , value ) ; } public Object removeHeader ( String name ) { if ( headers != null ) { return headers . remove ( name ) ; } else { return null ; } } public Map < String , Object > getHeaders ( ) { if ( headers == null ) { headers = createHeaders ( ) ; } return headers ; } public void setHeaders ( Map < String , Object > headers ) { this . headers = headers ; } public DefaultMessage newInstance ( ) { return new DefaultMessage ( ) ; } protected Map < String , Object > createHeaders ( ) { HashMap < String , Object > map = new HashMap < String , Object > ( ) ; populateInitialHeaders ( map ) ; return map ; } protected void populateInitialHeaders ( Map < String , Object > map ) { } protected Map < String , DataHandler > createAttachments ( ) { HashMap < String , DataHandler > map = new HashMap < String , DataHandler > ( ) ; populateInitialAttachments ( map ) ; return map ; } protected void populateInitialAttachments ( Map < String , DataHandler > map ) { } public void addAttachment ( String id , DataHandler content ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } attachments . put ( id , content ) ; } public DataHandler getAttachment ( String id ) { return getAttachments ( ) . get ( id ) ; } public Set < String > getAttachmentNames ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments . keySet ( ) ; } public void removeAttachment ( String id ) { if ( attachments != null && attachments . containsKey ( id ) ) { attachments . remove ( id ) ; } } public Map < String , DataHandler > getAttachments ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments ; } public void setAttachments ( Map < String , DataHandler > attachments ) { this . attachments = attachments ; } public boolean hasAttachments ( ) { return this . attachments != null && this . attachments . size ( ) > 0 ; } protected boolean hasPopulatedHeaders ( ) { return headers != null ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . TYPE , ElementType . METHOD } ) public @ interface Converter { } 	0
package org . apache . camel . processor . interceptor ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . converter . stream . StreamCache ; import org . apache . camel . model . InterceptorRef ; import org . apache . camel . model . InterceptorType ; import org . apache . camel . processor . Interceptor ; public class StreamCachingInterceptor extends Interceptor { public StreamCachingInterceptor ( ) { super ( ) ; setInterceptorLogic ( new Processor ( ) { public void process ( Exchange exchange ) throws Exception { Object newBody = exchange . getIn ( ) . getBody ( StreamCache . class ) ; if ( newBody != null ) { exchange . getIn ( ) . setBody ( newBody ) ; } proceed ( exchange ) ; } } ) ; } public StreamCachingInterceptor ( Processor processor ) { this ( ) ; setProcessor ( processor ) ; } @ Override public String toString ( ) { return "StreamCachingInterceptor" ; } public static void noStreamCaching ( List < InterceptorType > interceptors ) { for ( int i = 0 ; i < interceptors . size ( ) ; i ++ ) { InterceptorType interceptor = interceptors . get ( i ) ; if ( interceptor instanceof InterceptorRef && ( ( InterceptorRef ) interceptor ) . getInterceptor ( ) instanceof StreamCachingInterceptor ) { interceptors . remove ( interceptor ) ; } } } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "process" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProcessorRef extends OutputType < ProcessorType > { @ XmlAttribute ( required = true ) private String ref ; @ XmlTransient private Processor processor ; public ProcessorRef ( ) { } public ProcessorRef ( Processor processor ) { this . processor = processor ; } @ Override public String getShortName ( ) { return "processor" ; } @ Override public String toString ( ) { return "Processor[" + ( ( ref != null ) ? "ref:  " + ref : processor ) + "]" ; } @ Override public String getLabel ( ) { if ( ref != null ) { return "ref:  " + ref ; } else if ( processor != null ) { return processor . toString ( ) ; } else { return "" ; } } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { if ( processor == null ) { processor = routeContext . lookup ( getRef ( ) , Processor . class ) ; } return processor ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . CollectionHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class Splitter extends MulticastProcessor implements Processor { public static final String SPLIT_SIZE = "org.apache.camel.splitSize" ; public static final String SPLIT_COUNTER = "org.apache.camel.splitCounter" ; private final Expression expression ; public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy ) { this ( expression , destination , aggregationStrategy , false , null ) ; } public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { super ( Collections . singleton ( destination ) , aggregationStrategy , parallelProcessing , threadPoolExecutor ) ; this . expression = expression ; notNull ( expression , "expression" ) ; notNull ( destination , "destination" ) ; } @ Override public String toString ( ) { return "Splitter[on: " + expression + " to: " + getProcessors ( ) . iterator ( ) . next ( ) + " aggregate: " + getAggregationStrategy ( ) + "]" ; } @ Override protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; Integer collectionSize = CollectionHelper . size ( value ) ; List < ProcessorExchangePair > result ; if ( collectionSize != null ) { result = new ArrayList < ProcessorExchangePair > ( collectionSize ) ; } else { result = new ArrayList < ProcessorExchangePair > ( ) ; } Iterator < Object > iter = ObjectConverter . iterator ( value ) ; while ( iter . hasNext ( ) ) { Object part = iter . next ( ) ; Exchange newExchange = exchange . copy ( ) ; Message in = newExchange . getIn ( ) ; in . setBody ( part ) ; result . add ( new ProcessorExchangePair ( getProcessors ( ) . iterator ( ) . next ( ) , newExchange ) ) ; } return result ; } @ Override protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { exchange . getIn ( ) . setHeader ( SPLIT_COUNTER , i ) ; exchange . getIn ( ) . setHeader ( SPLIT_SIZE , allPairs . size ( ) ) ; } } 	1
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . FailedToCreateProducerException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ProducerCache < E extends Exchange > extends ServiceSupport { private static final transient Log LOG = LogFactory . getLog ( ProducerCache . class ) ; private Map < String , Producer < E > > producers = new HashMap < String , Producer < E > > ( ) ; public synchronized Producer < E > getProducer ( Endpoint < E > endpoint ) { String key = endpoint . getEndpointUri ( ) ; Producer < E > answer = producers . get ( key ) ; if ( answer == null ) { try { answer = endpoint . createProducer ( ) ; answer . start ( ) ; } catch ( Exception e ) { throw new FailedToCreateProducerException ( endpoint , e ) ; } producers . put ( key , answer ) ; } return answer ; } public void send ( Endpoint < E > endpoint , E exchange ) { try { Producer < E > producer = getProducer ( endpoint ) ; producer . process ( exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public E send ( Endpoint < E > endpoint , Processor processor ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( ) ; return sendExchange ( endpoint , producer , processor , exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( ) ; boolean sync = sendExchange ( endpoint , producer , processor , exchange , callback ) ; setProcessedSync ( exchange , sync ) ; return exchange ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isProcessedSync ( Exchange exchange ) { Boolean rc = exchange . getProperty ( ProducerCache . class . getName ( ) + ".SYNC" , Boolean . class ) ; return rc == null ? false : rc ; } public static void setProcessedSync ( Exchange exchange , boolean b ) { exchange . setProperty ( ProducerCache . class . getName ( ) + ".SYNC" , b ? Boolean . TRUE : Boolean . FALSE ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( pattern ) ; return sendExchange ( endpoint , producer , processor , exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } protected E sendExchange ( Endpoint < E > endpoint , Producer < E > producer , Processor processor , E exchange ) throws Exception { processor . process ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> " + endpoint + " " + exchange ) ; } producer . process ( exchange ) ; return exchange ; } protected boolean sendExchange ( Endpoint < E > endpoint , Producer < E > producer , Processor processor , E exchange , AsyncCallback callback ) throws Exception { processor . process ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> " + endpoint + " " + exchange ) ; } return AsyncProcessorTypeConverter . convert ( producer ) . process ( exchange , callback ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( producers . values ( ) ) ; producers . clear ( ) ; } protected void doStart ( ) throws Exception { } } 	0
package org . apache . camel . model ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . MulticastProcessor ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "multicast" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MulticastType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; @ Override public String toString ( ) { return "Multicast[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "multicast" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } protected Processor createCompositeProcessor ( List < Processor > list ) { if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } return new MulticastProcessor ( list , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public MulticastType setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; return this ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public MulticastType setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; return this ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public MulticastType setThreadPoolExecutor ( ThreadPoolExecutor executor ) { this . threadPoolExecutor = executor ; return this ; } @ Override protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { return new StreamCachingInterceptor ( target ) ; } } 	1
package org . apache . camel . component . cxf . util ; import javax . xml . namespace . QName ; import org . apache . cxf . binding . AbstractBindingFactory ; import org . apache . cxf . binding . soap . interceptor . CheckFaultInterceptor ; import org . apache . cxf . binding . soap . interceptor . MustUnderstandInterceptor ; import org . apache . cxf . binding . soap . interceptor . ReadHeadersInterceptor ; import org . apache . cxf . binding . soap . interceptor . SoapActionInInterceptor ; import org . apache . cxf . binding . soap . interceptor . SoapActionOutInterceptor ; import org . apache . cxf . binding . soap . interceptor . SoapHeaderInterceptor ; import org . apache . cxf . binding . soap . interceptor . SoapHeaderOutFilterInterceptor ; import org . apache . cxf . binding . soap . interceptor . SoapOutInterceptor ; import org . apache . cxf . binding . soap . interceptor . SoapPreProtocolOutInterceptor ; import org . apache . cxf . interceptor . AttachmentInInterceptor ; import org . apache . cxf . interceptor . AttachmentOutInterceptor ; import org . apache . cxf . interceptor . StaxInInterceptor ; import org . apache . cxf . interceptor . StaxOutInterceptor ; import org . apache . cxf . interceptor . URIMappingInterceptor ; import org . apache . cxf . service . Service ; import org . apache . cxf . service . factory . ReflectionServiceFactoryBean ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . service . model . ServiceInfo ; import org . apache . cxf . wsdl11 . WSDLServiceFactory ; public class WSDLSoapServiceFactoryBean extends ReflectionServiceFactoryBean { private QName serviceName ; private QName endpointName ; @ Override public Service create ( ) { WSDLServiceFactory factory = new WSDLServiceFactory ( getBus ( ) , getWsdlURL ( ) , getServiceQName ( ) ) ; setService ( factory . create ( ) ) ; initializeSoapInterceptors ( ) ; updateEndpointInfors ( ) ; createEndpoints ( ) ; return getService ( ) ; } private void updateEndpointInfors ( ) { Service service = getService ( ) ; for ( ServiceInfo inf : service . getServiceInfos ( ) ) { for ( EndpointInfo ei : inf . getEndpoints ( ) ) { ei . setAddress ( "local://" + ei . getService ( ) . getName ( ) . toString ( ) + "/" + ei . getName ( ) . getLocalPart ( ) ) ; ei . getBinding ( ) . setProperty ( AbstractBindingFactory . DATABINDING_DISABLED , Boolean . TRUE ) ; } } } private void initializeSoapInterceptors ( ) { getService ( ) . getInInterceptors ( ) . add ( new DataInInterceptor ( ) ) ; getService ( ) . getInInterceptors ( ) . add ( new ReadHeadersInterceptor ( getBus ( ) ) ) ; getService ( ) . getInInterceptors ( ) . add ( new MustUnderstandInterceptor ( ) ) ; getService ( ) . getInInterceptors ( ) . add ( new AttachmentInInterceptor ( ) ) ; getService ( ) . getInInterceptors ( ) . add ( new SoapHeaderInterceptor ( ) ) ; getService ( ) . getInInterceptors ( ) . add ( new CheckFaultInterceptor ( ) ) ; getService ( ) . getInInterceptors ( ) . add ( new URIMappingInterceptor ( ) ) ; getService ( ) . getInInterceptors ( ) . add ( new StaxInInterceptor ( ) ) ; getService ( ) . getInInterceptors ( ) . add ( new SoapActionInInterceptor ( ) ) ; getService ( ) . getOutInterceptors ( ) . add ( new DataOutInterceptor ( ) ) ; getService ( ) . getOutInterceptors ( ) . add ( new SoapActionOutInterceptor ( ) ) ; getService ( ) . getOutInterceptors ( ) . add ( new AttachmentOutInterceptor ( ) ) ; getService ( ) . getOutInterceptors ( ) . add ( new StaxOutInterceptor ( ) ) ; getService ( ) . getOutInterceptors ( ) . add ( new SoapHeaderOutFilterInterceptor ( ) ) ; getService ( ) . getOutInterceptors ( ) . add ( new SoapPreProtocolOutInterceptor ( ) ) ; getService ( ) . getOutInterceptors ( ) . add ( new SoapOutInterceptor ( getBus ( ) ) ) ; getService ( ) . getOutFaultInterceptors ( ) . add ( new SoapOutInterceptor ( getBus ( ) ) ) ; } public void setServiceName ( QName name ) { serviceName = name ; } public String getServiceName ( ) { return serviceName . toString ( ) ; } public QName getServiceQName ( ) { return serviceName ; } public QName getEndpointName ( ) { if ( endpointName == null ) { endpointName = getService ( ) . getEndpoints ( ) . keySet ( ) . iterator ( ) . next ( ) ; } return endpointName ; } public void setEndpointName ( QName name ) { endpointName = name ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . model . config . BatchResequencerConfig ; import org . apache . camel . model . config . StreamResequencerConfig ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Resequencer ; import org . apache . camel . processor . StreamResequencer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "resequencer" ) public class ResequencerType extends ProcessorType < ProcessorType > { @ XmlElementRef private List < ExpressionType > expressions = new ArrayList < ExpressionType > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; private BatchResequencerConfig batchConfig ; private StreamResequencerConfig streamConfig ; @ XmlTransient private List < Expression > expressionList ; public ResequencerType ( ) { this ( null ) ; } public ResequencerType ( List < Expression > expressions ) { this . expressionList = expressions ; this . batch ( ) ; } @ Override public String getShortName ( ) { return "resequencer" ; } public ResequencerType stream ( ) { return stream ( StreamResequencerConfig . getDefault ( ) ) ; } public ResequencerType batch ( ) { return batch ( BatchResequencerConfig . getDefault ( ) ) ; } public ResequencerType stream ( StreamResequencerConfig config ) { this . streamConfig = config ; this . batchConfig = null ; return this ; } public ResequencerType batch ( BatchResequencerConfig config ) { this . batchConfig = config ; this . streamConfig = null ; return this ; } public ResequencerType expression ( ExpressionType expression ) { expressions . add ( expression ) ; return this ; } @ Override public String toString ( ) { return "Resequencer[ " + getExpressions ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return ExpressionType . getLabel ( getExpressions ( ) ) ; } public List < ExpressionType > getExpressions ( ) { return expressions ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public BatchResequencerConfig getBatchConfig ( ) { return batchConfig ; } public BatchResequencerConfig getBatchConfig ( BatchResequencerConfig defaultConfig ) { return batchConfig ; } public StreamResequencerConfig getStreamConfig ( ) { return streamConfig ; } @ XmlElement ( name = "batch-config" , required = false ) public void setBatchConfig ( BatchResequencerConfig batchConfig ) { batch ( batchConfig ) ; } @ XmlElement ( name = "stream-config" , required = false ) public void setStreamConfig ( StreamResequencerConfig streamConfig ) { stream ( streamConfig ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { if ( batchConfig != null ) { return createBatchResequencer ( routeContext , batchConfig ) ; } else { return createStreamResequencer ( routeContext , streamConfig ) ; } } @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { if ( batchConfig != null ) { routes . add ( createBatchResequencerRoute ( routeContext ) ) ; } else { super . addRoutes ( routeContext , routes ) ; } } private Route < ? extends Exchange > createBatchResequencerRoute ( RouteContext routeContext ) throws Exception { final Resequencer resequencer = createBatchResequencer ( routeContext , batchConfig ) ; return new Route ( routeContext . getEndpoint ( ) , resequencer ) { @ Override public String toString ( ) { return "BatchResequencerRoute[" + getEndpoint ( ) + " -> " + resequencer . getProcessor ( ) + "]" ; } } ; } protected Resequencer createBatchResequencer ( RouteContext routeContext , BatchResequencerConfig config ) throws Exception { Processor processor = routeContext . createProcessor ( this ) ; Resequencer resequencer = new Resequencer ( routeContext . getEndpoint ( ) , processor , resolveExpressionList ( routeContext ) ) ; resequencer . setBatchSize ( config . getBatchSize ( ) ) ; resequencer . setBatchTimeout ( config . getBatchTimeout ( ) ) ; return resequencer ; } protected StreamResequencer createStreamResequencer ( RouteContext routeContext , StreamResequencerConfig config ) throws Exception { config . getComparator ( ) . setExpressions ( resolveExpressionList ( routeContext ) ) ; Processor processor = routeContext . createProcessor ( this ) ; StreamResequencer resequencer = new StreamResequencer ( processor , config . getComparator ( ) , config . getCapacity ( ) ) ; resequencer . setTimeout ( config . getTimeout ( ) ) ; return resequencer ; } private List < Expression > resolveExpressionList ( RouteContext routeContext ) { if ( expressionList == null ) { expressionList = new ArrayList < Expression > ( ) ; for ( ExpressionType expression : expressions ) { expressionList . add ( expression . createExpression ( routeContext ) ) ; } } if ( expressionList . isEmpty ( ) ) { throw new IllegalArgumentException ( "No expressions configured for: " + this ) ; } return expressionList ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface Properties { } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . util . ObjectHelper ; public class DefaultProducerTemplate < E extends Exchange > extends ServiceSupport implements ProducerTemplate < E > { private CamelContext context ; private final ProducerCache < E > producerCache = new ProducerCache < E > ( ) ; private boolean useEndpointCache = true ; private final Map < String , Endpoint < E > > endpointCache = new HashMap < String , Endpoint < E > > ( ) ; private Endpoint < E > defaultEndpoint ; public DefaultProducerTemplate ( CamelContext context ) { this . context = context ; } public DefaultProducerTemplate ( CamelContext context , Endpoint defaultEndpoint ) { this ( context ) ; this . defaultEndpoint = defaultEndpoint ; } public E send ( String endpointUri , E exchange ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , exchange ) ; } public E send ( String endpointUri , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor ) ; } public E send ( String endpointUri , Processor processor , AsyncCallback callback ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor , callback ) ; } public E send ( String endpointUri , ExchangePattern pattern , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , pattern , processor ) ; } public E send ( Endpoint < E > endpoint , E exchange ) { E convertedExchange = exchange ; producerCache . send ( endpoint , convertedExchange ) ; return convertedExchange ; } public E send ( Endpoint < E > endpoint , Processor processor ) { return producerCache . send ( endpoint , processor ) ; } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { return producerCache . send ( endpoint , processor , callback ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { return producerCache . send ( endpoint , pattern , processor ) ; } public Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) { E result = send ( endpoint , pattern , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBody ( Endpoint < E > endpoint , Object body ) { E result = send ( endpoint , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result ) ; } public Object sendBody ( String endpointUri , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , body ) ; } public Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , pattern , body ) ; } public Object sendBodyAndHeader ( String endpointUri , final Object body , final String header , final Object headerValue ) { return sendBodyAndHeader ( resolveMandatoryEndpoint ( endpointUri ) , body , header , headerValue ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeaders ( String endpointUri , final Object body , final Map < String , Object > headers ) { return sendBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , body , headers ) ; } public Object sendBodyAndHeaders ( Endpoint endpoint , final Object body , final Map < String , Object > headers ) { E result = send ( endpoint , new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; for ( Map . Entry < String , Object > header : headers . entrySet ( ) ) { in . setHeader ( header . getKey ( ) , header . getValue ( ) ) ; } in . setBody ( body ) ; } } ) ; return extractResultBody ( result ) ; } public E request ( Endpoint < E > endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( Endpoint < E > endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public E request ( String endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( String endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( String endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public Object sendBody ( Object body ) { return sendBody ( getMandatoryDefaultEndpoint ( ) , body ) ; } public E send ( E exchange ) { return send ( getMandatoryDefaultEndpoint ( ) , exchange ) ; } public E send ( Processor processor ) { return send ( getMandatoryDefaultEndpoint ( ) , processor ) ; } public Object sendBodyAndHeader ( Object body , String header , Object headerValue ) { return sendBodyAndHeader ( getMandatoryDefaultEndpoint ( ) , body , header , headerValue ) ; } public Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) { return sendBodyAndHeaders ( getMandatoryDefaultEndpoint ( ) , body , headers ) ; } public Producer < E > getProducer ( Endpoint < E > endpoint ) { return producerCache . getProducer ( endpoint ) ; } public CamelContext getContext ( ) { return context ; } public Endpoint < E > getDefaultEndpoint ( ) { return defaultEndpoint ; } public void setDefaultEndpoint ( Endpoint < E > defaultEndpoint ) { this . defaultEndpoint = defaultEndpoint ; } public void setDefaultEndpointUri ( String endpointUri ) { setDefaultEndpoint ( getContext ( ) . getEndpoint ( endpointUri ) ) ; } public boolean isUseEndpointCache ( ) { return useEndpointCache ; } public void setUseEndpointCache ( boolean useEndpointCache ) { this . useEndpointCache = useEndpointCache ; } public < T extends Endpoint < ? > > T getResolvedEndpoint ( String endpointUri , Class < T > expectedClass ) { Endpoint < ? > e = null ; synchronized ( endpointCache ) { e = endpointCache . get ( endpointUri ) ; } if ( e != null && expectedClass . isAssignableFrom ( e . getClass ( ) ) ) { return expectedClass . asSubclass ( expectedClass ) . cast ( e ) ; } return null ; } protected Processor createBodyAndHeaderProcessor ( final Object body , final String header , final Object headerValue ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setHeader ( header , headerValue ) ; in . setBody ( body ) ; } } ; } protected Processor createSetBodyProcessor ( final Object body ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setBody ( body ) ; } } ; } protected Endpoint resolveMandatoryEndpoint ( String endpointUri ) { Endpoint endpoint = null ; if ( isUseEndpointCache ( ) ) { synchronized ( endpointCache ) { endpoint = endpointCache . get ( endpointUri ) ; if ( endpoint == null ) { endpoint = context . getEndpoint ( endpointUri ) ; if ( endpoint != null ) { endpointCache . put ( endpointUri , endpoint ) ; } } } } else { endpoint = context . getEndpoint ( endpointUri ) ; } if ( endpoint == null ) { throw new NoSuchEndpointException ( endpointUri ) ; } return endpoint ; } protected Endpoint < E > getMandatoryDefaultEndpoint ( ) { Endpoint < E > answer = getDefaultEndpoint ( ) ; ObjectHelper . notNull ( answer , "defaultEndpoint" ) ; return answer ; } protected void doStart ( ) throws Exception { producerCache . start ( ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; endpointCache . clear ( ) ; } protected Object extractResultBody ( E result ) { return extractResultBody ( result , null ) ; } protected Object extractResultBody ( E result , ExchangePattern pattern ) { Object answer = null ; if ( result != null ) { boolean notOut = pattern != null && ! pattern . isOutCapable ( ) ; boolean hasOut = result . getOut ( false ) != null ; if ( hasOut && ! notOut ) { answer = result . getOut ( ) . getBody ( ) ; } else { answer = result . getIn ( ) . getBody ( ) ; } } return answer ; } } 	1
package org . apache . camel . util ; import java . util . Comparator ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public class ExpressionComparator < E extends Exchange > implements Comparator < E > { private final Expression < E > expression ; public ExpressionComparator ( Expression < E > expression ) { this . expression = expression ; } public int compare ( E e1 , E e2 ) { Object o1 = expression . evaluate ( e1 ) ; Object o2 = expression . evaluate ( e2 ) ; return ObjectHelper . compare ( o1 , o2 ) ; } } 	0
package org . apache . camel . component . mock ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . ValueBuilder ; import static org . apache . camel . builder . ExpressionBuilder . bodyExpression ; import static org . apache . camel . builder . ExpressionBuilder . headerExpression ; public abstract class AssertionClause implements Runnable { private List < Predicate < Exchange > > predicates = new ArrayList < Predicate < Exchange > > ( ) ; public AssertionClause predicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return this ; } public ExpressionClause < AssertionClause > predicate ( ) { ExpressionClause < AssertionClause > clause = new ExpressionClause < AssertionClause > ( this ) ; addPredicate ( clause ) ; return clause ; } public ValueBuilder < Exchange > header ( String name ) { Expression < Exchange > expression = headerExpression ( name ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder body ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder bodyAs ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder outBody ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder outBody ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } protected void applyAssertionOn ( MockEndpoint endpoint , int index , Exchange exchange ) { for ( Predicate < Exchange > predicate : predicates ) { predicate . assertMatches ( endpoint . getEndpointUri ( ) + " " , exchange ) ; } } protected void addPredicate ( Predicate < Exchange > predicate ) { predicates . add ( predicate ) ; } public class PredicateValueBuilder extends ValueBuilder < Exchange > { public PredicateValueBuilder ( Expression < Exchange > expression ) { super ( expression ) ; } protected Predicate < Exchange > onNewPredicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return predicate ; } } } 	1
package org . apache . camel . component . cxf . feature ; import java . util . logging . Logger ; import org . apache . camel . component . cxf . interceptors . DOMInInterceptor ; import org . apache . camel . component . cxf . interceptors . DOMOutInterceptor ; import org . apache . camel . component . cxf . interceptors . FaultOutInterceptor ; import org . apache . camel . component . cxf . interceptors . PayloadContentRedirectInterceptor ; import org . apache . cxf . Bus ; import org . apache . cxf . binding . Binding ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . endpoint . Client ; import org . apache . cxf . endpoint . Server ; import org . apache . cxf . phase . Phase ; public class PayLoadDataFormatFeature extends AbstractDataFormatFeature { private static final Logger LOG = LogUtils . getL7dLogger ( PayLoadDataFormatFeature . class ) ; private static final String [ ] REMOVING_IN_PHASES = { Phase . UNMARSHAL , Phase . PRE_LOGICAL , Phase . PRE_LOGICAL_ENDING , Phase . POST_LOGICAL , Phase . POST_LOGICAL_ENDING } ; private static final String [ ] REMOVING_OUT_PHASES = { Phase . MARSHAL , Phase . MARSHAL_ENDING , Phase . PRE_LOGICAL , Phase . PRE_LOGICAL_ENDING , Phase . POST_LOGICAL , Phase . POST_LOGICAL_ENDING } ; @ Override public void initialize ( Client client , Bus bus ) { removeInterceptorWhichIsInThePhases ( client . getInInterceptors ( ) , REMOVING_IN_PHASES ) ; removeInterceptorWhichIsInThePhases ( client . getEndpoint ( ) . getService ( ) . getInInterceptors ( ) , REMOVING_IN_PHASES ) ; removeInterceptorWhichIsInThePhases ( client . getEndpoint ( ) . getInInterceptors ( ) , REMOVING_IN_PHASES ) ; removeInterceptorWhichIsInThePhases ( client . getEndpoint ( ) . getBinding ( ) . getInInterceptors ( ) , REMOVING_IN_PHASES ) ; removeInterceptorWhichIsInThePhases ( client . getOutInterceptors ( ) , REMOVING_OUT_PHASES ) ; removeInterceptorWhichIsInThePhases ( client . getEndpoint ( ) . getService ( ) . getOutInterceptors ( ) , REMOVING_OUT_PHASES ) ; removeInterceptorWhichIsInThePhases ( client . getEndpoint ( ) . getOutInterceptors ( ) , REMOVING_OUT_PHASES ) ; removeInterceptorWhichIsInThePhases ( client . getEndpoint ( ) . getBinding ( ) . getOutInterceptors ( ) , REMOVING_OUT_PHASES ) ; addDataHandlingInterceptors ( client . getEndpoint ( ) . getBinding ( ) ) ; client . getEndpoint ( ) . getBinding ( ) . getOutFaultInterceptors ( ) . add ( new FaultOutInterceptor ( ) ) ; } @ Override public void initialize ( Server server , Bus bus ) { removeInterceptorWhichIsInThePhases ( server . getEndpoint ( ) . getService ( ) . getInInterceptors ( ) , REMOVING_IN_PHASES ) ; removeInterceptorWhichIsInThePhases ( server . getEndpoint ( ) . getInInterceptors ( ) , REMOVING_IN_PHASES ) ; removeInterceptorWhichIsInThePhases ( server . getEndpoint ( ) . getBinding ( ) . getInInterceptors ( ) , REMOVING_IN_PHASES ) ; removeInterceptorWhichIsInThePhases ( server . getEndpoint ( ) . getService ( ) . getOutInterceptors ( ) , REMOVING_OUT_PHASES ) ; removeInterceptorWhichIsInThePhases ( server . getEndpoint ( ) . getOutInterceptors ( ) , REMOVING_OUT_PHASES ) ; removeInterceptorWhichIsInThePhases ( server . getEndpoint ( ) . getBinding ( ) . getOutInterceptors ( ) , REMOVING_OUT_PHASES ) ; resetServiceInvokerInterceptor ( server ) ; addDataHandlingInterceptors ( server . getEndpoint ( ) . getBinding ( ) ) ; server . getEndpoint ( ) . getBinding ( ) . getOutFaultInterceptors ( ) . add ( new FaultOutInterceptor ( ) ) ; } private void addDataHandlingInterceptors ( Binding binding ) { binding . getInInterceptors ( ) . add ( new DOMInInterceptor ( ) ) ; binding . getOutInterceptors ( ) . add ( new DOMOutInterceptor ( ) ) ; binding . getOutInterceptors ( ) . add ( new PayloadContentRedirectInterceptor ( ) ) ; } @ Override protected Logger getLogger ( ) { return LOG ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . DelegateProcessor ; @ XmlRootElement ( name = "routes" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RoutesType extends OptionalIdentifiedType < RoutesType > implements RouteContainer { @ XmlAttribute private Boolean inheritErrorHandlerFlag ; @ XmlElementRef private List < RouteType > routes = new ArrayList < RouteType > ( ) ; @ XmlElementRef private List < ServiceActivationType > activations = new ArrayList < ServiceActivationType > ( ) ; @ XmlTransient private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlTransient private List < InterceptType > intercepts = new ArrayList < InterceptType > ( ) ; @ XmlTransient private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; @ XmlTransient private CamelContext camelContext ; @ XmlTransient private ErrorHandlerBuilder errorHandlerBuilder ; @ Override public String toString ( ) { return "Routes: " + routes ; } public List < RouteType > getRoutes ( ) { return routes ; } public void setRoutes ( List < RouteType > routes ) { this . routes = routes ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < InterceptType > getIntercepts ( ) { return intercepts ; } public void setIntercepts ( List < InterceptType > intercepts ) { this . intercepts = intercepts ; } public List < ExceptionType > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < ExceptionType > exceptions ) { this . exceptions = exceptions ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public boolean isInheritErrorHandler ( ) { return ProcessorType . isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public RouteType route ( ) { RouteType route = createRoute ( ) ; return route ( route ) ; } public RouteType from ( String uri ) { RouteType route = createRoute ( ) ; route . from ( uri ) ; return route ( route ) ; } public RouteType from ( Endpoint endpoint ) { RouteType route = createRoute ( ) ; route . from ( endpoint ) ; return route ( route ) ; } public RouteType route ( RouteType route ) { route . setCamelContext ( getCamelContext ( ) ) ; route . setInheritErrorHandlerFlag ( getInheritErrorHandlerFlag ( ) ) ; List < InterceptorType > list = getInterceptors ( ) ; for ( InterceptorType interceptorType : list ) { route . addInterceptor ( interceptorType ) ; } List < InterceptType > intercepts = getIntercepts ( ) ; for ( InterceptType intercept : intercepts ) { InterceptType proxy = intercept . createProxy ( ) ; route . addOutput ( proxy ) ; route . pushBlock ( proxy . getProceed ( ) ) ; } route . getOutputs ( ) . addAll ( getExceptions ( ) ) ; getRoutes ( ) . add ( route ) ; return route ; } public RoutesType intercept ( DelegateProcessor interceptor ) { getInterceptors ( ) . add ( new InterceptorRef ( interceptor ) ) ; return this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer . when ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; getExceptions ( ) . add ( answer ) ; return answer ; } protected RouteType createRoute ( ) { RouteType route = new RouteType ( ) ; ErrorHandlerBuilder handler = getErrorHandlerBuilder ( ) ; if ( isInheritErrorHandler ( ) && handler != null ) { route . setErrorHandlerBuilderIfNull ( handler ) ; } return route ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface OutHeaders { } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . ErrorHandlerSupport ; public abstract class ErrorHandlerBuilderSupport implements ErrorHandlerBuilder { private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; public void addErrorHandlers ( ExceptionType exception ) { exceptions . add ( exception ) ; } protected void configure ( ErrorHandlerSupport handler ) { for ( ExceptionType exception : exceptions ) { handler . addExceptionPolicy ( exception ) ; } } public List < ExceptionType > getExceptions ( ) { return exceptions ; } } 	1
package org . apache . camel . component . http ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . commons . httpclient . HttpMethod ; import org . apache . commons . httpclient . methods . DeleteMethod ; import org . apache . commons . httpclient . methods . EntityEnclosingMethod ; import org . apache . commons . httpclient . methods . GetMethod ; import org . apache . commons . httpclient . methods . HeadMethod ; import org . apache . commons . httpclient . methods . OptionsMethod ; import org . apache . commons . httpclient . methods . PostMethod ; import org . apache . commons . httpclient . methods . PutMethod ; import org . apache . commons . httpclient . methods . TraceMethod ; public enum HttpMethods implements Expression < Exchange > { GET ( GetMethod . class ) , POST ( PostMethod . class ) , PUT ( PutMethod . class ) , DELETE ( DeleteMethod . class ) , HEAD ( HeadMethod . class ) , OPTIONS ( OptionsMethod . class ) , TRACE ( TraceMethod . class ) ; public static final String HTTP_METHOD = "http.requestMethod" ; final Class < ? extends HttpMethod > clazz ; final boolean entity ; HttpMethods ( Class < ? extends HttpMethod > clazz ) { this . clazz = clazz ; entity = EntityEnclosingMethod . class . isAssignableFrom ( clazz ) ; } public HttpMethod createMethod ( final String url ) { try { return clazz . getDeclaredConstructor ( String . class ) . newInstance ( url ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public HttpMethod createMethod ( ) { try { return clazz . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public final boolean isEntityEnclosing ( ) { return entity ; } public Object evaluate ( Exchange exchange ) { return ExpressionBuilder . constantExpression ( name ( ) ) . evaluate ( exchange ) ; } } 	0
package org . apache . camel . component . file . strategy ; public class NoOpFileProcessStrategy extends FileProcessStrategySupport { public NoOpFileProcessStrategy ( ) { super ( true ) ; } public NoOpFileProcessStrategy ( boolean isLock ) { super ( isLock ) ; } } 	1
package org . apache . camel . component . jms . requestor ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . FutureTask ; import java . util . concurrent . ScheduledExecutorService ; import javax . jms . Destination ; import javax . jms . ExceptionListener ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . MessageListener ; import javax . jms . Session ; import javax . jms . TemporaryQueue ; import org . apache . camel . component . jms . JmsConfiguration ; import org . apache . camel . component . jms . JmsProducer ; import org . apache . camel . component . jms . requestor . DeferredRequestReplyMap . DeferredMessageSentCallback ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . DefaultTimeoutMap ; import org . apache . camel . util . TimeoutMap ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . task . TaskExecutor ; import org . springframework . jms . listener . AbstractMessageListenerContainer ; import org . springframework . jms . listener . SimpleMessageListenerContainer ; import org . springframework . jms . listener . SimpleMessageListenerContainer102 ; import org . springframework . jms . support . destination . DestinationResolver ; public class Requestor extends ServiceSupport implements MessageListener { private static final transient Log LOG = LogFactory . getLog ( Requestor . class ) ; private static UuidGenerator uuidGenerator ; private final JmsConfiguration configuration ; private ScheduledExecutorService executorService ; private AbstractMessageListenerContainer listenerContainer ; private TimeoutMap requestMap ; private Map < JmsProducer , DeferredRequestReplyMap > producerDeferredRequestReplyMap ; private TimeoutMap deferredRequestMap ; private TimeoutMap deferredReplyMap ; private Destination replyTo ; private long maxRequestTimeout = - 1 ; private long replyToResolverTimeout = 5000 ; public Requestor ( JmsConfiguration configuration , ScheduledExecutorService executorService ) { this . configuration = configuration ; this . executorService = executorService ; requestMap = new DefaultTimeoutMap ( executorService , configuration . getRequestMapPurgePollTimeMillis ( ) ) ; producerDeferredRequestReplyMap = new HashMap < JmsProducer , DeferredRequestReplyMap > ( ) ; deferredRequestMap = new DefaultTimeoutMap ( executorService , configuration . getRequestMapPurgePollTimeMillis ( ) ) ; deferredReplyMap = new DefaultTimeoutMap ( executorService , configuration . getRequestMapPurgePollTimeMillis ( ) ) ; } public synchronized DeferredRequestReplyMap getDeferredRequestReplyMap ( JmsProducer producer ) { DeferredRequestReplyMap map = producerDeferredRequestReplyMap . get ( producer ) ; if ( map == null ) { map = new DeferredRequestReplyMap ( this , producer , deferredRequestMap , deferredReplyMap ) ; producerDeferredRequestReplyMap . put ( producer , map ) ; if ( maxRequestTimeout == - 1 ) { maxRequestTimeout = producer . getRequestTimeout ( ) ; } else if ( maxRequestTimeout < producer . getRequestTimeout ( ) ) { maxRequestTimeout = producer . getRequestTimeout ( ) ; } } return map ; } public synchronized void removeDeferredRequestReplyMap ( JmsProducer producer ) { DeferredRequestReplyMap map = producerDeferredRequestReplyMap . remove ( producer ) ; if ( map == null ) { return ; } if ( maxRequestTimeout == producer . getRequestTimeout ( ) ) { long max = - 1 ; for ( Map . Entry < JmsProducer , DeferredRequestReplyMap > entry : producerDeferredRequestReplyMap . entrySet ( ) ) { if ( max < entry . getKey ( ) . getRequestTimeout ( ) ) { max = entry . getKey ( ) . getRequestTimeout ( ) ; } } maxRequestTimeout = max ; } } public synchronized long getMaxRequestTimeout ( ) { return maxRequestTimeout ; } public TimeoutMap getRequestMap ( ) { return requestMap ; } public TimeoutMap getDeferredRequestMap ( ) { return deferredRequestMap ; } public TimeoutMap getDeferredReplyMap ( ) { return deferredReplyMap ; } public FutureTask getReceiveFuture ( String correlationID , long requestTimeout ) { FutureHandler future = createFutureHandler ( correlationID ) ; requestMap . put ( correlationID , future , requestTimeout ) ; return future ; } public FutureTask getReceiveFuture ( DeferredMessageSentCallback callback ) { FutureHandler future = createFutureHandler ( callback ) ; DeferredRequestReplyMap map = callback . getDeferredRequestReplyMap ( ) ; map . put ( callback , future ) ; return future ; } protected FutureHandler createFutureHandler ( String correlationID ) { return new FutureHandler ( ) ; } protected FutureHandler createFutureHandler ( DeferredMessageSentCallback callback ) { return new FutureHandler ( ) ; } public void onMessage ( Message message ) { try { String correlationID = message . getJMSCorrelationID ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message correlationID: " + correlationID ) ; } if ( correlationID == null ) { LOG . warn ( "Ignoring message with no correlationID! " + message ) ; return ; } Object handler = requestMap . get ( correlationID ) ; if ( handler != null && handler instanceof ReplyHandler ) { ReplyHandler replyHandler = ( ReplyHandler ) handler ; boolean complete = replyHandler . handle ( message ) ; if ( complete ) { requestMap . remove ( correlationID ) ; } } else { DeferredRequestReplyMap . processDeferredRequests ( this , deferredRequestMap , deferredReplyMap , correlationID , getMaxRequestTimeout ( ) , message ) ; } } catch ( JMSException e ) { throw new FailedToProcessResponse ( message , e ) ; } } public AbstractMessageListenerContainer getListenerContainer ( ) { if ( listenerContainer == null ) { listenerContainer = createListenerContainer ( ) ; } return listenerContainer ; } public void setListenerContainer ( AbstractMessageListenerContainer listenerContainer ) { this . listenerContainer = listenerContainer ; } public Destination getReplyTo ( ) { synchronized ( this ) { try { if ( replyTo == null ) { wait ( replyToResolverTimeout ) ; } } catch ( Throwable e ) { } } return replyTo ; } public void setReplyTo ( Destination replyTo ) { this . replyTo = replyTo ; } @ Override protected void doStart ( ) throws Exception { AbstractMessageListenerContainer container = getListenerContainer ( ) ; container . afterPropertiesSet ( ) ; } @ Override protected void doStop ( ) throws Exception { if ( listenerContainer != null ) { listenerContainer . stop ( ) ; listenerContainer . destroy ( ) ; } } protected Requestor getOutterInstance ( ) { return this ; } protected AbstractMessageListenerContainer createListenerContainer ( ) { SimpleMessageListenerContainer answer = configuration . isUseVersion102 ( ) ? new SimpleMessageListenerContainer102 ( ) : new SimpleMessageListenerContainer ( ) ; answer . setDestinationName ( "temporary" ) ; answer . setDestinationResolver ( new DestinationResolver ( ) { public Destination resolveDestinationName ( Session session , String destinationName , boolean pubSubDomain ) throws JMSException { TemporaryQueue queue = null ; synchronized ( getOutterInstance ( ) ) { try { queue = session . createTemporaryQueue ( ) ; setReplyTo ( queue ) ; } finally { getOutterInstance ( ) . notifyAll ( ) ; } } return queue ; } } ) ; answer . setAutoStartup ( true ) ; answer . setMessageListener ( this ) ; answer . setPubSubDomain ( false ) ; answer . setSubscriptionDurable ( false ) ; answer . setConcurrentConsumers ( 1 ) ; answer . setConnectionFactory ( configuration . getConnectionFactory ( ) ) ; String clientId = configuration . getClientId ( ) ; if ( clientId != null ) { clientId += ".Requestor" ; answer . setClientId ( clientId ) ; } TaskExecutor taskExecutor = configuration . getTaskExecutor ( ) ; if ( taskExecutor != null ) { answer . setTaskExecutor ( taskExecutor ) ; } ExceptionListener exceptionListener = configuration . getExceptionListener ( ) ; if ( exceptionListener != null ) { answer . setExceptionListener ( exceptionListener ) ; } return answer ; } public static synchronized UuidGenerator getUuidGenerator ( ) { if ( uuidGenerator == null ) { uuidGenerator = new UuidGenerator ( ) ; } return uuidGenerator ; } protected JmsConfiguration getConfiguration ( ) { return configuration ; } public void setReplyToSelectorHeader ( org . apache . camel . Message in , Message jmsIn ) throws JMSException { } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . model . InterceptType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . RoutesType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public abstract class RouteBuilder extends BuilderSupport implements Routes { private AtomicBoolean initialized = new AtomicBoolean ( false ) ; private RoutesType routeCollection = new RoutesType ( ) ; private List < Route > routes = new ArrayList < Route > ( ) ; public RouteBuilder ( ) { this ( null ) ; } public RouteBuilder ( CamelContext context ) { super ( context ) ; } @ Override public String toString ( ) { return routeCollection . toString ( ) ; } public abstract void configure ( ) throws Exception ; public RouteType from ( String uri ) { RouteType answer = routeCollection . from ( uri ) ; configureRoute ( answer ) ; return answer ; } public RouteType from ( Endpoint endpoint ) { RouteType answer = routeCollection . from ( endpoint ) ; configureRoute ( answer ) ; return answer ; } public RouteBuilder errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return this ; } public RouteBuilder inheritErrorHandler ( boolean value ) { routeCollection . setInheritErrorHandlerFlag ( value ) ; return this ; } public RouteBuilder intercept ( DelegateProcessor interceptor ) { routeCollection . intercept ( interceptor ) ; return this ; } public InterceptType intercept ( ) { return routeCollection . intercept ( ) ; } public ChoiceType intercept ( Predicate predicate ) { return routeCollection . intercept ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { return routeCollection . exception ( exceptionType ) ; } public CamelContext getContext ( ) { CamelContext context = super . getContext ( ) ; if ( context == null ) { context = createContainer ( ) ; setContext ( context ) ; } return context ; } public List < Route > getRouteList ( ) throws Exception { checkInitialized ( ) ; return routes ; } @ Override public void setInheritErrorHandler ( boolean inheritErrorHandler ) { super . setInheritErrorHandler ( inheritErrorHandler ) ; routeCollection . setInheritErrorHandlerFlag ( inheritErrorHandler ) ; } @ Override public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { super . setErrorHandlerBuilder ( errorHandlerBuilder ) ; routeCollection . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } protected void checkInitialized ( ) throws Exception { if ( initialized . compareAndSet ( false , true ) ) { configure ( ) ; populateRoutes ( routes ) ; } } protected void populateRoutes ( List < Route > routes ) throws Exception { CamelContext camelContext = getContext ( ) ; if ( camelContext == null ) { throw new IllegalArgumentException ( "No CamelContext has been injected!" ) ; } routeCollection . setCamelContext ( camelContext ) ; camelContext . addRouteDefinitions ( routeCollection . getRoutes ( ) ) ; } public void setRouteCollection ( RoutesType routeCollection ) { this . routeCollection = routeCollection ; } public RoutesType getRouteCollection ( ) { return this . routeCollection ; } public void noStreamCaching ( ) { StreamCachingInterceptor . noStreamCaching ( routeCollection . getInterceptors ( ) ) ; } public void streamCaching ( ) { routeCollection . intercept ( new StreamCachingInterceptor ( ) ) ; } protected CamelContext createContainer ( ) { return new DefaultCamelContext ( ) ; } protected void configureRoute ( RouteType route ) { route . setGroup ( getClass ( ) . getName ( ) ) ; } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlType ( name = "outputType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class OutputType < Type extends ProcessorType > extends ProcessorType < Type > { private static final transient Log LOG = LogFactory . getLog ( OutputType . class ) ; @ XmlElementRef protected List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { configureChild ( output ) ; } } } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } } } 	0
package org . apache . camel . util ; import java . beans . PropertyEditor ; import java . beans . PropertyEditorManager ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Set ; import org . apache . camel . TypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class IntrospectionSupport { private static final transient Log LOG = LogFactory . getLog ( IntrospectionSupport . class ) ; private IntrospectionSupport ( ) { } public static boolean getProperties ( Object target , Map props , String optionPrefix ) { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } if ( optionPrefix == null ) { optionPrefix = "" ; } Class clazz = target . getClass ( ) ; Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { String name = method . getName ( ) ; Class type = method . getReturnType ( ) ; Class params [ ] = method . getParameterTypes ( ) ; if ( name . startsWith ( "get" ) && params . length == 0 && type != null && isSettableType ( type ) ) { try { Object value = method . invoke ( target ) ; if ( value == null ) { continue ; } String strValue = convertToString ( value , type ) ; if ( strValue == null ) { continue ; } name = name . substring ( 3 , 4 ) . toLowerCase ( ) + name . substring ( 4 ) ; props . put ( optionPrefix + name , strValue ) ; rc = true ; } catch ( Throwable ignore ) { } } } return rc ; } public static Object getProperty ( Object target , String prop ) throws SecurityException , NoSuchMethodException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( prop == null ) { throw new IllegalArgumentException ( "prop was null." ) ; } prop = prop . substring ( 0 , 1 ) . toUpperCase ( ) + prop . substring ( 1 ) ; Class clazz = target . getClass ( ) ; Method method = getPropertyGetter ( clazz , prop ) ; return method . invoke ( target ) ; } public static Method getPropertyGetter ( Class type , String propertyName ) throws NoSuchMethodException { Method method = type . getMethod ( "get" + ObjectHelper . capitalize ( propertyName ) ) ; return method ; } public static boolean setProperties ( Object target , Map props , String optionPrefix ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; if ( setProperty ( target , name , value ) ) { iter . remove ( ) ; rc = true ; } } } return rc ; } public static Map extractProperties ( Map props , String optionPrefix ) { if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } HashMap rc = new HashMap ( props . size ( ) ) ; for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; rc . put ( name , value ) ; iter . remove ( ) ; } } return rc ; } public static boolean setProperties ( TypeConverter typeConverter , Object target , Map props ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( setProperty ( typeConverter , target , ( String ) entry . getKey ( ) , entry . getValue ( ) ) ) { iter . remove ( ) ; rc = true ; } } return rc ; } public static boolean setProperties ( Object target , Map props ) throws Exception { return setProperties ( null , target , props ) ; } public static boolean setProperty ( TypeConverter typeConverter , Object target , String name , Object value ) throws Exception { try { Class clazz = target . getClass ( ) ; Method setter = findSetterMethod ( typeConverter , clazz , name , value ) ; if ( setter == null ) { return false ; } if ( value == null || value . getClass ( ) == setter . getParameterTypes ( ) [ 0 ] ) { setter . invoke ( target , value ) ; } else { Object convertedValue = convert ( typeConverter , setter . getParameterTypes ( ) [ 0 ] , value ) ; setter . invoke ( target , convertedValue ) ; } return true ; } catch ( InvocationTargetException e ) { Throwable throwable = e . getTargetException ( ) ; if ( throwable instanceof Exception ) { Exception exception = ( Exception ) throwable ; throw exception ; } else { Error error = ( Error ) throwable ; throw error ; } } } public static boolean setProperty ( Object target , String name , Object value ) throws Exception { return setProperty ( null , target , name , value ) ; } private static Object convert ( TypeConverter typeConverter , Class type , Object value ) throws URISyntaxException { if ( typeConverter != null ) { Object answer = typeConverter . convertTo ( type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Could not convert \"" + value + "\" to " + type . getName ( ) ) ; } return answer ; } PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setAsText ( value . toString ( ) ) ; return editor . getValue ( ) ; } if ( type == URI . class ) { return new URI ( value . toString ( ) ) ; } return null ; } private static String convertToString ( Object value , Class type ) throws URISyntaxException { PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setValue ( value ) ; return editor . getAsText ( ) ; } if ( type == URI . class ) { return value . toString ( ) ; } return null ; } private static Method findSetterMethod ( TypeConverter typeConverter , Class clazz , String name , Object value ) { name = "set" + ObjectHelper . capitalize ( name ) ; while ( clazz != Object . class ) { Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { Class params [ ] = method . getParameterTypes ( ) ; if ( method . getName ( ) . equals ( name ) && params . length == 1 ) { Class paramType = params [ 0 ] ; if ( typeConverter != null || isSettableType ( paramType ) || paramType . isInstance ( value ) ) { return method ; } } } clazz = clazz . getSuperclass ( ) ; } return null ; } private static boolean isSettableType ( Class clazz ) { if ( PropertyEditorManager . findEditor ( clazz ) != null ) { return true ; } if ( clazz == URI . class ) { return true ; } if ( clazz == Boolean . class ) { return true ; } return false ; } public static String toString ( Object target ) { return toString ( target , Object . class ) ; } public static String toString ( Object target , Class stopClass ) { LinkedHashMap map = new LinkedHashMap ( ) ; addFields ( target , target . getClass ( ) , stopClass , map ) ; StringBuffer buffer = new StringBuffer ( simpleName ( target . getClass ( ) ) ) ; buffer . append ( " {" ) ; Set entrySet = map . entrySet ( ) ; boolean first = true ; for ( Iterator iter = entrySet . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( first ) { first = false ; } else { buffer . append ( ", " ) ; } buffer . append ( entry . getKey ( ) ) ; buffer . append ( " = " ) ; appendToString ( buffer , entry . getValue ( ) ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } protected static void appendToString ( StringBuffer buffer , Object value ) { buffer . append ( value ) ; } public static String simpleName ( Class clazz ) { String name = clazz . getName ( ) ; int p = name . lastIndexOf ( "." ) ; if ( p >= 0 ) { name = name . substring ( p + 1 ) ; } return name ; } private static void addFields ( Object target , Class startClass , Class stopClass , LinkedHashMap map ) { if ( startClass != stopClass ) { addFields ( target , startClass . getSuperclass ( ) , stopClass , map ) ; } Field [ ] fields = startClass . getDeclaredFields ( ) ; for ( Field field : fields ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) || Modifier . isTransient ( field . getModifiers ( ) ) || Modifier . isPrivate ( field . getModifiers ( ) ) ) { continue ; } try { field . setAccessible ( true ) ; Object o = field . get ( target ) ; if ( o != null && o . getClass ( ) . isArray ( ) ) { try { o = Arrays . asList ( ( Object [ ] ) o ) ; } catch ( Throwable e ) { } } map . put ( field . getName ( ) , o ) ; } catch ( Throwable e ) { LOG . debug ( "Error adding fields" , e ) ; } } } } 	1
package org . apache . camel . component . ref ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; public class RefComponent extends DefaultComponent < Exchange > { protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { String name = uri . substring ( "ref:" . length ( ) ) ; return getCamelContext ( ) . getRegistry ( ) . lookup ( name , Endpoint . class ) ; } } 	0
package org . apache . camel . view ; import java . io . PrintWriter ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; public class RouteDotGenerator extends GraphGeneratorSupport { public RouteDotGenerator ( String dir ) { super ( dir , ".dot" ) ; } protected void printRoutes ( PrintWriter writer , Map < String , List < RouteType > > map ) { Set < Map . Entry < String , List < RouteType > > > entries = map . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { String group = entry . getKey ( ) ; printRoutes ( writer , group , entry . getValue ( ) ) ; } } protected void printRoutes ( PrintWriter writer , String group , List < RouteType > routes ) { if ( group != null ) { writer . println ( "subgraph cluster_" + ( clusterCounter ++ ) + " {" ) ; writer . println ( "label = \"" + group + "\";" ) ; writer . println ( "color = grey;" ) ; writer . println ( "style = \"dashed\";" ) ; writer . println ( "URL = \"" + group + ".html\";" ) ; writer . println ( ) ; } for ( RouteType route : routes ) { List < FromType > inputs = route . getInputs ( ) ; for ( FromType input : inputs ) { printRoute ( writer , route , input ) ; } writer . println ( ) ; } if ( group != null ) { writer . println ( "}" ) ; writer . println ( ) ; } } protected String escapeNodeId ( String text ) { return text . replace ( '.' , '_' ) . replace ( "$" , "_" ) ; } protected void printRoute ( PrintWriter writer , final RouteType route , FromType input ) { NodeData nodeData = getNodeData ( input ) ; printNode ( writer , nodeData ) ; NodeData from = nodeData ; for ( ProcessorType output : route . getOutputs ( ) ) { NodeData newData = printNode ( writer , from , output ) ; from = newData ; } } protected NodeData printNode ( PrintWriter writer , NodeData fromData , ProcessorType node ) { if ( node instanceof MulticastType ) { List < ProcessorType > outputs = node . getOutputs ( ) ; for ( ProcessorType output : outputs ) { printNode ( writer , fromData , output ) ; } return fromData ; } NodeData toData = getNodeData ( node ) ; printNode ( writer , toData ) ; if ( fromData != null ) { writer . print ( fromData . id ) ; writer . print ( " -> " ) ; writer . print ( toData . id ) ; writer . println ( " [" ) ; String label = fromData . edgeLabel ; if ( isNotNullAndNonEmpty ( label ) ) { writer . println ( "label = \"" + label + "\"" ) ; } writer . println ( "];" ) ; } List < ProcessorType > outputs = toData . outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { NodeData newData = printNode ( writer , toData , output ) ; if ( ! isMulticastNode ( node ) ) { toData = newData ; } } } return toData ; } protected void printNode ( PrintWriter writer , NodeData data ) { if ( ! data . nodeWritten ) { data . nodeWritten = true ; writer . println ( ) ; writer . print ( data . id ) ; writer . println ( " [" ) ; writer . println ( "label = \"" + data . label + "\"" ) ; writer . println ( "tooltip = \"" + data . tooltop + "\"" ) ; if ( data . url != null ) { writer . println ( "URL = \"" + data . url + "\"" ) ; } String image = data . image ; if ( image != null ) { writer . println ( "shapefile = \"" + image + "\"" ) ; writer . println ( "peripheries=0" ) ; } String shape = data . shape ; if ( shape == null && image != null ) { shape = "custom" ; } if ( shape != null ) { writer . println ( "shape = \"" + shape + "\"" ) ; } writer . println ( "];" ) ; writer . println ( ) ; } } protected void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) { writer . println ( "digraph CamelRoutes {" ) ; writer . println ( ) ; writer . println ( "node [style = \"rounded,filled\", fillcolor = yellow, " + "fontname=\"Helvetica-Oblique\"];" ) ; writer . println ( ) ; printRoutes ( writer , map ) ; writer . println ( "}" ) ; } } 	1
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import org . apache . camel . Expression ; public class ParameterInfo { private final int index ; private final Class type ; private final Annotation [ ] annotations ; private Expression expression ; public ParameterInfo ( int index , Class type , Annotation [ ] annotations , Expression expression ) { this . index = index ; this . type = type ; this . annotations = annotations ; this . expression = expression ; } public Annotation [ ] getAnnotations ( ) { return annotations ; } public Expression getExpression ( ) { return expression ; } public int getIndex ( ) { return index ; } public Class getType ( ) { return type ; } public void setExpression ( Expression expression ) { this . expression = expression ; } } 	0
package org . apache . camel . processor ; import java . io . Serializable ; import java . util . Random ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RedeliveryPolicy implements Cloneable , Serializable { protected static transient Random randomNumberGenerator ; private static final transient Log LOG = LogFactory . getLog ( RedeliveryPolicy . class ) ; protected int maximumRedeliveries = 6 ; protected long initialRedeliveryDelay = 1000L ; protected long maximumRedeliveryDelay = 60 * 1000L ; protected double backOffMultiplier = 2 ; protected boolean useExponentialBackOff ; protected double collisionAvoidanceFactor = 0.15d ; protected boolean useCollisionAvoidance ; public RedeliveryPolicy ( ) { } @ Override public String toString ( ) { return "RedeliveryPolicy[maximumRedeliveries=" + maximumRedeliveries + "]" ; } public RedeliveryPolicy copy ( ) { try { return ( RedeliveryPolicy ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( "Could not clone: " + e , e ) ; } } public boolean shouldRedeliver ( int redeliveryCounter ) { if ( getMaximumRedeliveries ( ) < 0 ) { return true ; } return redeliveryCounter < getMaximumRedeliveries ( ) ; } public long sleep ( long redeliveryDelay ) { redeliveryDelay = getRedeliveryDelay ( redeliveryDelay ) ; if ( redeliveryDelay > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + redeliveryDelay + " millis until attempting redelivery" ) ; } try { Thread . sleep ( redeliveryDelay ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Thread interrupted: " + e , e ) ; } } } return redeliveryDelay ; } public long getRedeliveryDelay ( long previousDelay ) { long redeliveryDelay ; if ( previousDelay == 0 ) { redeliveryDelay = initialRedeliveryDelay ; } else if ( useExponentialBackOff && backOffMultiplier > 1 ) { redeliveryDelay = Math . round ( backOffMultiplier * previousDelay ) ; } else { redeliveryDelay = previousDelay ; } if ( useCollisionAvoidance ) { Random random = getRandomNumberGenerator ( ) ; double variance = ( random . nextBoolean ( ) ? collisionAvoidanceFactor : - collisionAvoidanceFactor ) * random . nextDouble ( ) ; redeliveryDelay += redeliveryDelay * variance ; } if ( maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay ) { redeliveryDelay = maximumRedeliveryDelay ; } return redeliveryDelay ; } public RedeliveryPolicy maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicy initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicy useCollisionAvoidance ( ) { setUseCollisionAvoidance ( true ) ; return this ; } public RedeliveryPolicy useExponentialBackOff ( ) { setUseExponentialBackOff ( true ) ; return this ; } public RedeliveryPolicy backOffMultiplier ( double multiplier ) { useExponentialBackOff ( ) ; setBackOffMultiplier ( multiplier ) ; return this ; } public RedeliveryPolicy collisionAvoidancePercent ( double collisionAvoidancePercent ) { useCollisionAvoidance ( ) ; setCollisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public RedeliveryPolicy maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { setMaximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public short getCollisionAvoidancePercent ( ) { return ( short ) Math . round ( collisionAvoidanceFactor * 100 ) ; } public void setCollisionAvoidancePercent ( double collisionAvoidancePercent ) { this . collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d ; } public double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public int getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( int maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public long getMaximumRedeliveryDelay ( ) { return maximumRedeliveryDelay ; } public void setMaximumRedeliveryDelay ( long maximumRedeliveryDelay ) { this . maximumRedeliveryDelay = maximumRedeliveryDelay ; } public boolean isUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public boolean isUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } protected static synchronized Random getRandomNumberGenerator ( ) { if ( randomNumberGenerator == null ) { randomNumberGenerator = new Random ( ) ; } return randomNumberGenerator ; } } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "beanshell" ) public @ interface BeanShell { String value ( ) ; } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RecipientList extends ServiceSupport implements Processor { private final Expression < Exchange > expression ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RecipientList ( Expression < Exchange > expression ) { notNull ( expression , "expression" ) ; this . expression = expression ; } @ Override public String toString ( ) { return "RecipientList[" + expression + "]" ; } public void process ( Exchange exchange ) throws Exception { Object receipientList = expression . evaluate ( exchange ) ; Iterator iter = ObjectConverter . iterator ( receipientList ) ; List < Processor > processors = new ArrayList < Processor > ( ) ; while ( iter . hasNext ( ) ) { Object recipient = iter . next ( ) ; Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , recipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; processors . add ( producer ) ; } MulticastProcessor mp = new MulticastProcessor ( processors , new UseLatestAggregationStrategy ( ) ) ; mp . process ( exchange ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } } 	1
package org . apache . camel . component . cxf ; import java . io . OutputStream ; import javax . xml . transform . Source ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . cxf . util . CxfEndpointUtils ; import org . apache . camel . component . cxf . util . Dummy ; import org . apache . camel . component . cxf . util . NullConduit ; import org . apache . camel . component . cxf . util . NullConduitSelector ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . cxf . Bus ; import org . apache . cxf . endpoint . ClientImpl ; import org . apache . cxf . frontend . ClientFactoryBean ; import org . apache . cxf . interceptor . InterceptorChain ; import org . apache . cxf . interceptor . OutgoingChainInterceptor ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . message . ExchangeImpl ; import org . apache . cxf . message . Message ; public class CxfSoapProducer implements Producer , AsyncProcessor { private static final Log LOG = LogFactory . getLog ( CxfSoapProducer . class ) ; private final CxfSoapEndpoint endpoint ; private final Producer producer ; private final AsyncProcessor processor ; private ClientImpl client ; public CxfSoapProducer ( CxfSoapEndpoint endpoint ) throws Exception { this . endpoint = endpoint ; this . producer = endpoint . getInnerEndpoint ( ) . createProducer ( ) ; this . processor = new AsyncProcessorDecorator ( producer , new Processor ( ) { public void process ( Exchange exchange ) throws Exception { processSoapProviderIn ( exchange ) ; } } , new Processor ( ) { public void process ( Exchange exchange ) throws Exception { processSoapProviderOut ( exchange ) ; } } ) ; Class sei = CxfEndpointUtils . getSEIClass ( endpoint . getServiceClass ( ) ) ; ClientFactoryBean cfb = CxfEndpointUtils . getClientFactoryBean ( sei ) ; if ( sei == null ) { cfb . setServiceClass ( Dummy . class ) ; } else { cfb . setServiceClass ( sei ) ; } cfb . setWsdlURL ( endpoint . getWsdl ( ) . getURL ( ) . toString ( ) ) ; if ( endpoint . getServiceName ( ) != null ) { cfb . setServiceName ( endpoint . getServiceName ( ) ) ; } if ( endpoint . getEndpointName ( ) != null ) { cfb . setEndpointName ( endpoint . getEndpointName ( ) ) ; } cfb . setConduitSelector ( new NullConduitSelector ( ) ) ; client = ( ClientImpl ) cfb . create ( ) ; } public org . apache . camel . Endpoint getEndpoint ( ) { return producer . getEndpoint ( ) ; } public Exchange createExchange ( ) { return producer . createExchange ( ) ; } public Exchange createExchange ( ExchangePattern pattern ) { return producer . createExchange ( pattern ) ; } public Exchange createExchange ( Exchange exchange ) { return producer . createExchange ( exchange ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void start ( ) throws Exception { producer . start ( ) ; } public void stop ( ) throws Exception { producer . stop ( ) ; } protected void processSoapProviderOut ( Exchange exchange ) throws Exception { LOG . info ( "processSoapProviderOut: " + exchange ) ; org . apache . cxf . message . Message inMessage = CxfSoapBinding . getCxfInMessage ( exchange , true ) ; client . setInInterceptors ( client . getEndpoint ( ) . getService ( ) . getInInterceptors ( ) ) ; client . onMessage ( inMessage ) ; exchange . getOut ( ) . setBody ( inMessage . getContent ( Source . class ) ) ; exchange . getOut ( ) . setHeaders ( inMessage ) ; } protected Bus getBus ( ) { return endpoint . getBus ( ) ; } protected void processSoapProviderIn ( Exchange exchange ) throws Exception { LOG . info ( "processSoapProviderIn: " + exchange ) ; org . apache . cxf . endpoint . Endpoint cxfEndpoint = client . getEndpoint ( ) ; org . apache . cxf . message . Exchange cxfExchange = new ExchangeImpl ( ) ; cxfExchange . put ( org . apache . cxf . endpoint . Endpoint . class , cxfEndpoint ) ; cxfExchange . put ( Bus . class , getBus ( ) ) ; cxfExchange . setConduit ( new NullConduit ( ) ) ; exchange . setProperty ( CxfConstants . CXF_EXCHANGE , cxfExchange ) ; org . apache . cxf . message . Message outMessage = CxfSoapBinding . getCxfOutMessage ( exchange , true ) ; outMessage . put ( Message . REQUESTOR_ROLE , Boolean . TRUE ) ; outMessage . put ( Message . INBOUND_MESSAGE , Boolean . FALSE ) ; InterceptorChain chain = OutgoingChainInterceptor . getOutInterceptorChain ( cxfExchange ) ; outMessage . setInterceptorChain ( chain ) ; chain . doIntercept ( outMessage ) ; CachedOutputStream outputStream = ( CachedOutputStream ) outMessage . getContent ( OutputStream . class ) ; exchange . getOut ( ) . setBody ( outputStream . getInputStream ( ) ) ; exchange . getIn ( ) . setBody ( outputStream . getInputStream ( ) ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "when" ) public class WhenType < Type extends ProcessorType > extends ExpressionNode { public WhenType ( ) { } public WhenType ( Predicate predicate ) { super ( predicate ) ; } public WhenType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "When[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "when" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . processor . exceptionpolicy ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . model . ExceptionType ; public interface ExceptionPolicyStrategy { ExceptionType getExceptionPolicy ( Map < Class , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . SetHeaderProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setHeader" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetHeaderType extends ExpressionNode { @ XmlAttribute private String headerName ; @ XmlAttribute ( required = false ) private String value ; public SetHeaderType ( ) { } public SetHeaderType ( String headerName , ExpressionType expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , Expression expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , String value ) { super ( ExpressionBuilder . constantExpression ( value ) ) ; setHeaderName ( headerName ) ; } @ Override public String toString ( ) { return "SetHeader[ " + getHeaderName ( ) + ", " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setHeader" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr ; if ( getValue ( ) == null ) { expr = getExpression ( ) . createExpression ( routeContext ) ; } else { expr = ExpressionBuilder . constantExpression ( getValue ( ) ) ; } Processor childProcessor = routeContext . createProcessor ( this ) ; return new SetHeaderProcessor ( getHeaderName ( ) , expr , childProcessor ) ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return headerName ; } public void setValue ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } } 	1
package org . apache . camel . component . mina ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . mina . common . ByteBuffer ; @ Converter public final class MinaConverter { private MinaConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { byte [ ] answer = new byte [ buffer . remaining ( ) ] ; try { buffer . acquire ( ) ; } catch ( IllegalStateException ex ) { } buffer . get ( answer ) ; return answer ; } @ Converter public static String toString ( ByteBuffer buffer ) { return IOConverter . toString ( toByteArray ( buffer ) ) ; } @ Converter public static InputStream toInputStream ( ByteBuffer buffer ) { return buffer . asInputStream ( ) ; } @ Converter public static ObjectInput toObjectInput ( ByteBuffer buffer ) throws IOException { return IOConverter . toObjectInput ( toInputStream ( buffer ) ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] bytes ) { ByteBuffer buf = ByteBuffer . allocate ( bytes . length ) ; buf . put ( bytes ) ; return buf ; } } 	0
package org . apache . camel . converter . stream ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import javax . xml . transform . TransformerException ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . converter . jaxp . XmlConverter ; @ Converter public class StreamCacheConverter { private XmlConverter converter = new XmlConverter ( ) ; @ Converter public StreamCache convertToStreamCache ( StreamSource source ) throws TransformerException { return new StreamSourceCache ( converter . toString ( source ) ) ; } @ Converter public StreamCache convertToStreamCache ( InputStream stream ) throws IOException { return new InputStreamCache ( IOConverter . toBytes ( stream ) ) ; } private class StreamSourceCache extends StringSource implements StreamCache { private static final long serialVersionUID = 4147248494104812945L ; public StreamSourceCache ( String text ) { super ( text ) ; } } private class InputStreamCache extends ByteArrayInputStream implements StreamCache { public InputStreamCache ( byte [ ] data ) { super ( data ) ; } } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/spring" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . model . loadbalancer ; 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . ObjectInput ; import java . io . ObjectInputStream ; import java . io . ObjectOutput ; import java . io . ObjectOutputStream ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Reader ; import java . io . StringReader ; import java . io . Writer ; import java . net . URL ; import java . util . Properties ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Converter ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class IOConverter { private static final transient Log LOG = LogFactory . getLog ( IOConverter . class ) ; private IOConverter ( ) { } @ Converter public static InputStream toInputStream ( URL url ) throws IOException { return url . openStream ( ) ; } @ Converter public static InputStream toInputStream ( File file ) throws FileNotFoundException { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } @ Converter public static BufferedReader toReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new FileReader ( file ) ) ; } @ Converter public static File toFile ( String name ) throws FileNotFoundException { return new File ( name ) ; } @ Converter public static OutputStream toOutputStream ( File file ) throws FileNotFoundException { return new BufferedOutputStream ( new FileOutputStream ( file ) ) ; } @ Converter public static BufferedWriter toWriter ( File file ) throws IOException { return new BufferedWriter ( new FileWriter ( file ) ) ; } @ Converter public static Reader toReader ( InputStream in ) throws FileNotFoundException { return new InputStreamReader ( in ) ; } @ Converter public static Writer toWriter ( OutputStream out ) throws FileNotFoundException { return new OutputStreamWriter ( out ) ; } @ Converter public static StringReader toReader ( String text ) { return new StringReader ( text ) ; } @ Converter public static InputStream toInputStream ( String text ) { return toInputStream ( text . getBytes ( ) ) ; } @ Converter public static InputStream toInputStream ( BufferedReader buffer ) throws IOException { return toInputStream ( toString ( buffer ) ) ; } @ Converter public static InputStream toInputStrean ( DOMSource source ) throws TransformerException , IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( toString ( source ) . getBytes ( ) ) ; return bais ; } @ Converter public static String toString ( byte [ ] data ) { return new String ( data ) ; } @ Converter public static String toString ( File file ) throws IOException { return toString ( toReader ( file ) ) ; } @ Converter public static String toString ( URL url ) throws IOException { return toString ( toInputStream ( url ) ) ; } @ Converter public static String toString ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toString ( ( BufferedReader ) reader ) ; } else { return toString ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } try { CollectionStringBuffer builder = new CollectionStringBuffer ( "\n" ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { return builder . toString ( ) ; } builder . append ( line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } } @ Converter public static String toString ( InputStream in ) throws IOException { return toString ( toReader ( in ) ) ; } public static String toString ( Source source ) throws TransformerException , IOException { return toString ( source , null ) ; } public static String toString ( Source source , Properties props ) throws TransformerException , IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; StreamResult sr = new StreamResult ( bos ) ; Transformer trans = TransformerFactory . newInstance ( ) . newTransformer ( ) ; if ( props == null ) { props = new Properties ( ) ; props . put ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; } trans . setOutputProperties ( props ) ; trans . transform ( source , sr ) ; bos . close ( ) ; return bos . toString ( ) ; } @ Converter public static InputStream toInputStream ( byte [ ] data ) { return new ByteArrayInputStream ( data ) ; } @ Converter public static ObjectOutput toObjectOutput ( OutputStream stream ) throws IOException { if ( stream instanceof ObjectOutput ) { return ( ObjectOutput ) stream ; } else { return new ObjectOutputStream ( stream ) ; } } @ Converter public static ObjectInput toObjectInput ( InputStream stream ) throws IOException { if ( stream instanceof ObjectInput ) { return ( ObjectInput ) stream ; } else { return new ObjectInputStream ( stream ) ; } } @ Converter public static byte [ ] toBytes ( InputStream stream ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; copy ( stream , bos ) ; return bos . toByteArray ( ) ; } protected static void copy ( InputStream stream , ByteArrayOutputStream bos ) throws IOException { byte [ ] data = new byte [ 4096 ] ; int read = stream . read ( data ) ; while ( read != - 1 ) { bos . write ( data , 0 , read ) ; read = stream . read ( data ) ; } bos . flush ( ) ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . MessageListener ; import org . apache . camel . Consumer ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . springframework . jms . listener . AbstractMessageListenerContainer ; public class JmsConsumer extends DefaultConsumer < JmsExchange > { private final AbstractMessageListenerContainer listenerContainer ; private EndpointMessageListener messageListener ; public JmsConsumer ( JmsEndpoint endpoint , Processor processor , AbstractMessageListenerContainer listenerContainer ) { super ( endpoint , processor ) ; this . listenerContainer = listenerContainer ; createMessageListener ( endpoint , processor ) ; this . listenerContainer . setMessageListener ( messageListener ) ; } public AbstractMessageListenerContainer getListenerContainer ( ) { return listenerContainer ; } public EndpointMessageListener getEndpointMessageListener ( ) { return messageListener ; } protected void createMessageListener ( JmsEndpoint endpoint , Processor processor ) { messageListener = new EndpointMessageListener ( endpoint , processor ) ; messageListener . setBinding ( endpoint . getBinding ( ) ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; listenerContainer . afterPropertiesSet ( ) ; listenerContainer . start ( ) ; } @ Override protected void doStop ( ) throws Exception { listenerContainer . stop ( ) ; listenerContainer . destroy ( ) ; super . doStop ( ) ; } } 	0
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; public interface RouteContext { Endpoint < ? extends Exchange > getEndpoint ( ) ; FromType getFrom ( ) ; RouteType getRoute ( ) ; CamelContext getCamelContext ( ) ; Processor createProcessor ( ProcessorType node ) throws Exception ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) ; < T > T lookup ( String name , Class < T > type ) ; void commit ( ) ; void addEventDrivenProcessor ( Processor processor ) ; void intercept ( Intercept interceptor ) ; Processor createProceedProcessor ( ) ; List < InterceptStrategy > getInterceptStrategies ( ) ; void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) ; void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) ; void setIsRouteAdded ( boolean value ) ; boolean isRouteAdded ( ) ; } 	1
package org . apache . camel . component . irc ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . schwering . irc . lib . IRCConnection ; import org . schwering . irc . lib . IRCEventAdapter ; import org . schwering . irc . lib . IRCModeParser ; import org . schwering . irc . lib . IRCUser ; public class IrcConsumer extends DefaultConsumer < IrcExchange > { private static final transient Log LOG = LogFactory . getLog ( IrcConsumer . class ) ; private final IrcConfiguration configuration ; private final IrcEndpoint endpoint ; private final IRCConnection connection ; private FilteredIRCEventAdapter listener ; public IrcConsumer ( IrcEndpoint endpoint , Processor processor , IRCConnection connection ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; this . connection = connection ; configuration = endpoint . getConfiguration ( ) ; } @ Override protected void doStop ( ) throws Exception { String target = endpoint . getConfiguration ( ) . getTarget ( ) ; connection . doPart ( target ) ; connection . removeIRCEventListener ( listener ) ; super . doStop ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; String target = endpoint . getConfiguration ( ) . getTarget ( ) ; connection . addIRCEventListener ( new FilteredIRCEventAdapter ( target ) ) ; LOG . debug ( "joining: " + target ) ; connection . doJoin ( target ) ; } public IRCConnection getConnection ( ) { return connection ; } class FilteredIRCEventAdapter extends IRCEventAdapter { final String target ; public FilteredIRCEventAdapter ( String target ) { this . target = target ; } @ Override public void onNick ( IRCUser user , String newNick ) { if ( configuration . isOnNick ( ) ) { IrcExchange exchange = endpoint . createOnNickExchange ( user , newNick ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } @ Override public void onQuit ( IRCUser user , String msg ) { if ( configuration . isOnQuit ( ) ) { IrcExchange exchange = endpoint . createOnQuitExchange ( user , msg ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } @ Override public void onJoin ( String channel , IRCUser user ) { if ( configuration . isOnJoin ( ) ) { if ( channel . equals ( configuration . getTarget ( ) ) ) { IrcExchange exchange = endpoint . createOnJoinExchange ( channel , user ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } @ Override public void onKick ( String channel , IRCUser user , String passiveNick , String msg ) { if ( configuration . isOnKick ( ) ) { if ( channel . equals ( configuration . getTarget ( ) ) ) { IrcExchange exchange = endpoint . createOnKickExchange ( channel , user , passiveNick , msg ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } @ Override public void onMode ( String channel , IRCUser user , IRCModeParser modeParser ) { if ( configuration . isOnMode ( ) ) { if ( channel . equals ( configuration . getTarget ( ) ) ) { IrcExchange exchange = endpoint . createOnModeExchange ( channel , user , modeParser ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } @ Override public void onPart ( String channel , IRCUser user , String msg ) { if ( configuration . isOnPart ( ) ) { if ( channel . equals ( configuration . getTarget ( ) ) ) { IrcExchange exchange = endpoint . createOnPartExchange ( channel , user , msg ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } @ Override public void onTopic ( String channel , IRCUser user , String topic ) { if ( configuration . isOnTopic ( ) ) { if ( channel . equals ( configuration . getTarget ( ) ) ) { IrcExchange exchange = endpoint . createOnTopicExchange ( channel , user , topic ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } @ Override public void onPrivmsg ( String target , IRCUser user , String msg ) { if ( configuration . isOnPrivmsg ( ) ) { if ( target . equals ( configuration . getTarget ( ) ) ) { IrcExchange exchange = endpoint . createOnPrivmsgExchange ( target , user , msg ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class Throttler extends DelayProcessorSupport { private long maximumRequestsPerPeriod ; private long timePeriodMillis ; private long startTimeMillis ; private long requestCount ; public Throttler ( Processor processor , long maximumRequestsPerPeriod ) { this ( processor , maximumRequestsPerPeriod , 1000 ) ; } public Throttler ( Processor processor , long maximumRequestsPerPeriod , long timePeriodMillis ) { super ( processor ) ; this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; this . timePeriodMillis = timePeriodMillis ; } @ Override public String toString ( ) { return "Throttler[requests: " + maximumRequestsPerPeriod + " per: " + timePeriodMillis + " (ms) to: " + getProcessor ( ) + "]" ; } public long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } public long getRequestCount ( ) { return requestCount ; } public long getStartTimeMillis ( ) { return startTimeMillis ; } protected void delay ( Exchange exchange ) throws Exception { long now = currentSystemTime ( ) ; if ( startTimeMillis == 0 ) { startTimeMillis = now ; } if ( now - startTimeMillis > timePeriodMillis ) { requestCount = 1 ; startTimeMillis = now ; } else { if ( ++ requestCount > maximumRequestsPerPeriod ) { long time = startTimeMillis + timePeriodMillis ; waitUntil ( time , exchange ) ; } } } } 	1
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; public interface BrowsableEndpoint < T extends Exchange > extends Endpoint < T > { List < Exchange > getExchanges ( ) ; } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "jaxb" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class JaxbDataFormat extends DataFormatType { @ XmlAttribute ( required = true ) private String contextPath ; @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public JaxbDataFormat ( ) { super ( "org.apache.camel.converter.jaxb.JaxbDataFormat" ) ; } public JaxbDataFormat ( boolean prettyPrint ) { this ( ) ; setPrettyPrint ( prettyPrint ) ; } public String getContextPath ( ) { return contextPath ; } public void setContextPath ( String contextPath ) { this . contextPath = contextPath ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } @ Override protected void configureDataFormat ( DataFormat dataFormat ) { Boolean answer = ObjectHelper . toBoolean ( getPrettyPrint ( ) ) ; if ( answer != null && answer . booleanValue ( ) ) { setProperty ( dataFormat , "prettyPrint" , Boolean . TRUE ) ; } setProperty ( dataFormat , "contextPath" , contextPath ) ; } } 	1
package org . apache . camel . processor . idempotent . jpa ; import java . util . List ; import javax . persistence . EntityManagerFactory ; import javax . persistence . Persistence ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . orm . jpa . JpaTransactionManager ; import org . springframework . transaction . TransactionDefinition ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallback ; import org . springframework . transaction . support . TransactionTemplate ; public class JpaMessageIdRepository implements MessageIdRepository { protected static final String QUERY_STRING = "select x from " + MessageProcessed . class . getName ( ) + " x where x.processorName = ?1 and x.messageId = ?2" ; private JpaTemplate jpaTemplate ; private String processorName ; private TransactionTemplate transactionTemplate ; public JpaMessageIdRepository ( JpaTemplate template , String processorName ) { this ( template , createTransactionTemplate ( template ) , processorName ) ; } public JpaMessageIdRepository ( JpaTemplate template , TransactionTemplate transactionTemplate , String processorName ) { this . jpaTemplate = template ; this . processorName = processorName ; this . transactionTemplate = transactionTemplate ; } public static JpaMessageIdRepository jpaMessageIdRepository ( String persistenceUnit , String processorName ) { EntityManagerFactory entityManagerFactory = Persistence . createEntityManagerFactory ( persistenceUnit ) ; return jpaMessageIdRepository ( new JpaTemplate ( entityManagerFactory ) , processorName ) ; } public static JpaMessageIdRepository jpaMessageIdRepository ( JpaTemplate jpaTemplate , String processorName ) { return new JpaMessageIdRepository ( jpaTemplate , processorName ) ; } private static TransactionTemplate createTransactionTemplate ( JpaTemplate jpaTemplate ) { TransactionTemplate transactionTemplate = new TransactionTemplate ( ) ; transactionTemplate . setTransactionManager ( new JpaTransactionManager ( jpaTemplate . getEntityManagerFactory ( ) ) ) ; transactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRED ) ; return transactionTemplate ; } public boolean contains ( final String messageId ) { Boolean rc = ( Boolean ) transactionTemplate . execute ( new TransactionCallback ( ) { public Object doInTransaction ( TransactionStatus arg0 ) { List list = jpaTemplate . find ( QUERY_STRING , processorName , messageId ) ; if ( list . isEmpty ( ) ) { MessageProcessed processed = new MessageProcessed ( ) ; processed . setProcessorName ( processorName ) ; processed . setMessageId ( messageId ) ; jpaTemplate . persist ( processed ) ; jpaTemplate . flush ( ) ; return Boolean . FALSE ; } else { return Boolean . TRUE ; } } } ) ; return rc . booleanValue ( ) ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . util . Properties ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . file . strategy . FileProcessStrategySupport ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileEndpoint extends ScheduledPollEndpoint < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileEndpoint . class ) ; private static final String DEFAULT_STRATEGYFACTORY_CLASS = "org.apache.camel.component.file.strategy.FileProcessStrategyFactory" ; private File file ; private FileProcessStrategy fileProcessStrategy ; private boolean autoCreate = true ; private boolean lock = true ; private boolean delete ; private boolean noop ; private boolean append = true ; private String moveNamePrefix ; private String moveNamePostfix ; private String [ ] excludedNamePrefixes = { "." } ; private String [ ] excludedNamePostfixes = { FileProcessStrategySupport . DEFAULT_LOCK_FILE_POSTFIX } ; private int bufferSize = 128 * 1024 ; private boolean ignoreFileNameHeader ; protected FileEndpoint ( File file , String endpointUri , FileComponent component ) { super ( endpointUri , component ) ; this . file = file ; } public FileEndpoint ( String endpointUri , File file ) { super ( endpointUri ) ; this . file = file ; } public FileEndpoint ( File file ) { this . file = file ; } public FileEndpoint ( ) { } public Producer < FileExchange > createProducer ( ) throws Exception { Producer < FileExchange > result = new FileProducer ( this ) ; return result ; } public Consumer < FileExchange > createConsumer ( Processor processor ) throws Exception { Consumer < FileExchange > result = new FileConsumer ( this , processor ) ; configureConsumer ( result ) ; return result ; } public FileExchange createExchange ( File file ) { return new FileExchange ( getCamelContext ( ) , getExchangePattern ( ) , file ) ; } @ Override public FileExchange createExchange ( ) { return createExchange ( getFile ( ) ) ; } @ Override public FileExchange createExchange ( ExchangePattern pattern ) { return new FileExchange ( getCamelContext ( ) , pattern , file ) ; } public String getGeneratedFileName ( Message message ) { return getFileFriendlyMessageId ( message . getMessageId ( ) ) ; } public void configureMessage ( File file , Message message ) { message . setBody ( file ) ; String relativePath = file . getPath ( ) . substring ( getFile ( ) . getPath ( ) . length ( ) ) ; if ( relativePath . startsWith ( File . separator ) || relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } message . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } public File getFile ( ) { ObjectHelper . notNull ( file , "file" ) ; if ( autoCreate && ! file . exists ( ) ) { file . mkdirs ( ) ; } return file ; } public void setFile ( File file ) { this . file = file ; } public boolean isSingleton ( ) { return true ; } public boolean isAutoCreate ( ) { return this . autoCreate ; } public void setAutoCreate ( boolean autoCreate ) { this . autoCreate = autoCreate ; } public FileProcessStrategy getFileStrategy ( ) { if ( fileProcessStrategy == null ) { fileProcessStrategy = createFileStrategy ( ) ; LOG . debug ( "Using file process strategy: " + fileProcessStrategy ) ; } return fileProcessStrategy ; } public void setFileStrategy ( FileProcessStrategy fileProcessStrategy ) { this . fileProcessStrategy = fileProcessStrategy ; } public boolean isDelete ( ) { return delete ; } public void setDelete ( boolean delete ) { this . delete = delete ; } public boolean isLock ( ) { return lock ; } public void setLock ( boolean lock ) { this . lock = lock ; } public String getMoveNamePostfix ( ) { return moveNamePostfix ; } public void setMoveNamePostfix ( String moveNamePostfix ) { this . moveNamePostfix = moveNamePostfix ; } public String getMoveNamePrefix ( ) { return moveNamePrefix ; } public void setMoveNamePrefix ( String moveNamePrefix ) { this . moveNamePrefix = moveNamePrefix ; } public String [ ] getExcludedNamePrefixes ( ) { return excludedNamePrefixes ; } public void setExcludedNamePrefixes ( String [ ] excludedNamePrefixes ) { this . excludedNamePrefixes = excludedNamePrefixes ; } public String [ ] getExcludedNamePostfixes ( ) { return excludedNamePostfixes ; } public void setExcludedNamePostfixes ( String [ ] excludedNamePostfixes ) { this . excludedNamePostfixes = excludedNamePostfixes ; } public boolean isNoop ( ) { return noop ; } public void setNoop ( boolean noop ) { this . noop = noop ; } public boolean isAppend ( ) { return append ; } public void setAppend ( boolean append ) { this . append = append ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public boolean isIgnoreFileNameHeader ( ) { return ignoreFileNameHeader ; } public void setIgnoreFileNameHeader ( boolean ignoreFileNameHeader ) { this . ignoreFileNameHeader = ignoreFileNameHeader ; } protected FileProcessStrategy createFileStrategy ( ) { Class < ? > factory = null ; try { FactoryFinder finder = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; factory = finder . findClass ( "file" , "strategy.factory." ) ; } catch ( ClassNotFoundException e ) { LOG . debug ( "'strategy.factory.class' not found" , e ) ; } catch ( IOException e ) { LOG . debug ( "No strategy factory defined in 'META-INF/services/org/apache/camel/component/file'" , e ) ; } if ( factory == null ) { factory = ObjectHelper . loadClass ( DEFAULT_STRATEGYFACTORY_CLASS ) ; if ( factory == null ) { throw new TypeNotPresentException ( "FileProcessStrategyFactory class not found" , null ) ; } } try { Method factoryMethod = factory . getMethod ( "createFileProcessStrategy" , Properties . class ) ; return ( FileProcessStrategy ) ObjectHelper . invokeMethod ( factoryMethod , null , getParamsAsProperties ( ) ) ; } catch ( NoSuchMethodException e ) { throw new TypeNotPresentException ( factory . getSimpleName ( ) + ".createFileProcessStrategy(Properties params) method not found" , e ) ; } } protected Properties getParamsAsProperties ( ) { Properties params = new Properties ( ) ; if ( isNoop ( ) ) { params . setProperty ( "noop" , Boolean . toString ( true ) ) ; } if ( isDelete ( ) ) { params . setProperty ( "delete" , Boolean . toString ( true ) ) ; } if ( isAppend ( ) ) { params . setProperty ( "append" , Boolean . toString ( true ) ) ; } if ( isLock ( ) ) { params . setProperty ( "lock" , Boolean . toString ( true ) ) ; } if ( moveNamePrefix != null ) { params . setProperty ( "moveNamePrefix" , moveNamePrefix ) ; } if ( moveNamePostfix != null ) { params . setProperty ( "moveNamePostfix" , moveNamePostfix ) ; } return params ; } @ Override protected String createEndpointUri ( ) { return "file://" + getFile ( ) . getAbsolutePath ( ) ; } protected String getFileFriendlyMessageId ( String id ) { return UuidGenerator . generateSanitizedId ( id ) ; } } 	1
package org . apache . camel . converter . jaxb ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAnyElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlMixed ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Message ; @ XmlRootElement ( name = "message" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class MessageType { @ XmlAnyElement ( lax = true ) @ XmlMixed List < HeaderType > headers = new ArrayList < HeaderType > ( ) ; @ XmlAnyElement ( lax = true ) @ XmlMixed private List content = new ArrayList ( ) ; @ XmlTransient private Object body ; public Object getBody ( ) { if ( body == null ) { if ( content != null ) { if ( content . size ( ) == 1 ) { return content . get ( 0 ) ; } else { return content ; } } } return body ; } public void setBody ( Object body ) { this . body = body ; if ( body instanceof List ) { content = ( List ) body ; } else { content = new ArrayList ( ) ; content . add ( body ) ; } } public List < HeaderType > getHeaders ( ) { return headers ; } public void setHeaders ( List < HeaderType > headers ) { this . headers = headers ; } public Map < String , Object > getHeaderMap ( ) { Map < String , Object > answer = new HashMap < String , Object > ( ) ; for ( HeaderType header : headers ) { answer . put ( header . getName ( ) , header . getValue ( ) ) ; } return answer ; } public void copyFrom ( Message message ) { headers . clear ( ) ; Set < Map . Entry < String , Object > > entries = message . getHeaders ( ) . entrySet ( ) ; for ( Map . Entry < String , Object > entry : entries ) { Object value = entry . getValue ( ) ; if ( value != null ) { headers . add ( createHeader ( entry . getKey ( ) , value ) ) ; } } setBody ( message . getBody ( ) ) ; } public void copyTo ( Message message ) { message . setHeaders ( getHeaderMap ( ) ) ; message . setBody ( getBody ( ) ) ; } protected HeaderType createHeader ( String key , Object value ) { if ( value instanceof String ) { return new StringHeader ( key , ( String ) value ) ; } else if ( value instanceof Integer ) { return new IntegerHeader ( key , ( Integer ) value ) ; } else if ( value instanceof Long ) { return new LongHeader ( key , ( Long ) value ) ; } else { return new StringHeader ( key , value . toString ( ) ) ; } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Delayer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "delayer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DelayerType extends ExpressionNode { private Long delay = 0L ; public DelayerType ( ) { } public DelayerType ( Expression processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( ExpressionType processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( Expression processAtExpression , long delay ) { super ( processAtExpression ) ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "delayer" ; } public Long getDelay ( ) { return delay ; } public void setDelay ( Long delay ) { this . delay = delay ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; Expression processAtExpression = getExpression ( ) != null ? getExpression ( ) . createExpression ( routeContext ) : null ; return new Delayer ( childProcessor , processAtExpression , delay ) ; } } 	1
package org . apache . camel . component . http ; import java . io . IOException ; import java . io . InputStream ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . component . http . helper . LoadingByteArrayOutputStream ; import org . apache . camel . impl . PollingConsumerSupport ; import org . apache . commons . httpclient . Header ; import org . apache . commons . httpclient . HttpClient ; import org . apache . commons . httpclient . HttpMethod ; import org . apache . commons . httpclient . methods . GetMethod ; import org . apache . commons . io . IOUtils ; public class HttpPollingConsumer extends PollingConsumerSupport < HttpExchange > { private final HttpEndpoint endpoint ; private HttpClient httpClient ; public HttpPollingConsumer ( HttpEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; httpClient = endpoint . createHttpClient ( ) ; } public HttpExchange receive ( ) { return receiveNoWait ( ) ; } public HttpExchange receive ( long timeout ) { return receiveNoWait ( ) ; } public HttpExchange receiveNoWait ( ) { HttpExchange exchange = endpoint . createExchange ( ) ; HttpMethod method = createMethod ( ) ; try { int responseCode = httpClient . executeMethod ( method ) ; LoadingByteArrayOutputStream bos = new LoadingByteArrayOutputStream ( ) ; InputStream is = method . getResponseBodyAsStream ( ) ; IOUtils . copy ( is , bos ) ; bos . flush ( ) ; is . close ( ) ; Message message = exchange . getIn ( ) ; message . setBody ( bos . createInputStream ( ) ) ; Header [ ] headers = method . getResponseHeaders ( ) ; for ( Header header : headers ) { String name = header . getName ( ) ; String value = header . getValue ( ) ; message . setHeader ( name , value ) ; } message . setHeader ( "http.responseCode" , responseCode ) ; return exchange ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } finally { method . releaseConnection ( ) ; } } public HttpClient getHttpClient ( ) { return httpClient ; } public void setHttpClient ( HttpClient httpClient ) { this . httpClient = httpClient ; } protected HttpMethod createMethod ( ) { String uri = endpoint . getEndpointUri ( ) ; return new GetMethod ( uri ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RenameFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( RenameFileProcessStrategy . class ) ; private FileRenamer renamer ; public RenameFileProcessStrategy ( ) { this ( true ) ; } public RenameFileProcessStrategy ( boolean lock ) { this ( lock , ".camel/" , "" ) ; } public RenameFileProcessStrategy ( boolean lock , String namePrefix , String namePostfix ) { this ( lock , new DefaultFileRenamer ( namePrefix , namePostfix ) ) ; } public RenameFileProcessStrategy ( boolean lock , FileRenamer renamer ) { super ( lock ) ; this . renamer = renamer ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { File newName = renamer . renameFile ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Renaming file: " + file + " to: " + newName ) ; } if ( newName . exists ( ) ) { newName . delete ( ) ; } newName . getParentFile ( ) . mkdirs ( ) ; boolean renamed = file . renameTo ( newName ) ; if ( ! renamed ) { LOG . warn ( "Could not rename file from: " + file + " to " + newName ) ; } super . commit ( endpoint , exchange , file ) ; } public FileRenamer getRenamer ( ) { return renamer ; } public void setRenamer ( FileRenamer renamer ) { this . renamer = renamer ; } } 	1
package org . apache . camel . converter . jaxb ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAnyElement ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "exchange" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class ExchangeType { @ XmlElement ( name = "property" , required = false ) List < PropertyType > properties = new ArrayList < PropertyType > ( ) ; @ XmlAnyElement ( lax = true ) private Object body ; public Object getBody ( ) { return body ; } public void setBody ( Object body ) { this . body = body ; } public List < PropertyType > getProperties ( ) { return properties ; } public void setProperties ( List < PropertyType > properties ) { this . properties = properties ; } } 	0
package org . apache . camel . processor . validation ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import javax . xml . XMLConstants ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . validation . Schema ; import javax . xml . validation . SchemaFactory ; import javax . xml . validation . Validator ; import org . xml . sax . SAXException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class ValidatingProcessor implements Processor { private Schema schema ; private ValidatorErrorHandler errorHandler = new DefaultValidationErrorHandler ( ) ; private String schemaLanguage = XMLConstants . W3C_XML_SCHEMA_NS_URI ; private Source schemaSource ; private SchemaFactory schemaFactory ; private URL schemaUrl ; private File schemaFile ; public void process ( Exchange exchange ) throws Exception { Schema schema = getSchema ( ) ; Validator validator = schema . newValidator ( ) ; Source source = exchange . getIn ( ) . getBody ( DOMSource . class ) ; if ( source == null ) { throw new NoXmlBodyValidationException ( exchange ) ; } errorHandler . reset ( ) ; validator . setErrorHandler ( errorHandler ) ; DOMResult result = new DOMResult ( ) ; validator . validate ( source , result ) ; errorHandler . handleErrors ( exchange , schema , result ) ; } public Schema getSchema ( ) throws IOException , SAXException { if ( schema == null ) { schema = createSchema ( ) ; } return schema ; } public void setSchema ( Schema schema ) { this . schema = schema ; } public String getSchemaLanguage ( ) { return schemaLanguage ; } public void setSchemaLanguage ( String schemaLanguage ) { this . schemaLanguage = schemaLanguage ; } public Source getSchemaSource ( ) throws IOException { if ( schemaSource == null ) { schemaSource = createSchemaSource ( ) ; } return schemaSource ; } public void setSchemaSource ( Source schemaSource ) { this . schemaSource = schemaSource ; } public URL getSchemaUrl ( ) { return schemaUrl ; } public void setSchemaUrl ( URL schemaUrl ) { this . schemaUrl = schemaUrl ; } public File getSchemaFile ( ) { return schemaFile ; } public void setSchemaFile ( File schemaFile ) { this . schemaFile = schemaFile ; } public SchemaFactory getSchemaFactory ( ) { if ( schemaFactory == null ) { schemaFactory = createSchemaFactory ( ) ; } return schemaFactory ; } public void setSchemaFactory ( SchemaFactory schemaFactory ) { this . schemaFactory = schemaFactory ; } public ValidatorErrorHandler getErrorHandler ( ) { return errorHandler ; } public void setErrorHandler ( ValidatorErrorHandler errorHandler ) { this . errorHandler = errorHandler ; } protected SchemaFactory createSchemaFactory ( ) { return SchemaFactory . newInstance ( schemaLanguage ) ; } protected Source createSchemaSource ( ) throws IOException { throw new IllegalArgumentException ( "You must specify a schema, " + "schemaFile, schemaSource or schemaUrl property" ) ; } protected Schema createSchema ( ) throws SAXException , IOException { SchemaFactory factory = getSchemaFactory ( ) ; URL url = getSchemaUrl ( ) ; if ( url != null ) { return factory . newSchema ( url ) ; } File file = getSchemaFile ( ) ; if ( file != null ) { return factory . newSchema ( file ) ; } return factory . newSchema ( getSchemaSource ( ) ) ; } } 	1
package org . apache . camel . component . mail ; import javax . mail . Message ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . springframework . mail . javamail . JavaMailSender ; import org . springframework . mail . javamail . JavaMailSenderImpl ; public class MailEndpoint extends ScheduledPollEndpoint < MailExchange > { private MailBinding binding ; private MailConfiguration configuration ; public MailEndpoint ( String uri , MailComponent component , MailConfiguration configuration ) { super ( uri , component ) ; this . configuration = configuration ; } public MailEndpoint ( String endpointUri , MailConfiguration configuration ) { super ( endpointUri ) ; this . configuration = configuration ; } public MailEndpoint ( String endpointUri ) { this ( endpointUri , new MailConfiguration ( ) ) ; } public Producer < MailExchange > createProducer ( ) throws Exception { JavaMailSender sender = configuration . createJavaMailSender ( ) ; return createProducer ( sender ) ; } public Producer < MailExchange > createProducer ( JavaMailSender sender ) throws Exception { return new MailProducer ( this , sender ) ; } public Consumer < MailExchange > createConsumer ( Processor processor ) throws Exception { if ( configuration . getProtocol ( ) . startsWith ( "smtp" ) ) { throw new IllegalArgumentException ( "Protocol " + configuration . getProtocol ( ) + " can not be used for a MailConsumer. Please use another protocol such as pop3 or imap." ) ; } JavaMailSenderImpl sender = configuration . createJavaMailSender ( ) ; return createConsumer ( processor , sender ) ; } public Consumer < MailExchange > createConsumer ( Processor processor , JavaMailSenderImpl sender ) throws Exception { MailConsumer answer = new MailConsumer ( this , processor , sender ) ; answer . setDelay ( MailConsumer . DEFAULT_CONSUMER_DELAY ) ; configureConsumer ( answer ) ; return answer ; } @ Override public MailExchange createExchange ( ExchangePattern pattern ) { return new MailExchange ( getCamelContext ( ) , pattern , getBinding ( ) ) ; } public MailExchange createExchange ( Message message ) { return new MailExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , message ) ; } public MailBinding getBinding ( ) { if ( binding == null ) { binding = new MailBinding ( ) ; } return binding ; } public void setBinding ( MailBinding binding ) { this . binding = binding ; } public boolean isSingleton ( ) { return false ; } public MailConfiguration getConfiguration ( ) { return configuration ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileConsumer extends ScheduledPollConsumer < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileConsumer . class ) ; private FileEndpoint endpoint ; private ConcurrentHashMap < File , File > filesBeingProcessed = new ConcurrentHashMap < File , File > ( ) ; private ConcurrentHashMap < File , Long > fileSizes = new ConcurrentHashMap < File , Long > ( ) ; private ConcurrentHashMap < File , Long > noopMap = new ConcurrentHashMap < File , Long > ( ) ; private boolean generateEmptyExchangeWhenIdle ; private boolean recursive = true ; private String regexPattern = "" ; private long lastPollTime ; private int unchangedDelay ; private boolean unchangedSize ; public FileConsumer ( final FileEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } protected synchronized void poll ( ) throws Exception { int rc = pollFileOrDirectory ( endpoint . getFile ( ) , isRecursive ( ) ) ; if ( rc == 0 && generateEmptyExchangeWhenIdle ) { final FileExchange exchange = endpoint . createExchange ( ( File ) null ) ; getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } lastPollTime = System . currentTimeMillis ( ) ; } protected int pollFileOrDirectory ( File fileOrDirectory , boolean processDir ) { if ( ! fileOrDirectory . isDirectory ( ) ) { return pollFile ( fileOrDirectory ) ; } else if ( processDir ) { int rc = 0 ; if ( isValidFile ( fileOrDirectory ) ) { LOG . debug ( "Polling directory " + fileOrDirectory ) ; File [ ] files = fileOrDirectory . listFiles ( ) ; for ( File file : files ) { rc += pollFileOrDirectory ( file , isRecursive ( ) ) ; } } return rc ; } else { LOG . debug ( "Skipping directory " + fileOrDirectory ) ; return 0 ; } } protected int pollFile ( final File file ) { if ( ! file . exists ( ) ) { return 0 ; } if ( ! isValidFile ( file ) ) { return 0 ; } if ( ! endpoint . isNoop ( ) ) { if ( filesBeingProcessed . contains ( file ) ) { return 1 ; } filesBeingProcessed . put ( file , file ) ; } final FileProcessStrategy processStrategy = endpoint . getFileStrategy ( ) ; final FileExchange exchange = endpoint . createExchange ( file ) ; endpoint . configureMessage ( file , exchange . getIn ( ) ) ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to process file: " + file + " using exchange: " + exchange ) ; } if ( processStrategy . begin ( endpoint , exchange , file ) ) { getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { boolean failed = exchange . isFailed ( ) ; boolean handled = DeadLetterChannel . isFailureHandled ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Done processing file: " + file + ". Status is: " + ( failed ? "failed: " + failed + ", handled by failure processor: " + handled : "OK" ) ) ; } if ( ! failed || handled ) { processStrategyCommit ( processStrategy , exchange , file , handled ) ; } else if ( failed && ! handled ) { handleException ( exchange . getException ( ) ) ; } filesBeingProcessed . remove ( file ) ; } } ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " cannot process file: " + file ) ; } } } catch ( Throwable e ) { handleException ( e ) ; } return 1 ; } protected void processStrategyCommit ( FileProcessStrategy processStrategy , FileExchange exchange , File file , boolean failureHandled ) { try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Committing file strategy: " + processStrategy + " for file: " + file + ( failureHandled ? " that was handled by the failure processor." : "" ) ) ; } processStrategy . commit ( endpoint , exchange , file ) ; } catch ( Exception e ) { LOG . warn ( "Error committing file strategy: " + processStrategy , e ) ; handleException ( e ) ; } } protected boolean isValidFile ( File file ) { boolean result = false ; if ( file != null && file . exists ( ) ) { if ( isMatched ( file ) && isChanged ( file ) ) { result = true ; } } return result ; } protected boolean isChanged ( File file ) { if ( file == null ) { return false ; } else if ( file . isDirectory ( ) ) { return true ; } else { boolean lastModifiedCheck = false ; long modifiedDuration = 0 ; if ( getUnchangedDelay ( ) > 0 ) { modifiedDuration = System . currentTimeMillis ( ) - file . lastModified ( ) ; lastModifiedCheck = modifiedDuration >= getUnchangedDelay ( ) ; } long fileModified = file . lastModified ( ) ; Long previousModified = noopMap . get ( file ) ; noopMap . put ( file , fileModified ) ; if ( previousModified == null || fileModified > previousModified ) { lastModifiedCheck = true ; } boolean sizeCheck = false ; long sizeDifference = 0 ; if ( isUnchangedSize ( ) ) { Long value = fileSizes . get ( file ) ; if ( value == null ) { sizeCheck = true ; } else { sizeCheck = file . length ( ) != value ; } } boolean answer = lastModifiedCheck || sizeCheck ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "file:" + file + " isChanged:" + answer + " " + "sizeCheck:" + sizeCheck + "(" + sizeDifference + ") " + "lastModifiedCheck:" + lastModifiedCheck + "(" + modifiedDuration + ")" ) ; } if ( isUnchangedSize ( ) ) { if ( answer ) { fileSizes . put ( file , file . length ( ) ) ; } else { fileSizes . remove ( file ) ; } } return answer ; } } protected boolean isMatched ( File file ) { String name = file . getName ( ) ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { if ( ! name . matches ( getRegexPattern ( ) ) ) { return false ; } } String [ ] prefixes = endpoint . getExcludedNamePrefixes ( ) ; if ( prefixes != null ) { for ( String prefix : prefixes ) { if ( name . startsWith ( prefix ) ) { return false ; } } } String [ ] postfixes = endpoint . getExcludedNamePostfixes ( ) ; if ( postfixes != null ) { for ( String postfix : postfixes ) { if ( name . endsWith ( postfix ) ) { return false ; } } } return true ; } public boolean isRecursive ( ) { return this . recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public String getRegexPattern ( ) { return this . regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isGenerateEmptyExchangeWhenIdle ( ) { return generateEmptyExchangeWhenIdle ; } public void setGenerateEmptyExchangeWhenIdle ( boolean generateEmptyExchangeWhenIdle ) { this . generateEmptyExchangeWhenIdle = generateEmptyExchangeWhenIdle ; } public int getUnchangedDelay ( ) { return unchangedDelay ; } public void setUnchangedDelay ( int unchangedDelay ) { this . unchangedDelay = unchangedDelay ; } public boolean isUnchangedSize ( ) { return unchangedSize ; } public void setUnchangedSize ( boolean unchangedSize ) { this . unchangedSize = unchangedSize ; } } 	1
package org . apache . camel . spring . handler ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . AbstractSingleBeanDefinitionParser ; import org . springframework . core . Conventions ; import org . springframework . util . Assert ; import org . springframework . util . StringUtils ; public class BeanDefinitionParser extends AbstractSingleBeanDefinitionParser { private Class type ; protected BeanDefinitionParser ( ) { } public BeanDefinitionParser ( Class type ) { this . type = type ; } protected Class getBeanClass ( Element element ) { if ( type == null ) { type = loadType ( ) ; } return type ; } protected Class loadType ( ) { throw new IllegalArgumentException ( "No type specified!" ) ; } protected boolean isEligibleAttribute ( String attributeName ) { return attributeName != null && ! ID_ATTRIBUTE . equals ( attributeName ) && ! attributeName . equals ( "xmlns" ) && ! attributeName . startsWith ( "xmlns:" ) ; } protected final void doParse ( Element element , BeanDefinitionBuilder builder ) { NamedNodeMap attributes = element . getAttributes ( ) ; for ( int x = 0 ; x < attributes . getLength ( ) ; x ++ ) { Attr attribute = ( Attr ) attributes . item ( x ) ; String name = attribute . getLocalName ( ) ; String fullName = attribute . getName ( ) ; if ( ! fullName . startsWith ( "xmlns:" ) && ! fullName . equals ( "xmlns" ) && isEligibleAttribute ( name ) ) { String propertyName = extractPropertyName ( name ) ; Assert . state ( StringUtils . hasText ( propertyName ) , "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty." ) ; builder . addPropertyValue ( propertyName , attribute . getValue ( ) ) ; } } postProcess ( builder , element ) ; } protected String extractPropertyName ( String attributeName ) { return Conventions . attributeNameToPropertyName ( attributeName ) ; } protected void postProcess ( BeanDefinitionBuilder beanDefinition , Element element ) { } } 	0
package org . apache . camel . impl ; import java . net . URI ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import java . util . concurrent . ThreadFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . URISupport ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DefaultComponent < E extends Exchange > extends ServiceSupport implements Component < E > { private static final transient Log LOG = LogFactory . getLog ( DefaultComponent . class ) ; private int defaultThreadPoolSize = 5 ; private CamelContext camelContext ; private ScheduledExecutorService executorService ; public DefaultComponent ( ) { } public DefaultComponent ( CamelContext context ) { this . camelContext = context ; } public Endpoint < E > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; if ( path . startsWith ( "//" ) ) { path = path . substring ( 2 ) ; } int idx = path . indexOf ( '?' ) ; if ( idx > 0 ) { path = path . substring ( 0 , idx ) ; } Map parameters = URISupport . parseParameters ( u ) ; validateURI ( uri , path , parameters ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating endpoint uri=[" + uri + "], path=[" + path + "], parameters=[" + parameters + "]" ) ; } Endpoint < E > endpoint = createEndpoint ( uri , path , parameters ) ; if ( endpoint == null ) { return null ; } if ( parameters != null ) { endpoint . configureProperties ( parameters ) ; if ( useIntrospectionOnEndpoint ( ) ) { setProperties ( endpoint , parameters ) ; } if ( parameters . size ( ) > 0 ) { throw new ResolveEndpointFailedException ( uri , "There are " + parameters . size ( ) + " parameters that couldn't be set on the endpoint." + " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint." + " Unknown parameters=[" + parameters + "]" ) ; } } return endpoint ; } protected void validateURI ( String uri , String path , Map parameters ) throws ResolveEndpointFailedException { if ( uri . contains ( "&" ) && ! uri . contains ( "?" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: no ? marker however the uri " + "has & parameter separators. Check the uri if its missing a ? marker." ) ; } if ( uri . contains ( "&&" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: Double && marker found. " + "Check the uri and remove the duplicate & marker." ) ; } } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext context ) { this . camelContext = context ; } public ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { executorService = createExecutorService ( ) ; } return executorService ; } public void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } protected ScheduledExecutorService createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( defaultThreadPoolSize , new ThreadFactory ( ) { int counter ; public synchronized Thread newThread ( Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "Thread: " + ( ++ counter ) + " " + DefaultComponent . this . toString ( ) ) ; return thread ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { if ( executorService != null ) { executorService . shutdown ( ) ; } } protected abstract Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception ; protected void setProperties ( Object bean , Map parameters ) throws Exception { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , bean , parameters ) ; } protected boolean useIntrospectionOnEndpoint ( ) { return true ; } public < T > T convertTo ( Class < T > type , Object value ) { return CamelContextHelper . convertTo ( getCamelContext ( ) , type , value ) ; } public < T > T mandatoryConvertTo ( Class < T > type , Object value ) { return CamelContextHelper . mandatoryConvertTo ( getCamelContext ( ) , type , value ) ; } public < T > T newInstance ( Class < T > beanType ) { return getCamelContext ( ) . getInjector ( ) . newInstance ( beanType ) ; } public Object lookup ( String name ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name ) ; } public < T > T lookup ( String name , Class < T > beanType ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , beanType ) ; } public Object mandatoryLookup ( String name ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name ) ; } public < T > T mandatoryLookup ( String name , Class < T > beanType ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name , beanType ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type ) { return getAndRemoveParameter ( parameters , key , type , null ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type , T defaultValue ) { Object value = parameters . remove ( key ) ; if ( value == null ) { value = defaultValue ; } if ( value == null ) { return null ; } return convertTo ( type , value ) ; } } 	1
package org . apache . camel ; public class RuntimeExpressionException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; public RuntimeExpressionException ( String message ) { super ( message ) ; } public RuntimeExpressionException ( String message , Throwable cause ) { super ( message , cause ) ; } public RuntimeExpressionException ( Throwable cause ) { super ( cause ) ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . RandomAccessFile ; import java . nio . channels . Channel ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . component . file . FileProcessStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class FileProcessStrategySupport implements FileProcessStrategy { public static final String DEFAULT_LOCK_FILE_POSTFIX = ".cameLock" ; private static final transient Log LOG = LogFactory . getLog ( FileProcessStrategySupport . class ) ; private boolean lockFile ; private FileRenamer lockFileRenamer ; protected FileProcessStrategySupport ( ) { this ( true ) ; } protected FileProcessStrategySupport ( boolean lockFile ) { this ( lockFile , new DefaultFileRenamer ( null , DEFAULT_LOCK_FILE_POSTFIX ) ) ; } protected FileProcessStrategySupport ( boolean lockFile , FileRenamer lockFileRenamer ) { this . lockFile = lockFile ; this . lockFileRenamer = lockFileRenamer ; } public boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { File newFile = lockFileRenamer . renameFile ( file ) ; String lockFileName = newFile . getAbsolutePath ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Locking the file: " + file + " using the lock file name: " + lockFileName ) ; } FileChannel channel = new RandomAccessFile ( lockFileName , "rw" ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; if ( lock != null ) { exchange . setProperty ( "org.apache.camel.fileChannel" , channel ) ; exchange . setProperty ( "org.apache.camel.file.lock" , lock ) ; exchange . setProperty ( "org.apache.camel.file.lock.name" , lockFileName ) ; return true ; } return false ; } return true ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { Channel channel = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.fileChannel" , Channel . class ) ; String lockfile = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock.name" , String . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unlocking file: " + file ) ; } channel . close ( ) ; File lock = new File ( lockfile ) ; lock . delete ( ) ; } } public boolean isLockFile ( ) { return lockFile ; } public void setLockFile ( boolean lockFile ) { this . lockFile = lockFile ; } public FileRenamer getLockFileRenamer ( ) { return lockFileRenamer ; } public void setLockFileRenamer ( FileRenamer lockFileRenamer ) { this . lockFileRenamer = lockFileRenamer ; } } 	1
package org . apache . camel . component . jhc ; import java . net . URI ; import org . apache . camel . Consumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . http . params . BasicHttpParams ; import org . apache . http . params . HttpParams ; public class JhcEndpoint extends DefaultEndpoint < JhcExchange > { private HttpParams params ; private URI httpUri ; public JhcEndpoint ( String endpointUri , JhcComponent component , URI httpUri ) { super ( endpointUri , component ) ; params = new BasicHttpParams ( component . getParams ( ) ) ; this . httpUri = httpUri ; } public JhcEndpoint ( String endpointUri , URI httpUri , HttpParams params ) { super ( endpointUri ) ; this . httpUri = httpUri ; this . params = params ; } public HttpParams getParams ( ) { return params ; } public void setParams ( HttpParams params ) { this . params = params ; } public URI getHttpUri ( ) { return httpUri ; } public void setHttpUri ( URI httpUri ) { this . httpUri = httpUri ; } public String getProtocol ( ) { return httpUri . getScheme ( ) ; } public String getHost ( ) { return httpUri . getHost ( ) ; } public int getPort ( ) { if ( httpUri . getPort ( ) == - 1 ) { if ( "https" . equals ( getProtocol ( ) ) ) { return 443 ; } else { return 80 ; } } return httpUri . getPort ( ) ; } public String getPath ( ) { return httpUri . getPath ( ) ; } public boolean isSingleton ( ) { return true ; } public Producer < JhcExchange > createProducer ( ) throws Exception { return new JhcProducer ( this ) ; } public Consumer < JhcExchange > createConsumer ( Processor processor ) throws Exception { return new JhcConsumer ( this , processor ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . StringTokenizer ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; public final class ExpressionBuilder { private ExpressionBuilder ( ) { } public static < E extends Exchange > Expression < E > headerExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getIn ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "header(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > headersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "headers" ; } } ; } public static < E extends Exchange > Expression < E > outHeaderExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } Object header = out . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "outHeader(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > outHeadersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "outHeaders" ; } } ; } public static < E extends Exchange > Expression < E > propertyExpression ( final String propertyName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperty ( propertyName ) ; } @ Override public String toString ( ) { return "property(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertiesExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperties ( ) ; } @ Override public String toString ( ) { return "properties" ; } } ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName ) { return systemPropertyExpression ( propertyName , null ) ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( propertyName , defaultValue ) ; } @ Override public String toString ( ) { return "systemProperty(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > constantExpression ( final Object value ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return value ; } @ Override public String toString ( ) { return "" + value ; } } ; } public static < E extends Exchange > Expression < E > bodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "body" ; } } ; } public static < E extends Exchange , T > Expression < E > bodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "bodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > outBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( ) ; } @ Override public String toString ( ) { return "outBody" ; } } ; } public static < E extends Exchange , T > Expression < E > outBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( type ) ; } @ Override public String toString ( ) { return "outBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > faultBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "faultBody" ; } } ; } public static < E extends Exchange , T > Expression < E > faultBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "faultBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > exchangeExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange ; } @ Override public String toString ( ) { return "exchange" ; } } ; } public static < E extends Exchange > Expression < E > inMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) ; } @ Override public String toString ( ) { return "inMessage" ; } } ; } public static < E extends Exchange > Expression < E > outMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) ; } @ Override public String toString ( ) { return "outMessage" ; } } ; } public static < E extends Exchange > Expression < E > convertTo ( final Expression expression , final Class type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } @ Override public String toString ( ) { return "" + expression + ".convertTo(" + type . getName ( ) + ".class)" ; } } ; } public static < E extends Exchange > Expression < E > tokenizeExpression ( final Expression < E > expression , final String token ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } StringTokenizer iter = new StringTokenizer ( text , token ) ; List < String > answer = new ArrayList < String > ( ) ; while ( iter . hasMoreTokens ( ) ) { answer . add ( iter . nextToken ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "tokenize(" + expression + ", " + token + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexTokenize ( final Expression < E > expression , String regexTokenizer ) { final Pattern pattern = Pattern . compile ( regexTokenizer ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return Arrays . asList ( pattern . split ( text ) ) ; } @ Override public String toString ( ) { return "regexTokenize(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final String replacement ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final Expression < E > replacementExpression ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; String replacement = evaluateStringExpression ( replacementExpression , exchange ) ; if ( text == null || replacement == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > append ( final Expression < E > left , final Expression < E > right ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return evaluateStringExpression ( left , exchange ) + evaluateStringExpression ( right , exchange ) ; } @ Override public String toString ( ) { return "append(" + left + ", " + right + ")" ; } } ; } public static < E extends Exchange > String evaluateStringExpression ( Expression < E > expression , E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , value ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( name , defaultValue ) ; } } ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions ) { return concatExpression ( expressions , null ) ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions , final String expression ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Expression < E > expression : expressions ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text != null ) { buffer . append ( text ) ; } } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( expression != null ) { return expression ; } else { return "concat" + expressions ; } } } ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "jxpath" ) public class JXPathExpression extends ExpressionType { public JXPathExpression ( ) { } public JXPathExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "jxpath" ; } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SedaConsumer extends ServiceSupport implements Consumer , Runnable { private static final transient Log LOG = LogFactory . getLog ( SedaConsumer . class ) ; private SedaEndpoint endpoint ; private AsyncProcessor processor ; private Thread thread ; public SedaConsumer ( SedaEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; } @ Override public String toString ( ) { return "SedaConsumer: " + endpoint . getEndpointUri ( ) ; } public void run ( ) { while ( isRunAllowed ( ) ) { final Exchange exchange ; try { exchange = endpoint . getQueue ( ) . poll ( 1000 , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Interupted: " + e , e ) ; } continue ; } if ( exchange != null && isRunAllowed ( ) ) { try { processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } catch ( Exception e ) { LOG . error ( "Seda queue caught: " + e , e ) ; } } } } protected void doStart ( ) throws Exception { thread = new Thread ( this , getThreadName ( endpoint . getEndpointUri ( ) ) ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { thread . join ( ) ; } } 	1
package org . apache . camel . builder . xml ; public interface ResultHandlerFactory { ResultHandler createResult ( ) ; } 	0
package org . apache . camel . model ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "optionalIdentifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class OptionalIdentifiedType < T extends OptionalIdentifiedType > { @ XmlTransient protected static Map < String , AtomicInteger > nodeCounters = new HashMap < String , AtomicInteger > ( ) ; @ XmlAttribute ( required = false ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlElement ( required = false ) private Description description ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Description getDescription ( ) { return description ; } public void setDescription ( Description description ) { this . description = description ; } public String getShortName ( ) { return "node" ; } public T description ( String text ) { if ( description == null ) { description = new Description ( ) ; } description . setText ( text ) ; return ( T ) this ; } public T description ( String text , String lang ) { description ( text ) ; description . setLang ( lang ) ; return ( T ) this ; } public T id ( String id ) { setId ( id ) ; return ( T ) this ; } public String idOrCreate ( ) { if ( id == null ) { setId ( createId ( ) ) ; } return getId ( ) ; } protected String createId ( ) { String key = getShortName ( ) ; return key + getNodeCounter ( key ) . incrementAndGet ( ) ; } protected static synchronized AtomicInteger getNodeCounter ( String key ) { AtomicInteger answer = nodeCounters . get ( key ) ; if ( answer == null ) { answer = new AtomicInteger ( 0 ) ; nodeCounters . put ( key , answer ) ; } return answer ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . MessageListener ; import javax . jms . Session ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . MessageCreator ; public class EndpointMessageListener implements MessageListener { private static final transient Log LOG = LogFactory . getLog ( EndpointMessageListener . class ) ; private JmsEndpoint endpoint ; private Processor processor ; private JmsBinding binding ; private boolean eagerLoadingOfProperties ; private Destination replyToDestination ; private JmsOperations template ; private boolean disableReplyTo ; public EndpointMessageListener ( JmsEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; endpoint . getConfiguration ( ) . configure ( this ) ; } public void onMessage ( final Message message ) { RuntimeCamelException rce = null ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " consumer receiving JMS message: " + message ) ; } Destination replyDestination = getReplyToDestination ( message ) ; final JmsExchange exchange = createExchange ( message , replyDestination ) ; if ( eagerLoadingOfProperties ) { exchange . getIn ( ) . getHeaders ( ) ; } processor . process ( exchange ) ; final JmsMessage out = exchange . getOut ( false ) ; if ( exchange . getException ( ) != null ) { rce = new RuntimeCamelException ( exchange . getException ( ) ) ; } if ( rce == null && out != null && ! disableReplyTo ) { sendReply ( replyDestination , message , exchange , out ) ; } } catch ( Exception e ) { rce = new RuntimeCamelException ( e ) ; } if ( rce != null ) { LOG . warn ( endpoint + " consumer caught an exception while processing " + "JMS message: " + message , rce ) ; throw rce ; } } public JmsExchange createExchange ( Message message , Destination replyDestination ) { JmsExchange exchange = new JmsExchange ( endpoint . getCamelContext ( ) , endpoint . getExchangePattern ( ) , getBinding ( ) , message ) ; if ( replyDestination != null && ! disableReplyTo ) { exchange . setProperty ( "org.apache.camel.jms.replyDestination" , replyDestination ) ; exchange . setPattern ( ExchangePattern . InOut ) ; } return exchange ; } public JmsBinding getBinding ( ) { if ( binding == null ) { binding = new JmsBinding ( endpoint ) ; } return binding ; } public void setBinding ( JmsBinding binding ) { this . binding = binding ; } public boolean isEagerLoadingOfProperties ( ) { return eagerLoadingOfProperties ; } public void setEagerLoadingOfProperties ( boolean eagerLoadingOfProperties ) { this . eagerLoadingOfProperties = eagerLoadingOfProperties ; } public synchronized JmsOperations getTemplate ( ) { if ( template == null ) { template = endpoint . createInOnlyTemplate ( ) ; } return template ; } public void setTemplate ( JmsOperations template ) { this . template = template ; } public boolean isDisableReplyTo ( ) { return disableReplyTo ; } public void setDisableReplyTo ( boolean disableReplyTo ) { this . disableReplyTo = disableReplyTo ; } public Destination getReplyToDestination ( ) { return replyToDestination ; } public void setReplyToDestination ( Destination replyToDestination ) { this . replyToDestination = replyToDestination ; } protected void sendReply ( Destination replyDestination , final Message message , final JmsExchange exchange , final JmsMessage out ) { if ( replyDestination == null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Cannot send reply message as there is no replyDestination for: " + out ) ; } return ; } getTemplate ( ) . send ( replyDestination , new MessageCreator ( ) { public Message createMessage ( Session session ) throws JMSException { Message reply = endpoint . getBinding ( ) . makeJmsMessage ( exchange , out , session ) ; if ( endpoint . getConfiguration ( ) . isUseMessageIDAsCorrelationID ( ) ) { String messageID = exchange . getIn ( ) . getHeader ( "JMSMessageID" , String . class ) ; reply . setJMSCorrelationID ( messageID ) ; } else { String correlationID = message . getJMSCorrelationID ( ) ; if ( correlationID != null ) { reply . setJMSCorrelationID ( correlationID ) ; } } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " sending reply JMS message: " + reply ) ; } return reply ; } } ) ; } protected Destination getReplyToDestination ( Message message ) throws JMSException { Destination destination = replyToDestination ; if ( destination == null ) { destination = message . getJMSReplyTo ( ) ; } return destination ; } } 	0
package org . apache . camel . util ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . lang . annotation . Annotation ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class ObjectHelper { private static final transient Log LOG = LogFactory . getLog ( ObjectHelper . class ) ; private ObjectHelper ( ) { } @ Deprecated public static boolean equals ( Object a , Object b ) { return equal ( a , b ) ; } public static boolean equal ( Object a , Object b ) { if ( a == b ) { return true ; } if ( a instanceof byte [ ] && b instanceof byte [ ] ) { return equalByteArray ( ( byte [ ] ) a , ( byte [ ] ) b ) ; } return a != null && b != null && a . equals ( b ) ; } public static boolean equalByteArray ( byte [ ] a , byte [ ] b ) { if ( a == b ) { return true ; } if ( a != null && b != null && a . length == b . length ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] != b [ i ] ) { return false ; } } return true ; } return false ; } public static boolean isEqualToAny ( Object object , Object ... values ) { for ( Object value : values ) { if ( equal ( object , value ) ) { return true ; } } return false ; } public static int compare ( Object a , Object b ) { if ( a == b ) { return 0 ; } if ( a == null ) { return - 1 ; } if ( b == null ) { return 1 ; } if ( a instanceof Comparable ) { Comparable comparable = ( Comparable ) a ; return comparable . compareTo ( b ) ; } else { int answer = a . getClass ( ) . getName ( ) . compareTo ( b . getClass ( ) . getName ( ) ) ; if ( answer == 0 ) { answer = a . hashCode ( ) - b . hashCode ( ) ; } return answer ; } } public static Boolean toBoolean ( Object value ) { if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return "true" . equalsIgnoreCase ( value . toString ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } if ( value instanceof Integer ) { return ( Integer ) value > 0 ? Boolean . TRUE : Boolean . FALSE ; } return null ; } public static void notNull ( Object value , String name ) { if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified" ) ; } } public static String [ ] splitOnCharacter ( String value , String needle , int count ) { String rc [ ] = new String [ count ] ; rc [ 0 ] = value ; for ( int i = 1 ; i < count ; i ++ ) { String v = rc [ i - 1 ] ; int p = v . indexOf ( needle ) ; if ( p < 0 ) { return rc ; } rc [ i - 1 ] = v . substring ( 0 , p ) ; rc [ i ] = v . substring ( p + 1 ) ; } return rc ; } public static String removeStartingCharacters ( String text , char ch ) { int idx = 0 ; while ( text . charAt ( idx ) == ch ) { idx ++ ; } if ( idx > 0 ) { return text . substring ( idx ) ; } return text ; } public static String capitalize ( String text ) { if ( text == null ) { return null ; } int length = text . length ( ) ; if ( length == 0 ) { return text ; } String answer = text . substring ( 0 , 1 ) . toUpperCase ( ) ; if ( length > 1 ) { answer += text . substring ( 1 , length ) ; } return answer ; } @ SuppressWarnings ( "unchecked" ) public static boolean contains ( Object collectionOrArray , Object value ) { if ( collectionOrArray instanceof Collection ) { Collection collection = ( Collection ) collectionOrArray ; return collection . contains ( value ) ; } else if ( collectionOrArray instanceof String && value instanceof String ) { String str = ( String ) collectionOrArray ; String subStr = ( String ) value ; return str . contains ( subStr ) ; } else { Iterator iter = createIterator ( collectionOrArray ) ; while ( iter . hasNext ( ) ) { if ( equal ( value , iter . next ( ) ) ) { return true ; } } } return false ; } @ SuppressWarnings ( "unchecked" ) public static Iterator createIterator ( Object value ) { if ( value == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . iterator ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { List < Object > list = Arrays . asList ( ( Object [ ] ) value ) ; return list . iterator ( ) ; } else if ( value instanceof NodeList ) { final NodeList nodeList = ( NodeList ) value ; return new Iterator < Node > ( ) { int idx = - 1 ; public boolean hasNext ( ) { return ++ idx < nodeList . getLength ( ) ; } public Node next ( ) { return nodeList . item ( idx ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } else { return Collections . singletonList ( value ) . iterator ( ) ; } } public static boolean matches ( List list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof Boolean ) { Boolean flag = ( Boolean ) value ; return flag . booleanValue ( ) ; } else { return true ; } } return false ; } public static boolean isNotNullAndNonEmpty ( String text ) { return text != null && text . trim ( ) . length ( ) > 0 ; } public static boolean isNullOrBlank ( String text ) { return text == null || text . trim ( ) . length ( ) <= 0 ; } public static String getSystemProperty ( String name , String defaultValue ) { try { return System . getProperty ( name , defaultValue ) ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Caught security exception accessing system property: " + name + ". Reason: " + e , e ) ; } return defaultValue ; } } public static String name ( Class type ) { return type != null ? type . getName ( ) : null ; } public static String className ( Object value ) { return name ( value != null ? value . getClass ( ) : null ) ; } public static Class < ? > loadClass ( String name ) { return loadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } public static Class < ? > loadClass ( String name , ClassLoader loader ) { ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { try { return contextClassLoader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { try { return loader . loadClass ( name ) ; } catch ( ClassNotFoundException e1 ) { LOG . debug ( "Could not find class: " + name + ". Reason: " + e ) ; } } } return null ; } public static InputStream loadResourceAsStream ( String name ) { InputStream in = null ; ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { in = contextClassLoader . getResourceAsStream ( name ) ; } if ( in == null ) { in = ObjectHelper . class . getClassLoader ( ) . getResourceAsStream ( name ) ; } return in ; } public static Object invokeMethod ( Method method , Object instance , Object ... parameters ) { try { return method . invoke ( instance , parameters ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType ) { List < Method > answer = new ArrayList < Method > ( ) ; do { Method [ ] methods = type . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( method . getAnnotation ( annotationType ) != null ) { answer . add ( method ) ; } } type = type . getSuperclass ( ) ; } while ( type != null ) ; return answer ; } public static String asString ( Object [ ] objects ) { if ( objects == null ) { return "null" ; } else { StringBuffer buffer = new StringBuffer ( "{" ) ; int counter = 0 ; for ( Object object : objects ) { if ( counter ++ > 0 ) { buffer . append ( ", " ) ; } String text = ( object == null ) ? "null" : object . toString ( ) ; buffer . append ( text ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } } public static boolean isAssignableFrom ( Class a , Class b ) { a = convertPrimitiveTypeToWrapperType ( a ) ; b = convertPrimitiveTypeToWrapperType ( b ) ; return a . isAssignableFrom ( b ) ; } public static Class convertPrimitiveTypeToWrapperType ( Class type ) { Class rc = type ; if ( type . isPrimitive ( ) ) { if ( type == int . class ) { rc = Integer . class ; } else if ( type == long . class ) { rc = Long . class ; } else if ( type == double . class ) { rc = Double . class ; } else if ( type == float . class ) { rc = Float . class ; } else if ( type == short . class ) { rc = Short . class ; } else if ( type == byte . class ) { rc = Byte . class ; } } return rc ; } public static String getDefaultCharacterSet ( ) { return Charset . defaultCharset ( ) . name ( ) ; } public static String getPropertyName ( Method method ) { String propertyName = method . getName ( ) ; if ( propertyName . startsWith ( "set" ) && method . getParameterTypes ( ) . length == 1 ) { propertyName = propertyName . substring ( 3 , 4 ) . toLowerCase ( ) + propertyName . substring ( 4 ) ; } return propertyName ; } public static boolean hasAnnotation ( Annotation [ ] annotations , Class < ? > type ) { for ( Annotation annotation : annotations ) { if ( type . isInstance ( annotation ) ) { return true ; } } return false ; } public static void close ( Closeable closeable , String name , Log log ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException e ) { if ( log != null ) { log . warn ( "Could not close: " + name + ". Reason: " + e , e ) ; } } } } public static < T > T cast ( Class < T > toType , Object value ) { if ( toType == boolean . class ) { return ( T ) cast ( Boolean . class , value ) ; } else if ( toType . isPrimitive ( ) ) { Class newType = convertPrimitiveTypeToWrapperType ( toType ) ; if ( newType != toType ) { return ( T ) cast ( newType , value ) ; } } try { return toType . cast ( value ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( "Failed to convert: " + value + " to type: " + toType . getName ( ) + " due to: " + e , e ) ; } } public static < T > T newInstance ( Class < T > type ) { try { return type . newInstance ( ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static < T > T newInstance ( Class < ? > actualType , Class < T > expectedType ) { try { Object value = actualType . newInstance ( ) ; return cast ( expectedType , value ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isJavaIdentifier ( String name ) { if ( name == null ) { return false ; } int size = name . length ( ) ; if ( size < 1 ) { return false ; } if ( Character . isJavaIdentifierStart ( name . charAt ( 0 ) ) ) { for ( int i = 1 ; i < size ; i ++ ) { if ( ! Character . isJavaIdentifierPart ( name . charAt ( i ) ) ) { return false ; } } return true ; } return false ; } public static Object type ( Object bean ) { return bean != null ? bean . getClass ( ) : null ; } public static boolean evaluateValuePredicate ( Object value ) { if ( value instanceof Boolean ) { Boolean aBoolean = ( Boolean ) value ; return aBoolean . booleanValue ( ) ; } return value != null ; } } 	1
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public class ThrowFaultProcessor implements Processor { private Throwable fault ; public ThrowFaultProcessor ( Throwable fault ) { this . fault = fault ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getFault ( ) ; message . setBody ( fault ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; public class MethodInfo { private Class type ; private Method method ; private final List < ParameterInfo > parameters ; private final List < ParameterInfo > bodyParameters ; private final boolean hasCustomAnnotation ; private Expression parametersExpression ; public MethodInfo ( Class type , Method method , List < ParameterInfo > parameters , List < ParameterInfo > bodyParameters , boolean hasCustomAnnotation ) { this . type = type ; this . method = method ; this . parameters = parameters ; this . bodyParameters = bodyParameters ; this . hasCustomAnnotation = hasCustomAnnotation ; this . parametersExpression = createParametersExpression ( ) ; } public String toString ( ) { return method . toString ( ) ; } public MethodInvocation createMethodInvocation ( final Object pojo , final Exchange messageExchange ) { final Object [ ] arguments = ( Object [ ] ) parametersExpression . evaluate ( messageExchange ) ; return new MethodInvocation ( ) { public Method getMethod ( ) { return method ; } public Object [ ] getArguments ( ) { return arguments ; } public Object proceed ( ) throws Throwable { return invoke ( method , pojo , arguments , messageExchange ) ; } public Object getThis ( ) { return pojo ; } public AccessibleObject getStaticPart ( ) { return method ; } } ; } public Class getType ( ) { return type ; } public Method getMethod ( ) { return method ; } public Expression getParametersExpression ( ) { return parametersExpression ; } public List < ParameterInfo > getBodyParameters ( ) { return bodyParameters ; } public Class getBodyParameterType ( ) { ParameterInfo parameterInfo = bodyParameters . get ( 0 ) ; return parameterInfo . getType ( ) ; } public boolean bodyParameterMatches ( Class bodyType ) { Class actualType = getBodyParameterType ( ) ; return actualType != null && ObjectHelper . isAssignableFrom ( bodyType , actualType ) ; } public List < ParameterInfo > getParameters ( ) { return parameters ; } public boolean hasBodyParameter ( ) { return ! bodyParameters . isEmpty ( ) ; } public boolean isHasCustomAnnotation ( ) { return hasCustomAnnotation ; } public boolean isReturnTypeVoid ( ) { return method . getReturnType ( ) . getName ( ) . equals ( "void" ) ; } protected Object invoke ( Method mth , Object pojo , Object [ ] arguments , Exchange exchange ) throws IllegalAccessException , InvocationTargetException { return mth . invoke ( pojo , arguments ) ; } protected Expression createParametersExpression ( ) { final int size = parameters . size ( ) ; final Expression [ ] expressions = new Expression [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Expression parameterExpression = parameters . get ( i ) . getExpression ( ) ; expressions [ i ] = parameterExpression ; } return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object [ ] answer = new Object [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Object value = expressions [ i ] . evaluate ( exchange ) ; Class expectedType = parameters . get ( i ) . getType ( ) ; value = ExchangeHelper . convertToType ( exchange , expectedType , value ) ; answer [ i ] = value ; } return answer ; } @ Override public String toString ( ) { return "ParametersExpression: " + Arrays . asList ( expressions ) ; } } ; } } 	1
package org . apache . camel . component . event ; import org . apache . camel . Exchange ; import org . springframework . context . ApplicationEvent ; public class CamelEvent extends ApplicationEvent { private final Exchange exchange ; public CamelEvent ( EventEndpoint source , Exchange exchange ) { super ( source ) ; this . exchange = exchange ; } @ Override public EventEndpoint getSource ( ) { return ( EventEndpoint ) super . getSource ( ) ; } public Exchange getExchange ( ) { return exchange ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . bean . RegistryBean ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "bean" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class BeanRef extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlAttribute ( required = false ) private String method ; @ XmlAttribute ( required = false ) private Class beanType ; @ XmlTransient private Object bean ; public BeanRef ( ) { } public BeanRef ( String ref ) { this . ref = ref ; } public BeanRef ( String ref , String method ) { this . ref = ref ; this . method = method ; } @ Override public String toString ( ) { return "Bean[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "bean" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public void setBean ( Object bean ) { this . bean = bean ; } public Class getBeanType ( ) { return beanType ; } public void setBeanType ( Class beanType ) { this . beanType = beanType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { BeanProcessor answer ; if ( ref != null ) { answer = new BeanProcessor ( new RegistryBean ( routeContext . getCamelContext ( ) , ref ) ) ; } else { if ( bean == null ) { ObjectHelper . notNull ( beanType , "bean, ref or beanType" ) ; bean = CamelContextHelper . newInstance ( routeContext . getCamelContext ( ) , beanType ) ; } answer = new BeanProcessor ( bean , routeContext . getCamelContext ( ) ) ; } if ( method != null ) { answer . setMethod ( method ) ; } return answer ; } @ Override public String getLabel ( ) { if ( ref != null ) { String methodText = "" ; if ( method != null ) { methodText = " method: " + method ; } return "ref: " + ref + methodText ; } else if ( bean != null ) { return bean . toString ( ) ; } else if ( beanType != null ) { return beanType . getName ( ) ; } else { return "" ; } } } 	1
package org . apache . camel . component . timer ; import java . util . Timer ; import java . util . TimerTask ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TimerConsumer extends DefaultConsumer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( TimerConsumer . class ) ; private final TimerEndpoint endpoint ; private TimerTask task ; public TimerConsumer ( TimerEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { task = new TimerTask ( ) { @ Override public void run ( ) { sendTimerExchange ( ) ; } } ; Timer timer = endpoint . getTimer ( ) ; configureTask ( task , timer ) ; } @ Override protected void doStop ( ) throws Exception { task . cancel ( ) ; } protected void configureTask ( TimerTask task , Timer timer ) { if ( endpoint . isFixedRate ( ) ) { if ( endpoint . getTime ( ) != null ) { timer . scheduleAtFixedRate ( task , endpoint . getTime ( ) , endpoint . getPeriod ( ) ) ; } else { timer . scheduleAtFixedRate ( task , endpoint . getDelay ( ) , endpoint . getPeriod ( ) ) ; } } else { if ( endpoint . getTime ( ) != null ) { if ( endpoint . getPeriod ( ) >= 0 ) { timer . schedule ( task , endpoint . getTime ( ) , endpoint . getPeriod ( ) ) ; } else { timer . schedule ( task , endpoint . getTime ( ) ) ; } } else { if ( endpoint . getPeriod ( ) >= 0 ) { timer . schedule ( task , endpoint . getDelay ( ) , endpoint . getPeriod ( ) ) ; } else { timer . schedule ( task , endpoint . getDelay ( ) ) ; } } } } protected void sendTimerExchange ( ) { Exchange exchange = endpoint . createExchange ( ) ; exchange . setProperty ( "org.apache.camel.timer.name" , endpoint . getTimerName ( ) ) ; exchange . setProperty ( "org.apache.camel.timer.time" , endpoint . getTime ( ) ) ; exchange . setProperty ( "org.apache.camel.timer.period" , endpoint . getPeriod ( ) ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { LOG . error ( "Caught: " + e , e ) ; } } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . Service ; import org . apache . camel . util . ServiceHelper ; public abstract class ServiceSupport implements Service { private static int threadCounter ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private AtomicBoolean starting = new AtomicBoolean ( false ) ; private AtomicBoolean stopping = new AtomicBoolean ( false ) ; private AtomicBoolean stopped = new AtomicBoolean ( false ) ; private Collection childServices ; public void start ( ) throws Exception { if ( started . compareAndSet ( false , true ) ) { starting . set ( true ) ; try { if ( childServices != null ) { ServiceHelper . startServices ( childServices ) ; } doStart ( ) ; } finally { starting . set ( false ) ; } } } public void stop ( ) throws Exception { if ( started . get ( ) && stopping . compareAndSet ( false , true ) ) { try { doStop ( ) ; } finally { if ( childServices != null ) { ServiceHelper . stopServices ( childServices ) ; } stopped . set ( true ) ; started . set ( false ) ; stopping . set ( false ) ; } } } public boolean isStarted ( ) { return started . get ( ) ; } public boolean isStarting ( ) { return starting . get ( ) ; } public boolean isStopping ( ) { return stopping . get ( ) ; } protected boolean isRunAllowed ( ) { return ! ( stopping . get ( ) || stopped . get ( ) ) ; } public boolean isStopped ( ) { return stopped . get ( ) ; } protected abstract void doStart ( ) throws Exception ; protected abstract void doStop ( ) throws Exception ; protected String getThreadName ( String prefix ) { return prefix + " thread:" + nextThreadCounter ( ) ; } protected static synchronized int nextThreadCounter ( ) { return ++ threadCounter ; } protected void addChildService ( Object childService ) { if ( childServices == null ) { childServices = new ArrayList ( ) ; } childServices . add ( childService ) ; } protected boolean removeChildService ( Object childService ) { if ( childServices != null ) { return childServices . remove ( childService ) ; } else { return false ; } } } 	1
package org . apache . camel . impl ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . TimeUnit ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . processor . Logger ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class EventDrivenPollingConsumer < E extends Exchange > extends PollingConsumerSupport < E > implements Processor { private static final transient Log LOG = LogFactory . getLog ( EventDrivenPollingConsumer . class ) ; private BlockingQueue < E > queue ; private ExceptionHandler interuptedExceptionHandler = new LoggingExceptionHandler ( new Logger ( LOG ) ) ; private Consumer < E > consumer ; public EventDrivenPollingConsumer ( Endpoint < E > endpoint ) { this ( endpoint , new ArrayBlockingQueue < E > ( 1000 ) ) ; } public EventDrivenPollingConsumer ( Endpoint < E > endpoint , BlockingQueue < E > queue ) { super ( endpoint ) ; this . queue = queue ; } public E receiveNoWait ( ) { return receive ( 0 ) ; } public E receive ( ) { while ( isRunAllowed ( ) ) { try { return queue . take ( ) ; } catch ( InterruptedException e ) { handleInteruptedException ( e ) ; } } return null ; } public E receive ( long timeout ) { try { return queue . poll ( timeout , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { handleInteruptedException ( e ) ; return null ; } } public void process ( Exchange exchange ) throws Exception { queue . offer ( ( E ) exchange ) ; } public ExceptionHandler getInteruptedExceptionHandler ( ) { return interuptedExceptionHandler ; } public void setInteruptedExceptionHandler ( ExceptionHandler interuptedExceptionHandler ) { this . interuptedExceptionHandler = interuptedExceptionHandler ; } protected void handleInteruptedException ( InterruptedException e ) { getInteruptedExceptionHandler ( ) . handleException ( e ) ; } protected void doStart ( ) throws Exception { consumer = getEndpoint ( ) . createConsumer ( this ) ; consumer . start ( ) ; } protected void doStop ( ) throws Exception { if ( consumer != null ) { try { consumer . stop ( ) ; } finally { consumer = null ; } } } } 	0
package org . apache . camel . converter . stream ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public interface StreamCache { } 	1
package org . apache . camel . bam ; import java . util . Date ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . camel . builder . ProcessorFactory ; import org . apache . camel . impl . EventDrivenConsumerRoute ; public class ActivityBuilder implements ProcessorFactory { private ProcessBuilder processBuilder ; private Endpoint endpoint ; private ActivityRules activityRules ; private Expression correlationExpression ; public ActivityBuilder ( ProcessBuilder processBuilder , Endpoint endpoint ) { this . processBuilder = processBuilder ; this . endpoint = endpoint ; this . activityRules = new ActivityRules ( processBuilder ) ; this . activityRules . setActivityName ( endpoint . getEndpointUri ( ) ) ; } public Endpoint getEndpoint ( ) { return endpoint ; } public Processor createProcessor ( ) throws Exception { return processBuilder . createActivityProcessor ( this ) ; } public Route createRoute ( ) throws Exception { Processor processor = createProcessor ( ) ; if ( processor == null ) { throw new IllegalArgumentException ( "No processor created for ActivityBuilder: " + this ) ; } return new EventDrivenConsumerRoute ( getEndpoint ( ) , processor ) ; } public ActivityBuilder correlate ( Expression correlationExpression ) { this . correlationExpression = correlationExpression ; return this ; } public ActivityBuilder name ( String name ) { activityRules . setActivityName ( name ) ; return this ; } public TimeExpression starts ( ) { return new TimeExpression ( this , ActivityLifecycle . Started ) { public Date evaluate ( ProcessInstance instance , ActivityState state ) { return state . getTimeStarted ( ) ; } } ; } public TimeExpression completes ( ) { return new TimeExpression ( this , ActivityLifecycle . Completed ) { public Date evaluate ( ProcessInstance instance , ActivityState state ) { return state . getTimeCompleted ( ) ; } } ; } public Expression getCorrelationExpression ( ) { return correlationExpression ; } public ActivityRules getActivityRules ( ) { return activityRules ; } public ProcessBuilder getProcessBuilder ( ) { return processBuilder ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import javax . xml . transform . stream . StreamSource ; public class BytesSource extends StreamSource { private byte [ ] data ; public BytesSource ( byte [ ] data ) { this . data = data ; } public BytesSource ( byte [ ] data , String systemId ) { this . data = data ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { return new ByteArrayInputStream ( data ) ; } public Reader getReader ( ) { return new InputStreamReader ( getInputStream ( ) ) ; } public byte [ ] getData ( ) { return data ; } public String toString ( ) { return "BytesSource[" + new String ( data ) + "]" ; } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/spring" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . model . language ; 	0
package org . apache . camel . component . bean ; import java . lang . reflect . Proxy ; import org . apache . camel . Endpoint ; import org . apache . camel . Producer ; public final class ProxyHelper { private ProxyHelper ( ) { } public static Object createProxy ( final Endpoint endpoint , ClassLoader cl , Class interfaces [ ] ) throws Exception { final Producer producer = endpoint . createProducer ( ) ; return Proxy . newProxyInstance ( cl , interfaces , new CamelInvocationHandler ( endpoint , producer ) ) ; } public static Object createProxy ( Endpoint endpoint , Class interfaces [ ] ) throws Exception { if ( interfaces . length < 1 ) { throw new IllegalArgumentException ( "You must provide at least 1 interface class." ) ; } return createProxy ( endpoint , interfaces [ 0 ] . getClassLoader ( ) , interfaces ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , ClassLoader cl , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , cl , new Class [ ] { interfaceClass } ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , new Class [ ] { interfaceClass } ) ; } } 	1
package org . apache . camel . processor . resequencer ; import java . util . Comparator ; public interface SequenceElementComparator < E > extends Comparator < E > { boolean predecessor ( E o1 , E o2 ) ; boolean successor ( E o1 , E o2 ) ; } 	0
package org . apache . camel . model ; import java . util . Collection ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Aggregator ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "aggregator" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class AggregatorType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private AggregationCollection aggregationCollection ; @ XmlAttribute ( required = false ) private Integer batchSize ; @ XmlAttribute ( required = false ) private Long batchTimeout ; @ XmlAttribute ( required = false ) private String strategyRef ; @ XmlElement ( name = "completedPredicate" , required = false ) private CompletedPredicate completedPredicate ; public AggregatorType ( ) { } public AggregatorType ( Expression correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( ExpressionType correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { super ( correlationExpression ) ; this . aggregationStrategy = aggregationStrategy ; } @ Override public String toString ( ) { return "Aggregator[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "aggregator" ; } @ SuppressWarnings ( "unchecked" ) @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routes , aggregator ) ; } private void doAddRoute ( RouteContext routeContext , Collection < Route > routes , final Aggregator aggregator ) throws Exception { Route route = new Route < Exchange > ( aggregator . getEndpoint ( ) , aggregator ) { @ Override public String toString ( ) { return "AggregatorRoute[" + getEndpoint ( ) + " -> " + aggregator . getProcessor ( ) + "]" ; } } ; routes . add ( route ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routeContext . getCamelContext ( ) . getRoutes ( ) , aggregator ) ; routeContext . setIsRouteAdded ( true ) ; return aggregator ; } protected Aggregator createAggregator ( RouteContext routeContext ) throws Exception { Endpoint from = routeContext . getEndpoint ( ) ; final Processor processor = routeContext . createProcessor ( this ) ; final Aggregator aggregator ; if ( aggregationCollection != null ) { aggregator = new Aggregator ( from , processor , aggregationCollection ) ; } else { AggregationStrategy strategy = getAggregationStrategy ( ) ; if ( strategy == null && strategyRef != null ) { strategy = routeContext . lookup ( strategyRef , AggregationStrategy . class ) ; } if ( strategy == null ) { strategy = new UseLatestAggregationStrategy ( ) ; } Expression aggregateExpression = getExpression ( ) . createExpression ( routeContext ) ; Predicate predicate = null ; if ( completedPredicate != null ) { predicate = completedPredicate . createPredicate ( routeContext ) ; } if ( predicate != null ) { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy , predicate ) ; } else { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy ) ; } } if ( batchSize != null ) { aggregator . setBatchSize ( batchSize ) ; } if ( batchTimeout != null ) { aggregator . setBatchTimeout ( batchTimeout ) ; } return aggregator ; } public AggregationCollection getAggregationCollection ( ) { return aggregationCollection ; } public void setAggregationCollection ( AggregationCollection aggregationCollection ) { this . aggregationCollection = aggregationCollection ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public Integer getBatchSize ( ) { return batchSize ; } public void setBatchSize ( Integer batchSize ) { this . batchSize = batchSize ; } public Long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( Long batchTimeout ) { this . batchTimeout = batchTimeout ; } public String getStrategyRef ( ) { return strategyRef ; } public void setStrategyRef ( String strategyRef ) { this . strategyRef = strategyRef ; } public CompletedPredicate getCompletePredicate ( ) { return completedPredicate ; } public void setCompletePredicate ( CompletedPredicate completedPredicate ) { this . completedPredicate = completedPredicate ; } public AggregatorType batchSize ( int batchSize ) { setBatchSize ( batchSize ) ; return this ; } public AggregatorType batchTimeout ( long batchTimeout ) { setBatchTimeout ( batchTimeout ) ; return this ; } public ExpressionClause < AggregatorType > completedPredicate ( ) { checkNoCompletedPredicate ( ) ; ExpressionClause < AggregatorType > clause = new ExpressionClause < AggregatorType > ( this ) ; completedPredicate = new CompletedPredicate ( clause ) ; return clause ; } public AggregatorType completedPredicate ( Predicate predicate ) { checkNoCompletedPredicate ( ) ; completedPredicate = new CompletedPredicate ( predicate ) ; return this ; } protected void checkNoCompletedPredicate ( ) { if ( completedPredicate != null ) { throw new IllegalArgumentException ( "There already is a completedPredicate defined for this aggregator: " + this ) ; } } } 	1
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; public class ProcessorEndpoint extends DefaultPollingEndpoint < Exchange > { private Processor processor ; protected ProcessorEndpoint ( ) { } protected ProcessorEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public ProcessorEndpoint ( String endpointUri , CamelContext context , Processor processor ) { super ( endpointUri , context ) ; this . processor = processor ; } public ProcessorEndpoint ( String endpointUri , Component component , Processor processor ) { super ( endpointUri , component ) ; this . processor = processor ; } public ProcessorEndpoint ( String endpointUri , Processor processor ) { super ( endpointUri ) ; this . processor = processor ; } protected ProcessorEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) throws Exception { onExchange ( exchange ) ; } } ; } @ Override public PollingConsumer < Exchange > createPollingConsumer ( ) throws Exception { return new ProcessorPollingConsumer ( this , getProcessor ( ) ) ; } public Processor getProcessor ( ) throws Exception { if ( processor == null ) { processor = createProcessor ( ) ; } return processor ; } protected Processor createProcessor ( ) throws Exception { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { onExchange ( exchange ) ; } } ; } protected void onExchange ( Exchange exchange ) throws Exception { getProcessor ( ) . process ( exchange ) ; } public boolean isSingleton ( ) { return true ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Method ; public interface MethodInvocation { Method getMethod ( ) ; Object [ ] getArguments ( ) ; Object proceed ( ) throws Throwable ; Object getThis ( ) ; AccessibleObject getStaticPart ( ) ; } 	1
package org . apache . camel . processor . resequencer ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public interface ExpressionResultComparator < E extends Exchange > extends SequenceElementComparator < E > { void setExpressions ( List < Expression > expressions ) ; } 	0
package org . apache . camel . util ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLDecoder ; import java . util . Arrays ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . jar . JarEntry ; import java . util . jar . JarInputStream ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResolverUtil < T > { protected static final transient Log LOG = LogFactory . getLog ( ResolverUtil . class ) ; public static interface Test { boolean matches ( Class type ) ; } public static class IsA implements Test { private Class parent ; public IsA ( Class parentType ) { this . parent = parentType ; } public boolean matches ( Class type ) { return type != null && parent . isAssignableFrom ( type ) ; } @ Override public String toString ( ) { return "is assignable to " + parent . getSimpleName ( ) ; } } public static class AnnotatedWith implements Test { private Class < ? extends Annotation > annotation ; public AnnotatedWith ( Class < ? extends Annotation > annotation ) { this . annotation = annotation ; } public boolean matches ( Class type ) { return type != null && type . isAnnotationPresent ( annotation ) ; } @ Override public String toString ( ) { return "annotated with @" + annotation . getSimpleName ( ) ; } } private Set < Class < ? extends T > > matches = new HashSet < Class < ? extends T > > ( ) ; private Set < ClassLoader > classLoaders ; public Set < Class < ? extends T > > getClasses ( ) { return matches ; } public Set < ClassLoader > getClassLoaders ( ) { if ( classLoaders == null ) { classLoaders = new HashSet < ClassLoader > ( ) ; classLoaders . add ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; classLoaders . add ( ResolverUtil . class . getClassLoader ( ) ) ; } return classLoaders ; } public void setClassLoaders ( Set < ClassLoader > classLoaders ) { this . classLoaders = classLoaders ; } public void findImplementations ( Class parent , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for implementations of " + parent . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new IsA ( parent ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void findAnnotated ( Class < ? extends Annotation > annotation , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for annotations of " + annotation . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new AnnotatedWith ( annotation ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void find ( Test test , String packageName ) { packageName = packageName . replace ( '.' , '/' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; for ( ClassLoader classLoader : set ) { find ( test , packageName , classLoader ) ; } } protected void find ( Test test , String packageName , ClassLoader loader ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching for: " + test + " in package: " + packageName + " using classloader: " + loader . getClass ( ) . getName ( ) ) ; } if ( loader . getClass ( ) . getName ( ) . endsWith ( "org.apache.felix.framework.searchpolicy.ContentClassLoader" ) ) { LOG . trace ( "This is not an URL classloader, skipping" ) ; return ; } try { Method mth = loader . getClass ( ) . getMethod ( "getBundle" , new Class [ ] { } ) ; if ( mth != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from osgi buindle using classloader: " + loader ) ; } loadImplementationsInBundle ( test , packageName , loader , mth ) ; return ; } } catch ( NoSuchMethodException e ) { LOG . trace ( "It's not an osgi bundle classloader" ) ; } Enumeration < URL > urls ; try { urls = getResources ( loader , packageName ) ; if ( ! urls . hasMoreElements ( ) ) { LOG . trace ( "No URLs returned by classloader" ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read package: " + packageName , ioe ) ; return ; } while ( urls . hasMoreElements ( ) ) { URL url = null ; try { url = urls . nextElement ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "URL from classloader: " + url ) ; } String urlPath = url . getFile ( ) ; urlPath = URLDecoder . decode ( urlPath , "UTF-8" ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Decoded urlPath: " + urlPath ) ; } if ( urlPath . startsWith ( "file:" ) ) { urlPath = urlPath . substring ( 5 ) ; } if ( urlPath . startsWith ( "bundle:" ) ) { LOG . trace ( "It's a virtual osgi bundle, skipping" ) ; continue ; } if ( urlPath . indexOf ( '!' ) > 0 ) { urlPath = urlPath . substring ( 0 , urlPath . indexOf ( '!' ) ) ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Scanning for classes in [" + urlPath + "] matching criteria: " + test ) ; } File file = new File ( urlPath ) ; if ( file . isDirectory ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from directory: " + file ) ; } loadImplementationsInDirectory ( test , packageName , file ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from jar: " + file ) ; } loadImplementationsInJar ( test , packageName , file ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read entries in url: " + url , ioe ) ; } } } protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Getting resource URL for package: " + packageName + " with classloader: " + loader ) ; } return loader . getResources ( packageName ) ; } private void loadImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { Set < String > urls = OsgiUtil . getImplementationsInBundle ( test , packageName , loader , mth ) ; if ( urls != null ) { for ( String url : urls ) { addIfMatching ( test , url ) ; } } } private static final class OsgiUtil { private OsgiUtil ( ) { } static Set < String > getImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { try { org . osgi . framework . Bundle bundle = ( org . osgi . framework . Bundle ) mth . invoke ( loader ) ; org . osgi . framework . Bundle [ ] bundles = bundle . getBundleContext ( ) . getBundles ( ) ; Set < String > urls = new HashSet < String > ( ) ; for ( org . osgi . framework . Bundle bd : bundles ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching in bundle:" + bd ) ; } Enumeration < URL > paths = bd . findEntries ( "/" + packageName , "*.class" , true ) ; while ( paths != null && paths . hasMoreElements ( ) ) { URL path = paths . nextElement ( ) ; urls . add ( path . getPath ( ) . substring ( 1 ) ) ; } } return urls ; } catch ( Throwable t ) { LOG . error ( "Could not search osgi bundles for classes matching criteria: " + test + "due to an Exception: " + t . getMessage ( ) ) ; return null ; } } } private void loadImplementationsInDirectory ( Test test , String parent , File location ) { File [ ] files = location . listFiles ( ) ; StringBuilder builder = null ; for ( File file : files ) { builder = new StringBuilder ( 100 ) ; String name = file . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; builder . append ( parent ) . append ( "/" ) . append ( name ) ; String packageOrClass = parent == null ? name : builder . toString ( ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageOrClass , file ) ; } else if ( name . endsWith ( ".class" ) ) { addIfMatching ( test , packageOrClass ) ; } } } } private void loadImplementationsInJar ( Test test , String parent , File jarfile ) { JarInputStream jarStream = null ; try { jarStream = new JarInputStream ( new FileInputStream ( jarfile ) ) ; JarEntry entry ; while ( ( entry = jarStream . getNextJarEntry ( ) ) != null ) { String name = entry . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; if ( ! entry . isDirectory ( ) && name . startsWith ( parent ) && name . endsWith ( ".class" ) ) { addIfMatching ( test , name ) ; } } } } catch ( IOException ioe ) { LOG . error ( "Could not search jar file '" + jarfile + "' for classes matching criteria: " + test + " due to an IOException: " + ioe . getMessage ( ) , ioe ) ; } finally { ObjectHelper . close ( jarStream , jarfile . getPath ( ) , LOG ) ; } } protected void addIfMatching ( Test test , String fqn ) { try { String externalName = fqn . substring ( 0 , fqn . indexOf ( '.' ) ) . replace ( '/' , '.' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; boolean found = false ; for ( ClassLoader classLoader : set ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Testing for class " + externalName + " matches criteria [" + test + "]" ) ; } try { Class type = classLoader . loadClass ( externalName ) ; if ( test . matches ( type ) ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Found class: " + type + " in classloader: " + classLoader ) ; } matches . add ( ( Class < T > ) type ) ; } found = true ; break ; } catch ( ClassNotFoundException e ) { LOG . debug ( "Could not find class '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } catch ( NoClassDefFoundError e ) { LOG . debug ( "Could not find the class defintion '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } } if ( ! found ) { LOG . warn ( "Could not find class '" + fqn + "' in any classloaders: " + set ) ; } } catch ( Throwable t ) { LOG . warn ( "Could not examine class '" + fqn + "' due to a " + t . getClass ( ) . getName ( ) + " with message: " + t . getMessage ( ) , t ) ; } } } 	1
package org . apache . camel . impl ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledFuture ; import java . util . concurrent . TimeUnit ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class ScheduledPollConsumer < E extends Exchange > extends DefaultConsumer < E > implements Runnable { private static final transient Log LOG = LogFactory . getLog ( ScheduledPollConsumer . class ) ; private final ScheduledExecutorService executor ; private long initialDelay = 1000 ; private long delay = 500 ; private TimeUnit timeUnit = TimeUnit . MILLISECONDS ; private boolean useFixedDelay ; private ScheduledFuture < ? > future ; public ScheduledPollConsumer ( DefaultEndpoint < E > endpoint , Processor processor ) { this ( endpoint , processor , endpoint . getExecutorService ( ) ) ; } public ScheduledPollConsumer ( Endpoint < E > endpoint , Processor processor , ScheduledExecutorService executor ) { super ( endpoint , processor ) ; this . executor = executor ; if ( executor == null ) { throw new IllegalArgumentException ( "A non null ScheduledExecutorService must be provided." ) ; } } public void run ( ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Starting to poll: " + this . getEndpoint ( ) ) ; } try { poll ( ) ; } catch ( Exception e ) { LOG . warn ( "An exception occured while polling: " + this . getEndpoint ( ) + ": " + e . getMessage ( ) , e ) ; } } public long getInitialDelay ( ) { return initialDelay ; } public void setInitialDelay ( long initialDelay ) { this . initialDelay = initialDelay ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } public TimeUnit getTimeUnit ( ) { return timeUnit ; } public void setTimeUnit ( TimeUnit timeUnit ) { this . timeUnit = timeUnit ; } public boolean isUseFixedDelay ( ) { return useFixedDelay ; } public void setUseFixedDelay ( boolean useFixedDelay ) { this . useFixedDelay = useFixedDelay ; } protected abstract void poll ( ) throws Exception ; @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( isUseFixedDelay ( ) ) { future = executor . scheduleWithFixedDelay ( this , getInitialDelay ( ) , getDelay ( ) , getTimeUnit ( ) ) ; } else { future = executor . scheduleAtFixedRate ( this , getInitialDelay ( ) , getDelay ( ) , getTimeUnit ( ) ) ; } } @ Override protected void doStop ( ) throws Exception { if ( future != null ) { future . cancel ( false ) ; } super . doStop ( ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . UnmarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "unmarshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class UnmarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public UnmarshalType ( ) { } public UnmarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public UnmarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "unmarshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new UnmarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . language . ognl ; import ognl . Ognl ; import ognl . OgnlContext ; import ognl . OgnlException ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . impl . ExpressionSupport ; import org . apache . camel . language . ExpressionEvaluationException ; import org . apache . camel . language . IllegalSyntaxException ; public class OgnlExpression extends ExpressionSupport < Exchange > { private final String expressionString ; private final Class < ? > type ; private Object expression ; public OgnlExpression ( OgnlLanguage language , String expressionString , Class < ? > type ) { this . expressionString = expressionString ; this . type = type ; try { this . expression = Ognl . parseExpression ( expressionString ) ; } catch ( OgnlException e ) { throw new IllegalSyntaxException ( language , expressionString ) ; } } public static OgnlExpression ognl ( String expression ) { return new OgnlExpression ( new OgnlLanguage ( ) , expression , Object . class ) ; } public Object evaluate ( Exchange exchange ) { OgnlContext oglContext = new OgnlContext ( ) ; try { return Ognl . getValue ( expression , oglContext , new RootObject ( exchange ) ) ; } catch ( OgnlException e ) { throw new ExpressionEvaluationException ( this , exchange , e ) ; } } protected String assertionFailureMessage ( Exchange exchange ) { return expressionString ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class BuilderSupport { private CamelContext context ; private ErrorHandlerBuilder errorHandlerBuilder ; private boolean inheritErrorHandler = true ; protected BuilderSupport ( CamelContext context ) { this . context = context ; } protected BuilderSupport ( BuilderSupport parent ) { this . context = parent . getContext ( ) ; this . inheritErrorHandler = parent . inheritErrorHandler ; if ( inheritErrorHandler && parent . errorHandlerBuilder != null ) { this . errorHandlerBuilder = parent . errorHandlerBuilder . copy ( ) ; } } public ValueBuilder header ( String name ) { return Builder . header ( name ) ; } public ValueBuilder body ( ) { return Builder . body ( ) ; } public < T > ValueBuilder body ( Class < T > type ) { return Builder . bodyAs ( type ) ; } public ValueBuilder outBody ( ) { return Builder . outBody ( ) ; } public < T > ValueBuilder outBody ( Class < T > type ) { return Builder . outBodyAs ( type ) ; } public ValueBuilder faultBody ( ) { return Builder . faultBody ( ) ; } public < T > ValueBuilder faultBodyAs ( Class < T > type ) { return Builder . faultBodyAs ( type ) ; } public ValueBuilder systemProperty ( String name ) { return Builder . systemProperty ( name ) ; } public ValueBuilder systemProperty ( String name , String defaultValue ) { return Builder . systemProperty ( name , defaultValue ) ; } public ValueBuilder constant ( Object value ) { return Builder . constant ( value ) ; } public Endpoint endpoint ( String uri ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; Endpoint endpoint = getContext ( ) . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public < T extends Endpoint > T endpoint ( String uri , Class < T > type ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; T endpoint = getContext ( ) . getEndpoint ( uri , type ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public List < Endpoint > endpoints ( String ... uris ) throws NoSuchEndpointException { List < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; for ( String uri : uris ) { endpoints . add ( endpoint ( uri ) ) ; } return endpoints ; } public List < Endpoint > endpoints ( Endpoint ... endpoints ) { List < Endpoint > answer = new ArrayList < Endpoint > ( ) ; answer . addAll ( Arrays . asList ( endpoints ) ) ; return answer ; } public NoErrorHandlerBuilder noErrorHandler ( ) { return new NoErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( ) { return new LoggingErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( String log ) { return loggingErrorHandler ( LogFactory . getLog ( log ) ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log ) { return new LoggingErrorHandlerBuilder ( log ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log , LoggingLevel level ) { return new LoggingErrorHandlerBuilder ( log , level ) ; } public DeadLetterChannelBuilder deadLetterChannel ( ) { return new DeadLetterChannelBuilder ( ) ; } public DeadLetterChannelBuilder deadLetterChannel ( String deadLetterUri ) { return deadLetterChannel ( endpoint ( deadLetterUri ) ) ; } public DeadLetterChannelBuilder deadLetterChannel ( Endpoint deadLetterEndpoint ) { return new DeadLetterChannelBuilder ( new SendProcessor ( deadLetterEndpoint ) ) ; } public CamelContext getContext ( ) { return context ; } public void setContext ( CamelContext context ) { this . context = context ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public boolean isInheritErrorHandler ( ) { return inheritErrorHandler ; } public void setInheritErrorHandler ( boolean inheritErrorHandler ) { this . inheritErrorHandler = inheritErrorHandler ; } } 	1
package org . apache . camel . impl . converter ; public interface TypeConverterLoader { void load ( TypeConverterRegistry registry ) throws Exception ; } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ThreadProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "thread" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThreadType extends ProcessorType < ProcessorType > { @ XmlAttribute ( required = false ) private Integer coreSize = 1 ; @ XmlAttribute ( required = false ) private Boolean daemon = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Long keepAliveTime ; @ XmlAttribute ( required = false ) private Integer maxSize = 1 ; @ XmlAttribute ( required = false ) private String name = "Thread Processor" ; @ XmlAttribute ( required = false ) private Integer priority = Thread . NORM_PRIORITY ; @ XmlAttribute ( required = false ) private Long stackSize ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private BlockingQueue < Runnable > taskQueue ; @ XmlTransient private ThreadGroup threadGroup ; @ XmlTransient private ThreadPoolExecutor executor ; public ThreadType ( ) { } public ThreadType ( int coreSize ) { this . coreSize = coreSize ; this . maxSize = coreSize ; } public ThreadType ( ThreadPoolExecutor executor ) { this . executor = executor ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } @ Override public String toString ( ) { return "Thread[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "thread" ; } @ Override public String getLabel ( ) { return "coreSize=" + coreSize ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ThreadProcessor thread = new ThreadProcessor ( ) ; thread . setExecutor ( executor ) ; if ( coreSize != null ) { thread . setCoreSize ( coreSize ) ; } if ( daemon != null ) { thread . setDaemon ( daemon ) ; } if ( keepAliveTime != null ) { thread . setKeepAliveTime ( keepAliveTime ) ; } if ( maxSize != null ) { thread . setMaxSize ( maxSize ) ; } thread . setName ( name ) ; thread . setPriority ( priority ) ; if ( stackSize != null ) { thread . setStackSize ( stackSize ) ; } thread . setTaskQueue ( taskQueue ) ; thread . setThreadGroup ( threadGroup ) ; ArrayList < Processor > pipe = new ArrayList < Processor > ( 2 ) ; pipe . add ( thread ) ; pipe . add ( createOutputsProcessor ( routeContext , outputs ) ) ; return new Pipeline ( pipe ) ; } public ThreadType coreSize ( int coreSize ) { setCoreSize ( coreSize ) ; return this ; } public ThreadType daemon ( boolean daemon ) { setDaemon ( daemon ) ; return this ; } public ThreadType keepAliveTime ( long keepAliveTime ) { setKeepAliveTime ( keepAliveTime ) ; return this ; } public ThreadType maxSize ( int maxSize ) { setMaxSize ( maxSize ) ; return this ; } public ThreadType name ( String name ) { setName ( name ) ; return this ; } public ThreadType priority ( int priority ) { setPriority ( priority ) ; return this ; } public ThreadType stackSize ( long stackSize ) { setStackSize ( stackSize ) ; return this ; } public ThreadType taskQueue ( BlockingQueue < Runnable > taskQueue ) { setTaskQueue ( taskQueue ) ; return this ; } public ThreadType threadGroup ( ThreadGroup threadGroup ) { setThreadGroup ( threadGroup ) ; return this ; } public ThreadType executor ( ThreadPoolExecutor executor ) { setExecutor ( executor ) ; return this ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public void setName ( String name ) { this . name = name ; } public void setPriority ( int priority ) { this . priority = priority ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public ThreadPoolExecutor getExecutor ( ) { return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "otherwise" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class OtherwiseType extends OutputType < ProcessorType > implements Block { @ Override public String toString ( ) { return "Otherwise[" + getOutputs ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return routeContext . createProcessor ( this ) ; } @ Override public String getShortName ( ) { return "otherwise" ; } @ Override public String getLabel ( ) { return "otherwise" ; } } 	0
package org . apache . camel . util ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . Registry ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class CamelContextHelper { private CamelContextHelper ( ) { } public static Endpoint getMandatoryEndpoint ( CamelContext camelContext , String uri ) throws NoSuchEndpointException { Endpoint endpoint = camelContext . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } else { return endpoint ; } } public static < T extends Endpoint > T getMandatoryEndpoint ( CamelContext camelContext , String uri , Class < T > type ) { Endpoint endpoint = getMandatoryEndpoint ( camelContext , uri ) ; return ObjectHelper . cast ( type , endpoint ) ; } public static < T > List < T > getSingletonEndpoints ( CamelContext camelContext , Class < T > type ) { List < T > answer = new ArrayList < T > ( ) ; Collection < Endpoint > endpoints = camelContext . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( type . isInstance ( endpoint ) ) { T value = type . cast ( endpoint ) ; answer . add ( value ) ; } } return answer ; } public static < T > T convertTo ( CamelContext context , Class < T > type , Object value ) { notNull ( context , "camelContext" ) ; return context . getTypeConverter ( ) . convertTo ( type , value ) ; } public static < T > T mandatoryConvertTo ( CamelContext context , Class < T > type , Object value ) { T answer = convertTo ( context , type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Value " + value + " converted to " + type . getName ( ) + " cannot be null" ) ; } return answer ; } public static < T > T newInstance ( CamelContext context , Class < T > beanType ) { return context . getInjector ( ) . newInstance ( beanType ) ; } public static Object lookup ( CamelContext context , String name ) { return context . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookup ( CamelContext context , String name , Class < T > beanType ) { return context . getRegistry ( ) . lookup ( name , beanType ) ; } public static Object mandatoryLookup ( CamelContext context , String name ) { Object answer = lookup ( context , name ) ; notNull ( answer , "registry entry called " + name ) ; return answer ; } public static < T > T mandatoryLookup ( CamelContext context , String name , Class < T > beanType ) { T answer = lookup ( context , name , beanType ) ; notNull ( answer , "registry entry called " + name + " of type " + beanType . getName ( ) ) ; return answer ; } public static Language resolveMandatoryLanguage ( CamelContext camelContext , String languageName ) { notNull ( camelContext , "camelContext" ) ; notNull ( languageName , "languageName" ) ; Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Could not resolve language: " + languageName ) ; } return language ; } public static Expression resolveMandatoryExpression ( CamelContext camelContext , String languageName , String expressionText ) { notNull ( expressionText , "expressionText" ) ; Language language = resolveMandatoryLanguage ( camelContext , languageName ) ; Expression < Exchange > expression = language . createExpression ( expressionText ) ; if ( expression == null ) { throw new IllegalArgumentException ( "Could not create expression: " + expressionText + " with language: " + language ) ; } return expression ; } } 	1
package org . apache . camel . component . jhc ; import java . net . URI ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . http . params . BasicHttpParams ; import org . apache . http . params . HttpConnectionParams ; import org . apache . http . params . HttpParams ; import org . apache . http . params . HttpProtocolParams ; public class JhcComponent extends DefaultComponent < JhcExchange > { private static final Log LOG = LogFactory . getLog ( JhcComponent . class ) ; private HttpParams params ; public JhcComponent ( ) { params = new BasicHttpParams ( null ) . setIntParameter ( HttpConnectionParams . SO_TIMEOUT , 5000 ) . setIntParameter ( HttpConnectionParams . CONNECTION_TIMEOUT , 10000 ) . setIntParameter ( HttpConnectionParams . SOCKET_BUFFER_SIZE , 8 * 1024 ) . setBooleanParameter ( HttpConnectionParams . STALE_CONNECTION_CHECK , false ) . setBooleanParameter ( HttpConnectionParams . TCP_NODELAY , true ) . setParameter ( HttpProtocolParams . USER_AGENT , "Camel-JhcComponent/1.1" ) ; } public HttpParams getParams ( ) { return params ; } public void setParams ( HttpParams params ) { this . params = params ; } protected Endpoint < JhcExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new JhcEndpoint ( uri , this , new URI ( uri . substring ( uri . indexOf ( ':' ) + 1 ) ) ) ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Pipeline extends MulticastProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( Pipeline . class ) ; public Pipeline ( Collection < Processor > processors ) { super ( processors ) ; } public static Processor newInstance ( List < Processor > processors ) { if ( processors . isEmpty ( ) ) { return null ; } else if ( processors . size ( ) == 1 ) { return processors . get ( 0 ) ; } return new Pipeline ( processors ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange original , AsyncCallback callback ) { Iterator < Processor > processors = getProcessors ( ) . iterator ( ) ; Exchange nextExchange = original ; boolean first = true ; while ( true ) { if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } if ( ! processors . hasNext ( ) ) { break ; } AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( first ) { first = false ; } else { nextExchange = createNextExchange ( processor , nextExchange ) ; } boolean sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return false ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( true ) ; return true ; } private boolean process ( final Exchange original , final Exchange exchange , final AsyncCallback callback , final Iterator < Processor > processors , AsyncProcessor processor ) { return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } Exchange nextExchange = exchange ; while ( processors . hasNext ( ) ) { AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } nextExchange = createNextExchange ( processor , nextExchange ) ; sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( false ) ; } } ) ; } protected Exchange createNextExchange ( Processor producer , Exchange previousExchange ) { Exchange answer = previousExchange . newInstance ( ) ; answer . getProperties ( ) . putAll ( previousExchange . getProperties ( ) ) ; Message previousOut = previousExchange . getOut ( false ) ; Message in = answer . getIn ( ) ; if ( previousOut != null ) { in . copyFrom ( previousOut ) ; } else { in . copyFrom ( previousExchange . getIn ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Pipeline" + getProcessors ( ) ; } } 	1
package org . apache . camel . processor . validation ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . ErrorHandler ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; public interface ValidatorErrorHandler extends ErrorHandler { void reset ( ) ; void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException ; } 	0
package org . apache . camel . component . mock ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MockEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( MockEndpoint . class ) ; private int expectedCount ; private int counter ; private Processor defaultProcessor ; private Map < Integer , Processor > processors ; private List < Exchange > receivedExchanges ; private List < Throwable > failures ; private List < Runnable > tests ; private CountDownLatch latch ; private long sleepForEmptyTest ; private long resultWaitTime ; private int expectedMinimumCount ; private List expectedBodyValues ; private List actualBodyValues ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; private String headerName ; private String headerValue ; private Object actualHeader ; private Processor reporter ; public MockEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; init ( ) ; } public MockEndpoint ( String endpointUri ) { super ( endpointUri ) ; init ( ) ; } public static MockEndpoint resolve ( CamelContext context , String uri ) { return CamelContextHelper . getMandatoryEndpoint ( context , uri , MockEndpoint . class ) ; } public static void assertWait ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; long left = unit . toMillis ( timeout ) ; long end = start + left ; for ( MockEndpoint endpoint : endpoints ) { if ( ! endpoint . await ( left , TimeUnit . MILLISECONDS ) ) { throw new AssertionError ( "Timeout waiting for endpoints to receive enough messages. " + endpoint . getEndpointUri ( ) + " timed out." ) ; } left = end - System . currentTimeMillis ( ) ; if ( left <= 0 ) { left = 0 ; } } } public static void assertIsSatisfied ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { assertWait ( timeout , unit , endpoints ) ; for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( CamelContext context ) throws InterruptedException { ObjectHelper . notNull ( context , "camelContext" ) ; Collection < Endpoint > endpoints = context . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( endpoint instanceof MockEndpoint ) { MockEndpoint mockEndpoint = ( MockEndpoint ) endpoint ; mockEndpoint . assertIsSatisfied ( ) ; } } } public static void expectsMessageCount ( int count , MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { MockEndpoint . expectsMessageCount ( count ) ; } } public List < Exchange > getExchanges ( ) { return getReceivedExchanges ( ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "You cannot consume from this endpoint" ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) { onExchange ( exchange ) ; } } ; } public void reset ( ) { init ( ) ; } public void whenExchangeReceived ( int index , Processor processor ) { this . processors . put ( index , processor ) ; } public void whenAnyExchangeReceived ( Processor processor ) { this . defaultProcessor = processor ; } public void assertIsSatisfied ( ) throws InterruptedException { assertIsSatisfied ( sleepForEmptyTest ) ; } public void assertIsSatisfied ( long timeoutForEmptyEndpoints ) throws InterruptedException { LOG . info ( "Asserting: " + this + " is satisfied" ) ; if ( expectedCount >= 0 ) { if ( expectedCount != getReceivedCounter ( ) ) { if ( expectedCount == 0 ) { if ( timeoutForEmptyEndpoints > 0 ) { LOG . debug ( "Sleeping for: " + timeoutForEmptyEndpoints + " millis to check there really are no messages received" ) ; Thread . sleep ( timeoutForEmptyEndpoints ) ; } } else { waitForCompleteLatch ( ) ; } } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedMinimumCount > 0 && getReceivedCounter ( ) < expectedMinimumCount ) { waitForCompleteLatch ( ) ; } if ( expectedMinimumCount >= 0 ) { int receivedCounter = getReceivedCounter ( ) ; assertTrue ( "Received message count " + receivedCounter + ", expected at least " + expectedCount , expectedCount <= receivedCounter ) ; } for ( Runnable test : tests ) { test . run ( ) ; } for ( Throwable failure : failures ) { if ( failure != null ) { LOG . error ( "Caught on " + getEndpointUri ( ) + " Exception: " + failure , failure ) ; fail ( "Failed due to caught exception: " + failure ) ; } } } public void assertIsNotSatisfied ( ) throws InterruptedException { try { assertIsSatisfied ( ) ; fail ( "Expected assertion failure!" ) ; } catch ( AssertionError e ) { LOG . info ( "Caught expected failure: " + e ) ; } } public void expectedMessageCount ( int expectedCount ) { setExpectedMessageCount ( expectedCount ) ; } public void expectedMinimumMessageCount ( int expectedCount ) { setMinimumExpectedMessageCount ( expectedCount ) ; } public void expectedHeaderReceived ( String name , String value ) { this . headerName = name ; this . headerValue = value ; expects ( new Runnable ( ) { public void run ( ) { assertTrue ( "No header with name " + headerName + " found." , actualHeader != null ) ; assertEquals ( "Header of message" , headerValue , actualHeader ) ; } } ) ; } public void expectedBodiesReceived ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; Object actualBody = actualBodyValues . get ( i ) ; assertEquals ( "Body of message: " + i , expectedBody , actualBody ) ; } } } ) ; } public void expectedBodiesReceived ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; bodyList . addAll ( Arrays . asList ( bodies ) ) ; expectedBodiesReceived ( bodyList ) ; } public void expectsAscending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesAscending ( expression ) ; } } ) ; } public void expectsDescending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesDescending ( expression ) ; } } ) ; } public void expectsNoDuplicates ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertNoDuplicates ( expression ) ; } } ) ; } public void assertMessagesAscending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , true ) ; } public void assertMessagesDescending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , false ) ; } protected void assertMessagesSorted ( Expression < Exchange > expression , boolean ascending ) { String type = ascending ? "ascending" : "descending" ; ExpressionComparator comparator = new ExpressionComparator ( expression ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 1 ; i < list . size ( ) ; i ++ ) { int j = i - 1 ; Exchange e1 = list . get ( j ) ; Exchange e2 = list . get ( i ) ; int result = comparator . compare ( e1 , e2 ) ; if ( result == 0 ) { fail ( "Messages not " + type + ". Messages" + j + " and " + i + " are equal with value: " + expression . evaluate ( e1 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { if ( ! ascending ) { result = result * - 1 ; } if ( result > 0 ) { fail ( "Messages not " + type + ". Message " + j + " has value: " + expression . evaluate ( e1 ) + " and message " + i + " has value: " + expression . evaluate ( e2 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } } } } public void assertNoDuplicates ( Expression < Exchange > expression ) { Map < Object , Exchange > map = new HashMap < Object , Exchange > ( ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Exchange e2 = list . get ( i ) ; Object key = expression . evaluate ( e2 ) ; Exchange e1 = map . get ( key ) ; if ( e1 != null ) { fail ( "Duplicate message found on message " + i + " has value: " + key + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { map . put ( key , e2 ) ; } } } public void expects ( Runnable runnable ) { tests . add ( runnable ) ; } public AssertionClause message ( final int messageIndex ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { applyAssertionOn ( MockEndpoint . this , messageIndex , assertExchangeReceived ( messageIndex ) ) ; } } ; expects ( clause ) ; return clause ; } public AssertionClause allMessages ( ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { applyAssertionOn ( MockEndpoint . this , index ++ , exchange ) ; } } } ; expects ( clause ) ; return clause ; } public Exchange assertExchangeReceived ( int index ) { int count = getReceivedCounter ( ) ; assertTrue ( "Not enough messages received. Was: " + count , count > index ) ; return getReceivedExchanges ( ) . get ( index ) ; } public List < Throwable > getFailures ( ) { return failures ; } public int getReceivedCounter ( ) { return getReceivedExchanges ( ) . size ( ) ; } public List < Exchange > getReceivedExchanges ( ) { return receivedExchanges ; } public int getExpectedCount ( ) { return expectedCount ; } public long getSleepForEmptyTest ( ) { return sleepForEmptyTest ; } public void setSleepForEmptyTest ( long sleepForEmptyTest ) { this . sleepForEmptyTest = sleepForEmptyTest ; } public long getResultWaitTime ( ) { return resultWaitTime ; } public void setResultWaitTime ( long resultWaitTime ) { this . resultWaitTime = resultWaitTime ; } public void setExpectedMessageCount ( int expectedCount ) { this . expectedCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedCount ) ; } } public void setMinimumExpectedMessageCount ( int expectedCount ) { this . expectedMinimumCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedMinimumCount ) ; } } public Processor getReporter ( ) { return reporter ; } public void setReporter ( Processor reporter ) { this . reporter = reporter ; } private void init ( ) { expectedCount = - 1 ; counter = 0 ; processors = new HashMap < Integer , Processor > ( ) ; receivedExchanges = new CopyOnWriteArrayList < Exchange > ( ) ; failures = new CopyOnWriteArrayList < Throwable > ( ) ; tests = new CopyOnWriteArrayList < Runnable > ( ) ; latch = null ; sleepForEmptyTest = 1000L ; resultWaitTime = 20000L ; expectedMinimumCount = - 1 ; expectedBodyValues = null ; actualBodyValues = new ArrayList ( ) ; } protected synchronized void onExchange ( Exchange exchange ) { try { if ( reporter != null ) { reporter . process ( exchange ) ; } performAssertions ( exchange ) ; } catch ( Throwable e ) { failures . add ( e ) ; } if ( latch != null ) { latch . countDown ( ) ; } } protected void performAssertions ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object actualBody = in . getBody ( ) ; if ( headerName != null ) { actualHeader = in . getHeader ( headerName ) ; } if ( expectedBodyValues != null ) { int index = actualBodyValues . size ( ) ; if ( expectedBodyValues . size ( ) > index ) { Object expectedBody = expectedBodyValues . get ( index ) ; if ( expectedBody != null ) { actualBody = in . getBody ( expectedBody . getClass ( ) ) ; } actualBodyValues . add ( actualBody ) ; } } LOG . debug ( getEndpointUri ( ) + " >>>> " + ( ++ counter ) + " : " + exchange + " with body: " + actualBody ) ; receivedExchanges . add ( exchange ) ; Processor processor = processors . get ( getReceivedCounter ( ) ) != null ? processors . get ( getReceivedCounter ( ) ) : defaultProcessor ; if ( processor != null ) { processor . process ( exchange ) ; } } protected void waitForCompleteLatch ( ) throws InterruptedException { if ( latch == null ) { fail ( "Should have a latch!" ) ; } LOG . debug ( "Waiting on the latch for: " + resultWaitTime + " millis" ) ; latch . await ( resultWaitTime , TimeUnit . MILLISECONDS ) ; } protected void assertEquals ( String message , Object expectedValue , Object actualValue ) { if ( ! ObjectHelper . equal ( expectedValue , actualValue ) ) { fail ( message + ". Expected: <" + expectedValue + "> but was: <" + actualValue + ">" ) ; } } protected void assertTrue ( String message , boolean predicate ) { if ( ! predicate ) { fail ( message ) ; } } protected void fail ( Object message ) { if ( LOG . isDebugEnabled ( ) ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { LOG . debug ( "Received[" + ( ++ index ) + "]: " + exchange ) ; } } throw new AssertionError ( getEndpointUri ( ) + " " + message ) ; } public int getExpectedMinimumCount ( ) { return expectedMinimumCount ; } public void await ( ) throws InterruptedException { if ( latch != null ) { latch . await ( ) ; } } public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { if ( latch != null ) { return latch . await ( timeout , unit ) ; } return true ; } public boolean isSingleton ( ) { return true ; } } 	1
package org . apache . camel . builder ; import org . apache . camel . Processor ; public interface ProcessorFactory { Processor createProcessor ( ) throws Exception ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . TransformProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "transform" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TransformType extends ExpressionNode { public TransformType ( ) { } public TransformType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Transform[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "transform" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; Processor childProcessor = routeContext . createProcessor ( this ) ; return new TransformProcessor ( expr , childProcessor ) ; } } 	1
package org . apache . camel . component . jcr ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . DefaultExchange ; public class JcrComponent extends DefaultComponent < DefaultExchange > { public static final String NODE_NAME = "org.apache.camel.component.jcr.node_name" ; @ Override @ SuppressWarnings ( "unchecked" ) protected Endpoint < DefaultExchange > createEndpoint ( String uri , String remaining , Map properties ) throws Exception { return new JcrEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . nio . ByteBuffer ; import org . apache . camel . Converter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class NIOConverter { private static final transient Log LOG = LogFactory . getLog ( NIOConverter . class ) ; private NIOConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { return buffer . array ( ) ; } @ Converter public static String toString ( ByteBuffer buffer ) { return IOConverter . toString ( buffer . array ( ) ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; } @ Converter public static ByteBuffer toByteBuffer ( File file ) throws IOException { InputStream in = null ; try { byte [ ] buf = new byte [ ( int ) file . length ( ) ] ; in = new BufferedInputStream ( new FileInputStream ( file ) ) ; int sizeLeft = ( int ) file . length ( ) ; int offset = 0 ; while ( sizeLeft > 0 ) { int readSize = in . read ( buf , offset , sizeLeft ) ; sizeLeft -= readSize ; offset += readSize ; } return ByteBuffer . wrap ( buf ) ; } finally { try { if ( in != null ) { in . close ( ) ; } } catch ( IOException e ) { LOG . warn ( "Failed to close file stream: " + file . getPath ( ) , e ) ; } } } @ Converter public static ByteBuffer toByteBuffer ( String value ) { ByteBuffer buf = ByteBuffer . allocate ( value . length ( ) ) ; byte [ ] bytes = value . getBytes ( ) ; buf . put ( bytes ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Short value ) { ByteBuffer buf = ByteBuffer . allocate ( 2 ) ; buf . putShort ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Integer value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Long value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putLong ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Float value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putFloat ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Double value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putDouble ( value ) ; return buf ; } @ Converter public static InputStream toInputStream ( ByteBuffer bufferbuffer ) { return IOConverter . toInputStream ( toByteArray ( bufferbuffer ) ) ; } } 	1
package org . apache . camel . component . atom ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import org . apache . abdera . Abdera ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Feed ; import org . apache . abdera . parser . ParseException ; import org . apache . abdera . parser . Parser ; public final class AtomUtils { private AtomUtils ( ) { } public static Parser getAtomParser ( ) { return Abdera . getInstance ( ) . getParser ( ) ; } public static Document < Feed > parseDocument ( String uri ) throws IOException , ParseException { InputStream in = new URL ( uri ) . openStream ( ) ; return getAtomParser ( ) . parse ( in ) ; } } 	0
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ObjectHelper ; public class Namespaces { public static final String DEFAULT_NAMESPACE = "http://activemq.apache.org/camel/schema/spring" ; public static final String IN_NAMESPACE = "http://camel.apache.org/xml/in/" ; public static final String OUT_NAMESPACE = "http://camel.apache.org/xml/out/" ; public static final String SYSTEM_PROPERTIES_NAMESPACE = "http://camel.apache.org/xml/variables/system-properties" ; public static final String ENVIRONMENT_VARIABLES = "http://camel.apache.org/xml/variables/environment-variables" ; public static final String EXCHANGE_PROPERTY = "http://camel.apache.org/xml/variables/exchange-property" ; private Map < String , String > namespaces = new HashMap < String , String > ( ) ; public Namespaces ( Element element ) { add ( element ) ; } public Namespaces ( String prefix , String uri ) { add ( prefix , uri ) ; } public static boolean isMatchingNamespaceOrEmptyNamespace ( String namespaceURI , String expectedNamespace ) { return ObjectHelper . isNullOrBlank ( namespaceURI ) || namespaceURI . equals ( expectedNamespace ) ; } public Namespaces add ( String prefix , String uri ) { namespaces . put ( prefix , uri ) ; return this ; } public Namespaces add ( Element element ) { Node parentNode = element . getParentNode ( ) ; if ( parentNode instanceof org . w3c . dom . Element ) { add ( ( Element ) parentNode ) ; } NamedNodeMap attributes = element . getAttributes ( ) ; int size = attributes . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Attr node = ( Attr ) attributes . item ( i ) ; String name = node . getName ( ) ; if ( name . startsWith ( "xmlns:" ) ) { String prefix = name . substring ( "xmlns:" . length ( ) ) ; String uri = node . getValue ( ) ; add ( prefix , uri ) ; } } return this ; } public XPathExpression xpath ( String expression ) { XPathExpression answer = new XPathExpression ( expression ) ; configure ( answer ) ; return answer ; } public XPathExpression xpath ( String expression , Class < ? > resultType ) { XPathExpression answer = xpath ( expression ) ; answer . setResultType ( resultType ) ; return answer ; } public XQueryExpression xquery ( String expression ) { XQueryExpression answer = new XQueryExpression ( expression ) ; configure ( answer ) ; return answer ; } public XQueryExpression xquery ( String expression , Class < ? > resultType ) { XQueryExpression answer = new XQueryExpression ( expression ) ; answer . setResultType ( resultType ) ; configure ( answer ) ; return answer ; } public Map < String , String > getNamespaces ( ) { return namespaces ; } public void configure ( NamespaceAware namespaceAware ) { namespaceAware . setNamespaces ( getNamespaces ( ) ) ; } } 	1
package org . apache . camel . component . jms . requestor ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; import javax . jms . ExceptionListener ; import javax . jms . Message ; import javax . jms . Session ; import org . apache . camel . component . jms . JmsConfiguration ; import org . apache . camel . component . jms . JmsProducer ; import org . apache . camel . component . jms . requestor . DeferredRequestReplyMap . DeferredMessageSentCallback ; import org . apache . camel . component . jms . requestor . PersistentReplyToRequestor . MessageSelectorComposer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . task . TaskExecutor ; import org . springframework . jms . listener . AbstractMessageListenerContainer ; import org . springframework . jms . listener . DefaultMessageListenerContainer ; import org . springframework . transaction . PlatformTransactionManager ; public class PersistentReplyToFutureHandler extends FutureHandler { private static final transient Log LOG = LogFactory . getLog ( PersistentReplyToFutureHandler . class ) ; protected PersistentReplyToRequestor requestor ; protected DeferredMessageSentCallback callback ; protected String correlationID ; public PersistentReplyToFutureHandler ( PersistentReplyToRequestor requestor , String correlationID ) { super ( ) ; this . requestor = requestor ; this . correlationID = correlationID ; } public PersistentReplyToFutureHandler ( PersistentReplyToRequestor requestor , DeferredMessageSentCallback callback ) { super ( ) ; this . requestor = requestor ; this . callback = callback ; } @ Override public Message get ( ) throws InterruptedException , ExecutionException { Message result = null ; try { updateSelector ( ) ; result = super . get ( ) ; } finally { revertSelector ( ) ; } return result ; } @ Override public Message get ( long timeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Message result = null ; try { updateSelector ( ) ; result = super . get ( timeout , unit ) ; } finally { revertSelector ( ) ; } return result ; } protected void updateSelector ( ) throws ExecutionException { try { MessageSelectorComposer composer = ( MessageSelectorComposer ) requestor . getListenerContainer ( ) ; composer . addCorrelationID ( ( correlationID != null ) ? correlationID : callback . getMessage ( ) . getJMSMessageID ( ) ) ; } catch ( Exception e ) { throw new ExecutionException ( e ) ; } } protected void revertSelector ( ) throws ExecutionException { try { MessageSelectorComposer composer = ( MessageSelectorComposer ) requestor . getListenerContainer ( ) ; composer . removeCorrelationID ( ( correlationID != null ) ? correlationID : callback . getMessage ( ) . getJMSMessageID ( ) ) ; } catch ( Exception e ) { throw new ExecutionException ( e ) ; } } } 	0
package org . apache . camel . language . bean ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class BeanLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { ObjectHelper . notNull ( expression , "expression" ) ; int idx = expression . lastIndexOf ( '.' ) ; String beanName = expression ; String method = null ; if ( idx > 0 ) { beanName = expression . substring ( 0 , idx ) ; method = expression . substring ( idx + 1 ) ; } return new BeanExpression ( beanName , method ) ; } } 	1
package org . apache . camel . component . atom ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class AtomComponent extends DefaultComponent { protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new AtomEndpoint ( uri , this , remaining ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . PredicateAggregationCollection ; public class Aggregator extends BatchProcessor { private Predicate aggregationCompletedPredicate ; public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy ) { this ( endpoint , processor , new AggregationCollection ( correlationExpression , aggregationStrategy ) ) ; } public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { this ( endpoint , processor , new PredicateAggregationCollection ( correlationExpression , aggregationStrategy , aggregationCompletedPredicate ) ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } public Aggregator ( Endpoint endpoint , Processor processor , AggregationCollection collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Aggregator[to: " + getProcessor ( ) + "]" ; } @ Override protected boolean isBatchCompleted ( int index ) { if ( aggregationCompletedPredicate != null ) { if ( getCollection ( ) . size ( ) > 0 ) { return true ; } } return super . isBatchCompleted ( index ) ; } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "longHeader" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class LongHeader extends HeaderType { @ XmlAttribute ( name = "value" ) private Long number ; public LongHeader ( ) { } public LongHeader ( String name , Long number ) { super ( name ) ; this . number = number ; } public Long getNumber ( ) { return number ; } public void setNumber ( Long number ) { this . number = number ; } public Object getValue ( ) { return getNumber ( ) ; } public void setValue ( Object value ) { if ( value instanceof Number ) { Number n = ( Number ) value ; setNumber ( n . longValue ( ) ) ; } else { throw new IllegalArgumentException ( "Value must be a Long" ) ; } } } 	0
package org . apache . camel . processor ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; public class HandleFaultProcessor extends DelegateProcessor { @ Override public void process ( Exchange exchange ) throws Exception { super . process ( exchange ) ; final Message faultMessage = exchange . getFault ( false ) ; if ( faultMessage != null ) { final Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { if ( faultBody instanceof Throwable ) { exchange . setException ( ( Throwable ) faultBody ) ; } else { exchange . setException ( new CamelException ( "Message contains fault of type " + faultBody . getClass ( ) . getName ( ) + ":\n" + faultBody ) ) ; } } } } } 	1
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . ServiceHelper ; public class DelegateProcessor extends ServiceSupport implements Processor { protected Processor processor ; public DelegateProcessor ( ) { } public DelegateProcessor ( Processor processor ) { if ( processor == this ) { throw new IllegalArgumentException ( "Recursive DelegateProcessor!" ) ; } this . processor = processor ; } public void process ( Exchange exchange ) throws Exception { processNext ( exchange ) ; } protected void processNext ( Exchange exchange ) throws Exception { if ( processor != null ) { processor . process ( exchange ) ; } } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public Processor getProcessor ( ) { return processor ; } public void setProcessor ( Processor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public void proceed ( Exchange exchange ) throws Exception { processNext ( exchange ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "proceed" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProceedType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "proceed" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	1
package org . apache . camel . component . http ; import java . io . IOException ; import java . util . Enumeration ; import java . util . Map ; import javax . servlet . http . HttpServletRequest ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultMessage ; public class HttpMessage extends DefaultMessage { private HttpServletRequest request ; public HttpMessage ( HttpExchange exchange , HttpServletRequest request ) { setExchange ( exchange ) ; this . request = request ; getBody ( ) ; getHeaders ( ) ; } @ Override public HttpExchange getExchange ( ) { return ( HttpExchange ) super . getExchange ( ) ; } public HttpServletRequest getRequest ( ) { return request ; } @ Override protected Object createBody ( ) { try { return getExchange ( ) . getEndpoint ( ) . getBinding ( ) . parseBody ( this ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { Enumeration names = request . getHeaderNames ( ) ; while ( names . hasMoreElements ( ) ) { String name = ( String ) names . nextElement ( ) ; Object value = request . getHeader ( name ) ; map . put ( name , value ) ; } } } 	0
package org . apache . camel . processor . aggregate ; import org . apache . camel . Exchange ; public class UseLatestAggregationStrategy implements AggregationStrategy { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { return newExchange ; } } 	1
package org . apache . camel . component . sql ; import java . util . Map ; import javax . sql . DataSource ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class SqlComponent extends DefaultComponent { private DataSource dataSource ; public SqlComponent ( ) { } public SqlComponent ( CamelContext context ) { super ( context ) ; } @ Override protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new SqlEndpoint ( uri , remaining . replaceAll ( "#" , "?" ) , this , dataSource , parameters ) ; } public void setDataSource ( DataSource dataSource ) { this . dataSource = dataSource ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public final class ProcessorBuilder { private ProcessorBuilder ( ) { } public static Processor setBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setBody(" + expression + ")" ; } } ; } public static Processor setOutBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setOutBody(" + expression + ")" ; } } ; } public static Processor setFaultBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setFaultBody(" + expression + ")" ; } } ; } public static Processor setHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setOutHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setOutHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setFaultHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setFaultHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setProperty ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . setProperty ( name , value ) ; } @ Override public String toString ( ) { return "setProperty(" + name + ", " + expression + ")" ; } } ; } public static Processor removeHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getIn ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeHeader(" + name + ")" ; } } ; } public static Processor removeOutHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { out . removeHeader ( name ) ; } } @ Override public String toString ( ) { return "removeOutHeader(" + name + ")" ; } } ; } public static Processor removeFaultHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getFault ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeFaultHeader(" + name + ")" ; } } ; } public static Processor removeProperty ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . removeProperty ( name ) ; } @ Override public String toString ( ) { return "removeProperty(" + name + ")" ; } } ; } public static Processor throwException ( final Exception ex ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { throw ex ; } @ Override public String toString ( ) { return "throwException(" + ex . toString ( ) + ")" ; } } ; } } 	1
package org . apache . camel . util ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class ExpressionHelper { private ExpressionHelper ( ) { } public static < E extends Exchange > String evaluateAsString ( Expression < E > expression , E exchange ) { return evaluateAsType ( expression , exchange , String . class ) ; } public static < T , E extends Exchange > T evaluateAsType ( Expression < E > expression , E exchange , Class < T > resultType ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( resultType , value ) ; } } 	0
package org . apache . camel . builder ; import java . util . Map ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . model . ExpressionNode ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . MethodCallExpression ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; public class ExpressionClause < T > extends ExpressionType { private T result ; private String language ; public ExpressionClause ( T result ) { this . result = result ; } public static < T extends ExpressionNode > ExpressionClause < T > createAndSetExpression ( T result ) { ExpressionClause < T > clause = new ExpressionClause < T > ( result ) ; result . setExpression ( clause ) ; return clause ; } public T expression ( Expression expression ) { setExpressionValue ( expression ) ; return result ; } public T constant ( Object value ) { return expression ( ExpressionBuilder . constantExpression ( value ) ) ; } public T exchange ( ) { return expression ( ExpressionBuilder . exchangeExpression ( ) ) ; } public T inMessage ( ) { return expression ( ExpressionBuilder . inMessageExpression ( ) ) ; } public T outMessage ( ) { return expression ( ExpressionBuilder . outMessageExpression ( ) ) ; } public T body ( ) { return expression ( ExpressionBuilder . bodyExpression ( ) ) ; } public T body ( Class expectedType ) { return expression ( ExpressionBuilder . bodyExpression ( expectedType ) ) ; } public T outBody ( ) { return expression ( ExpressionBuilder . outBodyExpression ( ) ) ; } public T outBody ( Class expectedType ) { return expression ( ExpressionBuilder . outBodyExpression ( expectedType ) ) ; } public T header ( String name ) { return expression ( ExpressionBuilder . headerExpression ( name ) ) ; } public T headers ( ) { return expression ( ExpressionBuilder . headersExpression ( ) ) ; } public T outHeader ( String name ) { return expression ( ExpressionBuilder . outHeaderExpression ( name ) ) ; } public T outHeaders ( ) { return expression ( ExpressionBuilder . outHeadersExpression ( ) ) ; } public T property ( String name ) { return expression ( ExpressionBuilder . propertyExpression ( name ) ) ; } public T properties ( ) { return expression ( ExpressionBuilder . propertiesExpression ( ) ) ; } public T method ( String bean ) { MethodCallExpression expression = new MethodCallExpression ( bean ) ; setExpressionType ( expression ) ; return result ; } public T method ( String bean , String method ) { MethodCallExpression expression = new MethodCallExpression ( bean , method ) ; setExpressionType ( expression ) ; return result ; } public T el ( String text ) { return language ( "el" , text ) ; } public T groovy ( String text ) { return language ( "groovy" , text ) ; } public T javaScript ( String text ) { return language ( "js" , text ) ; } public T jxpath ( String text ) { return language ( "jxpath" , text ) ; } public T ognl ( String text ) { return language ( "ognl" , text ) ; } public T php ( String text ) { return language ( "php" , text ) ; } public T python ( String text ) { return language ( "python" , text ) ; } public T ruby ( String text ) { return language ( "ruby" , text ) ; } public T sql ( String text ) { return language ( "sql" , text ) ; } public T simple ( String text ) { return language ( "simple" , text ) ; } public T xpath ( String text ) { return language ( "xpath" , text ) ; } public T xpath ( String text , Class resultType ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Class resultType , Namespaces namespaces ) { return xpath ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Class resultType , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Namespaces namespaces ) { return xpath ( text , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text ) { return language ( "xquery" , text ) ; } public T xquery ( String text , Class resultType ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Class resultType , Namespaces namespaces ) { return xquery ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Class resultType , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Namespaces namespaces ) { return xquery ( text , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T language ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; return result ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . CONSTRUCTOR } ) public @ interface MessageDriven { String uri ( ) default "" ; String name ( ) default "" ; } 	0
package org . apache . camel . processor ; public enum LoggingLevel { DEBUG , ERROR , FATAL , INFO , TRACE , WARN } 	1
package org . apache . camel . bam . processor ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; public class NoCorrelationKeyException extends CamelExchangeException { private final BamProcessorSupport processor ; public NoCorrelationKeyException ( BamProcessorSupport processor , Exchange exchange ) { super ( "No correlation key could be found for " + processor . getCorrelationKeyExpression ( ) , exchange ) ; this . processor = processor ; } public BamProcessorSupport getProcessor ( ) { return processor ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . TryProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "try" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TryType extends OutputType < TryType > { @ XmlTransient private List < CatchType > catchClauses ; @ XmlTransient private FinallyType finallyClause ; @ XmlTransient private boolean initialized ; @ XmlTransient private List < ProcessorType < ? > > outputsWithoutCatches ; @ Override public String toString ( ) { return "Try[ " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "try" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor tryProcessor = createOutputsProcessor ( routeContext , getOutputsWithoutCatches ( ) ) ; Processor finallyProcessor = null ; if ( finallyClause != null ) { finallyProcessor = finallyClause . createProcessor ( routeContext ) ; } List < CatchProcessor > catchProcessors = new ArrayList < CatchProcessor > ( ) ; if ( catchClauses != null ) { for ( CatchType catchClause : catchClauses ) { catchProcessors . add ( catchClause . createProcessor ( routeContext ) ) ; } } return new TryProcessor ( tryProcessor , catchProcessors , finallyProcessor ) ; } public TryType handle ( Class < ? > exceptionType ) { popBlock ( ) ; CatchType answer = new CatchType ( exceptionType ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Deprecated public TryType handleAll ( ) { return finallyBlock ( ) ; } public TryType finallyBlock ( ) { popBlock ( ) ; FinallyType answer = new FinallyType ( ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Override public ProcessorType < ? extends ProcessorType > end ( ) { popBlock ( ) ; return super . end ( ) ; } public List < CatchType > getCatchClauses ( ) { if ( catchClauses == null ) { checkInitialized ( ) ; } return catchClauses ; } public FinallyType getFinallyClause ( ) { if ( finallyClause == null ) { checkInitialized ( ) ; } return finallyClause ; } public List < ProcessorType < ? > > getOutputsWithoutCatches ( ) { if ( outputsWithoutCatches == null ) { checkInitialized ( ) ; } return outputsWithoutCatches ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { initialized = false ; super . setOutputs ( outputs ) ; } @ Override public void addOutput ( ProcessorType output ) { initialized = false ; super . addOutput ( output ) ; } protected void checkInitialized ( ) { if ( ! initialized ) { initialized = true ; outputsWithoutCatches = new ArrayList < ProcessorType < ? > > ( ) ; catchClauses = new ArrayList < CatchType > ( ) ; finallyClause = null ; for ( ProcessorType output : outputs ) { if ( output instanceof CatchType ) { catchClauses . add ( ( CatchType ) output ) ; } else if ( output instanceof FinallyType ) { if ( finallyClause != null ) { throw new IllegalArgumentException ( "Multiple finally clauses added: " + finallyClause + " and " + output ) ; } else { finallyClause = ( FinallyType ) output ; } } else { outputsWithoutCatches . add ( output ) ; } } } } } 	1
package org . apache . camel . component . file . remote ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . InputStream ; import org . apache . camel . Converter ; @ Converter public final class RemoteFileConverter { private RemoteFileConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteArrayOutputStream os ) { return os . toByteArray ( ) ; } @ Converter public static String toString ( ByteArrayOutputStream os ) { return os . toString ( ) ; } @ Converter public static InputStream toInputStream ( ByteArrayOutputStream os ) { return new ByteArrayInputStream ( os . toByteArray ( ) ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultComponentResolver < E extends Exchange > implements ComponentResolver < E > { protected static final FactoryFinder COMPONENT_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; private static final transient Log LOG = LogFactory . getLog ( DefaultComponentResolver . class ) ; public Component < E > resolveComponent ( String name , CamelContext context ) { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } } Class type ; try { type = COMPONENT_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { return null ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " via type: " + type . getName ( ) + " via " + COMPONENT_FACTORY . getPath ( ) + name ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component < E > ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . ResourceBundle ; import java . util . logging . Level ; import java . util . logging . Logger ; import javax . xml . namespace . QName ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . cxf . bindings . xformat . XMLBindingMessageFormat ; import org . apache . cxf . common . i18n . BundleUtils ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . XMLMessage ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . service . model . BindingMessageInfo ; import org . apache . cxf . service . model . MessagePartInfo ; public class XMLMessageOutInterceptor extends AbstractMessageOutInterceptor < XMLMessage > { private static final Logger LOG = LogUtils . getL7dLogger ( XMLMessageOutInterceptor . class ) ; public XMLMessageOutInterceptor ( ) { super ( Phase . PREPARE_SEND ) ; addAfter ( DOMOutInterceptor . class . getName ( ) ) ; } protected Logger getLogger ( ) { return LOG ; } @ SuppressWarnings ( "unchecked" ) public void handleMessage ( XMLMessage message ) throws Fault { Exchange exchange = message . getExchange ( ) ; BindingMessageInfo bmi = exchange . get ( BindingMessageInfo . class ) ; List < Element > payload = message . get ( List . class ) ; if ( bmi == null && payload . size ( ) > 1 ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "NO_XML_ROOT_NODE" , LOG ) ) ; } if ( bmi != null ) { Element header = message . get ( Element . class ) ; if ( header != null ) { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "DOMOutInterceptor Copy Message Part related Headers to Payload." ) ; } moveHeaderPartToPayload ( bmi , header , payload ) ; } XMLBindingMessageFormat msgFormat = bmi . getExtensor ( XMLBindingMessageFormat . class ) ; QName rootName = msgFormat != null ? msgFormat . getRootNode ( ) : null ; if ( rootName == null ) { if ( payload . size ( ) > 1 ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "NO_XML_ROOT_NODE" , LOG ) ) ; } } else { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "DOMOutInterceptor Create xmlformat RootNode element" ) ; } Element el = createElement ( rootName , payload ) ; payload = new ArrayList < Element > ( ) ; payload . add ( el ) ; } message . put ( List . class , payload ) ; message . remove ( Element . class ) ; } } private void moveHeaderPartToPayload ( BindingMessageInfo bmi , Element header , List < Element > payload ) { Collection < MessagePartInfo > bodyParts = bmi . getMessageParts ( ) ; NodeList nodes = header . getChildNodes ( ) ; for ( int idx = 0 ; idx < nodes . getLength ( ) ; idx ++ ) { Node node = nodes . item ( idx ) ; int index = 0 ; for ( MessagePartInfo mpi : bodyParts ) { QName name = mpi . getConcreteName ( ) ; if ( name . getLocalPart ( ) . equals ( node . getLocalName ( ) ) && name . getNamespaceURI ( ) . equals ( node . getNamespaceURI ( ) ) ) { payload . add ( index , ( Element ) node ) ; break ; } ++ index ; } } } } 	0
package org . apache . camel . util ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Properties ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . spi . Injector ; public class FactoryFinder { private final String path ; private final ConcurrentHashMap classMap = new ConcurrentHashMap ( ) ; public FactoryFinder ( ) { this ( "META-INF/services/org/apache/camel/" ) ; } public FactoryFinder ( String path ) { this . path = path ; } public Object newInstance ( String key ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { return newInstance ( key , ( String ) null ) ; } public Object newInstance ( String key , String propertyPrefix ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { Class clazz = findClass ( key , propertyPrefix ) ; return clazz . newInstance ( ) ; } public Object newInstance ( String key , Injector injector ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , ( String ) null ) ; } public Object newInstance ( String key , Injector injector , String propertyPrefix ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; return injector . newInstance ( type ) ; } public < T > T newInstance ( String key , Injector injector , Class < T > expectedType ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , null , expectedType ) ; } public < T > T newInstance ( String key , Injector injector , String propertyPrefix , Class < T > expectedType ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; Object value = injector . newInstance ( type ) ; if ( expectedType . isInstance ( value ) ) { return expectedType . cast ( value ) ; } else { throw new ClassCastException ( "Not instanceof " + expectedType . getName ( ) + " value: " + value ) ; } } public < T > List < T > newInstances ( String key , Injector injector , Class < T > type ) throws IOException , ClassNotFoundException { List < Class > list = findClasses ( key ) ; List < T > answer = new ArrayList < T > ( list . size ( ) ) ; answer . add ( newInstance ( key , injector , type ) ) ; return answer ; } public Class findClass ( String key ) throws ClassNotFoundException , IOException { return findClass ( key , null ) ; } public Class findClass ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { if ( propertyPrefix == null ) { propertyPrefix = "" ; } Class clazz = ( Class ) classMap . get ( propertyPrefix + key ) ; if ( clazz == null ) { clazz = newInstance ( doFindFactoryProperties ( key ) , propertyPrefix ) ; classMap . put ( propertyPrefix + key , clazz ) ; } return clazz ; } public List < Class > findClasses ( String key ) throws ClassNotFoundException , IOException { return findClasses ( key , null ) ; } public List < Class > findClasses ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { Class type = findClass ( key , propertyPrefix ) ; return Collections . singletonList ( type ) ; } public String getPath ( ) { return path ; } private Class newInstance ( Properties properties , String propertyPrefix ) throws ClassNotFoundException , IOException { String className = properties . getProperty ( propertyPrefix + "class" ) ; if ( className == null ) { throw new IOException ( "Expected property is missing: " + propertyPrefix + "class" ) ; } return ObjectHelper . loadClass ( className ) ; } private Properties doFindFactoryProperties ( String key ) throws IOException { String uri = path + key ; InputStream in = ObjectHelper . loadResourceAsStream ( uri ) ; if ( in == null ) { throw new NoFactoryAvailableException ( uri ) ; } BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( in ) ; Properties properties = new Properties ( ) ; properties . load ( reader ) ; return properties ; } finally { ObjectHelper . close ( reader , key , null ) ; ObjectHelper . close ( in , key , null ) ; } } } 	1
package org . apache . camel . component . jms ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Session ; public interface DestinationEndpoint { Destination getJmsDestination ( Session session ) throws JMSException ; } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor { protected AsyncProcessor processor ; public DelegateAsyncProcessor ( ) { } public DelegateAsyncProcessor ( AsyncProcessor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public AsyncProcessor getProcessor ( ) { return processor ; } public void setProcessor ( AsyncProcessor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } } 	1
package org . apache . camel . builder . xml ; import javax . xml . transform . Result ; import javax . xml . transform . dom . DOMResult ; import org . apache . camel . Message ; public class DomResultHandler implements ResultHandler { private DOMResult result = new DOMResult ( ) ; public Result getResult ( ) { return result ; } public void setBody ( Message in ) { in . setBody ( result . getNode ( ) ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . DataFormatClause ; import org . apache . camel . builder . DeadLetterChannelBuilder ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . ErrorHandlerBuilderRef ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . NoErrorHandlerBuilder ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . LanguageExpression ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlAccessorType ( XmlAccessType . PROPERTY ) public abstract class ProcessorType < Type extends ProcessorType > extends OptionalIdentifiedType < Type > implements Block { public static final String DEFAULT_TRACE_CATEGORY = "org.apache.camel.TRACE" ; private static final transient Log LOG = LogFactory . getLog ( ProcessorType . class ) ; private ErrorHandlerBuilder errorHandlerBuilder ; private Boolean inheritErrorHandlerFlag ; private NodeFactory nodeFactory ; private LinkedList < Block > blocks = new LinkedList < Block > ( ) ; private ProcessorType < ? extends ProcessorType > parent ; private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; private String errorHandlerRef ; public abstract List < ProcessorType < ? > > getOutputs ( ) ; public Processor createProcessor ( RouteContext routeContext ) throws Exception { throw new UnsupportedOperationException ( "Not implemented yet for class: " + getClass ( ) . getName ( ) ) ; } public Processor createOutputsProcessor ( RouteContext routeContext ) throws Exception { Collection < ProcessorType < ? > > outputs = getOutputs ( ) ; return createOutputsProcessor ( routeContext , outputs ) ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Processor processor = makeProcessor ( routeContext ) ; if ( ! routeContext . isRouteAdded ( ) ) { routeContext . addEventDrivenProcessor ( processor ) ; } } public Processor wrapProcessor ( RouteContext routeContext , Processor processor ) throws Exception { processor = wrapProcessorInInterceptors ( routeContext , processor ) ; return wrapInErrorHandler ( routeContext , processor ) ; } public Type to ( String uri ) { addOutput ( new ToType ( uri ) ) ; return ( Type ) this ; } public Type to ( Endpoint endpoint ) { addOutput ( new ToType ( endpoint ) ) ; return ( Type ) this ; } public Type to ( String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri ) ) ; } return ( Type ) this ; } public Type to ( Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( Collection < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public MulticastType multicast ( ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public Type pipeline ( String ... uris ) { return to ( uris ) ; } public Type pipeline ( Endpoint ... endpoints ) { return to ( endpoints ) ; } public Type pipeline ( Collection < Endpoint > endpoints ) { return to ( endpoints ) ; } public ProcessorType < ? extends ProcessorType > end ( ) { if ( blocks . isEmpty ( ) ) { if ( parent == null ) { throw new IllegalArgumentException ( "Root node with no active block" ) ; } return parent ; } popBlock ( ) ; return this ; } public ThreadType thread ( int coreSize ) { ThreadType answer = new ThreadType ( coreSize ) ; addOutput ( answer ) ; return answer ; } public ProcessorType < Type > thread ( ThreadPoolExecutor executor ) { ThreadType answer = new ThreadType ( executor ) ; addOutput ( answer ) ; return this ; } public IdempotentConsumerType idempotentConsumer ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( messageIdExpression , messageIdRepository ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < IdempotentConsumerType > idempotentConsumer ( MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( ) ; answer . setMessageIdRepository ( messageIdRepository ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < FilterType > filter ( ) { FilterType filter = new FilterType ( ) ; addOutput ( filter ) ; return ExpressionClause . createAndSetExpression ( filter ) ; } public FilterType filter ( Predicate predicate ) { FilterType filter = new FilterType ( predicate ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( ExpressionType expression ) { FilterType filter = getNodeFactory ( ) . createFilter ( ) ; filter . setExpression ( expression ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( String language , String expression ) { return filter ( new LanguageExpression ( language , expression ) ) ; } public LoadBalanceType loadBalance ( ) { LoadBalanceType answer = new LoadBalanceType ( ) ; addOutput ( answer ) ; return answer ; } public ChoiceType choice ( ) { ChoiceType answer = new ChoiceType ( ) ; addOutput ( answer ) ; return answer ; } public TryType tryBlock ( ) { TryType answer = new TryType ( ) ; addOutput ( answer ) ; return answer ; } public Type recipientList ( Expression receipients ) { RecipientListType answer = new RecipientListType ( receipients ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > recipientList ( ) { RecipientListType answer = new RecipientListType ( ) ; addOutput ( answer ) ; ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; answer . setExpression ( clause ) ; return clause ; } public Type routingSlip ( String header , String uriDelimiter ) { RoutingSlipType answer = new RoutingSlipType ( header , uriDelimiter ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( String header ) { RoutingSlipType answer = new RoutingSlipType ( header ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( ) { RoutingSlipType answer = new RoutingSlipType ( ) ; addOutput ( answer ) ; return ( Type ) this ; } public SplitterType splitter ( Expression receipients ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression receipients , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < ResequencerType > resequencer ( ) { ResequencerType answer = new ResequencerType ( ) ; addOutput ( answer ) ; ExpressionClause < ResequencerType > clause = new ExpressionClause < ResequencerType > ( answer ) ; answer . expression ( clause ) ; return clause ; } public ResequencerType resequencer ( Expression < Exchange > expression ) { return resequencer ( Collections . < Expression > singletonList ( expression ) ) ; } public ResequencerType resequencer ( List < Expression > expressions ) { ResequencerType answer = new ResequencerType ( expressions ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression ... expressions ) { List < Expression > list = new ArrayList < Expression > ( ) ; list . addAll ( Arrays . asList ( expressions ) ) ; return resequencer ( list ) ; } public ExpressionClause < AggregatorType > aggregator ( ) { AggregatorType answer = new AggregatorType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationCollection aggregationCollection ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationCollection ( aggregationCollection ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public AggregatorType aggregator ( Expression correlationExpression ) { AggregatorType answer = new AggregatorType ( correlationExpression ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( correlationExpression , aggregationStrategy ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( Expression < Exchange > processAtExpression ) { return delayer ( processAtExpression , 0L ) ; } public DelayerType delayer ( Expression < Exchange > processAtExpression , long delay ) { DelayerType answer = new DelayerType ( processAtExpression , delay ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < DelayerType > delayer ( ) { DelayerType answer = new DelayerType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public DelayerType delayer ( long delay ) { return delayer ( null , delay ) ; } public ThrottlerType throttler ( long maximumRequestCount ) { ThrottlerType answer = new ThrottlerType ( maximumRequestCount ) ; addOutput ( answer ) ; return answer ; } public Type throwFault ( Throwable fault ) { ThrowFaultType answer = new ThrowFaultType ( ) ; answer . setFault ( fault ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type throwFault ( String message ) { return throwFault ( new CamelException ( message ) ) ; } public Type interceptor ( String ref ) { InterceptorRef interceptor = new InterceptorRef ( ref ) ; intercept ( interceptor ) ; return ( Type ) this ; } public Type intercept ( DelegateProcessor interceptor ) { intercept ( new InterceptorRef ( interceptor ) ) ; return ( Type ) this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer ; } public void intercept ( InterceptorType interceptor ) { addOutput ( interceptor ) ; pushBlock ( interceptor ) ; } public void addInterceptor ( InterceptorType interceptor ) { interceptors . add ( interceptor ) ; } public void addInterceptor ( DelegateProcessor interceptor ) { addInterceptor ( new InterceptorRef ( interceptor ) ) ; } protected void pushBlock ( Block block ) { blocks . add ( block ) ; } protected Block popBlock ( ) { return blocks . isEmpty ( ) ? null : blocks . removeLast ( ) ; } public Type proceed ( ) { ProceedType proceed = null ; ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { proceed = ( ( InterceptType ) currentProcessor ) . getProceed ( ) ; LOG . info ( "proceed() is the implied and hence not needed for an intercept()" ) ; } if ( proceed == null ) { for ( ProcessorType node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { InterceptType intercept = ( InterceptType ) node ; proceed = intercept . getProceed ( ) ; break ; } } if ( proceed == null ) { throw new IllegalArgumentException ( "Cannot use proceed() without being within an intercept() block" ) ; } } addOutput ( proceed ) ; return ( Type ) this ; } public Type stop ( ) { ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { ( ( InterceptType ) currentProcessor ) . stopIntercept ( ) ; } else { ProcessorType node ; for ( node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { ( ( InterceptType ) node ) . stopIntercept ( ) ; break ; } } if ( node == null ) { throw new IllegalArgumentException ( "Cannot use stop() without being within an intercept() block" ) ; } } return ( Type ) this ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer . when ( predicate ) ; } public Type interceptors ( String ... refs ) { for ( String ref : refs ) { interceptor ( ref ) ; } return ( Type ) this ; } public Type trace ( ) { return trace ( DEFAULT_TRACE_CATEGORY ) ; } public Type trace ( String category ) { final Log log = LogFactory . getLog ( category ) ; return intercept ( new DelegateProcessor ( ) { @ Override public void process ( Exchange exchange ) throws Exception { log . trace ( exchange ) ; processNext ( exchange ) ; } } ) ; } public PolicyRef policies ( ) { PolicyRef answer = new PolicyRef ( ) ; addOutput ( answer ) ; return answer ; } public PolicyRef policy ( Policy policy ) { PolicyRef answer = new PolicyRef ( policy ) ; addOutput ( answer ) ; return answer ; } public Type handleFault ( ) { intercept ( new HandleFaultType ( ) ) ; return ( Type ) this ; } public Type errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return ( Type ) this ; } public Type inheritErrorHandler ( boolean condition ) { setInheritErrorHandlerFlag ( condition ) ; return ( Type ) this ; } public Type process ( Processor processor ) { ProcessorRef answer = new ProcessorRef ( processor ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type processRef ( String ref ) { ProcessorRef answer = new ProcessorRef ( ) ; answer . setRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref ) { BeanRef answer = new BeanRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref , String method ) { BeanRef answer = new BeanRef ( ref , method ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setBody ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetBodyType answer = new SetBodyType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setBody ( Expression expression ) { SetBodyType answer = new SetBodyType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } @ Deprecated public Type setOutBody ( Expression expression ) { return transform ( expression ) ; } @ Deprecated public ExpressionClause < ProcessorType < Type > > setOutBody ( ) { return transform ( ) ; } public Type transform ( Expression expression ) { TransformType answer = new TransformType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > transform ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; TransformType answer = new TransformType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setFaultBody ( Expression expression ) { return process ( ProcessorBuilder . setFaultBody ( expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetHeaderType answer = new SetHeaderType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type setHeader ( String name , Expression expression ) { SetHeaderType answer = new SetHeaderType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setHeader ( String name , String value ) { SetHeaderType answer = new SetHeaderType ( name , value ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setOutHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setOutHeader ( name , clause ) ) ; return clause ; } public Type setOutHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setOutHeader ( name , expression ) ) ; } public Type setOutHeader ( String name , String value ) { return ( Type ) setOutHeader ( name ) . constant ( value ) ; } public Type setFaultHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setFaultHeader ( name , expression ) ) ; } public Type setProperty ( String name , Expression expression ) { return process ( ProcessorBuilder . setProperty ( name , expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setProperty ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setProperty ( name , clause ) ) ; return clause ; } public Type removeHeader ( String name ) { return process ( ProcessorBuilder . removeHeader ( name ) ) ; } public Type removeOutHeader ( String name ) { return process ( ProcessorBuilder . removeOutHeader ( name ) ) ; } public Type removeFaultHeader ( String name ) { return process ( ProcessorBuilder . removeFaultHeader ( name ) ) ; } public Type removeProperty ( String name ) { return process ( ProcessorBuilder . removeProperty ( name ) ) ; } public Type convertBodyTo ( Class type ) { addOutput ( new ConvertBodyType ( type ) ) ; return ( Type ) this ; } @ Deprecated public Type convertOutBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } @ Deprecated public Type convertFaultBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } public DataFormatClause < ProcessorType < Type > > unmarshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Unmarshal ) ; } public Type unmarshal ( DataFormatType dataFormatType ) { addOutput ( new UnmarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type unmarshal ( DataFormat dataFormat ) { return unmarshal ( new DataFormatType ( dataFormat ) ) ; } public Type unmarshal ( String dataTypeRef ) { addOutput ( new UnmarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } public DataFormatClause < ProcessorType < Type > > marshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Marshal ) ; } public Type marshal ( DataFormatType dataFormatType ) { addOutput ( new MarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type marshal ( DataFormat dataFormat ) { return marshal ( new DataFormatType ( dataFormat ) ) ; } public Type marshal ( String dataTypeRef ) { addOutput ( new MarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } @ XmlTransient public ProcessorType < ? extends ProcessorType > getParent ( ) { return parent ; } public void setParent ( ProcessorType < ? extends ProcessorType > parent ) { this . parent = parent ; } @ XmlTransient public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void setErrorHandlerBuilderIfNull ( ErrorHandlerBuilder errorHandlerBuilder ) { if ( this . errorHandlerBuilder == null ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; } } public String getErrorHandlerRef ( ) { return errorHandlerRef ; } @ XmlAttribute ( required = false ) public void setErrorHandlerRef ( String errorHandlerRef ) { this . errorHandlerRef = errorHandlerRef ; setErrorHandlerBuilder ( new ErrorHandlerBuilderRef ( errorHandlerRef ) ) ; } @ XmlTransient public boolean isInheritErrorHandler ( ) { return isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public static boolean isInheritErrorHandler ( Boolean value ) { return value == null || value . booleanValue ( ) ; } @ XmlAttribute ( name = "inheritErrorHandler" , required = false ) public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } @ XmlTransient public NodeFactory getNodeFactory ( ) { if ( nodeFactory == null ) { nodeFactory = new NodeFactory ( ) ; } return nodeFactory ; } public void setNodeFactory ( NodeFactory nodeFactory ) { this . nodeFactory = nodeFactory ; } public String getLabel ( ) { return "" ; } protected Processor makeProcessor ( RouteContext routeContext ) throws Exception { Processor processor = createProcessor ( routeContext ) ; return wrapProcessor ( routeContext , processor ) ; } protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } List < InterceptStrategy > strategies = new ArrayList < InterceptStrategy > ( ) ; CamelContext camelContext = routeContext . getCamelContext ( ) ; if ( camelContext instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) camelContext ; strategies . addAll ( defaultCamelContext . getInterceptStrategies ( ) ) ; } strategies . addAll ( routeContext . getInterceptStrategies ( ) ) ; for ( InterceptStrategy strategy : strategies ) { if ( strategy != null ) { target = strategy . wrapProcessorInInterceptors ( this , target ) ; } } List < InterceptorType > list = routeContext . getRoute ( ) . getInterceptors ( ) ; if ( interceptors != null ) { list . addAll ( interceptors ) ; } Collections . reverse ( list ) ; Set < Processor > interceptors = new HashSet < Processor > ( ) ; interceptors . add ( target ) ; for ( InterceptorType interceptorType : list ) { DelegateProcessor interceptor = interceptorType . createInterceptor ( routeContext ) ; if ( ! interceptors . contains ( interceptor ) ) { interceptors . add ( interceptor ) ; if ( interceptor . getProcessor ( ) != null ) { LOG . warn ( "Interceptor " + interceptor + " currently wraps target " + interceptor . getProcessor ( ) + " is attempting to change target " + target + " new wrapping has been denied." ) ; } else { interceptor . setProcessor ( target ) ; target = interceptor ; } } } return target ; } protected Processor wrapInErrorHandler ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } ErrorHandlerWrappingStrategy strategy = routeContext . getErrorHandlerWrappingStrategy ( ) ; if ( strategy != null ) { return strategy . wrapProcessorInErrorHandler ( routeContext , this , target ) ; } return getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( errorHandlerRef != null ) { return new ErrorHandlerBuilderRef ( errorHandlerRef ) ; } if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } protected void configureChild ( ProcessorType output ) { output . setNodeFactory ( getNodeFactory ( ) ) ; } public void addOutput ( ProcessorType processorType ) { processorType . setParent ( this ) ; configureChild ( processorType ) ; if ( blocks . isEmpty ( ) ) { getOutputs ( ) . add ( processorType ) ; } else { Block block = blocks . getLast ( ) ; block . addOutput ( processorType ) ; } } protected Processor createCompositeProcessor ( List < Processor > list ) { return new Pipeline ( list ) ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { List < Processor > list = new ArrayList < Processor > ( ) ; for ( ProcessorType output : outputs ) { Processor processor = output . createProcessor ( routeContext ) ; processor = output . wrapProcessorInInterceptors ( routeContext , processor ) ; ProcessorType currentProcessor = this ; if ( ! ( currentProcessor instanceof ExceptionType || currentProcessor instanceof TryType ) ) { processor = output . wrapInErrorHandler ( routeContext , processor ) ; } list . add ( processor ) ; } Processor processor = null ; if ( ! list . isEmpty ( ) ) { if ( list . size ( ) == 1 ) { processor = list . get ( 0 ) ; } else { processor = createCompositeProcessor ( list ) ; } } return processor ; } public void clearOutput ( ) { getOutputs ( ) . clear ( ) ; blocks . clear ( ) ; } } 	1
package org . apache . camel ; public interface Intercept { Processor getInterceptorLogic ( ) ; void setInterceptorLogic ( Processor interceptorLogic ) ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionHelper ; public class Delayer extends DelayProcessorSupport { private Expression < Exchange > timeExpression ; private long delay ; public Delayer ( Processor processor , Expression < Exchange > timeExpression , long delay ) { super ( processor ) ; this . timeExpression = timeExpression ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[on: " + timeExpression + " delay: " + delay + " to: " + getProcessor ( ) + "]" ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } protected void delay ( Exchange exchange ) throws Exception { long time = 0 ; if ( timeExpression != null ) { Long longValue = ExpressionHelper . evaluateAsType ( timeExpression , exchange , Long . class ) ; if ( longValue != null ) { time = longValue . longValue ( ) ; } } if ( time <= 0 ) { time = defaultProcessTime ( exchange ) ; } time += delay ; waitUntil ( time , exchange ) ; } protected long defaultProcessTime ( Exchange exchange ) { return currentSystemTime ( ) ; } } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "string" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class StringDataFormat extends DataFormatType { @ XmlAttribute ( required = false ) private String charset ; @ Override protected DataFormat createDataFormat ( RouteContext routeContext ) { return new org . apache . camel . impl . StringDataFormat ( charset ) ; } public String getCharset ( ) { return charset ; } public void setCharset ( String charset ) { this . charset = charset ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandler extends ErrorHandlerSupport { private Processor output ; private Log log ; private LoggingLevel level ; public LoggingErrorHandler ( Processor output ) { this ( output , LogFactory . getLog ( LoggingErrorHandler . class ) , LoggingLevel . INFO ) ; } public LoggingErrorHandler ( Processor output , Log log , LoggingLevel level ) { this . output = output ; this . log = log ; this . level = level ; } @ Override public String toString ( ) { return "LoggingErrorHandler[" + output + "]" ; } public void process ( Exchange exchange ) throws Exception { try { output . process ( exchange ) ; } catch ( Throwable e ) { if ( ! customProcessorForException ( exchange , e ) ) { logError ( exchange , e ) ; } } } public Processor getOutput ( ) { return output ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } protected void logError ( Exchange exchange , Throwable e ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange , e ) , e ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange , e ) , e ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange , e ) , e ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange , e ) , e ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange , e ) , e ) ; } } protected Object logMessage ( Exchange exchange , Throwable e ) { return e + " while processing exchange: " + exchange ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( output ) ; } } 	1
package org . apache . camel . component . jms . requestor ; import java . util . HashMap ; import java . util . Map ; public class MessageSelectorProvider { protected Map < String , String > correlationIds ; protected boolean dirty = true ; protected StringBuilder expression ; public MessageSelectorProvider ( ) { correlationIds = new HashMap < String , String > ( ) ; } public synchronized void addCorrelationID ( String id ) { correlationIds . put ( id , id ) ; dirty = true ; } public synchronized void removeCorrelationID ( String id ) { correlationIds . remove ( id ) ; dirty = true ; } public synchronized String get ( ) { if ( ! dirty ) { return expression . toString ( ) ; } expression = new StringBuilder ( "JMSCorrelationID='" ) ; boolean first = true ; for ( Map . Entry < String , String > entry : correlationIds . entrySet ( ) ) { if ( ! first ) { expression . append ( " OR JMSCorrelationID='" ) ; } expression . append ( entry . getValue ( ) ) . append ( "'" ) ; if ( first ) { first = false ; } } dirty = false ; return expression . toString ( ) ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . processor . resequencer . ResequencerEngine ; import org . apache . camel . processor . resequencer . SequenceElementComparator ; import org . apache . camel . processor . resequencer . SequenceSender ; public class StreamResequencer extends DelegateProcessor implements Processor { private ResequencerEngine < Exchange > reseq ; private BlockingQueue < Exchange > queue ; private SequenceSender sender ; public StreamResequencer ( Processor processor , SequenceElementComparator < Exchange > comparator , int capacity ) { super ( processor ) ; queue = new LinkedBlockingQueue < Exchange > ( ) ; reseq = new ResequencerEngine < Exchange > ( comparator , capacity ) ; reseq . setOutQueue ( queue ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; sender = new SequenceSender ( getProcessor ( ) ) ; sender . setQueue ( queue ) ; sender . start ( ) ; } @ Override protected void doStop ( ) throws Exception { reseq . stop ( ) ; sender . cancel ( ) ; super . doStop ( ) ; } @ Override public void process ( Exchange exchange ) throws Exception { reseq . put ( exchange ) ; } public long getTimeout ( ) { return reseq . getTimeout ( ) ; } public void setTimeout ( long timeout ) { reseq . setTimeout ( timeout ) ; } @ Override public String toString ( ) { return "StreamResequencer[to: " + getProcessor ( ) + "]" ; } } 	1
package org . apache . camel . component . jhc ; import org . apache . camel . impl . DefaultMessage ; public class JhcMessage extends DefaultMessage { } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TraceInterceptor extends DelegateProcessor implements ExchangeFormatter { private final ProcessorType node ; private Predicate traceFilter ; private boolean traceExceptions = true ; private Logger logger = new Logger ( LogFactory . getLog ( TraceInterceptor . class ) , this ) ; private TraceFormatter formatter ; public TraceInterceptor ( ProcessorType node , Processor target , TraceFormatter formatter ) { super ( target ) ; this . node = node ; this . formatter = formatter ; } @ Override public String toString ( ) { return "TraceInterceptor[" + node + "]" ; } public void process ( Exchange exchange ) throws Exception { try { if ( shouldLogExchange ( exchange ) ) { logExchange ( exchange ) ; } super . proceed ( exchange ) ; } catch ( Exception e ) { logException ( exchange , e ) ; throw e ; } catch ( Error e ) { logException ( exchange , e ) ; throw e ; } } public Object format ( Exchange exchange ) { return formatter . format ( this , exchange ) ; } public ProcessorType getNode ( ) { return node ; } public Predicate getTraceFilter ( ) { return traceFilter ; } public void setTraceFilter ( Predicate traceFilter ) { this . traceFilter = traceFilter ; } public boolean isTraceExceptions ( ) { return traceExceptions ; } public void setTraceExceptions ( boolean traceExceptions ) { this . traceExceptions = traceExceptions ; } public Logger getLogger ( ) { return logger ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } public LoggingLevel getLevel ( ) { return getLogger ( ) . getLevel ( ) ; } public Log getLog ( ) { return getLogger ( ) . getLog ( ) ; } public void setLog ( Log log ) { getLogger ( ) . setLog ( log ) ; } public void setLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; } protected void logExchange ( Exchange exchange ) { logger . process ( exchange ) ; } protected void logException ( Exchange exchange , Throwable throwable ) { logger . process ( exchange , throwable ) ; } protected boolean shouldLogExchange ( Exchange exchange ) { return traceFilter == null || traceFilter . matches ( exchange ) ; } } 	1
package org . apache . camel . component . atom ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Entry ; import org . apache . abdera . model . Feed ; public interface EntryFilter { boolean isValidEntry ( AtomEndpoint endpoint , Document < Feed > feed , Entry entry ) ; } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class ValueBuilder < E extends Exchange > implements Expression < E > { private Expression < E > expression ; public ValueBuilder ( Expression < E > expression ) { this . expression = expression ; } public Object evaluate ( E exchange ) { return expression . evaluate ( exchange ) ; } public Expression < E > getExpression ( ) { return expression ; } @ Override public String toString ( ) { return expression . toString ( ) ; } public Predicate < E > isNotEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isNotEqualTo ( expression , right ) ) ; } public Predicate < E > isEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isEqualTo ( expression , right ) ) ; } public Predicate < E > isLessThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThan ( expression , right ) ) ; } public Predicate < E > isLessThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isGreaterThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThan ( expression , right ) ) ; } public Predicate < E > isGreaterThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isInstanceOf ( Class type ) { return onNewPredicate ( PredicateBuilder . isInstanceOf ( expression , type ) ) ; } public Predicate < E > matchesRegex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public Predicate < E > isNull ( ) { return onNewPredicate ( PredicateBuilder . isNull ( expression ) ) ; } public Predicate < E > isNotNull ( ) { return onNewPredicate ( PredicateBuilder . isNotNull ( expression ) ) ; } public Predicate < E > contains ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . contains ( expression , right ) ) ; } public Predicate < E > regex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public ValueBuilder < E > tokenize ( ) { return tokenize ( "\n" ) ; } public ValueBuilder < E > tokenize ( String token ) { Expression < E > newExp = ExpressionBuilder . tokenizeExpression ( expression , token ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexTokenize ( String regex ) { Expression < E > newExp = ExpressionBuilder . regexTokenize ( expression , regex ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , String replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , Expression < E > replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertTo ( Class type ) { Expression < E > newExp = ExpressionBuilder . convertTo ( expression , type ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertToString ( ) { return convertTo ( String . class ) ; } public ValueBuilder < E > append ( Object value ) { return new ValueBuilder < E > ( ExpressionBuilder . append ( expression , asExpression ( value ) ) ) ; } protected Predicate < E > onNewPredicate ( Predicate < E > predicate ) { return predicate ; } protected Expression < E > asExpression ( Object value ) { if ( value instanceof Expression ) { return ( Expression < E > ) value ; } else { return ExpressionBuilder . constantExpression ( value ) ; } } } 	1
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; import javax . xml . namespace . NamespaceContext ; import javax . xml . xpath . XPathFactory ; import org . apache . camel . spi . NamespaceAware ; public class DefaultNamespaceContext implements NamespaceContext , NamespaceAware { private final Map < String , String > map ; private final NamespaceContext parent ; public DefaultNamespaceContext ( ) { this ( XPathFactory . newInstance ( ) ) ; } public DefaultNamespaceContext ( XPathFactory factory ) { this . parent = factory . newXPath ( ) . getNamespaceContext ( ) ; this . map = new HashMap < String , String > ( ) ; } public DefaultNamespaceContext ( NamespaceContext parent , Map < String , String > map ) { this . parent = parent ; this . map = map ; } public DefaultNamespaceContext add ( String prefix , String uri ) { map . put ( prefix , uri ) ; return this ; } public String getNamespaceURI ( String prefix ) { String answer = map . get ( prefix ) ; if ( answer == null && parent != null ) { return parent . getNamespaceURI ( prefix ) ; } return answer ; } public String getPrefix ( String namespaceURI ) { for ( Iterator iter = map . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( namespaceURI . equals ( entry . getValue ( ) ) ) { return ( String ) entry . getKey ( ) ; } } if ( parent != null ) { return parent . getPrefix ( namespaceURI ) ; } return null ; } public Iterator getPrefixes ( String namespaceURI ) { Set set = new HashSet ( ) ; for ( Iterator iter = map . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( namespaceURI . equals ( entry . getValue ( ) ) ) { set . add ( entry . getKey ( ) ) ; } } if ( parent != null ) { Iterator iter = parent . getPrefixes ( namespaceURI ) ; while ( iter . hasNext ( ) ) { set . add ( iter . next ( ) ) ; } } return set . iterator ( ) ; } public void setNamespaces ( Map < String , String > namespaces ) { map . putAll ( namespaces ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "catch" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CatchType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; public CatchType ( ) { } public CatchType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public CatchType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Catch[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "catch" ; } @ Override public String getLabel ( ) { return getExceptionClasses ( ) . toString ( ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . bam . rules ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . bam . ProcessBuilder ; import org . apache . camel . bam . model . ActivityDefinition ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ActivityRules extends ServiceSupport { private static final transient Log LOG = LogFactory . getLog ( ActivityRules . class ) ; private int expectedMessages = 1 ; private ProcessRules processRules ; private List < TemporalRule > rules = new ArrayList < TemporalRule > ( ) ; private ActivityDefinition activityDefinition ; private String activityName ; private final org . apache . camel . bam . ProcessBuilder builder ; public ActivityRules ( ProcessBuilder builder ) { this . builder = builder ; this . processRules = builder . getProcessRules ( ) ; processRules . getActivities ( ) . add ( this ) ; } public void addRule ( TemporalRule rule ) { rules . add ( rule ) ; } public void processExpired ( ActivityState activityState ) throws Exception { for ( TemporalRule rule : rules ) { rule . processExpired ( activityState ) ; } } public void processExchange ( Exchange exchange , ProcessInstance process ) { for ( TemporalRule rule : rules ) { rule . processExchange ( exchange , process ) ; } } public ActivityDefinition getActivityDefinition ( ) { return builder . findOrCreateActivityDefinition ( activityName ) ; } public void setActivityDefinition ( ActivityDefinition activityDefinition ) { this . activityDefinition = activityDefinition ; } public int getExpectedMessages ( ) { return expectedMessages ; } public void setExpectedMessages ( int expectedMessages ) { this . expectedMessages = expectedMessages ; } public ProcessRules getProcessRules ( ) { return processRules ; } public void setActivityName ( String activityName ) { this . activityName = activityName ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( rules ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( rules ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . MarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "marshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public MarshalType ( ) { } public MarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public MarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "marshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new MarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . util ; import java . io . IOException ; import java . net . URL ; import java . util . Enumeration ; public class WebSphereResolverUtil extends ResolverUtil { private String resourcePath ; public WebSphereResolverUtil ( String resourcePath ) { this . resourcePath = resourcePath ; } public static boolean isWebSphereClassLoader ( ClassLoader loader ) { return loader . getClass ( ) . getName ( ) . startsWith ( "com.ibm" ) ; } @ Override protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { Enumeration < URL > enumeration = super . getResources ( loader , packageName ) ; if ( ! enumeration . hasMoreElements ( ) ) { LOG . trace ( "Using WebSphere workaround to load the camel jars with the annotated converters." ) ; enumeration = loader . getResources ( resourcePath ) ; } return enumeration ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . RejectedExecutionHandler ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ServiceHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class MulticastProcessor extends ServiceSupport implements Processor { static class ProcessorExchangePair { private final Processor processor ; private final Exchange exchange ; public ProcessorExchangePair ( Processor processor , Exchange exchange ) { this . processor = processor ; this . exchange = exchange ; } public Processor getProcessor ( ) { return processor ; } public Exchange getExchange ( ) { return exchange ; } } private Collection < Processor > processors ; private AggregationStrategy aggregationStrategy ; private boolean isParallelProcessing ; private ThreadPoolExecutor executor ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; public MulticastProcessor ( Collection < Processor > processors ) { this ( processors , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy ) { this ( processors , aggregationStrategy , false , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor executor ) { notNull ( processors , "processors" ) ; this . processors = processors ; this . aggregationStrategy = aggregationStrategy ; this . isParallelProcessing = parallelProcessing ; if ( isParallelProcessing ) { if ( executor != null ) { this . executor = executor ; } else { this . executor = new ThreadPoolExecutor ( processors . size ( ) , processors . size ( ) , 0 , TimeUnit . MILLISECONDS , new ArrayBlockingQueue < Runnable > ( processors . size ( ) ) ) ; } } } public static < E extends Exchange > Collection < Processor > toProducers ( Collection < Endpoint > endpoints ) throws Exception { Collection < Processor > answer = new ArrayList < Processor > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint . createProducer ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Multicast" + getProcessors ( ) ; } class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; private final Processor processor ; public ProcessCall ( Exchange exchange , Processor processor , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; this . processor = processor ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; callback . done ( false ) ; } else { try { processor . process ( exchange ) ; } catch ( Exception ex ) { exchange . setException ( ex ) ; } callback . done ( false ) ; } } } public void process ( Exchange exchange ) throws Exception { Exchange result = null ; List < ProcessorExchangePair > pairs = createProcessorExchangePairs ( exchange ) ; if ( isParallelProcessing ) { Exchange [ ] exchanges = new Exchange [ pairs . size ( ) ] ; final CountDownLatch completedExchanges = new CountDownLatch ( pairs . size ( ) ) ; int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; exchanges [ i ] = pair . getExchange ( ) ; updateNewExchange ( exchanges [ i ] , i , pairs ) ; ProcessCall call = new ProcessCall ( exchanges [ i ] , producer , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { completedExchanges . countDown ( ) ; } } ) ; executor . execute ( call ) ; i ++ ; } completedExchanges . await ( ) ; if ( aggregationStrategy != null ) { for ( Exchange resultExchange : exchanges ) { if ( result == null ) { result = resultExchange ; } else { result = aggregationStrategy . aggregate ( result , resultExchange ) ; } } } } else { int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; Exchange subExchange = pair . getExchange ( ) ; updateNewExchange ( subExchange , i , pairs ) ; producer . process ( subExchange ) ; if ( aggregationStrategy != null ) { if ( result == null ) { result = subExchange ; } else { result = aggregationStrategy . aggregate ( result , subExchange ) ; } } i ++ ; } } if ( result != null ) { ExchangeHelper . copyResults ( exchange , result ) ; } } protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { } protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { List < ProcessorExchangePair > result = new ArrayList < ProcessorExchangePair > ( processors . size ( ) ) ; Processor [ ] processorsArray = processors . toArray ( new Processor [ processors . size ( ) ] ) ; for ( int i = 0 ; i < processorsArray . length ; i ++ ) { result . add ( new ProcessorExchangePair ( processorsArray [ i ] , exchange . copy ( ) ) ) ; } return result ; } protected void doStop ( ) throws Exception { shutdown . set ( true ) ; if ( executor != null ) { executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } ServiceHelper . stopServices ( processors ) ; } protected void doStart ( ) throws Exception { shutdown . set ( false ) ; if ( executor != null ) { executor . setRejectedExecutionHandler ( new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor executor ) { ProcessCall call = ( ProcessCall ) runnable ; call . exchange . setException ( new RejectedExecutionException ( ) ) ; call . callback . done ( false ) ; } } ) ; } ServiceHelper . startServices ( processors ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; public abstract class PredicateSupport < E extends Exchange > implements Predicate < E > { public void assertMatches ( String text , E exchange ) { if ( ! matches ( exchange ) ) { throw new AssertionError ( assertionFailureMessage ( exchange ) + " on " + exchange ) ; } } protected String assertionFailureMessage ( E exchange ) { return toString ( ) ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import javax . naming . Context ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . management . InstrumentationLifecycleStrategy ; import org . apache . camel . management . JmxSystemPropertyKeys ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . interceptor . Tracer ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ReflectionInjector ; import org . apache . camel . util . SystemHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; public class DefaultCamelContext extends ServiceSupport implements CamelContext , Service { private static final transient Log LOG = LogFactory . getLog ( DefaultCamelContext . class ) ; private static final String NAME_PREFIX = "camel-" ; private static int nameSuffix ; private String name ; private final Map < String , Endpoint > endpoints = new HashMap < String , Endpoint > ( ) ; private final Map < String , Component > components = new HashMap < String , Component > ( ) ; private List < Route > routes ; private List < Service > servicesToClose = new ArrayList < Service > ( ) ; private TypeConverter typeConverter ; private ExchangeConverter exchangeConverter ; private Injector injector ; private ComponentResolver componentResolver ; private boolean autoCreateComponents = true ; private LanguageResolver languageResolver = new DefaultLanguageResolver ( ) ; private Registry registry ; private LifecycleStrategy lifecycleStrategy ; private List < RouteType > routeDefinitions = new ArrayList < RouteType > ( ) ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private Boolean trace ; private ErrorHandlerBuilder errorHandlerBuilder ; public DefaultCamelContext ( ) { name = NAME_PREFIX + ++ nameSuffix ; if ( Boolean . getBoolean ( JmxSystemPropertyKeys . DISABLED ) ) { LOG . info ( "JMX is disabled. Using DefaultLifecycleStrategy." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } else { try { LOG . info ( "JMX enabled. Using InstrumentationLifecycleStrategy." ) ; lifecycleStrategy = new InstrumentationLifecycleStrategy ( ) ; } catch ( NoClassDefFoundError e ) { LOG . warn ( "Could not find needed classes for JMX lifecycle strategy." + " Are you missing spring-context.jar by any chance? NoClassDefFoundError: " + e . getMessage ( ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not create JMX lifecycle strategy, caused by: " + e . getMessage ( ) ) ; } if ( lifecycleStrategy == null ) { LOG . warn ( "Not possible to use JMX lifecycle strategy. Using DefaultLifecycleStrategy instead." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } } } public DefaultCamelContext ( Context jndiContext ) { this ( new JndiRegistry ( jndiContext ) ) ; } public DefaultCamelContext ( Registry registry ) { this ( ) ; this . registry = registry ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public void addComponent ( String componentName , final Component component ) { if ( component == null ) { throw new IllegalArgumentException ( "Component cannot be null" ) ; } synchronized ( components ) { if ( components . containsKey ( componentName ) ) { throw new IllegalArgumentException ( "Component previously added: " + componentName ) ; } component . setCamelContext ( this ) ; components . put ( componentName , component ) ; } } public Component getComponent ( String name ) { synchronized ( components ) { Component component = components . get ( name ) ; if ( component == null && autoCreateComponents ) { try { component = getComponentResolver ( ) . resolveComponent ( name , this ) ; if ( component != null ) { addComponent ( name , component ) ; if ( isStarted ( ) ) { startServices ( component ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( "Could not auto create component: " + name , e ) ; } } return component ; } } public < T extends Component > T getComponent ( String name , Class < T > componentType ) { Component component = getComponent ( name ) ; if ( componentType . isInstance ( component ) ) { return componentType . cast ( component ) ; } else { throw new IllegalArgumentException ( "The component is not of type: " + componentType + " but is: " + component ) ; } } public Component removeComponent ( String componentName ) { synchronized ( components ) { return components . remove ( componentName ) ; } } public Component getOrCreateComponent ( String componentName , Callable < Component > factory ) { synchronized ( components ) { Component component = components . get ( componentName ) ; if ( component == null ) { try { component = factory . call ( ) ; if ( component == null ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component, it returned null." ) ; } components . put ( componentName , component ) ; component . setCamelContext ( this ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component" , e ) ; } } return component ; } } public Collection < Endpoint > getSingletonEndpoints ( ) { synchronized ( endpoints ) { return new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } } public Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { startServices ( endpoint ) ; oldEndpoint = endpoints . remove ( uri ) ; endpoints . put ( uri , endpoint ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint removeSingletonEndpoint ( String uri ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { oldEndpoint = endpoints . remove ( uri ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint getEndpoint ( String uri ) { Endpoint answer ; synchronized ( endpoints ) { answer = endpoints . get ( uri ) ; if ( answer == null ) { try { String splitURI [ ] = ObjectHelper . splitOnCharacter ( uri , ":" , 2 ) ; if ( splitURI [ 1 ] != null ) { String scheme = splitURI [ 0 ] ; Component component = getComponent ( scheme ) ; if ( component != null ) { answer = component . createEndpoint ( uri ) ; if ( answer != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( uri + " converted to endpoint: " + answer + " by component: " + component ) ; } } } if ( answer == null ) { answer = createEndpoint ( uri ) ; } if ( answer != null ) { addService ( answer ) ; if ( answer . isSingleton ( ) ) { endpoints . put ( uri , answer ) ; lifecycleStrategy . onEndpointAdd ( answer ) ; } } } catch ( Exception e ) { LOG . debug ( "Failed to resolve endpoint " + uri + ". Reason: " + e , e ) ; throw new ResolveEndpointFailedException ( uri , e ) ; } } } return answer ; } public < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) { Endpoint endpoint = getEndpoint ( name ) ; if ( endpointType . isInstance ( endpoint ) ) { return endpointType . cast ( endpoint ) ; } else { throw new IllegalArgumentException ( "The endpoint is not of type: " + endpointType + " but is: " + endpoint ) ; } } public List < Route > getRoutes ( ) { if ( routes == null ) { routes = new ArrayList < Route > ( ) ; } return routes ; } public void setRoutes ( List < Route > routes ) { this . routes = routes ; } public void addRoutes ( Collection < Route > routes ) throws Exception { if ( this . routes == null ) { this . routes = new ArrayList < Route > ( routes ) ; } else { this . routes . addAll ( routes ) ; } lifecycleStrategy . onRoutesAdd ( routes ) ; if ( shouldStartRoutes ( ) ) { startRoutes ( routes ) ; } } public void addRoutes ( Routes builder ) throws Exception { builder . setContext ( this ) ; List < Route > routeList = builder . getRouteList ( ) ; LOG . debug ( "Adding routes from: " + builder + " routes: " + routeList ) ; addRoutes ( routeList ) ; } public void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception { this . routeDefinitions . addAll ( routeDefinitions ) ; if ( shouldStartRoutes ( ) ) { startRouteDefinitions ( routeDefinitions ) ; } } public void addService ( Object object ) throws Exception { if ( object instanceof Service ) { Service service = ( Service ) object ; service . start ( ) ; servicesToClose . add ( service ) ; } } public Language resolveLanguage ( String language ) { return getLanguageResolver ( ) . resolveLanguage ( language , this ) ; } public ExchangeConverter getExchangeConverter ( ) { if ( exchangeConverter == null ) { exchangeConverter = createExchangeConverter ( ) ; } return exchangeConverter ; } public void setExchangeConverter ( ExchangeConverter exchangeConverter ) { this . exchangeConverter = exchangeConverter ; } public TypeConverter getTypeConverter ( ) { if ( typeConverter == null ) { typeConverter = createTypeConverter ( ) ; } return typeConverter ; } public void setTypeConverter ( TypeConverter typeConverter ) { this . typeConverter = typeConverter ; } public Injector getInjector ( ) { if ( injector == null ) { injector = createInjector ( ) ; } return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } public ComponentResolver getComponentResolver ( ) { if ( componentResolver == null ) { componentResolver = createComponentResolver ( ) ; } return componentResolver ; } public void setComponentResolver ( ComponentResolver componentResolver ) { this . componentResolver = componentResolver ; } public LanguageResolver getLanguageResolver ( ) { return languageResolver ; } public void setLanguageResolver ( LanguageResolver languageResolver ) { this . languageResolver = languageResolver ; } public boolean isAutoCreateComponents ( ) { return autoCreateComponents ; } public void setAutoCreateComponents ( boolean autoCreateComponents ) { this . autoCreateComponents = autoCreateComponents ; } public Registry getRegistry ( ) { if ( registry == null ) { registry = createRegistry ( ) ; } return registry ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public LifecycleStrategy getLifecycleStrategy ( ) { return lifecycleStrategy ; } public void setLifecycleStrategy ( LifecycleStrategy lifecycleStrategy ) { this . lifecycleStrategy = lifecycleStrategy ; } public List < RouteType > getRouteDefinitions ( ) { return routeDefinitions ; } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public boolean getTrace ( ) { final Boolean value = getTracing ( ) ; if ( value != null ) { return value ; } else { return SystemHelper . isSystemProperty ( "canel.trace" ) ; } } public Boolean getTracing ( ) { return trace ; } public void setTrace ( Boolean trace ) { this . trace = trace ; } public < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) { return new DefaultProducerTemplate < E > ( this ) ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void doStart ( ) throws Exception { if ( getTrace ( ) ) { boolean found = false ; final List < InterceptStrategy > list = getInterceptStrategies ( ) ; for ( InterceptStrategy strategy : list ) { if ( strategy instanceof Tracer ) { found = true ; } } if ( ! found ) { addInterceptStrategy ( new Tracer ( ) ) ; } } lifecycleStrategy . onContextStart ( this ) ; forceLazyInitialization ( ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { startServices ( component ) ; } } startRouteDefinitions ( routeDefinitions ) ; startRoutes ( routes ) ; } protected void startRouteDefinitions ( Collection < RouteType > list ) throws Exception { if ( list != null ) { Collection < Route > routes = new ArrayList < Route > ( ) ; for ( RouteType route : list ) { route . addRoutes ( this , routes ) ; } addRoutes ( routes ) ; } } protected void doStop ( ) throws Exception { stopServices ( servicesToClose ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { stopServices ( component ) ; } } } protected void startRoutes ( Collection < Route > routeList ) throws Exception { if ( routeList != null ) { for ( Route < Exchange > route : routeList ) { List < Service > services = route . getServicesForRoute ( ) ; for ( Service service : services ) { addService ( service ) ; } } } } protected void forceLazyInitialization ( ) { getExchangeConverter ( ) ; getInjector ( ) ; getLanguageResolver ( ) ; getTypeConverter ( ) ; } protected ExchangeConverter createExchangeConverter ( ) { return new DefaultExchangeConverter ( ) ; } protected TypeConverter createTypeConverter ( ) { return new DefaultTypeConverter ( getInjector ( ) ) ; } protected Injector createInjector ( ) { FactoryFinder finder = new FactoryFinder ( ) ; try { return ( Injector ) finder . newInstance ( "Injector" ) ; } catch ( NoFactoryAvailableException e ) { return new ReflectionInjector ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } protected ComponentResolver createComponentResolver ( ) { return new DefaultComponentResolver ( ) ; } protected Registry createRegistry ( ) { return new JndiRegistry ( ) ; } protected Endpoint createEndpoint ( String uri ) { Object value = getRegistry ( ) . lookup ( uri ) ; if ( value instanceof Endpoint ) { return ( Endpoint ) value ; } else if ( value instanceof Processor ) { return new ProcessorEndpoint ( uri , this , ( Processor ) value ) ; } else if ( value != null ) { return convertBeanToEndpoint ( uri , value ) ; } return null ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { throw new IllegalArgumentException ( "uri: " + uri + " bean: " + bean + " could not be converted to an Endpoint" ) ; } protected boolean shouldStartRoutes ( ) { return isStarted ( ) && ! isStarting ( ) ; } } 	1
package org . apache . camel . spring . spi ; import org . springframework . beans . factory . wiring . BeanConfigurerSupport ; import org . springframework . context . ApplicationContext ; public class BeanInjector extends BeanConfigurerSupport { public BeanInjector ( ApplicationContext applicationContext ) throws Exception { setBeanFactory ( applicationContext ) ; afterPropertiesSet ( ) ; } public void inject ( Object bean ) { configureBean ( bean ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class Builder { private Builder ( ) { } public static < E extends Exchange > ValueBuilder < E > constant ( Object value ) { Expression < E > expression = ExpressionBuilder . constantExpression ( value ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > header ( String name ) { Expression < E > expression = ExpressionBuilder . headerExpression ( name ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > body ( ) { Expression < E > expression = ExpressionBuilder . bodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > bodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > bodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > outBody ( ) { Expression < E > expression = ExpressionBuilder . outBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > outBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > outBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > faultBody ( ) { Expression < E > expression = ExpressionBuilder . faultBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > faultBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > faultBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name , final String defaultValue ) { return new ValueBuilder < E > ( ExpressionBuilder . < E > systemProperty ( name , defaultValue ) ) ; } } 	1
package org . apache . camel . processor . idempotent ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . util . LRUCache ; public class MemoryMessageIdRepository implements MessageIdRepository { private final Map cache ; public MemoryMessageIdRepository ( Map set ) { this . cache = set ; } public static MessageIdRepository memoryMessageIdRepository ( ) { return memoryMessageIdRepository ( new HashMap ( ) ) ; } public static MessageIdRepository memoryMessageIdRepository ( int cacheSize ) { return memoryMessageIdRepository ( new LRUCache ( cacheSize ) ) ; } public static MessageIdRepository memoryMessageIdRepository ( Map cache ) { return new MemoryMessageIdRepository ( cache ) ; } public boolean contains ( String messageId ) { synchronized ( cache ) { if ( cache . containsKey ( messageId ) ) { return true ; } else { cache . put ( messageId , messageId ) ; return false ; } } } } 	0
package org . apache . camel . component . log ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . ThroughputLogger ; public class LogComponent extends DefaultComponent < Exchange > { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { LoggingLevel level = getLoggingLevel ( parameters ) ; Integer groupSize = getAndRemoveParameter ( parameters , "groupSize" , Integer . class ) ; Logger logger ; if ( groupSize != null ) { logger = new ThroughputLogger ( remaining , level , ObjectConverter . toInteger ( groupSize ) ) ; } else { LogFormatter formatter = new LogFormatter ( ) ; IntrospectionSupport . setProperties ( formatter , parameters ) ; logger = new Logger ( remaining ) ; logger . setLevel ( level ) ; logger . setFormatter ( formatter ) ; } return new ProcessorEndpoint ( uri , this , logger ) ; } protected LoggingLevel getLoggingLevel ( Map parameters ) { String levelText = getAndRemoveParameter ( parameters , "level" , String . class , "INFO" ) ; return LoggingLevel . valueOf ( levelText . toUpperCase ( ) ) ; } } 	1
package org . apache . camel . component . velocity ; import java . io . InputStreamReader ; import java . io . Reader ; import java . io . StringWriter ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . component . ResourceBasedEndpoint ; import org . apache . camel . util . ExchangeHelper ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . context . Context ; import org . apache . velocity . runtime . log . SimpleLog4JLogSystem ; import org . springframework . core . io . Resource ; public class VelocityEndpoint extends ResourceBasedEndpoint { private final VelocityComponent component ; private VelocityEngine velocityEngine ; private boolean loaderCache = true ; public VelocityEndpoint ( String uri , VelocityComponent component , String resourceUri , Map parameters ) { super ( uri , component , resourceUri , null ) ; this . component = component ; } @ Override public boolean isSingleton ( ) { return true ; } @ Override public ExchangePattern getExchangePattern ( ) { return ExchangePattern . InOut ; } private VelocityEngine getVelocityEngine ( ) throws Exception { if ( velocityEngine == null ) { velocityEngine = component . getVelocityEngine ( ) ; velocityEngine . setProperty ( Velocity . FILE_RESOURCE_LOADER_CACHE , isLoaderCache ( ) ? Boolean . TRUE : Boolean . FALSE ) ; velocityEngine . setProperty ( Velocity . RUNTIME_LOG_LOGSYSTEM_CLASS , SimpleLog4JLogSystem . class . getName ( ) ) ; velocityEngine . setProperty ( "runtime.log.logsystem.log4j.category" , VelocityEndpoint . class . getName ( ) ) ; velocityEngine . init ( ) ; } return velocityEngine ; } public void setVelocityEngine ( VelocityEngine velocityEngine ) { this . velocityEngine = velocityEngine ; } public boolean isLoaderCache ( ) { return loaderCache ; } public void setLoaderCache ( boolean loaderCache ) { this . loaderCache = loaderCache ; } @ SuppressWarnings ( "unchecked" ) @ Override protected void onExchange ( Exchange exchange ) throws Exception { Resource resource = getResource ( ) ; Reader reader = new InputStreamReader ( getResourceAsInputStream ( ) ) ; StringWriter buffer = new StringWriter ( ) ; String logTag = getClass ( ) . getName ( ) ; Map variableMap = ExchangeHelper . createVariableMap ( exchange ) ; Context velocityContext = new VelocityContext ( variableMap ) ; VelocityEngine engine = getVelocityEngine ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Velocity is evaluating using velocity context: " + variableMap ) ; } engine . evaluate ( velocityContext , buffer , logTag , reader ) ; Message out = exchange . getOut ( true ) ; out . setBody ( buffer . toString ( ) ) ; out . setHeader ( "org.apache.camel.velocity.resource" , resource ) ; Map < String , Object > headers = ( Map < String , Object > ) velocityContext . get ( "headers" ) ; for ( String key : headers . keySet ( ) ) { out . setHeader ( key , headers . get ( key ) ) ; } } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . Externalizable ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . Reader ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import javax . xml . transform . stream . StreamSource ; public class StringSource extends StreamSource implements Externalizable { private String text ; private String encoding = "UTF-8" ; public StringSource ( ) { } public StringSource ( String text ) { if ( text == null ) { throw new NullPointerException ( "text can not be null" ) ; } this . text = text ; } public StringSource ( String text , String systemId ) { this ( text ) ; setSystemId ( systemId ) ; } public StringSource ( String text , String systemId , String encoding ) { this . text = text ; this . encoding = encoding ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { try { return new ByteArrayInputStream ( text . getBytes ( encoding ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } public Reader getReader ( ) { return new StringReader ( text ) ; } public String toString ( ) { return "StringSource[" + text + "]" ; } public String getText ( ) { return text ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public void setText ( String text ) { this . text = text ; } public void writeExternal ( ObjectOutput out ) throws IOException { out . writeUTF ( text ) ; out . writeUTF ( encoding ) ; out . writeUTF ( getPublicId ( ) ) ; out . writeUTF ( getSystemId ( ) ) ; } public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { text = in . readUTF ( ) ; encoding = in . readUTF ( ) ; setPublicId ( in . readUTF ( ) ) ; setSystemId ( in . readUTF ( ) ) ; } } 	1
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . XPathBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . language . NamespacePrefix ; import org . apache . camel . language . XPath ; public class XPathAnnotationExpressionFactory extends DefaultAnnotationExpressionFactory { @ Override public Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) { String xpath = getExpressionFromAnnotation ( annotation ) ; XPathBuilder builder = XPathBuilder . xpath ( xpath ) ; if ( annotation instanceof XPath ) { XPath xpathAnnotation = ( XPath ) annotation ; NamespacePrefix [ ] namespaces = xpathAnnotation . namespaces ( ) ; if ( namespaces != null ) { for ( NamespacePrefix namespacePrefix : namespaces ) { builder = builder . namespace ( namespacePrefix . prefix ( ) , namespacePrefix . uri ( ) ) ; } } } return builder ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ConvertBodyProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( ConvertBodyProcessor . class ) ; private final Class type ; public ConvertBodyProcessor ( Class type ) { this . type = type ; } public void process ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object value = in . getBody ( type ) ; if ( value == null ) { LOG . warn ( "Could not convert body of IN message: " + in + " to type: " + type . getName ( ) ) ; } if ( exchange . getPattern ( ) . isOutCapable ( ) ) { Message out = exchange . getOut ( ) ; out . copyFrom ( in ) ; out . setBody ( value ) ; } else { in . setBody ( value ) ; } } } 	1
package org . apache . camel . bam . rules ; import java . util . ArrayList ; import java . util . Date ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . bam . TimeExpression ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . DefaultRouteContext ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . OutputType ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . Time ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; public class TemporalRule extends ServiceSupport { private static final transient Log LOG = LogFactory . getLog ( TemporalRule . class ) ; private TimeExpression first ; private TimeExpression second ; private long expectedMillis ; private long overdueMillis ; private Processor overdueAction ; private OutputType overdueProcessors = new OutputType ( ) ; public TemporalRule ( TimeExpression first , TimeExpression second ) { this . first = first ; this . second = second ; } public TemporalRule expectWithin ( Time builder ) { return expectWithin ( builder . toMillis ( ) ) ; } public TemporalRule expectWithin ( long millis ) { expectedMillis = millis ; return this ; } public OutputType errorIfOver ( Time builder ) { return errorIfOver ( builder . toMillis ( ) ) ; } public OutputType errorIfOver ( long millis ) { overdueMillis = millis ; if ( overdueProcessors == null ) { overdueProcessors = new OutputType ( ) ; } return overdueProcessors ; } public TimeExpression getFirst ( ) { return first ; } public TimeExpression getSecond ( ) { return second ; } public Processor getOverdueAction ( ) throws Exception { if ( overdueAction == null && overdueProcessors != null ) { ArrayList < Route > list = new ArrayList < Route > ( ) ; RouteType route = new RouteType ( ) ; route . setCamelContext ( first . getBuilder ( ) . getProcessBuilder ( ) . getContext ( ) ) ; RouteContext routeContext = new DefaultRouteContext ( route , null , list ) ; overdueAction = overdueProcessors . createOutputsProcessor ( routeContext ) ; } return overdueAction ; } public void processExchange ( Exchange exchange , ProcessInstance instance ) { Date firstTime = first . evaluate ( instance ) ; if ( firstTime == null ) { return ; } ActivityState secondState = second . getOrCreateActivityState ( instance ) ; if ( expectedMillis > 0L ) { Date expected = secondState . getTimeExpected ( ) ; if ( expected == null ) { expected = add ( firstTime , expectedMillis ) ; secondState . setTimeExpected ( expected ) ; } } if ( overdueMillis > 0L ) { Date overdue = secondState . getTimeOverdue ( ) ; if ( overdue == null ) { overdue = add ( firstTime , overdueMillis ) ; secondState . setTimeOverdue ( overdue ) ; } } } public void processExpired ( ActivityState activityState ) throws Exception { Processor processor = getOverdueAction ( ) ; if ( processor != null ) { Date now = new Date ( ) ; ActivityState secondState = activityState ; Date overdue = secondState . getTimeOverdue ( ) ; if ( now . compareTo ( overdue ) >= 0 ) { Exchange exchange = createExchange ( ) ; exchange . getIn ( ) . setBody ( activityState ) ; processor . process ( exchange ) ; } else { LOG . warn ( "Process has not actually expired; the time is: " + now + " but the overdue time is: " + overdue ) ; } } } protected Exchange createExchange ( ) { return new DefaultExchange ( second . getBuilder ( ) . getProcessBuilder ( ) . getContext ( ) ) ; } protected Date add ( Date date , long millis ) { return new Date ( date . getTime ( ) + millis ) ; } protected void doStart ( ) throws Exception { startServices ( getOverdueAction ( ) ) ; } protected void doStop ( ) throws Exception { stopServices ( getOverdueAction ( ) ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . spi . Synchronization ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultUnitOfWork implements UnitOfWork { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; private String id ; private List < Synchronization > synchronizations ; private List < AsyncCallback > asyncCallbacks ; private CountDownLatch latch ; public DefaultUnitOfWork ( ) { } public synchronized void addSynchronization ( Synchronization synchronization ) { if ( synchronizations == null ) { synchronizations = new ArrayList < Synchronization > ( ) ; } synchronizations . add ( synchronization ) ; } public synchronized void removeSynchronization ( Synchronization synchronization ) { if ( synchronizations != null ) { synchronizations . remove ( synchronization ) ; } } public void reset ( ) { } public void done ( Exchange exchange ) { if ( synchronizations != null ) { boolean failed = exchange . isFailed ( ) ; for ( Synchronization synchronization : synchronizations ) { if ( failed ) { synchronization . onFailure ( exchange ) ; } else { synchronization . onComplete ( exchange ) ; } } } } public boolean isSynchronous ( ) { return asyncCallbacks == null || asyncCallbacks . isEmpty ( ) ; } public String getId ( ) { if ( id == null ) { id = DEFAULT_ID_GENERATOR . generateId ( ) ; } return id ; } } 	1
package org . apache . camel . util ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class EndpointHelper { private static final transient Log LOG = LogFactory . getLog ( EndpointHelper . class ) ; private EndpointHelper ( ) { } public static void pollEndpoint ( Endpoint endpoint , Processor processor , long timeout ) throws Exception { PollingConsumer consumer = endpoint . createPollingConsumer ( ) ; try { consumer . start ( ) ; while ( true ) { Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { break ; } else { processor . process ( exchange ) ; } } } finally { try { consumer . stop ( ) ; } catch ( Exception e ) { LOG . warn ( "Failed to stop PollingConsumer: " + e , e ) ; } } } public static void pollEndpoint ( Endpoint endpoint , Processor processor ) throws Exception { pollEndpoint ( endpoint , processor , 1000L ) ; } } 	0
package org . apache . camel . model ; public class NodeFactory { public FilterType createFilter ( ) { return new FilterType ( ) ; } public RouteType createRoute ( ) { return new RouteType ( ) ; } } 	1
package org . apache . camel . component . jms ; import java . util . concurrent . FutureTask ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; import java . util . concurrent . atomic . AtomicBoolean ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . Session ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeTimedOutException ; import org . apache . camel . FailedToCreateProducerException ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . RuntimeExchangeException ; import org . apache . camel . component . jms . JmsConfiguration . CamelJmsTemplate ; import org . apache . camel . component . jms . requestor . DeferredRequestReplyMap ; import org . apache . camel . component . jms . requestor . DeferredRequestReplyMap . DeferredMessageSentCallback ; import org . apache . camel . component . jms . requestor . PersistentReplyToRequestor ; import org . apache . camel . component . jms . requestor . Requestor ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . UuidGenerator ; import org . apache . camel . util . ValueHolder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . MessageCreator ; public class JmsProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( JmsProducer . class ) ; RequestorAffinity affinity ; private final JmsEndpoint endpoint ; private JmsOperations inOnlyTemplate ; private JmsOperations inOutTemplate ; private UuidGenerator uuidGenerator ; private DeferredRequestReplyMap deferredRequestReplyMap ; private Requestor requestor ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private enum RequestorAffinity { PER_COMPONENT ( 0 ) , PER_ENDPOINT ( 1 ) , PER_PRODUCER ( 2 ) ; private int value ; private RequestorAffinity ( int value ) { this . value = value ; } } ; public JmsProducer ( JmsEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; JmsConfiguration c = endpoint . getConfiguration ( ) ; affinity = RequestorAffinity . PER_PRODUCER ; if ( c . getReplyTo ( ) != null ) { if ( c . getReplyToTempDestinationAffinity ( ) . equals ( c . REPLYTO_TEMP_DEST_AFFINITY_PER_ENDPOINT ) ) { affinity = RequestorAffinity . PER_ENDPOINT ; } else if ( c . getReplyToTempDestinationAffinity ( ) . equals ( c . REPLYTO_TEMP_DEST_AFFINITY_PER_COMPONENT ) ) { affinity = RequestorAffinity . PER_COMPONENT ; } } } public long getRequestTimeout ( ) { return endpoint . getRequestTimeout ( ) ; } protected void doStart ( ) throws Exception { super . doStart ( ) ; } protected void testAndSetRequestor ( ) throws RuntimeCamelException { if ( ! started . get ( ) ) { synchronized ( this ) { if ( started . get ( ) ) { return ; } try { JmsConfiguration c = endpoint . getConfiguration ( ) ; if ( c . getReplyTo ( ) != null ) { requestor = new PersistentReplyToRequestor ( endpoint . getConfiguration ( ) , endpoint . getExecutorService ( ) ) ; requestor . start ( ) ; } else { if ( affinity == RequestorAffinity . PER_PRODUCER ) { requestor = new Requestor ( endpoint . getConfiguration ( ) , endpoint . getExecutorService ( ) ) ; requestor . start ( ) ; } else if ( affinity == RequestorAffinity . PER_ENDPOINT ) { requestor = endpoint . getRequestor ( ) ; } else if ( affinity == RequestorAffinity . PER_COMPONENT ) { requestor = ( ( JmsComponent ) endpoint . getComponent ( ) ) . getRequestor ( ) ; } } } catch ( Exception e ) { throw new FailedToCreateProducerException ( endpoint , e ) ; } deferredRequestReplyMap = requestor . getDeferredRequestReplyMap ( this ) ; started . set ( true ) ; } } } protected void testAndUnsetRequestor ( ) throws Exception { if ( started . get ( ) ) { synchronized ( this ) { if ( ! started . get ( ) ) { return ; } requestor . removeDeferredRequestReplyMap ( this ) ; if ( affinity == RequestorAffinity . PER_PRODUCER ) { requestor . stop ( ) ; } started . set ( false ) ; } } } protected void doStop ( ) throws Exception { testAndUnsetRequestor ( ) ; super . doStop ( ) ; } public void process ( final Exchange exchange ) { final org . apache . camel . Message in = exchange . getIn ( ) ; if ( exchange . getPattern ( ) . isOutCapable ( ) ) { testAndSetRequestor ( ) ; final Destination replyTo = requestor . getReplyTo ( ) ; if ( replyTo == null ) { throw new RuntimeExchangeException ( "Failed to resolve replyTo destination" , exchange ) ; } final boolean msgIdAsCorrId = endpoint . getConfiguration ( ) . isUseMessageIDAsCorrelationID ( ) ; String correlationId = in . getHeader ( "JMSCorrelationID" , String . class ) ; if ( correlationId == null && ! msgIdAsCorrId ) { in . setHeader ( "JMSCorrelationID" , getUuidGenerator ( ) . generateId ( ) ) ; } final ValueHolder < FutureTask > futureHolder = new ValueHolder < FutureTask > ( ) ; final DeferredMessageSentCallback callback = msgIdAsCorrId ? deferredRequestReplyMap . createDeferredMessageSentCallback ( ) : null ; final CamelJmsTemplate template = ( CamelJmsTemplate ) getInOutTemplate ( ) ; template . send ( endpoint . getDestination ( ) , new MessageCreator ( ) { public Message createMessage ( Session session ) throws JMSException { Message message = endpoint . getBinding ( ) . makeJmsMessage ( exchange , in , session ) ; message . setJMSReplyTo ( replyTo ) ; requestor . setReplyToSelectorHeader ( in , message ) ; FutureTask future = null ; future = ( ! msgIdAsCorrId ) ? requestor . getReceiveFuture ( message . getJMSCorrelationID ( ) , endpoint . getRequestTimeout ( ) ) : requestor . getReceiveFuture ( callback ) ; futureHolder . set ( future ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " sending JMS message: " + message ) ; } return message ; } } , callback ) ; setMessageId ( exchange ) ; long requestTimeout = endpoint . getRequestTimeout ( ) ; try { Message message = null ; try { if ( requestTimeout < 0 ) { message = ( Message ) futureHolder . get ( ) . get ( ) ; } else { message = ( Message ) futureHolder . get ( ) . get ( requestTimeout , TimeUnit . MILLISECONDS ) ; } } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Future interupted: " + e , e ) ; } } catch ( TimeoutException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Future timed out: " + e , e ) ; } } if ( message != null ) { exchange . setOut ( new JmsMessage ( message , endpoint . getBinding ( ) ) ) ; if ( correlationId != null ) { message . setJMSCorrelationID ( correlationId ) ; exchange . getOut ( false ) . setHeader ( "JMSCorrelationID" , correlationId ) ; } } else { exchange . setException ( new ExchangeTimedOutException ( exchange , requestTimeout ) ) ; } } catch ( Exception e ) { exchange . setException ( e ) ; } } else { getInOnlyTemplate ( ) . send ( endpoint . getDestination ( ) , new MessageCreator ( ) { public Message createMessage ( Session session ) throws JMSException { Message message = endpoint . getBinding ( ) . makeJmsMessage ( exchange , in , session ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " sending JMS message: " + message ) ; } return message ; } } ) ; setMessageId ( exchange ) ; } } protected void setMessageId ( Exchange exchange ) { if ( ! ( exchange instanceof JmsExchange ) ) { return ; } try { JmsExchange jmsExchange = JmsExchange . class . cast ( exchange ) ; JmsMessage out = jmsExchange . getOut ( false ) ; if ( out != null ) { out . setMessageId ( out . getJmsMessage ( ) . getJMSMessageID ( ) ) ; } } catch ( JMSException e ) { LOG . warn ( "Unable to retrieve JMSMessageID from outgoing JMS Message and " + "set it into Camel's MessageId" , e ) ; } } public JmsOperations getTemplate ( ) { return getInOnlyTemplate ( ) ; } public JmsOperations getInOnlyTemplate ( ) { if ( inOnlyTemplate == null ) { inOnlyTemplate = endpoint . createInOnlyTemplate ( ) ; } return inOnlyTemplate ; } public void setInOnlyTemplate ( JmsOperations inOnlyTemplate ) { this . inOnlyTemplate = inOnlyTemplate ; } public JmsOperations getInOutTemplate ( ) { if ( inOutTemplate == null ) { inOutTemplate = endpoint . createInOutTemplate ( ) ; } return inOutTemplate ; } public void setInOutTemplate ( JmsOperations inOutTemplate ) { this . inOutTemplate = inOutTemplate ; } public UuidGenerator getUuidGenerator ( ) { if ( uuidGenerator == null ) { uuidGenerator = new UuidGenerator ( ) ; } return uuidGenerator ; } public void setUuidGenerator ( UuidGenerator uuidGenerator ) { this . uuidGenerator = uuidGenerator ; } } 	0
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class BeanExchange extends DefaultExchange { public BeanExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public BeanExchange ( DefaultExchange parent ) { super ( parent ) ; } public BeanInvocation getInvocation ( ) { return getIn ( ) . getBody ( BeanInvocation . class ) ; } public void setInvocation ( BeanInvocation invocation ) { getIn ( ) . setBody ( invocation ) ; } @ Override public Exchange newInstance ( ) { return new BeanExchange ( this ) ; } } 	1
package org . apache . camel . component . irc ; import org . apache . camel . CamelContext ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class IrcExchange extends DefaultExchange { private IrcBinding binding ; public IrcExchange ( CamelContext context , ExchangePattern pattern , IrcBinding binding ) { super ( context , pattern ) ; this . binding = binding ; } public IrcExchange ( CamelContext context , ExchangePattern pattern , IrcBinding binding , IrcMessage inMessage ) { this ( context , pattern , binding ) ; setIn ( inMessage ) ; } public IrcExchange ( DefaultExchange parent , IrcBinding binding ) { super ( parent ) ; this . binding = binding ; } public IrcBinding getBinding ( ) { return binding ; } public void setBinding ( IrcBinding binding ) { this . binding = binding ; } @ Override public IrcMessage getIn ( ) { return ( IrcMessage ) super . getIn ( ) ; } @ Override public IrcMessage getOut ( ) { return ( IrcMessage ) super . getOut ( ) ; } @ Override public IrcMessage getOut ( boolean lazyCreate ) { return ( IrcMessage ) super . getOut ( lazyCreate ) ; } @ Override public IrcMessage getFault ( ) { return ( IrcMessage ) super . getFault ( ) ; } @ Override public IrcExchange newInstance ( ) { return new IrcExchange ( this , getBinding ( ) ) ; } @ Override protected IrcMessage createInMessage ( ) { return new IrcMessage ( ) ; } @ Override protected IrcMessage createOutMessage ( ) { return new IrcMessage ( ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . processor . ErrorHandlerSupport ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannelBuilder extends ErrorHandlerBuilderSupport { private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; private ExceptionPolicyStrategy exceptionPolicyStrategy = ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ; private ProcessorFactory deadLetterFactory ; private Processor defaultDeadLetterEndpoint ; private Expression defaultDeadLetterEndpointExpression ; private String defaultDeadLetterEndpointUri = "log:org.apache.camel.DeadLetterChannel?level=error" ; private Logger logger = DeadLetterChannel . createDefaultLogger ( ) ; public DeadLetterChannelBuilder ( ) { } public DeadLetterChannelBuilder ( Processor processor ) { this ( new ConstantProcessorBuilder ( processor ) ) ; } public DeadLetterChannelBuilder ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public ErrorHandlerBuilder copy ( ) { DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( deadLetterFactory ) ; answer . setRedeliveryPolicy ( getRedeliveryPolicy ( ) . copy ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { Processor deadLetter = getDeadLetterFactory ( ) . createProcessor ( ) ; DeadLetterChannel answer = new DeadLetterChannel ( processor , deadLetter , getRedeliveryPolicy ( ) , getLogger ( ) , getExceptionPolicyStrategy ( ) ) ; configure ( answer ) ; return answer ; } public DeadLetterChannelBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public DeadLetterChannelBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public DeadLetterChannelBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { getRedeliveryPolicy ( ) . maximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public DeadLetterChannelBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public DeadLetterChannelBuilder logger ( Logger logger ) { setLogger ( logger ) ; return this ; } public DeadLetterChannelBuilder loggingLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; return this ; } public DeadLetterChannelBuilder log ( Log log ) { getLogger ( ) . setLog ( log ) ; return this ; } public DeadLetterChannelBuilder log ( String log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder log ( Class log ) { return log ( LogFactory . getLog ( log ) ) ; } public ErrorHandlerBuilderSupport exceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { setExceptionPolicyStrategy ( exceptionPolicyStrategy ) ; return this ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ProcessorFactory getDeadLetterFactory ( ) { if ( deadLetterFactory == null ) { deadLetterFactory = new ProcessorFactory ( ) { public Processor createProcessor ( ) { return getDefaultDeadLetterEndpoint ( ) ; } } ; } return deadLetterFactory ; } public void setDeadLetterFactory ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public Processor getDefaultDeadLetterEndpoint ( ) { if ( defaultDeadLetterEndpoint == null ) { defaultDeadLetterEndpoint = new RecipientList ( getDefaultDeadLetterEndpointExpression ( ) ) ; } return defaultDeadLetterEndpoint ; } public void setDefaultDeadLetterEndpoint ( Processor defaultDeadLetterEndpoint ) { this . defaultDeadLetterEndpoint = defaultDeadLetterEndpoint ; } public Expression getDefaultDeadLetterEndpointExpression ( ) { if ( defaultDeadLetterEndpointExpression == null ) { defaultDeadLetterEndpointExpression = ExpressionBuilder . constantExpression ( getDefaultDeadLetterEndpointUri ( ) ) ; } return defaultDeadLetterEndpointExpression ; } public void setDefaultDeadLetterEndpointExpression ( Expression defaultDeadLetterEndpointExpression ) { this . defaultDeadLetterEndpointExpression = defaultDeadLetterEndpointExpression ; } public String getDefaultDeadLetterEndpointUri ( ) { return defaultDeadLetterEndpointUri ; } public void setDefaultDeadLetterEndpointUri ( String defaultDeadLetterEndpointUri ) { this . defaultDeadLetterEndpointUri = defaultDeadLetterEndpointUri ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } public ExceptionPolicyStrategy getExceptionPolicyStrategy ( ) { return exceptionPolicyStrategy ; } public void setExceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . exceptionPolicyStrategy = exceptionPolicyStrategy ; } } 	1
package org . apache . camel . impl ; import java . util . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . RouteContext ; public class DelegateLifecycleStrategy implements LifecycleStrategy { private final LifecycleStrategy delegate ; public DelegateLifecycleStrategy ( LifecycleStrategy delegate ) { this . delegate = delegate ; } public void onContextStart ( CamelContext context ) { delegate . onContextStart ( context ) ; } public void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) { delegate . onEndpointAdd ( endpoint ) ; } public void onRouteContextCreate ( RouteContext routeContext ) { delegate . onRouteContextCreate ( routeContext ) ; } public void onRoutesAdd ( Collection < Route > routes ) { delegate . onRoutesAdd ( routes ) ; } public void onServiceAdd ( CamelContext context , Service service ) { delegate . onServiceAdd ( context , service ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RoutingSlip extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( RoutingSlip . class ) ; private final String header ; private final String uriDelimiter ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RoutingSlip ( String header ) { this ( header , RoutingSlipType . DEFAULT_DELIMITER ) ; } public RoutingSlip ( String header , String uriDelimiter ) { notNull ( header , "header" ) ; notNull ( uriDelimiter , "uriDelimiter" ) ; this . header = header ; this . uriDelimiter = uriDelimiter ; } @ Override public String toString ( ) { return "RoutingSlip[header=" + header + " uriDelimiter=" + uriDelimiter + "]" ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getIn ( ) ; String [ ] recipients = recipients ( message ) ; Exchange current = exchange ; for ( String nextRecipient : recipients ) { Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , nextRecipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; Exchange ex = endpoint . createExchange ( ExchangePattern . InOut ) ; updateRoutingSlip ( current ) ; copyOutToIn ( ex , current ) ; producer . process ( ex ) ; current = ex ; } ExchangeHelper . copyResults ( exchange , current ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } private void updateRoutingSlip ( Exchange current ) { Message message = getResultMessage ( current ) ; message . setHeader ( header , removeFirstElement ( recipients ( message ) ) ) ; } private Message getResultMessage ( Exchange exchange ) { Message message = exchange . getOut ( false ) ; if ( message == null ) { message = exchange . getIn ( ) ; } return message ; } private String [ ] recipients ( Message message ) { Object headerValue = message . getHeader ( header ) ; if ( headerValue != null && ! headerValue . equals ( "" ) ) { return headerValue . toString ( ) . split ( uriDelimiter ) ; } return new String [ ] { } ; } private String removeFirstElement ( String [ ] elements ) { CollectionStringBuffer updatedElements = new CollectionStringBuffer ( uriDelimiter ) ; for ( int i = 1 ; i < elements . length ; i ++ ) { updatedElements . append ( elements [ i ] ) ; } return updatedElements . toString ( ) ; } private void copyOutToIn ( Exchange result , Exchange source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } result . setIn ( getResultMessage ( source ) ) ; result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } 	1
package org . apache . camel . language . jxpath ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "jxpath" ) public @ interface JXPath { String value ( ) ; } 	0
package org . apache . camel . component . log ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . util . ObjectHelper ; public class LogFormatter implements ExchangeFormatter { private boolean showExchangeId ; private boolean showProperties ; private boolean showHeaders ; private boolean showBodyType = true ; private boolean showBody = true ; private boolean showOut ; private boolean showAll ; private boolean multiline ; public Object format ( Exchange exchange ) { Message in = exchange . getIn ( ) ; StringBuilder sb = new StringBuilder ( "" ) ; if ( showAll || showExchangeId ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Id:" ) . append ( exchange . getExchangeId ( ) ) ; } if ( showAll || showProperties ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Properties:" ) . append ( exchange . getProperties ( ) ) ; } if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Headers:" ) . append ( in . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", BodyType:" ) . append ( getBodyTypeAsString ( in ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Body:" ) . append ( getBodyAsString ( in ) ) ; } Message out = exchange . getOut ( false ) ; if ( showAll || showOut ) { if ( out != null ) { if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutHeaders:" ) . append ( out . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBodyType:" ) . append ( getBodyTypeAsString ( out ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBody:" ) . append ( getBodyAsString ( out ) ) ; } } else { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Out: null" ) ; } } return "Exchange[" + ( multiline ? sb . append ( ']' ) . toString ( ) : sb . toString ( ) . substring ( 2 ) + "]" ) ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowOut ( ) { return showOut ; } public void setShowOut ( boolean showOut ) { this . showOut = showOut ; } public boolean isShowAll ( ) { return showAll ; } public void setShowAll ( boolean showAll ) { this . showAll = showAll ; } public boolean isMultiline ( ) { return multiline ; } public void setMultiline ( boolean multiline ) { this . multiline = multiline ; } protected Object getBodyAsString ( Message message ) { Object answer = message . getBody ( String . class ) ; if ( answer == null ) { answer = message . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } } 	1
package org . apache . camel . model . language ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . XmlValue ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . impl . DefaultRouteContext ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; @ XmlType ( name = "expressionType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExpressionType implements Expression < Exchange > , Predicate < Exchange > { @ XmlAttribute @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlValue private String expression ; @ XmlTransient private Predicate predicate ; @ XmlTransient private Expression expressionValue ; @ XmlTransient private ExpressionType expressionType ; public ExpressionType ( ) { } public ExpressionType ( String expression ) { this . expression = expression ; } public ExpressionType ( Predicate predicate ) { this . predicate = predicate ; } public ExpressionType ( Expression expression ) { this . expressionValue = expression ; } public static String getLabel ( List < ExpressionType > expressions ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; for ( ExpressionType expression : expressions ) { buffer . append ( expression . getLabel ( ) ) ; } return buffer . toString ( ) ; } @ Override public String toString ( ) { return getLanguage ( ) + "Expression[" + getExpression ( ) + "]" ; } public Object evaluate ( Exchange exchange ) { if ( expressionValue == null ) { RouteContext routeContext = new DefaultRouteContext ( exchange . getContext ( ) ) ; expressionValue = createExpression ( routeContext ) ; } ObjectHelper . notNull ( expressionValue , "expressionValue" ) ; return expressionValue . evaluate ( exchange ) ; } public void assertMatches ( String text , Exchange exchange ) throws AssertionError { if ( ! matches ( exchange ) ) { throw new AssertionError ( text + getExpression ( ) + " for exchange: " + exchange ) ; } } public boolean matches ( Exchange exchange ) { if ( predicate == null ) { RouteContext routeContext = new DefaultRouteContext ( exchange . getContext ( ) ) ; predicate = createPredicate ( routeContext ) ; } ObjectHelper . notNull ( predicate , "predicate" ) ; return predicate . matches ( exchange ) ; } public String getLanguage ( ) { return "" ; } public Predicate < Exchange > createPredicate ( RouteContext routeContext ) { if ( predicate == null ) { if ( expressionType != null ) { predicate = expressionType . createPredicate ( routeContext ) ; } else { CamelContext camelContext = routeContext . getCamelContext ( ) ; Language language = camelContext . resolveLanguage ( getLanguage ( ) ) ; predicate = language . createPredicate ( getExpression ( ) ) ; configurePredicate ( routeContext , predicate ) ; } } return predicate ; } public Expression createExpression ( RouteContext routeContext ) { if ( expressionValue == null ) { if ( expressionType != null ) { expressionValue = expressionType . createExpression ( routeContext ) ; } else { CamelContext camelContext = routeContext . getCamelContext ( ) ; Language language = camelContext . resolveLanguage ( getLanguage ( ) ) ; expressionValue = language . createExpression ( getExpression ( ) ) ; configureExpression ( routeContext , expressionValue ) ; } } return expressionValue ; } public String getExpression ( ) { return expression ; } public void setExpression ( String expression ) { this . expression = expression ; } public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Predicate getPredicate ( ) { return predicate ; } public Expression getExpressionValue ( ) { return expressionValue ; } protected void setExpressionValue ( Expression expressionValue ) { this . expressionValue = expressionValue ; } public String getLabel ( ) { String language = getExpression ( ) ; if ( ObjectHelper . isNullOrBlank ( language ) ) { Predicate predicate = getPredicate ( ) ; if ( predicate != null ) { return predicate . toString ( ) ; } Expression expressionValue = getExpressionValue ( ) ; if ( expressionValue != null ) { return expressionValue . toString ( ) ; } } else { return language ; } return "" ; } protected void setExpressionType ( ExpressionType expressionType ) { this . expressionType = expressionType ; } protected void configurePredicate ( RouteContext routeContext , Predicate predicate ) { } protected void configureExpression ( RouteContext routeContext , Expression expression ) { } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . idempotent . IdempotentConsumer ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "idempotentConsumer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class IdempotentConsumerType extends ExpressionNode { @ XmlAttribute private String messageIdRepositoryRef ; @ XmlTransient private MessageIdRepository messageIdRepository ; public IdempotentConsumerType ( ) { } public IdempotentConsumerType ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { super ( messageIdExpression ) ; this . messageIdRepository = messageIdRepository ; } @ Override public String toString ( ) { return "IdempotentConsumer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "idempotentConsumer" ; } public String getMessageIdRepositoryRef ( ) { return messageIdRepositoryRef ; } public void setMessageIdRepositoryRef ( String messageIdRepositoryRef ) { this . messageIdRepositoryRef = messageIdRepositoryRef ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public void setMessageIdRepository ( MessageIdRepository messageIdRepository ) { this . messageIdRepository = messageIdRepository ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; MessageIdRepository messageIdRepository = resolveMessageIdRepository ( routeContext ) ; return new IdempotentConsumer ( getExpression ( ) . createExpression ( routeContext ) , messageIdRepository , childProcessor ) ; } public MessageIdRepository resolveMessageIdRepository ( RouteContext routeContext ) { if ( messageIdRepository == null ) { messageIdRepository = routeContext . lookup ( messageIdRepositoryRef , MessageIdRepository . class ) ; } return messageIdRepository ; } } 	1
package org . apache . camel . spring . util ; import java . lang . annotation . Annotation ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; public class ReflectionUtils extends org . springframework . util . ReflectionUtils { public static < T extends Annotation > void callLifecycleMethod ( final Object bean , final Class < T > annotation ) { ReflectionUtils . doWithMethods ( bean . getClass ( ) , new ReflectionUtils . MethodCallback ( ) { public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { if ( method . getAnnotation ( annotation ) != null ) { try { method . invoke ( bean , ( Object [ ] ) null ) ; } catch ( IllegalArgumentException ex ) { throw new IllegalStateException ( "Failure to invoke " + method + " on " + bean . getClass ( ) + ": args=[]" , ex ) ; } catch ( IllegalAccessException ex ) { throw new UnsupportedOperationException ( ex . toString ( ) ) ; } catch ( InvocationTargetException ex ) { throw new UnsupportedOperationException ( "PostConstruct method on bean threw exception" , ex . getTargetException ( ) ) ; } } } } ) ; } public static void setField ( Field f , Object instance , Object value ) { try { boolean oldAccessible = f . isAccessible ( ) ; boolean shouldSetAccessible = ! Modifier . isPublic ( f . getModifiers ( ) ) && ! oldAccessible ; if ( shouldSetAccessible ) { f . setAccessible ( true ) ; } f . set ( instance , value ) ; if ( shouldSetAccessible ) { f . setAccessible ( oldAccessible ) ; } } catch ( IllegalArgumentException ex ) { throw new UnsupportedOperationException ( "Cannot inject value of class '" + value . getClass ( ) + "' into " + f ) ; } catch ( IllegalAccessException ex ) { ReflectionUtils . handleReflectionException ( ex ) ; } } } 	0
package org . apache . camel ; import java . util . List ; public interface Routes { CamelContext getContext ( ) ; void setContext ( CamelContext context ) ; List < Route > getRouteList ( ) throws Exception ; } 	1
package org . apache . camel ; public interface Predicate < E > { boolean matches ( E exchange ) ; void assertMatches ( String text , E exchange ) throws AssertionError ; } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . ObjectHelper ; public class TraceFormatter { private boolean showBreadCrumb = true ; private boolean showNode = true ; private boolean showExchangeId ; private boolean showProperties = true ; private boolean showHeaders = true ; private boolean showBody = true ; private boolean showBodyType = true ; public Object format ( TraceInterceptor interceptor , Exchange exchange ) { Message in = exchange . getIn ( ) ; Throwable exception = exchange . getException ( ) ; return ( showBreadCrumb ? getBreadCrumbID ( exchange ) + " " : "" ) + "-> " + getNodeMessage ( interceptor ) + " " + ( showNode ? interceptor . getNode ( ) + " " : "" ) + exchange . getPattern ( ) + ( showExchangeId ? " Id: " + exchange . getExchangeId ( ) : "" ) + ( showProperties ? " Properties:" + exchange . getProperties ( ) : "" ) + ( showHeaders ? " Headers:" + in . getHeaders ( ) : "" ) + ( showBodyType ? " BodyType:" + getBodyTypeAsString ( in ) : "" ) + ( showBody ? " Body:" + getBodyAsString ( in ) : "" ) + ( exception != null ? " Exception: " + exception : "" ) ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBreadCrumb ( ) { return showBreadCrumb ; } public void setShowBreadCrumb ( boolean showBreadCrumb ) { this . showBreadCrumb = showBreadCrumb ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowNode ( ) { return showNode ; } public void setShowNode ( boolean showNode ) { this . showNode = showNode ; } protected Object getBreadCrumbID ( Exchange exchange ) { UnitOfWork unitOfWork = exchange . getUnitOfWork ( ) ; return unitOfWork . getId ( ) ; } protected Object getBodyAsString ( Message in ) { Object answer = in . getBody ( String . class ) ; if ( answer == null ) { answer = in . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } protected String getNodeMessage ( TraceInterceptor interceptor ) { return interceptor . getNode ( ) . idOrCreate ( ) ; } } 	1
package org . apache . camel . component . irc ; import java . net . URI ; import org . apache . camel . RuntimeCamelException ; public class IrcConfiguration implements Cloneable { String target ; String hostname ; String password ; String nickname ; String realname ; String username ; boolean persistent = true ; boolean colors = true ; boolean onNick = true ; boolean onQuit = true ; boolean onJoin = true ; boolean onKick = true ; boolean onMode = true ; boolean onPart = true ; boolean onTopic = true ; boolean onPrivmsg = true ; int [ ] ports = { 6667 , 6668 , 6669 } ; public IrcConfiguration ( ) { } public IrcConfiguration ( String hostname , String nickname , String displayname , String target ) { this . target = target ; this . hostname = hostname ; this . nickname = nickname ; this . username = nickname ; this . realname = displayname ; } public IrcConfiguration ( String hostname , String username , String password , String nickname , String displayname , String target ) { this . target = target ; this . hostname = hostname ; this . username = username ; this . password = password ; this . nickname = nickname ; this . realname = displayname ; } public IrcConfiguration copy ( ) { try { return ( IrcConfiguration ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeCamelException ( e ) ; } } public String getCacheKey ( ) { return hostname + ":" + nickname ; } public void configure ( URI uri ) { setNickname ( uri . getUserInfo ( ) ) ; setUsername ( uri . getUserInfo ( ) ) ; setRealname ( uri . getUserInfo ( ) ) ; setHostname ( uri . getHost ( ) ) ; setTarget ( uri . getPath ( ) . substring ( 1 ) ) ; } public String getHostname ( ) { return hostname ; } public void setHostname ( String hostname ) { this . hostname = hostname ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getNickname ( ) { return nickname ; } public void setNickname ( String nickname ) { this . nickname = nickname ; } public String getRealname ( ) { return realname ; } public void setRealname ( String realname ) { this . realname = realname ; } public String getUsername ( ) { return username ; } public void setUsername ( String username ) { this . username = username ; } public int [ ] getPorts ( ) { return ports ; } public void setPorts ( int [ ] ports ) { this . ports = ports ; } public String getTarget ( ) { return target ; } public void setTarget ( String target ) { this . target = target ; } public boolean isPersistent ( ) { return persistent ; } public void setPersistent ( boolean persistent ) { this . persistent = persistent ; } public boolean isColors ( ) { return colors ; } public void setColors ( boolean colors ) { this . colors = colors ; } public boolean isOnNick ( ) { return onNick ; } public void setOnNick ( boolean onNick ) { this . onNick = onNick ; } public boolean isOnQuit ( ) { return onQuit ; } public void setOnQuit ( boolean onQuit ) { this . onQuit = onQuit ; } public boolean isOnJoin ( ) { return onJoin ; } public void setOnJoin ( boolean onJoin ) { this . onJoin = onJoin ; } public boolean isOnKick ( ) { return onKick ; } public void setOnKick ( boolean onKick ) { this . onKick = onKick ; } public boolean isOnMode ( ) { return onMode ; } public void setOnMode ( boolean onMode ) { this . onMode = onMode ; } public boolean isOnPart ( ) { return onPart ; } public void setOnPart ( boolean onPart ) { this . onPart = onPart ; } public boolean isOnTopic ( ) { return onTopic ; } public void setOnTopic ( boolean onTopic ) { this . onTopic = onTopic ; } public boolean isOnPrivmsg ( ) { return onPrivmsg ; } public void setOnPrivmsg ( boolean onPrivmsg ) { this . onPrivmsg = onPrivmsg ; } public String toString ( ) { return "IrcConfiguration{" + "target='" + target + '\'' + ", hostname='" + hostname + '\'' + ", password='" + password + '\'' + ", nickname='" + nickname + '\'' + ", realname='" + realname + '\'' + ", username='" + username + '\'' + ", persistent=" + persistent + ", colors=" + colors + ", onNick=" + onNick + ", onQuit=" + onQuit + ", onJoin=" + onJoin + ", onKick=" + onKick + ", onMode=" + onMode + ", onPart=" + onPart + ", onTopic=" + onTopic + ", onPrivmsg=" + onPrivmsg + ", ports=" + ports + '}' ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; public class CamelInvocationHandler implements InvocationHandler { private final Endpoint endpoint ; private final Producer producer ; public CamelInvocationHandler ( Endpoint endpoint , Producer producer ) { this . endpoint = endpoint ; this . producer = producer ; } public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { BeanInvocation invocation = new BeanInvocation ( method , args ) ; BeanExchange exchange = new BeanExchange ( endpoint . getCamelContext ( ) , ExchangePattern . InOut ) ; exchange . setInvocation ( invocation ) ; producer . process ( exchange ) ; Throwable fault = exchange . getException ( ) ; if ( fault != null ) { throw new InvocationTargetException ( fault ) ; } return exchange . getOut ( true ) . getBody ( ) ; } } 	1
package org . apache . camel . component . irc ; import java . util . Map ; import org . apache . camel . impl . DefaultMessage ; import org . schwering . irc . lib . IRCUser ; public class IrcMessage extends DefaultMessage { private String messageType ; private String target ; private IRCUser user ; private String whoWasKickedNick ; private String message ; public IrcMessage ( ) { } public IrcMessage ( String messageType , IRCUser user , String message ) { this . messageType = messageType ; this . user = user ; this . message = message ; } public IrcMessage ( String messageType , String target , IRCUser user , String message ) { this . messageType = messageType ; this . target = target ; this . user = user ; this . message = message ; } public IrcMessage ( String messageType , String target , IRCUser user , String whoWasKickedNick , String message ) { this . messageType = messageType ; this . target = target ; this . user = user ; this . whoWasKickedNick = whoWasKickedNick ; this . message = message ; } public IrcMessage ( String messageType , String target , IRCUser user ) { this . messageType = messageType ; this . target = target ; this . user = user ; } public String getMessageType ( ) { return messageType ; } public void setMessageType ( String messageType ) { this . messageType = messageType ; } public String getTarget ( ) { return target ; } public void setTarget ( String target ) { this . target = target ; } public IRCUser getUser ( ) { return user ; } public void setUser ( IRCUser user ) { this . user = user ; } public String getWhoWasKickedNick ( ) { return whoWasKickedNick ; } public void setWhoWasKickedNick ( String whoWasKickedNick ) { this . whoWasKickedNick = whoWasKickedNick ; } public String getMessage ( ) { return message ; } public void setMessage ( String message ) { this . message = message ; } @ Override public IrcExchange getExchange ( ) { return ( IrcExchange ) super . getExchange ( ) ; } @ Override protected Object createBody ( ) { IrcExchange ircExchange = getExchange ( ) ; IrcBinding binding = ircExchange . getBinding ( ) ; return binding . extractBodyFromIrc ( ircExchange , this ) ; } @ Override public IrcMessage newInstance ( ) { return new IrcMessage ( ) ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { map . put ( "irc.messageType" , messageType ) ; if ( target != null ) { map . put ( "irc.target" , target ) ; } if ( whoWasKickedNick != null ) { map . put ( "irc.user.kicked" , whoWasKickedNick ) ; } if ( user != null ) { map . put ( "irc.user.host" , user . getHost ( ) ) ; map . put ( "irc.user.nick" , user . getNick ( ) ) ; map . put ( "irc.user.servername" , user . getServername ( ) ) ; map . put ( "irc.user.username" , user . getUsername ( ) ) ; } } @ Override public String toString ( ) { if ( message != null ) { return "IrcMessage: " + message ; } else { return "IrcMessage: " + getBody ( ) ; } } } 	0
package org . apache . camel ; @ Deprecated public class InvalidHeaderTypeException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; private final Object headerValue ; public InvalidHeaderTypeException ( Throwable cause , Object headerValue ) { super ( cause . getMessage ( ) + " headerValue is: " + headerValue + " of type: " + typeName ( headerValue ) , cause ) ; this . headerValue = headerValue ; } public InvalidHeaderTypeException ( String message , Object headerValue ) { super ( message ) ; this . headerValue = headerValue ; } public Object getHeaderValue ( ) { return headerValue ; } protected static String typeName ( Object headerValue ) { return ( headerValue != null ) ? headerValue . getClass ( ) . getName ( ) : "null" ; } } 	1
package org . apache . camel . component . atom ; import java . io . IOException ; import java . util . Date ; import java . util . List ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Entry ; import org . apache . abdera . model . Feed ; import org . apache . abdera . parser . ParseException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class AtomEntryPollingConsumer extends AtomPollingConsumer { private Document < Feed > document ; private int entryIndex ; private EntryFilter entryFilter ; private List < Entry > list ; public AtomEntryPollingConsumer ( AtomEndpoint endpoint , Processor processor , boolean filter , Date lastUpdate ) { super ( endpoint , processor ) ; if ( filter ) { entryFilter = new UpdatedDateFilter ( lastUpdate ) ; } } public void poll ( ) throws Exception { getDocument ( ) ; Feed feed = document . getRoot ( ) ; while ( hasNextEntry ( ) ) { Entry entry = list . get ( entryIndex -- ) ; boolean valid = true ; if ( entryFilter != null ) { valid = entryFilter . isValidEntry ( endpoint , document , entry ) ; } if ( valid ) { Exchange exchange = endpoint . createExchange ( feed , entry ) ; getProcessor ( ) . process ( exchange ) ; return ; } } document = null ; } private Document < Feed > getDocument ( ) throws IOException , ParseException { if ( document == null ) { document = AtomUtils . parseDocument ( endpoint . getAtomUri ( ) ) ; list = document . getRoot ( ) . getEntries ( ) ; entryIndex = list . size ( ) - 1 ; } return document ; } private boolean hasNextEntry ( ) { return entryIndex >= 0 ; } } 	0
package org . apache . camel ; import java . util . Map ; import org . apache . camel . spi . UnitOfWork ; public interface Exchange { ExchangePattern getPattern ( ) ; void setPattern ( ExchangePattern pattern ) ; Object getProperty ( String name ) ; < T > T getProperty ( String name , Class < T > type ) ; void setProperty ( String name , Object value ) ; Object removeProperty ( String name ) ; Map < String , Object > getProperties ( ) ; Message getIn ( ) ; void setIn ( Message in ) ; Message getOut ( ) ; Message getOut ( boolean lazyCreate ) ; void setOut ( Message out ) ; Message getFault ( ) ; Message getFault ( boolean lazyCreate ) ; Throwable getException ( ) ; void setException ( Throwable e ) ; boolean isFailed ( ) ; boolean isTransacted ( ) ; CamelContext getContext ( ) ; Exchange newInstance ( ) ; Exchange copy ( ) ; void copyFrom ( Exchange source ) ; UnitOfWork getUnitOfWork ( ) ; void setUnitOfWork ( UnitOfWork unitOfWork ) ; String getExchangeId ( ) ; void setExchangeId ( String id ) ; } 	1
package org . apache . camel . component . file . remote ; import java . io . IOException ; import java . io . InputStream ; import com . jcraft . jsch . ChannelSftp ; import com . jcraft . jsch . JSchException ; import com . jcraft . jsch . Session ; import com . jcraft . jsch . SftpException ; import org . apache . camel . Exchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SftpProducer extends RemoteFileProducer < RemoteFileExchange > { private static final transient Log LOG = LogFactory . getLog ( SftpProducer . class ) ; private SftpEndpoint endpoint ; private ChannelSftp channel ; private Session session ; public SftpProducer ( SftpEndpoint endpoint , Session session ) { super ( endpoint ) ; this . endpoint = endpoint ; this . session = session ; } protected void connectIfNecessary ( ) throws JSchException { if ( channel == null || ! channel . isConnected ( ) ) { if ( session == null || ! session . isConnected ( ) ) { LOG . info ( "Session isn't connected, trying to recreate and connect..." ) ; session = endpoint . createSession ( ) ; session . connect ( ) ; } LOG . info ( "Channel isn't connected, trying to recreate and connect..." ) ; channel = endpoint . createChannelSftp ( session ) ; channel . connect ( ) ; LOG . info ( "Connected to " + endpoint . getConfiguration ( ) . toString ( ) ) ; } } protected void disconnect ( ) throws JSchException { if ( session != null ) { LOG . info ( "Session is being explicitly disconnected" ) ; session . disconnect ( ) ; } if ( channel != null ) { LOG . info ( "Channel is being explicitly disconnected" ) ; channel . disconnect ( ) ; } } public void process ( Exchange exchange ) throws Exception { connectIfNecessary ( ) ; try { process ( endpoint . createExchange ( exchange ) ) ; } catch ( JSchException e ) { LOG . warn ( "Disconnecting due to exception: " + e . toString ( ) ) ; disconnect ( ) ; throw e ; } catch ( SftpException e ) { LOG . warn ( "Caught SftpException:" + e . toString ( ) ) ; LOG . warn ( "Doing nothing for now, need to determine an appropriate action" ) ; throw e ; } } public void process ( RemoteFileExchange exchange ) throws Exception { InputStream payload = exchange . getIn ( ) . getBody ( InputStream . class ) ; try { String fileName = createFileName ( exchange . getIn ( ) , endpoint . getConfiguration ( ) ) ; int lastPathIndex = fileName . lastIndexOf ( '/' ) ; if ( lastPathIndex != - 1 ) { String directory = fileName . substring ( 0 , lastPathIndex ) ; boolean success = buildDirectory ( channel , directory ) ; if ( ! success ) { LOG . warn ( "Couldn't build directory: " + directory + " (either permissions deny it, or it already exists)" ) ; } } channel . put ( payload , fileName ) ; LOG . info ( "Sent: " + fileName + " to " + endpoint . getConfiguration ( ) ) ; } finally { if ( payload != null ) { payload . close ( ) ; } } } @ Override protected void doStart ( ) throws Exception { LOG . info ( "Starting" ) ; try { connectIfNecessary ( ) ; } catch ( JSchException e ) { LOG . warn ( "Couldn't connect to " + endpoint . getConfiguration ( ) ) ; } super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { LOG . info ( "Stopping" ) ; disconnect ( ) ; super . doStop ( ) ; } protected static boolean buildDirectory ( ChannelSftp sftpClient , String dirName ) throws IOException , SftpException { boolean atLeastOneSuccess = false ; final StringBuilder sb = new StringBuilder ( dirName . length ( ) ) ; final String [ ] dirs = dirName . split ( "\\/" ) ; for ( String dir : dirs ) { sb . append ( dir ) . append ( '/' ) ; String directory = sb . toString ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Trying to build directory: " + directory ) ; } sftpClient . mkdir ( directory ) ; if ( ! atLeastOneSuccess ) { atLeastOneSuccess = true ; } } return atLeastOneSuccess ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . RedeliveryPolicy ; @ XmlRootElement ( name = "redeliveryPolicy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RedeliveryPolicyType { private Integer maximumRedeliveries ; private Long initialRedeliveryDelay ; private Double backOffMultiplier ; private Boolean useExponentialBackOff ; private Double collisionAvoidanceFactor ; private Boolean useCollisionAvoidance ; public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; if ( maximumRedeliveries != null ) { answer . setMaximumRedeliveries ( maximumRedeliveries ) ; } if ( initialRedeliveryDelay != null ) { answer . setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; } if ( backOffMultiplier != null ) { answer . setBackOffMultiplier ( backOffMultiplier ) ; } if ( useExponentialBackOff != null ) { answer . setUseExponentialBackOff ( useExponentialBackOff ) ; } if ( collisionAvoidanceFactor != null ) { answer . setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; } if ( useCollisionAvoidance != null ) { answer . setUseCollisionAvoidance ( useCollisionAvoidance ) ; } return answer ; } public String toString ( ) { return "RedeliveryPolicy[maxRedeliveries: " + maximumRedeliveries + "]" ; } public RedeliveryPolicyType backOffMultiplier ( double backOffMultiplier ) { setBackOffMultiplier ( backOffMultiplier ) ; return this ; } public RedeliveryPolicyType collisionAvoidancePercent ( double collisionAvoidancePercent ) { setCollisionAvoidanceFactor ( collisionAvoidancePercent * 0.01d ) ; return this ; } public RedeliveryPolicyType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public RedeliveryPolicyType initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicyType maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicyType useCollisionAvoidance ( ) { setUseCollisionAvoidance ( Boolean . TRUE ) ; return this ; } public RedeliveryPolicyType useExponentialBackOff ( ) { setUseExponentialBackOff ( Boolean . TRUE ) ; return this ; } public Double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( Double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public Double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( Double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public Long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( Long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public Integer getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( Integer maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public Boolean getUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( Boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public Boolean getUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( Boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } } 	1
package org . apache . camel . spring . spi ; import org . apache . camel . Processor ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . ErrorHandlerBuilderSupport ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; import org . springframework . beans . factory . InitializingBean ; import org . springframework . transaction . support . TransactionTemplate ; public class TransactionErrorHandlerBuilder extends ErrorHandlerBuilderSupport implements Cloneable , InitializingBean { private TransactionTemplate transactionTemplate ; private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; public TransactionErrorHandlerBuilder ( ) { } public TransactionTemplate getTransactionTemplate ( ) { return transactionTemplate ; } public void setTransactionTemplate ( TransactionTemplate transactionTemplate ) { this . transactionTemplate = transactionTemplate ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ErrorHandlerBuilder copy ( ) { try { return ( ErrorHandlerBuilder ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new Error ( "Clone should be supported: " + e , e ) ; } } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { return new TransactionInterceptor ( processor , transactionTemplate , redeliveryPolicy ) ; } public void afterPropertiesSet ( ) throws Exception { ObjectHelper . notNull ( transactionTemplate , "transactionTemplate" ) ; } public TransactionErrorHandlerBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public TransactionErrorHandlerBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public TransactionErrorHandlerBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public TransactionErrorHandlerBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public TransactionErrorHandlerBuilder maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { getRedeliveryPolicy ( ) . maximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public TransactionErrorHandlerBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public TransactionErrorHandlerBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingErrorHandler ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandlerBuilder extends ErrorHandlerBuilderSupport { private Log log = LogFactory . getLog ( Logger . class ) ; private LoggingLevel level = LoggingLevel . INFO ; public LoggingErrorHandlerBuilder ( ) { } public LoggingErrorHandlerBuilder ( Log log ) { this . log = log ; } public LoggingErrorHandlerBuilder ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public ErrorHandlerBuilder copy ( ) { LoggingErrorHandlerBuilder answer = new LoggingErrorHandlerBuilder ( ) ; answer . setLog ( getLog ( ) ) ; answer . setLevel ( getLevel ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) { LoggingErrorHandler handler = new LoggingErrorHandler ( processor , log , level ) ; configure ( handler ) ; return handler ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } } 	1
package org . apache . camel . component . mail ; import java . io . IOException ; import java . util . Enumeration ; import java . util . Map ; import javax . activation . DataHandler ; import javax . mail . Header ; import javax . mail . Message ; import javax . mail . MessagingException ; import javax . mail . Multipart ; import javax . mail . Part ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultMessage ; import org . apache . camel . util . CollectionHelper ; public class MailMessage extends DefaultMessage { private Message mailMessage ; public MailMessage ( ) { } public MailMessage ( Message message ) { this . mailMessage = message ; } @ Override public String toString ( ) { if ( mailMessage != null ) { return "MailMessage: " + MailUtils . dumpMessage ( mailMessage ) ; } else { return "MailMessage: " + getBody ( ) ; } } @ Override public MailExchange getExchange ( ) { return ( MailExchange ) super . getExchange ( ) ; } public MailMessage copy ( ) { MailMessage answer = ( MailMessage ) super . copy ( ) ; answer . mailMessage = mailMessage ; return answer ; } public Message getMessage ( ) { return mailMessage ; } public void setMessage ( Message mailMessage ) { this . mailMessage = mailMessage ; } public Object getHeader ( String name ) { String [ ] answer = null ; if ( mailMessage != null ) { try { answer = mailMessage . getHeader ( name ) ; } catch ( MessagingException e ) { throw new RuntimeCamelException ( "Error accessing header: " + name , e ) ; } } if ( answer == null ) { return super . getHeader ( name ) ; } if ( answer . length == 1 ) { return answer [ 0 ] ; } return answer ; } @ Override public MailMessage newInstance ( ) { return new MailMessage ( ) ; } @ Override protected Object createBody ( ) { if ( mailMessage != null ) { return getExchange ( ) . getBinding ( ) . extractBodyFromMail ( getExchange ( ) , mailMessage ) ; } return null ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { if ( mailMessage != null ) { try { Enumeration names = mailMessage . getAllHeaders ( ) ; while ( names . hasMoreElements ( ) ) { Header header = ( Header ) names . nextElement ( ) ; String value = header . getValue ( ) ; String name = header . getName ( ) ; CollectionHelper . appendValue ( map , name , value ) ; } } catch ( MessagingException e ) { throw new RuntimeCamelException ( "Error accessing headers due to: " + e . getMessage ( ) , e ) ; } } } @ Override protected void populateInitialAttachments ( Map < String , DataHandler > map ) { if ( mailMessage != null ) { try { extractAttachments ( mailMessage , map ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Error populating the initial mail message attachments" , e ) ; } } } public void copyFrom ( org . apache . camel . Message that ) { super . copyFrom ( that ) ; if ( that instanceof MailMessage ) { MailMessage mailMessage = ( MailMessage ) that ; this . mailMessage = mailMessage . mailMessage ; } } protected static void extractAttachments ( Message message , Map < String , DataHandler > map ) throws javax . mail . MessagingException , IOException { Object content = message . getContent ( ) ; if ( content instanceof Multipart ) { Multipart mp = ( Multipart ) content ; for ( int i = 0 ; i < mp . getCount ( ) ; i ++ ) { Part part = mp . getBodyPart ( i ) ; String disposition = part . getDisposition ( ) ; if ( disposition != null ) { if ( disposition . equalsIgnoreCase ( Part . ATTACHMENT ) || disposition . equalsIgnoreCase ( Part . INLINE ) ) { if ( part . getFileName ( ) != null ) { CollectionHelper . appendValue ( map , part . getFileName ( ) , part . getDataHandler ( ) ) ; } } } } } } } 	0
package org . apache . camel . impl ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . util . ObjectHelper ; public abstract class DefaultEndpoint < E extends Exchange > implements Endpoint < E > , CamelContextAware { private String endpointUri ; private CamelContext camelContext ; private Component component ; private ScheduledExecutorService executorService ; private ExchangePattern exchangePattern = ExchangePattern . InOnly ; protected DefaultEndpoint ( String endpointUri , Component component ) { this ( endpointUri , component . getCamelContext ( ) ) ; this . component = component ; } protected DefaultEndpoint ( String endpointUri , CamelContext camelContext ) { this ( endpointUri ) ; this . camelContext = camelContext ; } protected DefaultEndpoint ( String endpointUri ) { this . setEndpointUri ( endpointUri ) ; } protected DefaultEndpoint ( ) { } public int hashCode ( ) { return getEndpointUri ( ) . hashCode ( ) * 37 + 1 ; } @ Override public boolean equals ( Object object ) { if ( object instanceof DefaultEndpoint ) { DefaultEndpoint that = ( DefaultEndpoint ) object ; return ObjectHelper . equal ( this . getEndpointUri ( ) , that . getEndpointUri ( ) ) ; } return false ; } @ Override public String toString ( ) { return "Endpoint[" + getEndpointUri ( ) + "]" ; } public String getEndpointUri ( ) { if ( endpointUri == null ) { endpointUri = createEndpointUri ( ) ; if ( endpointUri == null ) { throw new IllegalArgumentException ( "endpointUri is not specified and " + getClass ( ) . getName ( ) + " does not implement createEndpointUri() to create a default value" ) ; } } return endpointUri ; } public CamelContext getCamelContext ( ) { return camelContext ; } public Component getComponent ( ) { return component ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public synchronized ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { Component c = getComponent ( ) ; if ( c != null && c instanceof DefaultComponent ) { DefaultComponent dc = ( DefaultComponent ) c ; executorService = dc . getExecutorService ( ) ; } if ( executorService == null ) { executorService = createExecutorService ( ) ; } } return executorService ; } public synchronized void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } public PollingConsumer < E > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < E > ( this ) ; } public E convertTo ( Class < E > type , Exchange exchange ) { if ( type . isInstance ( exchange ) ) { return type . cast ( exchange ) ; } return getCamelContext ( ) . getExchangeConverter ( ) . convertTo ( type , exchange ) ; } public E createExchange ( Exchange exchange ) { Class < E > exchangeType = getExchangeType ( ) ; if ( exchangeType != null ) { if ( exchangeType . isInstance ( exchange ) ) { return exchangeType . cast ( exchange ) ; } } E answer = createExchange ( ) ; answer . copyFrom ( exchange ) ; return answer ; } public Class < E > getExchangeType ( ) { Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { return ( Class < E > ) argumentType ; } } } return null ; } public E createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public E createExchange ( ExchangePattern pattern ) { return ( E ) new DefaultExchange ( getCamelContext ( ) , pattern ) ; } public ExchangePattern getExchangePattern ( ) { return exchangePattern ; } public void setExchangePattern ( ExchangePattern exchangePattern ) { this . exchangePattern = exchangePattern ; } protected ScheduledThreadPoolExecutor createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( 10 ) ; } public void configureProperties ( Map options ) { } protected String createEndpointUri ( ) { return null ; } protected void setEndpointUri ( String endpointUri ) { this . endpointUri = endpointUri ; } @ Deprecated public CamelContext getContext ( ) { return getCamelContext ( ) ; } @ Deprecated public void setContext ( CamelContext context ) { setCamelContext ( context ) ; } } 	1
package org . apache . camel ; public class ExchangeTimedOutException extends CamelExchangeException { private final long timeout ; public ExchangeTimedOutException ( Exchange exchange , long timeout ) { super ( "The OUT message was not received within: " + timeout + " millis" , exchange ) ; this . timeout = timeout ; } public long getTimeout ( ) { return timeout ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultUnitOfWork ; public final class UnitOfWorkProcessor extends DelegateAsyncProcessor { public UnitOfWorkProcessor ( AsyncProcessor processor ) { super ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( exchange . getUnitOfWork ( ) == null ) { exchange . setUnitOfWork ( new DefaultUnitOfWork ( ) ) ; return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( sync ) ; exchange . getUnitOfWork ( ) . done ( exchange ) ; exchange . setUnitOfWork ( null ) ; } } ) ; } else { return processor . process ( exchange , callback ) ; } } } 	1
package org . apache . camel . component . cxf . invoker ; import java . util . IdentityHashMap ; import java . util . List ; import java . util . Map ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . w3c . dom . Element ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; public class PayloadInvokingContext extends AbstractInvokingContext { private static final Logger LOG = LogUtils . getL7dLogger ( PayloadInvokingContext . class ) ; public PayloadInvokingContext ( ) { } public void setRequestOutMessageContent ( Message message , Map < Class , Object > contents ) { PayloadMessage request = ( PayloadMessage ) contents . get ( PayloadMessage . class ) ; Element header = request . getHeader ( ) ; List < Element > payload = request . getPayload ( ) ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( "header = " + header + ", paylaod = " + payload ) ; } message . put ( Element . class , header ) ; message . put ( List . class , payload ) ; } @ SuppressWarnings ( "unchecked" ) public Object getResponseObject ( Exchange exchange , Map < String , Object > responseContext ) { PayloadMessage payloadMsg = null ; Message msg = exchange . getInMessage ( ) ; List < Element > payload = getResponseObject ( msg , responseContext , List . class ) ; Element header = exchange . getInMessage ( ) . get ( Element . class ) ; payloadMsg = new PayloadMessage ( payload , header ) ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( payloadMsg . toString ( ) ) ; } return payloadMsg ; } @ Override protected < T > T getResponseObject ( Message inMessage , Map < String , Object > responseContext , Class < T > clazz ) { T retval = null ; if ( inMessage != null ) { if ( null != responseContext ) { responseContext . putAll ( inMessage ) ; LOG . info ( "set responseContext to be" + responseContext ) ; } retval = inMessage . get ( clazz ) ; } return retval ; } public void setResponseContent ( Message outMessage , Object resultPayload ) { if ( resultPayload != null ) { PayloadMessage payloadMessage = ( PayloadMessage ) resultPayload ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( payloadMessage . toString ( ) ) ; } outMessage . put ( List . class , payloadMessage . getPayload ( ) ) ; outMessage . put ( Element . class , payloadMessage . getHeader ( ) ) ; } } @ SuppressWarnings ( "unchecked" ) public Map < Class , Object > getRequestContent ( Message inMessage ) { List < Element > payload = inMessage . get ( List . class ) ; Element header = inMessage . get ( Element . class ) ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( "Header = " + header + ", Payload = " + payload ) ; } Map < Class , Object > contents = new IdentityHashMap < Class , Object > ( ) ; contents . put ( PayloadMessage . class , new PayloadMessage ( payload , header ) ) ; return contents ; } @ Override protected Logger getLogger ( ) { return LOG ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; public class SerializationDataFormat implements DataFormat { public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { ObjectOutput out = IOConverter . toObjectOutput ( stream ) ; out . writeObject ( graph ) ; out . flush ( ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { ObjectInput in = IOConverter . toObjectInput ( stream ) ; return in . readObject ( ) ; } } 	1
package org . apache . camel ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class Route < E extends Exchange > { public static final String PARENT_PROPERTY = "parent" ; public static final String GROUP_PROPERTY = "group" ; private final Map < String , Object > properties = new HashMap < String , Object > ( 16 ) ; private Endpoint < E > endpoint ; private List < Service > services = new ArrayList < Service > ( ) ; public Route ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } public Route ( Endpoint < E > endpoint , Service ... services ) { this ( endpoint ) ; for ( Service service : services ) { addService ( service ) ; } } @ Override public String toString ( ) { return "Route" ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } public Map < String , Object > getProperties ( ) { return properties ; } public List < Service > getServicesForRoute ( ) throws Exception { List < Service > servicesForRoute = new ArrayList < Service > ( getServices ( ) ) ; addServices ( servicesForRoute ) ; return servicesForRoute ; } public List < Service > getServices ( ) { return services ; } public void setServices ( List < Service > services ) { this . services = services ; } public void addService ( Service service ) { getServices ( ) . add ( service ) ; } protected void addServices ( List < Service > services ) throws Exception { } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ProceedProcessor ; import org . apache . camel . processor . UnitOfWorkProcessor ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . RouteContext ; public class DefaultRouteContext implements RouteContext { private RouteType route ; private FromType from ; private Collection < Route > routes ; private Endpoint < ? extends Exchange > endpoint ; private List < Processor > eventDrivenProcessors = new ArrayList < Processor > ( ) ; private Interceptor lastInterceptor ; private CamelContext camelContext ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private ErrorHandlerWrappingStrategy errorHandlerWrappingStrategy ; private boolean routeAdded ; public DefaultRouteContext ( RouteType route , FromType from , Collection < Route > routes ) { this . route = route ; this . from = from ; this . routes = routes ; } public DefaultRouteContext ( CamelContext camelContext ) { this . camelContext = camelContext ; routes = new ArrayList < Route > ( ) ; route = new RouteType ( "temporary" ) ; } public Endpoint < ? extends Exchange > getEndpoint ( ) { if ( endpoint == null ) { endpoint = from . resolveEndpoint ( this ) ; } return endpoint ; } public FromType getFrom ( ) { return from ; } public RouteType getRoute ( ) { return route ; } public CamelContext getCamelContext ( ) { if ( camelContext == null ) { camelContext = getRoute ( ) . getCamelContext ( ) ; } return camelContext ; } public Processor createProcessor ( ProcessorType node ) throws Exception { return node . createOutputsProcessor ( this ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) { return route . resolveEndpoint ( uri ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) { Endpoint < ? extends Exchange > endpoint = null ; if ( uri != null ) { endpoint = resolveEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } } if ( ref != null ) { endpoint = lookup ( ref , Endpoint . class ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( "ref:" + ref ) ; } } if ( endpoint == null ) { throw new IllegalArgumentException ( "Either 'uri' or 'ref' must be specified on: " + this ) ; } else { return endpoint ; } } public < T > T lookup ( String name , Class < T > type ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } public void commit ( ) { if ( ! eventDrivenProcessors . isEmpty ( ) ) { Processor processor = Pipeline . newInstance ( eventDrivenProcessors ) ; final AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; Processor unitOfWorkProcessor = new UnitOfWorkProcessor ( asyncProcessor ) ; Route edcr = new EventDrivenConsumerRoute ( getEndpoint ( ) , unitOfWorkProcessor ) ; edcr . getProperties ( ) . put ( Route . PARENT_PROPERTY , Integer . toHexString ( route . hashCode ( ) ) ) ; if ( route . getGroup ( ) != null ) { edcr . getProperties ( ) . put ( Route . GROUP_PROPERTY , route . getGroup ( ) ) ; } routes . add ( edcr ) ; } } public void addEventDrivenProcessor ( Processor processor ) { eventDrivenProcessors . add ( processor ) ; } public void intercept ( Intercept interceptor ) { lastInterceptor = ( Interceptor ) interceptor ; } public Processor createProceedProcessor ( ) { if ( lastInterceptor == null ) { throw new IllegalArgumentException ( "Cannot proceed() from outside of an interceptor!" ) ; } else { return new ProceedProcessor ( lastInterceptor ) ; } } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) { return errorHandlerWrappingStrategy ; } public void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) { errorHandlerWrappingStrategy = strategy ; } public boolean isRouteAdded ( ) { return routeAdded ; } public void setIsRouteAdded ( boolean b ) { routeAdded = b ; } } 	1
package org . apache . camel . bam . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . transaction . support . TransactionTemplate ; public class JpaBamProcessor extends JpaBamProcessorSupport < ProcessInstance > { private static final transient Log LOG = LogFactory . getLog ( JpaBamProcessor . class ) ; public JpaBamProcessor ( TransactionTemplate transactionTemplate , JpaTemplate template , Expression < Exchange > correlationKeyExpression , ActivityRules activityRules ) { super ( transactionTemplate , template , correlationKeyExpression , activityRules ) ; } public JpaBamProcessor ( TransactionTemplate transactionTemplate , JpaTemplate template , Expression < Exchange > correlationKeyExpression , ActivityRules activityRules , Class < ProcessInstance > entitytype ) { super ( transactionTemplate , template , correlationKeyExpression , activityRules , entitytype ) ; } protected void processEntity ( Exchange exchange , ProcessInstance process ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Processing process instance: " + process ) ; } ActivityRules rules = getActivityRules ( ) ; ActivityState state = process . getOrCreateActivityState ( rules ) ; state . processExchange ( rules , new ProcessContext ( exchange , rules , state ) ) ; rules . getProcessRules ( ) . processExchange ( exchange , process ) ; } } 	0
package org . apache . camel . management ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationProcessor extends DelegateProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private PerformanceCounter counter ; public InstrumentationProcessor ( PerformanceCounter counter ) { this . counter = counter ; } public InstrumentationProcessor ( ) { } public void setCounter ( PerformanceCounter counter ) { this . counter = counter ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { final long startTime = System . nanoTime ( ) ; if ( processor instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) processor ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( doneSynchronously ) ; } } ) ; } try { processor . process ( exchange ) ; } catch ( Exception e ) { exchange . setException ( e ) ; } if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( true ) ; return true ; } protected void recordTime ( Exchange exchange , double duration ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Recording duration: " + duration + " millis for exchange: " + exchange ) ; } if ( ! exchange . isFailed ( ) && exchange . getException ( ) == null ) { counter . completedExchange ( duration ) ; } else { counter . failedExchange ( ) ; } } } 	1
package org . apache . camel . component . xquery ; import java . lang . annotation . Annotation ; import net . sf . saxon . functions . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . component . bean . DefaultAnnotationExpressionFactory ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . language . NamespacePrefix ; public class XQueryAnnotationExpressionFactory extends DefaultAnnotationExpressionFactory { @ Override public Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) { String xQuery = getExpressionFromAnnotation ( annotation ) ; XQueryBuilder builder = XQueryBuilder . xquery ( xQuery ) ; if ( annotation instanceof XQuery ) { XQuery xQueryAnnotation = ( XQuery ) annotation ; NamespacePrefix [ ] namespaces = xQueryAnnotation . namespaces ( ) ; if ( namespaces != null ) { for ( NamespacePrefix namespacePrefix : namespaces ) { } } } if ( expressionReturnType . isAssignableFrom ( String . class ) ) { builder . setResultsFormat ( ResultFormat . String ) ; } else if ( expressionReturnType . isAssignableFrom ( Collection . class ) ) { builder . setResultsFormat ( ResultFormat . List ) ; } return builder ; } } 	0
package org . apache . camel . impl . converter ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Method ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; import static java . lang . reflect . Modifier . isAbstract ; import static java . lang . reflect . Modifier . isPublic ; import static java . lang . reflect . Modifier . isStatic ; import org . apache . camel . Converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ResolverUtil ; import org . apache . camel . util . WebSphereResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AnnotationTypeConverterLoader implements TypeConverterLoader { public static final String META_INF_SERVICES = "META-INF/services/org/apache/camel/TypeConverter" ; private static final transient Log LOG = LogFactory . getLog ( AnnotationTypeConverterLoader . class ) ; private ResolverUtil resolver = new ResolverUtil ( ) ; private Set < Class > visitedClasses = new HashSet < Class > ( ) ; public AnnotationTypeConverterLoader ( ) { if ( WebSphereResolverUtil . isWebSphereClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ) { LOG . info ( "Using WebSphere specific ResolverUtil" ) ; resolver = new WebSphereResolverUtil ( META_INF_SERVICES ) ; } } public void load ( TypeConverterRegistry registry ) throws Exception { String [ ] packageNames = findPackageNames ( ) ; resolver . findAnnotated ( Converter . class , packageNames ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class type : classes ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading converter class: " + ObjectHelper . name ( type ) ) ; } loadConverterMethods ( registry , type ) ; } } protected String [ ] findPackageNames ( ) throws IOException { Set < String > packages = new HashSet < String > ( ) ; findPackages ( packages , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; findPackages ( packages , getClass ( ) . getClassLoader ( ) ) ; return packages . toArray ( new String [ packages . size ( ) ] ) ; } protected void findPackages ( Set < String > packages , ClassLoader classLoader ) throws IOException { Enumeration < URL > resources = classLoader . getResources ( META_INF_SERVICES ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; if ( url != null ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ; try { while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } finally { ObjectHelper . close ( reader , null , LOG ) ; } } } } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected void loadConverterMethods ( TypeConverterRegistry registry , Class type ) { if ( visitedClasses . contains ( type ) ) { return ; } visitedClasses . add ( type ) ; try { Method [ ] methods = type . getDeclaredMethods ( ) ; CachingInjector injector = null ; for ( Method method : methods ) { Converter annotation = method . getAnnotation ( Converter . class ) ; if ( annotation != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes == null || parameterTypes . length != 1 ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method should have one parameter" ) ; } else { int modifiers = method . getModifiers ( ) ; if ( isAbstract ( modifiers ) || ! isPublic ( modifiers ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method is not a public and concrete method" ) ; } else { Class toType = method . getReturnType ( ) ; if ( toType . equals ( Void . class ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method returns a void method" ) ; } else { Class fromType = parameterTypes [ 0 ] ; if ( isStatic ( modifiers ) ) { registerTypeConverter ( registry , method , toType , fromType , new StaticMethodTypeConverter ( method ) ) ; } else { if ( injector == null ) { injector = new CachingInjector ( registry , type ) ; } registerTypeConverter ( registry , method , toType , fromType , new InstanceMethodTypeConverter ( injector , method ) ) ; } } } } } } Class superclass = type . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { loadConverterMethods ( registry , superclass ) ; } } catch ( NoClassDefFoundError e ) { LOG . debug ( "Ignoring converter type: " + type . getName ( ) + " as a dependent class could not be found: " + e , e ) ; } } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { registry . addTypeConverter ( toType , fromType , typeConverter ) ; } } 	1
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class ProceedProcessor implements Processor { private final Interceptor interceptor ; public ProceedProcessor ( Interceptor interceptor ) { this . interceptor = interceptor ; } public String toString ( ) { return "Proceed[" + interceptor + "]" ; } public void process ( Exchange exchange ) throws Exception { interceptor . proceed ( exchange ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; public interface ErrorHandlerBuilder { ErrorHandlerBuilder copy ( ) ; Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception ; void addErrorHandlers ( ExceptionType exception ) ; } 	1
package org . apache . camel . component . file . remote ; import java . io . OutputStream ; public class RemoteFileBinding { public Object extractBodyFromOutputStream ( RemoteFileExchange exchange , OutputStream outputStream ) { return outputStream ; } } 	0
package org . apache . camel . model . dataformat ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Exchange ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "dataFormatType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DataFormatType extends IdentifiedType implements DataFormat { @ XmlTransient private DataFormat dataFormat ; @ XmlTransient private String dataFormatTypeName ; public DataFormatType ( ) { } public DataFormatType ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } protected DataFormatType ( String dataFormatTypeName ) { this . dataFormatTypeName = dataFormatTypeName ; } public static DataFormat getDataFormat ( RouteContext routeContext , DataFormatType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; DataFormat dataFormat = routeContext . lookup ( ref , DataFormat . class ) ; if ( dataFormat instanceof DataFormatType ) { type = ( DataFormatType ) dataFormat ; } else { return dataFormat ; } } return type . getDataFormat ( routeContext ) ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; dataFormat . marshal ( exchange , graph , stream ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; return dataFormat . unmarshal ( exchange , stream ) ; } public DataFormat getDataFormat ( RouteContext routeContext ) { if ( dataFormat == null ) { dataFormat = createDataFormat ( routeContext ) ; ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; configureDataFormat ( dataFormat ) ; } return dataFormat ; } protected DataFormat createDataFormat ( RouteContext routeContext ) { if ( dataFormatTypeName != null ) { Class type = ObjectHelper . loadClass ( dataFormatTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + dataFormatTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } return ( DataFormat ) ObjectHelper . newInstance ( type ) ; } return null ; } protected void configureDataFormat ( DataFormat dataFormat ) { } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import java . io . OutputStream ; import org . apache . http . ConnectionReuseStrategy ; import org . apache . http . HttpEntity ; import org . apache . http . HttpEntityEnclosingRequest ; import org . apache . http . HttpException ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . HttpResponseFactory ; import org . apache . http . HttpStatus ; import org . apache . http . HttpVersion ; import org . apache . http . MethodNotSupportedException ; import org . apache . http . ProtocolException ; import org . apache . http . ProtocolVersion ; import org . apache . http . UnsupportedHttpVersionException ; import org . apache . http . entity . ByteArrayEntity ; import org . apache . http . nio . ContentDecoder ; import org . apache . http . nio . ContentEncoder ; import org . apache . http . nio . NHttpServerConnection ; import org . apache . http . nio . NHttpServiceHandler ; import org . apache . http . nio . entity . ContentBufferEntity ; import org . apache . http . nio . entity . ContentOutputStream ; import org . apache . http . nio . protocol . NHttpServiceHandlerBase ; import org . apache . http . nio . util . ByteBufferAllocator ; import org . apache . http . nio . util . ContentInputBuffer ; import org . apache . http . nio . util . ContentOutputBuffer ; import org . apache . http . nio . util . HeapByteBufferAllocator ; import org . apache . http . nio . util . SimpleInputBuffer ; import org . apache . http . nio . util . SimpleOutputBuffer ; import org . apache . http . params . HttpParams ; import org . apache . http . params . HttpParamsLinker ; import org . apache . http . protocol . ExecutionContext ; import org . apache . http . protocol . HttpContext ; import org . apache . http . protocol . HttpProcessor ; import org . apache . http . protocol . HttpRequestHandler ; import org . apache . http . util . EncodingUtils ; public class BufferingHttpServiceHandler extends NHttpServiceHandlerBase implements NHttpServiceHandler { public BufferingHttpServiceHandler ( final HttpProcessor httpProcessor , final HttpResponseFactory responseFactory , final ConnectionReuseStrategy connStrategy , final ByteBufferAllocator allocator , final HttpParams params ) { super ( httpProcessor , responseFactory , connStrategy , allocator , params ) ; } public BufferingHttpServiceHandler ( final HttpProcessor httpProcessor , final HttpResponseFactory responseFactory , final ConnectionReuseStrategy connStrategy , final HttpParams params ) { this ( httpProcessor , responseFactory , connStrategy , new HeapByteBufferAllocator ( ) , params ) ; } public void connected ( final NHttpServerConnection conn ) { HttpContext context = conn . getContext ( ) ; ServerConnState connState = new ServerConnState ( allocator ) ; context . setAttribute ( CONN_STATE , connState ) ; if ( this . eventListener != null ) { this . eventListener . connectionOpen ( conn ) ; } } public void requestReceived ( final NHttpServerConnection conn ) { HttpContext context = conn . getContext ( ) ; HttpRequest request = conn . getHttpRequest ( ) ; HttpParamsLinker . link ( request , this . params ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; connState . resetInput ( ) ; connState . setRequest ( request ) ; connState . setInputState ( ServerConnState . REQUEST_RECEIVED ) ; ProtocolVersion ver = request . getRequestLine ( ) . getProtocolVersion ( ) ; if ( ! ver . lessEquals ( HttpVersion . HTTP_1_1 ) ) { ver = HttpVersion . HTTP_1_1 ; } HttpResponse response ; try { if ( request instanceof HttpEntityEnclosingRequest ) { if ( ( ( HttpEntityEnclosingRequest ) request ) . expectContinue ( ) ) { response = this . responseFactory . newHttpResponse ( ver , HttpStatus . SC_CONTINUE , context ) ; HttpParamsLinker . link ( response , this . params ) ; if ( this . expectationVerifier != null ) { try { this . expectationVerifier . verify ( request , response , context ) ; } catch ( HttpException ex ) { response = this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , context ) ; HttpParamsLinker . link ( response , this . params ) ; handleException ( ex , response ) ; } } if ( response . getStatusLine ( ) . getStatusCode ( ) < 200 ) { conn . submitResponse ( response ) ; } else { conn . resetInput ( ) ; connState . resetInput ( ) ; sendResponse ( conn , response ) ; } } } else { conn . suspendInput ( ) ; processRequest ( conn , request ) ; } } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } catch ( HttpException ex ) { closeConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalProtocolException ( ex , conn ) ; } } } public void closed ( final NHttpServerConnection conn ) { if ( this . eventListener != null ) { this . eventListener . connectionClosed ( conn ) ; } } public void exception ( final NHttpServerConnection conn , final HttpException httpex ) { HttpContext context = conn . getContext ( ) ; try { HttpResponse response = this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , context ) ; HttpParamsLinker . link ( response , this . params ) ; handleException ( httpex , response ) ; response . setEntity ( null ) ; sendResponse ( conn , response ) ; } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } catch ( HttpException ex ) { closeConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalProtocolException ( ex , conn ) ; } } } public void inputReady ( final NHttpServerConnection conn , final ContentDecoder decoder ) { HttpContext context = conn . getContext ( ) ; HttpRequest request = conn . getHttpRequest ( ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; ContentInputBuffer buffer = connState . getInbuffer ( ) ; connState . setInputState ( ServerConnState . REQUEST_BODY_STREAM ) ; try { buffer . consumeContent ( decoder ) ; if ( decoder . isCompleted ( ) ) { connState . setInputState ( ServerConnState . REQUEST_BODY_DONE ) ; HttpEntityEnclosingRequest entityReq = ( HttpEntityEnclosingRequest ) request ; if ( entityReq . getEntity ( ) != null ) { entityReq . setEntity ( new ContentBufferEntity ( entityReq . getEntity ( ) , connState . getInbuffer ( ) ) ) ; } conn . suspendInput ( ) ; processRequest ( conn , request ) ; } } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } catch ( HttpException ex ) { closeConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalProtocolException ( ex , conn ) ; } } } public void responseReady ( final NHttpServerConnection conn ) { } public void outputReady ( final NHttpServerConnection conn , final ContentEncoder encoder ) { HttpContext context = conn . getContext ( ) ; HttpResponse response = conn . getHttpResponse ( ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; ContentOutputBuffer buffer = connState . getOutbuffer ( ) ; connState . setOutputState ( ServerConnState . RESPONSE_BODY_STREAM ) ; try { buffer . produceContent ( encoder ) ; if ( encoder . isCompleted ( ) ) { connState . setOutputState ( ServerConnState . RESPONSE_BODY_DONE ) ; connState . resetOutput ( ) ; if ( ! this . connStrategy . keepAlive ( response , context ) ) { conn . close ( ) ; } else { conn . requestInput ( ) ; } } } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } } protected void handleException ( final HttpException ex , final HttpResponse response ) { int code = HttpStatus . SC_INTERNAL_SERVER_ERROR ; if ( ex instanceof MethodNotSupportedException ) { code = HttpStatus . SC_NOT_IMPLEMENTED ; } else if ( ex instanceof UnsupportedHttpVersionException ) { code = HttpStatus . SC_HTTP_VERSION_NOT_SUPPORTED ; } else if ( ex instanceof ProtocolException ) { code = HttpStatus . SC_BAD_REQUEST ; } response . setStatusCode ( code ) ; byte [ ] msg = EncodingUtils . getAsciiBytes ( ex . getMessage ( ) ) ; ByteArrayEntity entity = new ByteArrayEntity ( msg ) ; entity . setContentType ( "text/plain; charset=US-ASCII" ) ; response . setEntity ( entity ) ; } protected void processRequest ( final NHttpServerConnection conn , final HttpRequest request ) throws IOException , HttpException { HttpContext context = conn . getContext ( ) ; ProtocolVersion ver = request . getRequestLine ( ) . getProtocolVersion ( ) ; if ( ! ver . lessEquals ( HttpVersion . HTTP_1_1 ) ) { ver = HttpVersion . HTTP_1_1 ; } HttpResponse response = this . responseFactory . newHttpResponse ( ver , HttpStatus . SC_OK , conn . getContext ( ) ) ; HttpParamsLinker . link ( response , this . params ) ; context . setAttribute ( ExecutionContext . HTTP_REQUEST , request ) ; context . setAttribute ( ExecutionContext . HTTP_CONNECTION , conn ) ; context . setAttribute ( ExecutionContext . HTTP_RESPONSE , response ) ; try { this . httpProcessor . process ( request , context ) ; HttpRequestHandler handler = null ; if ( this . handlerResolver != null ) { String requestURI = request . getRequestLine ( ) . getUri ( ) ; handler = this . handlerResolver . lookup ( requestURI ) ; } if ( handler != null ) { handler . handle ( request , response , context ) ; } else { response . setStatusCode ( HttpStatus . SC_NOT_IMPLEMENTED ) ; } } catch ( HttpException ex ) { response = this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , context ) ; HttpParamsLinker . link ( response , this . params ) ; handleException ( ex , response ) ; } sendResponse ( conn , response ) ; } protected void sendResponse ( final NHttpServerConnection conn , final HttpResponse response ) throws IOException , HttpException { HttpContext context = conn . getContext ( ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; ContentOutputBuffer buffer = connState . getOutbuffer ( ) ; this . httpProcessor . process ( response , context ) ; if ( ! canResponseHaveBody ( connState . getRequest ( ) , response ) ) { response . setEntity ( null ) ; } conn . submitResponse ( response ) ; connState . setOutputState ( ServerConnState . RESPONSE_SENT ) ; HttpEntity entity = response . getEntity ( ) ; if ( entity != null ) { OutputStream outstream = new ContentOutputStream ( buffer ) ; entity . writeTo ( outstream ) ; outstream . flush ( ) ; outstream . close ( ) ; } else { connState . resetOutput ( ) ; if ( ! this . connStrategy . keepAlive ( response , context ) ) { conn . close ( ) ; } else { conn . requestInput ( ) ; } } } static class ServerConnState { public static final int READY = 0 ; public static final int REQUEST_RECEIVED = 1 ; public static final int REQUEST_BODY_STREAM = 2 ; public static final int REQUEST_BODY_DONE = 4 ; public static final int RESPONSE_SENT = 8 ; public static final int RESPONSE_BODY_STREAM = 16 ; public static final int RESPONSE_BODY_DONE = 32 ; private SimpleInputBuffer inbuffer ; private ContentOutputBuffer outbuffer ; private int inputState ; private int outputState ; private HttpRequest request ; private final ByteBufferAllocator allocator ; public ServerConnState ( final ByteBufferAllocator allocator ) { super ( ) ; this . inputState = READY ; this . outputState = READY ; this . allocator = allocator ; } public ContentInputBuffer getInbuffer ( ) { if ( this . inbuffer == null ) { this . inbuffer = new SimpleInputBuffer ( 2048 , allocator ) ; } return this . inbuffer ; } public ContentOutputBuffer getOutbuffer ( ) { if ( this . outbuffer == null ) { this . outbuffer = new SimpleOutputBuffer ( 2048 , allocator ) ; } return this . outbuffer ; } public int getInputState ( ) { return this . inputState ; } public void setInputState ( int inputState ) { this . inputState = inputState ; } public int getOutputState ( ) { return this . outputState ; } public void setOutputState ( int outputState ) { this . outputState = outputState ; } public HttpRequest getRequest ( ) { return this . request ; } public void setRequest ( final HttpRequest request ) { this . request = request ; } public void resetInput ( ) { this . inbuffer = null ; this . request = null ; this . inputState = READY ; } public void resetOutput ( ) { this . outbuffer = null ; this . outputState = READY ; } } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultExchange implements Exchange { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; protected final CamelContext context ; private Map < String , Object > properties ; private Message in ; private Message out ; private Message fault ; private Throwable exception ; private String exchangeId ; private UnitOfWork unitOfWork ; private ExchangePattern pattern ; public DefaultExchange ( CamelContext context ) { this ( context , ExchangePattern . InOnly ) ; } public DefaultExchange ( CamelContext context , ExchangePattern pattern ) { this . context = context ; this . pattern = pattern ; } public DefaultExchange ( DefaultExchange parent ) { this ( parent . getContext ( ) , parent . getPattern ( ) ) ; this . unitOfWork = parent . getUnitOfWork ( ) ; } @ Override public String toString ( ) { return "Exchange[" + in + "]" ; } public Exchange copy ( ) { Exchange exchange = newInstance ( ) ; exchange . copyFrom ( this ) ; return exchange ; } public void copyFrom ( Exchange exchange ) { if ( exchange == this ) { return ; } setProperties ( safeCopy ( exchange . getProperties ( ) ) ) ; safeCopy ( getIn ( ) , exchange , exchange . getIn ( ) ) ; Message copyOut = exchange . getOut ( false ) ; if ( copyOut != null ) { safeCopy ( getOut ( true ) , exchange , copyOut ) ; } Message copyFault = exchange . getFault ( false ) ; if ( copyFault != null ) { safeCopy ( getFault ( true ) , exchange , copyFault ) ; } setException ( exchange . getException ( ) ) ; unitOfWork = exchange . getUnitOfWork ( ) ; pattern = exchange . getPattern ( ) ; } private static void safeCopy ( Message message , Exchange exchange , Message that ) { if ( message != null ) { message . copyFrom ( that ) ; } } private static Map < String , Object > safeCopy ( Map < String , Object > properties ) { if ( properties == null ) { return null ; } return new HashMap < String , Object > ( properties ) ; } private static Message safeCopy ( Exchange exchange , Message message ) { if ( message == null ) { return null ; } Message answer = message . copy ( ) ; if ( answer instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) answer ; messageSupport . setExchange ( exchange ) ; } return answer ; } public Exchange newInstance ( ) { return new DefaultExchange ( this ) ; } public CamelContext getContext ( ) { return context ; } public Object getProperty ( String name ) { if ( properties != null ) { return properties . get ( name ) ; } return null ; } public < T > T getProperty ( String name , Class < T > type ) { Object value = getProperty ( name ) ; ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { validateExchangePropertyIsExpectedType ( property , type , value ) ; } return getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setProperty ( String name , Object value ) { ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { Class type = value . getClass ( ) ; validateExchangePropertyIsExpectedType ( property , type , value ) ; } getProperties ( ) . put ( name , value ) ; } private < T > void validateExchangePropertyIsExpectedType ( ExchangeProperty < ? > property , Class < T > type , Object value ) { if ( value != null && property != null && ! property . type ( ) . isAssignableFrom ( type ) ) { throw new RuntimeCamelException ( "Type cast exception while getting an " + "Exchange Property value '" + value . toString ( ) + "' on Exchange " + this + " for a well known Exchange Property with these traits: " + property ) ; } } public Object removeProperty ( String name ) { return getProperties ( ) . remove ( name ) ; } public Map < String , Object > getProperties ( ) { if ( properties == null ) { properties = new HashMap < String , Object > ( ) ; } return properties ; } public void setProperties ( Map < String , Object > properties ) { this . properties = properties ; } public Message getIn ( ) { if ( in == null ) { in = createInMessage ( ) ; configureMessage ( in ) ; } return in ; } public void setIn ( Message in ) { this . in = in ; configureMessage ( in ) ; } public Message getOut ( ) { return getOut ( true ) ; } public Message getOut ( boolean lazyCreate ) { if ( out == null && lazyCreate ) { out = createOutMessage ( ) ; configureMessage ( out ) ; } return out ; } public void setOut ( Message out ) { this . out = out ; configureMessage ( out ) ; } public Throwable getException ( ) { return exception ; } public void setException ( Throwable exception ) { this . exception = exception ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } public void throwException ( ) throws Exception { if ( exception == null ) { return ; } if ( exception instanceof RuntimeException ) { throw ( RuntimeException ) exception ; } if ( exception instanceof Exception ) { throw ( Exception ) exception ; } throw new RuntimeCamelException ( exception ) ; } public Message getFault ( ) { return getFault ( true ) ; } public Message getFault ( boolean lazyCreate ) { if ( fault == null && lazyCreate ) { fault = createFaultMessage ( ) ; configureMessage ( fault ) ; } return fault ; } public void setFault ( Message fault ) { this . fault = fault ; configureMessage ( fault ) ; } public String getExchangeId ( ) { if ( exchangeId == null ) { exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( ) ; } return exchangeId ; } public void setExchangeId ( String id ) { this . exchangeId = id ; } public boolean isFailed ( ) { Message faultMessage = getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return getException ( ) != null ; } public boolean isTransacted ( ) { ExchangeProperty < ? > property = ExchangeProperty . get ( "transacted" ) ; return property != null && property . get ( this ) == Boolean . TRUE ; } public UnitOfWork getUnitOfWork ( ) { return unitOfWork ; } public void setUnitOfWork ( UnitOfWork unitOfWork ) { this . unitOfWork = unitOfWork ; } protected Message createInMessage ( ) { return new DefaultMessage ( ) ; } protected Message createOutMessage ( ) { return new DefaultMessage ( ) ; } protected Message createFaultMessage ( ) { return new DefaultMessage ( ) ; } protected void configureMessage ( Message message ) { if ( message instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) message ; messageSupport . setExchange ( this ) ; } } } 	1
package org . apache . camel . component . file . remote ; import org . apache . camel . RuntimeCamelException ; public class FtpOperationFailedException extends RuntimeCamelException { private final int code ; private final String reason ; public FtpOperationFailedException ( int code , String reason ) { super ( "Ftp Operation failed: " + reason . trim ( ) + " Code: " + code ) ; this . code = code ; this . reason = reason ; } public int getCode ( ) { return code ; } public String getReason ( ) { return reason ; } } 	0
package org . apache . camel . model ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . loadbalancer . LoadBalancerType ; import org . apache . camel . model . loadbalancer . RandomLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . RoundRobinLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . StickyLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . TopicLoadBalanceStrategy ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RandomLoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . processor . loadbalancer . StickyLoadBalancer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; @ XmlRootElement ( name = "loadBalance" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalanceType extends OutputType < LoadBalanceType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "roundRobin" , type = RoundRobinLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "random" , type = RandomLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "sticky" , type = StickyLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "topic" , type = TopicLoadBalanceStrategy . class ) } ) private LoadBalancerType loadBalancerType ; public LoadBalanceType ( ) { } @ Override public String getShortName ( ) { return "loadbalance" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public LoadBalancerType getLoadBalancerType ( ) { return loadBalancerType ; } public void setLoadBalancerType ( LoadBalancerType loadbalancer ) { loadBalancerType = loadbalancer ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : outputs ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : getOutputs ( ) ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } public LoadBalanceType setLoadBalancer ( LoadBalancer loadBalancer ) { loadBalancerType = new LoadBalancerType ( loadBalancer ) ; return this ; } public LoadBalanceType roundRobin ( ) { loadBalancerType = new LoadBalancerType ( new RoundRobinLoadBalancer ( ) ) ; return this ; } public LoadBalanceType random ( ) { loadBalancerType = new LoadBalancerType ( new RandomLoadBalancer ( ) ) ; return this ; } public LoadBalanceType sticky ( Expression < Exchange > correlationExpression ) { loadBalancerType = new LoadBalancerType ( new StickyLoadBalancer ( correlationExpression ) ) ; return this ; } public LoadBalanceType topic ( ) { loadBalancerType = new LoadBalancerType ( new TopicLoadBalancer ( ) ) ; return this ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < ProcessorType < ? > > list = getOutputs ( ) ; for ( ProcessorType < ? > processorType : list ) { buffer . append ( processorType . getLabel ( ) ) ; } return buffer . toString ( ) ; } @ Override public String toString ( ) { String result ; if ( loadBalancerType != null ) { result = "LoadBalanceType[" + loadBalancerType + ", " ; } else { result = "LoadBalanceType[" + ref + ", " ; } result = result + getOutputs ( ) + "]" ; return result ; } } 	1
package org . apache . camel . component . mail ; import java . text . DateFormat ; import java . util . Date ; import javax . mail . Address ; import javax . mail . Message ; import javax . mail . MessagingException ; public final class MailUtils { public static final int DEFAULT_PORT_SMTP = 25 ; public static final int DEFAULT_PORT_SMTPS = 465 ; public static final int DEFAULT_PORT_POP3 = 110 ; public static final int DEFAULT_PORT_POP3S = 995 ; public static final int DEFAULT_PORT_NNTP = 119 ; public static final int DEFAULT_PORT_IMAP = 143 ; public static final int DEFAULT_PORT_IMAPS = 993 ; public static final String PROTOCOL_SMTP = "smtp" ; public static final String PROTOCOL_SMTPS = "smtps" ; public static final String PROTOCOL_POP3 = "pop3" ; public static final String PROTOCOL_POP3S = "pop3s" ; public static final String PROTOCOL_NNTP = "nntp" ; public static final String PROTOCOL_IMAP = "imap" ; public static final String PROTOCOL_IMAPS = "imaps" ; private MailUtils ( ) { } public static int getDefaultPortForProtocol ( final String protocol ) { int port = DEFAULT_PORT_SMTP ; if ( protocol != null ) { if ( protocol . equalsIgnoreCase ( PROTOCOL_IMAP ) ) { port = DEFAULT_PORT_IMAP ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_IMAPS ) ) { port = DEFAULT_PORT_IMAPS ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_NNTP ) ) { port = DEFAULT_PORT_NNTP ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_POP3 ) ) { port = DEFAULT_PORT_POP3 ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_POP3S ) ) { port = DEFAULT_PORT_POP3S ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_SMTP ) ) { port = DEFAULT_PORT_SMTP ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_SMTPS ) ) { port = DEFAULT_PORT_SMTPS ; } else { port = DEFAULT_PORT_SMTP ; } } return port ; } public static String dumpMessage ( Message message ) { try { StringBuilder sb = new StringBuilder ( ) ; int number = message . getMessageNumber ( ) ; sb . append ( "messageNumber=[" ) . append ( number ) . append ( "]" ) ; Address [ ] from = message . getFrom ( ) ; if ( from != null ) { for ( Address adr : from ) { sb . append ( ", from=[" ) . append ( adr ) . append ( "]" ) ; } } Address [ ] to = message . getRecipients ( Message . RecipientType . TO ) ; if ( to != null ) { for ( Address adr : to ) { sb . append ( ", to=[" ) . append ( adr ) . append ( "]" ) ; } } String subject = message . getSubject ( ) ; if ( subject != null ) { sb . append ( ", subject=[" ) . append ( subject ) . append ( "]" ) ; } Date sentDate = message . getSentDate ( ) ; if ( sentDate != null ) { sb . append ( ", sentDate=[" ) . append ( DateFormat . getDateTimeInstance ( ) . format ( sentDate ) ) . append ( "]" ) ; } Date receivedDate = message . getReceivedDate ( ) ; if ( receivedDate != null ) { sb . append ( ", receivedDate=[" ) . append ( DateFormat . getDateTimeInstance ( ) . format ( receivedDate ) ) . append ( "]" ) ; } return sb . toString ( ) ; } catch ( MessagingException e ) { return message . toString ( ) ; } } } 	0
package org . apache . camel . processor . aggregate ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class PredicateAggregationCollection extends AggregationCollection { private Predicate aggregationCompletedPredicate ; private List < Exchange > collection = new ArrayList < Exchange > ( ) ; public PredicateAggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { super ( correlationExpression , aggregationStrategy ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } @ Override protected void onAggregation ( Object correlationKey , Exchange newExchange ) { if ( aggregationCompletedPredicate . matches ( newExchange ) ) { super . getMap ( ) . remove ( correlationKey ) ; collection . add ( newExchange ) ; } } @ Override public Iterator < Exchange > iterator ( ) { return collection . iterator ( ) ; } @ Override public int size ( ) { return collection . size ( ) ; } @ Override public void clear ( ) { collection . clear ( ) ; super . clear ( ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "policy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class PolicyRef extends OutputType < ProcessorType > { @ XmlAttribute ( required = true ) private String ref ; @ XmlTransient private Policy policy ; public PolicyRef ( ) { } public PolicyRef ( Policy policy ) { this . policy = policy ; } @ Override public String toString ( ) { return "Policy[" + description ( ) + "]" ; } @ Override public String getShortName ( ) { return "policy" ; } @ Override public String getLabel ( ) { if ( ref != null ) { return "ref:  " + ref ; } else if ( policy != null ) { return policy . toString ( ) ; } else { return "" ; } } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = createOutputsProcessor ( routeContext ) ; Policy policy = resolvePolicy ( routeContext ) ; if ( policy == null ) { throw new IllegalArgumentException ( "No policy configured: " + this ) ; } return policy . wrap ( childProcessor ) ; } protected Policy resolvePolicy ( RouteContext routeContext ) { if ( policy == null ) { policy = routeContext . lookup ( getRef ( ) , Policy . class ) ; } return policy ; } protected String description ( ) { if ( policy != null ) { return policy . toString ( ) ; } else { return "ref:  " + ref ; } } } 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Body ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Header ; import org . apache . camel . Headers ; import org . apache . camel . Message ; import org . apache . camel . OutHeaders ; import org . apache . camel . Properties ; import org . apache . camel . Property ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ExchangeHelper . convertToType ; public class BeanInfo { private static final transient Log LOG = LogFactory . getLog ( BeanInfo . class ) ; private final CamelContext camelContext ; private Class type ; private ParameterMappingStrategy strategy ; private Map < String , MethodInfo > operations = new ConcurrentHashMap < String , MethodInfo > ( ) ; private MethodInfo defaultMethod ; private List < MethodInfo > operationsWithBody = new ArrayList < MethodInfo > ( ) ; private List < MethodInfo > operationsWithCustomAnnotation = new ArrayList < MethodInfo > ( ) ; public BeanInfo ( CamelContext camelContext , Class type ) { this ( camelContext , type , createParameterMappingStrategy ( camelContext ) ) ; } public BeanInfo ( CamelContext camelContext , Class type , ParameterMappingStrategy strategy ) { this . camelContext = camelContext ; this . type = type ; this . strategy = strategy ; introspect ( getType ( ) ) ; if ( operations . size ( ) == 1 ) { Collection < MethodInfo > methodInfos = operations . values ( ) ; for ( MethodInfo methodInfo : methodInfos ) { defaultMethod = methodInfo ; } } } public Class getType ( ) { return type ; } public CamelContext getCamelContext ( ) { return camelContext ; } public MethodInvocation createInvocation ( Method method , Object pojo , Exchange exchange ) throws RuntimeCamelException { MethodInfo methodInfo = introspect ( type , method ) ; if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } public MethodInvocation createInvocation ( Object pojo , Exchange exchange ) throws RuntimeCamelException , AmbiguousMethodCallException { MethodInfo methodInfo = null ; String name = exchange . getIn ( ) . getHeader ( BeanProcessor . METHOD_NAME , String . class ) ; if ( name != null ) { methodInfo = operations . get ( name ) ; } if ( methodInfo == null ) { methodInfo = chooseMethod ( pojo , exchange ) ; } if ( methodInfo == null ) { methodInfo = defaultMethod ; } if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } protected void introspect ( Class clazz ) { Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( isValidMethod ( clazz , method ) ) { introspect ( clazz , method ) ; } } Class superclass = clazz . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { introspect ( superclass ) ; } } protected MethodInfo introspect ( Class clazz , Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; Annotation [ ] [ ] parametersAnnotations = method . getParameterAnnotations ( ) ; List < ParameterInfo > parameters = new ArrayList < ParameterInfo > ( ) ; List < ParameterInfo > bodyParameters = new ArrayList < ParameterInfo > ( ) ; boolean hasCustomAnnotation = false ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { Class parameterType = parameterTypes [ i ] ; Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] ; Expression expression = createParameterUnmarshalExpression ( clazz , method , parameterType , parameterAnnotations ) ; hasCustomAnnotation |= expression != null ; ParameterInfo parameterInfo = new ParameterInfo ( i , parameterType , parameterAnnotations , expression ) ; parameters . add ( parameterInfo ) ; if ( expression == null ) { hasCustomAnnotation |= ObjectHelper . hasAnnotation ( parameterAnnotations , Body . class ) ; if ( bodyParameters . isEmpty ( ) ) { if ( Exchange . class . isAssignableFrom ( parameterType ) ) { expression = ExpressionBuilder . exchangeExpression ( ) ; } else { expression = ExpressionBuilder . bodyExpression ( parameterType ) ; } parameterInfo . setExpression ( expression ) ; bodyParameters . add ( parameterInfo ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No expression available for method: " + method . toString ( ) + " which already has a body so ignoring parameter: " + i + " so ignoring method" ) ; } return null ; } } } String opName = method . getName ( ) ; MethodInfo methodInfo = new MethodInfo ( clazz , method , parameters , bodyParameters , hasCustomAnnotation ) ; operations . put ( opName , methodInfo ) ; if ( methodInfo . hasBodyParameter ( ) ) { operationsWithBody . add ( methodInfo ) ; } if ( methodInfo . isHasCustomAnnotation ( ) && ! methodInfo . hasBodyParameter ( ) ) { operationsWithCustomAnnotation . add ( methodInfo ) ; } return methodInfo ; } protected MethodInfo chooseMethod ( Object pojo , Exchange exchange ) throws AmbiguousMethodCallException { if ( operationsWithBody . size ( ) == 1 ) { return operationsWithBody . get ( 0 ) ; } else if ( ! operationsWithBody . isEmpty ( ) ) { return chooseMethodWithMatchingBody ( exchange , operationsWithBody ) ; } else if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return null ; } protected MethodInfo chooseMethodWithMatchingBody ( Exchange exchange , Collection < MethodInfo > operationList ) throws AmbiguousMethodCallException { Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; if ( body != null ) { Class bodyType = body . getClass ( ) ; List < MethodInfo > possibles = new ArrayList < MethodInfo > ( ) ; for ( MethodInfo methodInfo : operationList ) { boolean out = exchange . getPattern ( ) . isOutCapable ( ) ; if ( out && methodInfo . isReturnTypeVoid ( ) ) { continue ; } if ( methodInfo . bodyParameterMatches ( bodyType ) ) { possibles . add ( methodInfo ) ; } } if ( possibles . size ( ) == 1 ) { return possibles . get ( 0 ) ; } else if ( possibles . isEmpty ( ) ) { Object newBody = null ; MethodInfo matched = null ; for ( MethodInfo methodInfo : operationList ) { Object value = convertToType ( exchange , methodInfo . getBodyParameterType ( ) , body ) ; if ( value != null ) { if ( newBody != null ) { throw new AmbiguousMethodCallException ( exchange , Arrays . asList ( matched , methodInfo ) ) ; } else { newBody = value ; matched = methodInfo ; } } } if ( matched != null ) { in . setBody ( newBody ) ; return matched ; } } else { if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return chooseMethodWithCustomAnnotations ( exchange , possibles ) ; } } return null ; } protected MethodInfo chooseMethodWithCustomAnnotations ( Exchange exchange , Collection < MethodInfo > possibles ) throws AmbiguousMethodCallException { MethodInfo chosen = null ; for ( MethodInfo possible : possibles ) { if ( possible . isHasCustomAnnotation ( ) ) { if ( chosen != null ) { chosen = null ; break ; } else { chosen = possible ; } } } if ( chosen != null ) { return chosen ; } throw new AmbiguousMethodCallException ( exchange , possibles ) ; } protected Expression createParameterUnmarshalExpression ( Class clazz , Method method , Class parameterType , Annotation [ ] parameterAnnotation ) { for ( Annotation annotation : parameterAnnotation ) { Expression answer = createParameterUnmarshalExpressionForAnnotation ( clazz , method , parameterType , annotation ) ; if ( answer != null ) { return answer ; } } return strategy . getDefaultParameterTypeExpression ( parameterType ) ; } protected boolean isPossibleBodyParameter ( Annotation [ ] annotations ) { if ( annotations != null ) { for ( Annotation annotation : annotations ) { if ( ( annotation instanceof Property ) || ( annotation instanceof Header ) || ( annotation instanceof Headers ) || ( annotation instanceof OutHeaders ) || ( annotation instanceof Properties ) ) { return false ; } LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { return false ; } } } return true ; } protected Expression createParameterUnmarshalExpressionForAnnotation ( Class clazz , Method method , Class parameterType , Annotation annotation ) { if ( annotation instanceof Property ) { Property propertyAnnotation = ( Property ) annotation ; return ExpressionBuilder . propertyExpression ( propertyAnnotation . name ( ) ) ; } else if ( annotation instanceof Properties ) { return ExpressionBuilder . propertiesExpression ( ) ; } else if ( annotation instanceof Header ) { Header headerAnnotation = ( Header ) annotation ; return ExpressionBuilder . headerExpression ( headerAnnotation . name ( ) ) ; } else if ( annotation instanceof Headers ) { return ExpressionBuilder . headersExpression ( ) ; } else if ( annotation instanceof OutHeaders ) { return ExpressionBuilder . outHeadersExpression ( ) ; } else { LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { Class < ? > type = languageAnnotation . factory ( ) ; Object object = camelContext . getInjector ( ) . newInstance ( type ) ; if ( object instanceof AnnotationExpressionFactory ) { AnnotationExpressionFactory expressionFactory = ( AnnotationExpressionFactory ) object ; return expressionFactory . createExpression ( camelContext , annotation , languageAnnotation , parameterType ) ; } else { LOG . error ( "Ignoring bad annotation: " + languageAnnotation + "on method: " + method + " which declares a factory: " + type . getName ( ) + " which does not implement " + AnnotationExpressionFactory . class . getName ( ) ) ; } } } return null ; } protected boolean isValidMethod ( Class clazz , Method method ) { if ( ! Modifier . isPublic ( method . getModifiers ( ) ) ) { return false ; } if ( method . getReturnType ( ) != null && Exchange . class . isAssignableFrom ( method . getReturnType ( ) ) ) { return false ; } return true ; } public static ParameterMappingStrategy createParameterMappingStrategy ( CamelContext camelContext ) { Registry registry = camelContext . getRegistry ( ) ; ParameterMappingStrategy answer = registry . lookup ( ParameterMappingStrategy . class . getName ( ) , ParameterMappingStrategy . class ) ; if ( answer == null ) { answer = new DefaultParameterMappingStrategy ( ) ; } return answer ; } } 	1
package org . apache . camel . builder . xml ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import javax . xml . transform . Templates ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerConfigurationException ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Exchange ; import org . apache . camel . ExpectedBodyTypeException ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeTransformException ; import org . apache . camel . converter . jaxp . XmlConverter ; import static org . apache . camel . util . ObjectHelper . notNull ; public class XsltBuilder implements Processor { private Map < String , Object > parameters = new HashMap < String , Object > ( ) ; private XmlConverter converter = new XmlConverter ( ) ; private Templates template ; private ResultHandlerFactory resultHandlerFactory = new StringResultHandlerFactory ( ) ; private boolean failOnNullBody = true ; public XsltBuilder ( ) { } public XsltBuilder ( Templates templates ) { this . template = templates ; } @ Override public String toString ( ) { return "XSLT[" + template + "]" ; } public void process ( Exchange exchange ) throws Exception { if ( getTemplate ( ) == null ) { throw new IllegalArgumentException ( "No template configured!" ) ; } Transformer transformer = getTemplate ( ) . newTransformer ( ) ; configureTransformer ( transformer , exchange ) ; Source source = getSource ( exchange ) ; ResultHandler resultHandler = resultHandlerFactory . createResult ( ) ; Result result = resultHandler . getResult ( ) ; Message out = exchange . getOut ( true ) ; out . copyFrom ( exchange . getIn ( ) ) ; transformer . transform ( source , result ) ; resultHandler . setBody ( out ) ; } public static XsltBuilder xslt ( Templates templates ) { return new XsltBuilder ( templates ) ; } public static XsltBuilder xslt ( Source xslt ) throws TransformerConfigurationException { notNull ( xslt , "xslt" ) ; XsltBuilder answer = new XsltBuilder ( ) ; answer . setTransformerSource ( xslt ) ; return answer ; } public static XsltBuilder xslt ( File xslt ) throws TransformerConfigurationException { notNull ( xslt , "xslt" ) ; return xslt ( new StreamSource ( xslt ) ) ; } public static XsltBuilder xslt ( URL xslt ) throws TransformerConfigurationException , IOException { notNull ( xslt , "xslt" ) ; return xslt ( xslt . openStream ( ) ) ; } public static XsltBuilder xslt ( InputStream xslt ) throws TransformerConfigurationException , IOException { notNull ( xslt , "xslt" ) ; return xslt ( new StreamSource ( xslt ) ) ; } public XsltBuilder outputBytes ( ) { setResultHandlerFactory ( new StreamResultHandlerFactory ( ) ) ; return this ; } public XsltBuilder outputString ( ) { setResultHandlerFactory ( new StringResultHandlerFactory ( ) ) ; return this ; } public XsltBuilder outputDOM ( ) { setResultHandlerFactory ( new DomResultHandlerFactory ( ) ) ; return this ; } public XsltBuilder parameter ( String name , Object value ) { parameters . put ( name , value ) ; return this ; } public Map < String , Object > getParameters ( ) { return parameters ; } public void setParameters ( Map < String , Object > parameters ) { this . parameters = parameters ; } public void setTemplate ( Templates template ) { this . template = template ; } public Templates getTemplate ( ) { return template ; } public boolean isFailOnNullBody ( ) { return failOnNullBody ; } public void setFailOnNullBody ( boolean failOnNullBody ) { this . failOnNullBody = failOnNullBody ; } public ResultHandlerFactory getResultHandlerFactory ( ) { return resultHandlerFactory ; } public void setResultHandlerFactory ( ResultHandlerFactory resultHandlerFactory ) { this . resultHandlerFactory = resultHandlerFactory ; } public void setTransformerSource ( Source source ) throws TransformerConfigurationException { Templates templates = converter . getTransformerFactory ( ) . newTemplates ( source ) ; if ( templates != null ) { setTemplate ( templates ) ; } else { throw new TransformerConfigurationException ( "Error creating XSLT template. " + "This is most likely be caused by an XML parse error. " + "Please verify your XSLT file configured." ) ; } } public void setTransformerFile ( File xslt ) throws TransformerConfigurationException { setTransformerSource ( new StreamSource ( xslt ) ) ; } public void setTransformerURL ( URL url ) throws TransformerConfigurationException , IOException { notNull ( url , "url" ) ; setTransformerInputStream ( url . openStream ( ) ) ; } public void setTransformerInputStream ( InputStream in ) throws TransformerConfigurationException , IOException { notNull ( in , "in" ) ; setTransformerSource ( new StreamSource ( in ) ) ; } public XmlConverter getConverter ( ) { return converter ; } public void setConverter ( XmlConverter converter ) { this . converter = converter ; } protected Source getSource ( Exchange exchange ) { Message in = exchange . getIn ( ) ; Source source = in . getBody ( Source . class ) ; if ( source == null ) { if ( isFailOnNullBody ( ) ) { throw new ExpectedBodyTypeException ( exchange , Source . class ) ; } else { try { source = converter . toSource ( converter . createDocument ( ) ) ; } catch ( ParserConfigurationException e ) { throw new RuntimeTransformException ( e ) ; } } } return source ; } protected void configureTransformer ( Transformer transformer , Exchange exchange ) { transformer . clearParameters ( ) ; addParameters ( transformer , exchange . getProperties ( ) ) ; addParameters ( transformer , exchange . getIn ( ) . getHeaders ( ) ) ; addParameters ( transformer , getParameters ( ) ) ; transformer . setParameter ( "exchange" , exchange ) ; transformer . setParameter ( "in" , exchange . getIn ( ) ) ; transformer . setParameter ( "out" , exchange . getOut ( ) ) ; } protected void addParameters ( Transformer transformer , Map < String , Object > map ) { Set < Map . Entry < String , Object > > propertyEntries = map . entrySet ( ) ; for ( Map . Entry < String , Object > entry : propertyEntries ) { String key = entry . getKey ( ) ; Object value = entry . getValue ( ) ; if ( value != null ) { transformer . setParameter ( key , value ) ; } } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "filter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FilterType extends ExpressionNode implements Block { public FilterType ( ) { } public FilterType ( ExpressionType expression ) { super ( expression ) ; } public FilterType ( Predicate predicate ) { super ( predicate ) ; } @ Override public String toString ( ) { return "Filter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "filter" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . component . sql ; import java . sql . PreparedStatement ; import java . sql . SQLException ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultProducer ; import org . springframework . dao . DataAccessException ; import org . springframework . jdbc . core . ColumnMapRowMapper ; import org . springframework . jdbc . core . JdbcTemplate ; import org . springframework . jdbc . core . PreparedStatementCallback ; import org . springframework . jdbc . core . RowMapperResultSetExtractor ; public class SqlProducer extends DefaultProducer { public static final String UPDATE_COUNT = "org.apache.camel.sql.update-count" ; private String query ; private JdbcTemplate jdbcTemplate ; public SqlProducer ( SqlEndpoint endpoint , String query , JdbcTemplate jdbcTemplate ) { super ( endpoint ) ; this . jdbcTemplate = jdbcTemplate ; this . query = query ; } public void process ( final Exchange exchange ) throws Exception { jdbcTemplate . execute ( query , new PreparedStatementCallback ( ) { public Object doInPreparedStatement ( PreparedStatement ps ) throws SQLException , DataAccessException { int argNumber = 1 ; for ( Iterator < ? > i = exchange . getIn ( ) . getBody ( Iterator . class ) ; i . hasNext ( ) ; ) { ps . setObject ( argNumber ++ , i . next ( ) ) ; } boolean isResultSet = ps . execute ( ) ; if ( isResultSet ) { RowMapperResultSetExtractor mapper = new RowMapperResultSetExtractor ( new ColumnMapRowMapper ( ) ) ; List < ? > result = ( List < ? > ) mapper . extractData ( ps . getResultSet ( ) ) ; exchange . getOut ( ) . setBody ( result ) ; } else { exchange . getIn ( ) . setHeader ( UPDATE_COUNT , ps . getUpdateCount ( ) ) ; } return null ; } } ) ; } } 	0
package org . apache . camel . component . seda ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . PollingConsumerSupport ; @ Deprecated public class ListPollingConsumer extends PollingConsumerSupport { private final List < Exchange > exchanges ; public ListPollingConsumer ( Endpoint endpoint , List < Exchange > exchanges ) { super ( endpoint ) ; this . exchanges = exchanges ; } public Exchange receive ( ) { return receiveNoWait ( ) ; } public Exchange receiveNoWait ( ) { if ( exchanges . isEmpty ( ) ) { return null ; } else { return exchanges . remove ( 0 ) ; } } public Exchange receive ( long timeout ) { return receiveNoWait ( ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	1
package org . apache . camel ; public interface PollingConsumer < E extends Exchange > extends Consumer < E > { E receive ( ) ; E receiveNoWait ( ) ; E receive ( long timeout ) ; } 	0
package org . apache . camel . impl ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . LogFactory ; public class LoggingExceptionHandler implements ExceptionHandler { private final Logger logger ; public LoggingExceptionHandler ( Class ownerType ) { this ( new Logger ( LogFactory . getLog ( ownerType ) , LoggingLevel . ERROR ) ) ; } public LoggingExceptionHandler ( Logger logger ) { this . logger = logger ; } public void handleException ( Throwable exception ) { logger . log ( exception . getMessage ( ) , exception ) ; } } 	1
package org . apache . camel . component . xquery ; public enum ResultFormat { Bytes , BytesSource , DOM , DOMSource , List , String , StringSource } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class FileComponent extends DefaultComponent < FileExchange > { public static final String HEADER_FILE_NAME = "org.apache.camel.file.name" ; public static final String HEADER_FILE_NAME_PRODUCED = "org.apache.camel.file.name.produced" ; public FileComponent ( ) { } public FileComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < FileExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { File file = new File ( remaining ) ; FileEndpoint result = new FileEndpoint ( file , uri , this ) ; setProperties ( result , parameters ) ; return result ; } } 	1
package org . apache . camel ; public interface Processor { void process ( Exchange exchange ) throws Exception ; } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "expression" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LanguageExpression extends ExpressionType { @ XmlAttribute private String language ; public LanguageExpression ( ) { } public LanguageExpression ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface Header { String name ( ) ; } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class Tracer implements InterceptStrategy { private TraceFormatter formatter = new TraceFormatter ( ) ; public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; return new TraceInterceptor ( processorType , target , formatter ) ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . component . dataset ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . Service ; import org . apache . camel . component . mock . MockEndpoint ; import org . apache . camel . impl . EventDrivenPollingConsumer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DataSetEndpoint extends MockEndpoint implements Service { private static final transient Log LOG = LogFactory . getLog ( DataSetEndpoint . class ) ; private DataSet dataSet ; private AtomicInteger receivedCounter = new AtomicInteger ( ) ; private long produceDelay = - 1 ; private long consumeDelay = - 1 ; private long startTime ; private long preloadSize ; public DataSetEndpoint ( String endpointUri , Component component , DataSet dataSet ) { super ( endpointUri , component ) ; this . dataSet = dataSet ; } public DataSetEndpoint ( String endpointUri , DataSet dataSet ) { super ( endpointUri ) ; this . dataSet = dataSet ; } public static void assertEquals ( String description , Object expected , Object actual , Exchange exchange ) { if ( ! ObjectHelper . equal ( expected , actual ) ) { throw new AssertionError ( description + " does not match. Expected: " + expected + " but was: " + actual + " on " + exchange + " with headers: " + exchange . getIn ( ) . getHeaders ( ) ) ; } } @ Override public PollingConsumer < Exchange > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < Exchange > ( this ) ; } @ Override public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { return new DataSetConsumer ( this , processor ) ; } @ Override public void reset ( ) { super . reset ( ) ; receivedCounter . set ( 0 ) ; } @ Override public int getReceivedCounter ( ) { return receivedCounter . get ( ) ; } public Exchange createExchange ( long messageIndex ) throws Exception { Exchange exchange = createExchange ( ) ; getDataSet ( ) . populateMessage ( exchange , messageIndex ) ; Message in = exchange . getIn ( ) ; in . setHeader ( DataSet . INDEX_HEADER , messageIndex ) ; return exchange ; } @ Override protected void waitForCompleteLatch ( ) throws InterruptedException { long size = getDataSet ( ) . getSize ( ) ; size *= 4000 ; setResultWaitTime ( size ) ; super . waitForCompleteLatch ( ) ; } public DataSet getDataSet ( ) { return dataSet ; } public void setDataSet ( DataSet dataSet ) { this . dataSet = dataSet ; } public long getPreloadSize ( ) { return preloadSize ; } public void setPreloadSize ( long preloadSize ) { this . preloadSize = preloadSize ; } public long getConsumeDelay ( ) { return consumeDelay ; } public void setConsumeDelay ( long consumeDelay ) { this . consumeDelay = consumeDelay ; } public long getProduceDelay ( ) { return produceDelay ; } public void setProduceDelay ( long produceDelay ) { this . produceDelay = produceDelay ; } @ Override protected void performAssertions ( Exchange actual ) throws Exception { if ( startTime == 0 ) { startTime = System . currentTimeMillis ( ) ; } int receivedCount = receivedCounter . incrementAndGet ( ) ; long index = receivedCount - 1 ; Exchange expected = createExchange ( index ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Received message: " + index + " = " + actual ) ; } assertMessageExpected ( index , expected , actual ) ; if ( consumeDelay > 0 ) { Thread . sleep ( consumeDelay ) ; } long group = getDataSet ( ) . getReportCount ( ) ; if ( receivedCount % group == 0 ) { reportProgress ( actual , receivedCount ) ; } } protected void reportProgress ( Exchange actual , int receivedCount ) { long time = System . currentTimeMillis ( ) ; long elapsed = time - startTime ; startTime = time ; LOG . info ( "Received: " + receivedCount + " messages so far. Last group took: " + elapsed + " millis" ) ; } protected void assertMessageExpected ( long index , Exchange expected , Exchange actual ) throws Exception { long actualCounter = ExchangeHelper . getMandatoryHeader ( actual , DataSet . INDEX_HEADER , Long . class ) ; assertEquals ( "Header: " + DataSet . INDEX_HEADER , index , actualCounter , actual ) ; getDataSet ( ) . assertMessageExpected ( this , expected , actual , index ) ; } public void start ( ) throws Exception { long size = getDataSet ( ) . getSize ( ) ; expectedMessageCount ( ( int ) size ) ; } public void stop ( ) throws Exception { } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class JMXExchange extends DefaultExchange { public JMXExchange ( CamelContext camelContext , ExchangePattern pattern , Notification notification ) { super ( camelContext , pattern ) ; setIn ( new JMXMessage ( notification ) ) ; } } 	1
package org . apache . camel . component . cxf . util ; import org . apache . cxf . endpoint . ConduitSelector ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; import org . apache . cxf . transport . Conduit ; public class NullConduitSelector implements ConduitSelector { private Endpoint endpoint ; private NullConduit nullConduit ; public NullConduitSelector ( ) { nullConduit = new NullConduit ( ) ; } public void complete ( Exchange exchange ) { } public Endpoint getEndpoint ( ) { return endpoint ; } public void prepare ( Message message ) { } public Conduit selectConduit ( Message message ) { return nullConduit ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . language . bean . BeanExpression ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "methodCall" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MethodCallExpression extends ExpressionType { @ XmlAttribute ( required = false ) private String bean ; @ XmlAttribute ( required = false ) private String method ; public MethodCallExpression ( ) { } public MethodCallExpression ( String beanName ) { super ( beanName ) ; } public MethodCallExpression ( String beanName , String method ) { super ( beanName ) ; this . method = method ; } public String getLanguage ( ) { return "bean" ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Override public Expression createExpression ( RouteContext routeContext ) { return new BeanExpression ( beanName ( ) , getMethod ( ) ) ; } @ Override public Predicate < Exchange > createPredicate ( RouteContext routeContext ) { return new BeanExpression < Exchange > ( beanName ( ) , getMethod ( ) ) ; } protected String beanName ( ) { if ( bean != null ) { return bean ; } return getExpression ( ) ; } } 	1
package org . apache . camel . component . cxf . util ; import java . io . IOException ; import java . io . OutputStream ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . message . Message ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . Destination ; import org . apache . cxf . transport . MessageObserver ; import org . apache . cxf . ws . addressing . EndpointReferenceType ; public class NullConduit implements Conduit { public void close ( ) { } public void close ( Message message ) throws IOException { OutputStream outputStream = message . getContent ( OutputStream . class ) ; if ( outputStream != null ) { outputStream . close ( ) ; } } public Destination getBackChannel ( ) { return null ; } public EndpointReferenceType getTarget ( ) { return null ; } public void prepare ( Message message ) throws IOException { CachedOutputStream outputStream = new CachedOutputStream ( ) ; message . setContent ( OutputStream . class , outputStream ) ; } public void setMessageObserver ( MessageObserver observer ) { } } 	0
package org . apache . camel . util ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import org . w3c . dom . NodeList ; public final class CollectionHelper { private CollectionHelper ( ) { } public static Integer size ( Object value ) { if ( value != null ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . size ( ) ; } else if ( value instanceof Map ) { Map map = ( Map ) value ; return map . size ( ) ; } else if ( value instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) value ; return array . length ; } else if ( value . getClass ( ) . isArray ( ) ) { return Array . getLength ( value ) ; } else if ( value instanceof NodeList ) { NodeList nodeList = ( NodeList ) value ; return nodeList . getLength ( ) ; } } return null ; } public static void appendValue ( Map map , Object key , Object value ) { Object oldValue = map . get ( key ) ; if ( oldValue != null ) { List list ; if ( oldValue instanceof List ) { list = ( List ) oldValue ; } else { list = new ArrayList ( ) ; list . add ( oldValue ) ; } list . add ( value ) ; } else { map . put ( key , value ) ; } } } 	1
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class RoundRobinLoadBalancer extends QueueLoadBalancer { private int counter = - 1 ; protected synchronized Processor chooseProcessor ( List < Processor > processors , Exchange exchange ) { int size = processors . size ( ) ; if ( ++ counter >= size ) { counter = 0 ; } return processors . get ( counter ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setBody" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetBodyType extends ExpressionNode { public SetBodyType ( ) { } public SetBodyType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "SetBody[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setBody" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; return ProcessorBuilder . setBody ( expr ) ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "ognl" ) public class OgnlExpression extends ExpressionType { public OgnlExpression ( ) { } public OgnlExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "ognl" ; } } 	0
package org . apache . camel . processor . exceptionpolicy ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . model . ExceptionType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultExceptionPolicyStrategy implements ExceptionPolicyStrategy { private static final transient Log LOG = LogFactory . getLog ( DefaultExceptionPolicyStrategy . class ) ; public ExceptionType getExceptionPolicy ( Map < Class , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finding best suited exception policy for thrown exception " + exception . getClass ( ) . getName ( ) ) ; } int targetLevel = getInheritanceLevel ( exception . getClass ( ) ) ; ExceptionType candidate = null ; int candidateDiff = Integer . MAX_VALUE ; Set < Map . Entry < Class , ExceptionType > > entries = exceptionPolicices . entrySet ( ) ; for ( Map . Entry < Class , ExceptionType > entry : entries ) { Class clazz = entry . getKey ( ) ; ExceptionType type = entry . getValue ( ) ; if ( clazz . isInstance ( exception ) ) { if ( clazz . equals ( exception . getClass ( ) ) ) { candidate = type ; break ; } int level = getInheritanceLevel ( clazz ) ; int diff = targetLevel - level ; if ( diff < candidateDiff ) { candidate = type ; candidateDiff = diff ; } } } if ( LOG . isDebugEnabled ( ) ) { if ( candidate != null ) { LOG . debug ( "Using " + candidate + " as the exception policy" ) ; } else { LOG . debug ( "No candidate found to be used as exception policy" ) ; } } return candidate ; } private static int getInheritanceLevel ( Class clazz ) { if ( clazz == null || "java.lang.Object" . equals ( clazz . getName ( ) ) ) { return 0 ; } return 1 + getInheritanceLevel ( clazz . getSuperclass ( ) ) ; } } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "jruby" ) public @ interface Ruby { String value ( ) ; } 	0
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URLDecoder ; import java . net . URLEncoder ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class URISupport { public static class CompositeData { public String host ; String scheme ; String path ; URI components [ ] ; Map parameters ; String fragment ; public URI [ ] getComponents ( ) { return components ; } public String getFragment ( ) { return fragment ; } public Map getParameters ( ) { return parameters ; } public String getScheme ( ) { return scheme ; } public String getPath ( ) { return path ; } public String getHost ( ) { return host ; } public URI toURI ( ) throws URISyntaxException { StringBuffer sb = new StringBuffer ( ) ; if ( scheme != null ) { sb . append ( scheme ) ; sb . append ( ':' ) ; } if ( host != null && host . length ( ) != 0 ) { sb . append ( host ) ; } else { sb . append ( '(' ) ; for ( int i = 0 ; i < components . length ; i ++ ) { if ( i != 0 ) { sb . append ( ',' ) ; } sb . append ( components [ i ] . toString ( ) ) ; } sb . append ( ')' ) ; } if ( path != null ) { sb . append ( '/' ) ; sb . append ( path ) ; } if ( ! parameters . isEmpty ( ) ) { sb . append ( "?" ) ; sb . append ( createQueryString ( parameters ) ) ; } if ( fragment != null ) { sb . append ( "#" ) ; sb . append ( fragment ) ; } return new URI ( sb . toString ( ) ) ; } } public static Map parseQuery ( String uri ) throws URISyntaxException { try { Map rc = new HashMap ( ) ; if ( uri != null ) { String [ ] parameters = uri . split ( "&" ) ; for ( String parameter : parameters ) { int p = parameter . indexOf ( "=" ) ; if ( p >= 0 ) { String name = URLDecoder . decode ( parameter . substring ( 0 , p ) , "UTF-8" ) ; String value = URLDecoder . decode ( parameter . substring ( p + 1 ) , "UTF-8" ) ; rc . put ( name , value ) ; } else { rc . put ( parameter , null ) ; } } } return rc ; } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static Map parseParameters ( URI uri ) throws URISyntaxException { String query = uri . getQuery ( ) ; if ( query == null ) { String schemeSpecificPart = uri . getSchemeSpecificPart ( ) ; int idx = schemeSpecificPart . lastIndexOf ( '?' ) ; if ( idx < 0 ) { return Collections . EMPTY_MAP ; } else { query = schemeSpecificPart . substring ( idx + 1 ) ; } } else { query = stripPrefix ( query , "?" ) ; } return parseQuery ( query ) ; } public static URI removeQuery ( URI uri ) throws URISyntaxException { return createURIWithQuery ( uri , null ) ; } public static URI createURIWithQuery ( URI uri , String query ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getUserInfo ( ) , uri . getHost ( ) , uri . getPort ( ) , uri . getPath ( ) , query , uri . getFragment ( ) ) ; } public static CompositeData parseComposite ( URI uri ) throws URISyntaxException { CompositeData rc = new CompositeData ( ) ; rc . scheme = uri . getScheme ( ) ; String ssp = stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) . trim ( ) ; parseComposite ( uri , rc , ssp ) ; rc . fragment = uri . getFragment ( ) ; return rc ; } private static void parseComposite ( URI uri , CompositeData rc , String ssp ) throws URISyntaxException { String componentString ; String params ; if ( ! checkParenthesis ( ssp ) ) { throw new URISyntaxException ( uri . toString ( ) , "Not a matching number of '(' and ')' parenthesis" ) ; } int p ; int intialParen = ssp . indexOf ( "(" ) ; if ( intialParen == 0 ) { rc . host = ssp . substring ( 0 , intialParen ) ; p = rc . host . indexOf ( "/" ) ; if ( p >= 0 ) { rc . path = rc . host . substring ( p ) ; rc . host = rc . host . substring ( 0 , p ) ; } p = ssp . lastIndexOf ( ")" ) ; componentString = ssp . substring ( intialParen + 1 , p ) ; params = ssp . substring ( p + 1 ) . trim ( ) ; } else { componentString = ssp ; params = "" ; } String components [ ] = splitComponents ( componentString ) ; rc . components = new URI [ components . length ] ; for ( int i = 0 ; i < components . length ; i ++ ) { rc . components [ i ] = new URI ( components [ i ] . trim ( ) ) ; } p = params . indexOf ( "?" ) ; if ( p >= 0 ) { if ( p > 0 ) { rc . path = stripPrefix ( params . substring ( 0 , p ) , "/" ) ; } rc . parameters = parseQuery ( params . substring ( p + 1 ) ) ; } else { if ( params . length ( ) > 0 ) { rc . path = stripPrefix ( params , "/" ) ; } rc . parameters = Collections . EMPTY_MAP ; } } private static String [ ] splitComponents ( String str ) { ArrayList l = new ArrayList ( ) ; int last = 0 ; int depth = 0 ; char chars [ ] = str . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { switch ( chars [ i ] ) { case '(' : depth ++ ; break ; case ')' : depth -- ; break ; case ',' : if ( depth == 0 ) { String s = str . substring ( last , i ) ; l . add ( s ) ; last = i + 1 ; } break ; default : } } String s = str . substring ( last ) ; if ( s . length ( ) != 0 ) { l . add ( s ) ; } String rc [ ] = new String [ l . size ( ) ] ; l . toArray ( rc ) ; return rc ; } public static String stripPrefix ( String value , String prefix ) { if ( value . startsWith ( prefix ) ) { return value . substring ( prefix . length ( ) ) ; } return value ; } public static URI stripScheme ( URI uri ) throws URISyntaxException { return new URI ( stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) ) ; } public static String createQueryString ( Map options ) throws URISyntaxException { try { if ( options . size ( ) > 0 ) { StringBuffer rc = new StringBuffer ( ) ; boolean first = true ; for ( Iterator iter = options . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { if ( first ) { first = false ; } else { rc . append ( "&" ) ; } String key = ( String ) iter . next ( ) ; String value = ( String ) options . get ( key ) ; rc . append ( URLEncoder . encode ( key , "UTF-8" ) ) ; rc . append ( "=" ) ; rc . append ( URLEncoder . encode ( value , "UTF-8" ) ) ; } return rc . toString ( ) ; } else { return "" ; } } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static URI createRemainingURI ( URI originalURI , Map params ) throws URISyntaxException { String s = createQueryString ( params ) ; if ( s . length ( ) == 0 ) { s = null ; } return createURIWithQuery ( originalURI , s ) ; } public static URI changeScheme ( URI bindAddr , String scheme ) throws URISyntaxException { return new URI ( scheme , bindAddr . getUserInfo ( ) , bindAddr . getHost ( ) , bindAddr . getPort ( ) , bindAddr . getPath ( ) , bindAddr . getQuery ( ) , bindAddr . getFragment ( ) ) ; } public static boolean checkParenthesis ( String str ) { boolean result = true ; if ( str != null ) { int open = 0 ; int closed = 0 ; int i = 0 ; while ( ( i = str . indexOf ( '(' , i ) ) >= 0 ) { i ++ ; open ++ ; } i = 0 ; while ( ( i = str . indexOf ( ')' , i ) ) >= 0 ) { i ++ ; closed ++ ; } result = open == closed ; } return result ; } @ Deprecated public int indexOfParenthesisMatch ( String str ) { int result = - 1 ; return result ; } } 	1
package org . apache . camel ; public interface Service { void start ( ) throws Exception ; void stop ( ) throws Exception ; } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BatchProcessor extends ServiceSupport implements Runnable , Processor { public static final long DEFAULT_BATCH_TIMEOUT = 1000L ; public static final int DEFAULT_BATCH_SIZE = 100 ; private static final transient Log LOG = LogFactory . getLog ( BatchProcessor . class ) ; private Endpoint endpoint ; private Processor processor ; private Collection < Exchange > collection ; private long batchTimeout = DEFAULT_BATCH_TIMEOUT ; private int batchSize = DEFAULT_BATCH_SIZE ; private PollingConsumer consumer ; private ExceptionHandler exceptionHandler ; public BatchProcessor ( Endpoint endpoint , Processor processor , Collection < Exchange > collection ) { this . endpoint = endpoint ; this . processor = processor ; this . collection = collection ; } @ Override public String toString ( ) { return "BatchProcessor[to: " + processor + "]" ; } public void run ( ) { LOG . debug ( "Starting thread for " + this ) ; while ( isRunAllowed ( ) ) { try { processBatch ( ) ; } catch ( Exception e ) { getExceptionHandler ( ) . handleException ( e ) ; } } collection . clear ( ) ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public Endpoint getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } protected synchronized void processBatch ( ) throws Exception { long start = System . currentTimeMillis ( ) ; long end = start + batchTimeout ; for ( int i = 0 ; ! isBatchCompleted ( i ) ; i ++ ) { long timeout = end - System . currentTimeMillis ( ) ; if ( timeout < 0L ) { LOG . debug ( "batch timeout expired at batch index:" + i ) ; break ; } Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { LOG . debug ( "receive with timeout: " + timeout + " expired at batch index:" + i ) ; break ; } collection . add ( exchange ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finished batch size: " + batchSize + " timeout: " + batchTimeout + " so sending set: " + collection ) ; } Iterator < Exchange > iter = collection . iterator ( ) ; while ( iter . hasNext ( ) ) { Exchange exchange = iter . next ( ) ; iter . remove ( ) ; processExchange ( exchange ) ; } } protected boolean isBatchCompleted ( int index ) { return index >= batchSize ; } protected void processExchange ( Exchange exchange ) throws Exception { processor . process ( exchange ) ; } protected void doStart ( ) throws Exception { consumer = endpoint . createPollingConsumer ( ) ; ServiceHelper . startServices ( processor , consumer ) ; Thread thread = new Thread ( this , this + " Polling Thread" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( consumer , processor ) ; collection . clear ( ) ; } protected Collection < Exchange > getCollection ( ) { return collection ; } public void process ( Exchange exchange ) throws Exception { } } 	1
package org . apache . camel . component . cxf . feature ; import java . util . List ; import java . util . logging . Logger ; import org . apache . cxf . endpoint . Server ; import org . apache . cxf . feature . AbstractFeature ; import org . apache . cxf . interceptor . Interceptor ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . phase . PhaseInterceptor ; public abstract class AbstractDataFormatFeature extends AbstractFeature { protected abstract Logger getLogger ( ) ; protected void resetServiceInvokerInterceptor ( Server server ) { List < Interceptor > serviceInterceptor = server . getEndpoint ( ) . getService ( ) . getInInterceptors ( ) ; removeInterceptorWhichIsInThePhases ( serviceInterceptor , new String [ ] { Phase . INVOKE } ) ; serviceInterceptor . add ( new MessageInvokerInterceptor ( ) ) ; } protected void removeInterceptorWhichIsInThePhases ( List < Interceptor > interceptors , String [ ] phaseNames ) { for ( Interceptor i : interceptors ) { if ( i instanceof PhaseInterceptor ) { PhaseInterceptor p = ( PhaseInterceptor ) i ; for ( String phaseName : phaseNames ) { if ( p . getPhase ( ) . equals ( phaseName ) ) { getLogger ( ) . info ( "removing the interceptor " + p ) ; interceptors . remove ( p ) ; break ; } } } } } protected void removeInterceptorWhichIsOutThePhases ( List < Interceptor > interceptors , String [ ] phaseNames ) { for ( Interceptor i : interceptors ) { boolean outside = false ; if ( i instanceof PhaseInterceptor ) { PhaseInterceptor p = ( PhaseInterceptor ) i ; for ( String phaseName : phaseNames ) { if ( p . getPhase ( ) . equals ( phaseName ) ) { outside = true ; break ; } } if ( ! outside ) { getLogger ( ) . info ( "removing the interceptor " + p ) ; interceptors . remove ( p ) ; } } } } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . BlockingQueue ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class QueueComponent extends SedaComponent { private static final transient Log LOG = LogFactory . getLog ( QueueComponent . class ) ; public QueueComponent ( ) { LOG . warn ( "This component has been deprecated; please use the seda: URI format instead of queue:" ) ; } } 	1
package org . apache . camel . management ; import java . util . Map ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . RouteContext ; public class InstrumentationErrorHandlerWrappingStrategy implements ErrorHandlerWrappingStrategy { private Map < ProcessorType , PerformanceCounter > counterMap ; public InstrumentationErrorHandlerWrappingStrategy ( Map < ProcessorType , PerformanceCounter > counterMap ) { this . counterMap = counterMap ; } public Processor wrapProcessorInErrorHandler ( RouteContext routeContext , ProcessorType processorType , Processor target ) throws Exception { if ( counterMap . containsKey ( processorType ) ) { return processorType . getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } return target ; } } 	0
package org . apache . camel ; import java . util . Map ; public interface Endpoint < E extends Exchange > { boolean isSingleton ( ) ; String getEndpointUri ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( Exchange exchange ) ; CamelContext getCamelContext ( ) ; Producer < E > createProducer ( ) throws Exception ; Consumer < E > createConsumer ( Processor processor ) throws Exception ; PollingConsumer < E > createPollingConsumer ( ) throws Exception ; void configureProperties ( Map options ) ; void setCamelContext ( CamelContext context ) ; @ Deprecated CamelContext getContext ( ) ; @ Deprecated void setContext ( CamelContext context ) ; } 	1
package org . apache . camel . bam . model ; import java . util . Date ; import javax . persistence . CascadeType ; import javax . persistence . Entity ; import javax . persistence . FetchType ; import javax . persistence . GeneratedValue ; import javax . persistence . Id ; import javax . persistence . ManyToOne ; import javax . persistence . Temporal ; import javax . persistence . TemporalType ; import javax . persistence . Transient ; import org . apache . camel . bam . processor . ProcessContext ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Entity public class ActivityState extends TemporalEntity { private static final transient Log LOG = LogFactory . getLog ( ActivityState . class ) ; private ProcessInstance processInstance ; private Integer receivedMessageCount = 0 ; private ActivityDefinition activityDefinition ; private Date timeExpected ; @ Temporal ( TemporalType . TIME ) private Date timeOverdue ; private Integer escalationLevel = 0 ; @ Override @ Id @ GeneratedValue public Long getId ( ) { return super . getId ( ) ; } @ Override public String toString ( ) { return "ActivityState[" + getId ( ) + " on " + getProcessInstance ( ) + " " + getActivityDefinition ( ) + "]" ; } public synchronized void processExchange ( ActivityRules activityRules , ProcessContext context ) throws Exception { int messageCount = 0 ; Integer count = getReceivedMessageCount ( ) ; if ( count != null ) { messageCount = count . intValue ( ) ; } setReceivedMessageCount ( ++ messageCount ) ; if ( messageCount == 1 ) { onFirstMessage ( context ) ; } int expectedMessages = activityRules . getExpectedMessages ( ) ; if ( messageCount == expectedMessages ) { onExpectedMessage ( context ) ; } else if ( messageCount > expectedMessages ) { onExcessMessage ( context ) ; } } public boolean isActivity ( ActivityRules activityRules ) { return ObjectHelper . equal ( getActivityDefinition ( ) , activityRules . getActivityDefinition ( ) ) ; } @ ManyToOne ( fetch = FetchType . LAZY , cascade = { CascadeType . PERSIST , CascadeType . MERGE } ) public ProcessInstance getProcessInstance ( ) { return processInstance ; } public void setProcessInstance ( ProcessInstance processInstance ) { this . processInstance = processInstance ; processInstance . getActivityStates ( ) . add ( this ) ; } @ ManyToOne ( fetch = FetchType . LAZY , cascade = { CascadeType . PERSIST , CascadeType . MERGE } ) public ActivityDefinition getActivityDefinition ( ) { return activityDefinition ; } public void setActivityDefinition ( ActivityDefinition activityDefinition ) { this . activityDefinition = activityDefinition ; } public Integer getEscalationLevel ( ) { return escalationLevel ; } public void setEscalationLevel ( Integer escalationLevel ) { this . escalationLevel = escalationLevel ; } public Integer getReceivedMessageCount ( ) { return receivedMessageCount ; } public void setReceivedMessageCount ( Integer receivedMessageCount ) { this . receivedMessageCount = receivedMessageCount ; } @ Temporal ( TemporalType . TIME ) public Date getTimeExpected ( ) { return timeExpected ; } public void setTimeExpected ( Date timeExpected ) { this . timeExpected = timeExpected ; } @ Temporal ( TemporalType . TIME ) public Date getTimeOverdue ( ) { return timeOverdue ; } public void setTimeOverdue ( Date timeOverdue ) { this . timeOverdue = timeOverdue ; } public void setTimeCompleted ( Date timeCompleted ) { super . setTimeCompleted ( timeCompleted ) ; if ( timeCompleted != null ) { setEscalationLevel ( - 1 ) ; } } @ Transient public String getCorrelationKey ( ) { ProcessInstance pi = getProcessInstance ( ) ; if ( pi == null ) { return null ; } return pi . getCorrelationKey ( ) ; } protected void onFirstMessage ( ProcessContext context ) { if ( ! isStarted ( ) ) { setTimeStarted ( currentTime ( ) ) ; context . onStarted ( this ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Activity first message: " + this ) ; } } } protected void onExpectedMessage ( ProcessContext context ) { if ( ! isCompleted ( ) ) { setTimeCompleted ( currentTime ( ) ) ; setTimeOverdue ( null ) ; context . onCompleted ( this ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Activity complete: " + this ) ; } } } protected void onExcessMessage ( ProcessContext context ) { } protected Date currentTime ( ) { return new Date ( ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "recipientList" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RecipientListType extends ExpressionNode { public RecipientListType ( ) { } public RecipientListType ( ExpressionType expression ) { super ( expression ) ; } public RecipientListType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "RecipientList[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "recipientList" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new RecipientList ( getExpression ( ) . createExpression ( routeContext ) ) ; } } 	1
package org . apache . camel . component . uface . swing ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . component . uface . UFaceComponent ; import org . ufacekit . ui . swing . databinding . swing . SwingRealm ; public class SwingComponent extends UFaceComponent { public SwingComponent ( ) { SwingRealm . createDefault ( ) ; } protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return super . createEndpoint ( uri , remaining , parameters ) ; } } 	0
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "convertBodyTo" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ConvertBodyType extends ProcessorType < ProcessorType > { @ XmlAttribute private String type ; @ XmlTransient private Class typeClass ; public ConvertBodyType ( ) { } public ConvertBodyType ( String type ) { setType ( type ) ; } public ConvertBodyType ( Class typeClass ) { setTypeClass ( typeClass ) ; } @ Override public String toString ( ) { return "convertBodyTo[ " + getType ( ) + "]" ; } @ Override public String getShortName ( ) { return "convertBodyTo" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new ConvertBodyProcessor ( getTypeClass ( ) ) ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } protected Class createTypeClass ( ) { return ObjectHelper . loadClass ( getType ( ) , getClass ( ) . getClassLoader ( ) ) ; } public void setType ( String type ) { this . type = type ; } public String getType ( ) { return type ; } public void setTypeClass ( Class typeClass ) { this . typeClass = typeClass ; } public Class getTypeClass ( ) { if ( typeClass == null ) { setTypeClass ( createTypeClass ( ) ) ; } return typeClass ; } } 	1
package org . apache . camel . model . loadbalancer ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "random" ) public class RandomLoadBalanceStrategy extends LoadBalancerType { @ Override protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { return new org . apache . camel . processor . loadbalancer . RandomLoadBalancer ( ) ; } } 	0
package org . apache . camel ; import java . util . Map ; public interface ProducerTemplate < E extends Exchange > extends Service { E send ( E exchange ) ; E send ( Processor processor ) ; Object sendBody ( Object body ) ; Object sendBodyAndHeader ( Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) ; E send ( String endpointUri , E exchange ) ; E send ( String endpointUri , Processor processor ) ; E send ( String endpointUri , ExchangePattern pattern , Processor processor ) ; E send ( String endpointUri , Processor processor , AsyncCallback callback ) ; E send ( Endpoint < E > endpoint , E exchange ) ; E send ( Endpoint < E > endpoint , Processor processor ) ; E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) ; E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) ; Object sendBody ( Endpoint < E > endpoint , Object body ) ; Object sendBody ( String endpointUri , Object body ) ; Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) ; Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) ; Object sendBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( String endpointUri , Object body , Map < String , Object > headers ) ; Object sendBodyAndHeaders ( Endpoint endpoint , Object body , Map < String , Object > headers ) ; E request ( Endpoint < E > endpoint , Processor processor ) ; Object requestBody ( Endpoint < E > endpoint , Object body ) ; Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) ; E request ( String endpointUri , Processor processor ) ; Object requestBody ( String endpointUri , Object body ) ; Object requestBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; } 	1
package org . apache . camel . component . jms ; import javax . jms . Message ; import javax . jms . MessageListener ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; public class MessageListenerProcessor implements MessageListener { private final JmsEndpoint endpoint ; private final Processor processor ; public MessageListenerProcessor ( JmsEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; } public void onMessage ( Message message ) { try { Exchange exchange = endpoint . createExchange ( message ) ; processor . process ( exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . FileOutputStream ; import java . io . InputStream ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( FileProducer . class ) ; private FileEndpoint endpoint ; public FileProducer ( FileEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public FileEndpoint getEndpoint ( ) { return ( FileEndpoint ) super . getEndpoint ( ) ; } public void process ( Exchange exchange ) throws Exception { FileExchange fileExchange = endpoint . createExchange ( exchange ) ; process ( fileExchange ) ; ExchangeHelper . copyResults ( exchange , fileExchange ) ; } public void process ( FileExchange exchange ) throws Exception { InputStream in = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; File file = createFileName ( exchange . getIn ( ) ) ; buildDirectory ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to: " + file + " from exchange: " + exchange ) ; } FileChannel fc = null ; try { if ( getEndpoint ( ) . isAppend ( ) ) { fc = new RandomAccessFile ( file , "rw" ) . getChannel ( ) ; fc . position ( fc . size ( ) ) ; } else { fc = new FileOutputStream ( file ) . getChannel ( ) ; } int size = getEndpoint ( ) . getBufferSize ( ) ; byte [ ] buffer = new byte [ size ] ; ByteBuffer byteBuffer = ByteBuffer . wrap ( buffer ) ; while ( true ) { int count = in . read ( buffer ) ; if ( count <= 0 ) { break ; } else if ( count < size ) { byteBuffer = ByteBuffer . wrap ( buffer , 0 , count ) ; fc . write ( byteBuffer ) ; break ; } else { fc . write ( byteBuffer ) ; byteBuffer . clear ( ) ; } } } finally { ObjectHelper . close ( in , file . getName ( ) , LOG ) ; ObjectHelper . close ( fc , file . getName ( ) , LOG ) ; } } protected File createFileName ( Message message ) { File answer ; String name = null ; if ( ! endpoint . isIgnoreFileNameHeader ( ) ) { name = message . getHeader ( FileComponent . HEADER_FILE_NAME , String . class ) ; } File endpointFile = endpoint . getFile ( ) ; if ( endpointFile . isDirectory ( ) ) { if ( name != null ) { answer = new File ( endpointFile , name ) ; if ( answer . isDirectory ( ) ) { answer = new File ( answer , endpoint . getGeneratedFileName ( message ) ) ; } } else { answer = new File ( endpointFile , endpoint . getGeneratedFileName ( message ) ) ; } } else { if ( name == null ) { answer = endpointFile ; } else { answer = new File ( endpointFile , name ) ; } } message . setHeader ( FileComponent . HEADER_FILE_NAME_PRODUCED , answer . getAbsolutePath ( ) ) ; return answer ; } private void buildDirectory ( File file ) { String dirName = file . getAbsolutePath ( ) ; int index = dirName . lastIndexOf ( File . separatorChar ) ; if ( index > 0 ) { dirName = dirName . substring ( 0 , index ) ; File dir = new File ( dirName ) ; dir . mkdirs ( ) ; } } } 	1
package org . apache . camel . component . dataset ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . camel . processor . ThroughputLogger ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DataSetConsumer extends DefaultConsumer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( DataSetConsumer . class ) ; private DataSetEndpoint endpoint ; private Processor reporter ; public DataSetConsumer ( DataSetEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( reporter == null ) { reporter = createReporter ( ) ; } final DataSet dataSet = endpoint . getDataSet ( ) ; final long preloadSize = endpoint . getPreloadSize ( ) ; sendMessages ( 0 , preloadSize ) ; endpoint . getExecutorService ( ) . execute ( new Runnable ( ) { public void run ( ) { sendMessages ( preloadSize , dataSet . getSize ( ) ) ; } } ) ; } protected void sendMessages ( long startIndex , long endIndex ) { try { for ( long i = startIndex ; i < endIndex ; i ++ ) { Exchange exchange = endpoint . createExchange ( i ) ; getProcessor ( ) . process ( exchange ) ; try { long delay = endpoint . getProduceDelay ( ) ; if ( delay < 3 ) { delay = 3 ; } Thread . sleep ( delay ) ; } catch ( InterruptedException e ) { LOG . debug ( e ) ; } if ( reporter != null ) { reporter . process ( exchange ) ; } } } catch ( Exception e ) { LOG . error ( e ) ; } } protected ThroughputLogger createReporter ( ) { ThroughputLogger answer = new ThroughputLogger ( endpoint . getEndpointUri ( ) , ( int ) endpoint . getDataSet ( ) . getReportCount ( ) ) ; answer . setAction ( "Sent" ) ; return answer ; } } 	0
package org . apache . camel . language . simple ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . language . IllegalSyntaxException ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class SimpleLanguage implements Language { public static Expression simple ( String expression ) { SimpleLanguage language = new SimpleLanguage ( ) ; return language . createExpression ( expression ) ; } public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { if ( expression . indexOf ( "${" ) >= 0 ) { return createComplexExpression ( expression ) ; } return createSimpleExpression ( expression ) ; } protected Expression < Exchange > createComplexExpression ( String expression ) { List < Expression > results = new ArrayList < Expression > ( ) ; int pivot = 0 ; int size = expression . length ( ) ; while ( pivot < size ) { int idx = expression . indexOf ( "${" , pivot ) ; if ( idx < 0 ) { results . add ( createConstantExpression ( expression , pivot , size ) ) ; break ; } else { if ( pivot < idx ) { results . add ( createConstantExpression ( expression , pivot , idx ) ) ; } pivot = idx + 2 ; int endIdx = expression . indexOf ( "}" , pivot ) ; if ( endIdx < 0 ) { throw new IllegalArgumentException ( "Expecting } but found end of string for simple expression: " + expression ) ; } String simpleText = expression . substring ( pivot , endIdx ) ; Expression simpleExpression = createSimpleExpression ( simpleText ) ; results . add ( simpleExpression ) ; pivot = endIdx + 1 ; } } return ExpressionBuilder . concatExpression ( results , expression ) ; } protected Expression createConstantExpression ( String expression , int start , int end ) { return ExpressionBuilder . constantExpression ( expression . substring ( start , end ) ) ; } protected Expression < Exchange > createSimpleExpression ( String expression ) { if ( ObjectHelper . isEqualToAny ( expression , "body" , "in.body" ) ) { return ExpressionBuilder . bodyExpression ( ) ; } else if ( ObjectHelper . equal ( expression , "out.body" ) ) { return ExpressionBuilder . outBodyExpression ( ) ; } String remainder = ifStartsWithReturnRemainder ( "in.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "header." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "headers." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "in.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . headerExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "out.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "out.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . outHeaderExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "property." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "sys." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } throw new IllegalSyntaxException ( this , expression ) ; } protected String ifStartsWithReturnRemainder ( String prefix , String text ) { if ( text . startsWith ( prefix ) ) { String remainder = text . substring ( prefix . length ( ) ) ; if ( remainder . length ( ) > 0 ) { return remainder ; } } return null ; } } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "serialization" ) public class SerializationDataFormat extends DataFormatType { @ Override protected DataFormat createDataFormat ( RouteContext routeContext ) { return new org . apache . camel . impl . SerializationDataFormat ( ) ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; public interface FileProcessStrategy { boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; } 	1
package org . apache . camel . component . cxf . util ; import java . util . logging . Logger ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . stream . XMLStreamWriter ; import javax . xml . transform . Source ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . AbstractOutDatabindingInterceptor ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . staxutils . StaxUtils ; public class DataOutInterceptor extends AbstractOutDatabindingInterceptor { private static final Logger LOG = LogUtils . getL7dLogger ( DataOutInterceptor . class ) ; public DataOutInterceptor ( ) { super ( Phase . MARSHAL ) ; } public void handleMessage ( Message message ) throws Fault { XMLStreamWriter xmlWriter = getXMLStreamWriter ( message ) ; try { Source source = message . getContent ( Source . class ) ; if ( source != null ) { XMLStreamReader xmlReader = StaxUtils . createXMLStreamReader ( source ) ; StaxUtils . copy ( xmlReader , xmlWriter ) ; } } catch ( XMLStreamException e ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "XMLSTREAM_EXCEPTION" , LOG , e ) , e ) ; } } } 	0
package org . apache . camel . component . jmx ; import javax . management . MBeanServer ; import javax . management . Notification ; import javax . management . ObjectName ; import javax . management . monitor . CounterMonitor ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JMXEndpoint extends DefaultEndpoint < JMXExchange > { private static final transient Log LOG = LogFactory . getLog ( JMXEndpoint . class ) ; private String name ; private ObjectName ourName ; private String observedObjectName ; private String attributeName ; private long granularityPeriod = 5000 ; private Number threshold ; private Number offset ; private MBeanServer mbeanServer ; private CounterMonitor counterMonitor = new CounterMonitor ( ) ; protected JMXEndpoint ( String endpointUri , JMXComponent component ) { super ( endpointUri , component ) ; observedObjectName = endpointUri ; } public JMXEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < JMXExchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "Producer not supported" ) ; } public Consumer < JMXExchange > createConsumer ( Processor proc ) throws Exception { ObjectName observedName = new ObjectName ( observedObjectName ) ; if ( name == null ) { String type = observedName . getKeyProperty ( "type" ) ; type = type != null ? type : "UNKNOWN" ; name = mbeanServer . getDefaultDomain ( ) + ":type=CounterMonitor_" + type ; } JMXConsumer result = new JMXConsumer ( this , proc ) ; ourName = new ObjectName ( name ) ; counterMonitor . setNotify ( true ) ; counterMonitor . addObservedObject ( observedName ) ; counterMonitor . setObservedAttribute ( attributeName ) ; counterMonitor . setGranularityPeriod ( granularityPeriod ) ; counterMonitor . setDifferenceMode ( false ) ; counterMonitor . setInitThreshold ( threshold ) ; counterMonitor . setOffset ( offset ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Registering and adding notification listener for [" + counterMonitor + "] with name [" + ourName + "]" ) ; } mbeanServer . registerMBean ( counterMonitor , ourName ) ; mbeanServer . addNotificationListener ( ourName , result , null , new Object ( ) ) ; return result ; } public boolean isSingleton ( ) { return true ; } public JMXExchange createExchange ( Notification notification ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , notification ) ; } public JMXExchange createExchange ( ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , null ) ; } public JMXExchange createExchange ( ExchangePattern pattern ) { return new JMXExchange ( getCamelContext ( ) , pattern , null ) ; } public String getAttributeName ( ) { return attributeName ; } public void setAttributeName ( String attributeName ) { this . attributeName = attributeName ; } public long getGranularityPeriod ( ) { return granularityPeriod ; } public void setGranularityPeriod ( long granularityPeriod ) { this . granularityPeriod = granularityPeriod ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Number getOffset ( ) { return offset ; } public void setOffset ( Number offset ) { this . offset = offset ; } public Number getThreshold ( ) { return threshold ; } public void setThreshold ( Number threshold ) { this . threshold = threshold ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; import javax . xml . bind . Marshaller ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . util . JAXBSource ; import javax . xml . parsers . ParserConfigurationException ; import org . w3c . dom . Document ; import org . apache . camel . Converter ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . converter . HasAnnotation ; import org . apache . camel . converter . jaxp . XmlConverter ; public class JaxbConverter { private XmlConverter jaxbConverter ; public XmlConverter getJaxbConverter ( ) { if ( jaxbConverter == null ) { jaxbConverter = new XmlConverter ( ) ; } return jaxbConverter ; } public void setJaxbConverter ( XmlConverter jaxbConverter ) { this . jaxbConverter = jaxbConverter ; } @ Converter public static JAXBSource toSource ( @ HasAnnotation ( XmlRootElement . class ) Object value ) throws JAXBException { JAXBContext context = createJaxbContext ( value ) ; return new JAXBSource ( context , value ) ; } @ Converter public Document toDocument ( @ HasAnnotation ( XmlRootElement . class ) Object value ) throws JAXBException , ParserConfigurationException { JAXBContext context = createJaxbContext ( value ) ; Marshaller marshaller = context . createMarshaller ( ) ; Document doc = getJaxbConverter ( ) . createDocument ( ) ; marshaller . marshal ( value , doc ) ; return doc ; } @ Converter public static MessageType toMessageType ( Exchange exchange ) { return toMessageType ( exchange . getIn ( ) ) ; } @ Converter public static MessageType toMessageType ( Message in ) { MessageType answer = new MessageType ( ) ; answer . copyFrom ( in ) ; return answer ; } protected static JAXBContext createJaxbContext ( Object value ) throws JAXBException { if ( value == null ) { throw new IllegalArgumentException ( "Cannot convert from null value to JAXBSource" ) ; } JAXBContext context = JAXBContext . newInstance ( value . getClass ( ) ) ; return context ; } } 	0
package org . apache . camel ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . Callable ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; public interface CamelContext extends Service { String getName ( ) ; void addComponent ( String componentName , Component component ) ; Component getComponent ( String componentName ) ; < T extends Component > T getComponent ( String name , Class < T > componentType ) ; Component removeComponent ( String componentName ) ; Component getOrCreateComponent ( String componentName , Callable < Component > factory ) ; Endpoint getEndpoint ( String uri ) ; < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) ; Collection < Endpoint > getSingletonEndpoints ( ) ; Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception ; Endpoint removeSingletonEndpoint ( String uri ) throws Exception ; List < RouteType > getRouteDefinitions ( ) ; List < Route > getRoutes ( ) ; void setRoutes ( List < Route > routes ) ; void addRoutes ( Collection < Route > routes ) throws Exception ; void addRoutes ( Routes builder ) throws Exception ; void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception ; ExchangeConverter getExchangeConverter ( ) ; TypeConverter getTypeConverter ( ) ; Registry getRegistry ( ) ; Injector getInjector ( ) ; LifecycleStrategy getLifecycleStrategy ( ) ; Language resolveLanguage ( String language ) ; < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; } 	1
package org . apache . camel . component . spring . integration . adapter . config ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . apache . camel . component . spring . integration . adapter . CamelTargetAdapter ; import org . springframework . beans . factory . parsing . BeanComponentDefinition ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . beans . factory . xml . AbstractSimpleBeanDefinitionParser ; import org . springframework . beans . factory . xml . ParserContext ; import org . springframework . integration . ConfigurationException ; import org . springframework . integration . endpoint . HandlerEndpoint ; import org . springframework . util . StringUtils ; public class CamelTargetAdapterParser extends AbstractCamelContextBeanDefinitionParaser { protected Class < ? > getBeanClass ( Element element ) { return HandlerEndpoint . class ; } protected boolean shouldGenerateId ( ) { return false ; } protected boolean shouldGenerateIdAsFallback ( ) { return true ; } protected void parseAttributes ( Element element , ParserContext ctx , BeanDefinitionBuilder bean ) { NamedNodeMap atts = element . getAttributes ( ) ; for ( int i = 0 ; i < atts . getLength ( ) ; i ++ ) { Attr node = ( Attr ) atts . item ( i ) ; String val = node . getValue ( ) ; String name = node . getLocalName ( ) ; if ( ! name . equals ( "requestChannel" ) && ! name . equals ( "replyChannel" ) ) { mapToProperty ( bean , name , val ) ; } } } protected void doParse ( Element element , ParserContext parserContext , BeanDefinitionBuilder builder ) { BeanDefinitionBuilder adapterDefBuilder = BeanDefinitionBuilder . rootBeanDefinition ( CamelTargetAdapter . class ) ; String requestChannel = element . getAttribute ( "requestChannel" ) ; String replyChannel = element . getAttribute ( "replyChannel" ) ; if ( ! StringUtils . hasText ( requestChannel ) ) { throw new ConfigurationException ( "The 'requestChannel' attribute is required." ) ; } parseAttributes ( element , parserContext , adapterDefBuilder ) ; parseCamelContext ( element , parserContext , adapterDefBuilder ) ; String adapterBeanName = parserContext . getReaderContext ( ) . generateBeanName ( adapterDefBuilder . getBeanDefinition ( ) ) ; parserContext . registerBeanComponent ( new BeanComponentDefinition ( adapterDefBuilder . getBeanDefinition ( ) , adapterBeanName ) ) ; builder . addConstructorArgReference ( adapterBeanName ) ; builder . addPropertyValue ( "inputChannelName" , requestChannel ) ; if ( StringUtils . hasText ( replyChannel ) ) { builder . addPropertyValue ( "outputChannelName" , replyChannel ) ; } } } 	0
package org . apache . camel . processor ; import java . util . concurrent . RejectedExecutionException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannel extends ErrorHandlerSupport implements AsyncProcessor { public static final String REDELIVERY_COUNTER = "org.apache.camel.RedeliveryCounter" ; public static final String REDELIVERED = "org.apache.camel.Redelivered" ; public static final String EXCEPTION_CAUSE_PROPERTY = "CamelCauseException" ; private class RedeliveryData { int redeliveryCounter ; long redeliveryDelay ; boolean sync = true ; RedeliveryPolicy currentRedeliveryPolicy = redeliveryPolicy ; Processor failureProcessor = deadLetter ; } private static final transient Log LOG = LogFactory . getLog ( DeadLetterChannel . class ) ; private static final String FAILURE_HANDLED_PROPERTY = DeadLetterChannel . class . getName ( ) + ".FAILURE_HANDLED" ; private Processor output ; private Processor deadLetter ; private AsyncProcessor outputAsync ; private RedeliveryPolicy redeliveryPolicy ; private Logger logger ; public DeadLetterChannel ( Processor output , Processor deadLetter ) { this ( output , deadLetter , new RedeliveryPolicy ( ) , DeadLetterChannel . createDefaultLogger ( ) , ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ) ; } public DeadLetterChannel ( Processor output , Processor deadLetter , RedeliveryPolicy redeliveryPolicy , Logger logger , ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . deadLetter = deadLetter ; this . output = output ; this . outputAsync = AsyncProcessorTypeConverter . convert ( output ) ; this . redeliveryPolicy = redeliveryPolicy ; this . logger = logger ; setExceptionPolicy ( exceptionPolicyStrategy ) ; } public static < E extends Exchange > Logger createDefaultLogger ( ) { return new Logger ( LOG , LoggingLevel . ERROR ) ; } @ Override public String toString ( ) { return "DeadLetterChannel[" + output + ", " + deadLetter + ", " + redeliveryPolicy + "]" ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { return process ( exchange , callback , new RedeliveryData ( ) ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { while ( true ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return data . sync ; } if ( exchange . isTransacted ( ) && exchange . getException ( ) != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Transacted Exchange, this DeadLetterChannel is bypassed: " + exchange ) ; } return data . sync ; } if ( exchange . getException ( ) != null ) { Throwable e = exchange . getException ( ) ; exchange . setException ( null ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". On delivery attempt: " + data . redeliveryCounter + " caught: " + e , e ) ; data . redeliveryCounter = incrementRedeliveryCounter ( exchange , e ) ; ExceptionType exceptionPolicy = getExceptionPolicy ( exchange , e ) ; if ( exceptionPolicy != null ) { data . currentRedeliveryPolicy = exceptionPolicy . createRedeliveryPolicy ( data . currentRedeliveryPolicy ) ; Processor processor = exceptionPolicy . getErrorHandler ( ) ; if ( processor != null ) { data . failureProcessor = processor ; } } } if ( ! data . currentRedeliveryPolicy . shouldRedeliver ( data . redeliveryCounter ) ) { setFailureHandled ( exchange , true ) ; AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( data . failureProcessor ) ; boolean sync = afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { restoreExceptionOnExchange ( exchange ) ; callback . done ( data . sync ) ; } } ) ; restoreExceptionOnExchange ( exchange ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". Handled by the failure processor: " + data . failureProcessor ) ; return sync ; } if ( data . redeliveryCounter > 0 ) { data . redeliveryDelay = data . currentRedeliveryPolicy . sleep ( data . redeliveryDelay ) ; } exchange . setProperty ( EXCEPTION_CAUSE_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; boolean sync = outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null ) { process ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; if ( ! sync ) { return false ; } if ( exchange . getException ( ) == null || isFailureHandled ( exchange ) ) { callback . done ( true ) ; return true ; } } } public static boolean isFailureHandled ( Exchange exchange ) { return exchange . getProperty ( FAILURE_HANDLED_PROPERTY ) != null ; } public static void setFailureHandled ( Exchange exchange , boolean isHandled ) { if ( isHandled ) { exchange . setProperty ( FAILURE_HANDLED_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; } else { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; exchange . removeProperty ( FAILURE_HANDLED_PROPERTY ) ; } } public static void restoreExceptionOnExchange ( Exchange exchange ) { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public Processor getOutput ( ) { return output ; } public Processor getDeadLetter ( ) { return deadLetter ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } protected int incrementRedeliveryCounter ( Exchange exchange , Throwable e ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; int next = 1 ; if ( counter != null ) { next = counter + 1 ; } in . setHeader ( REDELIVERY_COUNTER , next ) ; in . setHeader ( REDELIVERED , Boolean . TRUE ) ; exchange . setException ( e ) ; return next ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output , deadLetter ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( deadLetter , output ) ; } } 	1
package org . apache . camel . component . mail . security ; import java . io . IOException ; import java . net . InetAddress ; import java . net . Socket ; import javax . net . SocketFactory ; import javax . net . ssl . SSLContext ; import javax . net . ssl . SSLSocketFactory ; import javax . net . ssl . TrustManager ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DummySSLSocketFactory extends SSLSocketFactory { private static final transient Log LOG = LogFactory . getLog ( DummySSLSocketFactory . class ) ; private SSLSocketFactory factory ; public DummySSLSocketFactory ( ) { try { SSLContext sslContext = SSLContext . getInstance ( "TLS" ) ; TrustManager [ ] trustManagers = new TrustManager [ ] { new DummyTrustManager ( ) } ; sslContext . init ( null , trustManagers , new java . security . SecureRandom ( ) ) ; factory = sslContext . getSocketFactory ( ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Error creating DummySSLSocketFactory: " + e . getMessage ( ) , e ) ; } } public static SocketFactory getDefault ( ) { LOG . warn ( "Camel is using DummySSLSocketFactory as SSLSocketFactory (only to be used for testing purpose)" ) ; return new DummySSLSocketFactory ( ) ; } public String [ ] getDefaultCipherSuites ( ) { return factory . getDefaultCipherSuites ( ) ; } public String [ ] getSupportedCipherSuites ( ) { return factory . getSupportedCipherSuites ( ) ; } public Socket createSocket ( Socket socket , String host , int port , boolean autoClose ) throws IOException { return factory . createSocket ( socket , host , port , autoClose ) ; } public Socket createSocket ( String host , int port ) throws IOException { return factory . createSocket ( host , port ) ; } public Socket createSocket ( String host , int port , InetAddress localAddress , int localPort ) throws IOException { return factory . createSocket ( host , port , localAddress , localPort ) ; } public Socket createSocket ( InetAddress host , int port ) throws IOException { return factory . createSocket ( host , port ) ; } public Socket createSocket ( InetAddress address , int port , InetAddress localAddress , int localPort ) throws IOException { return factory . createSocket ( address , port , localAddress , localPort ) ; } public Socket createSocket ( ) throws IOException { return factory . createSocket ( ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "onException" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExceptionType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElement ( name = "redeliveryPolicy" , required = false ) private RedeliveryPolicyType redeliveryPolicy ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; @ XmlTransient private Processor errorHandler ; public ExceptionType ( ) { } public ExceptionType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public ExceptionType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Exception[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { if ( redeliveryPolicy != null ) { return redeliveryPolicy . createRedeliveryPolicy ( parentPolicy ) ; } else if ( errorHandler != null ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; answer . setMaximumRedeliveries ( 0 ) ; return answer ; } return parentPolicy ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { errorHandler = routeContext . createProcessor ( this ) ; ErrorHandlerBuilder builder = routeContext . getRoute ( ) . getErrorHandlerBuilder ( ) ; builder . addErrorHandlers ( this ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public ExceptionType backOffMultiplier ( double backOffMultiplier ) { getOrCreateRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public ExceptionType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public ExceptionType collisionAvoidancePercent ( short collisionAvoidancePercent ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public ExceptionType initialRedeliveryDelay ( long initialRedeliveryDelay ) { getOrCreateRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public ExceptionType maximumRedeliveries ( int maximumRedeliveries ) { getOrCreateRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public ExceptionType useCollisionAvoidance ( ) { getOrCreateRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public ExceptionType useExponentialBackOff ( ) { getOrCreateRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } public Processor getErrorHandler ( ) { return errorHandler ; } public RedeliveryPolicyType getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicyType redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } protected RedeliveryPolicyType getOrCreateRedeliveryPolicy ( ) { if ( redeliveryPolicy == null ) { redeliveryPolicy = new RedeliveryPolicyType ( ) ; } return redeliveryPolicy ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . builder . xml ; public class StringResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new StringResultHandler ( ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultExchangeFormatter ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . processor . interceptor . TraceInterceptor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Logger implements Processor { private Log log ; private LoggingLevel level ; private ExchangeFormatter formatter = DefaultExchangeFormatter . getInstance ( ) ; public Logger ( ) { this ( LogFactory . getLog ( Logger . class ) ) ; } public Logger ( Log log ) { this ( log , LoggingLevel . INFO ) ; } public Logger ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public Logger ( String logName ) { this ( LogFactory . getLog ( logName ) ) ; } public Logger ( String logName , LoggingLevel level ) { this ( LogFactory . getLog ( logName ) , level ) ; } public Logger ( Log log , ExchangeFormatter formatter ) { this ( log ) ; this . formatter = formatter ; } @ Override public String toString ( ) { return "Logger[" + log + "]" ; } public void process ( Exchange exchange ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void process ( Exchange exchange , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void log ( String message ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message ) ; } } public void log ( String message , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message , exception ) ; } } protected Object logMessage ( Exchange exchange ) { return formatter . format ( exchange ) ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public void setFormatter ( ExchangeFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . component . jms ; import java . io . File ; import java . util . Enumeration ; import java . util . Map ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . Queue ; import javax . jms . Topic ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultMessage ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JmsMessage extends DefaultMessage { private static final transient Log LOG = LogFactory . getLog ( JmsMessage . class ) ; private Message jmsMessage ; private JmsBinding binding ; public JmsMessage ( ) { } public JmsMessage ( Message jmsMessage ) { setJmsMessage ( jmsMessage ) ; } public JmsMessage ( Message jmsMessage , JmsBinding binding ) { this ( jmsMessage ) ; setBinding ( binding ) ; } @ Override public String toString ( ) { if ( jmsMessage != null ) { return "JmsMessage: " + jmsMessage ; } else { return "JmsMessage: " + getBody ( ) ; } } @ Override public void copyFrom ( org . apache . camel . Message that ) { boolean copyMessageId = true ; if ( that instanceof JmsMessage ) { JmsMessage thatMessage = ( JmsMessage ) that ; this . jmsMessage = thatMessage . jmsMessage ; if ( this . jmsMessage != null ) { copyMessageId = false ; } } if ( ! copyMessageId ) { setMessageId ( that . getMessageId ( ) ) ; } setBody ( that . getBody ( ) ) ; getHeaders ( ) . putAll ( that . getHeaders ( ) ) ; } public Message getJmsMessage ( ) { return jmsMessage ; } public JmsBinding getBinding ( ) { if ( binding == null ) { Exchange exchange = getExchange ( ) ; if ( exchange instanceof JmsExchange ) { JmsExchange jmsExchange = ( JmsExchange ) exchange ; return jmsExchange . getBinding ( ) ; } else { return new JmsBinding ( ) ; } } return binding ; } public void setBinding ( JmsBinding binding ) { this . binding = binding ; } public void setJmsMessage ( Message jmsMessage ) { try { setMessageId ( jmsMessage . getJMSMessageID ( ) ) ; } catch ( JMSException e ) { LOG . warn ( "Unable to retrieve JMSMessageID from JMS Message" , e ) ; } this . jmsMessage = jmsMessage ; } public Object getHeader ( String name ) { Object answer = null ; if ( jmsMessage != null && ! name . startsWith ( "JMS" ) ) { try { answer = jmsMessage . getObjectProperty ( name ) ; } catch ( JMSException e ) { throw new MessagePropertyAccessException ( name , e ) ; } } if ( answer == null ) { answer = super . getHeader ( name ) ; } return answer ; } @ Override public JmsMessage newInstance ( ) { return new JmsMessage ( ) ; } public boolean shouldCreateNewMessage ( ) { return super . hasPopulatedHeaders ( ) ; } @ Override protected Object createBody ( ) { if ( jmsMessage != null ) { return getBinding ( ) . extractBodyFromJms ( getExchange ( ) , jmsMessage ) ; } return null ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { if ( jmsMessage != null ) { try { map . put ( "JMSCorrelationID" , jmsMessage . getJMSCorrelationID ( ) ) ; map . put ( "JMSDeliveryMode" , jmsMessage . getJMSDeliveryMode ( ) ) ; map . put ( "JMSDestination" , jmsMessage . getJMSDestination ( ) ) ; map . put ( "JMSExpiration" , jmsMessage . getJMSExpiration ( ) ) ; map . put ( "JMSMessageID" , jmsMessage . getJMSMessageID ( ) ) ; map . put ( "JMSPriority" , jmsMessage . getJMSPriority ( ) ) ; map . put ( "JMSRedelivered" , jmsMessage . getJMSRedelivered ( ) ) ; map . put ( "JMSReplyTo" , jmsMessage . getJMSReplyTo ( ) ) ; map . put ( "JMSTimestamp" , jmsMessage . getJMSTimestamp ( ) ) ; map . put ( "JMSType" , jmsMessage . getJMSType ( ) ) ; map . put ( "JMSXGroupID" , jmsMessage . getStringProperty ( "JMSXGroupID" ) ) ; } catch ( JMSException e ) { throw new MessageJMSPropertyAccessException ( e ) ; } Enumeration names ; try { names = jmsMessage . getPropertyNames ( ) ; } catch ( JMSException e ) { throw new MessagePropertyNamesAccessException ( e ) ; } while ( names . hasMoreElements ( ) ) { String name = names . nextElement ( ) . toString ( ) ; try { Object value = jmsMessage . getObjectProperty ( name ) ; String key = JmsBinding . decodeFromSafeJmsHeaderName ( name ) ; map . put ( key , value ) ; } catch ( JMSException e ) { throw new MessagePropertyAccessException ( name , e ) ; } } } } @ Override protected String createMessageId ( ) { try { String id = getDestinationAsString ( jmsMessage . getJMSDestination ( ) ) + jmsMessage . getJMSMessageID ( ) ; return getSanitizedString ( id ) ; } catch ( JMSException e ) { LOG . error ( "Failed to get message id from message " + jmsMessage , e ) ; return super . createMessageId ( ) ; } } private String getDestinationAsString ( Destination destination ) throws JMSException { String result ; if ( destination == null ) { result = "null destination!" + File . separator ; } else if ( destination instanceof Topic ) { result = "topic" + File . separator + ( ( Topic ) destination ) . getTopicName ( ) + File . separator ; } else { result = "queue" + File . separator + ( ( Queue ) destination ) . getQueueName ( ) + File . separator ; } return result ; } private String getSanitizedString ( Object value ) { return value != null ? value . toString ( ) . replaceAll ( "[^a-zA-Z0-9\\.\\_\\-]" , "_" ) : "" ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TransformProcessor extends DelegateProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( TransformProcessor . class ) ; private Expression expression ; public TransformProcessor ( Expression expression ) { this . expression = expression ; } public TransformProcessor ( Expression expression , Processor childProcessor ) { super ( childProcessor ) ; this . expression = expression ; } public void process ( Exchange exchange ) throws Exception { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; exchange . getOut ( ) . getHeaders ( ) . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; super . process ( exchange ) ; } @ Override public String toString ( ) { return "transform(" + expression + ")" ; } } 	1
package org . apache . camel . component . spring . integration ; public final class SpringIntegrationHelper { private SpringIntegrationHelper ( ) { } public static void checkSpringBeanInstance ( Object bean , String name ) { if ( bean == null ) { throw new IllegalArgumentException ( "Can't find the bean: " + name + " from the Spring context" ) ; } } } 	0
package org . apache . camel . processor ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . TreeSet ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ExpressionListComparator ; public class Resequencer extends BatchProcessor { public Resequencer ( Endpoint endpoint , Processor processor , Expression < Exchange > expression ) { this ( endpoint , processor , createSet ( expression ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , List < Expression > expressions ) { this ( endpoint , processor , createSet ( expressions ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , Set < Exchange > collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Resequencer[to: " + getProcessor ( ) + "]" ; } protected static Set < Exchange > createSet ( Expression < Exchange > expression ) { return createSet ( new ExpressionComparator < Exchange > ( expression ) ) ; } protected static Set < Exchange > createSet ( List < Expression > expressions ) { if ( expressions . size ( ) == 1 ) { return createSet ( expressions . get ( 0 ) ) ; } return createSet ( new ExpressionListComparator ( expressions ) ) ; } protected static Set < Exchange > createSet ( Comparator < ? super Exchange > comparator ) { return new TreeSet < Exchange > ( comparator ) ; } } 	1
package org . apache . camel ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class ExchangeProperty < T > { private static final List < ExchangeProperty < ? > > VALUES = new ArrayList < ExchangeProperty < ? > > ( ) ; private static final Map < String , ExchangeProperty < ? > > LITERAL_MAP = new HashMap < String , ExchangeProperty < ? > > ( ) ; private static final Map < String , ExchangeProperty < ? > > NAME_MAP = new HashMap < String , ExchangeProperty < ? > > ( ) ; private final String literal ; private final String name ; private final Class < T > type ; public ExchangeProperty ( String literal , String name , Class < T > type ) { this . literal = literal ; this . name = name ; this . type = type ; register ( this ) ; } public String literal ( ) { return literal ; } public String name ( ) { return name ; } public Class < T > type ( ) { return type ; } public T get ( Exchange exchange ) { return exchange . getProperty ( name , type ) ; } public static ExchangeProperty < ? > get ( String literal ) { return LITERAL_MAP . get ( literal ) ; } public static ExchangeProperty < ? > getByName ( String name ) { return NAME_MAP . get ( name ) ; } public T set ( Exchange exchange , T value ) { T oldValue = get ( exchange ) ; exchange . setProperty ( name , value ) ; return oldValue ; } public T remove ( Exchange exchange ) { T oldValue = get ( exchange ) ; exchange . removeProperty ( name ) ; return oldValue ; } @ Override public String toString ( ) { return type ( ) . getCanonicalName ( ) + " " + name + " (" + literal ( ) + ")" ; } public static synchronized void register ( ExchangeProperty < ? > property ) { ExchangeProperty < ? > existingProperty = LITERAL_MAP . get ( property . literal ( ) ) ; if ( existingProperty != null && existingProperty != property ) { throw new RuntimeCamelException ( "An Exchange Property '" + property . literal ( ) + "' has already been registered; its traits are: " + existingProperty . toString ( ) ) ; } VALUES . add ( property ) ; LITERAL_MAP . put ( property . literal ( ) , property ) ; NAME_MAP . put ( property . name ( ) , property ) ; } public static synchronized void deregister ( ExchangeProperty < ? > property ) { if ( property != null ) { VALUES . remove ( property ) ; LITERAL_MAP . remove ( property . literal ( ) ) ; NAME_MAP . put ( property . name ( ) , property ) ; } } public static synchronized void deregister ( String literal ) { ExchangeProperty < ? > property = LITERAL_MAP . get ( literal ) ; if ( property != null ) { VALUES . remove ( property ) ; LITERAL_MAP . remove ( property . literal ( ) ) ; NAME_MAP . put ( property . name ( ) , property ) ; } } public static synchronized ExchangeProperty < ? > [ ] values ( ) { return VALUES . toArray ( new ExchangeProperty [ 0 ] ) ; } } 	0
package org . apache . camel . view ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . AggregatorType ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FilterType ; import org . apache . camel . model . FromType ; import org . apache . camel . model . OtherwiseType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RecipientListType ; import org . apache . camel . model . ResequencerType ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . model . SplitterType ; import org . apache . camel . model . ToType ; import org . apache . camel . model . WhenType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; public class NodeData { public String id ; public String image ; public String label ; public String shape ; public String edgeLabel ; public String tooltop ; public String nodeType ; public boolean nodeWritten ; public String url ; public List < ProcessorType > outputs ; public String association = "property" ; private final String imagePrefix ; public NodeData ( String id , Object node , String imagePrefix ) { this . id = id ; this . imagePrefix = imagePrefix ; if ( node instanceof ProcessorType ) { ProcessorType processorType = ( ProcessorType ) node ; this . edgeLabel = processorType . getLabel ( ) ; } if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; this . tooltop = fromType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; this . tooltop = toType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof FilterType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "Message Filter" ; } else if ( node instanceof WhenType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "When Filter" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; } else if ( node instanceof OtherwiseType ) { this . nodeType = "Otherwise" ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; this . tooltop = "Otherwise" ; } else if ( node instanceof ChoiceType ) { this . image = imagePrefix + "ContentBasedRouterIcon.png" ; this . nodeType = "Content Based Router" ; this . label = "" ; this . edgeLabel = "" ; ChoiceType choice = ( ChoiceType ) node ; List < ProcessorType > outputs = new ArrayList < ProcessorType > ( choice . getWhenClauses ( ) ) ; if ( choice . getOtherwise ( ) != null ) { outputs . add ( choice . getOtherwise ( ) ) ; } this . outputs = outputs ; } else if ( node instanceof RecipientListType ) { this . image = imagePrefix + "RecipientListIcon.png" ; this . nodeType = "Recipient List" ; } else if ( node instanceof RoutingSlipType ) { this . image = imagePrefix + "RoutingTableIcon.png" ; this . nodeType = "Routing Slip" ; this . url = "http://activemq.apache.org/camel/routing-slip.html" ; this . tooltop = ( ( RoutingSlipType ) node ) . getHeaderName ( ) ; } else if ( node instanceof SplitterType ) { this . image = imagePrefix + "SplitterIcon.png" ; this . nodeType = "Splitter" ; } else if ( node instanceof AggregatorType ) { this . image = imagePrefix + "AggregatorIcon.png" ; this . nodeType = "Aggregator" ; } else if ( node instanceof ResequencerType ) { this . image = imagePrefix + "ResequencerIcon.png" ; this . nodeType = "Resequencer" ; } if ( isNullOrBlank ( this . nodeType ) && node != null ) { String name = node . getClass ( ) . getName ( ) ; int idx = name . lastIndexOf ( '.' ) ; if ( idx > 0 ) { name = name . substring ( idx + 1 ) ; } if ( name . endsWith ( "Type" ) ) { name = name . substring ( 0 , name . length ( ) - 4 ) ; } this . nodeType = insertSpacesBetweenCamelCase ( name ) ; } if ( this . label == null ) { if ( isNullOrBlank ( this . image ) ) { this . label = this . nodeType ; this . shape = "box" ; } else if ( isNotNullAndNonEmpty ( this . edgeLabel ) ) { this . label = "" ; } else { this . label = node . toString ( ) ; } } if ( isNullOrBlank ( this . tooltop ) ) { if ( isNotNullAndNonEmpty ( this . nodeType ) ) { String description = isNotNullAndNonEmpty ( this . edgeLabel ) ? this . edgeLabel : this . label ; this . tooltop = this . nodeType + ": " + description ; } else { this . tooltop = this . label ; } } if ( isNullOrBlank ( this . url ) && isNotNullAndNonEmpty ( this . nodeType ) ) { this . url = "http://activemq.apache.org/camel/" + this . nodeType . toLowerCase ( ) . replace ( ' ' , '-' ) + ".html" ; } if ( node instanceof ProcessorType && this . outputs == null ) { ProcessorType processorType = ( ProcessorType ) node ; this . outputs = processorType . getOutputs ( ) ; } } protected String removeQueryString ( String text ) { int idx = text . indexOf ( "?" ) ; if ( idx <= 0 ) { return text ; } else { return text . substring ( 0 , idx ) ; } } public static String insertSpacesBetweenCamelCase ( String name ) { boolean lastCharacterLowerCase = false ; StringBuffer buffer = new StringBuffer ( ) ; int i = 0 ; for ( int size = name . length ( ) ; i < size ; i ++ ) { char ch = name . charAt ( i ) ; if ( Character . isUpperCase ( ch ) ) { if ( lastCharacterLowerCase ) { buffer . append ( ' ' ) ; } lastCharacterLowerCase = false ; } else { lastCharacterLowerCase = true ; } buffer . append ( ch ) ; } return buffer . toString ( ) ; } } 	1
package org . apache . camel . component . http . helper ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; public class LoadingByteArrayOutputStream extends ByteArrayOutputStream { public LoadingByteArrayOutputStream ( ) { super ( 1024 ) ; } public LoadingByteArrayOutputStream ( int i ) { super ( i ) ; } public ByteArrayInputStream createInputStream ( ) { return new ByteArrayInputStream ( buf , 0 , count ) ; } public byte [ ] toByteArray ( ) { if ( count != buf . length ) { buf = super . toByteArray ( ) ; } return buf ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . impl . DefaultMessage ; public class JMXMessage extends DefaultMessage { private Notification notification ; public JMXMessage ( ) { this ( null ) ; } public JMXMessage ( Notification notification ) { this . notification = notification ; } @ Override public String toString ( ) { return "JMXMessage: " + notification ; } @ Override public JMXExchange getExchange ( ) { return ( JMXExchange ) super . getExchange ( ) ; } @ Override public JMXMessage newInstance ( ) { return new JMXMessage ( ) ; } public Notification getNotification ( ) { return notification ; } } 	1
package org . apache . camel . processor ; import java . util . List ; import org . apache . camel . Processor ; public class CatchProcessor extends DelegateProcessor { private List < Class > exceptions ; public CatchProcessor ( List < Class > exceptions , Processor processor ) { super ( processor ) ; this . exceptions = exceptions ; } @ Override public String toString ( ) { return "Catch[" + exceptions + " -> " + getProcessor ( ) + "]" ; } public boolean catches ( Throwable e ) { for ( Class type : exceptions ) { if ( type . isInstance ( e ) ) { return true ; } } return false ; } public List < Class > getExceptions ( ) { return exceptions ; } } 	0
package org . apache . camel . converter ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Converter ; import org . apache . camel . util . ObjectHelper ; @ Converter public final class ObjectConverter { private ObjectConverter ( ) { } public static boolean isCollection ( Object value ) { return value instanceof Collection || ( value != null && value . getClass ( ) . isArray ( ) ) ; } @ SuppressWarnings ( "unchecked" ) @ Converter @ Deprecated public static Iterator iterator ( Object value ) { return ObjectHelper . createIterator ( value ) ; } @ Converter public static boolean toBool ( Object value ) { Boolean answer = toBoolean ( value ) ; if ( answer != null ) { return answer . booleanValue ( ) ; } return false ; } @ Converter public static Boolean toBoolean ( Object value ) { return ObjectHelper . toBoolean ( value ) ; } @ Converter public static Boolean toBoolean ( Boolean value ) { if ( value != null ) { return value ; } return Boolean . FALSE ; } @ Converter public static Byte toByte ( Object value ) { if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Byte . valueOf ( number . byteValue ( ) ) ; } else if ( value instanceof String ) { return Byte . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static byte [ ] toByteArray ( String value ) { return value . getBytes ( ) ; } @ Converter public static char [ ] toCharArray ( String value ) { return value . toCharArray ( ) ; } @ Converter public static String fromCharArray ( char [ ] value ) { return new String ( value ) ; } @ Converter public static Short toShort ( Object value ) { if ( value instanceof Short ) { return ( Short ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Short . valueOf ( number . shortValue ( ) ) ; } else if ( value instanceof String ) { return Short . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Integer toInteger ( Object value ) { if ( value instanceof Integer ) { return ( Integer ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Integer . valueOf ( number . intValue ( ) ) ; } else if ( value instanceof String ) { return Integer . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Long toLong ( Object value ) { if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Long . valueOf ( number . longValue ( ) ) ; } else if ( value instanceof String ) { return Long . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Float toFloat ( Object value ) { if ( value instanceof Float ) { return ( Float ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Float . valueOf ( number . floatValue ( ) ) ; } else if ( value instanceof String ) { return Float . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Double toDouble ( Object value ) { if ( value instanceof Double ) { return ( Double ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Double . valueOf ( number . doubleValue ( ) ) ; } else if ( value instanceof String ) { return Double . valueOf ( ( String ) value ) ; } else { return null ; } } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAnyElement ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "property" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class PropertyType { @ XmlAttribute private String key ; @ XmlAnyElement ( lax = true ) private Object value ; public String getKey ( ) { return key ; } public void setKey ( String key ) { this . key = key ; } public Object getValue ( ) { return value ; } public void setValue ( Object value ) { this . value = value ; } } 	0
package org . apache . camel . processor . resequencer ; import java . util . Queue ; import java . util . Timer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResequencerEngine < E > implements TimeoutHandler { private static final transient Log LOG = LogFactory . getLog ( ResequencerEngine . class ) ; private long timeout ; private int capacity ; private Queue < E > outQueue ; private Element < E > lastDelivered ; private Sequence < Element < E > > sequence ; private Timer timer ; public ResequencerEngine ( SequenceElementComparator < E > comparator ) { this ( comparator , Integer . MAX_VALUE ) ; } public ResequencerEngine ( SequenceElementComparator < E > comparator , int capacity ) { this . timer = new Timer ( "Resequencer Timer" ) ; this . sequence = createSequence ( comparator ) ; this . capacity = capacity ; this . timeout = 2000L ; this . lastDelivered = null ; } public void stop ( ) { this . timer . cancel ( ) ; } public Queue < E > getOutQueue ( ) { return outQueue ; } public void setOutQueue ( Queue < E > outQueue ) { this . outQueue = outQueue ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public synchronized void timeout ( Timeout timout ) { try { while ( deliver ( ) ) { } } catch ( RuntimeException e ) { LOG . error ( "error during delivery" , e ) ; } } public synchronized void add ( E o ) { if ( sequence . size ( ) >= capacity ) { throw new IllegalStateException ( "maximum capacity is reached" ) ; } insert ( o ) ; } public synchronized void put ( E o ) throws InterruptedException { if ( sequence . size ( ) >= capacity ) { wait ( ) ; } insert ( o ) ; } E getLastDelivered ( ) { if ( lastDelivered == null ) { return null ; } return lastDelivered . getObject ( ) ; } void setLastDelivered ( E o ) { lastDelivered = new Element < E > ( o ) ; } private void insert ( E o ) { Element < E > element = new Element < E > ( o ) ; sequence . add ( element ) ; Element < E > successor = sequence . successor ( element ) ; if ( successor != null ) { successor . cancel ( ) ; } if ( successorOfLastDelivered ( element ) ) { } else if ( sequence . predecessor ( element ) != null ) { } else { Timeout t = defineTimeout ( ) ; element . schedule ( t ) ; } while ( deliver ( ) ) { } } private boolean deliver ( ) { if ( sequence . size ( ) == 0 ) { return false ; } Element < E > element = sequence . first ( ) ; if ( element . scheduled ( ) ) { return false ; } sequence . remove ( element ) ; lastDelivered = element ; notify ( ) ; outQueue . add ( element . getObject ( ) ) ; return true ; } private boolean successorOfLastDelivered ( Element < E > element ) { if ( lastDelivered == null ) { return false ; } if ( sequence . comparator ( ) . successor ( element , lastDelivered ) ) { return true ; } return false ; } private Timeout defineTimeout ( ) { Timeout result = new Timeout ( timer , timeout ) ; result . addTimeoutHandler ( this ) ; return result ; } private static < E > Sequence < Element < E > > createSequence ( SequenceElementComparator < E > comparator ) { return new Sequence < Element < E > > ( new ElementComparator < E > ( comparator ) ) ; } } 	1
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import java . io . StringReader ; import java . io . StringWriter ; import java . lang . reflect . Constructor ; import java . nio . ByteBuffer ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerConfigurationException ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . sax . SAXSource ; import javax . xml . transform . stream . StreamResult ; import javax . xml . transform . stream . StreamSource ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . XMLReader ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . NIOConverter ; import org . apache . camel . util . ObjectHelper ; @ Converter public class XmlConverter { public static final String DEFAULT_CHARSET_PROPERTY = "org.apache.camel.default.charset" ; public static String defaultCharset = ObjectHelper . getSystemProperty ( DEFAULT_CHARSET_PROPERTY , "UTF-8" ) ; private static final Class DOM_TO_SAX_CLASS ; private DocumentBuilderFactory documentBuilderFactory ; private TransformerFactory transformerFactory ; static { Class cl = null ; try { cl = Class . forName ( "org.apache.xalan.xsltc.trax.DOM2SAX" ) ; } catch ( Throwable t ) { } DOM_TO_SAX_CLASS = cl ; } public XmlConverter ( ) { } public XmlConverter ( DocumentBuilderFactory documentBuilderFactory ) { this . documentBuilderFactory = documentBuilderFactory ; } public void toResult ( Source source , Result result ) throws TransformerException { if ( source == null ) { return ; } Transformer transformer = createTransfomer ( ) ; if ( transformer == null ) { throw new TransformerException ( "Could not create a transformer - JAXP is misconfigured!" ) ; } transformer . setOutputProperty ( OutputKeys . ENCODING , defaultCharset ) ; transformer . setOutputProperty ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; transformer . transform ( source , result ) ; } @ Converter public BytesSource toSource ( byte [ ] data ) { return new BytesSource ( data ) ; } @ Converter public StringSource toSource ( String data ) { return new StringSource ( data ) ; } @ Converter public DOMSource toSource ( Document document ) { return new DOMSource ( document ) ; } @ Converter public Source toSource ( Node node ) { return new DOMSource ( node ) ; } @ Converter public String toString ( Source source ) throws TransformerException { if ( source == null ) { return null ; } else if ( source instanceof StringSource ) { return ( ( StringSource ) source ) . getText ( ) ; } else if ( source instanceof BytesSource ) { return new String ( ( ( BytesSource ) source ) . getData ( ) ) ; } else { StringWriter buffer = new StringWriter ( ) ; toResult ( source , new StreamResult ( buffer ) ) ; return buffer . toString ( ) ; } } @ Converter public String toString ( Node node ) throws TransformerException { return toString ( new DOMSource ( node ) ) ; } @ Converter public DOMSource toDOMSource ( Source source ) throws ParserConfigurationException , IOException , SAXException , TransformerException { if ( source instanceof DOMSource ) { return ( DOMSource ) source ; } else if ( source instanceof SAXSource ) { return toDOMSourceFromSAX ( ( SAXSource ) source ) ; } else if ( source instanceof StreamSource ) { return toDOMSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public DOMSource toDOMSource ( String text ) throws ParserConfigurationException , IOException , SAXException , TransformerException { Source source = toSource ( text ) ; if ( source != null ) { return toDOMSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public SAXSource toSAXSource ( String source ) throws IOException , SAXException , TransformerException { return toSAXSource ( toSource ( source ) ) ; } @ Converter public SAXSource toSAXSource ( InputStream source ) throws IOException , SAXException , TransformerException { return toSAXSource ( toStreamSource ( source ) ) ; } @ Converter public SAXSource toSAXSource ( Source source ) throws IOException , SAXException , TransformerException { if ( source instanceof SAXSource ) { return ( SAXSource ) source ; } else if ( source instanceof DOMSource ) { return toSAXSourceFromDOM ( ( DOMSource ) source ) ; } else if ( source instanceof StreamSource ) { return toSAXSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public StreamSource toStreamSource ( Source source ) throws TransformerException { if ( source instanceof StreamSource ) { return ( StreamSource ) source ; } else if ( source instanceof DOMSource ) { return toStreamSourceFromDOM ( ( DOMSource ) source ) ; } else if ( source instanceof SAXSource ) { return toStreamSourceFromSAX ( ( SAXSource ) source ) ; } else { return null ; } } @ Converter public StreamSource toStreamSource ( InputStream in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( Reader in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( File in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( byte [ ] in ) throws TransformerException { if ( in != null ) { return new StreamSource ( IOConverter . toInputStream ( in ) ) ; } return null ; } @ Converter public StreamSource toStreamSource ( ByteBuffer in ) throws TransformerException { if ( in != null ) { return new StreamSource ( NIOConverter . toInputStream ( in ) ) ; } return null ; } @ Converter public StreamSource toStreamSourceFromSAX ( SAXSource source ) throws TransformerException { InputSource inputSource = source . getInputSource ( ) ; if ( inputSource != null ) { if ( inputSource . getCharacterStream ( ) != null ) { return new StreamSource ( inputSource . getCharacterStream ( ) ) ; } if ( inputSource . getByteStream ( ) != null ) { return new StreamSource ( inputSource . getByteStream ( ) ) ; } } String result = toString ( source ) ; return new StringSource ( result ) ; } @ Converter public StreamSource toStreamSourceFromDOM ( DOMSource source ) throws TransformerException { String result = toString ( source ) ; return new StringSource ( result ) ; } @ Converter public SAXSource toSAXSourceFromStream ( StreamSource source ) { InputSource inputSource ; if ( source . getReader ( ) != null ) { inputSource = new InputSource ( source . getReader ( ) ) ; } else { inputSource = new InputSource ( source . getInputStream ( ) ) ; } inputSource . setSystemId ( source . getSystemId ( ) ) ; inputSource . setPublicId ( source . getPublicId ( ) ) ; return new SAXSource ( inputSource ) ; } @ Converter public Reader toReaderFromSource ( Source src ) throws TransformerException { StreamSource stSrc = toStreamSource ( src ) ; Reader r = stSrc . getReader ( ) ; if ( r == null ) { r = new InputStreamReader ( stSrc . getInputStream ( ) ) ; } return r ; } @ Converter public DOMSource toDOMSourceFromStream ( StreamSource source ) throws ParserConfigurationException , IOException , SAXException { DocumentBuilder builder = createDocumentBuilder ( ) ; String systemId = source . getSystemId ( ) ; Document document = null ; Reader reader = source . getReader ( ) ; if ( reader != null ) { document = builder . parse ( new InputSource ( reader ) ) ; } else { InputStream inputStream = source . getInputStream ( ) ; if ( inputStream != null ) { InputSource inputsource = new InputSource ( inputStream ) ; inputsource . setSystemId ( systemId ) ; document = builder . parse ( inputsource ) ; } else { throw new IOException ( "No input stream or reader available" ) ; } } return new DOMSource ( document , systemId ) ; } @ Converter public SAXSource toSAXSourceFromDOM ( DOMSource source ) throws TransformerException { if ( DOM_TO_SAX_CLASS != null ) { try { Constructor cns = DOM_TO_SAX_CLASS . getConstructor ( Node . class ) ; XMLReader converter = ( XMLReader ) cns . newInstance ( source . getNode ( ) ) ; return new SAXSource ( converter , new InputSource ( ) ) ; } catch ( Exception e ) { throw new TransformerException ( e ) ; } } else { String str = toString ( source ) ; StringReader reader = new StringReader ( str ) ; return new SAXSource ( new InputSource ( reader ) ) ; } } @ Converter public DOMSource toDOMSourceFromSAX ( SAXSource source ) throws IOException , SAXException , ParserConfigurationException , TransformerException { return new DOMSource ( toDOMNodeFromSAX ( source ) ) ; } @ Converter public Node toDOMNodeFromSAX ( SAXSource source ) throws ParserConfigurationException , IOException , SAXException , TransformerException { DOMResult result = new DOMResult ( ) ; toResult ( source , result ) ; return result . getNode ( ) ; } @ Converter public Node toDOMNode ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { DOMSource domSrc = toDOMSource ( source ) ; return domSrc != null ? domSrc . getNode ( ) : null ; } @ Converter public Element toDOMElement ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { Node node = toDOMNode ( source ) ; return toDOMElement ( node ) ; } @ Converter public Element toDOMElement ( Node node ) throws TransformerException { if ( node instanceof Document ) { return ( ( Document ) node ) . getDocumentElement ( ) ; } else if ( node instanceof Element ) { return ( Element ) node ; } else { throw new TransformerException ( "Unable to convert DOM node to an Element" ) ; } } @ Converter public Document toDOMDocument ( byte [ ] data ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( new ByteArrayInputStream ( data ) ) ; } @ Converter public Document toDOMDocument ( InputStream in ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( in ) ; } @ Converter public Document toDOMDocument ( Reader in ) throws IOException , SAXException , ParserConfigurationException { return toDOMDocument ( new InputSource ( in ) ) ; } @ Converter public Document toDOMDocument ( InputSource in ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( in ) ; } @ Converter public Document toDOMDocument ( String text ) throws IOException , SAXException , ParserConfigurationException { return toDOMDocument ( new StringReader ( text ) ) ; } @ Converter public Document toDOMDocument ( File file ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( file ) ; } @ Converter public Document toDOMDocument ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { Node node = toDOMNode ( source ) ; return toDOMDocument ( node ) ; } @ Converter public Document toDOMDocument ( Node node ) throws ParserConfigurationException , TransformerException { if ( node instanceof Document ) { return ( Document ) node ; } else if ( node instanceof Element ) { Element elem = ( Element ) node ; if ( elem . getOwnerDocument ( ) . getDocumentElement ( ) == elem ) { return elem . getOwnerDocument ( ) ; } else { Document doc = createDocument ( ) ; doc . appendChild ( doc . importNode ( node , true ) ) ; return doc ; } } else { throw new TransformerException ( "Unable to convert DOM node to a Document" ) ; } } public DocumentBuilderFactory getDocumentBuilderFactory ( ) { if ( documentBuilderFactory == null ) { documentBuilderFactory = createDocumentBuilderFactory ( ) ; } return documentBuilderFactory ; } public void setDocumentBuilderFactory ( DocumentBuilderFactory documentBuilderFactory ) { this . documentBuilderFactory = documentBuilderFactory ; } public DocumentBuilderFactory createDocumentBuilderFactory ( ) { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; factory . setNamespaceAware ( true ) ; factory . setIgnoringElementContentWhitespace ( true ) ; factory . setIgnoringComments ( true ) ; return factory ; } public DocumentBuilder createDocumentBuilder ( ) throws ParserConfigurationException { DocumentBuilderFactory factory = getDocumentBuilderFactory ( ) ; return factory . newDocumentBuilder ( ) ; } public Document createDocument ( ) throws ParserConfigurationException { DocumentBuilder builder = createDocumentBuilder ( ) ; return builder . newDocument ( ) ; } public TransformerFactory getTransformerFactory ( ) { if ( transformerFactory == null ) { transformerFactory = createTransformerFactory ( ) ; } return transformerFactory ; } public void setTransformerFactory ( TransformerFactory transformerFactory ) { this . transformerFactory = transformerFactory ; } public Transformer createTransfomer ( ) throws TransformerConfigurationException { TransformerFactory factory = getTransformerFactory ( ) ; return factory . newTransformer ( ) ; } public TransformerFactory createTransformerFactory ( ) { TransformerFactory answer = TransformerFactory . newInstance ( ) ; return answer ; } } 	0
package org . apache . camel . processor ; import java . text . NumberFormat ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Exchange ; import org . apache . commons . logging . Log ; public class ThroughputLogger extends Logger { private int groupSize = 100 ; private long startTime ; private long groupStartTime ; private AtomicInteger receivedCounter = new AtomicInteger ( ) ; private NumberFormat numberFormat = NumberFormat . getNumberInstance ( ) ; private String action = "Received" ; private String logMessage ; public ThroughputLogger ( ) { } public ThroughputLogger ( Log log ) { super ( log ) ; } public ThroughputLogger ( Log log , LoggingLevel level ) { super ( log , level ) ; } public ThroughputLogger ( String logName ) { super ( logName ) ; } public ThroughputLogger ( String logName , LoggingLevel level ) { super ( logName , level ) ; } public ThroughputLogger ( String logName , LoggingLevel level , int groupSize ) { super ( logName , level ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( String logName , int groupSize ) { super ( logName ) ; setGroupSize ( groupSize ) ; } public ThroughputLogger ( int groupSize ) { setGroupSize ( groupSize ) ; } @ Override public void process ( Exchange exchange ) { if ( startTime == 0 ) { startTime = System . currentTimeMillis ( ) ; } int receivedCount = receivedCounter . incrementAndGet ( ) ; if ( receivedCount % groupSize == 0 ) { logMessage = createLogMessage ( exchange , receivedCount ) ; super . process ( exchange ) ; } } public int getGroupSize ( ) { return groupSize ; } public void setGroupSize ( int groupSize ) { if ( groupSize == 0 ) { throw new IllegalArgumentException ( "groupSize cannot be zero!" ) ; } this . groupSize = groupSize ; } public NumberFormat getNumberFormat ( ) { return numberFormat ; } public void setNumberFormat ( NumberFormat numberFormat ) { this . numberFormat = numberFormat ; } public String getAction ( ) { return action ; } public void setAction ( String action ) { this . action = action ; } @ Override protected Object logMessage ( Exchange exchange ) { return logMessage ; } protected String createLogMessage ( Exchange exchange , int receivedCount ) { long time = System . currentTimeMillis ( ) ; if ( groupStartTime == 0 ) { groupStartTime = startTime ; } double rate = messagesPerSecond ( groupSize , groupStartTime , time ) ; double average = messagesPerSecond ( receivedCount , startTime , time ) ; groupStartTime = time ; return getAction ( ) + ": " + receivedCount + " messages so far. Last group took: " + ( time - groupStartTime ) + " millis which is: " + numberFormat . format ( rate ) + " messages per second. average: " + numberFormat . format ( average ) ; } protected double messagesPerSecond ( long messageCount , long startTime , long endTime ) { double rate = messageCount * 1000.0 ; rate /= endTime - startTime ; return rate ; } } 	1
package org . apache . camel ; public class ValidationException extends CamelExchangeException { public ValidationException ( Exchange exchange , String message ) { super ( message , exchange ) ; } public ValidationException ( String message , Exchange exchange , Throwable cause ) { super ( message , exchange , cause ) ; } } 	0
package org . apache . camel . processor . aggregate ; import java . util . AbstractCollection ; import java . util . Collection ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AggregationCollection extends AbstractCollection < Exchange > { private static final transient Log LOG = LogFactory . getLog ( AggregationCollection . class ) ; private final Expression < Exchange > correlationExpression ; private final AggregationStrategy aggregationStrategy ; private Map < Object , Exchange > map = new LinkedHashMap < Object , Exchange > ( ) ; public AggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy ) { this . correlationExpression = correlationExpression ; this . aggregationStrategy = aggregationStrategy ; } protected Map < Object , Exchange > getMap ( ) { return map ; } @ Override public boolean add ( Exchange exchange ) { Object correlationKey = correlationExpression . evaluate ( exchange ) ; Exchange oldExchange = map . get ( correlationKey ) ; Exchange newExchange = exchange ; if ( oldExchange != null ) { newExchange = aggregationStrategy . aggregate ( oldExchange , newExchange ) ; } if ( newExchange != oldExchange ) { LOG . debug ( "put exchange:" + newExchange + " for key:" + correlationKey ) ; map . put ( correlationKey , newExchange ) ; } onAggregation ( correlationKey , newExchange ) ; return true ; } public Iterator < Exchange > iterator ( ) { return map . values ( ) . iterator ( ) ; } public int size ( ) { return map . size ( ) ; } @ Override public void clear ( ) { map . clear ( ) ; } protected void onAggregation ( Object correlationKey , Exchange newExchange ) { } } 	1
package org . apache . camel . converter . jaxp ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . Reader ; import java . io . Writer ; import javax . xml . stream . XMLEventReader ; import javax . xml . stream . XMLEventWriter ; import javax . xml . stream . XMLInputFactory ; import javax . xml . stream . XMLOutputFactory ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . stream . XMLStreamWriter ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Converter ; @ Converter public class StreamSourceConverter { @ Converter public InputStream toInputStream ( StreamSource source ) { return source . getInputStream ( ) ; } @ Converter public Reader toReader ( StreamSource source ) { return source . getReader ( ) ; } } 	0
package org . apache . camel . util ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . InvalidPayloadException ; import org . apache . camel . InvalidTypeException ; import org . apache . camel . Message ; import org . apache . camel . NoSuchBeanException ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . NoSuchHeaderException ; import org . apache . camel . NoSuchPropertyException ; public final class ExchangeHelper { private ExchangeHelper ( ) { } public static < T > T getExchangeProperty ( Exchange exchange , String propertyName , Class < T > type , T defaultValue ) { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { return defaultValue ; } return answer ; } @ SuppressWarnings ( { "unchecked" } ) public static < E extends Exchange > Endpoint < E > resolveEndpoint ( E exchange , Object value ) throws NoSuchEndpointException { Endpoint < E > endpoint ; if ( value instanceof Endpoint ) { endpoint = ( Endpoint < E > ) value ; } else { String uri = value . toString ( ) ; endpoint = CamelContextHelper . getMandatoryEndpoint ( exchange . getContext ( ) , uri ) ; } return endpoint ; } public static < T > T getMandatoryProperty ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchPropertyException { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchPropertyException ( exchange , propertyName , type ) ; } return answer ; } public static < T > T getMandatoryHeader ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchHeaderException { T answer = exchange . getIn ( ) . getHeader ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchHeaderException ( exchange , propertyName , type ) ; } return answer ; } public static Object getMandatoryInBody ( Exchange exchange ) throws InvalidPayloadException { Object answer = exchange . getIn ( ) . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class ) ; } return answer ; } public static < T > T getMandatoryInBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { T answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type ) ; } return answer ; } public static Object getMandatoryOutBody ( Exchange exchange ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; Object answer = out . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class , out ) ; } return answer ; } public static < T > T getMandatoryOutBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; T answer = out . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type , out ) ; } return answer ; } public static < T > T convertToMandatoryType ( Exchange exchange , Class < T > type , Object value ) throws InvalidTypeException { T answer = convertToType ( exchange , type , value ) ; if ( answer == null ) { throw new InvalidTypeException ( exchange , value , type ) ; } return answer ; } public static < T > T convertToType ( Exchange exchange , Class < T > type , Object value ) { return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public static void copyResults ( Exchange result , Exchange source ) { if ( result != source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } Message out = source . getOut ( false ) ; if ( out != null ) { result . getOut ( true ) . copyFrom ( out ) ; } else { result . getOut ( true ) . copyFrom ( source . getIn ( ) ) ; } result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } public static boolean isInCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isInCapable ( ) ; } public static boolean isOutCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isOutCapable ( ) ; } public static < T > T newInstance ( Exchange exchange , Class < T > type ) { return exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } public static Map createVariableMap ( Exchange exchange ) { Map answer = new HashMap ( ) ; populateVariableMap ( exchange , answer ) ; return answer ; } public static void populateVariableMap ( Exchange exchange , Map map ) { map . put ( "exchange" , exchange ) ; Message in = exchange . getIn ( ) ; map . put ( "in" , in ) ; map . put ( "request" , in ) ; map . put ( "headers" , in . getHeaders ( ) ) ; map . put ( "body" , in . getBody ( ) ) ; if ( isOutCapable ( exchange ) ) { Message out = exchange . getOut ( true ) ; map . put ( "out" , out ) ; map . put ( "response" , out ) ; } map . put ( "camelContext" , exchange . getContext ( ) ) ; } public static String getContentType ( Exchange exchange ) { return exchange . getIn ( ) . getHeader ( "Content-Type" , String . class ) ; } public static Object lookupMandatoryBean ( Exchange exchange , String name ) { Object value = lookupBean ( exchange , name ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static < T > T lookupMandatoryBean ( Exchange exchange , String name , Class < T > type ) { T value = lookupBean ( exchange , name , type ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static Object lookupBean ( Exchange exchange , String name ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookupBean ( Exchange exchange , String name , Class < T > type ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } } 	1
package org . apache . camel . component . jms ; import java . util . ArrayList ; import java . util . Enumeration ; import java . util . List ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . QueueBrowser ; import javax . jms . Session ; import org . apache . camel . Exchange ; import org . springframework . jms . core . BrowserCallback ; import org . springframework . jms . core . JmsOperations ; public class DefaultQueueBrowseStrategy implements QueueBrowseStrategy { public List < Exchange > browse ( JmsOperations template , String queue , final JmsQueueEndpoint endpoint ) { return ( List < Exchange > ) template . browse ( queue , new BrowserCallback ( ) { public Object doInJms ( Session session , QueueBrowser browser ) throws JMSException { List < Exchange > answer = new ArrayList < Exchange > ( ) ; Enumeration iter = browser . getEnumeration ( ) ; while ( iter . hasMoreElements ( ) ) { Message message = ( Message ) iter . nextElement ( ) ; JmsExchange exchange = endpoint . createExchange ( message ) ; answer . add ( exchange ) ; } return answer ; } } ) ; } } 	0
package org . apache . camel ; public class NoSuchEndpointException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String uri ; public NoSuchEndpointException ( String uri ) { super ( "No endpoint could be found for: " + uri ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	1
package org . apache . camel . component . bean ; import org . apache . camel . Component ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . impl . ProcessorEndpoint ; public class BeanEndpoint extends ProcessorEndpoint { private boolean cache ; private String beanName ; private String method ; private BeanHolder beanHolder ; public BeanEndpoint ( ) { init ( ) ; } public BeanEndpoint ( String endpointUri ) { super ( endpointUri ) ; init ( ) ; } public BeanEndpoint ( String endpointUri , BeanProcessor processor ) { super ( endpointUri , processor ) ; init ( ) ; } public BeanEndpoint ( String endpointUri , Component component , BeanProcessor processor ) { super ( endpointUri , component , processor ) ; init ( ) ; } public BeanEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; init ( ) ; } public String getBeanName ( ) { return beanName ; } public void setBeanName ( String beanName ) { this . beanName = beanName ; } public boolean isCache ( ) { return cache ; } public void setCache ( boolean cache ) { this . cache = cache ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public BeanHolder getBeanHolder ( ) { return beanHolder ; } public void setBeanHolder ( BeanHolder beanHolder ) { this . beanHolder = beanHolder ; } @ Override protected String createEndpointUri ( ) { return "bean:" + getBeanName ( ) + ( method != null ? "?method=" + method : "" ) ; } private void init ( ) { setExchangePattern ( ExchangePattern . InOut ) ; } @ Override protected Processor createProcessor ( ) throws Exception { BeanHolder holder = getBeanHolder ( ) ; if ( holder == null ) { RegistryBean registryBean = new RegistryBean ( getCamelContext ( ) , beanName ) ; if ( cache ) { holder = registryBean . createCacheHolder ( ) ; } else { holder = registryBean ; } } BeanProcessor processor = new BeanProcessor ( holder ) ; if ( method != null ) { processor . setMethod ( method ) ; } return processor ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class DefaultConsumer < E extends Exchange > extends ServiceSupport implements Consumer < E > { private Endpoint < E > endpoint ; private Processor processor ; private AsyncProcessor asyncProcessor ; private ExceptionHandler exceptionHandler ; public DefaultConsumer ( Endpoint < E > endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; } @ Override public String toString ( ) { return "Consumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } public AsyncProcessor getAsyncProcessor ( ) { if ( asyncProcessor == null ) { asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; } return asyncProcessor ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void handleException ( Throwable t ) { getExceptionHandler ( ) . handleException ( t ) ; } } 	1
package org . apache . camel . spring . remoting ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . util . CamelContextHelper ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . DisposableBean ; import org . springframework . beans . factory . FactoryBean ; import org . springframework . beans . factory . InitializingBean ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . remoting . support . RemoteExporter ; import static org . apache . camel . util . ObjectHelper . notNull ; public class CamelServiceExporter extends RemoteExporter implements InitializingBean , DisposableBean , ApplicationContextAware , CamelContextAware { private String uri ; private CamelContext camelContext ; private Consumer consumer ; private String serviceRef ; private ApplicationContext applicationContext ; public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public String getServiceRef ( ) { return serviceRef ; } public void setServiceRef ( String serviceRef ) { this . serviceRef = serviceRef ; } public ApplicationContext getApplicationContext ( ) { return applicationContext ; } public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { this . applicationContext = applicationContext ; } public void afterPropertiesSet ( ) throws Exception { notNull ( uri , "uri" ) ; notNull ( camelContext , "camelContext" ) ; if ( serviceRef != null && getService ( ) == null && applicationContext != null ) { setService ( applicationContext . getBean ( serviceRef ) ) ; } Endpoint endpoint = CamelContextHelper . getMandatoryEndpoint ( camelContext , uri ) ; Object proxy = getProxyForService ( ) ; consumer = endpoint . createConsumer ( new BeanProcessor ( proxy , camelContext ) ) ; consumer . start ( ) ; } public void destroy ( ) throws Exception { if ( consumer != null ) { consumer . stop ( ) ; } } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanProcessor extends ServiceSupport implements Processor { public static final String METHOD_NAME = "org.apache.camel.MethodName" ; private static final transient Log LOG = LogFactory . getLog ( BeanProcessor . class ) ; private Method methodObject ; private String method ; private BeanHolder beanHolder ; public BeanProcessor ( Object pojo , BeanInfo beanInfo ) { this ( new ConstantBeanHolder ( pojo , beanInfo ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext , ParameterMappingStrategy parameterMappingStrategy ) { this ( pojo , new BeanInfo ( camelContext , pojo . getClass ( ) , parameterMappingStrategy ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext ) { this ( pojo , camelContext , BeanInfo . createParameterMappingStrategy ( camelContext ) ) ; } public BeanProcessor ( BeanHolder beanHolder ) { this . beanHolder = beanHolder ; } @ Override public String toString ( ) { String description = methodObject != null ? " " + methodObject : "" ; return "BeanProcessor[" + beanHolder + description + "]" ; } public void process ( Exchange exchange ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> invoking method for: " + exchange ) ; } Object bean = beanHolder . getBean ( ) ; exchange . setProperty ( "org.apache.camel.bean.BeanHolder" , beanHolder ) ; Processor processor = getProcessor ( ) ; BeanInfo beanInfo = beanHolder . getBeanInfo ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return ; } Message in = exchange . getIn ( ) ; BeanInvocation beanInvoke = in . getBody ( BeanInvocation . class ) ; if ( beanInvoke != null ) { beanInvoke . invoke ( bean , exchange ) ; return ; } boolean isExplicitMethod = false ; String prevMethod = null ; MethodInvocation invocation ; if ( methodObject != null ) { invocation = beanInfo . createInvocation ( methodObject , bean , exchange ) ; } else { if ( ObjectHelper . isNotNullAndNonEmpty ( method ) ) { prevMethod = in . getHeader ( METHOD_NAME , String . class ) ; in . setHeader ( METHOD_NAME , method ) ; isExplicitMethod = true ; } invocation = beanInfo . createInvocation ( bean , exchange ) ; } if ( invocation == null ) { throw new IllegalStateException ( "No method invocation could be created, " + "no maching method could be found on: " + bean ) ; } try { Object value = invocation . proceed ( ) ; if ( value != null ) { if ( exchange . getPattern ( ) . isOutCapable ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on OUT message: " + value ) ; } exchange . getOut ( true ) . setBody ( value ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation value on IN message: " + value ) ; } exchange . getIn ( ) . setBody ( value ) ; } } } catch ( InvocationTargetException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof Exception ) { throw ( Exception ) cause ; } else { throw e ; } } catch ( Exception e ) { throw e ; } catch ( Throwable throwable ) { throw new Exception ( throwable ) ; } finally { if ( isExplicitMethod ) { in . setHeader ( METHOD_NAME , prevMethod ) ; } } } protected Processor getProcessor ( ) { return beanHolder . getProcessor ( ) ; } public Method getMethodObject ( ) { return methodObject ; } public void setMethodObject ( Method methodObject ) { this . methodObject = methodObject ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Deprecated public void setMethodName ( String method ) { setMethod ( method ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startService ( getProcessor ( ) ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopService ( getProcessor ( ) ) ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . TypeConverter ; public interface TypeConverterAware { void setTypeConverter ( TypeConverter parentTypeConverter ) ; } 	0
package org . apache . camel ; import org . apache . camel . impl . DefaultProducerTemplate ; @ Deprecated public class CamelTemplate < E extends Exchange > extends DefaultProducerTemplate < E > { public CamelTemplate ( CamelContext context ) { super ( context ) ; } public CamelTemplate ( CamelContext context , Endpoint defaultEndpoint ) { super ( context , defaultEndpoint ) ; } } 	1
package org . apache . camel . component . jms ; import java . io . ByteArrayOutputStream ; import java . io . DataOutputStream ; import java . io . ObjectOutputStream ; import java . nio . ByteBuffer ; import java . util . Enumeration ; import javax . jms . BytesMessage ; import javax . jms . MapMessage ; import javax . jms . Message ; import javax . jms . MessageEOFException ; import javax . jms . ObjectMessage ; import javax . jms . StreamMessage ; import javax . jms . TextMessage ; import org . apache . camel . Converter ; import org . apache . camel . converter . NIOConverter ; @ Converter public final class JmsIOConverter { private JmsIOConverter ( ) { } @ Converter public static ByteBuffer toByteBuffer ( final Message message ) throws Exception { if ( message instanceof TextMessage ) { final String text = ( ( TextMessage ) message ) . getText ( ) ; return NIOConverter . toByteBuffer ( text ) ; } if ( message instanceof BytesMessage ) { final BytesMessage bmsg = ( BytesMessage ) message ; final int len = ( int ) bmsg . getBodyLength ( ) ; final byte [ ] data = new byte [ len ] ; bmsg . readBytes ( data , len ) ; return NIOConverter . toByteBuffer ( data ) ; } if ( message instanceof StreamMessage ) { final StreamMessage msg = ( StreamMessage ) message ; final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream ( ) ; final DataOutputStream dataOut = new DataOutputStream ( bytesOut ) ; try { while ( true ) { final Object obj = msg . readObject ( ) ; writeData ( dataOut , obj ) ; } } catch ( MessageEOFException e ) { } dataOut . close ( ) ; return NIOConverter . toByteBuffer ( bytesOut . toByteArray ( ) ) ; } if ( message instanceof MapMessage ) { final MapMessage msg = ( MapMessage ) message ; final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream ( ) ; final DataOutputStream dataOut = new DataOutputStream ( bytesOut ) ; for ( final Enumeration en = msg . getMapNames ( ) ; en . hasMoreElements ( ) ; ) { final Object obj = msg . getObject ( en . nextElement ( ) . toString ( ) ) ; writeData ( dataOut , obj ) ; } dataOut . close ( ) ; return NIOConverter . toByteBuffer ( bytesOut . toByteArray ( ) ) ; } if ( message instanceof ObjectMessage ) { ObjectMessage objMessage = ( ObjectMessage ) message ; Object object = objMessage . getObject ( ) ; ByteArrayOutputStream bytesOut = new ByteArrayOutputStream ( ) ; ObjectOutputStream objectOut = new ObjectOutputStream ( bytesOut ) ; objectOut . writeObject ( object ) ; objectOut . close ( ) ; return NIOConverter . toByteBuffer ( bytesOut . toByteArray ( ) ) ; } return null ; } private static void writeData ( DataOutputStream dataOut , Object data ) throws Exception { if ( data instanceof byte [ ] ) { dataOut . write ( ( byte [ ] ) data ) ; } else if ( data instanceof String ) { dataOut . writeUTF ( data . toString ( ) ) ; } else if ( data instanceof Double ) { dataOut . writeDouble ( ( ( Double ) data ) . doubleValue ( ) ) ; } else if ( data instanceof Float ) { dataOut . writeFloat ( ( ( Float ) data ) . floatValue ( ) ) ; } else if ( data instanceof Long ) { dataOut . writeLong ( ( ( Long ) data ) . longValue ( ) ) ; } else if ( data instanceof Integer ) { dataOut . writeInt ( ( ( Integer ) data ) . intValue ( ) ) ; } else if ( data instanceof Short ) { dataOut . writeShort ( ( ( Short ) data ) . shortValue ( ) ) ; } else if ( data instanceof Character ) { dataOut . writeChar ( ( ( Character ) data ) . charValue ( ) ) ; } else if ( data instanceof Byte ) { dataOut . writeByte ( ( ( Byte ) data ) . byteValue ( ) ) ; } else if ( data instanceof Boolean ) { dataOut . writeBoolean ( ( ( Boolean ) data ) . booleanValue ( ) ) ; } } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeleteFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( DeleteFileProcessStrategy . class ) ; public DeleteFileProcessStrategy ( ) { } public DeleteFileProcessStrategy ( boolean lockFile ) { super ( lockFile ) ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Deleting file: " + file ) ; } boolean deleted = file . delete ( ) ; if ( ! deleted ) { LOG . warn ( "Could not delete file: " + file ) ; } super . commit ( endpoint , exchange , file ) ; } } 	1
package org . apache . camel . component . file . strategy ; import java . io . File ; public class DefaultFileRenamer implements FileRenamer { private static final boolean ON_WINDOWS = System . getProperty ( "os.name" ) . startsWith ( "Windows" ) ; private String namePrefix ; private String namePostfix ; public DefaultFileRenamer ( ) { } public DefaultFileRenamer ( String namePrefix , String namePostfix ) { this . namePrefix = namePrefix ; this . namePostfix = namePostfix ; } public File renameFile ( File file ) { File parent = file . getParentFile ( ) ; String name = renameFileName ( file ) ; if ( ON_WINDOWS && ( name . indexOf ( ":" ) >= 0 || name . startsWith ( "//" ) ) ) { return new File ( name ) ; } return new File ( parent , name ) ; } public String getNamePostfix ( ) { return namePostfix ; } public void setNamePostfix ( String namePostfix ) { this . namePostfix = namePostfix ; } public String getNamePrefix ( ) { return namePrefix ; } public void setNamePrefix ( String namePrefix ) { this . namePrefix = namePrefix ; } protected String renameFileName ( File file ) { StringBuffer buffer = new StringBuffer ( ) ; if ( namePrefix != null ) { buffer . append ( namePrefix ) ; } buffer . append ( file . getName ( ) ) ; if ( namePostfix != null ) { buffer . append ( namePostfix ) ; } return buffer . toString ( ) ; } } 	0
package org . apache . camel . processor . validation ; import java . util . ArrayList ; import java . util . List ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultValidationErrorHandler implements ValidatorErrorHandler { private static final transient Log LOG = LogFactory . getLog ( DefaultValidationErrorHandler . class ) ; private List < SAXParseException > warnings = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > errors = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > fatalErrors = new ArrayList < SAXParseException > ( ) ; public void warning ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "warning: " + e , e ) ; } warnings . add ( e ) ; } public void error ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "error: " + e , e ) ; } errors . add ( e ) ; } public void fatalError ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "fatalError: " + e , e ) ; } fatalErrors . add ( e ) ; } public void reset ( ) { warnings . clear ( ) ; errors . clear ( ) ; fatalErrors . clear ( ) ; } public boolean isValid ( ) { return errors . isEmpty ( ) && fatalErrors . isEmpty ( ) ; } public void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } public void handleErrors ( Exchange exchange , Object schema ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import org . apache . http . HttpException ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . protocol . HttpContext ; import org . apache . http . protocol . HttpRequestHandler ; public interface AsyncHttpRequestHandler extends HttpRequestHandler { void handle ( HttpRequest request , HttpContext context , AsyncResponseHandler handler ) throws HttpException , IOException ; } 	0
package org . apache . camel . model ; import java . util . concurrent . LinkedBlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Splitter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "splitter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SplitterType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; public SplitterType ( ) { } public SplitterType ( Expression expression ) { super ( expression ) ; } public SplitterType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Splitter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "splitter" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } if ( threadPoolExecutor == null ) { threadPoolExecutor = new ThreadPoolExecutor ( 4 , 16 , 0L , TimeUnit . MILLISECONDS , new LinkedBlockingQueue ( ) ) ; } return new Splitter ( getExpression ( ) . createExpression ( routeContext ) , childProcessor , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public void setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public void setThreadPoolExecutor ( ThreadPoolExecutor threadPoolExecutor ) { this . threadPoolExecutor = threadPoolExecutor ; } } 	1
package org . apache . camel . component . bean ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . builder . ExpressionBuilder ; public class DefaultParameterMappingStrategy implements ParameterMappingStrategy { private Map < Class , Expression > parameterTypeToExpressionMap = new ConcurrentHashMap < Class , Expression > ( ) ; public DefaultParameterMappingStrategy ( ) { loadDefaultRegistry ( ) ; } public synchronized Expression getDefaultParameterTypeExpression ( Class parameterType ) { return parameterTypeToExpressionMap . get ( parameterType ) ; } public synchronized void addParameterMapping ( Class parameterType , Expression expression ) { parameterTypeToExpressionMap . put ( parameterType , expression ) ; } public void loadDefaultRegistry ( ) { addParameterMapping ( Exchange . class , ExpressionBuilder . exchangeExpression ( ) ) ; addParameterMapping ( Message . class , ExpressionBuilder . inMessageExpression ( ) ) ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import javax . activation . DataHandler ; import org . apache . camel . Message ; public class DefaultMessage extends MessageSupport { private Map < String , Object > headers ; private Map < String , DataHandler > attachments ; @ Override public String toString ( ) { return "Message: " + getBody ( ) ; } public Object getHeader ( String name ) { return getHeaders ( ) . get ( name ) ; } public < T > T getHeader ( String name , Class < T > type ) { Object value = getHeader ( name ) ; return getExchange ( ) . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setHeader ( String name , Object value ) { if ( headers == null ) { headers = createHeaders ( ) ; } headers . put ( name , value ) ; } public Object removeHeader ( String name ) { if ( headers != null ) { return headers . remove ( name ) ; } else { return null ; } } public Map < String , Object > getHeaders ( ) { if ( headers == null ) { headers = createHeaders ( ) ; } return headers ; } public void setHeaders ( Map < String , Object > headers ) { this . headers = headers ; } public DefaultMessage newInstance ( ) { return new DefaultMessage ( ) ; } protected Map < String , Object > createHeaders ( ) { HashMap < String , Object > map = new HashMap < String , Object > ( ) ; populateInitialHeaders ( map ) ; return map ; } protected void populateInitialHeaders ( Map < String , Object > map ) { } protected Map < String , DataHandler > createAttachments ( ) { HashMap < String , DataHandler > map = new HashMap < String , DataHandler > ( ) ; populateInitialAttachments ( map ) ; return map ; } protected void populateInitialAttachments ( Map < String , DataHandler > map ) { } public void addAttachment ( String id , DataHandler content ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } attachments . put ( id , content ) ; } public DataHandler getAttachment ( String id ) { return getAttachments ( ) . get ( id ) ; } public Set < String > getAttachmentNames ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments . keySet ( ) ; } public void removeAttachment ( String id ) { if ( attachments != null && attachments . containsKey ( id ) ) { attachments . remove ( id ) ; } } public Map < String , DataHandler > getAttachments ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments ; } public void setAttachments ( Map < String , DataHandler > attachments ) { this . attachments = attachments ; } public boolean hasAttachments ( ) { return this . attachments != null && this . attachments . size ( ) > 0 ; } protected boolean hasPopulatedHeaders ( ) { return headers != null ; } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElementRef ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExpressionNode extends ProcessorType < ProcessorType > { @ XmlElementRef private ExpressionType expression ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; public ExpressionNode ( ) { } public ExpressionNode ( ExpressionType expression ) { this . expression = expression ; } public ExpressionNode ( Expression expression ) { if ( expression != null ) { setExpression ( new ExpressionType ( expression ) ) ; } } public ExpressionNode ( Predicate predicate ) { if ( predicate != null ) { setExpression ( new ExpressionType ( predicate ) ) ; } } @ Override public String getShortName ( ) { return "exp" ; } public ExpressionType getExpression ( ) { return expression ; } public void setExpression ( ExpressionType expression ) { this . expression = expression ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } @ Override public String getLabel ( ) { if ( getExpression ( ) == null ) { return "" ; } return getExpression ( ) . getLabel ( ) ; } protected FilterProcessor createFilterProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new FilterProcessor ( getExpression ( ) . createPredicate ( routeContext ) , childProcessor ) ; } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } } } 	0
package org . apache . camel . processor . interceptor ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . converter . stream . StreamCache ; import org . apache . camel . model . InterceptorRef ; import org . apache . camel . model . InterceptorType ; import org . apache . camel . processor . Interceptor ; public class StreamCachingInterceptor extends Interceptor { public StreamCachingInterceptor ( ) { super ( ) ; setInterceptorLogic ( new Processor ( ) { public void process ( Exchange exchange ) throws Exception { Object newBody = exchange . getIn ( ) . getBody ( StreamCache . class ) ; if ( newBody != null ) { exchange . getIn ( ) . setBody ( newBody ) ; } proceed ( exchange ) ; } } ) ; } public StreamCachingInterceptor ( Processor processor ) { this ( ) ; setProcessor ( processor ) ; } @ Override public String toString ( ) { return "StreamCachingInterceptor" ; } public static void noStreamCaching ( List < InterceptorType > interceptors ) { for ( int i = 0 ; i < interceptors . size ( ) ; i ++ ) { InterceptorType interceptor = interceptors . get ( i ) ; if ( interceptor instanceof InterceptorRef && ( ( InterceptorRef ) interceptor ) . getInterceptor ( ) instanceof StreamCachingInterceptor ) { interceptors . remove ( interceptor ) ; } } } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . processor . ChoiceProcessor ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlRootElement ( name = "choice" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ChoiceType extends ProcessorType < ChoiceType > { private static final transient Log LOG = LogFactory . getLog ( ChoiceType . class ) ; @ XmlElementRef private List < WhenType > whenClauses = new ArrayList < WhenType > ( ) ; @ XmlElement ( required = false ) private OtherwiseType otherwise ; @ Override public String toString ( ) { if ( getOtherwise ( ) != null ) { return "Choice[ " + getWhenClauses ( ) + " " + getOtherwise ( ) + "]" ; } else { return "Choice[ " + getWhenClauses ( ) + "]" ; } } @ Override public String getShortName ( ) { return "choice" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { List < FilterProcessor > filters = new ArrayList < FilterProcessor > ( ) ; for ( WhenType whenClaus : whenClauses ) { filters . add ( whenClaus . createProcessor ( routeContext ) ) ; } Processor otherwiseProcessor = null ; if ( otherwise != null ) { otherwiseProcessor = otherwise . createProcessor ( routeContext ) ; } else { LOG . warn ( "No otherwise clause was specified for a choice block -- any unmatched exchanges will be dropped" ) ; } return new ChoiceProcessor ( filters , otherwiseProcessor ) ; } public ChoiceType when ( Predicate predicate ) { getWhenClauses ( ) . add ( new WhenType ( predicate ) ) ; return this ; } public ExpressionClause < ChoiceType > when ( ) { WhenType when = new WhenType ( ) ; getWhenClauses ( ) . add ( when ) ; ExpressionClause < ChoiceType > clause = new ExpressionClause < ChoiceType > ( this ) ; when . setExpression ( clause ) ; return clause ; } public ChoiceType otherwise ( ) { OtherwiseType answer = new OtherwiseType ( ) ; setOtherwise ( answer ) ; return this ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < WhenType > list = getWhenClauses ( ) ; for ( WhenType whenType : list ) { buffer . append ( whenType . getLabel ( ) ) ; } return buffer . toString ( ) ; } public List < WhenType > getWhenClauses ( ) { return whenClauses ; } public void setWhenClauses ( List < WhenType > whenClauses ) { this . whenClauses = whenClauses ; } public List < ProcessorType < ? > > getOutputs ( ) { if ( otherwise != null ) { return otherwise . getOutputs ( ) ; } else if ( whenClauses . isEmpty ( ) ) { return Collections . EMPTY_LIST ; } else { WhenType when = whenClauses . get ( whenClauses . size ( ) - 1 ) ; return when . getOutputs ( ) ; } } public OtherwiseType getOtherwise ( ) { return otherwise ; } public void setOtherwise ( OtherwiseType otherwise ) { this . otherwise = otherwise ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . CollectionHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class Splitter extends MulticastProcessor implements Processor { public static final String SPLIT_SIZE = "org.apache.camel.splitSize" ; public static final String SPLIT_COUNTER = "org.apache.camel.splitCounter" ; private final Expression expression ; public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy ) { this ( expression , destination , aggregationStrategy , false , null ) ; } public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { super ( Collections . singleton ( destination ) , aggregationStrategy , parallelProcessing , threadPoolExecutor ) ; this . expression = expression ; notNull ( expression , "expression" ) ; notNull ( destination , "destination" ) ; } @ Override public String toString ( ) { return "Splitter[on: " + expression + " to: " + getProcessors ( ) . iterator ( ) . next ( ) + " aggregate: " + getAggregationStrategy ( ) + "]" ; } @ Override protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; Integer collectionSize = CollectionHelper . size ( value ) ; List < ProcessorExchangePair > result ; if ( collectionSize != null ) { result = new ArrayList < ProcessorExchangePair > ( collectionSize ) ; } else { result = new ArrayList < ProcessorExchangePair > ( ) ; } Iterator < Object > iter = ObjectConverter . iterator ( value ) ; while ( iter . hasNext ( ) ) { Object part = iter . next ( ) ; Exchange newExchange = exchange . copy ( ) ; Message in = newExchange . getIn ( ) ; in . setBody ( part ) ; result . add ( new ProcessorExchangePair ( getProcessors ( ) . iterator ( ) . next ( ) , newExchange ) ) ; } return result ; } @ Override protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { exchange . getIn ( ) . setHeader ( SPLIT_COUNTER , i ) ; exchange . getIn ( ) . setHeader ( SPLIT_SIZE , allPairs . size ( ) ) ; } } 	1
package org . apache . camel ; public class CamelExchangeException extends CamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final Exchange exchange ; public CamelExchangeException ( String message , Exchange exchange ) { super ( createMessage ( message , exchange ) ) ; this . exchange = exchange ; } public CamelExchangeException ( String message , Exchange exchange , Throwable cause ) { super ( createMessage ( message , exchange ) , cause ) ; this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } protected static String createMessage ( String message , Exchange exchange ) { return message + " on the exchange: " + exchange ; } } 	0
package org . apache . camel . model ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . MulticastProcessor ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "multicast" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MulticastType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private Boolean parallelProcessing ; @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private ThreadPoolExecutor threadPoolExecutor ; @ Override public String toString ( ) { return "Multicast[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "multicast" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } protected Processor createCompositeProcessor ( List < Processor > list ) { if ( aggregationStrategy == null ) { aggregationStrategy = new UseLatestAggregationStrategy ( ) ; } return new MulticastProcessor ( list , aggregationStrategy , isParallelProcessing ( ) , threadPoolExecutor ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public MulticastType setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; return this ; } public boolean isParallelProcessing ( ) { return parallelProcessing != null ? parallelProcessing : false ; } public MulticastType setParallelProcessing ( boolean parallelProcessing ) { this . parallelProcessing = parallelProcessing ; return this ; } public ThreadPoolExecutor getThreadPoolExecutor ( ) { return threadPoolExecutor ; } public MulticastType setThreadPoolExecutor ( ThreadPoolExecutor executor ) { this . threadPoolExecutor = executor ; return this ; } @ Override protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { return new StreamCachingInterceptor ( target ) ; } } 	1
package org . apache . camel . component . xquery ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . component . ResourceBasedComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . springframework . core . io . Resource ; public class XQueryComponent extends ResourceBasedComponent { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { Resource resource = resolveMandatoryResource ( remaining ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( this + " using schema resource: " + resource ) ; } XQueryBuilder xslt = XQueryBuilder . xquery ( resource . getURL ( ) ) ; configureXslt ( xslt , uri , remaining , parameters ) ; return new ProcessorEndpoint ( uri , this , xslt ) ; } protected void configureXslt ( XQueryBuilder xQueryBuilder , String uri , String remaining , Map parameters ) throws Exception { setProperties ( xQueryBuilder , parameters ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . model . config . BatchResequencerConfig ; import org . apache . camel . model . config . StreamResequencerConfig ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Resequencer ; import org . apache . camel . processor . StreamResequencer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "resequencer" ) public class ResequencerType extends ProcessorType < ProcessorType > { @ XmlElementRef private List < ExpressionType > expressions = new ArrayList < ExpressionType > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; private BatchResequencerConfig batchConfig ; private StreamResequencerConfig streamConfig ; @ XmlTransient private List < Expression > expressionList ; public ResequencerType ( ) { this ( null ) ; } public ResequencerType ( List < Expression > expressions ) { this . expressionList = expressions ; this . batch ( ) ; } @ Override public String getShortName ( ) { return "resequencer" ; } public ResequencerType stream ( ) { return stream ( StreamResequencerConfig . getDefault ( ) ) ; } public ResequencerType batch ( ) { return batch ( BatchResequencerConfig . getDefault ( ) ) ; } public ResequencerType stream ( StreamResequencerConfig config ) { this . streamConfig = config ; this . batchConfig = null ; return this ; } public ResequencerType batch ( BatchResequencerConfig config ) { this . batchConfig = config ; this . streamConfig = null ; return this ; } public ResequencerType expression ( ExpressionType expression ) { expressions . add ( expression ) ; return this ; } @ Override public String toString ( ) { return "Resequencer[ " + getExpressions ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return ExpressionType . getLabel ( getExpressions ( ) ) ; } public List < ExpressionType > getExpressions ( ) { return expressions ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public BatchResequencerConfig getBatchConfig ( ) { return batchConfig ; } public BatchResequencerConfig getBatchConfig ( BatchResequencerConfig defaultConfig ) { return batchConfig ; } public StreamResequencerConfig getStreamConfig ( ) { return streamConfig ; } @ XmlElement ( name = "batch-config" , required = false ) public void setBatchConfig ( BatchResequencerConfig batchConfig ) { batch ( batchConfig ) ; } @ XmlElement ( name = "stream-config" , required = false ) public void setStreamConfig ( StreamResequencerConfig streamConfig ) { stream ( streamConfig ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { if ( batchConfig != null ) { return createBatchResequencer ( routeContext , batchConfig ) ; } else { return createStreamResequencer ( routeContext , streamConfig ) ; } } @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { if ( batchConfig != null ) { routes . add ( createBatchResequencerRoute ( routeContext ) ) ; } else { super . addRoutes ( routeContext , routes ) ; } } private Route < ? extends Exchange > createBatchResequencerRoute ( RouteContext routeContext ) throws Exception { final Resequencer resequencer = createBatchResequencer ( routeContext , batchConfig ) ; return new Route ( routeContext . getEndpoint ( ) , resequencer ) { @ Override public String toString ( ) { return "BatchResequencerRoute[" + getEndpoint ( ) + " -> " + resequencer . getProcessor ( ) + "]" ; } } ; } protected Resequencer createBatchResequencer ( RouteContext routeContext , BatchResequencerConfig config ) throws Exception { Processor processor = routeContext . createProcessor ( this ) ; Resequencer resequencer = new Resequencer ( routeContext . getEndpoint ( ) , processor , resolveExpressionList ( routeContext ) ) ; resequencer . setBatchSize ( config . getBatchSize ( ) ) ; resequencer . setBatchTimeout ( config . getBatchTimeout ( ) ) ; return resequencer ; } protected StreamResequencer createStreamResequencer ( RouteContext routeContext , StreamResequencerConfig config ) throws Exception { config . getComparator ( ) . setExpressions ( resolveExpressionList ( routeContext ) ) ; Processor processor = routeContext . createProcessor ( this ) ; StreamResequencer resequencer = new StreamResequencer ( processor , config . getComparator ( ) , config . getCapacity ( ) ) ; resequencer . setTimeout ( config . getTimeout ( ) ) ; return resequencer ; } private List < Expression > resolveExpressionList ( RouteContext routeContext ) { if ( expressionList == null ) { expressionList = new ArrayList < Expression > ( ) ; for ( ExpressionType expression : expressions ) { expressionList . add ( expression . createExpression ( routeContext ) ) ; } } if ( expressionList . isEmpty ( ) ) { throw new IllegalArgumentException ( "No expressions configured for: " + this ) ; } return expressionList ; } } 	1
package org . apache . camel . component . cxf ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class CxfComponent extends DefaultComponent < CxfExchange > { public CxfComponent ( ) { } public CxfComponent ( CamelContext context ) { super ( context ) ; } @ Override protected Endpoint < CxfExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { CxfEndpoint result = new CxfEndpoint ( uri , remaining , this ) ; setProperties ( result , parameters ) ; return result ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . util . ObjectHelper ; public class DefaultProducerTemplate < E extends Exchange > extends ServiceSupport implements ProducerTemplate < E > { private CamelContext context ; private final ProducerCache < E > producerCache = new ProducerCache < E > ( ) ; private boolean useEndpointCache = true ; private final Map < String , Endpoint < E > > endpointCache = new HashMap < String , Endpoint < E > > ( ) ; private Endpoint < E > defaultEndpoint ; public DefaultProducerTemplate ( CamelContext context ) { this . context = context ; } public DefaultProducerTemplate ( CamelContext context , Endpoint defaultEndpoint ) { this ( context ) ; this . defaultEndpoint = defaultEndpoint ; } public E send ( String endpointUri , E exchange ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , exchange ) ; } public E send ( String endpointUri , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor ) ; } public E send ( String endpointUri , Processor processor , AsyncCallback callback ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor , callback ) ; } public E send ( String endpointUri , ExchangePattern pattern , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , pattern , processor ) ; } public E send ( Endpoint < E > endpoint , E exchange ) { E convertedExchange = exchange ; producerCache . send ( endpoint , convertedExchange ) ; return convertedExchange ; } public E send ( Endpoint < E > endpoint , Processor processor ) { return producerCache . send ( endpoint , processor ) ; } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { return producerCache . send ( endpoint , processor , callback ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { return producerCache . send ( endpoint , pattern , processor ) ; } public Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) { E result = send ( endpoint , pattern , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBody ( Endpoint < E > endpoint , Object body ) { E result = send ( endpoint , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result ) ; } public Object sendBody ( String endpointUri , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , body ) ; } public Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , pattern , body ) ; } public Object sendBodyAndHeader ( String endpointUri , final Object body , final String header , final Object headerValue ) { return sendBodyAndHeader ( resolveMandatoryEndpoint ( endpointUri ) , body , header , headerValue ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeaders ( String endpointUri , final Object body , final Map < String , Object > headers ) { return sendBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , body , headers ) ; } public Object sendBodyAndHeaders ( Endpoint endpoint , final Object body , final Map < String , Object > headers ) { E result = send ( endpoint , new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; for ( Map . Entry < String , Object > header : headers . entrySet ( ) ) { in . setHeader ( header . getKey ( ) , header . getValue ( ) ) ; } in . setBody ( body ) ; } } ) ; return extractResultBody ( result ) ; } public E request ( Endpoint < E > endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( Endpoint < E > endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public E request ( String endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( String endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( String endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public Object sendBody ( Object body ) { return sendBody ( getMandatoryDefaultEndpoint ( ) , body ) ; } public E send ( E exchange ) { return send ( getMandatoryDefaultEndpoint ( ) , exchange ) ; } public E send ( Processor processor ) { return send ( getMandatoryDefaultEndpoint ( ) , processor ) ; } public Object sendBodyAndHeader ( Object body , String header , Object headerValue ) { return sendBodyAndHeader ( getMandatoryDefaultEndpoint ( ) , body , header , headerValue ) ; } public Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) { return sendBodyAndHeaders ( getMandatoryDefaultEndpoint ( ) , body , headers ) ; } public Producer < E > getProducer ( Endpoint < E > endpoint ) { return producerCache . getProducer ( endpoint ) ; } public CamelContext getContext ( ) { return context ; } public Endpoint < E > getDefaultEndpoint ( ) { return defaultEndpoint ; } public void setDefaultEndpoint ( Endpoint < E > defaultEndpoint ) { this . defaultEndpoint = defaultEndpoint ; } public void setDefaultEndpointUri ( String endpointUri ) { setDefaultEndpoint ( getContext ( ) . getEndpoint ( endpointUri ) ) ; } public boolean isUseEndpointCache ( ) { return useEndpointCache ; } public void setUseEndpointCache ( boolean useEndpointCache ) { this . useEndpointCache = useEndpointCache ; } public < T extends Endpoint < ? > > T getResolvedEndpoint ( String endpointUri , Class < T > expectedClass ) { Endpoint < ? > e = null ; synchronized ( endpointCache ) { e = endpointCache . get ( endpointUri ) ; } if ( e != null && expectedClass . isAssignableFrom ( e . getClass ( ) ) ) { return expectedClass . asSubclass ( expectedClass ) . cast ( e ) ; } return null ; } protected Processor createBodyAndHeaderProcessor ( final Object body , final String header , final Object headerValue ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setHeader ( header , headerValue ) ; in . setBody ( body ) ; } } ; } protected Processor createSetBodyProcessor ( final Object body ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setBody ( body ) ; } } ; } protected Endpoint resolveMandatoryEndpoint ( String endpointUri ) { Endpoint endpoint = null ; if ( isUseEndpointCache ( ) ) { synchronized ( endpointCache ) { endpoint = endpointCache . get ( endpointUri ) ; if ( endpoint == null ) { endpoint = context . getEndpoint ( endpointUri ) ; if ( endpoint != null ) { endpointCache . put ( endpointUri , endpoint ) ; } } } } else { endpoint = context . getEndpoint ( endpointUri ) ; } if ( endpoint == null ) { throw new NoSuchEndpointException ( endpointUri ) ; } return endpoint ; } protected Endpoint < E > getMandatoryDefaultEndpoint ( ) { Endpoint < E > answer = getDefaultEndpoint ( ) ; ObjectHelper . notNull ( answer , "defaultEndpoint" ) ; return answer ; } protected void doStart ( ) throws Exception { producerCache . start ( ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; endpointCache . clear ( ) ; } protected Object extractResultBody ( E result ) { return extractResultBody ( result , null ) ; } protected Object extractResultBody ( E result , ExchangePattern pattern ) { Object answer = null ; if ( result != null ) { boolean notOut = pattern != null && ! pattern . isOutCapable ( ) ; boolean hasOut = result . getOut ( false ) != null ; if ( hasOut && ! notOut ) { answer = result . getOut ( ) . getBody ( ) ; } else { answer = result . getIn ( ) . getBody ( ) ; } } return answer ; } } 	1
package org . apache . camel . component . file . strategy ; import java . io . File ; public interface FileRenamer { File renameFile ( File file ) ; } 	0
package org . apache . camel . component . mock ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . ValueBuilder ; import static org . apache . camel . builder . ExpressionBuilder . bodyExpression ; import static org . apache . camel . builder . ExpressionBuilder . headerExpression ; public abstract class AssertionClause implements Runnable { private List < Predicate < Exchange > > predicates = new ArrayList < Predicate < Exchange > > ( ) ; public AssertionClause predicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return this ; } public ExpressionClause < AssertionClause > predicate ( ) { ExpressionClause < AssertionClause > clause = new ExpressionClause < AssertionClause > ( this ) ; addPredicate ( clause ) ; return clause ; } public ValueBuilder < Exchange > header ( String name ) { Expression < Exchange > expression = headerExpression ( name ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder body ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder bodyAs ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } public PredicateValueBuilder outBody ( ) { Expression < Exchange > expression = bodyExpression ( ) ; return new PredicateValueBuilder ( expression ) ; } public < T > PredicateValueBuilder outBody ( Class < T > type ) { Expression < Exchange > expression = bodyExpression ( type ) ; return new PredicateValueBuilder ( expression ) ; } protected void applyAssertionOn ( MockEndpoint endpoint , int index , Exchange exchange ) { for ( Predicate < Exchange > predicate : predicates ) { predicate . assertMatches ( endpoint . getEndpointUri ( ) + " " , exchange ) ; } } protected void addPredicate ( Predicate < Exchange > predicate ) { predicates . add ( predicate ) ; } public class PredicateValueBuilder extends ValueBuilder < Exchange > { public PredicateValueBuilder ( Expression < Exchange > expression ) { super ( expression ) ; } protected Predicate < Exchange > onNewPredicate ( Predicate < Exchange > predicate ) { addPredicate ( predicate ) ; return predicate ; } } } 	1
package org . apache . camel . component . jetty ; import java . net . URI ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . component . http . CamelServlet ; import org . apache . camel . component . http . HttpComponent ; import org . apache . camel . component . http . HttpConsumer ; import org . apache . camel . component . http . HttpEndpoint ; import org . apache . camel . component . http . HttpExchange ; import org . mortbay . jetty . Connector ; import org . mortbay . jetty . Server ; import org . mortbay . jetty . client . HttpClient ; import org . mortbay . jetty . nio . SelectChannelConnector ; import org . mortbay . jetty . security . SslSocketConnector ; import org . mortbay . jetty . servlet . Context ; import org . mortbay . jetty . servlet . HashSessionIdManager ; import org . mortbay . jetty . servlet . HashSessionManager ; import org . mortbay . jetty . servlet . ServletHolder ; import org . mortbay . jetty . servlet . SessionHandler ; public class JettyHttpComponent extends HttpComponent { class ConnectorRef { Connector connector ; int refCount ; public ConnectorRef ( Connector connector ) { this . connector = connector ; increment ( ) ; } public int increment ( ) { return ++ refCount ; } public int decrement ( ) { return -- refCount ; } } private CamelServlet camelServlet ; private Server server ; private final HashMap < String , ConnectorRef > connectors = new HashMap < String , ConnectorRef > ( ) ; private HttpClient httpClient ; private String sslKeyPassword ; private String sslPassword ; private String sslKeystore ; private SslSocketConnector sslSocketConnector ; @ Override protected Endpoint < HttpExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { URI httpURL = uri . startsWith ( "jetty:" ) ? new URI ( remaining ) : new URI ( uri ) ; JettyHttpEndpoint result = new JettyHttpEndpoint ( this , uri , httpURL , getHttpConnectionManager ( ) ) ; setProperties ( result , parameters ) ; return result ; } @ Override public void connect ( HttpConsumer consumer ) throws Exception { JettyHttpEndpoint endpoint = ( JettyHttpEndpoint ) consumer . getEndpoint ( ) ; String connectorKey = endpoint . getProtocol ( ) + ":" + endpoint . getPort ( ) ; synchronized ( connectors ) { ConnectorRef connectorRef = connectors . get ( connectorKey ) ; if ( connectorRef == null ) { Connector connector ; if ( "https" . equals ( endpoint . getProtocol ( ) ) ) { connector = getSslSocketConnector ( ) ; } else { connector = new SelectChannelConnector ( ) ; } connector . setPort ( endpoint . getPort ( ) ) ; getServer ( ) . addConnector ( connector ) ; if ( endpoint . isSessionSupport ( ) ) { enableSessionSupport ( ) ; } connector . start ( ) ; connectorRef = new ConnectorRef ( connector ) ; connectors . put ( connectorKey , connectorRef ) ; } else { connectorRef . increment ( ) ; if ( endpoint . isSessionSupport ( ) ) { enableSessionSupport ( ) ; } } } camelServlet . connect ( consumer ) ; } private void enableSessionSupport ( ) throws Exception { Context context = ( Context ) getServer ( ) . getChildHandlerByClass ( Context . class ) ; if ( context . getSessionHandler ( ) == null ) { SessionHandler sessionHandler = new SessionHandler ( ) ; context . setSessionHandler ( sessionHandler ) ; if ( context . isStarted ( ) ) { context . stop ( ) ; context . start ( ) ; } } } @ Override public void disconnect ( HttpConsumer consumer ) throws Exception { camelServlet . disconnect ( consumer ) ; HttpEndpoint endpoint = ( HttpEndpoint ) consumer . getEndpoint ( ) ; String connectorKey = endpoint . getProtocol ( ) + ":" + endpoint . getPort ( ) ; synchronized ( connectors ) { ConnectorRef connectorRef = connectors . get ( connectorKey ) ; if ( connectorRef != null ) { if ( connectorRef . decrement ( ) == 0 ) { getServer ( ) . removeConnector ( connectorRef . connector ) ; connectorRef . connector . stop ( ) ; connectors . remove ( connectorKey ) ; } } } } public Server getServer ( ) throws Exception { if ( server == null ) { server = createServer ( ) ; } return server ; } public void setServer ( Server server ) { this . server = server ; } public String getSslKeyPassword ( ) { return sslKeyPassword ; } public void setSslKeyPassword ( String sslKeyPassword ) { this . sslKeyPassword = sslKeyPassword ; } public String getSslPassword ( ) { return sslPassword ; } public void setSslPassword ( String sslPassword ) { this . sslPassword = sslPassword ; } public void setKeystore ( String sslKeystore ) { this . sslKeystore = sslKeystore ; } public String getKeystore ( ) { return sslKeystore ; } public synchronized SslSocketConnector getSslSocketConnector ( ) { if ( sslSocketConnector == null ) { sslSocketConnector = new SslSocketConnector ( ) ; sslSocketConnector . setPassword ( sslPassword ) ; sslSocketConnector . setKeyPassword ( sslKeyPassword ) ; if ( sslKeystore != null ) { sslSocketConnector . setKeystore ( sslKeystore ) ; } } return sslSocketConnector ; } public void setSslSocketConnector ( SslSocketConnector connector ) { sslSocketConnector = connector ; } protected Server createServer ( ) throws Exception { camelServlet = new CamelContinuationServlet ( ) ; Server server = new Server ( ) ; Context context = new Context ( Context . NO_SECURITY | Context . NO_SESSIONS ) ; context . setContextPath ( "/" ) ; ServletHolder holder = new ServletHolder ( ) ; holder . setServlet ( camelServlet ) ; context . addServlet ( holder , "/*" ) ; server . setHandler ( context ) ; server . start ( ) ; return server ; } @ Override protected void doStop ( ) throws Exception { for ( ConnectorRef connectorRef : connectors . values ( ) ) { connectorRef . connector . stop ( ) ; } connectors . clear ( ) ; if ( server != null ) { server . stop ( ) ; } httpClient . stop ( ) ; super . doStop ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( httpClient == null ) { httpClient = createHttpClient ( ) ; } httpClient . start ( ) ; } protected HttpClient createHttpClient ( ) throws Exception { HttpClient httpClient = new HttpClient ( ) ; httpClient . setConnectorType ( HttpClient . CONNECTOR_SELECT_CHANNEL ) ; httpClient . setMaxConnectionsPerAddress ( 2 ) ; return httpClient ; } public HttpClient getHttpClient ( ) { return httpClient ; } public void setHttpClient ( HttpClient httpClient ) { this . httpClient = httpClient ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . DelegateProcessor ; @ XmlRootElement ( name = "routes" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RoutesType extends OptionalIdentifiedType < RoutesType > implements RouteContainer { @ XmlAttribute private Boolean inheritErrorHandlerFlag ; @ XmlElementRef private List < RouteType > routes = new ArrayList < RouteType > ( ) ; @ XmlElementRef private List < ServiceActivationType > activations = new ArrayList < ServiceActivationType > ( ) ; @ XmlTransient private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlTransient private List < InterceptType > intercepts = new ArrayList < InterceptType > ( ) ; @ XmlTransient private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; @ XmlTransient private CamelContext camelContext ; @ XmlTransient private ErrorHandlerBuilder errorHandlerBuilder ; @ Override public String toString ( ) { return "Routes: " + routes ; } public List < RouteType > getRoutes ( ) { return routes ; } public void setRoutes ( List < RouteType > routes ) { this . routes = routes ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < InterceptType > getIntercepts ( ) { return intercepts ; } public void setIntercepts ( List < InterceptType > intercepts ) { this . intercepts = intercepts ; } public List < ExceptionType > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < ExceptionType > exceptions ) { this . exceptions = exceptions ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public boolean isInheritErrorHandler ( ) { return ProcessorType . isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public RouteType route ( ) { RouteType route = createRoute ( ) ; return route ( route ) ; } public RouteType from ( String uri ) { RouteType route = createRoute ( ) ; route . from ( uri ) ; return route ( route ) ; } public RouteType from ( Endpoint endpoint ) { RouteType route = createRoute ( ) ; route . from ( endpoint ) ; return route ( route ) ; } public RouteType route ( RouteType route ) { route . setCamelContext ( getCamelContext ( ) ) ; route . setInheritErrorHandlerFlag ( getInheritErrorHandlerFlag ( ) ) ; List < InterceptorType > list = getInterceptors ( ) ; for ( InterceptorType interceptorType : list ) { route . addInterceptor ( interceptorType ) ; } List < InterceptType > intercepts = getIntercepts ( ) ; for ( InterceptType intercept : intercepts ) { InterceptType proxy = intercept . createProxy ( ) ; route . addOutput ( proxy ) ; route . pushBlock ( proxy . getProceed ( ) ) ; } route . getOutputs ( ) . addAll ( getExceptions ( ) ) ; getRoutes ( ) . add ( route ) ; return route ; } public RoutesType intercept ( DelegateProcessor interceptor ) { getInterceptors ( ) . add ( new InterceptorRef ( interceptor ) ) ; return this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer . when ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; getExceptions ( ) . add ( answer ) ; return answer ; } protected RouteType createRoute ( ) { RouteType route = new RouteType ( ) ; ErrorHandlerBuilder handler = getErrorHandlerBuilder ( ) ; if ( isInheritErrorHandler ( ) && handler != null ) { route . setErrorHandlerBuilderIfNull ( handler ) ; } return route ; } } 	1
package org . apache . camel . util ; import java . util . Collection ; import org . apache . camel . Service ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class ServiceHelper { private static final transient Log LOG = LogFactory . getLog ( ServiceHelper . class ) ; private ServiceHelper ( ) { } public static void startService ( Object value ) throws Exception { if ( value instanceof Service ) { Service service = ( Service ) value ; service . start ( ) ; } else if ( value instanceof Collection ) { startServices ( ( Collection ) value ) ; } } public static void startServices ( Object ... services ) throws Exception { for ( Object value : services ) { startService ( value ) ; } } public static void startServices ( Collection services ) throws Exception { for ( Object value : services ) { if ( value instanceof Service ) { Service service = ( Service ) value ; service . start ( ) ; } } } public static void stopServices ( Object ... services ) throws Exception { Exception firstException = null ; for ( Object value : services ) { if ( value instanceof Service ) { Service service = ( Service ) value ; try { service . stop ( ) ; } catch ( Exception e ) { LOG . debug ( "Caught exception shutting down: " + e , e ) ; if ( firstException == null ) { firstException = e ; } } } } if ( firstException != null ) { throw firstException ; } } public static void stopService ( Object value ) throws Exception { if ( value instanceof Service ) { Service service = ( Service ) value ; service . stop ( ) ; } else if ( value instanceof Collection ) { stopServices ( ( Collection ) value ) ; } } public static void stopServices ( Collection services ) throws Exception { Exception firstException = null ; for ( Object value : services ) { if ( value instanceof Service ) { Service service = ( Service ) value ; try { service . stop ( ) ; } catch ( Exception e ) { LOG . debug ( "Caught exception shutting down: " + e , e ) ; if ( firstException == null ) { firstException = e ; } } } } if ( firstException != null ) { throw firstException ; } } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . ErrorHandlerSupport ; public abstract class ErrorHandlerBuilderSupport implements ErrorHandlerBuilder { private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; public void addErrorHandlers ( ExceptionType exception ) { exceptions . add ( exception ) ; } protected void configure ( ErrorHandlerSupport handler ) { for ( ExceptionType exception : exceptions ) { handler . addExceptionPolicy ( exception ) ; } } public List < ExceptionType > getExceptions ( ) { return exceptions ; } } 	1
package org . apache . camel . impl ; import java . util . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . RouteContext ; public class DefaultLifecycleStrategy implements LifecycleStrategy { public void onContextStart ( CamelContext context ) { } public void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) { } public void onServiceAdd ( CamelContext context , Service service ) { } public void onRoutesAdd ( Collection < Route > routes ) { } public void onRouteContextCreate ( RouteContext routeContext ) { } } 	0
package org . apache . camel . component . file . strategy ; public class NoOpFileProcessStrategy extends FileProcessStrategySupport { public NoOpFileProcessStrategy ( ) { super ( true ) ; } public NoOpFileProcessStrategy ( boolean isLock ) { super ( isLock ) ; } } 	1
package org . apache . camel . bam . model ; import java . util . Date ; import javax . persistence . Temporal ; import javax . persistence . TemporalType ; import javax . persistence . Transient ; public abstract class TemporalEntity extends EntitySupport { private Date timeStarted ; private Date timeCompleted ; @ Transient public boolean isStarted ( ) { return timeStarted != null ; } @ Transient public boolean isCompleted ( ) { return timeCompleted != null ; } @ Temporal ( TemporalType . TIME ) public Date getTimeStarted ( ) { return timeStarted ; } public void setTimeStarted ( Date timeStarted ) { this . timeStarted = timeStarted ; } @ Temporal ( TemporalType . TIME ) public Date getTimeCompleted ( ) { return timeCompleted ; } public void setTimeCompleted ( Date timeCompleted ) { this . timeCompleted = timeCompleted ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . model . InterceptType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . RoutesType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public abstract class RouteBuilder extends BuilderSupport implements Routes { private AtomicBoolean initialized = new AtomicBoolean ( false ) ; private RoutesType routeCollection = new RoutesType ( ) ; private List < Route > routes = new ArrayList < Route > ( ) ; public RouteBuilder ( ) { this ( null ) ; } public RouteBuilder ( CamelContext context ) { super ( context ) ; } @ Override public String toString ( ) { return routeCollection . toString ( ) ; } public abstract void configure ( ) throws Exception ; public RouteType from ( String uri ) { RouteType answer = routeCollection . from ( uri ) ; configureRoute ( answer ) ; return answer ; } public RouteType from ( Endpoint endpoint ) { RouteType answer = routeCollection . from ( endpoint ) ; configureRoute ( answer ) ; return answer ; } public RouteBuilder errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return this ; } public RouteBuilder inheritErrorHandler ( boolean value ) { routeCollection . setInheritErrorHandlerFlag ( value ) ; return this ; } public RouteBuilder intercept ( DelegateProcessor interceptor ) { routeCollection . intercept ( interceptor ) ; return this ; } public InterceptType intercept ( ) { return routeCollection . intercept ( ) ; } public ChoiceType intercept ( Predicate predicate ) { return routeCollection . intercept ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { return routeCollection . exception ( exceptionType ) ; } public CamelContext getContext ( ) { CamelContext context = super . getContext ( ) ; if ( context == null ) { context = createContainer ( ) ; setContext ( context ) ; } return context ; } public List < Route > getRouteList ( ) throws Exception { checkInitialized ( ) ; return routes ; } @ Override public void setInheritErrorHandler ( boolean inheritErrorHandler ) { super . setInheritErrorHandler ( inheritErrorHandler ) ; routeCollection . setInheritErrorHandlerFlag ( inheritErrorHandler ) ; } @ Override public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { super . setErrorHandlerBuilder ( errorHandlerBuilder ) ; routeCollection . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } protected void checkInitialized ( ) throws Exception { if ( initialized . compareAndSet ( false , true ) ) { configure ( ) ; populateRoutes ( routes ) ; } } protected void populateRoutes ( List < Route > routes ) throws Exception { CamelContext camelContext = getContext ( ) ; if ( camelContext == null ) { throw new IllegalArgumentException ( "No CamelContext has been injected!" ) ; } routeCollection . setCamelContext ( camelContext ) ; camelContext . addRouteDefinitions ( routeCollection . getRoutes ( ) ) ; } public void setRouteCollection ( RoutesType routeCollection ) { this . routeCollection = routeCollection ; } public RoutesType getRouteCollection ( ) { return this . routeCollection ; } public void noStreamCaching ( ) { StreamCachingInterceptor . noStreamCaching ( routeCollection . getInterceptors ( ) ) ; } public void streamCaching ( ) { routeCollection . intercept ( new StreamCachingInterceptor ( ) ) ; } protected CamelContext createContainer ( ) { return new DefaultCamelContext ( ) ; } protected void configureRoute ( RouteType route ) { route . setGroup ( getClass ( ) . getName ( ) ) ; } } 	1
package org . apache . camel . language . groovy ; import groovy . lang . Closure ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ExpressionSupport ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FilterType ; import org . apache . camel . model . ProcessorType ; public final class CamelGroovyMethods { private CamelGroovyMethods ( ) { } public static FilterType filter ( ProcessorType self , Closure filter ) { return self . filter ( toExpression ( filter ) ) ; } public static ChoiceType when ( ChoiceType self , Closure filter ) { return self . when ( toExpression ( filter ) ) ; } public static ExpressionSupport toExpression ( final Closure filter ) { return new ExpressionSupport < Exchange > ( ) { protected String assertionFailureMessage ( Exchange exchange ) { return filter . toString ( ) ; } public Object evaluate ( Exchange exchange ) { return filter . call ( exchange ) ; } @ Override public String toString ( ) { return "Groovy[" + filter + "]" ; } } ; } } 	0
package org . apache . camel . util ; import java . beans . PropertyEditor ; import java . beans . PropertyEditorManager ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Set ; import org . apache . camel . TypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class IntrospectionSupport { private static final transient Log LOG = LogFactory . getLog ( IntrospectionSupport . class ) ; private IntrospectionSupport ( ) { } public static boolean getProperties ( Object target , Map props , String optionPrefix ) { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } if ( optionPrefix == null ) { optionPrefix = "" ; } Class clazz = target . getClass ( ) ; Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { String name = method . getName ( ) ; Class type = method . getReturnType ( ) ; Class params [ ] = method . getParameterTypes ( ) ; if ( name . startsWith ( "get" ) && params . length == 0 && type != null && isSettableType ( type ) ) { try { Object value = method . invoke ( target ) ; if ( value == null ) { continue ; } String strValue = convertToString ( value , type ) ; if ( strValue == null ) { continue ; } name = name . substring ( 3 , 4 ) . toLowerCase ( ) + name . substring ( 4 ) ; props . put ( optionPrefix + name , strValue ) ; rc = true ; } catch ( Throwable ignore ) { } } } return rc ; } public static Object getProperty ( Object target , String prop ) throws SecurityException , NoSuchMethodException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( prop == null ) { throw new IllegalArgumentException ( "prop was null." ) ; } prop = prop . substring ( 0 , 1 ) . toUpperCase ( ) + prop . substring ( 1 ) ; Class clazz = target . getClass ( ) ; Method method = getPropertyGetter ( clazz , prop ) ; return method . invoke ( target ) ; } public static Method getPropertyGetter ( Class type , String propertyName ) throws NoSuchMethodException { Method method = type . getMethod ( "get" + ObjectHelper . capitalize ( propertyName ) ) ; return method ; } public static boolean setProperties ( Object target , Map props , String optionPrefix ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; if ( setProperty ( target , name , value ) ) { iter . remove ( ) ; rc = true ; } } } return rc ; } public static Map extractProperties ( Map props , String optionPrefix ) { if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } HashMap rc = new HashMap ( props . size ( ) ) ; for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; rc . put ( name , value ) ; iter . remove ( ) ; } } return rc ; } public static boolean setProperties ( TypeConverter typeConverter , Object target , Map props ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( setProperty ( typeConverter , target , ( String ) entry . getKey ( ) , entry . getValue ( ) ) ) { iter . remove ( ) ; rc = true ; } } return rc ; } public static boolean setProperties ( Object target , Map props ) throws Exception { return setProperties ( null , target , props ) ; } public static boolean setProperty ( TypeConverter typeConverter , Object target , String name , Object value ) throws Exception { try { Class clazz = target . getClass ( ) ; Method setter = findSetterMethod ( typeConverter , clazz , name , value ) ; if ( setter == null ) { return false ; } if ( value == null || value . getClass ( ) == setter . getParameterTypes ( ) [ 0 ] ) { setter . invoke ( target , value ) ; } else { Object convertedValue = convert ( typeConverter , setter . getParameterTypes ( ) [ 0 ] , value ) ; setter . invoke ( target , convertedValue ) ; } return true ; } catch ( InvocationTargetException e ) { Throwable throwable = e . getTargetException ( ) ; if ( throwable instanceof Exception ) { Exception exception = ( Exception ) throwable ; throw exception ; } else { Error error = ( Error ) throwable ; throw error ; } } } public static boolean setProperty ( Object target , String name , Object value ) throws Exception { return setProperty ( null , target , name , value ) ; } private static Object convert ( TypeConverter typeConverter , Class type , Object value ) throws URISyntaxException { if ( typeConverter != null ) { Object answer = typeConverter . convertTo ( type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Could not convert \"" + value + "\" to " + type . getName ( ) ) ; } return answer ; } PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setAsText ( value . toString ( ) ) ; return editor . getValue ( ) ; } if ( type == URI . class ) { return new URI ( value . toString ( ) ) ; } return null ; } private static String convertToString ( Object value , Class type ) throws URISyntaxException { PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setValue ( value ) ; return editor . getAsText ( ) ; } if ( type == URI . class ) { return value . toString ( ) ; } return null ; } private static Method findSetterMethod ( TypeConverter typeConverter , Class clazz , String name , Object value ) { name = "set" + ObjectHelper . capitalize ( name ) ; while ( clazz != Object . class ) { Method [ ] methods = clazz . getMethods ( ) ; for ( Method method : methods ) { Class params [ ] = method . getParameterTypes ( ) ; if ( method . getName ( ) . equals ( name ) && params . length == 1 ) { Class paramType = params [ 0 ] ; if ( typeConverter != null || isSettableType ( paramType ) || paramType . isInstance ( value ) ) { return method ; } } } clazz = clazz . getSuperclass ( ) ; } return null ; } private static boolean isSettableType ( Class clazz ) { if ( PropertyEditorManager . findEditor ( clazz ) != null ) { return true ; } if ( clazz == URI . class ) { return true ; } if ( clazz == Boolean . class ) { return true ; } return false ; } public static String toString ( Object target ) { return toString ( target , Object . class ) ; } public static String toString ( Object target , Class stopClass ) { LinkedHashMap map = new LinkedHashMap ( ) ; addFields ( target , target . getClass ( ) , stopClass , map ) ; StringBuffer buffer = new StringBuffer ( simpleName ( target . getClass ( ) ) ) ; buffer . append ( " {" ) ; Set entrySet = map . entrySet ( ) ; boolean first = true ; for ( Iterator iter = entrySet . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( first ) { first = false ; } else { buffer . append ( ", " ) ; } buffer . append ( entry . getKey ( ) ) ; buffer . append ( " = " ) ; appendToString ( buffer , entry . getValue ( ) ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } protected static void appendToString ( StringBuffer buffer , Object value ) { buffer . append ( value ) ; } public static String simpleName ( Class clazz ) { String name = clazz . getName ( ) ; int p = name . lastIndexOf ( "." ) ; if ( p >= 0 ) { name = name . substring ( p + 1 ) ; } return name ; } private static void addFields ( Object target , Class startClass , Class stopClass , LinkedHashMap map ) { if ( startClass != stopClass ) { addFields ( target , startClass . getSuperclass ( ) , stopClass , map ) ; } Field [ ] fields = startClass . getDeclaredFields ( ) ; for ( Field field : fields ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) || Modifier . isTransient ( field . getModifiers ( ) ) || Modifier . isPrivate ( field . getModifiers ( ) ) ) { continue ; } try { field . setAccessible ( true ) ; Object o = field . get ( target ) ; if ( o != null && o . getClass ( ) . isArray ( ) ) { try { o = Arrays . asList ( ( Object [ ] ) o ) ; } catch ( Throwable e ) { } } map . put ( field . getName ( ) , o ) ; } catch ( Throwable e ) { LOG . debug ( "Error adding fields" , e ) ; } } } } 	1
package org . apache . camel . component . file . remote ; import java . net . URI ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultComponent ; public class RemoteFileComponent extends DefaultComponent < RemoteFileExchange > { private RemoteFileConfiguration configuration ; public RemoteFileComponent ( ) { this . configuration = new RemoteFileConfiguration ( ) ; } public RemoteFileComponent ( RemoteFileConfiguration configuration ) { this . configuration = configuration ; } public RemoteFileComponent ( CamelContext context ) { super ( context ) ; this . configuration = new RemoteFileConfiguration ( ) ; } public String toString ( ) { return "RemoteFileComponent" ; } public static RemoteFileComponent remoteFileComponent ( ) { return new RemoteFileComponent ( ) ; } protected RemoteFileEndpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { RemoteFileConfiguration config = getConfiguration ( ) . copy ( ) ; config . configure ( new URI ( uri ) ) ; final RemoteFileEndpoint endpoint ; if ( "ftp" . equals ( config . getProtocol ( ) ) ) { endpoint = new FtpEndpoint ( uri , this , config ) ; } else if ( "sftp" . equals ( config . getProtocol ( ) ) ) { endpoint = new SftpEndpoint ( uri , this , config ) ; } else { throw new RuntimeCamelException ( "Unsupported protocol: " + config . getProtocol ( ) ) ; } setProperties ( endpoint . getConfiguration ( ) , parameters ) ; return endpoint ; } public RemoteFileConfiguration getConfiguration ( ) { return configuration ; } public void setConfiguration ( RemoteFileConfiguration configuration ) { this . configuration = configuration ; } } 	0
package org . apache . camel . view ; import java . io . PrintWriter ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; public class RouteDotGenerator extends GraphGeneratorSupport { public RouteDotGenerator ( String dir ) { super ( dir , ".dot" ) ; } protected void printRoutes ( PrintWriter writer , Map < String , List < RouteType > > map ) { Set < Map . Entry < String , List < RouteType > > > entries = map . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { String group = entry . getKey ( ) ; printRoutes ( writer , group , entry . getValue ( ) ) ; } } protected void printRoutes ( PrintWriter writer , String group , List < RouteType > routes ) { if ( group != null ) { writer . println ( "subgraph cluster_" + ( clusterCounter ++ ) + " {" ) ; writer . println ( "label = \"" + group + "\";" ) ; writer . println ( "color = grey;" ) ; writer . println ( "style = \"dashed\";" ) ; writer . println ( "URL = \"" + group + ".html\";" ) ; writer . println ( ) ; } for ( RouteType route : routes ) { List < FromType > inputs = route . getInputs ( ) ; for ( FromType input : inputs ) { printRoute ( writer , route , input ) ; } writer . println ( ) ; } if ( group != null ) { writer . println ( "}" ) ; writer . println ( ) ; } } protected String escapeNodeId ( String text ) { return text . replace ( '.' , '_' ) . replace ( "$" , "_" ) ; } protected void printRoute ( PrintWriter writer , final RouteType route , FromType input ) { NodeData nodeData = getNodeData ( input ) ; printNode ( writer , nodeData ) ; NodeData from = nodeData ; for ( ProcessorType output : route . getOutputs ( ) ) { NodeData newData = printNode ( writer , from , output ) ; from = newData ; } } protected NodeData printNode ( PrintWriter writer , NodeData fromData , ProcessorType node ) { if ( node instanceof MulticastType ) { List < ProcessorType > outputs = node . getOutputs ( ) ; for ( ProcessorType output : outputs ) { printNode ( writer , fromData , output ) ; } return fromData ; } NodeData toData = getNodeData ( node ) ; printNode ( writer , toData ) ; if ( fromData != null ) { writer . print ( fromData . id ) ; writer . print ( " -> " ) ; writer . print ( toData . id ) ; writer . println ( " [" ) ; String label = fromData . edgeLabel ; if ( isNotNullAndNonEmpty ( label ) ) { writer . println ( "label = \"" + label + "\"" ) ; } writer . println ( "];" ) ; } List < ProcessorType > outputs = toData . outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { NodeData newData = printNode ( writer , toData , output ) ; if ( ! isMulticastNode ( node ) ) { toData = newData ; } } } return toData ; } protected void printNode ( PrintWriter writer , NodeData data ) { if ( ! data . nodeWritten ) { data . nodeWritten = true ; writer . println ( ) ; writer . print ( data . id ) ; writer . println ( " [" ) ; writer . println ( "label = \"" + data . label + "\"" ) ; writer . println ( "tooltip = \"" + data . tooltop + "\"" ) ; if ( data . url != null ) { writer . println ( "URL = \"" + data . url + "\"" ) ; } String image = data . image ; if ( image != null ) { writer . println ( "shapefile = \"" + image + "\"" ) ; writer . println ( "peripheries=0" ) ; } String shape = data . shape ; if ( shape == null && image != null ) { shape = "custom" ; } if ( shape != null ) { writer . println ( "shape = \"" + shape + "\"" ) ; } writer . println ( "];" ) ; writer . println ( ) ; } } protected void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) { writer . println ( "digraph CamelRoutes {" ) ; writer . println ( ) ; writer . println ( "node [style = \"rounded,filled\", fillcolor = yellow, " + "fontname=\"Helvetica-Oblique\"];" ) ; writer . println ( ) ; printRoutes ( writer , map ) ; writer . println ( "}" ) ; } } 	1
package org . apache . camel . component . file . remote ; import com . jcraft . jsch . ChannelSftp ; import com . jcraft . jsch . JSch ; import com . jcraft . jsch . JSchException ; import com . jcraft . jsch . Session ; import com . jcraft . jsch . UserInfo ; import org . apache . camel . Processor ; public class SftpEndpoint extends RemoteFileEndpoint < RemoteFileExchange > { public SftpEndpoint ( String uri , RemoteFileComponent remoteFileComponent , RemoteFileConfiguration configuration ) { super ( uri , remoteFileComponent , configuration ) ; } public SftpEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public SftpProducer createProducer ( ) throws Exception { return new SftpProducer ( this , createSession ( ) ) ; } public SftpConsumer createConsumer ( Processor processor ) throws Exception { final SftpConsumer consumer = new SftpConsumer ( this , processor , createSession ( ) ) ; configureConsumer ( consumer ) ; return consumer ; } protected Session createSession ( ) throws JSchException { final JSch jsch = new JSch ( ) ; final Session session = jsch . getSession ( getConfiguration ( ) . getUsername ( ) , getConfiguration ( ) . getHost ( ) ) ; session . setUserInfo ( new UserInfo ( ) { public String getPassphrase ( ) { return null ; } public String getPassword ( ) { return getConfiguration ( ) . getPassword ( ) ; } public boolean promptPassword ( String string ) { return true ; } public boolean promptPassphrase ( String string ) { return true ; } public boolean promptYesNo ( String string ) { return true ; } public void showMessage ( String string ) { } } ) ; return session ; } public ChannelSftp createChannelSftp ( Session session ) throws JSchException { final ChannelSftp channel = ( ChannelSftp ) session . openChannel ( "sftp" ) ; return channel ; } } 	0
package org . apache . camel . processor ; import java . io . Serializable ; import java . util . Random ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RedeliveryPolicy implements Cloneable , Serializable { protected static transient Random randomNumberGenerator ; private static final transient Log LOG = LogFactory . getLog ( RedeliveryPolicy . class ) ; protected int maximumRedeliveries = 6 ; protected long initialRedeliveryDelay = 1000L ; protected long maximumRedeliveryDelay = 60 * 1000L ; protected double backOffMultiplier = 2 ; protected boolean useExponentialBackOff ; protected double collisionAvoidanceFactor = 0.15d ; protected boolean useCollisionAvoidance ; public RedeliveryPolicy ( ) { } @ Override public String toString ( ) { return "RedeliveryPolicy[maximumRedeliveries=" + maximumRedeliveries + "]" ; } public RedeliveryPolicy copy ( ) { try { return ( RedeliveryPolicy ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( "Could not clone: " + e , e ) ; } } public boolean shouldRedeliver ( int redeliveryCounter ) { if ( getMaximumRedeliveries ( ) < 0 ) { return true ; } return redeliveryCounter < getMaximumRedeliveries ( ) ; } public long sleep ( long redeliveryDelay ) { redeliveryDelay = getRedeliveryDelay ( redeliveryDelay ) ; if ( redeliveryDelay > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + redeliveryDelay + " millis until attempting redelivery" ) ; } try { Thread . sleep ( redeliveryDelay ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Thread interrupted: " + e , e ) ; } } } return redeliveryDelay ; } public long getRedeliveryDelay ( long previousDelay ) { long redeliveryDelay ; if ( previousDelay == 0 ) { redeliveryDelay = initialRedeliveryDelay ; } else if ( useExponentialBackOff && backOffMultiplier > 1 ) { redeliveryDelay = Math . round ( backOffMultiplier * previousDelay ) ; } else { redeliveryDelay = previousDelay ; } if ( useCollisionAvoidance ) { Random random = getRandomNumberGenerator ( ) ; double variance = ( random . nextBoolean ( ) ? collisionAvoidanceFactor : - collisionAvoidanceFactor ) * random . nextDouble ( ) ; redeliveryDelay += redeliveryDelay * variance ; } if ( maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay ) { redeliveryDelay = maximumRedeliveryDelay ; } return redeliveryDelay ; } public RedeliveryPolicy maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicy initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicy useCollisionAvoidance ( ) { setUseCollisionAvoidance ( true ) ; return this ; } public RedeliveryPolicy useExponentialBackOff ( ) { setUseExponentialBackOff ( true ) ; return this ; } public RedeliveryPolicy backOffMultiplier ( double multiplier ) { useExponentialBackOff ( ) ; setBackOffMultiplier ( multiplier ) ; return this ; } public RedeliveryPolicy collisionAvoidancePercent ( double collisionAvoidancePercent ) { useCollisionAvoidance ( ) ; setCollisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public RedeliveryPolicy maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { setMaximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public short getCollisionAvoidancePercent ( ) { return ( short ) Math . round ( collisionAvoidanceFactor * 100 ) ; } public void setCollisionAvoidancePercent ( double collisionAvoidancePercent ) { this . collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d ; } public double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public int getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( int maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public long getMaximumRedeliveryDelay ( ) { return maximumRedeliveryDelay ; } public void setMaximumRedeliveryDelay ( long maximumRedeliveryDelay ) { this . maximumRedeliveryDelay = maximumRedeliveryDelay ; } public boolean isUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public boolean isUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } protected static synchronized Random getRandomNumberGenerator ( ) { if ( randomNumberGenerator == null ) { randomNumberGenerator = new Random ( ) ; } return randomNumberGenerator ; } } 	1
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class DefaultAnnotationExpressionFactory implements AnnotationExpressionFactory { public Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) { String languageName = languageAnnotation . language ( ) ; if ( languageName == null ) { throw new IllegalArgumentException ( "Cannot determine the language from the annotation: " + annotation ) ; } Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Cannot find the language: " + languageName + " on the classpath" ) ; } String expression = getExpressionFromAnnotation ( annotation ) ; return language . createExpression ( expression ) ; } protected String getExpressionFromAnnotation ( Annotation annotation ) { try { Method method = annotation . getClass ( ) . getMethod ( "value" ) ; Object value = ObjectHelper . invokeMethod ( method , annotation ) ; if ( value == null ) { throw new IllegalArgumentException ( "Cannot determine the expression from the annotation: " + annotation ) ; } return value . toString ( ) ; } catch ( NoSuchMethodException e ) { throw new IllegalArgumentException ( "Cannot determine the expression of the annotation: " + annotation + " as it does not have an value() method" ) ; } } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RecipientList extends ServiceSupport implements Processor { private final Expression < Exchange > expression ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RecipientList ( Expression < Exchange > expression ) { notNull ( expression , "expression" ) ; this . expression = expression ; } @ Override public String toString ( ) { return "RecipientList[" + expression + "]" ; } public void process ( Exchange exchange ) throws Exception { Object receipientList = expression . evaluate ( exchange ) ; Iterator iter = ObjectConverter . iterator ( receipientList ) ; List < Processor > processors = new ArrayList < Processor > ( ) ; while ( iter . hasNext ( ) ) { Object recipient = iter . next ( ) ; Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , recipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; processors . add ( producer ) ; } MulticastProcessor mp = new MulticastProcessor ( processors , new UseLatestAggregationStrategy ( ) ) ; mp . process ( exchange ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } } 	1
package org . apache . camel . processor . loadbalancer ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; public class StickyLoadBalancer extends QueueLoadBalancer { private Expression < Exchange > correlationExpression ; private QueueLoadBalancer loadBalancer ; private int numberOfHashGroups = 64 * 1024 ; private final Map < Object , Processor > stickyMap = new HashMap < Object , Processor > ( ) ; public StickyLoadBalancer ( ) { this . loadBalancer = new RoundRobinLoadBalancer ( ) ; } public StickyLoadBalancer ( Expression < Exchange > correlationExpression ) { this ( correlationExpression , new RoundRobinLoadBalancer ( ) ) ; } public StickyLoadBalancer ( Expression < Exchange > correlationExpression , QueueLoadBalancer loadBalancer ) { this . correlationExpression = correlationExpression ; this . loadBalancer = loadBalancer ; } public void setCorrelationExpression ( Expression < Exchange > correlationExpression ) { this . correlationExpression = correlationExpression ; } public void setLoadBalancer ( QueueLoadBalancer loadBalancer ) { this . loadBalancer = loadBalancer ; } protected synchronized Processor chooseProcessor ( List < Processor > processors , Exchange exchange ) { Object value = correlationExpression . evaluate ( exchange ) ; Object key = getStickyKey ( value ) ; Processor processor ; synchronized ( stickyMap ) { processor = stickyMap . get ( key ) ; if ( processor == null ) { processor = loadBalancer . chooseProcessor ( processors , exchange ) ; stickyMap . put ( key , processor ) ; } } return processor ; } @ Override public void removeProcessor ( Processor processor ) { synchronized ( stickyMap ) { Iterator < Map . Entry < Object , Processor > > iter = stickyMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < Object , Processor > entry = iter . next ( ) ; if ( processor . equals ( entry . getValue ( ) ) ) { iter . remove ( ) ; } } } super . removeProcessor ( processor ) ; } public int getNumberOfHashGroups ( ) { return numberOfHashGroups ; } public void setNumberOfHashGroups ( int numberOfHashGroups ) { this . numberOfHashGroups = numberOfHashGroups ; } protected Object getStickyKey ( Object value ) { int hashCode = 37 ; if ( value != null ) { hashCode = value . hashCode ( ) ; } if ( numberOfHashGroups > 0 ) { hashCode = hashCode % numberOfHashGroups ; } return hashCode ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "when" ) public class WhenType < Type extends ProcessorType > extends ExpressionNode { public WhenType ( ) { } public WhenType ( Predicate predicate ) { super ( predicate ) ; } public WhenType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "When[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "when" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . view ; import java . io . PrintWriter ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; public class XmlGraphGenerator extends GraphGeneratorSupport { private boolean addUrl = true ; public XmlGraphGenerator ( String dir ) { super ( dir , ".xml" ) ; } protected void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) { writer . println ( "<?xml version='1.0' encoding='UTF-8'?>" ) ; writer . println ( "<Graph>" ) ; writer . println ( ) ; if ( map . size ( ) > 0 ) { writer . println ( "<Node id='root' name='Camel Routes' description='Collection of Camel Routes' nodeType='root'/>" ) ; } printRoutes ( writer , map ) ; writer . println ( ) ; writer . println ( "</Graph>" ) ; } protected void printRoutes ( PrintWriter writer , Map < String , List < RouteType > > map ) { Set < Map . Entry < String , List < RouteType > > > entries = map . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { String group = entry . getKey ( ) ; printRoutes ( writer , group , entry . getValue ( ) ) ; } } protected void printRoutes ( PrintWriter writer , String group , List < RouteType > routes ) { group = encode ( group ) ; if ( group != null ) { int idx = group . lastIndexOf ( '.' ) ; String name = group ; if ( idx > 0 && idx < group . length ( ) - 1 ) { name = group . substring ( idx + 1 ) ; } writer . println ( "<Node id='" + group + "' name='" + name + "' description='" + group + "' nodeType='group'/>" ) ; writer . println ( "<Edge fromID='root' toID='" + group + "'/>" ) ; } for ( RouteType route : routes ) { List < FromType > inputs = route . getInputs ( ) ; boolean first = true ; for ( FromType input : inputs ) { NodeData nodeData = getNodeData ( input ) ; if ( first ) { first = false ; if ( group != null ) { writer . println ( "<Edge fromID='" + group + "' toID='" + encode ( nodeData . id ) + "'/>" ) ; } } printRoute ( writer , route , nodeData ) ; } writer . println ( ) ; } } protected void printRoute ( PrintWriter writer , final RouteType route , NodeData nodeData ) { printNode ( writer , nodeData ) ; NodeData from = nodeData ; for ( ProcessorType output : route . getOutputs ( ) ) { NodeData newData = printNode ( writer , from , output ) ; from = newData ; } } protected NodeData printNode ( PrintWriter writer , NodeData fromData , ProcessorType node ) { if ( node instanceof MulticastType ) { List < ProcessorType > outputs = node . getOutputs ( ) ; for ( ProcessorType output : outputs ) { printNode ( writer , fromData , output ) ; } return fromData ; } NodeData toData = getNodeData ( node ) ; printNode ( writer , toData ) ; if ( fromData != null ) { writer . print ( "<Edge fromID=\"" ) ; writer . print ( encode ( fromData . id ) ) ; writer . print ( "\" toID=\"" ) ; writer . print ( encode ( toData . id ) ) ; String association = toData . edgeLabel ; if ( isNullOrBlank ( association ) ) { writer . print ( "\" association=\"" ) ; writer . print ( encode ( association ) ) ; } writer . println ( "\"/>" ) ; } List < ProcessorType > outputs = toData . outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { NodeData newData = printNode ( writer , toData , output ) ; if ( ! isMulticastNode ( node ) ) { toData = newData ; } } } return toData ; } protected void printNode ( PrintWriter writer , NodeData data ) { if ( ! data . nodeWritten ) { data . nodeWritten = true ; writer . println ( ) ; writer . print ( "<Node id=\"" ) ; writer . print ( encode ( data . id ) ) ; writer . print ( "\" name=\"" ) ; String name = data . label ; if ( isNullOrBlank ( name ) ) { name = data . tooltop ; } writer . print ( encode ( name ) ) ; writer . print ( "\" nodeType=\"" ) ; String nodeType = data . image ; if ( isNullOrBlank ( nodeType ) ) { nodeType = data . shape ; if ( isNullOrBlank ( nodeType ) ) { nodeType = "node" ; } } writer . print ( encode ( nodeType ) ) ; writer . print ( "\" description=\"" ) ; writer . print ( encode ( data . tooltop ) ) ; if ( addUrl ) { writer . print ( "\" url=\"" ) ; writer . print ( encode ( data . url ) ) ; } writer . println ( "\"/>" ) ; } } protected String encode ( String text ) { if ( text == null ) { return "" ; } return text . replaceAll ( "\"" , "&quot;" ) . replaceAll ( "<" , "&lt;" ) . replaceAll ( ">" , "&gt;" ) . replaceAll ( "&" , "&amp;" ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . SetHeaderProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setHeader" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetHeaderType extends ExpressionNode { @ XmlAttribute private String headerName ; @ XmlAttribute ( required = false ) private String value ; public SetHeaderType ( ) { } public SetHeaderType ( String headerName , ExpressionType expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , Expression expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetHeaderType ( String headerName , String value ) { super ( ExpressionBuilder . constantExpression ( value ) ) ; setHeaderName ( headerName ) ; } @ Override public String toString ( ) { return "SetHeader[ " + getHeaderName ( ) + ", " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setHeader" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr ; if ( getValue ( ) == null ) { expr = getExpression ( ) . createExpression ( routeContext ) ; } else { expr = ExpressionBuilder . constantExpression ( getValue ( ) ) ; } Processor childProcessor = routeContext . createProcessor ( this ) ; return new SetHeaderProcessor ( getHeaderName ( ) , expr , childProcessor ) ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return headerName ; } public void setValue ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } } 	1
package org . apache . camel . impl . converter ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . TypeConverter ; import org . apache . camel . processor . DelegateProcessor ; public class AsyncProcessorTypeConverter implements TypeConverter { private static final class ProcessorToAsyncProcessorBridge extends DelegateProcessor implements AsyncProcessor { private ProcessorToAsyncProcessorBridge ( Processor processor ) { super ( processor ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { try { processor . process ( exchange ) ; } catch ( Throwable e ) { exchange . setException ( e ) ; } callback . done ( true ) ; return true ; } } public < T > T convertTo ( Class < T > toType , Object value ) { if ( value != null ) { if ( toType . equals ( AsyncProcessor . class ) ) { if ( value instanceof AsyncProcessor ) { return toType . cast ( value ) ; } else if ( value instanceof Processor ) { final Processor processor = ( Processor ) value ; return toType . cast ( new ProcessorToAsyncProcessorBridge ( processor ) ) ; } } } return null ; } public static AsyncProcessor convert ( Processor value ) { if ( value instanceof AsyncProcessor ) { return ( AsyncProcessor ) value ; } return new ProcessorToAsyncProcessorBridge ( value ) ; } } 	0
package org . apache . camel . converter . stream ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import javax . xml . transform . TransformerException ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . converter . jaxp . XmlConverter ; @ Converter public class StreamCacheConverter { private XmlConverter converter = new XmlConverter ( ) ; @ Converter public StreamCache convertToStreamCache ( StreamSource source ) throws TransformerException { return new StreamSourceCache ( converter . toString ( source ) ) ; } @ Converter public StreamCache convertToStreamCache ( InputStream stream ) throws IOException { return new InputStreamCache ( IOConverter . toBytes ( stream ) ) ; } private class StreamSourceCache extends StringSource implements StreamCache { private static final long serialVersionUID = 4147248494104812945L ; public StreamSourceCache ( String text ) { super ( text ) ; } } private class InputStreamCache extends ByteArrayInputStream implements StreamCache { public InputStreamCache ( byte [ ] data ) { super ( data ) ; } } } 	1
package org . apache . camel . component . cxf . spring ; import org . apache . cxf . frontend . AbstractWSDLBasedEndpointFactory ; import org . apache . cxf . service . factory . ReflectionServiceFactoryBean ; public class CxfEndpointBean extends AbstractWSDLBasedEndpointFactory { public CxfEndpointBean ( ) { setServiceFactory ( new ReflectionServiceFactoryBean ( ) ) ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . ObjectInput ; import java . io . ObjectInputStream ; import java . io . ObjectOutput ; import java . io . ObjectOutputStream ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Reader ; import java . io . StringReader ; import java . io . Writer ; import java . net . URL ; import java . util . Properties ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Converter ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class IOConverter { private static final transient Log LOG = LogFactory . getLog ( IOConverter . class ) ; private IOConverter ( ) { } @ Converter public static InputStream toInputStream ( URL url ) throws IOException { return url . openStream ( ) ; } @ Converter public static InputStream toInputStream ( File file ) throws FileNotFoundException { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } @ Converter public static BufferedReader toReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new FileReader ( file ) ) ; } @ Converter public static File toFile ( String name ) throws FileNotFoundException { return new File ( name ) ; } @ Converter public static OutputStream toOutputStream ( File file ) throws FileNotFoundException { return new BufferedOutputStream ( new FileOutputStream ( file ) ) ; } @ Converter public static BufferedWriter toWriter ( File file ) throws IOException { return new BufferedWriter ( new FileWriter ( file ) ) ; } @ Converter public static Reader toReader ( InputStream in ) throws FileNotFoundException { return new InputStreamReader ( in ) ; } @ Converter public static Writer toWriter ( OutputStream out ) throws FileNotFoundException { return new OutputStreamWriter ( out ) ; } @ Converter public static StringReader toReader ( String text ) { return new StringReader ( text ) ; } @ Converter public static InputStream toInputStream ( String text ) { return toInputStream ( text . getBytes ( ) ) ; } @ Converter public static InputStream toInputStream ( BufferedReader buffer ) throws IOException { return toInputStream ( toString ( buffer ) ) ; } @ Converter public static InputStream toInputStrean ( DOMSource source ) throws TransformerException , IOException { ByteArrayInputStream bais = new ByteArrayInputStream ( toString ( source ) . getBytes ( ) ) ; return bais ; } @ Converter public static String toString ( byte [ ] data ) { return new String ( data ) ; } @ Converter public static String toString ( File file ) throws IOException { return toString ( toReader ( file ) ) ; } @ Converter public static String toString ( URL url ) throws IOException { return toString ( toInputStream ( url ) ) ; } @ Converter public static String toString ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toString ( ( BufferedReader ) reader ) ; } else { return toString ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } try { CollectionStringBuffer builder = new CollectionStringBuffer ( "\n" ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { return builder . toString ( ) ; } builder . append ( line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } } @ Converter public static String toString ( InputStream in ) throws IOException { return toString ( toReader ( in ) ) ; } public static String toString ( Source source ) throws TransformerException , IOException { return toString ( source , null ) ; } public static String toString ( Source source , Properties props ) throws TransformerException , IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; StreamResult sr = new StreamResult ( bos ) ; Transformer trans = TransformerFactory . newInstance ( ) . newTransformer ( ) ; if ( props == null ) { props = new Properties ( ) ; props . put ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; } trans . setOutputProperties ( props ) ; trans . transform ( source , sr ) ; bos . close ( ) ; return bos . toString ( ) ; } @ Converter public static InputStream toInputStream ( byte [ ] data ) { return new ByteArrayInputStream ( data ) ; } @ Converter public static ObjectOutput toObjectOutput ( OutputStream stream ) throws IOException { if ( stream instanceof ObjectOutput ) { return ( ObjectOutput ) stream ; } else { return new ObjectOutputStream ( stream ) ; } } @ Converter public static ObjectInput toObjectInput ( InputStream stream ) throws IOException { if ( stream instanceof ObjectInput ) { return ( ObjectInput ) stream ; } else { return new ObjectInputStream ( stream ) ; } } @ Converter public static byte [ ] toBytes ( InputStream stream ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; copy ( stream , bos ) ; return bos . toByteArray ( ) ; } protected static void copy ( InputStream stream , ByteArrayOutputStream bos ) throws IOException { byte [ ] data = new byte [ 4096 ] ; int read = stream . read ( data ) ; while ( read != - 1 ) { bos . write ( data , 0 , read ) ; read = stream . read ( data ) ; } bos . flush ( ) ; } } 	1
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import java . util . concurrent . CopyOnWriteArrayList ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public abstract class LoadBalancerSupport extends ServiceSupport implements LoadBalancer { private List < Processor > processors = new CopyOnWriteArrayList < Processor > ( ) ; public void addProcessor ( Processor processor ) { processors . add ( processor ) ; } public void removeProcessor ( Processor processor ) { processors . remove ( processor ) ; } public List < Processor > getProcessors ( ) { return processors ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processors ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processors ) ; } } 	0
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; public interface RouteContext { Endpoint < ? extends Exchange > getEndpoint ( ) ; FromType getFrom ( ) ; RouteType getRoute ( ) ; CamelContext getCamelContext ( ) ; Processor createProcessor ( ProcessorType node ) throws Exception ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) ; < T > T lookup ( String name , Class < T > type ) ; void commit ( ) ; void addEventDrivenProcessor ( Processor processor ) ; void intercept ( Intercept interceptor ) ; Processor createProceedProcessor ( ) ; List < InterceptStrategy > getInterceptStrategies ( ) ; void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) ; void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) ; void setIsRouteAdded ( boolean value ) ; boolean isRouteAdded ( ) ; } 	1
package org . apache . camel . component . http ; import java . io . IOException ; import java . util . concurrent . ConcurrentHashMap ; import javax . servlet . ServletException ; import javax . servlet . http . HttpServlet ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; public class CamelServlet extends HttpServlet { private ConcurrentHashMap < String , HttpConsumer > consumers = new ConcurrentHashMap < String , HttpConsumer > ( ) ; public CamelServlet ( ) { } @ Override protected void service ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { try { HttpConsumer consumer = resolve ( request ) ; if ( consumer == null ) { response . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; return ; } HttpExchange exchange = new HttpExchange ( consumer . getEndpoint ( ) , request , response ) ; consumer . getProcessor ( ) . process ( exchange ) ; consumer . getBinding ( ) . writeResponse ( exchange , response ) ; } catch ( Exception e ) { throw new ServletException ( e ) ; } } protected HttpConsumer resolve ( HttpServletRequest request ) { String path = request . getPathInfo ( ) ; return consumers . get ( path ) ; } public void connect ( HttpConsumer consumer ) { consumers . put ( consumer . getPath ( ) , consumer ) ; } public void disconnect ( HttpConsumer consumer ) { consumers . remove ( consumer . getPath ( ) ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class Throttler extends DelayProcessorSupport { private long maximumRequestsPerPeriod ; private long timePeriodMillis ; private long startTimeMillis ; private long requestCount ; public Throttler ( Processor processor , long maximumRequestsPerPeriod ) { this ( processor , maximumRequestsPerPeriod , 1000 ) ; } public Throttler ( Processor processor , long maximumRequestsPerPeriod , long timePeriodMillis ) { super ( processor ) ; this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; this . timePeriodMillis = timePeriodMillis ; } @ Override public String toString ( ) { return "Throttler[requests: " + maximumRequestsPerPeriod + " per: " + timePeriodMillis + " (ms) to: " + getProcessor ( ) + "]" ; } public long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } public long getRequestCount ( ) { return requestCount ; } public long getStartTimeMillis ( ) { return startTimeMillis ; } protected void delay ( Exchange exchange ) throws Exception { long now = currentSystemTime ( ) ; if ( startTimeMillis == 0 ) { startTimeMillis = now ; } if ( now - startTimeMillis > timePeriodMillis ) { requestCount = 1 ; startTimeMillis = now ; } else { if ( ++ requestCount > maximumRequestsPerPeriod ) { long time = startTimeMillis + timePeriodMillis ; waitUntil ( time , exchange ) ; } } } } 	1
package org . apache . camel . processor . resequencer ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . Method ; import java . lang . reflect . Proxy ; import java . util . concurrent . BlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SequenceSender extends Thread { private static final transient Log LOG = LogFactory . getLog ( SequenceSender . class ) ; private static final Exchange STOP = createStopSignal ( ) ; private BlockingQueue < Exchange > queue ; private Processor processor ; public SequenceSender ( Processor processor ) { this . processor = processor ; } public void setQueue ( BlockingQueue < Exchange > queue ) { this . queue = queue ; } public void run ( ) { while ( true ) { try { Exchange exchange = queue . take ( ) ; if ( exchange == STOP ) { LOG . info ( "Exit processing loop after cancellation" ) ; return ; } processor . process ( exchange ) ; } catch ( InterruptedException e ) { LOG . info ( "Exit processing loop after interrupt" ) ; return ; } catch ( Exception e ) { LOG . warn ( "Exception during exchange processing: " + e . getMessage ( ) ) ; } } } public void cancel ( ) throws InterruptedException { queue . put ( STOP ) ; } private static Exchange createStopSignal ( ) { return ( Exchange ) Proxy . newProxyInstance ( SequenceSender . class . getClassLoader ( ) , new Class [ ] { Exchange . class } , createStopHandler ( ) ) ; } private static InvocationHandler createStopHandler ( ) { return new InvocationHandler ( ) { public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { throw new RuntimeException ( "Illegal method invocation on stop signal" ) ; } } ; } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "jaxb" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class JaxbDataFormat extends DataFormatType { @ XmlAttribute ( required = true ) private String contextPath ; @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public JaxbDataFormat ( ) { super ( "org.apache.camel.converter.jaxb.JaxbDataFormat" ) ; } public JaxbDataFormat ( boolean prettyPrint ) { this ( ) ; setPrettyPrint ( prettyPrint ) ; } public String getContextPath ( ) { return contextPath ; } public void setContextPath ( String contextPath ) { this . contextPath = contextPath ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } @ Override protected void configureDataFormat ( DataFormat dataFormat ) { Boolean answer = ObjectHelper . toBoolean ( getPrettyPrint ( ) ) ; if ( answer != null && answer . booleanValue ( ) ) { setProperty ( dataFormat , "prettyPrint" , Boolean . TRUE ) ; } setProperty ( dataFormat , "contextPath" , contextPath ) ; } } 	1
package org . apache . camel ; public class ResolveEndpointFailedException extends RuntimeCamelException { private final String uri ; public ResolveEndpointFailedException ( String uri , Throwable cause ) { super ( "Failed to resolve endpoint: " + uri + " due to: " + cause , cause ) ; this . uri = uri ; } public ResolveEndpointFailedException ( String uri , String message ) { super ( "Failed to resolve endpoint: " + uri + " due to: " + message ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . util . Properties ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . component . file . strategy . FileProcessStrategySupport ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileEndpoint extends ScheduledPollEndpoint < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileEndpoint . class ) ; private static final String DEFAULT_STRATEGYFACTORY_CLASS = "org.apache.camel.component.file.strategy.FileProcessStrategyFactory" ; private File file ; private FileProcessStrategy fileProcessStrategy ; private boolean autoCreate = true ; private boolean lock = true ; private boolean delete ; private boolean noop ; private boolean append = true ; private String moveNamePrefix ; private String moveNamePostfix ; private String [ ] excludedNamePrefixes = { "." } ; private String [ ] excludedNamePostfixes = { FileProcessStrategySupport . DEFAULT_LOCK_FILE_POSTFIX } ; private int bufferSize = 128 * 1024 ; private boolean ignoreFileNameHeader ; protected FileEndpoint ( File file , String endpointUri , FileComponent component ) { super ( endpointUri , component ) ; this . file = file ; } public FileEndpoint ( String endpointUri , File file ) { super ( endpointUri ) ; this . file = file ; } public FileEndpoint ( File file ) { this . file = file ; } public FileEndpoint ( ) { } public Producer < FileExchange > createProducer ( ) throws Exception { Producer < FileExchange > result = new FileProducer ( this ) ; return result ; } public Consumer < FileExchange > createConsumer ( Processor processor ) throws Exception { Consumer < FileExchange > result = new FileConsumer ( this , processor ) ; configureConsumer ( result ) ; return result ; } public FileExchange createExchange ( File file ) { return new FileExchange ( getCamelContext ( ) , getExchangePattern ( ) , file ) ; } @ Override public FileExchange createExchange ( ) { return createExchange ( getFile ( ) ) ; } @ Override public FileExchange createExchange ( ExchangePattern pattern ) { return new FileExchange ( getCamelContext ( ) , pattern , file ) ; } public String getGeneratedFileName ( Message message ) { return getFileFriendlyMessageId ( message . getMessageId ( ) ) ; } public void configureMessage ( File file , Message message ) { message . setBody ( file ) ; String relativePath = file . getPath ( ) . substring ( getFile ( ) . getPath ( ) . length ( ) ) ; if ( relativePath . startsWith ( File . separator ) || relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } message . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } public File getFile ( ) { ObjectHelper . notNull ( file , "file" ) ; if ( autoCreate && ! file . exists ( ) ) { file . mkdirs ( ) ; } return file ; } public void setFile ( File file ) { this . file = file ; } public boolean isSingleton ( ) { return true ; } public boolean isAutoCreate ( ) { return this . autoCreate ; } public void setAutoCreate ( boolean autoCreate ) { this . autoCreate = autoCreate ; } public FileProcessStrategy getFileStrategy ( ) { if ( fileProcessStrategy == null ) { fileProcessStrategy = createFileStrategy ( ) ; LOG . debug ( "Using file process strategy: " + fileProcessStrategy ) ; } return fileProcessStrategy ; } public void setFileStrategy ( FileProcessStrategy fileProcessStrategy ) { this . fileProcessStrategy = fileProcessStrategy ; } public boolean isDelete ( ) { return delete ; } public void setDelete ( boolean delete ) { this . delete = delete ; } public boolean isLock ( ) { return lock ; } public void setLock ( boolean lock ) { this . lock = lock ; } public String getMoveNamePostfix ( ) { return moveNamePostfix ; } public void setMoveNamePostfix ( String moveNamePostfix ) { this . moveNamePostfix = moveNamePostfix ; } public String getMoveNamePrefix ( ) { return moveNamePrefix ; } public void setMoveNamePrefix ( String moveNamePrefix ) { this . moveNamePrefix = moveNamePrefix ; } public String [ ] getExcludedNamePrefixes ( ) { return excludedNamePrefixes ; } public void setExcludedNamePrefixes ( String [ ] excludedNamePrefixes ) { this . excludedNamePrefixes = excludedNamePrefixes ; } public String [ ] getExcludedNamePostfixes ( ) { return excludedNamePostfixes ; } public void setExcludedNamePostfixes ( String [ ] excludedNamePostfixes ) { this . excludedNamePostfixes = excludedNamePostfixes ; } public boolean isNoop ( ) { return noop ; } public void setNoop ( boolean noop ) { this . noop = noop ; } public boolean isAppend ( ) { return append ; } public void setAppend ( boolean append ) { this . append = append ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public boolean isIgnoreFileNameHeader ( ) { return ignoreFileNameHeader ; } public void setIgnoreFileNameHeader ( boolean ignoreFileNameHeader ) { this . ignoreFileNameHeader = ignoreFileNameHeader ; } protected FileProcessStrategy createFileStrategy ( ) { Class < ? > factory = null ; try { FactoryFinder finder = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; factory = finder . findClass ( "file" , "strategy.factory." ) ; } catch ( ClassNotFoundException e ) { LOG . debug ( "'strategy.factory.class' not found" , e ) ; } catch ( IOException e ) { LOG . debug ( "No strategy factory defined in 'META-INF/services/org/apache/camel/component/file'" , e ) ; } if ( factory == null ) { factory = ObjectHelper . loadClass ( DEFAULT_STRATEGYFACTORY_CLASS ) ; if ( factory == null ) { throw new TypeNotPresentException ( "FileProcessStrategyFactory class not found" , null ) ; } } try { Method factoryMethod = factory . getMethod ( "createFileProcessStrategy" , Properties . class ) ; return ( FileProcessStrategy ) ObjectHelper . invokeMethod ( factoryMethod , null , getParamsAsProperties ( ) ) ; } catch ( NoSuchMethodException e ) { throw new TypeNotPresentException ( factory . getSimpleName ( ) + ".createFileProcessStrategy(Properties params) method not found" , e ) ; } } protected Properties getParamsAsProperties ( ) { Properties params = new Properties ( ) ; if ( isNoop ( ) ) { params . setProperty ( "noop" , Boolean . toString ( true ) ) ; } if ( isDelete ( ) ) { params . setProperty ( "delete" , Boolean . toString ( true ) ) ; } if ( isAppend ( ) ) { params . setProperty ( "append" , Boolean . toString ( true ) ) ; } if ( isLock ( ) ) { params . setProperty ( "lock" , Boolean . toString ( true ) ) ; } if ( moveNamePrefix != null ) { params . setProperty ( "moveNamePrefix" , moveNamePrefix ) ; } if ( moveNamePostfix != null ) { params . setProperty ( "moveNamePostfix" , moveNamePostfix ) ; } return params ; } @ Override protected String createEndpointUri ( ) { return "file://" + getFile ( ) . getAbsolutePath ( ) ; } protected String getFileFriendlyMessageId ( String id ) { return UuidGenerator . generateSanitizedId ( id ) ; } } 	1
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Processor ; import org . apache . camel . util . CamelContextHelper ; public class ConstantBeanHolder implements BeanHolder { private final Object bean ; private Processor processor ; private BeanInfo beanInfo ; public ConstantBeanHolder ( Object bean , BeanInfo beanInfo ) { this . bean = bean ; this . beanInfo = beanInfo ; this . processor = CamelContextHelper . convertTo ( beanInfo . getCamelContext ( ) , Processor . class , bean ) ; } public ConstantBeanHolder ( Object bean , CamelContext context ) { this ( bean , new BeanInfo ( context , bean . getClass ( ) ) ) ; } public ConstantBeanHolder ( Object bean , CamelContext context , ParameterMappingStrategy parameterMappingStrategy ) { this ( bean , new BeanInfo ( context , bean . getClass ( ) , parameterMappingStrategy ) ) ; } @ Override public String toString ( ) { return bean . toString ( ) ; } public Object getBean ( ) { return bean ; } public Processor getProcessor ( ) { return processor ; } public BeanInfo getBeanInfo ( ) { return beanInfo ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Delayer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "delayer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DelayerType extends ExpressionNode { private Long delay = 0L ; public DelayerType ( ) { } public DelayerType ( Expression processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( ExpressionType processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( Expression processAtExpression , long delay ) { super ( processAtExpression ) ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "delayer" ; } public Long getDelay ( ) { return delay ; } public void setDelay ( Long delay ) { this . delay = delay ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; Expression processAtExpression = getExpression ( ) != null ? getExpression ( ) . createExpression ( routeContext ) : null ; return new Delayer ( childProcessor , processAtExpression , delay ) ; } } 	1
package org . apache . camel . spring ; import org . apache . camel . CamelContext ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . spring . spi . SpringTransactionPolicy ; import org . apache . camel . spring . spi . TransactionErrorHandlerBuilder ; import org . apache . camel . spring . spi . TransactionInterceptor ; import org . springframework . context . ApplicationContext ; import org . springframework . transaction . support . TransactionTemplate ; public abstract class SpringRouteBuilder extends RouteBuilder { private ApplicationContext applicationContext ; public TransactionInterceptor transactionInterceptor ( ) { return new TransactionInterceptor ( bean ( TransactionTemplate . class ) ) ; } public < T > T bean ( Class < T > type , String beanName ) { ApplicationContext context = getApplicationContext ( ) ; return ( T ) context . getBean ( beanName , type ) ; } public < T > T bean ( Class < T > type ) { ApplicationContext context = getApplicationContext ( ) ; String [ ] names = context . getBeanNamesForType ( type , true , true ) ; if ( names != null ) { int count = names . length ; if ( count == 1 ) { return ( T ) context . getBean ( names [ 0 ] ) ; } else if ( count > 1 ) { throw new IllegalArgumentException ( "Too many beans in the application context of type: " + type + ". Found: " + count ) ; } } throw new IllegalArgumentException ( "No bean available in the application context of type: " + type ) ; } public ApplicationContext getApplicationContext ( ) { if ( applicationContext == null ) { CamelContext camelContext = getContext ( ) ; if ( camelContext instanceof SpringCamelContext ) { SpringCamelContext springCamelContext = ( SpringCamelContext ) camelContext ; return springCamelContext . getApplicationContext ( ) ; } else { throw new IllegalArgumentException ( "This SpringBuilder is not being used with a SpringCamelContext and there is no applicationContext property configured" ) ; } } return applicationContext ; } public void setApplicationContext ( ApplicationContext applicationContext ) { this . applicationContext = applicationContext ; } public TransactionErrorHandlerBuilder transactionErrorHandler ( SpringTransactionPolicy policy ) { TransactionErrorHandlerBuilder answer = new TransactionErrorHandlerBuilder ( ) ; answer . setTransactionTemplate ( policy . getTemplate ( ) ) ; return answer ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RenameFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( RenameFileProcessStrategy . class ) ; private FileRenamer renamer ; public RenameFileProcessStrategy ( ) { this ( true ) ; } public RenameFileProcessStrategy ( boolean lock ) { this ( lock , ".camel/" , "" ) ; } public RenameFileProcessStrategy ( boolean lock , String namePrefix , String namePostfix ) { this ( lock , new DefaultFileRenamer ( namePrefix , namePostfix ) ) ; } public RenameFileProcessStrategy ( boolean lock , FileRenamer renamer ) { super ( lock ) ; this . renamer = renamer ; } @ Override public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { File newName = renamer . renameFile ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Renaming file: " + file + " to: " + newName ) ; } if ( newName . exists ( ) ) { newName . delete ( ) ; } newName . getParentFile ( ) . mkdirs ( ) ; boolean renamed = file . renameTo ( newName ) ; if ( ! renamed ) { LOG . warn ( "Could not rename file from: " + file + " to " + newName ) ; } super . commit ( endpoint , exchange , file ) ; } public FileRenamer getRenamer ( ) { return renamer ; } public void setRenamer ( FileRenamer renamer ) { this . renamer = renamer ; } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Route ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . DefaultRouteContext ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlRootElement ( name = "route" ) @ XmlType ( propOrder = { "inputs" , "outputs" } ) @ XmlAccessorType ( XmlAccessType . PROPERTY ) public class RouteType extends ProcessorType < ProcessorType > implements CamelContextAware { private static final transient Log LOG = LogFactory . getLog ( RouteType . class ) ; private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; private List < FromType > inputs = new ArrayList < FromType > ( ) ; private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; private String group ; private CamelContext camelContext ; private Boolean streamCaching ; public RouteType ( ) { } public RouteType ( String uri ) { from ( uri ) ; } public RouteType ( Endpoint endpoint ) { from ( endpoint ) ; } @ Override public String toString ( ) { return "Route[ " + inputs + " -> " + outputs + "]" ; } public void addRoutes ( CamelContext context , Collection < Route > routes ) throws Exception { setCamelContext ( context ) ; if ( context instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) context ; ErrorHandlerBuilder handler = defaultCamelContext . getErrorHandlerBuilder ( ) ; if ( handler != null ) { setErrorHandlerBuilderIfNull ( handler ) ; } } for ( FromType fromType : inputs ) { addRoutes ( routes , fromType ) ; } } public Endpoint resolveEndpoint ( String uri ) throws NoSuchEndpointException { CamelContext context = getCamelContext ( ) ; if ( context == null ) { throw new IllegalArgumentException ( "No CamelContext has been injected!" ) ; } return CamelContextHelper . getMandatoryEndpoint ( context , uri ) ; } public RouteType from ( String uri ) { getInputs ( ) . add ( new FromType ( uri ) ) ; return this ; } public RouteType from ( Endpoint endpoint ) { getInputs ( ) . add ( new FromType ( endpoint ) ) ; return this ; } public RouteType group ( String name ) { setGroup ( name ) ; return this ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } @ XmlTransient public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < FromType > getInputs ( ) { return inputs ; } @ XmlElementRef public void setInputs ( List < FromType > inputs ) { this . inputs = inputs ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } @ XmlElementRef public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { configureChild ( output ) ; } } } public CamelContext getCamelContext ( ) { return camelContext ; } @ XmlTransient public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public String getGroup ( ) { return group ; } @ XmlAttribute public void setGroup ( String group ) { this . group = group ; } public Boolean getStreamCaching ( ) { return streamCaching ; } @ XmlAttribute ( required = false ) public void setStreamCaching ( Boolean streamCaching ) { this . streamCaching = streamCaching ; if ( streamCaching != null && streamCaching ) { streamCaching ( ) ; } else { noStreamCaching ( ) ; } } protected void addRoutes ( Collection < Route > routes , FromType fromType ) throws Exception { RouteContext routeContext = new DefaultRouteContext ( this , fromType , routes ) ; routeContext . getEndpoint ( ) ; if ( camelContext != null ) { camelContext . getLifecycleStrategy ( ) . onRouteContextCreate ( routeContext ) ; } List < ProcessorType < ? > > list = new ArrayList < ProcessorType < ? > > ( outputs ) ; for ( ProcessorType output : list ) { output . addRoutes ( routeContext , routes ) ; } routeContext . commit ( ) ; } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } List < InterceptorType > interceptors = getInterceptors ( ) ; for ( InterceptorType interceptor : interceptors ) { output . addInterceptor ( interceptor ) ; } } public RouteType noStreamCaching ( ) { StreamCachingInterceptor . noStreamCaching ( interceptors ) ; return this ; } public RouteType streamCaching ( ) { addInterceptor ( new StreamCachingInterceptor ( ) ) ; return this ; } @ Override public void addInterceptor ( InterceptorType interceptor ) { getInterceptors ( ) . add ( interceptor ) ; } } 	0
package org . apache . camel . processor . validation ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import javax . xml . XMLConstants ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . validation . Schema ; import javax . xml . validation . SchemaFactory ; import javax . xml . validation . Validator ; import org . xml . sax . SAXException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class ValidatingProcessor implements Processor { private Schema schema ; private ValidatorErrorHandler errorHandler = new DefaultValidationErrorHandler ( ) ; private String schemaLanguage = XMLConstants . W3C_XML_SCHEMA_NS_URI ; private Source schemaSource ; private SchemaFactory schemaFactory ; private URL schemaUrl ; private File schemaFile ; public void process ( Exchange exchange ) throws Exception { Schema schema = getSchema ( ) ; Validator validator = schema . newValidator ( ) ; Source source = exchange . getIn ( ) . getBody ( DOMSource . class ) ; if ( source == null ) { throw new NoXmlBodyValidationException ( exchange ) ; } errorHandler . reset ( ) ; validator . setErrorHandler ( errorHandler ) ; DOMResult result = new DOMResult ( ) ; validator . validate ( source , result ) ; errorHandler . handleErrors ( exchange , schema , result ) ; } public Schema getSchema ( ) throws IOException , SAXException { if ( schema == null ) { schema = createSchema ( ) ; } return schema ; } public void setSchema ( Schema schema ) { this . schema = schema ; } public String getSchemaLanguage ( ) { return schemaLanguage ; } public void setSchemaLanguage ( String schemaLanguage ) { this . schemaLanguage = schemaLanguage ; } public Source getSchemaSource ( ) throws IOException { if ( schemaSource == null ) { schemaSource = createSchemaSource ( ) ; } return schemaSource ; } public void setSchemaSource ( Source schemaSource ) { this . schemaSource = schemaSource ; } public URL getSchemaUrl ( ) { return schemaUrl ; } public void setSchemaUrl ( URL schemaUrl ) { this . schemaUrl = schemaUrl ; } public File getSchemaFile ( ) { return schemaFile ; } public void setSchemaFile ( File schemaFile ) { this . schemaFile = schemaFile ; } public SchemaFactory getSchemaFactory ( ) { if ( schemaFactory == null ) { schemaFactory = createSchemaFactory ( ) ; } return schemaFactory ; } public void setSchemaFactory ( SchemaFactory schemaFactory ) { this . schemaFactory = schemaFactory ; } public ValidatorErrorHandler getErrorHandler ( ) { return errorHandler ; } public void setErrorHandler ( ValidatorErrorHandler errorHandler ) { this . errorHandler = errorHandler ; } protected SchemaFactory createSchemaFactory ( ) { return SchemaFactory . newInstance ( schemaLanguage ) ; } protected Source createSchemaSource ( ) throws IOException { throw new IllegalArgumentException ( "You must specify a schema, " + "schemaFile, schemaSource or schemaUrl property" ) ; } protected Schema createSchema ( ) throws SAXException , IOException { SchemaFactory factory = getSchemaFactory ( ) ; URL url = getSchemaUrl ( ) ; if ( url != null ) { return factory . newSchema ( url ) ; } File file = getSchemaFile ( ) ; if ( file != null ) { return factory . newSchema ( file ) ; } return factory . newSchema ( getSchemaSource ( ) ) ; } } 	1
package org . apache . camel . component . xmpp ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . jivesoftware . smack . AccountManager ; import org . jivesoftware . smack . XMPPConnection ; import org . jivesoftware . smack . XMPPException ; import org . jivesoftware . smack . filter . PacketFilter ; import org . jivesoftware . smack . packet . Message ; import org . jivesoftware . smack . packet . Presence ; public class XmppEndpoint extends DefaultEndpoint < XmppExchange > { private static final transient Log LOG = LogFactory . getLog ( XmppEndpoint . class ) ; private XmppBinding binding ; private XMPPConnection connection ; private String host ; private int port ; private String user ; private String password ; private String resource = "Camel" ; private boolean login = true ; private PacketFilter filter ; private boolean createAccount ; private String room ; private String participant ; private String nickname ; public XmppEndpoint ( String uri , XmppComponent component ) { super ( uri , component ) ; } public XmppEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < XmppExchange > createProducer ( ) throws Exception { if ( room != null ) { return createGroupChatProducer ( room ) ; } else { if ( participant == null ) { throw new IllegalArgumentException ( "No room or participant configured on this endpoint: " + this ) ; } return createPrivateChatProducer ( participant ) ; } } public Producer < XmppExchange > createGroupChatProducer ( String room ) throws Exception { return new XmppGroupChatProducer ( this , room ) ; } public Producer < XmppExchange > createPrivateChatProducer ( String participant ) throws Exception { return new XmppPrivateChatProducer ( this , participant ) ; } public Consumer < XmppExchange > createConsumer ( Processor processor ) throws Exception { return new XmppConsumer ( this , processor ) ; } @ Override public XmppExchange createExchange ( ExchangePattern pattern ) { return new XmppExchange ( getCamelContext ( ) , pattern , getBinding ( ) ) ; } public XmppExchange createExchange ( Message message ) { return new XmppExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , message ) ; } public XmppBinding getBinding ( ) { if ( binding == null ) { binding = new XmppBinding ( ) ; } return binding ; } public void setBinding ( XmppBinding binding ) { this . binding = binding ; } public String getHost ( ) { return host ; } public void setHost ( String host ) { this . host = host ; } public int getPort ( ) { return port ; } public void setPort ( int port ) { this . port = port ; } public String getUser ( ) { return user ; } public void setUser ( String user ) { this . user = user ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getResource ( ) { return resource ; } public void setResource ( String resource ) { this . resource = resource ; } public boolean isLogin ( ) { return login ; } public void setLogin ( boolean login ) { this . login = login ; } public PacketFilter getFilter ( ) { return filter ; } public void setFilter ( PacketFilter filter ) { this . filter = filter ; } public boolean isCreateAccount ( ) { return createAccount ; } public void setCreateAccount ( boolean createAccount ) { this . createAccount = createAccount ; } public String getRoom ( ) { return room ; } public void setRoom ( String room ) { this . room = room ; } public String getParticipant ( ) { return participant ; } public void setParticipant ( String participant ) { this . participant = participant ; } public String getNickname ( ) { return nickname ; } public void setNickname ( String nickname ) { this . nickname = nickname ; } public XMPPConnection getConnection ( ) throws XMPPException { if ( connection == null ) { connection = createConnection ( ) ; } return connection ; } public void setConnection ( XMPPConnection connection ) { this . connection = connection ; } protected XMPPConnection createConnection ( ) throws XMPPException { XMPPConnection connection ; if ( port > 0 ) { connection = new XMPPConnection ( host , port ) ; } else { connection = new XMPPConnection ( host ) ; } if ( login && ! connection . isAuthenticated ( ) ) { if ( user != null ) { LOG . info ( "Logging in to XMPP as user: " + user + " on connection: " + connection ) ; if ( password == null ) { LOG . warn ( "No password configured for user: " + user ) ; } if ( createAccount ) { AccountManager accountManager = new AccountManager ( connection ) ; accountManager . createAccount ( user , password ) ; } if ( resource != null ) { connection . login ( user , password , resource ) ; } else { connection . login ( user , password ) ; } } else { LOG . info ( "Logging in anonymously to XMPP on connection: " + connection ) ; connection . loginAnonymously ( ) ; } } return connection ; } public boolean isSingleton ( ) { return true ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileConsumer extends ScheduledPollConsumer < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileConsumer . class ) ; private FileEndpoint endpoint ; private ConcurrentHashMap < File , File > filesBeingProcessed = new ConcurrentHashMap < File , File > ( ) ; private ConcurrentHashMap < File , Long > fileSizes = new ConcurrentHashMap < File , Long > ( ) ; private ConcurrentHashMap < File , Long > noopMap = new ConcurrentHashMap < File , Long > ( ) ; private boolean generateEmptyExchangeWhenIdle ; private boolean recursive = true ; private String regexPattern = "" ; private long lastPollTime ; private int unchangedDelay ; private boolean unchangedSize ; public FileConsumer ( final FileEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } protected synchronized void poll ( ) throws Exception { int rc = pollFileOrDirectory ( endpoint . getFile ( ) , isRecursive ( ) ) ; if ( rc == 0 && generateEmptyExchangeWhenIdle ) { final FileExchange exchange = endpoint . createExchange ( ( File ) null ) ; getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } lastPollTime = System . currentTimeMillis ( ) ; } protected int pollFileOrDirectory ( File fileOrDirectory , boolean processDir ) { if ( ! fileOrDirectory . isDirectory ( ) ) { return pollFile ( fileOrDirectory ) ; } else if ( processDir ) { int rc = 0 ; if ( isValidFile ( fileOrDirectory ) ) { LOG . debug ( "Polling directory " + fileOrDirectory ) ; File [ ] files = fileOrDirectory . listFiles ( ) ; for ( File file : files ) { rc += pollFileOrDirectory ( file , isRecursive ( ) ) ; } } return rc ; } else { LOG . debug ( "Skipping directory " + fileOrDirectory ) ; return 0 ; } } protected int pollFile ( final File file ) { if ( ! file . exists ( ) ) { return 0 ; } if ( ! isValidFile ( file ) ) { return 0 ; } if ( ! endpoint . isNoop ( ) ) { if ( filesBeingProcessed . contains ( file ) ) { return 1 ; } filesBeingProcessed . put ( file , file ) ; } final FileProcessStrategy processStrategy = endpoint . getFileStrategy ( ) ; final FileExchange exchange = endpoint . createExchange ( file ) ; endpoint . configureMessage ( file , exchange . getIn ( ) ) ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to process file: " + file + " using exchange: " + exchange ) ; } if ( processStrategy . begin ( endpoint , exchange , file ) ) { getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { boolean failed = exchange . isFailed ( ) ; boolean handled = DeadLetterChannel . isFailureHandled ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Done processing file: " + file + ". Status is: " + ( failed ? "failed: " + failed + ", handled by failure processor: " + handled : "OK" ) ) ; } if ( ! failed || handled ) { processStrategyCommit ( processStrategy , exchange , file , handled ) ; } else if ( failed && ! handled ) { handleException ( exchange . getException ( ) ) ; } filesBeingProcessed . remove ( file ) ; } } ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " cannot process file: " + file ) ; } } } catch ( Throwable e ) { handleException ( e ) ; } return 1 ; } protected void processStrategyCommit ( FileProcessStrategy processStrategy , FileExchange exchange , File file , boolean failureHandled ) { try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Committing file strategy: " + processStrategy + " for file: " + file + ( failureHandled ? " that was handled by the failure processor." : "" ) ) ; } processStrategy . commit ( endpoint , exchange , file ) ; } catch ( Exception e ) { LOG . warn ( "Error committing file strategy: " + processStrategy , e ) ; handleException ( e ) ; } } protected boolean isValidFile ( File file ) { boolean result = false ; if ( file != null && file . exists ( ) ) { if ( isMatched ( file ) && isChanged ( file ) ) { result = true ; } } return result ; } protected boolean isChanged ( File file ) { if ( file == null ) { return false ; } else if ( file . isDirectory ( ) ) { return true ; } else { boolean lastModifiedCheck = false ; long modifiedDuration = 0 ; if ( getUnchangedDelay ( ) > 0 ) { modifiedDuration = System . currentTimeMillis ( ) - file . lastModified ( ) ; lastModifiedCheck = modifiedDuration >= getUnchangedDelay ( ) ; } long fileModified = file . lastModified ( ) ; Long previousModified = noopMap . get ( file ) ; noopMap . put ( file , fileModified ) ; if ( previousModified == null || fileModified > previousModified ) { lastModifiedCheck = true ; } boolean sizeCheck = false ; long sizeDifference = 0 ; if ( isUnchangedSize ( ) ) { Long value = fileSizes . get ( file ) ; if ( value == null ) { sizeCheck = true ; } else { sizeCheck = file . length ( ) != value ; } } boolean answer = lastModifiedCheck || sizeCheck ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "file:" + file + " isChanged:" + answer + " " + "sizeCheck:" + sizeCheck + "(" + sizeDifference + ") " + "lastModifiedCheck:" + lastModifiedCheck + "(" + modifiedDuration + ")" ) ; } if ( isUnchangedSize ( ) ) { if ( answer ) { fileSizes . put ( file , file . length ( ) ) ; } else { fileSizes . remove ( file ) ; } } return answer ; } } protected boolean isMatched ( File file ) { String name = file . getName ( ) ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { if ( ! name . matches ( getRegexPattern ( ) ) ) { return false ; } } String [ ] prefixes = endpoint . getExcludedNamePrefixes ( ) ; if ( prefixes != null ) { for ( String prefix : prefixes ) { if ( name . startsWith ( prefix ) ) { return false ; } } } String [ ] postfixes = endpoint . getExcludedNamePostfixes ( ) ; if ( postfixes != null ) { for ( String postfix : postfixes ) { if ( name . endsWith ( postfix ) ) { return false ; } } } return true ; } public boolean isRecursive ( ) { return this . recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public String getRegexPattern ( ) { return this . regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isGenerateEmptyExchangeWhenIdle ( ) { return generateEmptyExchangeWhenIdle ; } public void setGenerateEmptyExchangeWhenIdle ( boolean generateEmptyExchangeWhenIdle ) { this . generateEmptyExchangeWhenIdle = generateEmptyExchangeWhenIdle ; } public int getUnchangedDelay ( ) { return unchangedDelay ; } public void setUnchangedDelay ( int unchangedDelay ) { this . unchangedDelay = unchangedDelay ; } public boolean isUnchangedSize ( ) { return unchangedSize ; } public void setUnchangedSize ( boolean unchangedSize ) { this . unchangedSize = unchangedSize ; } } 	1
package org . apache . camel . impl ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . util . IntrospectionSupport ; public abstract class ScheduledPollEndpoint < E extends Exchange > extends DefaultEndpoint < E > { private Map consumerProperties ; protected ScheduledPollEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; } protected ScheduledPollEndpoint ( String endpointUri , CamelContext context ) { super ( endpointUri , context ) ; } protected ScheduledPollEndpoint ( String endpointUri ) { super ( endpointUri ) ; } protected ScheduledPollEndpoint ( ) { } public Map getConsumerProperties ( ) { return consumerProperties ; } public void setConsumerProperties ( Map consumerProperties ) { this . consumerProperties = consumerProperties ; } protected void configureConsumer ( Consumer < E > consumer ) throws Exception { if ( consumerProperties != null ) { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , consumer , consumerProperties ) ; } } public void configureProperties ( Map options ) { Map consumerProperties = IntrospectionSupport . extractProperties ( options , "consumer." ) ; if ( consumerProperties != null ) { setConsumerProperties ( consumerProperties ) ; } } } 	0
package org . apache . camel . impl ; import java . net . URI ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import java . util . concurrent . ThreadFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . URISupport ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DefaultComponent < E extends Exchange > extends ServiceSupport implements Component < E > { private static final transient Log LOG = LogFactory . getLog ( DefaultComponent . class ) ; private int defaultThreadPoolSize = 5 ; private CamelContext camelContext ; private ScheduledExecutorService executorService ; public DefaultComponent ( ) { } public DefaultComponent ( CamelContext context ) { this . camelContext = context ; } public Endpoint < E > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; if ( path . startsWith ( "//" ) ) { path = path . substring ( 2 ) ; } int idx = path . indexOf ( '?' ) ; if ( idx > 0 ) { path = path . substring ( 0 , idx ) ; } Map parameters = URISupport . parseParameters ( u ) ; validateURI ( uri , path , parameters ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating endpoint uri=[" + uri + "], path=[" + path + "], parameters=[" + parameters + "]" ) ; } Endpoint < E > endpoint = createEndpoint ( uri , path , parameters ) ; if ( endpoint == null ) { return null ; } if ( parameters != null ) { endpoint . configureProperties ( parameters ) ; if ( useIntrospectionOnEndpoint ( ) ) { setProperties ( endpoint , parameters ) ; } if ( parameters . size ( ) > 0 ) { throw new ResolveEndpointFailedException ( uri , "There are " + parameters . size ( ) + " parameters that couldn't be set on the endpoint." + " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint." + " Unknown parameters=[" + parameters + "]" ) ; } } return endpoint ; } protected void validateURI ( String uri , String path , Map parameters ) throws ResolveEndpointFailedException { if ( uri . contains ( "&" ) && ! uri . contains ( "?" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: no ? marker however the uri " + "has & parameter separators. Check the uri if its missing a ? marker." ) ; } if ( uri . contains ( "&&" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: Double && marker found. " + "Check the uri and remove the duplicate & marker." ) ; } } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext context ) { this . camelContext = context ; } public ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { executorService = createExecutorService ( ) ; } return executorService ; } public void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } protected ScheduledExecutorService createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( defaultThreadPoolSize , new ThreadFactory ( ) { int counter ; public synchronized Thread newThread ( Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "Thread: " + ( ++ counter ) + " " + DefaultComponent . this . toString ( ) ) ; return thread ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { if ( executorService != null ) { executorService . shutdown ( ) ; } } protected abstract Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception ; protected void setProperties ( Object bean , Map parameters ) throws Exception { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , bean , parameters ) ; } protected boolean useIntrospectionOnEndpoint ( ) { return true ; } public < T > T convertTo ( Class < T > type , Object value ) { return CamelContextHelper . convertTo ( getCamelContext ( ) , type , value ) ; } public < T > T mandatoryConvertTo ( Class < T > type , Object value ) { return CamelContextHelper . mandatoryConvertTo ( getCamelContext ( ) , type , value ) ; } public < T > T newInstance ( Class < T > beanType ) { return getCamelContext ( ) . getInjector ( ) . newInstance ( beanType ) ; } public Object lookup ( String name ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name ) ; } public < T > T lookup ( String name , Class < T > beanType ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , beanType ) ; } public Object mandatoryLookup ( String name ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name ) ; } public < T > T mandatoryLookup ( String name , Class < T > beanType ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name , beanType ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type ) { return getAndRemoveParameter ( parameters , key , type , null ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type , T defaultValue ) { Object value = parameters . remove ( key ) ; if ( value == null ) { value = defaultValue ; } if ( value == null ) { return null ; } return convertTo ( type , value ) ; } } 	1
package org . apache . camel . management ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import javax . management . JMException ; import javax . management . MalformedObjectNameException ; import javax . management . ObjectName ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . InstrumentationAgent ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationLifecycleStrategy implements LifecycleStrategy { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private InstrumentationAgent agent ; private CamelNamingStrategy namingStrategy ; private boolean initialized ; private Map < Endpoint , InstrumentationProcessor > interceptorMap = new HashMap < Endpoint , InstrumentationProcessor > ( ) ; public InstrumentationLifecycleStrategy ( ) { this ( new DefaultInstrumentationAgent ( ) ) ; } public InstrumentationLifecycleStrategy ( InstrumentationAgent agent ) { this . agent = agent ; } public InstrumentationLifecycleStrategy ( InstrumentationAgent agent , CamelContext context ) { this . agent = agent ; onContextStart ( context ) ; } public void onContextStart ( CamelContext context ) { if ( context instanceof DefaultCamelContext ) { try { initialized = true ; DefaultCamelContext dc = ( DefaultCamelContext ) context ; dc . addService ( agent ) ; namingStrategy = new CamelNamingStrategy ( agent . getMBeanObjectDomainName ( ) ) ; ManagedService ms = new ManagedService ( dc ) ; agent . register ( ms , getNamingStrategy ( ) . getObjectName ( dc ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not register CamelContext MBean" , e ) ; } } } public void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) { if ( ! initialized ) { return ; } try { ManagedEndpoint me = new ManagedEndpoint ( endpoint ) ; agent . register ( me , getNamingStrategy ( ) . getObjectName ( me ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Endpoint MBean" , e ) ; } } public void onRoutesAdd ( Collection < Route > routes ) { if ( ! initialized ) { return ; } for ( Route route : routes ) { try { ManagedRoute mr = new ManagedRoute ( route ) ; InstrumentationProcessor interceptor = interceptorMap . get ( route . getEndpoint ( ) ) ; if ( interceptor == null ) { LOG . warn ( "Instrumentation processor not found for route endpoint " + route . getEndpoint ( ) ) ; } else { interceptor . setCounter ( mr ) ; } agent . register ( mr , getNamingStrategy ( ) . getObjectName ( mr ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Route MBean" , e ) ; } } } public void onServiceAdd ( CamelContext context , Service service ) { if ( ! initialized ) { return ; } if ( service instanceof ServiceSupport ) { try { ManagedService ms = new ManagedService ( ( ServiceSupport ) service ) ; agent . register ( ms , getNamingStrategy ( ) . getObjectName ( context , ms ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Service MBean" , e ) ; } } } public void onRouteContextCreate ( RouteContext routeContext ) { if ( ! initialized ) { return ; } Map < ProcessorType , PerformanceCounter > counterMap = new HashMap < ProcessorType , PerformanceCounter > ( ) ; RouteType route = routeContext . getRoute ( ) ; for ( ProcessorType processor : route . getOutputs ( ) ) { ObjectName name = null ; try { name = getNamingStrategy ( ) . getObjectName ( routeContext , processor ) ; PerformanceCounter pc = new PerformanceCounter ( ) ; agent . register ( pc , name ) ; counterMap . put ( processor , pc ) ; } catch ( MalformedObjectNameException e ) { LOG . warn ( "Could not create MBean name: " + name , e ) ; } catch ( JMException e ) { LOG . warn ( "Could not register PerformanceCounter MBean: " + name , e ) ; } } routeContext . addInterceptStrategy ( new InstrumentationInterceptStrategy ( counterMap ) ) ; routeContext . setErrorHandlerWrappingStrategy ( new InstrumentationErrorHandlerWrappingStrategy ( counterMap ) ) ; RouteType routeType = routeContext . getRoute ( ) ; if ( routeType . getInputs ( ) != null && ! routeType . getInputs ( ) . isEmpty ( ) ) { if ( routeType . getInputs ( ) . size ( ) > 1 ) { LOG . warn ( "Add InstrumentationProcessor to first input only." ) ; } Endpoint endpoint = routeType . getInputs ( ) . get ( 0 ) . getEndpoint ( ) ; List < ProcessorType < ? > > exceptionHandlers = new ArrayList < ProcessorType < ? > > ( ) ; List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; for ( ProcessorType output : routeType . getOutputs ( ) ) { if ( output instanceof ExceptionType ) { exceptionHandlers . add ( output ) ; } else { outputs . add ( output ) ; } } routeType . clearOutput ( ) ; routeType . getOutputs ( ) . addAll ( exceptionHandlers ) ; InstrumentationProcessor processor = new InstrumentationProcessor ( ) ; routeType . intercept ( processor ) ; for ( ProcessorType < ? > processorType : outputs ) { routeType . addOutput ( processorType ) ; } interceptorMap . put ( endpoint , processor ) ; } } public CamelNamingStrategy getNamingStrategy ( ) { return namingStrategy ; } public void setNamingStrategy ( CamelNamingStrategy strategy ) { this . namingStrategy = strategy ; } public void setAgent ( InstrumentationAgent agent ) { this . agent = agent ; } } 	0
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . RandomAccessFile ; import java . nio . channels . Channel ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . component . file . FileProcessStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class FileProcessStrategySupport implements FileProcessStrategy { public static final String DEFAULT_LOCK_FILE_POSTFIX = ".cameLock" ; private static final transient Log LOG = LogFactory . getLog ( FileProcessStrategySupport . class ) ; private boolean lockFile ; private FileRenamer lockFileRenamer ; protected FileProcessStrategySupport ( ) { this ( true ) ; } protected FileProcessStrategySupport ( boolean lockFile ) { this ( lockFile , new DefaultFileRenamer ( null , DEFAULT_LOCK_FILE_POSTFIX ) ) ; } protected FileProcessStrategySupport ( boolean lockFile , FileRenamer lockFileRenamer ) { this . lockFile = lockFile ; this . lockFileRenamer = lockFileRenamer ; } public boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { File newFile = lockFileRenamer . renameFile ( file ) ; String lockFileName = newFile . getAbsolutePath ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Locking the file: " + file + " using the lock file name: " + lockFileName ) ; } FileChannel channel = new RandomAccessFile ( lockFileName , "rw" ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; if ( lock != null ) { exchange . setProperty ( "org.apache.camel.fileChannel" , channel ) ; exchange . setProperty ( "org.apache.camel.file.lock" , lock ) ; exchange . setProperty ( "org.apache.camel.file.lock.name" , lockFileName ) ; return true ; } return false ; } return true ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { Channel channel = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.fileChannel" , Channel . class ) ; String lockfile = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock.name" , String . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unlocking file: " + file ) ; } channel . close ( ) ; File lock = new File ( lockfile ) ; lock . delete ( ) ; } } public boolean isLockFile ( ) { return lockFile ; } public void setLockFile ( boolean lockFile ) { this . lockFile = lockFile ; } public FileRenamer getLockFileRenamer ( ) { return lockFileRenamer ; } public void setLockFileRenamer ( FileRenamer lockFileRenamer ) { this . lockFileRenamer = lockFileRenamer ; } } 	1
package org . apache . camel . management ; import java . io . IOException ; import java . lang . management . ManagementFactory ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . rmi . RemoteException ; import java . rmi . registry . LocateRegistry ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import javax . management . InstanceAlreadyExistsException ; import javax . management . JMException ; import javax . management . MBeanServer ; import javax . management . MBeanServerFactory ; import javax . management . NotCompliantMBeanException ; import javax . management . ObjectInstance ; import javax . management . ObjectName ; import javax . management . modelmbean . InvalidTargetObjectTypeException ; import javax . management . modelmbean . ModelMBeanInfo ; import javax . management . modelmbean . RequiredModelMBean ; import javax . management . remote . JMXConnectorServer ; import javax . management . remote . JMXConnectorServerFactory ; import javax . management . remote . JMXServiceURL ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . InstrumentationAgent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . jmx . export . annotation . AnnotationJmxAttributeSource ; import org . springframework . jmx . export . assembler . MetadataMBeanInfoAssembler ; public class DefaultInstrumentationAgent extends ServiceSupport implements InstrumentationAgent { public static final String DEFAULT_DOMAIN = "org.apache.camel" ; public static final String DEFAULT_HOST = "localhost" ; public static final int DEFAULT_REGISTRY_PORT = 1099 ; public static final int DEFAULT_CONNECTION_PORT = - 1 ; public static final String DEFAULT_SERVICE_URL_PATH = "/jmxrmi/camel" ; private static final transient Log LOG = LogFactory . getLog ( DefaultInstrumentationAgent . class ) ; private MBeanServer server ; private Set < ObjectName > mbeans = new HashSet < ObjectName > ( ) ; private MetadataMBeanInfoAssembler assembler ; private JMXConnectorServer cs ; private Integer registryPort ; private Integer connectorPort ; private String mBeanServerDefaultDomain ; private String mBeanObjectDomainName ; private String serviceUrlPath ; private Boolean usePlatformMBeanServer ; private Boolean createConnector ; protected void finalizeSettings ( ) { if ( registryPort == null ) { registryPort = Integer . getInteger ( JmxSystemPropertyKeys . REGISTRY_PORT , DEFAULT_REGISTRY_PORT ) ; } if ( connectorPort == null ) { connectorPort = Integer . getInteger ( JmxSystemPropertyKeys . CONNECTOR_PORT , DEFAULT_CONNECTION_PORT ) ; } if ( mBeanServerDefaultDomain == null ) { mBeanServerDefaultDomain = System . getProperty ( JmxSystemPropertyKeys . DOMAIN , DEFAULT_DOMAIN ) ; } if ( mBeanObjectDomainName == null ) { mBeanObjectDomainName = System . getProperty ( JmxSystemPropertyKeys . MBEAN_DOMAIN , DEFAULT_DOMAIN ) ; } if ( serviceUrlPath == null ) { serviceUrlPath = System . getProperty ( JmxSystemPropertyKeys . SERVICE_URL_PATH , DEFAULT_SERVICE_URL_PATH ) ; } if ( createConnector == null ) { createConnector = Boolean . getBoolean ( JmxSystemPropertyKeys . CREATE_CONNECTOR ) ; } if ( usePlatformMBeanServer == null ) { usePlatformMBeanServer = Boolean . getBoolean ( JmxSystemPropertyKeys . USE_PLATFORM_MBS ) ; } } public void setRegistryPort ( Integer value ) { registryPort = value ; } public void setConnectorPort ( Integer value ) { connectorPort = value ; } public void setMBeanServerDefaultDomain ( String value ) { mBeanServerDefaultDomain = value ; } public void setMBeanObjectDomainName ( String value ) { mBeanObjectDomainName = value ; } public void setServiceUrlPath ( String value ) { serviceUrlPath = value ; } public void setCreateConnector ( Boolean flag ) { createConnector = flag ; } public void setUsePlatformMBeanServer ( Boolean flag ) { usePlatformMBeanServer = flag ; } public MBeanServer getMBeanServer ( ) { return server ; } public void register ( Object obj , ObjectName name ) throws JMException { register ( obj , name , false ) ; } public void register ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException { try { registerMBeanWithServer ( obj , name , forceRegistration ) ; } catch ( NotCompliantMBeanException e ) { ModelMBeanInfo mbi = null ; mbi = assembler . getMBeanInfo ( obj , name . toString ( ) ) ; RequiredModelMBean mbean = ( RequiredModelMBean ) server . instantiate ( RequiredModelMBean . class . getName ( ) ) ; mbean . setModelMBeanInfo ( mbi ) ; try { mbean . setManagedResource ( obj , "ObjectReference" ) ; } catch ( InvalidTargetObjectTypeException itotex ) { throw new JMException ( itotex . getMessage ( ) ) ; } registerMBeanWithServer ( mbean , name , forceRegistration ) ; } } public void unregister ( ObjectName name ) throws JMException { server . unregisterMBean ( name ) ; } protected void doStart ( ) throws Exception { assembler = new MetadataMBeanInfoAssembler ( ) ; assembler . setAttributeSource ( new AnnotationJmxAttributeSource ( ) ) ; if ( server == null ) { finalizeSettings ( ) ; createMBeanServer ( ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Starting JMX agent on server: " + getMBeanServer ( ) ) ; } } protected void doStop ( ) throws Exception { if ( cs != null ) { try { cs . stop ( ) ; } catch ( IOException e ) { } cs = null ; } Object [ ] mBeans = mbeans . toArray ( ) ; int caught = 0 ; for ( Object name : mBeans ) { mbeans . remove ( ( ObjectName ) name ) ; try { unregister ( ( ObjectName ) name ) ; } catch ( JMException jmex ) { LOG . info ( "Exception unregistering MBean" , jmex ) ; caught ++ ; } } if ( caught > 0 ) { LOG . warn ( "A number of " + caught + " exceptions caught while unregistering MBeans during stop operation." + " See INFO log for details." ) ; } } private void registerMBeanWithServer ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException { boolean exists = server . isRegistered ( name ) ; if ( exists ) { if ( forceRegistration ) { LOG . info ( "ForceRegistration enabled, unregistering existing MBean" ) ; server . unregisterMBean ( name ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "MBean already registered with objectname: " + name ) ; } } } ObjectInstance instance = null ; if ( forceRegistration || ! exists ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Registering MBean with objectname: " + name ) ; } instance = server . registerMBean ( obj , name ) ; } if ( instance != null ) { ObjectName registeredName = instance . getObjectName ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Registered MBean with objectname: " + registeredName ) ; } mbeans . add ( registeredName ) ; } } protected void createMBeanServer ( ) { String hostName = DEFAULT_HOST ; boolean canAccessSystemProps = true ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPropertiesAccess ( ) ; } } catch ( SecurityException se ) { canAccessSystemProps = false ; } if ( canAccessSystemProps ) { try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException uhe ) { LOG . info ( "Cannot determine localhost name. Using default: " + DEFAULT_REGISTRY_PORT , uhe ) ; hostName = DEFAULT_HOST ; } } else { hostName = DEFAULT_HOST ; } server = findOrCreateMBeanServer ( ) ; try { if ( createConnector ) { createJmxConnector ( hostName ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not create and start JMX connector." , ioe ) ; } } @ SuppressWarnings ( "unchecked" ) protected MBeanServer findOrCreateMBeanServer ( ) { if ( Boolean . getBoolean ( JmxSystemPropertyKeys . USE_PLATFORM_MBS ) || usePlatformMBeanServer ) { return ManagementFactory . getPlatformMBeanServer ( ) ; } List < MBeanServer > servers = ( List < MBeanServer > ) MBeanServerFactory . findMBeanServer ( null ) ; for ( MBeanServer server : servers ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found MBeanServer with default domain " + server . getDefaultDomain ( ) ) ; } if ( mBeanServerDefaultDomain . equals ( server . getDefaultDomain ( ) ) ) { return server ; } } return MBeanServerFactory . createMBeanServer ( mBeanServerDefaultDomain ) ; } protected void createJmxConnector ( String host ) throws IOException { try { LocateRegistry . createRegistry ( registryPort ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Created JMXConnector RMI regisry on port " + registryPort ) ; } } catch ( RemoteException ex ) { } JMXServiceURL url ; if ( connectorPort > 0 ) { url = new JMXServiceURL ( "service:jmx:rmi://" + host + ":" + connectorPort + "/jndi/rmi://" + host + ":" + registryPort + serviceUrlPath ) ; } else { url = new JMXServiceURL ( "service:jmx:rmi:///jndi/rmi://" + host + ":" + registryPort + serviceUrlPath ) ; } cs = JMXConnectorServerFactory . newJMXConnectorServer ( url , null , server ) ; Thread connectorThread = new Thread ( ) { public void run ( ) { try { cs . start ( ) ; } catch ( IOException ioe ) { LOG . warn ( "Could not start JMXConnector thread." , ioe ) ; } } } ; connectorThread . setName ( "Camel JMX Connector Thread [" + url + "]" ) ; connectorThread . start ( ) ; LOG . info ( "JMX Connector thread started and listening at: " + url ) ; } public String getMBeanObjectDomainName ( ) { return mBeanObjectDomainName ; } public void setServer ( MBeanServer value ) { server = value ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . StringTokenizer ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; public final class ExpressionBuilder { private ExpressionBuilder ( ) { } public static < E extends Exchange > Expression < E > headerExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getIn ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "header(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > headersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "headers" ; } } ; } public static < E extends Exchange > Expression < E > outHeaderExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } Object header = out . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "outHeader(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > outHeadersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "outHeaders" ; } } ; } public static < E extends Exchange > Expression < E > propertyExpression ( final String propertyName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperty ( propertyName ) ; } @ Override public String toString ( ) { return "property(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertiesExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperties ( ) ; } @ Override public String toString ( ) { return "properties" ; } } ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName ) { return systemPropertyExpression ( propertyName , null ) ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( propertyName , defaultValue ) ; } @ Override public String toString ( ) { return "systemProperty(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > constantExpression ( final Object value ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return value ; } @ Override public String toString ( ) { return "" + value ; } } ; } public static < E extends Exchange > Expression < E > bodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "body" ; } } ; } public static < E extends Exchange , T > Expression < E > bodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "bodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > outBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( ) ; } @ Override public String toString ( ) { return "outBody" ; } } ; } public static < E extends Exchange , T > Expression < E > outBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( type ) ; } @ Override public String toString ( ) { return "outBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > faultBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "faultBody" ; } } ; } public static < E extends Exchange , T > Expression < E > faultBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "faultBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > exchangeExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange ; } @ Override public String toString ( ) { return "exchange" ; } } ; } public static < E extends Exchange > Expression < E > inMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) ; } @ Override public String toString ( ) { return "inMessage" ; } } ; } public static < E extends Exchange > Expression < E > outMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) ; } @ Override public String toString ( ) { return "outMessage" ; } } ; } public static < E extends Exchange > Expression < E > convertTo ( final Expression expression , final Class type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } @ Override public String toString ( ) { return "" + expression + ".convertTo(" + type . getName ( ) + ".class)" ; } } ; } public static < E extends Exchange > Expression < E > tokenizeExpression ( final Expression < E > expression , final String token ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } StringTokenizer iter = new StringTokenizer ( text , token ) ; List < String > answer = new ArrayList < String > ( ) ; while ( iter . hasMoreTokens ( ) ) { answer . add ( iter . nextToken ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "tokenize(" + expression + ", " + token + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexTokenize ( final Expression < E > expression , String regexTokenizer ) { final Pattern pattern = Pattern . compile ( regexTokenizer ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return Arrays . asList ( pattern . split ( text ) ) ; } @ Override public String toString ( ) { return "regexTokenize(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final String replacement ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final Expression < E > replacementExpression ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; String replacement = evaluateStringExpression ( replacementExpression , exchange ) ; if ( text == null || replacement == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > append ( final Expression < E > left , final Expression < E > right ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return evaluateStringExpression ( left , exchange ) + evaluateStringExpression ( right , exchange ) ; } @ Override public String toString ( ) { return "append(" + left + ", " + right + ")" ; } } ; } public static < E extends Exchange > String evaluateStringExpression ( Expression < E > expression , E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , value ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( name , defaultValue ) ; } } ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions ) { return concatExpression ( expressions , null ) ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions , final String expression ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Expression < E > expression : expressions ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text != null ) { buffer . append ( text ) ; } } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( expression != null ) { return expression ; } else { return "concat" + expressions ; } } } ; } } 	1
package org . apache . camel . spi ; import java . util . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . Service ; public interface LifecycleStrategy { void onContextStart ( CamelContext context ) ; void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) ; void onServiceAdd ( CamelContext context , Service service ) ; void onRoutesAdd ( Collection < Route > routes ) ; void onRouteContextCreate ( RouteContext routeContext ) ; } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SedaConsumer extends ServiceSupport implements Consumer , Runnable { private static final transient Log LOG = LogFactory . getLog ( SedaConsumer . class ) ; private SedaEndpoint endpoint ; private AsyncProcessor processor ; private Thread thread ; public SedaConsumer ( SedaEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; } @ Override public String toString ( ) { return "SedaConsumer: " + endpoint . getEndpointUri ( ) ; } public void run ( ) { while ( isRunAllowed ( ) ) { final Exchange exchange ; try { exchange = endpoint . getQueue ( ) . poll ( 1000 , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Interupted: " + e , e ) ; } continue ; } if ( exchange != null && isRunAllowed ( ) ) { try { processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } catch ( Exception e ) { LOG . error ( "Seda queue caught: " + e , e ) ; } } } } protected void doStart ( ) throws Exception { thread = new Thread ( this , getThreadName ( endpoint . getEndpointUri ( ) ) ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { thread . join ( ) ; } } 	1
package org . apache . camel . component . mail ; import javax . mail . internet . MimeMessage ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . mail . javamail . JavaMailSender ; import org . springframework . mail . javamail . MimeMessagePreparator ; public class MailProducer extends DefaultProducer < MailExchange > { private static final transient Log LOG = LogFactory . getLog ( MailProducer . class ) ; private final MailEndpoint endpoint ; private final JavaMailSender sender ; public MailProducer ( MailEndpoint endpoint , JavaMailSender sender ) { super ( endpoint ) ; this . endpoint = endpoint ; this . sender = sender ; } public void process ( final Exchange exchange ) { sender . send ( new MimeMessagePreparator ( ) { public void prepare ( MimeMessage mimeMessage ) throws Exception { endpoint . getBinding ( ) . populateMailMessage ( endpoint , mimeMessage , exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sending MimeMessage: " + MailUtils . dumpMessage ( mimeMessage ) ) ; } } } ) ; } } 	0
package org . apache . camel . model ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "optionalIdentifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class OptionalIdentifiedType < T extends OptionalIdentifiedType > { @ XmlTransient protected static Map < String , AtomicInteger > nodeCounters = new HashMap < String , AtomicInteger > ( ) ; @ XmlAttribute ( required = false ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlElement ( required = false ) private Description description ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Description getDescription ( ) { return description ; } public void setDescription ( Description description ) { this . description = description ; } public String getShortName ( ) { return "node" ; } public T description ( String text ) { if ( description == null ) { description = new Description ( ) ; } description . setText ( text ) ; return ( T ) this ; } public T description ( String text , String lang ) { description ( text ) ; description . setLang ( lang ) ; return ( T ) this ; } public T id ( String id ) { setId ( id ) ; return ( T ) this ; } public String idOrCreate ( ) { if ( id == null ) { setId ( createId ( ) ) ; } return getId ( ) ; } protected String createId ( ) { String key = getShortName ( ) ; return key + getNodeCounter ( key ) . incrementAndGet ( ) ; } protected static synchronized AtomicInteger getNodeCounter ( String key ) { AtomicInteger answer = nodeCounters . get ( key ) ; if ( answer == null ) { answer = new AtomicInteger ( 0 ) ; nodeCounters . put ( key , answer ) ; } return answer ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "groovy" ) public class GroovyExpression extends ExpressionType { public GroovyExpression ( ) { } public GroovyExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "groovy" ; } } 	0
package org . apache . camel . util ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . lang . annotation . Annotation ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class ObjectHelper { private static final transient Log LOG = LogFactory . getLog ( ObjectHelper . class ) ; private ObjectHelper ( ) { } @ Deprecated public static boolean equals ( Object a , Object b ) { return equal ( a , b ) ; } public static boolean equal ( Object a , Object b ) { if ( a == b ) { return true ; } if ( a instanceof byte [ ] && b instanceof byte [ ] ) { return equalByteArray ( ( byte [ ] ) a , ( byte [ ] ) b ) ; } return a != null && b != null && a . equals ( b ) ; } public static boolean equalByteArray ( byte [ ] a , byte [ ] b ) { if ( a == b ) { return true ; } if ( a != null && b != null && a . length == b . length ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] != b [ i ] ) { return false ; } } return true ; } return false ; } public static boolean isEqualToAny ( Object object , Object ... values ) { for ( Object value : values ) { if ( equal ( object , value ) ) { return true ; } } return false ; } public static int compare ( Object a , Object b ) { if ( a == b ) { return 0 ; } if ( a == null ) { return - 1 ; } if ( b == null ) { return 1 ; } if ( a instanceof Comparable ) { Comparable comparable = ( Comparable ) a ; return comparable . compareTo ( b ) ; } else { int answer = a . getClass ( ) . getName ( ) . compareTo ( b . getClass ( ) . getName ( ) ) ; if ( answer == 0 ) { answer = a . hashCode ( ) - b . hashCode ( ) ; } return answer ; } } public static Boolean toBoolean ( Object value ) { if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return "true" . equalsIgnoreCase ( value . toString ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } if ( value instanceof Integer ) { return ( Integer ) value > 0 ? Boolean . TRUE : Boolean . FALSE ; } return null ; } public static void notNull ( Object value , String name ) { if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified" ) ; } } public static String [ ] splitOnCharacter ( String value , String needle , int count ) { String rc [ ] = new String [ count ] ; rc [ 0 ] = value ; for ( int i = 1 ; i < count ; i ++ ) { String v = rc [ i - 1 ] ; int p = v . indexOf ( needle ) ; if ( p < 0 ) { return rc ; } rc [ i - 1 ] = v . substring ( 0 , p ) ; rc [ i ] = v . substring ( p + 1 ) ; } return rc ; } public static String removeStartingCharacters ( String text , char ch ) { int idx = 0 ; while ( text . charAt ( idx ) == ch ) { idx ++ ; } if ( idx > 0 ) { return text . substring ( idx ) ; } return text ; } public static String capitalize ( String text ) { if ( text == null ) { return null ; } int length = text . length ( ) ; if ( length == 0 ) { return text ; } String answer = text . substring ( 0 , 1 ) . toUpperCase ( ) ; if ( length > 1 ) { answer += text . substring ( 1 , length ) ; } return answer ; } @ SuppressWarnings ( "unchecked" ) public static boolean contains ( Object collectionOrArray , Object value ) { if ( collectionOrArray instanceof Collection ) { Collection collection = ( Collection ) collectionOrArray ; return collection . contains ( value ) ; } else if ( collectionOrArray instanceof String && value instanceof String ) { String str = ( String ) collectionOrArray ; String subStr = ( String ) value ; return str . contains ( subStr ) ; } else { Iterator iter = createIterator ( collectionOrArray ) ; while ( iter . hasNext ( ) ) { if ( equal ( value , iter . next ( ) ) ) { return true ; } } } return false ; } @ SuppressWarnings ( "unchecked" ) public static Iterator createIterator ( Object value ) { if ( value == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . iterator ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { List < Object > list = Arrays . asList ( ( Object [ ] ) value ) ; return list . iterator ( ) ; } else if ( value instanceof NodeList ) { final NodeList nodeList = ( NodeList ) value ; return new Iterator < Node > ( ) { int idx = - 1 ; public boolean hasNext ( ) { return ++ idx < nodeList . getLength ( ) ; } public Node next ( ) { return nodeList . item ( idx ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } else { return Collections . singletonList ( value ) . iterator ( ) ; } } public static boolean matches ( List list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof Boolean ) { Boolean flag = ( Boolean ) value ; return flag . booleanValue ( ) ; } else { return true ; } } return false ; } public static boolean isNotNullAndNonEmpty ( String text ) { return text != null && text . trim ( ) . length ( ) > 0 ; } public static boolean isNullOrBlank ( String text ) { return text == null || text . trim ( ) . length ( ) <= 0 ; } public static String getSystemProperty ( String name , String defaultValue ) { try { return System . getProperty ( name , defaultValue ) ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Caught security exception accessing system property: " + name + ". Reason: " + e , e ) ; } return defaultValue ; } } public static String name ( Class type ) { return type != null ? type . getName ( ) : null ; } public static String className ( Object value ) { return name ( value != null ? value . getClass ( ) : null ) ; } public static Class < ? > loadClass ( String name ) { return loadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } public static Class < ? > loadClass ( String name , ClassLoader loader ) { ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { try { return contextClassLoader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { try { return loader . loadClass ( name ) ; } catch ( ClassNotFoundException e1 ) { LOG . debug ( "Could not find class: " + name + ". Reason: " + e ) ; } } } return null ; } public static InputStream loadResourceAsStream ( String name ) { InputStream in = null ; ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { in = contextClassLoader . getResourceAsStream ( name ) ; } if ( in == null ) { in = ObjectHelper . class . getClassLoader ( ) . getResourceAsStream ( name ) ; } return in ; } public static Object invokeMethod ( Method method , Object instance , Object ... parameters ) { try { return method . invoke ( instance , parameters ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType ) { List < Method > answer = new ArrayList < Method > ( ) ; do { Method [ ] methods = type . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( method . getAnnotation ( annotationType ) != null ) { answer . add ( method ) ; } } type = type . getSuperclass ( ) ; } while ( type != null ) ; return answer ; } public static String asString ( Object [ ] objects ) { if ( objects == null ) { return "null" ; } else { StringBuffer buffer = new StringBuffer ( "{" ) ; int counter = 0 ; for ( Object object : objects ) { if ( counter ++ > 0 ) { buffer . append ( ", " ) ; } String text = ( object == null ) ? "null" : object . toString ( ) ; buffer . append ( text ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } } public static boolean isAssignableFrom ( Class a , Class b ) { a = convertPrimitiveTypeToWrapperType ( a ) ; b = convertPrimitiveTypeToWrapperType ( b ) ; return a . isAssignableFrom ( b ) ; } public static Class convertPrimitiveTypeToWrapperType ( Class type ) { Class rc = type ; if ( type . isPrimitive ( ) ) { if ( type == int . class ) { rc = Integer . class ; } else if ( type == long . class ) { rc = Long . class ; } else if ( type == double . class ) { rc = Double . class ; } else if ( type == float . class ) { rc = Float . class ; } else if ( type == short . class ) { rc = Short . class ; } else if ( type == byte . class ) { rc = Byte . class ; } } return rc ; } public static String getDefaultCharacterSet ( ) { return Charset . defaultCharset ( ) . name ( ) ; } public static String getPropertyName ( Method method ) { String propertyName = method . getName ( ) ; if ( propertyName . startsWith ( "set" ) && method . getParameterTypes ( ) . length == 1 ) { propertyName = propertyName . substring ( 3 , 4 ) . toLowerCase ( ) + propertyName . substring ( 4 ) ; } return propertyName ; } public static boolean hasAnnotation ( Annotation [ ] annotations , Class < ? > type ) { for ( Annotation annotation : annotations ) { if ( type . isInstance ( annotation ) ) { return true ; } } return false ; } public static void close ( Closeable closeable , String name , Log log ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException e ) { if ( log != null ) { log . warn ( "Could not close: " + name + ". Reason: " + e , e ) ; } } } } public static < T > T cast ( Class < T > toType , Object value ) { if ( toType == boolean . class ) { return ( T ) cast ( Boolean . class , value ) ; } else if ( toType . isPrimitive ( ) ) { Class newType = convertPrimitiveTypeToWrapperType ( toType ) ; if ( newType != toType ) { return ( T ) cast ( newType , value ) ; } } try { return toType . cast ( value ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( "Failed to convert: " + value + " to type: " + toType . getName ( ) + " due to: " + e , e ) ; } } public static < T > T newInstance ( Class < T > type ) { try { return type . newInstance ( ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static < T > T newInstance ( Class < ? > actualType , Class < T > expectedType ) { try { Object value = actualType . newInstance ( ) ; return cast ( expectedType , value ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isJavaIdentifier ( String name ) { if ( name == null ) { return false ; } int size = name . length ( ) ; if ( size < 1 ) { return false ; } if ( Character . isJavaIdentifierStart ( name . charAt ( 0 ) ) ) { for ( int i = 1 ; i < size ; i ++ ) { if ( ! Character . isJavaIdentifierPart ( name . charAt ( i ) ) ) { return false ; } } return true ; } return false ; } public static Object type ( Object bean ) { return bean != null ? bean . getClass ( ) : null ; } public static boolean evaluateValuePredicate ( Object value ) { if ( value instanceof Boolean ) { Boolean aBoolean = ( Boolean ) value ; return aBoolean . booleanValue ( ) ; } return value != null ; } } 	1
package org . apache . camel . component . jcr ; import java . net . URI ; import java . net . URISyntaxException ; import javax . jcr . Credentials ; import javax . jcr . Repository ; import javax . jcr . SimpleCredentials ; import org . apache . camel . Consumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultExchange ; public class JcrEndpoint extends DefaultEndpoint < DefaultExchange > { private Credentials credentials ; private Repository repository ; private String base ; @ SuppressWarnings ( "unchecked" ) protected JcrEndpoint ( String endpointUri , JcrComponent component ) { super ( endpointUri , component ) ; try { URI uri = new URI ( endpointUri ) ; if ( uri . getUserInfo ( ) != null && uri . getAuthority ( ) != null ) { this . credentials = new SimpleCredentials ( uri . getUserInfo ( ) , uri . getAuthority ( ) . toCharArray ( ) ) ; } this . repository = ( Repository ) component . getCamelContext ( ) . getRegistry ( ) . lookup ( uri . getHost ( ) ) ; if ( repository == null ) { throw new RuntimeCamelException ( "No JCR repository defined under '" + uri . getHost ( ) + "'" ) ; } this . base = uri . getPath ( ) . replaceAll ( "^/" , "" ) ; } catch ( URISyntaxException e ) { throw new IllegalArgumentException ( "Invalid URI: " + endpointUri , e ) ; } } public JcrEndpoint ( String endpointUri , String base , Credentials credentials , Repository repository ) { super ( endpointUri ) ; this . base = base ; this . credentials = credentials ; this . repository = repository ; } public Consumer < DefaultExchange > createConsumer ( Processor processor ) throws Exception { throw new RuntimeCamelException ( "No consumer endpoint support for JCR available" ) ; } public Producer < DefaultExchange > createProducer ( ) throws Exception { return new JcrProducer ( this ) ; } public boolean isSingleton ( ) { return false ; } protected Repository getRepository ( ) { return repository ; } protected Credentials getCredentials ( ) { return credentials ; } protected String getBase ( ) { return base ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; public class MethodInfo { private Class type ; private Method method ; private final List < ParameterInfo > parameters ; private final List < ParameterInfo > bodyParameters ; private final boolean hasCustomAnnotation ; private Expression parametersExpression ; public MethodInfo ( Class type , Method method , List < ParameterInfo > parameters , List < ParameterInfo > bodyParameters , boolean hasCustomAnnotation ) { this . type = type ; this . method = method ; this . parameters = parameters ; this . bodyParameters = bodyParameters ; this . hasCustomAnnotation = hasCustomAnnotation ; this . parametersExpression = createParametersExpression ( ) ; } public String toString ( ) { return method . toString ( ) ; } public MethodInvocation createMethodInvocation ( final Object pojo , final Exchange messageExchange ) { final Object [ ] arguments = ( Object [ ] ) parametersExpression . evaluate ( messageExchange ) ; return new MethodInvocation ( ) { public Method getMethod ( ) { return method ; } public Object [ ] getArguments ( ) { return arguments ; } public Object proceed ( ) throws Throwable { return invoke ( method , pojo , arguments , messageExchange ) ; } public Object getThis ( ) { return pojo ; } public AccessibleObject getStaticPart ( ) { return method ; } } ; } public Class getType ( ) { return type ; } public Method getMethod ( ) { return method ; } public Expression getParametersExpression ( ) { return parametersExpression ; } public List < ParameterInfo > getBodyParameters ( ) { return bodyParameters ; } public Class getBodyParameterType ( ) { ParameterInfo parameterInfo = bodyParameters . get ( 0 ) ; return parameterInfo . getType ( ) ; } public boolean bodyParameterMatches ( Class bodyType ) { Class actualType = getBodyParameterType ( ) ; return actualType != null && ObjectHelper . isAssignableFrom ( bodyType , actualType ) ; } public List < ParameterInfo > getParameters ( ) { return parameters ; } public boolean hasBodyParameter ( ) { return ! bodyParameters . isEmpty ( ) ; } public boolean isHasCustomAnnotation ( ) { return hasCustomAnnotation ; } public boolean isReturnTypeVoid ( ) { return method . getReturnType ( ) . getName ( ) . equals ( "void" ) ; } protected Object invoke ( Method mth , Object pojo , Object [ ] arguments , Exchange exchange ) throws IllegalAccessException , InvocationTargetException { return mth . invoke ( pojo , arguments ) ; } protected Expression createParametersExpression ( ) { final int size = parameters . size ( ) ; final Expression [ ] expressions = new Expression [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Expression parameterExpression = parameters . get ( i ) . getExpression ( ) ; expressions [ i ] = parameterExpression ; } return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object [ ] answer = new Object [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Object value = expressions [ i ] . evaluate ( exchange ) ; Class expectedType = parameters . get ( i ) . getType ( ) ; value = ExchangeHelper . convertToType ( exchange , expectedType , value ) ; answer [ i ] = value ; } return answer ; } @ Override public String toString ( ) { return "ParametersExpression: " + Arrays . asList ( expressions ) ; } } ; } } 	1
package org . apache . camel . impl . converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . spi . Injector ; public interface TypeConverterRegistry { void addTypeConverter ( Class toType , Class fromType , TypeConverter typeConverter ) ; Injector getInjector ( ) ; } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . bean . RegistryBean ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "bean" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class BeanRef extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlAttribute ( required = false ) private String method ; @ XmlAttribute ( required = false ) private Class beanType ; @ XmlTransient private Object bean ; public BeanRef ( ) { } public BeanRef ( String ref ) { this . ref = ref ; } public BeanRef ( String ref , String method ) { this . ref = ref ; this . method = method ; } @ Override public String toString ( ) { return "Bean[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "bean" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public void setBean ( Object bean ) { this . bean = bean ; } public Class getBeanType ( ) { return beanType ; } public void setBeanType ( Class beanType ) { this . beanType = beanType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { BeanProcessor answer ; if ( ref != null ) { answer = new BeanProcessor ( new RegistryBean ( routeContext . getCamelContext ( ) , ref ) ) ; } else { if ( bean == null ) { ObjectHelper . notNull ( beanType , "bean, ref or beanType" ) ; bean = CamelContextHelper . newInstance ( routeContext . getCamelContext ( ) , beanType ) ; } answer = new BeanProcessor ( bean , routeContext . getCamelContext ( ) ) ; } if ( method != null ) { answer . setMethod ( method ) ; } return answer ; } @ Override public String getLabel ( ) { if ( ref != null ) { String methodText = "" ; if ( method != null ) { methodText = " method: " + method ; } return "ref: " + ref + methodText ; } else if ( bean != null ) { return bean . toString ( ) ; } else if ( beanType != null ) { return beanType . getName ( ) ; } else { return "" ; } } } 	1
package org . apache . camel . component . mail ; import java . util . Iterator ; import java . util . Map ; import javax . activation . DataHandler ; import javax . mail . Address ; import javax . mail . BodyPart ; import javax . mail . Message ; import javax . mail . MessagingException ; import javax . mail . Part ; import javax . mail . internet . InternetAddress ; import javax . mail . internet . MimeBodyPart ; import javax . mail . internet . MimeMessage ; import javax . mail . internet . MimeMultipart ; import org . apache . camel . Exchange ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . converter . ObjectConverter ; public class MailBinding { public void populateMailMessage ( MailEndpoint endpoint , MimeMessage mimeMessage , Exchange exchange ) throws MessagingException { appendHeadersFromCamel ( mimeMessage , exchange , exchange . getIn ( ) ) ; Map < Message . RecipientType , String > recipients = endpoint . getConfiguration ( ) . getRecipients ( ) ; if ( recipients . containsKey ( Message . RecipientType . TO ) ) { mimeMessage . setRecipients ( Message . RecipientType . TO , recipients . get ( Message . RecipientType . TO ) ) ; } if ( recipients . containsKey ( Message . RecipientType . CC ) ) { mimeMessage . setRecipients ( Message . RecipientType . CC , recipients . get ( Message . RecipientType . CC ) ) ; } if ( recipients . containsKey ( Message . RecipientType . BCC ) ) { mimeMessage . setRecipients ( Message . RecipientType . BCC , recipients . get ( Message . RecipientType . BCC ) ) ; } if ( mimeMessage . getAllRecipients ( ) == null ) { throw new IllegalArgumentException ( "The mail message does not have any recipients set." ) ; } if ( empty ( mimeMessage . getFrom ( ) ) ) { String from = endpoint . getConfiguration ( ) . getFrom ( ) ; mimeMessage . setFrom ( new InternetAddress ( from ) ) ; } if ( exchange . getIn ( ) . hasAttachments ( ) ) { appendAttachmentsFromCamel ( mimeMessage , exchange , exchange . getIn ( ) ) ; } else { mimeMessage . setText ( exchange . getIn ( ) . getBody ( String . class ) ) ; } } public Object extractBodyFromMail ( MailExchange exchange , Message message ) { try { return message . getContent ( ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Failed to extract body due to: " + e . getMessage ( ) + ". Exchange: " + exchange + ". Message: " + message , e ) ; } } protected void appendHeadersFromCamel ( MimeMessage mimeMessage , Exchange exchange , org . apache . camel . Message camelMessage ) throws MessagingException { for ( Map . Entry < String , Object > entry : camelMessage . getHeaders ( ) . entrySet ( ) ) { String headerName = entry . getKey ( ) ; Object headerValue = entry . getValue ( ) ; if ( headerValue != null ) { if ( shouldOutputHeader ( camelMessage , headerName , headerValue ) ) { if ( ObjectConverter . isCollection ( headerValue ) ) { Iterator iter = ObjectConverter . iterator ( headerValue ) ; while ( iter . hasNext ( ) ) { Object value = iter . next ( ) ; mimeMessage . addHeader ( headerName , asString ( exchange , value ) ) ; } } else { mimeMessage . setHeader ( headerName , asString ( exchange , headerValue ) ) ; } } } } } protected void appendAttachmentsFromCamel ( MimeMessage mimeMessage , Exchange exchange , org . apache . camel . Message camelMessage ) throws MessagingException { MimeMultipart multipart = new MimeMultipart ( ) ; multipart . setSubType ( "mixed" ) ; MimeBodyPart textBodyPart = new MimeBodyPart ( ) ; textBodyPart . setContent ( exchange . getIn ( ) . getBody ( String . class ) , "text/plain" ) ; multipart . addBodyPart ( textBodyPart ) ; for ( Map . Entry < String , DataHandler > entry : camelMessage . getAttachments ( ) . entrySet ( ) ) { String attachmentFilename = entry . getKey ( ) ; DataHandler handler = entry . getValue ( ) ; if ( handler != null ) { if ( shouldOutputAttachment ( camelMessage , attachmentFilename , handler ) ) { BodyPart messageBodyPart = new MimeBodyPart ( ) ; messageBodyPart . setDataHandler ( handler ) ; messageBodyPart . setFileName ( attachmentFilename ) ; messageBodyPart . setDisposition ( Part . ATTACHMENT ) ; multipart . addBodyPart ( messageBodyPart ) ; } } } mimeMessage . setContent ( multipart ) ; } protected boolean shouldOutputHeader ( org . apache . camel . Message camelMessage , String headerName , Object headerValue ) { return true ; } protected boolean shouldOutputAttachment ( org . apache . camel . Message camelMessage , String attachmentFilename , DataHandler handler ) { return true ; } private static boolean empty ( Address [ ] addresses ) { return addresses == null || addresses . length == 0 ; } private static String asString ( Exchange exchange , Object value ) { return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , value ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . Service ; import org . apache . camel . util . ServiceHelper ; public abstract class ServiceSupport implements Service { private static int threadCounter ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private AtomicBoolean starting = new AtomicBoolean ( false ) ; private AtomicBoolean stopping = new AtomicBoolean ( false ) ; private AtomicBoolean stopped = new AtomicBoolean ( false ) ; private Collection childServices ; public void start ( ) throws Exception { if ( started . compareAndSet ( false , true ) ) { starting . set ( true ) ; try { if ( childServices != null ) { ServiceHelper . startServices ( childServices ) ; } doStart ( ) ; } finally { starting . set ( false ) ; } } } public void stop ( ) throws Exception { if ( started . get ( ) && stopping . compareAndSet ( false , true ) ) { try { doStop ( ) ; } finally { if ( childServices != null ) { ServiceHelper . stopServices ( childServices ) ; } stopped . set ( true ) ; started . set ( false ) ; stopping . set ( false ) ; } } } public boolean isStarted ( ) { return started . get ( ) ; } public boolean isStarting ( ) { return starting . get ( ) ; } public boolean isStopping ( ) { return stopping . get ( ) ; } protected boolean isRunAllowed ( ) { return ! ( stopping . get ( ) || stopped . get ( ) ) ; } public boolean isStopped ( ) { return stopped . get ( ) ; } protected abstract void doStart ( ) throws Exception ; protected abstract void doStop ( ) throws Exception ; protected String getThreadName ( String prefix ) { return prefix + " thread:" + nextThreadCounter ( ) ; } protected static synchronized int nextThreadCounter ( ) { return ++ threadCounter ; } protected void addChildService ( Object childService ) { if ( childServices == null ) { childServices = new ArrayList ( ) ; } childServices . add ( childService ) ; } protected boolean removeChildService ( Object childService ) { if ( childServices != null ) { return childServices . remove ( childService ) ; } else { return false ; } } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/spring" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . model ; 	0
package org . apache . camel . converter . stream ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public interface StreamCache { } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . logging . Level ; import java . util . logging . Logger ; import javax . xml . namespace . QName ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . apache . cxf . binding . soap . SoapMessage ; import org . apache . cxf . binding . soap . model . SoapBindingInfo ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . helpers . DOMUtils ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . service . model . BindingInfo ; import org . apache . cxf . service . model . BindingMessageInfo ; import org . apache . cxf . service . model . BindingOperationInfo ; import org . apache . cxf . service . model . MessagePartInfo ; public class SoapMessageInInterceptor extends AbstractMessageInInterceptor < SoapMessage > { private static final Logger LOG = LogUtils . getL7dLogger ( SoapMessageInInterceptor . class ) ; public SoapMessageInInterceptor ( ) { super ( Phase . READ ) ; } protected Logger getLogger ( ) { return LOG ; } protected boolean isFaultMessage ( SoapMessage message ) { return false ; } protected BindingOperationInfo getBindingOperation ( SoapMessage message , Document doc ) { Exchange ex = message . getExchange ( ) ; SoapBindingInfo soapBinding = ( SoapBindingInfo ) ex . get ( BindingInfo . class ) ; Element payloadEl = ( Element ) doc . getChildNodes ( ) . item ( 0 ) ; QName startQName = new QName ( payloadEl . getNamespaceURI ( ) , payloadEl . getLocalName ( ) ) ; boolean client = isRequestor ( message ) ; List < BindingOperationInfo > boiList = new ArrayList < BindingOperationInfo > ( ) ; for ( BindingOperationInfo boi : soapBinding . getOperations ( ) ) { String style = soapBinding . getStyle ( boi . getOperationInfo ( ) ) ; QName rootName = null ; if ( "rpc" . equals ( style ) ) { rootName = boi . getOperationInfo ( ) . getName ( ) ; } else { BindingMessageInfo bmi = client ? boi . getOutput ( ) : boi . getInput ( ) ; if ( bmi != null ) { Collection < MessagePartInfo > bodyParts = bmi . getMessageParts ( ) ; if ( bodyParts . size ( ) == 1 ) { MessagePartInfo p = bodyParts . iterator ( ) . next ( ) ; rootName = p . getConcreteName ( ) ; } } } if ( startQName . equals ( rootName ) ) { boiList . add ( boi ) ; } } if ( boiList . size ( ) > 1 && LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "Mulitple matching BindingOperationIno found in Binding." ) ; } return boiList . size ( ) != 1 ? null : boiList . get ( 0 ) ; } protected List < Element > getPartList ( SoapMessage inMessage , Element rootNode , BindingMessageInfo bmi ) { List < Element > partList = new ArrayList < Element > ( ) ; Exchange ex = inMessage . getExchange ( ) ; SoapBindingInfo soapBinding = ( SoapBindingInfo ) ex . get ( BindingInfo . class ) ; String style = soapBinding . getStyle ( bmi . getBindingOperation ( ) . getOperationInfo ( ) ) ; if ( "rpc" . equals ( style ) ) { rootNode = ( Element ) DOMUtils . getChild ( rootNode , Node . ELEMENT_NODE ) ; } partList . add ( rootNode ) ; return partList ; } protected Element getHeader ( SoapMessage inMessage ) { Element element = null ; return element ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import javax . xml . transform . stream . StreamSource ; public class BytesSource extends StreamSource { private byte [ ] data ; public BytesSource ( byte [ ] data ) { this . data = data ; } public BytesSource ( byte [ ] data , String systemId ) { this . data = data ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { return new ByteArrayInputStream ( data ) ; } public Reader getReader ( ) { return new InputStreamReader ( getInputStream ( ) ) ; } public byte [ ] getData ( ) { return data ; } public String toString ( ) { return "BytesSource[" + new String ( data ) + "]" ; } } 	1
package org . apache . camel . processor . interceptor ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . processor . DelegateProcessor ; public class DebugInterceptor extends DelegateProcessor { private final ProcessorType node ; private final List < Exchange > exchanges ; private final List < ExceptionEvent > exceptions ; private Predicate traceFilter ; private Breakpoint breakpoint = new Breakpoint ( ) ; private boolean traceExceptions = true ; public DebugInterceptor ( ProcessorType node , Processor target , List < Exchange > exchanges , List < ExceptionEvent > exceptions ) { super ( target ) ; this . node = node ; this . exchanges = exchanges ; this . exceptions = exceptions ; } @ Override public String toString ( ) { return "DebugInterceptor[" + node + "]" ; } public void process ( Exchange exchange ) throws Exception { checkForBreakpoint ( exchange ) ; addTraceExchange ( exchange ) ; try { super . proceed ( exchange ) ; } catch ( Exception e ) { onException ( exchange , e ) ; throw e ; } catch ( Error e ) { onException ( exchange , e ) ; throw e ; } } public ProcessorType getNode ( ) { return node ; } public List < Exchange > getExchanges ( ) { return exchanges ; } public List < ExceptionEvent > getExceptions ( ) { return exceptions ; } public Breakpoint getBreakpoint ( ) { return breakpoint ; } public Predicate getTraceFilter ( ) { return traceFilter ; } public void setTraceFilter ( Predicate traceFilter ) { this . traceFilter = traceFilter ; } public boolean isTraceExceptions ( ) { return traceExceptions ; } public void setTraceExceptions ( boolean traceExceptions ) { this . traceExceptions = traceExceptions ; } protected void checkForBreakpoint ( Exchange exchange ) { breakpoint . waitForBreakpoint ( exchange ) ; } protected void onException ( Exchange exchange , Throwable e ) { if ( shouldTraceExceptionEvents ( exchange , e ) ) { exceptions . add ( new ExceptionEvent ( this , exchange , e ) ) ; } } private boolean shouldTraceExceptionEvents ( Exchange exchange , Throwable e ) { return isTraceExceptions ( ) ; } protected void addTraceExchange ( Exchange exchange ) { if ( shouldTraceExchange ( exchange ) ) { exchanges . add ( copyExchange ( exchange ) ) ; } } protected Exchange copyExchange ( Exchange previousExchange ) { Exchange answer = previousExchange . newInstance ( ) ; answer . getProperties ( ) . putAll ( previousExchange . getProperties ( ) ) ; answer . getIn ( ) . copyFrom ( previousExchange . getIn ( ) ) ; Message previousOut = previousExchange . getOut ( false ) ; if ( previousOut != null ) { answer . getOut ( ) . copyFrom ( previousOut ) ; } return answer ; } protected boolean shouldTraceExchange ( Exchange exchange ) { return traceFilter == null || traceFilter . matches ( exchange ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . Proxy ; import org . apache . camel . Endpoint ; import org . apache . camel . Producer ; public final class ProxyHelper { private ProxyHelper ( ) { } public static Object createProxy ( final Endpoint endpoint , ClassLoader cl , Class interfaces [ ] ) throws Exception { final Producer producer = endpoint . createProducer ( ) ; return Proxy . newProxyInstance ( cl , interfaces , new CamelInvocationHandler ( endpoint , producer ) ) ; } public static Object createProxy ( Endpoint endpoint , Class interfaces [ ] ) throws Exception { if ( interfaces . length < 1 ) { throw new IllegalArgumentException ( "You must provide at least 1 interface class." ) ; } return createProxy ( endpoint , interfaces [ 0 ] . getClassLoader ( ) , interfaces ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , ClassLoader cl , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , cl , new Class [ ] { interfaceClass } ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , Class < T > interfaceClass ) throws Exception { return ( T ) createProxy ( endpoint , new Class [ ] { interfaceClass } ) ; } } 	1
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . processor . RoutingSlip ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "routingSlip" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RoutingSlipType extends ProcessorType < ProcessorType > { public static final String ROUTING_SLIP_HEADER = "routingSlipHeader" ; public static final String DEFAULT_DELIMITER = "," ; @ XmlAttribute private String headerName ; @ XmlAttribute private String uriDelimiter ; public RoutingSlipType ( ) { this ( ROUTING_SLIP_HEADER , DEFAULT_DELIMITER ) ; } public RoutingSlipType ( String headerName ) { this ( headerName , DEFAULT_DELIMITER ) ; } public RoutingSlipType ( String headerName , String uriDelimiter ) { setHeaderName ( headerName ) ; setUriDelimiter ( uriDelimiter ) ; } @ Override public String toString ( ) { return "RoutingSlip[ headerName=" + getHeaderName ( ) + " uriDelimiter=" + getUriDelimiter ( ) + "]" ; } @ Override public String getShortName ( ) { return "routingSlip" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new RoutingSlip ( getHeaderName ( ) , getUriDelimiter ( ) ) ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return this . headerName ; } public void setUriDelimiter ( String uriDelimiter ) { this . uriDelimiter = uriDelimiter ; } public String getUriDelimiter ( ) { return uriDelimiter ; } } 	0
package org . apache . camel . model ; import java . util . Collection ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Aggregator ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "aggregator" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class AggregatorType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private AggregationCollection aggregationCollection ; @ XmlAttribute ( required = false ) private Integer batchSize ; @ XmlAttribute ( required = false ) private Long batchTimeout ; @ XmlAttribute ( required = false ) private String strategyRef ; @ XmlElement ( name = "completedPredicate" , required = false ) private CompletedPredicate completedPredicate ; public AggregatorType ( ) { } public AggregatorType ( Expression correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( ExpressionType correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { super ( correlationExpression ) ; this . aggregationStrategy = aggregationStrategy ; } @ Override public String toString ( ) { return "Aggregator[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "aggregator" ; } @ SuppressWarnings ( "unchecked" ) @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routes , aggregator ) ; } private void doAddRoute ( RouteContext routeContext , Collection < Route > routes , final Aggregator aggregator ) throws Exception { Route route = new Route < Exchange > ( aggregator . getEndpoint ( ) , aggregator ) { @ Override public String toString ( ) { return "AggregatorRoute[" + getEndpoint ( ) + " -> " + aggregator . getProcessor ( ) + "]" ; } } ; routes . add ( route ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { final Aggregator aggregator = createAggregator ( routeContext ) ; doAddRoute ( routeContext , routeContext . getCamelContext ( ) . getRoutes ( ) , aggregator ) ; routeContext . setIsRouteAdded ( true ) ; return aggregator ; } protected Aggregator createAggregator ( RouteContext routeContext ) throws Exception { Endpoint from = routeContext . getEndpoint ( ) ; final Processor processor = routeContext . createProcessor ( this ) ; final Aggregator aggregator ; if ( aggregationCollection != null ) { aggregator = new Aggregator ( from , processor , aggregationCollection ) ; } else { AggregationStrategy strategy = getAggregationStrategy ( ) ; if ( strategy == null && strategyRef != null ) { strategy = routeContext . lookup ( strategyRef , AggregationStrategy . class ) ; } if ( strategy == null ) { strategy = new UseLatestAggregationStrategy ( ) ; } Expression aggregateExpression = getExpression ( ) . createExpression ( routeContext ) ; Predicate predicate = null ; if ( completedPredicate != null ) { predicate = completedPredicate . createPredicate ( routeContext ) ; } if ( predicate != null ) { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy , predicate ) ; } else { aggregator = new Aggregator ( from , processor , aggregateExpression , strategy ) ; } } if ( batchSize != null ) { aggregator . setBatchSize ( batchSize ) ; } if ( batchTimeout != null ) { aggregator . setBatchTimeout ( batchTimeout ) ; } return aggregator ; } public AggregationCollection getAggregationCollection ( ) { return aggregationCollection ; } public void setAggregationCollection ( AggregationCollection aggregationCollection ) { this . aggregationCollection = aggregationCollection ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public Integer getBatchSize ( ) { return batchSize ; } public void setBatchSize ( Integer batchSize ) { this . batchSize = batchSize ; } public Long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( Long batchTimeout ) { this . batchTimeout = batchTimeout ; } public String getStrategyRef ( ) { return strategyRef ; } public void setStrategyRef ( String strategyRef ) { this . strategyRef = strategyRef ; } public CompletedPredicate getCompletePredicate ( ) { return completedPredicate ; } public void setCompletePredicate ( CompletedPredicate completedPredicate ) { this . completedPredicate = completedPredicate ; } public AggregatorType batchSize ( int batchSize ) { setBatchSize ( batchSize ) ; return this ; } public AggregatorType batchTimeout ( long batchTimeout ) { setBatchTimeout ( batchTimeout ) ; return this ; } public ExpressionClause < AggregatorType > completedPredicate ( ) { checkNoCompletedPredicate ( ) ; ExpressionClause < AggregatorType > clause = new ExpressionClause < AggregatorType > ( this ) ; completedPredicate = new CompletedPredicate ( clause ) ; return clause ; } public AggregatorType completedPredicate ( Predicate predicate ) { checkNoCompletedPredicate ( ) ; completedPredicate = new CompletedPredicate ( predicate ) ; return this ; } protected void checkNoCompletedPredicate ( ) { if ( completedPredicate != null ) { throw new IllegalArgumentException ( "There already is a completedPredicate defined for this aggregator: " + this ) ; } } } 	1
package org . apache . camel . component . cxf . util ; import java . io . IOException ; import org . apache . cxf . message . Message ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . Destination ; import org . apache . cxf . transport . MessageObserver ; import org . apache . cxf . ws . addressing . EndpointReferenceType ; public class NullDestination implements Destination { MessageObserver messageObserver ; public NullDestination ( ) { } public EndpointReferenceType getAddress ( ) { return null ; } public Conduit getBackChannel ( Message inMessage , Message partialResponse , EndpointReferenceType address ) throws IOException { return null ; } public MessageObserver getMessageObserver ( ) { return messageObserver ; } public void shutdown ( ) { messageObserver = null ; } public void setMessageObserver ( MessageObserver observer ) { messageObserver = observer ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Method ; public interface MethodInvocation { Method getMethod ( ) ; Object [ ] getArguments ( ) ; Object proceed ( ) throws Throwable ; Object getThis ( ) ; AccessibleObject getStaticPart ( ) ; } 	1
package org . apache . camel . language ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . CONSTRUCTOR } ) public @ interface LanguageExpression { String language ( ) ; String expression ( ) ; } 	0
package org . apache . camel . util ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLDecoder ; import java . util . Arrays ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . jar . JarEntry ; import java . util . jar . JarInputStream ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResolverUtil < T > { protected static final transient Log LOG = LogFactory . getLog ( ResolverUtil . class ) ; public static interface Test { boolean matches ( Class type ) ; } public static class IsA implements Test { private Class parent ; public IsA ( Class parentType ) { this . parent = parentType ; } public boolean matches ( Class type ) { return type != null && parent . isAssignableFrom ( type ) ; } @ Override public String toString ( ) { return "is assignable to " + parent . getSimpleName ( ) ; } } public static class AnnotatedWith implements Test { private Class < ? extends Annotation > annotation ; public AnnotatedWith ( Class < ? extends Annotation > annotation ) { this . annotation = annotation ; } public boolean matches ( Class type ) { return type != null && type . isAnnotationPresent ( annotation ) ; } @ Override public String toString ( ) { return "annotated with @" + annotation . getSimpleName ( ) ; } } private Set < Class < ? extends T > > matches = new HashSet < Class < ? extends T > > ( ) ; private Set < ClassLoader > classLoaders ; public Set < Class < ? extends T > > getClasses ( ) { return matches ; } public Set < ClassLoader > getClassLoaders ( ) { if ( classLoaders == null ) { classLoaders = new HashSet < ClassLoader > ( ) ; classLoaders . add ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; classLoaders . add ( ResolverUtil . class . getClassLoader ( ) ) ; } return classLoaders ; } public void setClassLoaders ( Set < ClassLoader > classLoaders ) { this . classLoaders = classLoaders ; } public void findImplementations ( Class parent , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for implementations of " + parent . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new IsA ( parent ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void findAnnotated ( Class < ? extends Annotation > annotation , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for annotations of " + annotation . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new AnnotatedWith ( annotation ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void find ( Test test , String packageName ) { packageName = packageName . replace ( '.' , '/' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; for ( ClassLoader classLoader : set ) { find ( test , packageName , classLoader ) ; } } protected void find ( Test test , String packageName , ClassLoader loader ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching for: " + test + " in package: " + packageName + " using classloader: " + loader . getClass ( ) . getName ( ) ) ; } if ( loader . getClass ( ) . getName ( ) . endsWith ( "org.apache.felix.framework.searchpolicy.ContentClassLoader" ) ) { LOG . trace ( "This is not an URL classloader, skipping" ) ; return ; } try { Method mth = loader . getClass ( ) . getMethod ( "getBundle" , new Class [ ] { } ) ; if ( mth != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from osgi buindle using classloader: " + loader ) ; } loadImplementationsInBundle ( test , packageName , loader , mth ) ; return ; } } catch ( NoSuchMethodException e ) { LOG . trace ( "It's not an osgi bundle classloader" ) ; } Enumeration < URL > urls ; try { urls = getResources ( loader , packageName ) ; if ( ! urls . hasMoreElements ( ) ) { LOG . trace ( "No URLs returned by classloader" ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read package: " + packageName , ioe ) ; return ; } while ( urls . hasMoreElements ( ) ) { URL url = null ; try { url = urls . nextElement ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "URL from classloader: " + url ) ; } String urlPath = url . getFile ( ) ; urlPath = URLDecoder . decode ( urlPath , "UTF-8" ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Decoded urlPath: " + urlPath ) ; } if ( urlPath . startsWith ( "file:" ) ) { urlPath = urlPath . substring ( 5 ) ; } if ( urlPath . startsWith ( "bundle:" ) ) { LOG . trace ( "It's a virtual osgi bundle, skipping" ) ; continue ; } if ( urlPath . indexOf ( '!' ) > 0 ) { urlPath = urlPath . substring ( 0 , urlPath . indexOf ( '!' ) ) ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Scanning for classes in [" + urlPath + "] matching criteria: " + test ) ; } File file = new File ( urlPath ) ; if ( file . isDirectory ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from directory: " + file ) ; } loadImplementationsInDirectory ( test , packageName , file ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from jar: " + file ) ; } loadImplementationsInJar ( test , packageName , file ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read entries in url: " + url , ioe ) ; } } } protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Getting resource URL for package: " + packageName + " with classloader: " + loader ) ; } return loader . getResources ( packageName ) ; } private void loadImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { Set < String > urls = OsgiUtil . getImplementationsInBundle ( test , packageName , loader , mth ) ; if ( urls != null ) { for ( String url : urls ) { addIfMatching ( test , url ) ; } } } private static final class OsgiUtil { private OsgiUtil ( ) { } static Set < String > getImplementationsInBundle ( Test test , String packageName , ClassLoader loader , Method mth ) { try { org . osgi . framework . Bundle bundle = ( org . osgi . framework . Bundle ) mth . invoke ( loader ) ; org . osgi . framework . Bundle [ ] bundles = bundle . getBundleContext ( ) . getBundles ( ) ; Set < String > urls = new HashSet < String > ( ) ; for ( org . osgi . framework . Bundle bd : bundles ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching in bundle:" + bd ) ; } Enumeration < URL > paths = bd . findEntries ( "/" + packageName , "*.class" , true ) ; while ( paths != null && paths . hasMoreElements ( ) ) { URL path = paths . nextElement ( ) ; urls . add ( path . getPath ( ) . substring ( 1 ) ) ; } } return urls ; } catch ( Throwable t ) { LOG . error ( "Could not search osgi bundles for classes matching criteria: " + test + "due to an Exception: " + t . getMessage ( ) ) ; return null ; } } } private void loadImplementationsInDirectory ( Test test , String parent , File location ) { File [ ] files = location . listFiles ( ) ; StringBuilder builder = null ; for ( File file : files ) { builder = new StringBuilder ( 100 ) ; String name = file . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; builder . append ( parent ) . append ( "/" ) . append ( name ) ; String packageOrClass = parent == null ? name : builder . toString ( ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageOrClass , file ) ; } else if ( name . endsWith ( ".class" ) ) { addIfMatching ( test , packageOrClass ) ; } } } } private void loadImplementationsInJar ( Test test , String parent , File jarfile ) { JarInputStream jarStream = null ; try { jarStream = new JarInputStream ( new FileInputStream ( jarfile ) ) ; JarEntry entry ; while ( ( entry = jarStream . getNextJarEntry ( ) ) != null ) { String name = entry . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; if ( ! entry . isDirectory ( ) && name . startsWith ( parent ) && name . endsWith ( ".class" ) ) { addIfMatching ( test , name ) ; } } } } catch ( IOException ioe ) { LOG . error ( "Could not search jar file '" + jarfile + "' for classes matching criteria: " + test + " due to an IOException: " + ioe . getMessage ( ) , ioe ) ; } finally { ObjectHelper . close ( jarStream , jarfile . getPath ( ) , LOG ) ; } } protected void addIfMatching ( Test test , String fqn ) { try { String externalName = fqn . substring ( 0 , fqn . indexOf ( '.' ) ) . replace ( '/' , '.' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; boolean found = false ; for ( ClassLoader classLoader : set ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Testing for class " + externalName + " matches criteria [" + test + "]" ) ; } try { Class type = classLoader . loadClass ( externalName ) ; if ( test . matches ( type ) ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Found class: " + type + " in classloader: " + classLoader ) ; } matches . add ( ( Class < T > ) type ) ; } found = true ; break ; } catch ( ClassNotFoundException e ) { LOG . debug ( "Could not find class '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } catch ( NoClassDefFoundError e ) { LOG . debug ( "Could not find the class defintion '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } } if ( ! found ) { LOG . warn ( "Could not find class '" + fqn + "' in any classloaders: " + set ) ; } } catch ( Throwable t ) { LOG . warn ( "Could not examine class '" + fqn + "' due to a " + t . getClass ( ) . getName ( ) + " with message: " + t . getMessage ( ) , t ) ; } } } 	1
package org . apache . camel . component . mina ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import org . apache . mina . common . IoSession ; public class MinaExchange extends DefaultExchange { private IoSession session ; public MinaExchange ( CamelContext camelContext , ExchangePattern pattern , IoSession session ) { super ( camelContext , pattern ) ; this . session = session ; } public IoSession getSession ( ) { return session ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . UnmarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "unmarshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class UnmarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public UnmarshalType ( ) { } public UnmarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public UnmarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "unmarshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new UnmarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . component . event ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . context . ApplicationEvent ; public class EventEndpoint extends DefaultEndpoint < Exchange > implements ApplicationContextAware { private LoadBalancer loadBalancer ; private ApplicationContext applicationContext ; public EventEndpoint ( String endpointUri , EventComponent component ) { super ( endpointUri , component ) ; this . applicationContext = component . getApplicationContext ( ) ; } public EventEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { this . applicationContext = applicationContext ; } public ApplicationContext getApplicationContext ( ) { return applicationContext ; } public boolean isSingleton ( ) { return true ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) throws Exception { ApplicationEvent event = toApplicationEvent ( exchange ) ; getApplicationContext ( ) . publishEvent ( event ) ; } } ; } public EventConsumer createConsumer ( Processor processor ) throws Exception { return new EventConsumer ( this , processor ) ; } public void onApplicationEvent ( ApplicationEvent event ) { Exchange exchange = createExchange ( ) ; exchange . getIn ( ) . setBody ( event ) ; try { getLoadBalancer ( ) . process ( exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public LoadBalancer getLoadBalancer ( ) { if ( loadBalancer == null ) { loadBalancer = createLoadBalancer ( ) ; } return loadBalancer ; } public void setLoadBalancer ( LoadBalancer loadBalancer ) { this . loadBalancer = loadBalancer ; } public synchronized void consumerStarted ( EventConsumer consumer ) { getLoadBalancer ( ) . addProcessor ( consumer . getProcessor ( ) ) ; } public synchronized void consumerStopped ( EventConsumer consumer ) { getLoadBalancer ( ) . removeProcessor ( consumer . getProcessor ( ) ) ; } protected LoadBalancer createLoadBalancer ( ) { return new TopicLoadBalancer ( ) ; } protected ApplicationEvent toApplicationEvent ( Exchange exchange ) { ApplicationEvent event = exchange . getIn ( ) . getBody ( ApplicationEvent . class ) ; if ( event == null ) { event = new CamelEvent ( this , exchange ) ; } return event ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class BuilderSupport { private CamelContext context ; private ErrorHandlerBuilder errorHandlerBuilder ; private boolean inheritErrorHandler = true ; protected BuilderSupport ( CamelContext context ) { this . context = context ; } protected BuilderSupport ( BuilderSupport parent ) { this . context = parent . getContext ( ) ; this . inheritErrorHandler = parent . inheritErrorHandler ; if ( inheritErrorHandler && parent . errorHandlerBuilder != null ) { this . errorHandlerBuilder = parent . errorHandlerBuilder . copy ( ) ; } } public ValueBuilder header ( String name ) { return Builder . header ( name ) ; } public ValueBuilder body ( ) { return Builder . body ( ) ; } public < T > ValueBuilder body ( Class < T > type ) { return Builder . bodyAs ( type ) ; } public ValueBuilder outBody ( ) { return Builder . outBody ( ) ; } public < T > ValueBuilder outBody ( Class < T > type ) { return Builder . outBodyAs ( type ) ; } public ValueBuilder faultBody ( ) { return Builder . faultBody ( ) ; } public < T > ValueBuilder faultBodyAs ( Class < T > type ) { return Builder . faultBodyAs ( type ) ; } public ValueBuilder systemProperty ( String name ) { return Builder . systemProperty ( name ) ; } public ValueBuilder systemProperty ( String name , String defaultValue ) { return Builder . systemProperty ( name , defaultValue ) ; } public ValueBuilder constant ( Object value ) { return Builder . constant ( value ) ; } public Endpoint endpoint ( String uri ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; Endpoint endpoint = getContext ( ) . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public < T extends Endpoint > T endpoint ( String uri , Class < T > type ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; T endpoint = getContext ( ) . getEndpoint ( uri , type ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public List < Endpoint > endpoints ( String ... uris ) throws NoSuchEndpointException { List < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; for ( String uri : uris ) { endpoints . add ( endpoint ( uri ) ) ; } return endpoints ; } public List < Endpoint > endpoints ( Endpoint ... endpoints ) { List < Endpoint > answer = new ArrayList < Endpoint > ( ) ; answer . addAll ( Arrays . asList ( endpoints ) ) ; return answer ; } public NoErrorHandlerBuilder noErrorHandler ( ) { return new NoErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( ) { return new LoggingErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( String log ) { return loggingErrorHandler ( LogFactory . getLog ( log ) ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log ) { return new LoggingErrorHandlerBuilder ( log ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log , LoggingLevel level ) { return new LoggingErrorHandlerBuilder ( log , level ) ; } public DeadLetterChannelBuilder deadLetterChannel ( ) { return new DeadLetterChannelBuilder ( ) ; } public DeadLetterChannelBuilder deadLetterChannel ( String deadLetterUri ) { return deadLetterChannel ( endpoint ( deadLetterUri ) ) ; } public DeadLetterChannelBuilder deadLetterChannel ( Endpoint deadLetterEndpoint ) { return new DeadLetterChannelBuilder ( new SendProcessor ( deadLetterEndpoint ) ) ; } public CamelContext getContext ( ) { return context ; } public void setContext ( CamelContext context ) { this . context = context ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public boolean isInheritErrorHandler ( ) { return inheritErrorHandler ; } public void setInheritErrorHandler ( boolean inheritErrorHandler ) { this . inheritErrorHandler = inheritErrorHandler ; } } 	1
package org . apache . camel . spring ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . CamelContext ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . interceptor . Debugger ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . view . RouteDotGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . context . ApplicationContext ; import org . springframework . context . support . AbstractApplicationContext ; import org . springframework . context . support . ClassPathXmlApplicationContext ; import org . springframework . context . support . FileSystemXmlApplicationContext ; public class Main extends ServiceSupport { private static final Log LOG = LogFactory . getLog ( Main . class ) ; private String applicationContextUri = "META-INF/spring/*.xml" ; private String fileApplicationContextUri ; private AbstractApplicationContext applicationContext ; private List < Option > options = new ArrayList < Option > ( ) ; private CountDownLatch latch = new CountDownLatch ( 1 ) ; private AtomicBoolean completed = new AtomicBoolean ( false ) ; private long duration = - 1 ; private TimeUnit timeUnit = TimeUnit . MILLISECONDS ; private String dotOutputDir ; private boolean aggregateDot ; private boolean debug ; private boolean trace ; private List < RouteBuilder > routeBuilders = new ArrayList < RouteBuilder > ( ) ; private List < SpringCamelContext > camelContexts = new ArrayList < SpringCamelContext > ( ) ; private AbstractApplicationContext parentApplicationContext ; private String parentApplicationContextUri ; private ProducerTemplate camelTemplate ; public Main ( ) { addOption ( new Option ( "h" , "help" , "Displays the help screen" ) { protected void doProcess ( String arg , LinkedList < String > remainingArgs ) { showOptions ( ) ; completed ( ) ; } } ) ; addOption ( new ParameterOption ( "a" , "applicationContext" , "Sets the classpath based spring ApplicationContext" , "applicationContext" ) { protected void doProcess ( String arg , String parameter , LinkedList < String > remainingArgs ) { setApplicationContextUri ( parameter ) ; } } ) ; addOption ( new ParameterOption ( "fa" , "fileApplicationContext" , "Sets the filesystem based spring ApplicationContext" , "fileApplicationContext" ) { protected void doProcess ( String arg , String parameter , LinkedList < String > remainingArgs ) { setFileApplicationContextUri ( parameter ) ; } } ) ; addOption ( new ParameterOption ( "o" , "outdir" , "Sets the DOT output directory where the visual representations of the routes are generated" , "dot" ) { protected void doProcess ( String arg , String parameter , LinkedList < String > remainingArgs ) { setDotOutputDir ( parameter ) ; } } ) ; addOption ( new ParameterOption ( "ad" , "aggregate-dot" , "Aggregates all routes (in addition to individual route generation) into one context to create one monolithic DOT file for visual representations the entire system." , "aggregate-dot" ) { protected void doProcess ( String arg , String parameter , LinkedList < String > remainingArgs ) { setAggregateDot ( "true" . equals ( parameter ) ) ; } } ) ; addOption ( new ParameterOption ( "d" , "duration" , "Sets the time duration that the applicaiton will run for, by default in milliseconds. You can use '10s' for 10 seconds etc" , "duration" ) { protected void doProcess ( String arg , String parameter , LinkedList < String > remainingArgs ) { String value = parameter . toUpperCase ( ) ; if ( value . endsWith ( "S" ) ) { value = value . substring ( 0 , value . length ( ) - 1 ) ; setTimeUnit ( TimeUnit . SECONDS ) ; } setDuration ( Integer . parseInt ( value ) ) ; } } ) ; addOption ( new Option ( "x" , "debug" , "Enables the debugger" ) { protected void doProcess ( String arg , LinkedList < String > remainingArgs ) { enableDebug ( ) ; } } ) ; addOption ( new Option ( "t" , "trace" , "Enables tracing" ) { protected void doProcess ( String arg , LinkedList < String > remainingArgs ) { enableTrace ( ) ; } } ) ; } public static void main ( String ... args ) { new Main ( ) . run ( args ) ; } public void run ( String [ ] args ) { parseArguments ( args ) ; run ( ) ; } public void run ( ) { if ( ! completed . get ( ) ) { try { start ( ) ; waitUntilCompleted ( ) ; stop ( ) ; } catch ( Exception e ) { LOG . error ( "Failed: " + e , e ) ; } } } public void completed ( ) { completed . set ( true ) ; latch . countDown ( ) ; } public void addRouteBuilder ( RouteBuilder routeBuilder ) { getRouteBuilders ( ) . add ( routeBuilder ) ; } public void showOptions ( ) { System . out . println ( "Apache Camel Runner takes the following options" ) ; System . out . println ( ) ; for ( Option option : options ) { System . out . println ( "  " + option . getAbbreviation ( ) + " or " + option . getFullName ( ) + " = " + option . getDescription ( ) ) ; } } public void parseArguments ( String [ ] arguments ) { LinkedList < String > args = new LinkedList < String > ( Arrays . asList ( arguments ) ) ; boolean valid = true ; while ( ! args . isEmpty ( ) ) { String arg = args . removeFirst ( ) ; boolean handled = false ; for ( Option option : options ) { if ( option . processOption ( arg , args ) ) { handled = true ; break ; } } if ( ! handled ) { System . out . println ( "Unknown option: " + arg ) ; System . out . println ( ) ; valid = false ; break ; } } if ( ! valid ) { showOptions ( ) ; completed ( ) ; } } public void addOption ( Option option ) { options . add ( option ) ; } public abstract class Option { private String abbreviation ; private String fullName ; private String description ; protected Option ( String abbreviation , String fullName , String description ) { this . abbreviation = "-" + abbreviation ; this . fullName = "-" + fullName ; this . description = description ; } public boolean processOption ( String arg , LinkedList < String > remainingArgs ) { if ( arg . equalsIgnoreCase ( abbreviation ) || fullName . startsWith ( arg ) ) { doProcess ( arg , remainingArgs ) ; return true ; } return false ; } public String getAbbreviation ( ) { return abbreviation ; } public String getDescription ( ) { return description ; } public String getFullName ( ) { return fullName ; } protected abstract void doProcess ( String arg , LinkedList < String > remainingArgs ) ; } public abstract class ParameterOption extends Option { private String parameterName ; protected ParameterOption ( String abbreviation , String fullName , String description , String parameterName ) { super ( abbreviation , fullName , description ) ; this . parameterName = parameterName ; } protected void doProcess ( String arg , LinkedList < String > remainingArgs ) { if ( remainingArgs . isEmpty ( ) ) { System . err . println ( "Expected fileName for " ) ; showOptions ( ) ; completed ( ) ; } else { String parameter = remainingArgs . removeFirst ( ) ; doProcess ( arg , parameter , remainingArgs ) ; } } protected abstract void doProcess ( String arg , String parameter , LinkedList < String > remainingArgs ) ; } public AbstractApplicationContext getApplicationContext ( ) { return applicationContext ; } public void setApplicationContext ( AbstractApplicationContext applicationContext ) { this . applicationContext = applicationContext ; } public String getApplicationContextUri ( ) { return applicationContextUri ; } public void setApplicationContextUri ( String applicationContextUri ) { this . applicationContextUri = applicationContextUri ; } public String getFileApplicationContextUri ( ) { return fileApplicationContextUri ; } public void setFileApplicationContextUri ( String fileApplicationContextUri ) { this . fileApplicationContextUri = fileApplicationContextUri ; } public AbstractApplicationContext getParentApplicationContext ( ) { if ( parentApplicationContext == null ) { if ( parentApplicationContextUri != null ) { parentApplicationContext = new ClassPathXmlApplicationContext ( parentApplicationContextUri ) ; parentApplicationContext . start ( ) ; } } return parentApplicationContext ; } public void setParentApplicationContext ( AbstractApplicationContext parentApplicationContext ) { this . parentApplicationContext = parentApplicationContext ; } public String getParentApplicationContextUri ( ) { return parentApplicationContextUri ; } public void setParentApplicationContextUri ( String parentApplicationContextUri ) { this . parentApplicationContextUri = parentApplicationContextUri ; } public List < SpringCamelContext > getCamelContexts ( ) { return camelContexts ; } public long getDuration ( ) { return duration ; } public void setDuration ( long duration ) { this . duration = duration ; } public TimeUnit getTimeUnit ( ) { return timeUnit ; } public void setTimeUnit ( TimeUnit timeUnit ) { this . timeUnit = timeUnit ; } public String getDotOutputDir ( ) { return dotOutputDir ; } public void setDotOutputDir ( String dotOutputDir ) { this . dotOutputDir = dotOutputDir ; } public List < RouteBuilder > getRouteBuilders ( ) { return routeBuilders ; } public void setRouteBuilders ( List < RouteBuilder > routeBuilders ) { this . routeBuilders = routeBuilders ; } public void setAggregateDot ( boolean aggregateDot ) { this . aggregateDot = aggregateDot ; } public boolean isAggregateDot ( ) { return aggregateDot ; } public boolean isDebug ( ) { return debug ; } public void enableDebug ( ) { this . debug = true ; setParentApplicationContextUri ( "/META-INF/services/org/apache/camel/spring/debug.xml" ) ; } public boolean isTrace ( ) { return trace ; } public void enableTrace ( ) { this . trace = true ; setParentApplicationContextUri ( "/META-INF/services/org/apache/camel/spring/trace.xml" ) ; } public Debugger getDebugger ( ) { for ( SpringCamelContext camelContext : camelContexts ) { Debugger debugger = Debugger . getDebugger ( camelContext ) ; if ( debugger != null ) { return debugger ; } } return null ; } public List < RouteType > getRouteDefinitions ( ) { List < RouteType > answer = new ArrayList < RouteType > ( ) ; for ( SpringCamelContext camelContext : camelContexts ) { answer . addAll ( camelContext . getRouteDefinitions ( ) ) ; } return answer ; } public ProducerTemplate getCamelTemplate ( ) { if ( camelTemplate == null ) { camelTemplate = findOrCreateCamelTemplate ( ) ; } return camelTemplate ; } protected ProducerTemplate findOrCreateCamelTemplate ( ) { String [ ] names = getApplicationContext ( ) . getBeanNamesForType ( ProducerTemplate . class ) ; if ( names != null && names . length > 0 ) { return ( ProducerTemplate ) getApplicationContext ( ) . getBean ( names [ 0 ] , ProducerTemplate . class ) ; } for ( SpringCamelContext camelContext : camelContexts ) { return camelContext . createProducerTemplate ( ) ; } throw new IllegalArgumentException ( "No CamelContexts are available so cannot create a ProducerTemplate!" ) ; } protected void doStart ( ) throws Exception { LOG . info ( "Apache Camel " + getVersion ( ) + " starting" ) ; if ( applicationContext == null ) { applicationContext = createDefaultApplicationContext ( ) ; } applicationContext . start ( ) ; postProcessContext ( ) ; } protected AbstractApplicationContext createDefaultApplicationContext ( ) { if ( getFileApplicationContextUri ( ) != null ) { String [ ] args = getFileApplicationContextUri ( ) . split ( ";" ) ; ApplicationContext parentContext = getParentApplicationContext ( ) ; if ( parentContext != null ) { return new FileSystemXmlApplicationContext ( args , parentContext ) ; } else { return new FileSystemXmlApplicationContext ( args ) ; } } String [ ] args = getApplicationContextUri ( ) . split ( ";" ) ; ApplicationContext parentContext = getParentApplicationContext ( ) ; if ( parentContext != null ) { return new ClassPathXmlApplicationContext ( args , parentContext ) ; } else { return new ClassPathXmlApplicationContext ( args ) ; } } protected void doStop ( ) throws Exception { LOG . info ( "Apache Camel terminating" ) ; if ( applicationContext != null ) { applicationContext . close ( ) ; } } protected void waitUntilCompleted ( ) { while ( ! completed . get ( ) ) { try { if ( duration > 0 ) { TimeUnit unit = getTimeUnit ( ) ; LOG . info ( "Waiting for: " + duration + " " + unit ) ; latch . await ( duration , unit ) ; completed . set ( true ) ; } else { latch . await ( ) ; } } catch ( InterruptedException e ) { LOG . debug ( "Caught: " + e ) ; } } } protected void postProcessContext ( ) throws Exception { Map < String , SpringCamelContext > map = applicationContext . getBeansOfType ( SpringCamelContext . class ) ; Set < Map . Entry < String , SpringCamelContext > > entries = map . entrySet ( ) ; int size = entries . size ( ) ; for ( Map . Entry < String , SpringCamelContext > entry : entries ) { String name = entry . getKey ( ) ; SpringCamelContext camelContext = entry . getValue ( ) ; camelContexts . add ( camelContext ) ; generateDot ( name , camelContext , size ) ; postProcesCamelContext ( camelContext ) ; } if ( isAggregateDot ( ) ) { generateDot ( "aggregate" , aggregateSpringCamelContext ( applicationContext ) , 1 ) ; } } protected void generateDot ( String name , SpringCamelContext camelContext , int size ) throws IOException { String outputDir = dotOutputDir ; if ( ObjectHelper . isNotNullAndNonEmpty ( outputDir ) ) { if ( size > 1 ) { outputDir += "/" + name ; } RouteDotGenerator generator = new RouteDotGenerator ( outputDir ) ; LOG . info ( "Generating DOT file for routes: " + outputDir + " for: " + camelContext + " with name: " + name ) ; generator . drawRoutes ( camelContext ) ; } } private static SpringCamelContext aggregateSpringCamelContext ( ApplicationContext applicationContext ) throws Exception { SpringCamelContext aggregateCamelContext = new SpringCamelContext ( ) { protected boolean shouldStartRoutes ( ) { return false ; } } ; String [ ] names = applicationContext . getBeanNamesForType ( SpringCamelContext . class ) ; for ( String name : names ) { SpringCamelContext next = ( SpringCamelContext ) applicationContext . getBean ( name , SpringCamelContext . class ) ; aggregateCamelContext . addRouteDefinitions ( next . getRouteDefinitions ( ) ) ; } return aggregateCamelContext ; } protected void postProcesCamelContext ( CamelContext camelContext ) throws Exception { for ( RouteBuilder routeBuilder : routeBuilders ) { camelContext . addRoutes ( routeBuilder ) ; } } protected String getVersion ( ) { Package aPackage = Package . getPackage ( "org.apache.camel" ) ; if ( aPackage != null ) { String version = aPackage . getImplementationVersion ( ) ; if ( version == null ) { version = aPackage . getSpecificationVersion ( ) ; if ( version == null ) { version = "" ; } } return version ; } return "" ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ThreadProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "thread" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThreadType extends ProcessorType < ProcessorType > { @ XmlAttribute ( required = false ) private Integer coreSize = 1 ; @ XmlAttribute ( required = false ) private Boolean daemon = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Long keepAliveTime ; @ XmlAttribute ( required = false ) private Integer maxSize = 1 ; @ XmlAttribute ( required = false ) private String name = "Thread Processor" ; @ XmlAttribute ( required = false ) private Integer priority = Thread . NORM_PRIORITY ; @ XmlAttribute ( required = false ) private Long stackSize ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private BlockingQueue < Runnable > taskQueue ; @ XmlTransient private ThreadGroup threadGroup ; @ XmlTransient private ThreadPoolExecutor executor ; public ThreadType ( ) { } public ThreadType ( int coreSize ) { this . coreSize = coreSize ; this . maxSize = coreSize ; } public ThreadType ( ThreadPoolExecutor executor ) { this . executor = executor ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } @ Override public String toString ( ) { return "Thread[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "thread" ; } @ Override public String getLabel ( ) { return "coreSize=" + coreSize ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ThreadProcessor thread = new ThreadProcessor ( ) ; thread . setExecutor ( executor ) ; if ( coreSize != null ) { thread . setCoreSize ( coreSize ) ; } if ( daemon != null ) { thread . setDaemon ( daemon ) ; } if ( keepAliveTime != null ) { thread . setKeepAliveTime ( keepAliveTime ) ; } if ( maxSize != null ) { thread . setMaxSize ( maxSize ) ; } thread . setName ( name ) ; thread . setPriority ( priority ) ; if ( stackSize != null ) { thread . setStackSize ( stackSize ) ; } thread . setTaskQueue ( taskQueue ) ; thread . setThreadGroup ( threadGroup ) ; ArrayList < Processor > pipe = new ArrayList < Processor > ( 2 ) ; pipe . add ( thread ) ; pipe . add ( createOutputsProcessor ( routeContext , outputs ) ) ; return new Pipeline ( pipe ) ; } public ThreadType coreSize ( int coreSize ) { setCoreSize ( coreSize ) ; return this ; } public ThreadType daemon ( boolean daemon ) { setDaemon ( daemon ) ; return this ; } public ThreadType keepAliveTime ( long keepAliveTime ) { setKeepAliveTime ( keepAliveTime ) ; return this ; } public ThreadType maxSize ( int maxSize ) { setMaxSize ( maxSize ) ; return this ; } public ThreadType name ( String name ) { setName ( name ) ; return this ; } public ThreadType priority ( int priority ) { setPriority ( priority ) ; return this ; } public ThreadType stackSize ( long stackSize ) { setStackSize ( stackSize ) ; return this ; } public ThreadType taskQueue ( BlockingQueue < Runnable > taskQueue ) { setTaskQueue ( taskQueue ) ; return this ; } public ThreadType threadGroup ( ThreadGroup threadGroup ) { setThreadGroup ( threadGroup ) ; return this ; } public ThreadType executor ( ThreadPoolExecutor executor ) { setExecutor ( executor ) ; return this ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public void setName ( String name ) { this . name = name ; } public void setPriority ( int priority ) { this . priority = priority ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public ThreadPoolExecutor getExecutor ( ) { return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } } 	1
package org . apache . camel . component . irc ; public class IrcBinding { public Object extractBodyFromIrc ( IrcExchange exchange , IrcMessage message ) { String type = message . getMessageType ( ) ; String text = message . getMessage ( ) ; if ( text != null ) { return text ; } else { return type ; } } } 	0
package org . apache . camel . util ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . Registry ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class CamelContextHelper { private CamelContextHelper ( ) { } public static Endpoint getMandatoryEndpoint ( CamelContext camelContext , String uri ) throws NoSuchEndpointException { Endpoint endpoint = camelContext . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } else { return endpoint ; } } public static < T extends Endpoint > T getMandatoryEndpoint ( CamelContext camelContext , String uri , Class < T > type ) { Endpoint endpoint = getMandatoryEndpoint ( camelContext , uri ) ; return ObjectHelper . cast ( type , endpoint ) ; } public static < T > List < T > getSingletonEndpoints ( CamelContext camelContext , Class < T > type ) { List < T > answer = new ArrayList < T > ( ) ; Collection < Endpoint > endpoints = camelContext . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( type . isInstance ( endpoint ) ) { T value = type . cast ( endpoint ) ; answer . add ( value ) ; } } return answer ; } public static < T > T convertTo ( CamelContext context , Class < T > type , Object value ) { notNull ( context , "camelContext" ) ; return context . getTypeConverter ( ) . convertTo ( type , value ) ; } public static < T > T mandatoryConvertTo ( CamelContext context , Class < T > type , Object value ) { T answer = convertTo ( context , type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Value " + value + " converted to " + type . getName ( ) + " cannot be null" ) ; } return answer ; } public static < T > T newInstance ( CamelContext context , Class < T > beanType ) { return context . getInjector ( ) . newInstance ( beanType ) ; } public static Object lookup ( CamelContext context , String name ) { return context . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookup ( CamelContext context , String name , Class < T > beanType ) { return context . getRegistry ( ) . lookup ( name , beanType ) ; } public static Object mandatoryLookup ( CamelContext context , String name ) { Object answer = lookup ( context , name ) ; notNull ( answer , "registry entry called " + name ) ; return answer ; } public static < T > T mandatoryLookup ( CamelContext context , String name , Class < T > beanType ) { T answer = lookup ( context , name , beanType ) ; notNull ( answer , "registry entry called " + name + " of type " + beanType . getName ( ) ) ; return answer ; } public static Language resolveMandatoryLanguage ( CamelContext camelContext , String languageName ) { notNull ( camelContext , "camelContext" ) ; notNull ( languageName , "languageName" ) ; Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Could not resolve language: " + languageName ) ; } return language ; } public static Expression resolveMandatoryExpression ( CamelContext camelContext , String languageName , String expressionText ) { notNull ( expressionText , "expressionText" ) ; Language language = resolveMandatoryLanguage ( camelContext , languageName ) ; Expression < Exchange > expression = language . createExpression ( expressionText ) ; if ( expression == null ) { throw new IllegalArgumentException ( "Could not create expression: " + expressionText + " with language: " + language ) ; } return expression ; } } 	1
package org . apache . camel . bam . processor ; import org . apache . camel . Exchange ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . camel . bam . rules . ProcessRules ; public class ProcessContext { private Exchange exchange ; private ProcessRules processRules ; private ActivityRules activityRules ; private ProcessInstance processInstance ; private ActivityState activityState ; public ProcessContext ( Exchange exchange , ActivityRules activityRules , ActivityState activityState ) { this . exchange = exchange ; this . activityRules = activityRules ; this . activityState = activityState ; this . processRules = activityRules . getProcessRules ( ) ; this . processInstance = activityState . getProcessInstance ( ) ; } public ActivityRules getActivity ( ) { return activityRules ; } public void setActivity ( ActivityRules activityRules ) { this . activityRules = activityRules ; } public ActivityState getActivityState ( ) { return activityState ; } public void setActivityState ( ActivityState activityState ) { this . activityState = activityState ; } public Exchange getExchange ( ) { return exchange ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public ProcessRules getProcessDefinition ( ) { return processRules ; } public void setProcessDefinition ( ProcessRules processRules ) { this . processRules = processRules ; } public ProcessInstance getProcessInstance ( ) { return processInstance ; } public void setProcessInstance ( ProcessInstance processInstance ) { this . processInstance = processInstance ; } public ActivityState getActivityState ( ActivityRules activityRules ) { return getProcessInstance ( ) . getActivityState ( activityRules ) ; } public void onStarted ( ActivityState activityState ) { } public void onCompleted ( ActivityState activityState ) { } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Pipeline extends MulticastProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( Pipeline . class ) ; public Pipeline ( Collection < Processor > processors ) { super ( processors ) ; } public static Processor newInstance ( List < Processor > processors ) { if ( processors . isEmpty ( ) ) { return null ; } else if ( processors . size ( ) == 1 ) { return processors . get ( 0 ) ; } return new Pipeline ( processors ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange original , AsyncCallback callback ) { Iterator < Processor > processors = getProcessors ( ) . iterator ( ) ; Exchange nextExchange = original ; boolean first = true ; while ( true ) { if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } if ( ! processors . hasNext ( ) ) { break ; } AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( first ) { first = false ; } else { nextExchange = createNextExchange ( processor , nextExchange ) ; } boolean sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return false ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( true ) ; return true ; } private boolean process ( final Exchange original , final Exchange exchange , final AsyncCallback callback , final Iterator < Processor > processors , AsyncProcessor processor ) { return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } Exchange nextExchange = exchange ; while ( processors . hasNext ( ) ) { AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( nextExchange . isFailed ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) ) ; } break ; } nextExchange = createNextExchange ( processor , nextExchange ) ; sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( false ) ; } } ) ; } protected Exchange createNextExchange ( Processor producer , Exchange previousExchange ) { Exchange answer = previousExchange . newInstance ( ) ; answer . getProperties ( ) . putAll ( previousExchange . getProperties ( ) ) ; Message previousOut = previousExchange . getOut ( false ) ; Message in = answer . getIn ( ) ; if ( previousOut != null ) { in . copyFrom ( previousOut ) ; } else { in . copyFrom ( previousExchange . getIn ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Pipeline" + getProcessors ( ) ; } } 	1
package org . apache . camel ; public class RuntimeCamelException extends RuntimeException { private static final long serialVersionUID = 8046489554418284257L ; public RuntimeCamelException ( ) { } public RuntimeCamelException ( String message ) { super ( message ) ; } public RuntimeCamelException ( String message , Throwable cause ) { super ( message , cause ) ; } public RuntimeCamelException ( Throwable cause ) { super ( cause ) ; } } 	0
package org . apache . camel . component . mock ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MockEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( MockEndpoint . class ) ; private int expectedCount ; private int counter ; private Processor defaultProcessor ; private Map < Integer , Processor > processors ; private List < Exchange > receivedExchanges ; private List < Throwable > failures ; private List < Runnable > tests ; private CountDownLatch latch ; private long sleepForEmptyTest ; private long resultWaitTime ; private int expectedMinimumCount ; private List expectedBodyValues ; private List actualBodyValues ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; private String headerName ; private String headerValue ; private Object actualHeader ; private Processor reporter ; public MockEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; init ( ) ; } public MockEndpoint ( String endpointUri ) { super ( endpointUri ) ; init ( ) ; } public static MockEndpoint resolve ( CamelContext context , String uri ) { return CamelContextHelper . getMandatoryEndpoint ( context , uri , MockEndpoint . class ) ; } public static void assertWait ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; long left = unit . toMillis ( timeout ) ; long end = start + left ; for ( MockEndpoint endpoint : endpoints ) { if ( ! endpoint . await ( left , TimeUnit . MILLISECONDS ) ) { throw new AssertionError ( "Timeout waiting for endpoints to receive enough messages. " + endpoint . getEndpointUri ( ) + " timed out." ) ; } left = end - System . currentTimeMillis ( ) ; if ( left <= 0 ) { left = 0 ; } } } public static void assertIsSatisfied ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { assertWait ( timeout , unit , endpoints ) ; for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( CamelContext context ) throws InterruptedException { ObjectHelper . notNull ( context , "camelContext" ) ; Collection < Endpoint > endpoints = context . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( endpoint instanceof MockEndpoint ) { MockEndpoint mockEndpoint = ( MockEndpoint ) endpoint ; mockEndpoint . assertIsSatisfied ( ) ; } } } public static void expectsMessageCount ( int count , MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { MockEndpoint . expectsMessageCount ( count ) ; } } public List < Exchange > getExchanges ( ) { return getReceivedExchanges ( ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "You cannot consume from this endpoint" ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) { onExchange ( exchange ) ; } } ; } public void reset ( ) { init ( ) ; } public void whenExchangeReceived ( int index , Processor processor ) { this . processors . put ( index , processor ) ; } public void whenAnyExchangeReceived ( Processor processor ) { this . defaultProcessor = processor ; } public void assertIsSatisfied ( ) throws InterruptedException { assertIsSatisfied ( sleepForEmptyTest ) ; } public void assertIsSatisfied ( long timeoutForEmptyEndpoints ) throws InterruptedException { LOG . info ( "Asserting: " + this + " is satisfied" ) ; if ( expectedCount >= 0 ) { if ( expectedCount != getReceivedCounter ( ) ) { if ( expectedCount == 0 ) { if ( timeoutForEmptyEndpoints > 0 ) { LOG . debug ( "Sleeping for: " + timeoutForEmptyEndpoints + " millis to check there really are no messages received" ) ; Thread . sleep ( timeoutForEmptyEndpoints ) ; } } else { waitForCompleteLatch ( ) ; } } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedMinimumCount > 0 && getReceivedCounter ( ) < expectedMinimumCount ) { waitForCompleteLatch ( ) ; } if ( expectedMinimumCount >= 0 ) { int receivedCounter = getReceivedCounter ( ) ; assertTrue ( "Received message count " + receivedCounter + ", expected at least " + expectedCount , expectedCount <= receivedCounter ) ; } for ( Runnable test : tests ) { test . run ( ) ; } for ( Throwable failure : failures ) { if ( failure != null ) { LOG . error ( "Caught on " + getEndpointUri ( ) + " Exception: " + failure , failure ) ; fail ( "Failed due to caught exception: " + failure ) ; } } } public void assertIsNotSatisfied ( ) throws InterruptedException { try { assertIsSatisfied ( ) ; fail ( "Expected assertion failure!" ) ; } catch ( AssertionError e ) { LOG . info ( "Caught expected failure: " + e ) ; } } public void expectedMessageCount ( int expectedCount ) { setExpectedMessageCount ( expectedCount ) ; } public void expectedMinimumMessageCount ( int expectedCount ) { setMinimumExpectedMessageCount ( expectedCount ) ; } public void expectedHeaderReceived ( String name , String value ) { this . headerName = name ; this . headerValue = value ; expects ( new Runnable ( ) { public void run ( ) { assertTrue ( "No header with name " + headerName + " found." , actualHeader != null ) ; assertEquals ( "Header of message" , headerValue , actualHeader ) ; } } ) ; } public void expectedBodiesReceived ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; Object actualBody = actualBodyValues . get ( i ) ; assertEquals ( "Body of message: " + i , expectedBody , actualBody ) ; } } } ) ; } public void expectedBodiesReceived ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; bodyList . addAll ( Arrays . asList ( bodies ) ) ; expectedBodiesReceived ( bodyList ) ; } public void expectsAscending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesAscending ( expression ) ; } } ) ; } public void expectsDescending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesDescending ( expression ) ; } } ) ; } public void expectsNoDuplicates ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertNoDuplicates ( expression ) ; } } ) ; } public void assertMessagesAscending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , true ) ; } public void assertMessagesDescending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , false ) ; } protected void assertMessagesSorted ( Expression < Exchange > expression , boolean ascending ) { String type = ascending ? "ascending" : "descending" ; ExpressionComparator comparator = new ExpressionComparator ( expression ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 1 ; i < list . size ( ) ; i ++ ) { int j = i - 1 ; Exchange e1 = list . get ( j ) ; Exchange e2 = list . get ( i ) ; int result = comparator . compare ( e1 , e2 ) ; if ( result == 0 ) { fail ( "Messages not " + type + ". Messages" + j + " and " + i + " are equal with value: " + expression . evaluate ( e1 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { if ( ! ascending ) { result = result * - 1 ; } if ( result > 0 ) { fail ( "Messages not " + type + ". Message " + j + " has value: " + expression . evaluate ( e1 ) + " and message " + i + " has value: " + expression . evaluate ( e2 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } } } } public void assertNoDuplicates ( Expression < Exchange > expression ) { Map < Object , Exchange > map = new HashMap < Object , Exchange > ( ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Exchange e2 = list . get ( i ) ; Object key = expression . evaluate ( e2 ) ; Exchange e1 = map . get ( key ) ; if ( e1 != null ) { fail ( "Duplicate message found on message " + i + " has value: " + key + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { map . put ( key , e2 ) ; } } } public void expects ( Runnable runnable ) { tests . add ( runnable ) ; } public AssertionClause message ( final int messageIndex ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { applyAssertionOn ( MockEndpoint . this , messageIndex , assertExchangeReceived ( messageIndex ) ) ; } } ; expects ( clause ) ; return clause ; } public AssertionClause allMessages ( ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { applyAssertionOn ( MockEndpoint . this , index ++ , exchange ) ; } } } ; expects ( clause ) ; return clause ; } public Exchange assertExchangeReceived ( int index ) { int count = getReceivedCounter ( ) ; assertTrue ( "Not enough messages received. Was: " + count , count > index ) ; return getReceivedExchanges ( ) . get ( index ) ; } public List < Throwable > getFailures ( ) { return failures ; } public int getReceivedCounter ( ) { return getReceivedExchanges ( ) . size ( ) ; } public List < Exchange > getReceivedExchanges ( ) { return receivedExchanges ; } public int getExpectedCount ( ) { return expectedCount ; } public long getSleepForEmptyTest ( ) { return sleepForEmptyTest ; } public void setSleepForEmptyTest ( long sleepForEmptyTest ) { this . sleepForEmptyTest = sleepForEmptyTest ; } public long getResultWaitTime ( ) { return resultWaitTime ; } public void setResultWaitTime ( long resultWaitTime ) { this . resultWaitTime = resultWaitTime ; } public void setExpectedMessageCount ( int expectedCount ) { this . expectedCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedCount ) ; } } public void setMinimumExpectedMessageCount ( int expectedCount ) { this . expectedMinimumCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedMinimumCount ) ; } } public Processor getReporter ( ) { return reporter ; } public void setReporter ( Processor reporter ) { this . reporter = reporter ; } private void init ( ) { expectedCount = - 1 ; counter = 0 ; processors = new HashMap < Integer , Processor > ( ) ; receivedExchanges = new CopyOnWriteArrayList < Exchange > ( ) ; failures = new CopyOnWriteArrayList < Throwable > ( ) ; tests = new CopyOnWriteArrayList < Runnable > ( ) ; latch = null ; sleepForEmptyTest = 1000L ; resultWaitTime = 20000L ; expectedMinimumCount = - 1 ; expectedBodyValues = null ; actualBodyValues = new ArrayList ( ) ; } protected synchronized void onExchange ( Exchange exchange ) { try { if ( reporter != null ) { reporter . process ( exchange ) ; } performAssertions ( exchange ) ; } catch ( Throwable e ) { failures . add ( e ) ; } if ( latch != null ) { latch . countDown ( ) ; } } protected void performAssertions ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object actualBody = in . getBody ( ) ; if ( headerName != null ) { actualHeader = in . getHeader ( headerName ) ; } if ( expectedBodyValues != null ) { int index = actualBodyValues . size ( ) ; if ( expectedBodyValues . size ( ) > index ) { Object expectedBody = expectedBodyValues . get ( index ) ; if ( expectedBody != null ) { actualBody = in . getBody ( expectedBody . getClass ( ) ) ; } actualBodyValues . add ( actualBody ) ; } } LOG . debug ( getEndpointUri ( ) + " >>>> " + ( ++ counter ) + " : " + exchange + " with body: " + actualBody ) ; receivedExchanges . add ( exchange ) ; Processor processor = processors . get ( getReceivedCounter ( ) ) != null ? processors . get ( getReceivedCounter ( ) ) : defaultProcessor ; if ( processor != null ) { processor . process ( exchange ) ; } } protected void waitForCompleteLatch ( ) throws InterruptedException { if ( latch == null ) { fail ( "Should have a latch!" ) ; } LOG . debug ( "Waiting on the latch for: " + resultWaitTime + " millis" ) ; latch . await ( resultWaitTime , TimeUnit . MILLISECONDS ) ; } protected void assertEquals ( String message , Object expectedValue , Object actualValue ) { if ( ! ObjectHelper . equal ( expectedValue , actualValue ) ) { fail ( message + ". Expected: <" + expectedValue + "> but was: <" + actualValue + ">" ) ; } } protected void assertTrue ( String message , boolean predicate ) { if ( ! predicate ) { fail ( message ) ; } } protected void fail ( Object message ) { if ( LOG . isDebugEnabled ( ) ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { LOG . debug ( "Received[" + ( ++ index ) + "]: " + exchange ) ; } } throw new AssertionError ( getEndpointUri ( ) + " " + message ) ; } public int getExpectedMinimumCount ( ) { return expectedMinimumCount ; } public void await ( ) throws InterruptedException { if ( latch != null ) { latch . await ( ) ; } } public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { if ( latch != null ) { return latch . await ( timeout , unit ) ; } return true ; } public boolean isSingleton ( ) { return true ; } } 	1
package org . apache . camel . processor . resequencer ; class Element < E > implements TimeoutHandler { private E object ; private Timeout timeout ; public Element ( E object ) { this . object = object ; } public E getObject ( ) { return object ; } public synchronized boolean scheduled ( ) { return timeout != null ; } public synchronized void schedule ( Timeout t ) { this . timeout = t ; this . timeout . addTimeoutHandlerFirst ( this ) ; this . timeout . schedule ( ) ; } public synchronized void cancel ( ) { if ( timeout != null ) { timeout . cancel ( ) ; } timeout ( null ) ; } public synchronized void timeout ( Timeout t ) { this . timeout = null ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . TransformProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "transform" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TransformType extends ExpressionNode { public TransformType ( ) { } public TransformType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Transform[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "transform" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; Processor childProcessor = routeContext . createProcessor ( this ) ; return new TransformProcessor ( expr , childProcessor ) ; } } 	1
package org . apache . camel . language . groovy ; import java . util . AbstractMap ; import java . util . Collections ; import java . util . Set ; import groovy . lang . Binding ; import groovy . lang . Script ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ExpressionSupport ; import org . apache . camel . util . ExchangeHelper ; public class GroovyExpression extends ExpressionSupport < Exchange > { private Class < Script > scriptType ; private String text ; public GroovyExpression ( Class < Script > scriptType , String text ) { this . scriptType = scriptType ; this . text = text ; } @ Override public String toString ( ) { return "groovy: " + text ; } protected String assertionFailureMessage ( Exchange exchange ) { return "groovy: " + text ; } public Object evaluate ( Exchange exchange ) { Script script = ExchangeHelper . newInstance ( exchange , scriptType ) ; configure ( exchange , script ) ; return script . run ( ) ; } private void configure ( Exchange exchange , Script script ) { final Binding binding = script . getBinding ( ) ; ExchangeHelper . populateVariableMap ( exchange , new AbstractMap < String , Object > ( ) { @ Override public Object put ( String key , Object value ) { binding . setProperty ( key , value ) ; return null ; } public Set entrySet ( ) { return Collections . EMPTY_SET ; } } ) ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . nio . ByteBuffer ; import org . apache . camel . Converter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class NIOConverter { private static final transient Log LOG = LogFactory . getLog ( NIOConverter . class ) ; private NIOConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { return buffer . array ( ) ; } @ Converter public static String toString ( ByteBuffer buffer ) { return IOConverter . toString ( buffer . array ( ) ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; } @ Converter public static ByteBuffer toByteBuffer ( File file ) throws IOException { InputStream in = null ; try { byte [ ] buf = new byte [ ( int ) file . length ( ) ] ; in = new BufferedInputStream ( new FileInputStream ( file ) ) ; int sizeLeft = ( int ) file . length ( ) ; int offset = 0 ; while ( sizeLeft > 0 ) { int readSize = in . read ( buf , offset , sizeLeft ) ; sizeLeft -= readSize ; offset += readSize ; } return ByteBuffer . wrap ( buf ) ; } finally { try { if ( in != null ) { in . close ( ) ; } } catch ( IOException e ) { LOG . warn ( "Failed to close file stream: " + file . getPath ( ) , e ) ; } } } @ Converter public static ByteBuffer toByteBuffer ( String value ) { ByteBuffer buf = ByteBuffer . allocate ( value . length ( ) ) ; byte [ ] bytes = value . getBytes ( ) ; buf . put ( bytes ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Short value ) { ByteBuffer buf = ByteBuffer . allocate ( 2 ) ; buf . putShort ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Integer value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Long value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putLong ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Float value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putFloat ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Double value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putDouble ( value ) ; return buf ; } @ Converter public static InputStream toInputStream ( ByteBuffer bufferbuffer ) { return IOConverter . toInputStream ( toByteArray ( bufferbuffer ) ) ; } } 	1
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; public class FilterProcessor extends DelegateProcessor { private Predicate < Exchange > predicate ; public FilterProcessor ( Predicate < Exchange > predicate , Processor processor ) { super ( processor ) ; this . predicate = predicate ; } public void process ( Exchange exchange ) throws Exception { if ( predicate . matches ( exchange ) ) { super . process ( exchange ) ; } } @ Override public String toString ( ) { return "Filter[if: " + predicate + " do: " + getProcessor ( ) + "]" ; } public Predicate < Exchange > getPredicate ( ) { return predicate ; } } 	0
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ObjectHelper ; public class Namespaces { public static final String DEFAULT_NAMESPACE = "http://activemq.apache.org/camel/schema/spring" ; public static final String IN_NAMESPACE = "http://camel.apache.org/xml/in/" ; public static final String OUT_NAMESPACE = "http://camel.apache.org/xml/out/" ; public static final String SYSTEM_PROPERTIES_NAMESPACE = "http://camel.apache.org/xml/variables/system-properties" ; public static final String ENVIRONMENT_VARIABLES = "http://camel.apache.org/xml/variables/environment-variables" ; public static final String EXCHANGE_PROPERTY = "http://camel.apache.org/xml/variables/exchange-property" ; private Map < String , String > namespaces = new HashMap < String , String > ( ) ; public Namespaces ( Element element ) { add ( element ) ; } public Namespaces ( String prefix , String uri ) { add ( prefix , uri ) ; } public static boolean isMatchingNamespaceOrEmptyNamespace ( String namespaceURI , String expectedNamespace ) { return ObjectHelper . isNullOrBlank ( namespaceURI ) || namespaceURI . equals ( expectedNamespace ) ; } public Namespaces add ( String prefix , String uri ) { namespaces . put ( prefix , uri ) ; return this ; } public Namespaces add ( Element element ) { Node parentNode = element . getParentNode ( ) ; if ( parentNode instanceof org . w3c . dom . Element ) { add ( ( Element ) parentNode ) ; } NamedNodeMap attributes = element . getAttributes ( ) ; int size = attributes . getLength ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Attr node = ( Attr ) attributes . item ( i ) ; String name = node . getName ( ) ; if ( name . startsWith ( "xmlns:" ) ) { String prefix = name . substring ( "xmlns:" . length ( ) ) ; String uri = node . getValue ( ) ; add ( prefix , uri ) ; } } return this ; } public XPathExpression xpath ( String expression ) { XPathExpression answer = new XPathExpression ( expression ) ; configure ( answer ) ; return answer ; } public XPathExpression xpath ( String expression , Class < ? > resultType ) { XPathExpression answer = xpath ( expression ) ; answer . setResultType ( resultType ) ; return answer ; } public XQueryExpression xquery ( String expression ) { XQueryExpression answer = new XQueryExpression ( expression ) ; configure ( answer ) ; return answer ; } public XQueryExpression xquery ( String expression , Class < ? > resultType ) { XQueryExpression answer = new XQueryExpression ( expression ) ; answer . setResultType ( resultType ) ; configure ( answer ) ; return answer ; } public Map < String , String > getNamespaces ( ) { return namespaces ; } public void configure ( NamespaceAware namespaceAware ) { namespaceAware . setNamespaces ( getNamespaces ( ) ) ; } } 	1
package org . apache . camel . component . mina ; import org . apache . camel . Exchange ; public final class MinaPayloadHelper { private MinaPayloadHelper ( ) { } public static Object getIn ( MinaEndpoint endpoint , Exchange exchange ) { if ( endpoint . isTransferExchange ( ) ) { return MinaPayloadHolder . marshal ( exchange ) ; } else { return exchange . getIn ( ) . getBody ( ) ; } } public static Object getOut ( MinaEndpoint endpoint , Exchange exchange ) { if ( endpoint . isTransferExchange ( ) ) { return MinaPayloadHolder . marshal ( exchange ) ; } else { return exchange . getOut ( ) . getBody ( ) ; } } public static void setIn ( Exchange exchange , Object payload ) { if ( payload instanceof MinaPayloadHolder ) { MinaPayloadHolder . unmarshal ( exchange , ( MinaPayloadHolder ) payload ) ; } else { exchange . getIn ( ) . setBody ( payload ) ; } } public static void setOut ( Exchange exchange , Object payload ) { if ( payload instanceof MinaPayloadHolder ) { MinaPayloadHolder . unmarshal ( exchange , ( MinaPayloadHolder ) payload ) ; } else { exchange . getOut ( ) . setBody ( payload ) ; } } } 	0
package org . apache . camel . language . bean ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class BeanLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { ObjectHelper . notNull ( expression , "expression" ) ; int idx = expression . lastIndexOf ( '.' ) ; String beanName = expression ; String method = null ; if ( idx > 0 ) { beanName = expression . substring ( 0 , idx ) ; method = expression . substring ( idx + 1 ) ; } return new BeanExpression ( beanName , method ) ; } } 	1
package org . apache . camel . component . file ; import java . io . File ; import org . apache . camel . impl . DefaultMessage ; public class FileMessage extends DefaultMessage { private File file ; public FileMessage ( ) { this ( new File ( "." ) ) ; } public FileMessage ( File file ) { this . file = file ; } @ Override public String toString ( ) { return "FileMessage: " + file ; } @ Override public FileExchange getExchange ( ) { return ( FileExchange ) super . getExchange ( ) ; } public File getFile ( ) { return file ; } public void setFile ( File file ) { this . file = file ; } @ Override public FileMessage newInstance ( ) { return new FileMessage ( ) ; } @ Override protected Object createBody ( ) { return file ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . PredicateAggregationCollection ; public class Aggregator extends BatchProcessor { private Predicate aggregationCompletedPredicate ; public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy ) { this ( endpoint , processor , new AggregationCollection ( correlationExpression , aggregationStrategy ) ) ; } public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { this ( endpoint , processor , new PredicateAggregationCollection ( correlationExpression , aggregationStrategy , aggregationCompletedPredicate ) ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } public Aggregator ( Endpoint endpoint , Processor processor , AggregationCollection collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Aggregator[to: " + getProcessor ( ) + "]" ; } @ Override protected boolean isBatchCompleted ( int index ) { if ( aggregationCompletedPredicate != null ) { if ( getCollection ( ) . size ( ) > 0 ) { return true ; } } return super . isBatchCompleted ( index ) ; } } 	1
package org . apache . camel . component . bean ; import org . apache . camel . CamelException ; public class NoBeanAvailableException extends CamelException { private final String name ; public NoBeanAvailableException ( String name ) { super ( "No bean available for endpoint: " + name ) ; this . name = name ; } public String getName ( ) { return name ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; public class HandleFaultProcessor extends DelegateProcessor { @ Override public void process ( Exchange exchange ) throws Exception { super . process ( exchange ) ; final Message faultMessage = exchange . getFault ( false ) ; if ( faultMessage != null ) { final Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { if ( faultBody instanceof Throwable ) { exchange . setException ( ( Throwable ) faultBody ) ; } else { exchange . setException ( new CamelException ( "Message contains fault of type " + faultBody . getClass ( ) . getName ( ) + ":\n" + faultBody ) ) ; } } } } } 	1
package org . apache . camel ; import java . util . HashMap ; import java . util . Map ; public enum ExchangePattern { InOnly , RobustInOnly , InOut , InOptionalOut , OutOnly , RobustOutOnly , OutIn , OutOptionalIn ; protected static final Map < String , ExchangePattern > MAP = new HashMap < String , ExchangePattern > ( ) ; public String getWsdlUri ( ) { switch ( this ) { case InOnly : return "http://www.w3.org/ns/wsdl/in-only" ; case InOptionalOut : return "http://www.w3.org/ns/wsdl/in-optional-out" ; case InOut : return "http://www.w3.org/ns/wsdl/in-out" ; case OutIn : return "http://www.w3.org/ns/wsdl/out-in" ; case OutOnly : return "http://www.w3.org/ns/wsdl/out-only" ; case OutOptionalIn : return "http://www.w3.org/ns/wsdl/out-optional_in" ; case RobustInOnly : return "http://www.w3.org/ns/wsdl/robust-in-only" ; case RobustOutOnly : return "http://www.w3.org/ns/wsdl/robust-out-only" ; default : throw new IllegalArgumentException ( "Unknown message exchange pattern: " + this ) ; } } public boolean isInCapable ( ) { switch ( this ) { case OutOnly : case RobustOutOnly : return false ; default : return true ; } } public boolean isOutCapable ( ) { switch ( this ) { case InOnly : case RobustInOnly : return false ; default : return true ; } } public boolean isFaultCapable ( ) { switch ( this ) { case InOnly : case OutOnly : return false ; default : return true ; } } public static ExchangePattern fromWsdlUri ( String wsdlUri ) { return MAP . get ( wsdlUri ) ; } static { for ( ExchangePattern mep : values ( ) ) { String uri = mep . getWsdlUri ( ) ; MAP . put ( uri , mep ) ; String name = uri . substring ( uri . lastIndexOf ( '/' ) + 1 ) ; MAP . put ( "http://www.w3.org/2004/08/wsdl/" + name , mep ) ; MAP . put ( "http://www.w3.org/2006/01/wsdl/" + name , mep ) ; } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "proceed" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProceedType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "proceed" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	1
package org . apache . camel . impl ; import java . util . List ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . Service ; public class EventDrivenConsumerRoute < E extends Exchange > extends Route < E > { private Processor processor ; public EventDrivenConsumerRoute ( Endpoint endpoint , Processor processor ) { super ( endpoint ) ; this . processor = processor ; } @ Override public String toString ( ) { return "EventDrivenConsumerRoute[" + getEndpoint ( ) + " -> " + processor + "]" ; } public Processor getProcessor ( ) { return processor ; } public void setProcessor ( Processor processor ) { this . processor = processor ; } @ Override protected void addServices ( List < Service > services ) throws Exception { Endpoint < E > endpoint = getEndpoint ( ) ; Consumer < E > consumer = endpoint . createConsumer ( processor ) ; if ( consumer != null ) { services . add ( consumer ) ; } Processor processor = getProcessor ( ) ; if ( processor instanceof Service ) { Service service = ( Service ) processor ; services . add ( service ) ; } } } 	0
package org . apache . camel . processor . aggregate ; import org . apache . camel . Exchange ; public class UseLatestAggregationStrategy implements AggregationStrategy { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { return newExchange ; } } 	1
package org . apache . camel . component . jpa ; import javax . persistence . EntityManager ; public interface DeleteHandler < T > { void deleteObject ( EntityManager entityManager , Object entityBean ) ; } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public final class ProcessorBuilder { private ProcessorBuilder ( ) { } public static Processor setBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setBody(" + expression + ")" ; } } ; } public static Processor setOutBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setOutBody(" + expression + ")" ; } } ; } public static Processor setFaultBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setFaultBody(" + expression + ")" ; } } ; } public static Processor setHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setOutHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setOutHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setFaultHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setFaultHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setProperty ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . setProperty ( name , value ) ; } @ Override public String toString ( ) { return "setProperty(" + name + ", " + expression + ")" ; } } ; } public static Processor removeHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getIn ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeHeader(" + name + ")" ; } } ; } public static Processor removeOutHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { out . removeHeader ( name ) ; } } @ Override public String toString ( ) { return "removeOutHeader(" + name + ")" ; } } ; } public static Processor removeFaultHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getFault ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeFaultHeader(" + name + ")" ; } } ; } public static Processor removeProperty ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . removeProperty ( name ) ; } @ Override public String toString ( ) { return "removeProperty(" + name + ")" ; } } ; } public static Processor throwException ( final Exception ex ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { throw ex ; } @ Override public String toString ( ) { return "throwException(" + ex . toString ( ) + ")" ; } } ; } } 	1
package org . apache . camel . util ; import java . io . IOException ; public final class IOHelper { private IOHelper ( ) { } public static IOException createIOException ( Throwable cause ) { return createIOException ( cause . getMessage ( ) , cause ) ; } public static IOException createIOException ( String message , Throwable cause ) { IOException answer = new IOException ( message ) ; answer . initCause ( cause ) ; return answer ; } } 	0
package org . apache . camel . builder ; import java . util . Map ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . model . ExpressionNode ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . MethodCallExpression ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; public class ExpressionClause < T > extends ExpressionType { private T result ; private String language ; public ExpressionClause ( T result ) { this . result = result ; } public static < T extends ExpressionNode > ExpressionClause < T > createAndSetExpression ( T result ) { ExpressionClause < T > clause = new ExpressionClause < T > ( result ) ; result . setExpression ( clause ) ; return clause ; } public T expression ( Expression expression ) { setExpressionValue ( expression ) ; return result ; } public T constant ( Object value ) { return expression ( ExpressionBuilder . constantExpression ( value ) ) ; } public T exchange ( ) { return expression ( ExpressionBuilder . exchangeExpression ( ) ) ; } public T inMessage ( ) { return expression ( ExpressionBuilder . inMessageExpression ( ) ) ; } public T outMessage ( ) { return expression ( ExpressionBuilder . outMessageExpression ( ) ) ; } public T body ( ) { return expression ( ExpressionBuilder . bodyExpression ( ) ) ; } public T body ( Class expectedType ) { return expression ( ExpressionBuilder . bodyExpression ( expectedType ) ) ; } public T outBody ( ) { return expression ( ExpressionBuilder . outBodyExpression ( ) ) ; } public T outBody ( Class expectedType ) { return expression ( ExpressionBuilder . outBodyExpression ( expectedType ) ) ; } public T header ( String name ) { return expression ( ExpressionBuilder . headerExpression ( name ) ) ; } public T headers ( ) { return expression ( ExpressionBuilder . headersExpression ( ) ) ; } public T outHeader ( String name ) { return expression ( ExpressionBuilder . outHeaderExpression ( name ) ) ; } public T outHeaders ( ) { return expression ( ExpressionBuilder . outHeadersExpression ( ) ) ; } public T property ( String name ) { return expression ( ExpressionBuilder . propertyExpression ( name ) ) ; } public T properties ( ) { return expression ( ExpressionBuilder . propertiesExpression ( ) ) ; } public T method ( String bean ) { MethodCallExpression expression = new MethodCallExpression ( bean ) ; setExpressionType ( expression ) ; return result ; } public T method ( String bean , String method ) { MethodCallExpression expression = new MethodCallExpression ( bean , method ) ; setExpressionType ( expression ) ; return result ; } public T el ( String text ) { return language ( "el" , text ) ; } public T groovy ( String text ) { return language ( "groovy" , text ) ; } public T javaScript ( String text ) { return language ( "js" , text ) ; } public T jxpath ( String text ) { return language ( "jxpath" , text ) ; } public T ognl ( String text ) { return language ( "ognl" , text ) ; } public T php ( String text ) { return language ( "php" , text ) ; } public T python ( String text ) { return language ( "python" , text ) ; } public T ruby ( String text ) { return language ( "ruby" , text ) ; } public T sql ( String text ) { return language ( "sql" , text ) ; } public T simple ( String text ) { return language ( "simple" , text ) ; } public T xpath ( String text ) { return language ( "xpath" , text ) ; } public T xpath ( String text , Class resultType ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Class resultType , Namespaces namespaces ) { return xpath ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Class resultType , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Namespaces namespaces ) { return xpath ( text , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text ) { return language ( "xquery" , text ) ; } public T xquery ( String text , Class resultType ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Class resultType , Namespaces namespaces ) { return xquery ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Class resultType , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Namespaces namespaces ) { return xquery ( text , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T language ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; return result ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . JMSException ; public class MessagePropertyNamesAccessException extends RuntimeJmsException { private static final long serialVersionUID = - 6744171518099741324L ; public MessagePropertyNamesAccessException ( JMSException e ) { super ( "Failed to access the JMS message property names: " + e , e ) ; } } 	0
package org . apache . camel . processor ; public enum LoggingLevel { DEBUG , ERROR , FATAL , INFO , TRACE , WARN } 	1
package org . apache . camel . component . direct ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DirectProducer < E extends Exchange > extends DefaultProducer implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( DirectProducer . class ) ; private DirectEndpoint < E > endpoint ; public DirectProducer ( DirectEndpoint < E > endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public void process ( Exchange exchange ) throws Exception { if ( endpoint . getConsumers ( ) . isEmpty ( ) ) { LOG . warn ( "No getConsumers() available on " + this + " for " + exchange ) ; } else { for ( DefaultConsumer < E > consumer : endpoint . getConsumers ( ) ) { consumer . getProcessor ( ) . process ( exchange ) ; } } } public boolean process ( Exchange exchange , AsyncCallback callback ) { int size = endpoint . getConsumers ( ) . size ( ) ; if ( size == 0 ) { LOG . warn ( "No getConsumers() available on " + this + " for " + exchange ) ; } else if ( size == 1 ) { DefaultConsumer < E > consumer = endpoint . getConsumers ( ) . get ( 0 ) ; AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( consumer . getProcessor ( ) ) ; return processor . process ( exchange , callback ) ; } else if ( size > 1 ) { try { for ( DefaultConsumer < E > consumer : endpoint . getConsumers ( ) ) { consumer . getProcessor ( ) . process ( exchange ) ; } } catch ( Throwable error ) { exchange . setException ( error ) ; } } callback . done ( true ) ; return true ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . TryProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "try" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TryType extends OutputType < TryType > { @ XmlTransient private List < CatchType > catchClauses ; @ XmlTransient private FinallyType finallyClause ; @ XmlTransient private boolean initialized ; @ XmlTransient private List < ProcessorType < ? > > outputsWithoutCatches ; @ Override public String toString ( ) { return "Try[ " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "try" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor tryProcessor = createOutputsProcessor ( routeContext , getOutputsWithoutCatches ( ) ) ; Processor finallyProcessor = null ; if ( finallyClause != null ) { finallyProcessor = finallyClause . createProcessor ( routeContext ) ; } List < CatchProcessor > catchProcessors = new ArrayList < CatchProcessor > ( ) ; if ( catchClauses != null ) { for ( CatchType catchClause : catchClauses ) { catchProcessors . add ( catchClause . createProcessor ( routeContext ) ) ; } } return new TryProcessor ( tryProcessor , catchProcessors , finallyProcessor ) ; } public TryType handle ( Class < ? > exceptionType ) { popBlock ( ) ; CatchType answer = new CatchType ( exceptionType ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Deprecated public TryType handleAll ( ) { return finallyBlock ( ) ; } public TryType finallyBlock ( ) { popBlock ( ) ; FinallyType answer = new FinallyType ( ) ; addOutput ( answer ) ; pushBlock ( answer ) ; return this ; } @ Override public ProcessorType < ? extends ProcessorType > end ( ) { popBlock ( ) ; return super . end ( ) ; } public List < CatchType > getCatchClauses ( ) { if ( catchClauses == null ) { checkInitialized ( ) ; } return catchClauses ; } public FinallyType getFinallyClause ( ) { if ( finallyClause == null ) { checkInitialized ( ) ; } return finallyClause ; } public List < ProcessorType < ? > > getOutputsWithoutCatches ( ) { if ( outputsWithoutCatches == null ) { checkInitialized ( ) ; } return outputsWithoutCatches ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { initialized = false ; super . setOutputs ( outputs ) ; } @ Override public void addOutput ( ProcessorType output ) { initialized = false ; super . addOutput ( output ) ; } protected void checkInitialized ( ) { if ( ! initialized ) { initialized = true ; outputsWithoutCatches = new ArrayList < ProcessorType < ? > > ( ) ; catchClauses = new ArrayList < CatchType > ( ) ; finallyClause = null ; for ( ProcessorType output : outputs ) { if ( output instanceof CatchType ) { catchClauses . add ( ( CatchType ) output ) ; } else if ( output instanceof FinallyType ) { if ( finallyClause != null ) { throw new IllegalArgumentException ( "Multiple finally clauses added: " + finallyClause + " and " + output ) ; } else { finallyClause = ( FinallyType ) output ; } } else { outputsWithoutCatches . add ( output ) ; } } } } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "sql" ) public class SqlExpression extends ExpressionType { public SqlExpression ( ) { } public SqlExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "sql" ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultComponentResolver < E extends Exchange > implements ComponentResolver < E > { protected static final FactoryFinder COMPONENT_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; private static final transient Log LOG = LogFactory . getLog ( DefaultComponentResolver . class ) ; public Component < E > resolveComponent ( String name , CamelContext context ) { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } } Class type ; try { type = COMPONENT_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { return null ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " via type: " + type . getName ( ) + " via " + COMPONENT_FACTORY . getPath ( ) + name ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component < E > ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/spring" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . model . config ; 	0
package org . apache . camel . util ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Properties ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . spi . Injector ; public class FactoryFinder { private final String path ; private final ConcurrentHashMap classMap = new ConcurrentHashMap ( ) ; public FactoryFinder ( ) { this ( "META-INF/services/org/apache/camel/" ) ; } public FactoryFinder ( String path ) { this . path = path ; } public Object newInstance ( String key ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { return newInstance ( key , ( String ) null ) ; } public Object newInstance ( String key , String propertyPrefix ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { Class clazz = findClass ( key , propertyPrefix ) ; return clazz . newInstance ( ) ; } public Object newInstance ( String key , Injector injector ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , ( String ) null ) ; } public Object newInstance ( String key , Injector injector , String propertyPrefix ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; return injector . newInstance ( type ) ; } public < T > T newInstance ( String key , Injector injector , Class < T > expectedType ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , null , expectedType ) ; } public < T > T newInstance ( String key , Injector injector , String propertyPrefix , Class < T > expectedType ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; Object value = injector . newInstance ( type ) ; if ( expectedType . isInstance ( value ) ) { return expectedType . cast ( value ) ; } else { throw new ClassCastException ( "Not instanceof " + expectedType . getName ( ) + " value: " + value ) ; } } public < T > List < T > newInstances ( String key , Injector injector , Class < T > type ) throws IOException , ClassNotFoundException { List < Class > list = findClasses ( key ) ; List < T > answer = new ArrayList < T > ( list . size ( ) ) ; answer . add ( newInstance ( key , injector , type ) ) ; return answer ; } public Class findClass ( String key ) throws ClassNotFoundException , IOException { return findClass ( key , null ) ; } public Class findClass ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { if ( propertyPrefix == null ) { propertyPrefix = "" ; } Class clazz = ( Class ) classMap . get ( propertyPrefix + key ) ; if ( clazz == null ) { clazz = newInstance ( doFindFactoryProperties ( key ) , propertyPrefix ) ; classMap . put ( propertyPrefix + key , clazz ) ; } return clazz ; } public List < Class > findClasses ( String key ) throws ClassNotFoundException , IOException { return findClasses ( key , null ) ; } public List < Class > findClasses ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { Class type = findClass ( key , propertyPrefix ) ; return Collections . singletonList ( type ) ; } public String getPath ( ) { return path ; } private Class newInstance ( Properties properties , String propertyPrefix ) throws ClassNotFoundException , IOException { String className = properties . getProperty ( propertyPrefix + "class" ) ; if ( className == null ) { throw new IOException ( "Expected property is missing: " + propertyPrefix + "class" ) ; } return ObjectHelper . loadClass ( className ) ; } private Properties doFindFactoryProperties ( String key ) throws IOException { String uri = path + key ; InputStream in = ObjectHelper . loadResourceAsStream ( uri ) ; if ( in == null ) { throw new NoFactoryAvailableException ( uri ) ; } BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( in ) ; Properties properties = new Properties ( ) ; properties . load ( reader ) ; return properties ; } finally { ObjectHelper . close ( reader , key , null ) ; ObjectHelper . close ( in , key , null ) ; } } } 	1
package org . apache . camel . component . cxf . invoker ; import javax . xml . ws . soap . SOAPBinding ; import org . apache . cxf . BusException ; import org . apache . cxf . endpoint . Client ; import org . apache . cxf . endpoint . ClientImpl ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . endpoint . EndpointException ; import org . apache . cxf . frontend . ClientFactoryBean ; import org . apache . cxf . jaxws . binding . soap . JaxWsSoapBindingConfiguration ; import org . apache . cxf . jaxws . support . JaxWsServiceFactoryBean ; import org . apache . cxf . service . factory . ReflectionServiceFactoryBean ; import org . apache . cxf . service . factory . ServiceConstructionException ; public class CxfClientFactoryBean extends ClientFactoryBean { private boolean isJSR181Enabled ; public CxfClientFactoryBean ( ) { super ( ) ; } public void setJSR181Enabled ( boolean enabled ) { if ( enabled ) { setServiceFactory ( new JaxWsServiceFactoryBean ( ) ) ; } else { setServiceFactory ( new ReflectionServiceFactoryBean ( ) ) ; } isJSR181Enabled = enabled ; } @ Override public void setBindingId ( String bind ) { super . setBindingId ( bind ) ; if ( isJSR181Enabled ) { if ( SOAPBinding . SOAP11HTTP_BINDING . equals ( bind ) || SOAPBinding . SOAP12HTTP_BINDING . equals ( bind ) ) { setBindingConfig ( new JaxWsSoapBindingConfiguration ( ( JaxWsServiceFactoryBean ) getServiceFactory ( ) ) ) ; } else if ( SOAPBinding . SOAP11HTTP_MTOM_BINDING . equals ( bind ) || SOAPBinding . SOAP12HTTP_MTOM_BINDING . equals ( bind ) ) { setBindingConfig ( new JaxWsSoapBindingConfiguration ( ( JaxWsServiceFactoryBean ) getServiceFactory ( ) ) ) ; ( ( JaxWsSoapBindingConfiguration ) getBindingConfig ( ) ) . setMtomEnabled ( true ) ; } } } protected void createClient ( Endpoint ep ) { CxfClient client = new CxfClient ( getBus ( ) , ep ) ; setClient ( client ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor { protected AsyncProcessor processor ; public DelegateAsyncProcessor ( ) { } public DelegateAsyncProcessor ( AsyncProcessor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public AsyncProcessor getProcessor ( ) { return processor ; } public void setProcessor ( AsyncProcessor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } } 	1
package org . apache . camel . impl . converter ; import java . beans . PropertyEditor ; import java . beans . PropertyEditorManager ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; public class PropertyEditorTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > toType , Object value ) { if ( value == null ) { return null ; } if ( value . getClass ( ) == String . class ) { if ( toType == String . class ) { return ObjectHelper . cast ( toType , value ) ; } PropertyEditor editor = PropertyEditorManager . findEditor ( toType ) ; if ( editor != null ) { editor . setAsText ( value . toString ( ) ) ; return ObjectHelper . cast ( toType , editor . getValue ( ) ) ; } } else if ( toType == String . class ) { PropertyEditor editor = PropertyEditorManager . findEditor ( value . getClass ( ) ) ; if ( editor != null ) { editor . setValue ( value ) ; return ObjectHelper . cast ( toType , editor . getAsText ( ) ) ; } } return null ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . DataFormatClause ; import org . apache . camel . builder . DeadLetterChannelBuilder ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . ErrorHandlerBuilderRef ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . NoErrorHandlerBuilder ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . LanguageExpression ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlAccessorType ( XmlAccessType . PROPERTY ) public abstract class ProcessorType < Type extends ProcessorType > extends OptionalIdentifiedType < Type > implements Block { public static final String DEFAULT_TRACE_CATEGORY = "org.apache.camel.TRACE" ; private static final transient Log LOG = LogFactory . getLog ( ProcessorType . class ) ; private ErrorHandlerBuilder errorHandlerBuilder ; private Boolean inheritErrorHandlerFlag ; private NodeFactory nodeFactory ; private LinkedList < Block > blocks = new LinkedList < Block > ( ) ; private ProcessorType < ? extends ProcessorType > parent ; private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; private String errorHandlerRef ; public abstract List < ProcessorType < ? > > getOutputs ( ) ; public Processor createProcessor ( RouteContext routeContext ) throws Exception { throw new UnsupportedOperationException ( "Not implemented yet for class: " + getClass ( ) . getName ( ) ) ; } public Processor createOutputsProcessor ( RouteContext routeContext ) throws Exception { Collection < ProcessorType < ? > > outputs = getOutputs ( ) ; return createOutputsProcessor ( routeContext , outputs ) ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Processor processor = makeProcessor ( routeContext ) ; if ( ! routeContext . isRouteAdded ( ) ) { routeContext . addEventDrivenProcessor ( processor ) ; } } public Processor wrapProcessor ( RouteContext routeContext , Processor processor ) throws Exception { processor = wrapProcessorInInterceptors ( routeContext , processor ) ; return wrapInErrorHandler ( routeContext , processor ) ; } public Type to ( String uri ) { addOutput ( new ToType ( uri ) ) ; return ( Type ) this ; } public Type to ( Endpoint endpoint ) { addOutput ( new ToType ( endpoint ) ) ; return ( Type ) this ; } public Type to ( String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri ) ) ; } return ( Type ) this ; } public Type to ( Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( Collection < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public MulticastType multicast ( ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public Type pipeline ( String ... uris ) { return to ( uris ) ; } public Type pipeline ( Endpoint ... endpoints ) { return to ( endpoints ) ; } public Type pipeline ( Collection < Endpoint > endpoints ) { return to ( endpoints ) ; } public ProcessorType < ? extends ProcessorType > end ( ) { if ( blocks . isEmpty ( ) ) { if ( parent == null ) { throw new IllegalArgumentException ( "Root node with no active block" ) ; } return parent ; } popBlock ( ) ; return this ; } public ThreadType thread ( int coreSize ) { ThreadType answer = new ThreadType ( coreSize ) ; addOutput ( answer ) ; return answer ; } public ProcessorType < Type > thread ( ThreadPoolExecutor executor ) { ThreadType answer = new ThreadType ( executor ) ; addOutput ( answer ) ; return this ; } public IdempotentConsumerType idempotentConsumer ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( messageIdExpression , messageIdRepository ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < IdempotentConsumerType > idempotentConsumer ( MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( ) ; answer . setMessageIdRepository ( messageIdRepository ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < FilterType > filter ( ) { FilterType filter = new FilterType ( ) ; addOutput ( filter ) ; return ExpressionClause . createAndSetExpression ( filter ) ; } public FilterType filter ( Predicate predicate ) { FilterType filter = new FilterType ( predicate ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( ExpressionType expression ) { FilterType filter = getNodeFactory ( ) . createFilter ( ) ; filter . setExpression ( expression ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( String language , String expression ) { return filter ( new LanguageExpression ( language , expression ) ) ; } public LoadBalanceType loadBalance ( ) { LoadBalanceType answer = new LoadBalanceType ( ) ; addOutput ( answer ) ; return answer ; } public ChoiceType choice ( ) { ChoiceType answer = new ChoiceType ( ) ; addOutput ( answer ) ; return answer ; } public TryType tryBlock ( ) { TryType answer = new TryType ( ) ; addOutput ( answer ) ; return answer ; } public Type recipientList ( Expression receipients ) { RecipientListType answer = new RecipientListType ( receipients ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > recipientList ( ) { RecipientListType answer = new RecipientListType ( ) ; addOutput ( answer ) ; ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; answer . setExpression ( clause ) ; return clause ; } public Type routingSlip ( String header , String uriDelimiter ) { RoutingSlipType answer = new RoutingSlipType ( header , uriDelimiter ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( String header ) { RoutingSlipType answer = new RoutingSlipType ( header ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( ) { RoutingSlipType answer = new RoutingSlipType ( ) ; addOutput ( answer ) ; return ( Type ) this ; } public SplitterType splitter ( Expression receipients ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression receipients , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < ResequencerType > resequencer ( ) { ResequencerType answer = new ResequencerType ( ) ; addOutput ( answer ) ; ExpressionClause < ResequencerType > clause = new ExpressionClause < ResequencerType > ( answer ) ; answer . expression ( clause ) ; return clause ; } public ResequencerType resequencer ( Expression < Exchange > expression ) { return resequencer ( Collections . < Expression > singletonList ( expression ) ) ; } public ResequencerType resequencer ( List < Expression > expressions ) { ResequencerType answer = new ResequencerType ( expressions ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression ... expressions ) { List < Expression > list = new ArrayList < Expression > ( ) ; list . addAll ( Arrays . asList ( expressions ) ) ; return resequencer ( list ) ; } public ExpressionClause < AggregatorType > aggregator ( ) { AggregatorType answer = new AggregatorType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationCollection aggregationCollection ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationCollection ( aggregationCollection ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public AggregatorType aggregator ( Expression correlationExpression ) { AggregatorType answer = new AggregatorType ( correlationExpression ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( correlationExpression , aggregationStrategy ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( Expression < Exchange > processAtExpression ) { return delayer ( processAtExpression , 0L ) ; } public DelayerType delayer ( Expression < Exchange > processAtExpression , long delay ) { DelayerType answer = new DelayerType ( processAtExpression , delay ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < DelayerType > delayer ( ) { DelayerType answer = new DelayerType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public DelayerType delayer ( long delay ) { return delayer ( null , delay ) ; } public ThrottlerType throttler ( long maximumRequestCount ) { ThrottlerType answer = new ThrottlerType ( maximumRequestCount ) ; addOutput ( answer ) ; return answer ; } public Type throwFault ( Throwable fault ) { ThrowFaultType answer = new ThrowFaultType ( ) ; answer . setFault ( fault ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type throwFault ( String message ) { return throwFault ( new CamelException ( message ) ) ; } public Type interceptor ( String ref ) { InterceptorRef interceptor = new InterceptorRef ( ref ) ; intercept ( interceptor ) ; return ( Type ) this ; } public Type intercept ( DelegateProcessor interceptor ) { intercept ( new InterceptorRef ( interceptor ) ) ; return ( Type ) this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer ; } public void intercept ( InterceptorType interceptor ) { addOutput ( interceptor ) ; pushBlock ( interceptor ) ; } public void addInterceptor ( InterceptorType interceptor ) { interceptors . add ( interceptor ) ; } public void addInterceptor ( DelegateProcessor interceptor ) { addInterceptor ( new InterceptorRef ( interceptor ) ) ; } protected void pushBlock ( Block block ) { blocks . add ( block ) ; } protected Block popBlock ( ) { return blocks . isEmpty ( ) ? null : blocks . removeLast ( ) ; } public Type proceed ( ) { ProceedType proceed = null ; ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { proceed = ( ( InterceptType ) currentProcessor ) . getProceed ( ) ; LOG . info ( "proceed() is the implied and hence not needed for an intercept()" ) ; } if ( proceed == null ) { for ( ProcessorType node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { InterceptType intercept = ( InterceptType ) node ; proceed = intercept . getProceed ( ) ; break ; } } if ( proceed == null ) { throw new IllegalArgumentException ( "Cannot use proceed() without being within an intercept() block" ) ; } } addOutput ( proceed ) ; return ( Type ) this ; } public Type stop ( ) { ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { ( ( InterceptType ) currentProcessor ) . stopIntercept ( ) ; } else { ProcessorType node ; for ( node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { ( ( InterceptType ) node ) . stopIntercept ( ) ; break ; } } if ( node == null ) { throw new IllegalArgumentException ( "Cannot use stop() without being within an intercept() block" ) ; } } return ( Type ) this ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer . when ( predicate ) ; } public Type interceptors ( String ... refs ) { for ( String ref : refs ) { interceptor ( ref ) ; } return ( Type ) this ; } public Type trace ( ) { return trace ( DEFAULT_TRACE_CATEGORY ) ; } public Type trace ( String category ) { final Log log = LogFactory . getLog ( category ) ; return intercept ( new DelegateProcessor ( ) { @ Override public void process ( Exchange exchange ) throws Exception { log . trace ( exchange ) ; processNext ( exchange ) ; } } ) ; } public PolicyRef policies ( ) { PolicyRef answer = new PolicyRef ( ) ; addOutput ( answer ) ; return answer ; } public PolicyRef policy ( Policy policy ) { PolicyRef answer = new PolicyRef ( policy ) ; addOutput ( answer ) ; return answer ; } public Type handleFault ( ) { intercept ( new HandleFaultType ( ) ) ; return ( Type ) this ; } public Type errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return ( Type ) this ; } public Type inheritErrorHandler ( boolean condition ) { setInheritErrorHandlerFlag ( condition ) ; return ( Type ) this ; } public Type process ( Processor processor ) { ProcessorRef answer = new ProcessorRef ( processor ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type processRef ( String ref ) { ProcessorRef answer = new ProcessorRef ( ) ; answer . setRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref ) { BeanRef answer = new BeanRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref , String method ) { BeanRef answer = new BeanRef ( ref , method ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setBody ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetBodyType answer = new SetBodyType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setBody ( Expression expression ) { SetBodyType answer = new SetBodyType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } @ Deprecated public Type setOutBody ( Expression expression ) { return transform ( expression ) ; } @ Deprecated public ExpressionClause < ProcessorType < Type > > setOutBody ( ) { return transform ( ) ; } public Type transform ( Expression expression ) { TransformType answer = new TransformType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > transform ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; TransformType answer = new TransformType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setFaultBody ( Expression expression ) { return process ( ProcessorBuilder . setFaultBody ( expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetHeaderType answer = new SetHeaderType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type setHeader ( String name , Expression expression ) { SetHeaderType answer = new SetHeaderType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setHeader ( String name , String value ) { SetHeaderType answer = new SetHeaderType ( name , value ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setOutHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setOutHeader ( name , clause ) ) ; return clause ; } public Type setOutHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setOutHeader ( name , expression ) ) ; } public Type setOutHeader ( String name , String value ) { return ( Type ) setOutHeader ( name ) . constant ( value ) ; } public Type setFaultHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setFaultHeader ( name , expression ) ) ; } public Type setProperty ( String name , Expression expression ) { return process ( ProcessorBuilder . setProperty ( name , expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setProperty ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; process ( ProcessorBuilder . setProperty ( name , clause ) ) ; return clause ; } public Type removeHeader ( String name ) { return process ( ProcessorBuilder . removeHeader ( name ) ) ; } public Type removeOutHeader ( String name ) { return process ( ProcessorBuilder . removeOutHeader ( name ) ) ; } public Type removeFaultHeader ( String name ) { return process ( ProcessorBuilder . removeFaultHeader ( name ) ) ; } public Type removeProperty ( String name ) { return process ( ProcessorBuilder . removeProperty ( name ) ) ; } public Type convertBodyTo ( Class type ) { addOutput ( new ConvertBodyType ( type ) ) ; return ( Type ) this ; } @ Deprecated public Type convertOutBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } @ Deprecated public Type convertFaultBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } public DataFormatClause < ProcessorType < Type > > unmarshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Unmarshal ) ; } public Type unmarshal ( DataFormatType dataFormatType ) { addOutput ( new UnmarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type unmarshal ( DataFormat dataFormat ) { return unmarshal ( new DataFormatType ( dataFormat ) ) ; } public Type unmarshal ( String dataTypeRef ) { addOutput ( new UnmarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } public DataFormatClause < ProcessorType < Type > > marshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Marshal ) ; } public Type marshal ( DataFormatType dataFormatType ) { addOutput ( new MarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type marshal ( DataFormat dataFormat ) { return marshal ( new DataFormatType ( dataFormat ) ) ; } public Type marshal ( String dataTypeRef ) { addOutput ( new MarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } @ XmlTransient public ProcessorType < ? extends ProcessorType > getParent ( ) { return parent ; } public void setParent ( ProcessorType < ? extends ProcessorType > parent ) { this . parent = parent ; } @ XmlTransient public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void setErrorHandlerBuilderIfNull ( ErrorHandlerBuilder errorHandlerBuilder ) { if ( this . errorHandlerBuilder == null ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; } } public String getErrorHandlerRef ( ) { return errorHandlerRef ; } @ XmlAttribute ( required = false ) public void setErrorHandlerRef ( String errorHandlerRef ) { this . errorHandlerRef = errorHandlerRef ; setErrorHandlerBuilder ( new ErrorHandlerBuilderRef ( errorHandlerRef ) ) ; } @ XmlTransient public boolean isInheritErrorHandler ( ) { return isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public static boolean isInheritErrorHandler ( Boolean value ) { return value == null || value . booleanValue ( ) ; } @ XmlAttribute ( name = "inheritErrorHandler" , required = false ) public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } @ XmlTransient public NodeFactory getNodeFactory ( ) { if ( nodeFactory == null ) { nodeFactory = new NodeFactory ( ) ; } return nodeFactory ; } public void setNodeFactory ( NodeFactory nodeFactory ) { this . nodeFactory = nodeFactory ; } public String getLabel ( ) { return "" ; } protected Processor makeProcessor ( RouteContext routeContext ) throws Exception { Processor processor = createProcessor ( routeContext ) ; return wrapProcessor ( routeContext , processor ) ; } protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } List < InterceptStrategy > strategies = new ArrayList < InterceptStrategy > ( ) ; CamelContext camelContext = routeContext . getCamelContext ( ) ; if ( camelContext instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) camelContext ; strategies . addAll ( defaultCamelContext . getInterceptStrategies ( ) ) ; } strategies . addAll ( routeContext . getInterceptStrategies ( ) ) ; for ( InterceptStrategy strategy : strategies ) { if ( strategy != null ) { target = strategy . wrapProcessorInInterceptors ( this , target ) ; } } List < InterceptorType > list = routeContext . getRoute ( ) . getInterceptors ( ) ; if ( interceptors != null ) { list . addAll ( interceptors ) ; } Collections . reverse ( list ) ; Set < Processor > interceptors = new HashSet < Processor > ( ) ; interceptors . add ( target ) ; for ( InterceptorType interceptorType : list ) { DelegateProcessor interceptor = interceptorType . createInterceptor ( routeContext ) ; if ( ! interceptors . contains ( interceptor ) ) { interceptors . add ( interceptor ) ; if ( interceptor . getProcessor ( ) != null ) { LOG . warn ( "Interceptor " + interceptor + " currently wraps target " + interceptor . getProcessor ( ) + " is attempting to change target " + target + " new wrapping has been denied." ) ; } else { interceptor . setProcessor ( target ) ; target = interceptor ; } } } return target ; } protected Processor wrapInErrorHandler ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target not provided." ) ; } ErrorHandlerWrappingStrategy strategy = routeContext . getErrorHandlerWrappingStrategy ( ) ; if ( strategy != null ) { return strategy . wrapProcessorInErrorHandler ( routeContext , this , target ) ; } return getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( errorHandlerRef != null ) { return new ErrorHandlerBuilderRef ( errorHandlerRef ) ; } if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } protected void configureChild ( ProcessorType output ) { output . setNodeFactory ( getNodeFactory ( ) ) ; } public void addOutput ( ProcessorType processorType ) { processorType . setParent ( this ) ; configureChild ( processorType ) ; if ( blocks . isEmpty ( ) ) { getOutputs ( ) . add ( processorType ) ; } else { Block block = blocks . getLast ( ) ; block . addOutput ( processorType ) ; } } protected Processor createCompositeProcessor ( List < Processor > list ) { return new Pipeline ( list ) ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { List < Processor > list = new ArrayList < Processor > ( ) ; for ( ProcessorType output : outputs ) { Processor processor = output . createProcessor ( routeContext ) ; processor = output . wrapProcessorInInterceptors ( routeContext , processor ) ; ProcessorType currentProcessor = this ; if ( ! ( currentProcessor instanceof ExceptionType || currentProcessor instanceof TryType ) ) { processor = output . wrapInErrorHandler ( routeContext , processor ) ; } list . add ( processor ) ; } Processor processor = null ; if ( ! list . isEmpty ( ) ) { if ( list . size ( ) == 1 ) { processor = list . get ( 0 ) ; } else { processor = createCompositeProcessor ( list ) ; } } return processor ; } public void clearOutput ( ) { getOutputs ( ) . clear ( ) ; blocks . clear ( ) ; } } 	1
package org . apache . camel . component . cxf . util ; public class Dummy { } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionHelper ; public class Delayer extends DelayProcessorSupport { private Expression < Exchange > timeExpression ; private long delay ; public Delayer ( Processor processor , Expression < Exchange > timeExpression , long delay ) { super ( processor ) ; this . timeExpression = timeExpression ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[on: " + timeExpression + " delay: " + delay + " to: " + getProcessor ( ) + "]" ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } protected void delay ( Exchange exchange ) throws Exception { long time = 0 ; if ( timeExpression != null ) { Long longValue = ExpressionHelper . evaluateAsType ( timeExpression , exchange , Long . class ) ; if ( longValue != null ) { time = longValue . longValue ( ) ; } } if ( time <= 0 ) { time = defaultProcessTime ( exchange ) ; } time += delay ; waitUntil ( time , exchange ) ; } protected long defaultProcessTime ( Exchange exchange ) { return currentSystemTime ( ) ; } } 	1
package org . apache . camel . component . xmpp ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . jivesoftware . smack . XMPPException ; import org . jivesoftware . smack . packet . Message ; import org . jivesoftware . smackx . muc . MultiUserChat ; public class XmppGroupChatProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( XmppGroupChatProducer . class ) ; private final XmppEndpoint endpoint ; private final String room ; private MultiUserChat chat ; public XmppGroupChatProducer ( XmppEndpoint endpoint , String room ) { super ( endpoint ) ; this . endpoint = endpoint ; this . room = room ; if ( room == null ) { throw new IllegalArgumentException ( "No room property specified" ) ; } } public void process ( Exchange exchange ) { Message message = chat . createMessage ( ) ; message . setTo ( room ) ; message . setFrom ( endpoint . getUser ( ) ) ; endpoint . getBinding ( ) . populateXmppMessage ( message , exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> message: " + message . getBody ( ) ) ; } try { chat . sendMessage ( message ) ; } catch ( XMPPException e ) { throw new RuntimeXmppException ( e ) ; } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( chat == null ) { chat = new MultiUserChat ( endpoint . getConnection ( ) , room ) ; String nickname = this . endpoint . getNickname ( ) ; chat . join ( nickname != null ? nickname : this . endpoint . getUser ( ) ) ; } } @ Override protected void doStop ( ) throws Exception { if ( chat != null ) { chat . leave ( ) ; chat = null ; } super . doStop ( ) ; } public MultiUserChat getChat ( ) { return chat ; } public void setChat ( MultiUserChat chat ) { this . chat = chat ; } public String getRoom ( ) { return room ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandler extends ErrorHandlerSupport { private Processor output ; private Log log ; private LoggingLevel level ; public LoggingErrorHandler ( Processor output ) { this ( output , LogFactory . getLog ( LoggingErrorHandler . class ) , LoggingLevel . INFO ) ; } public LoggingErrorHandler ( Processor output , Log log , LoggingLevel level ) { this . output = output ; this . log = log ; this . level = level ; } @ Override public String toString ( ) { return "LoggingErrorHandler[" + output + "]" ; } public void process ( Exchange exchange ) throws Exception { try { output . process ( exchange ) ; } catch ( Throwable e ) { if ( ! customProcessorForException ( exchange , e ) ) { logError ( exchange , e ) ; } } } public Processor getOutput ( ) { return output ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } protected void logError ( Exchange exchange , Throwable e ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange , e ) , e ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange , e ) , e ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange , e ) , e ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange , e ) , e ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange , e ) , e ) ; } } protected Object logMessage ( Exchange exchange , Throwable e ) { return e + " while processing exchange: " + exchange ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( output ) ; } } 	1
package org . apache . camel . spring . spi ; import org . apache . camel . spi . Registry ; import org . springframework . beans . factory . NoSuchBeanDefinitionException ; import org . springframework . context . ApplicationContext ; public class ApplicationContextRegistry implements Registry { private ApplicationContext applicationContext ; public ApplicationContextRegistry ( ApplicationContext applicationContext ) { this . applicationContext = applicationContext ; } public < T > T lookup ( String name , Class < T > type ) { try { Object value = applicationContext . getBean ( name , type ) ; return type . cast ( value ) ; } catch ( NoSuchBeanDefinitionException e ) { return null ; } } public Object lookup ( String name ) { try { return applicationContext . getBean ( name ) ; } catch ( NoSuchBeanDefinitionException e ) { return null ; } } } 	0
package org . apache . camel . processor ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . processor . resequencer . ResequencerEngine ; import org . apache . camel . processor . resequencer . SequenceElementComparator ; import org . apache . camel . processor . resequencer . SequenceSender ; public class StreamResequencer extends DelegateProcessor implements Processor { private ResequencerEngine < Exchange > reseq ; private BlockingQueue < Exchange > queue ; private SequenceSender sender ; public StreamResequencer ( Processor processor , SequenceElementComparator < Exchange > comparator , int capacity ) { super ( processor ) ; queue = new LinkedBlockingQueue < Exchange > ( ) ; reseq = new ResequencerEngine < Exchange > ( comparator , capacity ) ; reseq . setOutQueue ( queue ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; sender = new SequenceSender ( getProcessor ( ) ) ; sender . setQueue ( queue ) ; sender . start ( ) ; } @ Override protected void doStop ( ) throws Exception { reseq . stop ( ) ; sender . cancel ( ) ; super . doStop ( ) ; } @ Override public void process ( Exchange exchange ) throws Exception { reseq . put ( exchange ) ; } public long getTimeout ( ) { return reseq . getTimeout ( ) ; } public void setTimeout ( long timeout ) { reseq . setTimeout ( timeout ) ; } @ Override public String toString ( ) { return "StreamResequencer[to: " + getProcessor ( ) + "]" ; } } 	1
package org . apache . camel . component . file . remote ; import org . apache . camel . Message ; import org . apache . camel . component . file . FileComponent ; import org . apache . camel . impl . DefaultProducer ; public abstract class RemoteFileProducer < T extends RemoteFileExchange > extends DefaultProducer < T > { protected RemoteFileProducer ( RemoteFileEndpoint < T > endpoint ) { super ( endpoint ) ; } protected String createFileName ( Message message , RemoteFileConfiguration fileConfig ) { String answer ; String endpointFileName = fileConfig . getFile ( ) ; String headerFileName = message . getHeader ( FileComponent . HEADER_FILE_NAME , String . class ) ; if ( fileConfig . isDirectory ( ) ) { String baseDir = "" ; if ( endpointFileName . length ( ) > 0 ) { baseDir = endpointFileName + ( endpointFileName . endsWith ( "/" ) ? "" : "/" ) ; } String fileName = ( headerFileName != null ) ? headerFileName : message . getMessageId ( ) ; answer = baseDir + fileName ; } else { answer = endpointFileName ; } return answer ; } protected abstract void connectIfNecessary ( ) throws Exception ; protected abstract void disconnect ( ) throws Exception ; } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TraceInterceptor extends DelegateProcessor implements ExchangeFormatter { private final ProcessorType node ; private Predicate traceFilter ; private boolean traceExceptions = true ; private Logger logger = new Logger ( LogFactory . getLog ( TraceInterceptor . class ) , this ) ; private TraceFormatter formatter ; public TraceInterceptor ( ProcessorType node , Processor target , TraceFormatter formatter ) { super ( target ) ; this . node = node ; this . formatter = formatter ; } @ Override public String toString ( ) { return "TraceInterceptor[" + node + "]" ; } public void process ( Exchange exchange ) throws Exception { try { if ( shouldLogExchange ( exchange ) ) { logExchange ( exchange ) ; } super . proceed ( exchange ) ; } catch ( Exception e ) { logException ( exchange , e ) ; throw e ; } catch ( Error e ) { logException ( exchange , e ) ; throw e ; } } public Object format ( Exchange exchange ) { return formatter . format ( this , exchange ) ; } public ProcessorType getNode ( ) { return node ; } public Predicate getTraceFilter ( ) { return traceFilter ; } public void setTraceFilter ( Predicate traceFilter ) { this . traceFilter = traceFilter ; } public boolean isTraceExceptions ( ) { return traceExceptions ; } public void setTraceExceptions ( boolean traceExceptions ) { this . traceExceptions = traceExceptions ; } public Logger getLogger ( ) { return logger ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } public LoggingLevel getLevel ( ) { return getLogger ( ) . getLevel ( ) ; } public Log getLog ( ) { return getLogger ( ) . getLog ( ) ; } public void setLog ( Log log ) { getLogger ( ) . setLog ( log ) ; } public void setLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; } protected void logExchange ( Exchange exchange ) { logger . process ( exchange ) ; } protected void logException ( Exchange exchange , Throwable throwable ) { logger . process ( exchange , throwable ) ; } protected boolean shouldLogExchange ( Exchange exchange ) { return traceFilter == null || traceFilter . matches ( exchange ) ; } } 	1
package org . apache . camel . component . xmpp ; import java . net . URI ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class XmppComponent extends DefaultComponent < XmppExchange > { public XmppComponent ( ) { } public XmppComponent ( CamelContext context ) { super ( context ) ; } public static XmppComponent xmppComponent ( ) { return new XmppComponent ( ) ; } @ Override protected Endpoint < XmppExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { XmppEndpoint endpoint = new XmppEndpoint ( uri , this ) ; URI u = new URI ( uri ) ; endpoint . setHost ( u . getHost ( ) ) ; endpoint . setPort ( u . getPort ( ) ) ; if ( u . getUserInfo ( ) != null ) { endpoint . setUser ( u . getUserInfo ( ) ) ; } String remainingPath = u . getPath ( ) ; if ( remainingPath != null ) { if ( remainingPath . startsWith ( "/" ) ) { remainingPath = remainingPath . substring ( 1 ) ; } if ( remainingPath . length ( ) > 0 ) { endpoint . setParticipant ( remainingPath ) ; } } return endpoint ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class ValueBuilder < E extends Exchange > implements Expression < E > { private Expression < E > expression ; public ValueBuilder ( Expression < E > expression ) { this . expression = expression ; } public Object evaluate ( E exchange ) { return expression . evaluate ( exchange ) ; } public Expression < E > getExpression ( ) { return expression ; } @ Override public String toString ( ) { return expression . toString ( ) ; } public Predicate < E > isNotEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isNotEqualTo ( expression , right ) ) ; } public Predicate < E > isEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isEqualTo ( expression , right ) ) ; } public Predicate < E > isLessThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThan ( expression , right ) ) ; } public Predicate < E > isLessThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isGreaterThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThan ( expression , right ) ) ; } public Predicate < E > isGreaterThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isInstanceOf ( Class type ) { return onNewPredicate ( PredicateBuilder . isInstanceOf ( expression , type ) ) ; } public Predicate < E > matchesRegex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public Predicate < E > isNull ( ) { return onNewPredicate ( PredicateBuilder . isNull ( expression ) ) ; } public Predicate < E > isNotNull ( ) { return onNewPredicate ( PredicateBuilder . isNotNull ( expression ) ) ; } public Predicate < E > contains ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . contains ( expression , right ) ) ; } public Predicate < E > regex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public ValueBuilder < E > tokenize ( ) { return tokenize ( "\n" ) ; } public ValueBuilder < E > tokenize ( String token ) { Expression < E > newExp = ExpressionBuilder . tokenizeExpression ( expression , token ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexTokenize ( String regex ) { Expression < E > newExp = ExpressionBuilder . regexTokenize ( expression , regex ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , String replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , Expression < E > replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertTo ( Class type ) { Expression < E > newExp = ExpressionBuilder . convertTo ( expression , type ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertToString ( ) { return convertTo ( String . class ) ; } public ValueBuilder < E > append ( Object value ) { return new ValueBuilder < E > ( ExpressionBuilder . append ( expression , asExpression ( value ) ) ) ; } protected Predicate < E > onNewPredicate ( Predicate < E > predicate ) { return predicate ; } protected Expression < E > asExpression ( Object value ) { if ( value instanceof Expression ) { return ( Expression < E > ) value ; } else { return ExpressionBuilder . constantExpression ( value ) ; } } } 	1
package org . apache . camel . component . bean ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Processor ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanComponent extends DefaultComponent { private static final transient Log LOG = LogFactory . getLog ( BeanComponent . class ) ; private ParameterMappingStrategy parameterMappingStrategy ; public BeanComponent ( ) { } public ProcessorEndpoint createEndpoint ( Object bean ) { String uri = "bean:generated:" + bean ; return createEndpoint ( bean , uri ) ; } public ProcessorEndpoint createEndpoint ( Object bean , String uri ) { BeanProcessor processor = new BeanProcessor ( bean , getCamelContext ( ) , getParameterMappingStrategy ( ) ) ; return createEndpoint ( uri , processor ) ; } public ParameterMappingStrategy getParameterMappingStrategy ( ) { if ( parameterMappingStrategy == null ) { parameterMappingStrategy = createParameterMappingStrategy ( ) ; } return parameterMappingStrategy ; } public void setParameterMappingStrategy ( ParameterMappingStrategy parameterMappingStrategy ) { this . parameterMappingStrategy = parameterMappingStrategy ; } protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { BeanEndpoint endpoint = new BeanEndpoint ( uri , this ) ; endpoint . setBeanName ( remaining ) ; endpoint . setCache ( ObjectConverter . toBool ( parameters . remove ( "cache" ) ) ) ; Processor processor = endpoint . getProcessor ( ) ; setProperties ( processor , parameters ) ; return endpoint ; } protected BeanEndpoint createEndpoint ( String uri , BeanProcessor processor ) { return new BeanEndpoint ( uri , this , processor ) ; } protected ParameterMappingStrategy createParameterMappingStrategy ( ) { return BeanInfo . createParameterMappingStrategy ( getCamelContext ( ) ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "catch" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CatchType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; public CatchType ( ) { } public CatchType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public CatchType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Catch[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "catch" ; } @ Override public String getLabel ( ) { return getExceptionClasses ( ) . toString ( ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeExchangeException ; import org . apache . camel . util . ServiceHelper ; public class ProcessorPollingConsumer extends PollingConsumerSupport { private Processor processor ; public ProcessorPollingConsumer ( Endpoint endpoint , Processor processor ) { super ( endpoint ) ; this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startService ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopService ( processor ) ; } public Exchange receive ( ) { Exchange exchange = getEndpoint ( ) . createExchange ( ) ; try { processor . process ( exchange ) ; } catch ( Exception e ) { throw new RuntimeExchangeException ( e , exchange ) ; } return exchange ; } public Exchange receiveNoWait ( ) { return receive ( ) ; } public Exchange receive ( long timeout ) { return receive ( ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . processor . MarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "marshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MarshalType extends OutputType < ProcessorType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "artixDS" , type = ArtixDSDataFormat . class ) , @ XmlElement ( required = false , name = "csv" , type = CsvDataFormat . class ) , @ XmlElement ( required = false , name = "jaxb" , type = JaxbDataFormat . class ) , @ XmlElement ( required = false , name = "serialization" , type = SerializationDataFormat . class ) , @ XmlElement ( required = false , name = "string" , type = StringDataFormat . class ) , @ XmlElement ( required = false , name = "xmlBeans" , type = XMLBeansDataFormat . class ) } ) private DataFormatType dataFormatType ; public MarshalType ( ) { } public MarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public MarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } @ Override public String getShortName ( ) { return "marshal" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormat dataFormat = DataFormatType . getDataFormat ( routeContext , getDataFormatType ( ) , ref ) ; return new MarshalProcessor ( dataFormat ) ; } } 	1
package org . apache . camel . builder ; import org . apache . camel . Processor ; public class ConstantProcessorBuilder implements ProcessorFactory { private Processor processor ; public ConstantProcessorBuilder ( Processor processor ) { this . processor = processor ; } public Processor createProcessor ( ) { return processor ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . RejectedExecutionHandler ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ServiceHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class MulticastProcessor extends ServiceSupport implements Processor { static class ProcessorExchangePair { private final Processor processor ; private final Exchange exchange ; public ProcessorExchangePair ( Processor processor , Exchange exchange ) { this . processor = processor ; this . exchange = exchange ; } public Processor getProcessor ( ) { return processor ; } public Exchange getExchange ( ) { return exchange ; } } private Collection < Processor > processors ; private AggregationStrategy aggregationStrategy ; private boolean isParallelProcessing ; private ThreadPoolExecutor executor ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; public MulticastProcessor ( Collection < Processor > processors ) { this ( processors , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy ) { this ( processors , aggregationStrategy , false , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor executor ) { notNull ( processors , "processors" ) ; this . processors = processors ; this . aggregationStrategy = aggregationStrategy ; this . isParallelProcessing = parallelProcessing ; if ( isParallelProcessing ) { if ( executor != null ) { this . executor = executor ; } else { this . executor = new ThreadPoolExecutor ( processors . size ( ) , processors . size ( ) , 0 , TimeUnit . MILLISECONDS , new ArrayBlockingQueue < Runnable > ( processors . size ( ) ) ) ; } } } public static < E extends Exchange > Collection < Processor > toProducers ( Collection < Endpoint > endpoints ) throws Exception { Collection < Processor > answer = new ArrayList < Processor > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint . createProducer ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Multicast" + getProcessors ( ) ; } class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; private final Processor processor ; public ProcessCall ( Exchange exchange , Processor processor , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; this . processor = processor ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; callback . done ( false ) ; } else { try { processor . process ( exchange ) ; } catch ( Exception ex ) { exchange . setException ( ex ) ; } callback . done ( false ) ; } } } public void process ( Exchange exchange ) throws Exception { Exchange result = null ; List < ProcessorExchangePair > pairs = createProcessorExchangePairs ( exchange ) ; if ( isParallelProcessing ) { Exchange [ ] exchanges = new Exchange [ pairs . size ( ) ] ; final CountDownLatch completedExchanges = new CountDownLatch ( pairs . size ( ) ) ; int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; exchanges [ i ] = pair . getExchange ( ) ; updateNewExchange ( exchanges [ i ] , i , pairs ) ; ProcessCall call = new ProcessCall ( exchanges [ i ] , producer , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { completedExchanges . countDown ( ) ; } } ) ; executor . execute ( call ) ; i ++ ; } completedExchanges . await ( ) ; if ( aggregationStrategy != null ) { for ( Exchange resultExchange : exchanges ) { if ( result == null ) { result = resultExchange ; } else { result = aggregationStrategy . aggregate ( result , resultExchange ) ; } } } } else { int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; Exchange subExchange = pair . getExchange ( ) ; updateNewExchange ( subExchange , i , pairs ) ; producer . process ( subExchange ) ; if ( aggregationStrategy != null ) { if ( result == null ) { result = subExchange ; } else { result = aggregationStrategy . aggregate ( result , subExchange ) ; } } i ++ ; } } if ( result != null ) { ExchangeHelper . copyResults ( exchange , result ) ; } } protected void updateNewExchange ( Exchange exchange , int i , List < ProcessorExchangePair > allPairs ) { } protected List < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { List < ProcessorExchangePair > result = new ArrayList < ProcessorExchangePair > ( processors . size ( ) ) ; Processor [ ] processorsArray = processors . toArray ( new Processor [ processors . size ( ) ] ) ; for ( int i = 0 ; i < processorsArray . length ; i ++ ) { result . add ( new ProcessorExchangePair ( processorsArray [ i ] , exchange . copy ( ) ) ) ; } return result ; } protected void doStop ( ) throws Exception { shutdown . set ( true ) ; if ( executor != null ) { executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } ServiceHelper . stopServices ( processors ) ; } protected void doStart ( ) throws Exception { shutdown . set ( false ) ; if ( executor != null ) { executor . setRejectedExecutionHandler ( new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor executor ) { ProcessCall call = ( ProcessCall ) runnable ; call . exchange . setException ( new RejectedExecutionException ( ) ) ; call . callback . done ( false ) ; } } ) ; } ServiceHelper . startServices ( processors ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } } 	1
package org . apache . camel . component . atom ; import java . util . Date ; import org . apache . abdera . model . Entry ; import org . apache . abdera . model . Feed ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultPollingEndpoint ; import org . apache . camel . util . ObjectHelper ; public class AtomEndpoint extends DefaultPollingEndpoint < Exchange > { public static final String HEADER_ATOM_FEED = "org.apache.camel.component.atom.feed" ; private String atomUri ; private boolean splitEntries = true ; private Date lastUpdate ; private boolean filter = true ; public AtomEndpoint ( String endpointUri , AtomComponent component , String atomUri ) { super ( endpointUri , component ) ; this . atomUri = atomUri ; ObjectHelper . notNull ( atomUri , "atomUri property" ) ; } public AtomEndpoint ( String endpointUri , String atomUri ) { this ( endpointUri ) ; this . atomUri = atomUri ; ObjectHelper . notNull ( atomUri , "atomUri property" ) ; } public AtomEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public boolean isSingleton ( ) { return true ; } public Producer < Exchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "AtomProducer is not implemented" ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { AtomConsumerSupport answer ; if ( isSplitEntries ( ) ) { answer = new AtomEntryPollingConsumer ( this , processor , filter , lastUpdate ) ; } else { answer = new AtomPollingConsumer ( this , processor ) ; } answer . setDelay ( AtomConsumerSupport . DEFAULT_CONSUMER_DELAY ) ; configureConsumer ( answer ) ; return answer ; } public Exchange createExchange ( Feed feed ) { Exchange exchange = createExchange ( ) ; exchange . getIn ( ) . setBody ( feed . getEntries ( ) ) ; exchange . getIn ( ) . setHeader ( HEADER_ATOM_FEED , feed ) ; return exchange ; } public Exchange createExchange ( Feed feed , Entry entry ) { Exchange exchange = createExchange ( ) ; exchange . getIn ( ) . setBody ( entry ) ; exchange . getIn ( ) . setHeader ( HEADER_ATOM_FEED , feed ) ; return exchange ; } public String getAtomUri ( ) { return atomUri ; } public void setAtomUri ( String atomUri ) { this . atomUri = atomUri ; } public boolean isSplitEntries ( ) { return splitEntries ; } public void setSplitEntries ( boolean splitEntries ) { this . splitEntries = splitEntries ; } public Date getLastUpdate ( ) { return lastUpdate ; } public void setLastUpdate ( Date lastUpdate ) { this . lastUpdate = lastUpdate ; } public boolean isFilter ( ) { return filter ; } public void setFilter ( boolean filter ) { this . filter = filter ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import javax . naming . Context ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . management . InstrumentationLifecycleStrategy ; import org . apache . camel . management . JmxSystemPropertyKeys ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . interceptor . Tracer ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ReflectionInjector ; import org . apache . camel . util . SystemHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; public class DefaultCamelContext extends ServiceSupport implements CamelContext , Service { private static final transient Log LOG = LogFactory . getLog ( DefaultCamelContext . class ) ; private static final String NAME_PREFIX = "camel-" ; private static int nameSuffix ; private String name ; private final Map < String , Endpoint > endpoints = new HashMap < String , Endpoint > ( ) ; private final Map < String , Component > components = new HashMap < String , Component > ( ) ; private List < Route > routes ; private List < Service > servicesToClose = new ArrayList < Service > ( ) ; private TypeConverter typeConverter ; private ExchangeConverter exchangeConverter ; private Injector injector ; private ComponentResolver componentResolver ; private boolean autoCreateComponents = true ; private LanguageResolver languageResolver = new DefaultLanguageResolver ( ) ; private Registry registry ; private LifecycleStrategy lifecycleStrategy ; private List < RouteType > routeDefinitions = new ArrayList < RouteType > ( ) ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private Boolean trace ; private ErrorHandlerBuilder errorHandlerBuilder ; public DefaultCamelContext ( ) { name = NAME_PREFIX + ++ nameSuffix ; if ( Boolean . getBoolean ( JmxSystemPropertyKeys . DISABLED ) ) { LOG . info ( "JMX is disabled. Using DefaultLifecycleStrategy." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } else { try { LOG . info ( "JMX enabled. Using InstrumentationLifecycleStrategy." ) ; lifecycleStrategy = new InstrumentationLifecycleStrategy ( ) ; } catch ( NoClassDefFoundError e ) { LOG . warn ( "Could not find needed classes for JMX lifecycle strategy." + " Are you missing spring-context.jar by any chance? NoClassDefFoundError: " + e . getMessage ( ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not create JMX lifecycle strategy, caused by: " + e . getMessage ( ) ) ; } if ( lifecycleStrategy == null ) { LOG . warn ( "Not possible to use JMX lifecycle strategy. Using DefaultLifecycleStrategy instead." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } } } public DefaultCamelContext ( Context jndiContext ) { this ( new JndiRegistry ( jndiContext ) ) ; } public DefaultCamelContext ( Registry registry ) { this ( ) ; this . registry = registry ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public void addComponent ( String componentName , final Component component ) { if ( component == null ) { throw new IllegalArgumentException ( "Component cannot be null" ) ; } synchronized ( components ) { if ( components . containsKey ( componentName ) ) { throw new IllegalArgumentException ( "Component previously added: " + componentName ) ; } component . setCamelContext ( this ) ; components . put ( componentName , component ) ; } } public Component getComponent ( String name ) { synchronized ( components ) { Component component = components . get ( name ) ; if ( component == null && autoCreateComponents ) { try { component = getComponentResolver ( ) . resolveComponent ( name , this ) ; if ( component != null ) { addComponent ( name , component ) ; if ( isStarted ( ) ) { startServices ( component ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( "Could not auto create component: " + name , e ) ; } } return component ; } } public < T extends Component > T getComponent ( String name , Class < T > componentType ) { Component component = getComponent ( name ) ; if ( componentType . isInstance ( component ) ) { return componentType . cast ( component ) ; } else { throw new IllegalArgumentException ( "The component is not of type: " + componentType + " but is: " + component ) ; } } public Component removeComponent ( String componentName ) { synchronized ( components ) { return components . remove ( componentName ) ; } } public Component getOrCreateComponent ( String componentName , Callable < Component > factory ) { synchronized ( components ) { Component component = components . get ( componentName ) ; if ( component == null ) { try { component = factory . call ( ) ; if ( component == null ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component, it returned null." ) ; } components . put ( componentName , component ) ; component . setCamelContext ( this ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component" , e ) ; } } return component ; } } public Collection < Endpoint > getSingletonEndpoints ( ) { synchronized ( endpoints ) { return new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } } public Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { startServices ( endpoint ) ; oldEndpoint = endpoints . remove ( uri ) ; endpoints . put ( uri , endpoint ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint removeSingletonEndpoint ( String uri ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { oldEndpoint = endpoints . remove ( uri ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint getEndpoint ( String uri ) { Endpoint answer ; synchronized ( endpoints ) { answer = endpoints . get ( uri ) ; if ( answer == null ) { try { String splitURI [ ] = ObjectHelper . splitOnCharacter ( uri , ":" , 2 ) ; if ( splitURI [ 1 ] != null ) { String scheme = splitURI [ 0 ] ; Component component = getComponent ( scheme ) ; if ( component != null ) { answer = component . createEndpoint ( uri ) ; if ( answer != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( uri + " converted to endpoint: " + answer + " by component: " + component ) ; } } } if ( answer == null ) { answer = createEndpoint ( uri ) ; } if ( answer != null ) { addService ( answer ) ; if ( answer . isSingleton ( ) ) { endpoints . put ( uri , answer ) ; lifecycleStrategy . onEndpointAdd ( answer ) ; } } } catch ( Exception e ) { LOG . debug ( "Failed to resolve endpoint " + uri + ". Reason: " + e , e ) ; throw new ResolveEndpointFailedException ( uri , e ) ; } } } return answer ; } public < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) { Endpoint endpoint = getEndpoint ( name ) ; if ( endpointType . isInstance ( endpoint ) ) { return endpointType . cast ( endpoint ) ; } else { throw new IllegalArgumentException ( "The endpoint is not of type: " + endpointType + " but is: " + endpoint ) ; } } public List < Route > getRoutes ( ) { if ( routes == null ) { routes = new ArrayList < Route > ( ) ; } return routes ; } public void setRoutes ( List < Route > routes ) { this . routes = routes ; } public void addRoutes ( Collection < Route > routes ) throws Exception { if ( this . routes == null ) { this . routes = new ArrayList < Route > ( routes ) ; } else { this . routes . addAll ( routes ) ; } lifecycleStrategy . onRoutesAdd ( routes ) ; if ( shouldStartRoutes ( ) ) { startRoutes ( routes ) ; } } public void addRoutes ( Routes builder ) throws Exception { builder . setContext ( this ) ; List < Route > routeList = builder . getRouteList ( ) ; LOG . debug ( "Adding routes from: " + builder + " routes: " + routeList ) ; addRoutes ( routeList ) ; } public void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception { this . routeDefinitions . addAll ( routeDefinitions ) ; if ( shouldStartRoutes ( ) ) { startRouteDefinitions ( routeDefinitions ) ; } } public void addService ( Object object ) throws Exception { if ( object instanceof Service ) { Service service = ( Service ) object ; service . start ( ) ; servicesToClose . add ( service ) ; } } public Language resolveLanguage ( String language ) { return getLanguageResolver ( ) . resolveLanguage ( language , this ) ; } public ExchangeConverter getExchangeConverter ( ) { if ( exchangeConverter == null ) { exchangeConverter = createExchangeConverter ( ) ; } return exchangeConverter ; } public void setExchangeConverter ( ExchangeConverter exchangeConverter ) { this . exchangeConverter = exchangeConverter ; } public TypeConverter getTypeConverter ( ) { if ( typeConverter == null ) { typeConverter = createTypeConverter ( ) ; } return typeConverter ; } public void setTypeConverter ( TypeConverter typeConverter ) { this . typeConverter = typeConverter ; } public Injector getInjector ( ) { if ( injector == null ) { injector = createInjector ( ) ; } return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } public ComponentResolver getComponentResolver ( ) { if ( componentResolver == null ) { componentResolver = createComponentResolver ( ) ; } return componentResolver ; } public void setComponentResolver ( ComponentResolver componentResolver ) { this . componentResolver = componentResolver ; } public LanguageResolver getLanguageResolver ( ) { return languageResolver ; } public void setLanguageResolver ( LanguageResolver languageResolver ) { this . languageResolver = languageResolver ; } public boolean isAutoCreateComponents ( ) { return autoCreateComponents ; } public void setAutoCreateComponents ( boolean autoCreateComponents ) { this . autoCreateComponents = autoCreateComponents ; } public Registry getRegistry ( ) { if ( registry == null ) { registry = createRegistry ( ) ; } return registry ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public LifecycleStrategy getLifecycleStrategy ( ) { return lifecycleStrategy ; } public void setLifecycleStrategy ( LifecycleStrategy lifecycleStrategy ) { this . lifecycleStrategy = lifecycleStrategy ; } public List < RouteType > getRouteDefinitions ( ) { return routeDefinitions ; } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public boolean getTrace ( ) { final Boolean value = getTracing ( ) ; if ( value != null ) { return value ; } else { return SystemHelper . isSystemProperty ( "canel.trace" ) ; } } public Boolean getTracing ( ) { return trace ; } public void setTrace ( Boolean trace ) { this . trace = trace ; } public < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) { return new DefaultProducerTemplate < E > ( this ) ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void doStart ( ) throws Exception { if ( getTrace ( ) ) { boolean found = false ; final List < InterceptStrategy > list = getInterceptStrategies ( ) ; for ( InterceptStrategy strategy : list ) { if ( strategy instanceof Tracer ) { found = true ; } } if ( ! found ) { addInterceptStrategy ( new Tracer ( ) ) ; } } lifecycleStrategy . onContextStart ( this ) ; forceLazyInitialization ( ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { startServices ( component ) ; } } startRouteDefinitions ( routeDefinitions ) ; startRoutes ( routes ) ; } protected void startRouteDefinitions ( Collection < RouteType > list ) throws Exception { if ( list != null ) { Collection < Route > routes = new ArrayList < Route > ( ) ; for ( RouteType route : list ) { route . addRoutes ( this , routes ) ; } addRoutes ( routes ) ; } } protected void doStop ( ) throws Exception { stopServices ( servicesToClose ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { stopServices ( component ) ; } } } protected void startRoutes ( Collection < Route > routeList ) throws Exception { if ( routeList != null ) { for ( Route < Exchange > route : routeList ) { List < Service > services = route . getServicesForRoute ( ) ; for ( Service service : services ) { addService ( service ) ; } } } } protected void forceLazyInitialization ( ) { getExchangeConverter ( ) ; getInjector ( ) ; getLanguageResolver ( ) ; getTypeConverter ( ) ; } protected ExchangeConverter createExchangeConverter ( ) { return new DefaultExchangeConverter ( ) ; } protected TypeConverter createTypeConverter ( ) { return new DefaultTypeConverter ( getInjector ( ) ) ; } protected Injector createInjector ( ) { FactoryFinder finder = new FactoryFinder ( ) ; try { return ( Injector ) finder . newInstance ( "Injector" ) ; } catch ( NoFactoryAvailableException e ) { return new ReflectionInjector ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } protected ComponentResolver createComponentResolver ( ) { return new DefaultComponentResolver ( ) ; } protected Registry createRegistry ( ) { return new JndiRegistry ( ) ; } protected Endpoint createEndpoint ( String uri ) { Object value = getRegistry ( ) . lookup ( uri ) ; if ( value instanceof Endpoint ) { return ( Endpoint ) value ; } else if ( value instanceof Processor ) { return new ProcessorEndpoint ( uri , this , ( Processor ) value ) ; } else if ( value != null ) { return convertBeanToEndpoint ( uri , value ) ; } return null ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { throw new IllegalArgumentException ( "uri: " + uri + " bean: " + bean + " could not be converted to an Endpoint" ) ; } protected boolean shouldStartRoutes ( ) { return isStarted ( ) && ! isStarting ( ) ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . ResourceBundle ; import java . util . logging . Level ; import java . util . logging . Logger ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . apache . cxf . binding . xml . XMLConstants ; import org . apache . cxf . binding . xml . XMLFault ; import org . apache . cxf . bindings . xformat . XMLBindingMessageFormat ; import org . apache . cxf . common . i18n . BundleUtils ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . XMLMessage ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . service . model . BindingInfo ; import org . apache . cxf . service . model . BindingMessageInfo ; import org . apache . cxf . service . model . BindingOperationInfo ; import org . apache . cxf . service . model . MessagePartInfo ; import org . apache . cxf . staxutils . StaxUtils ; public class XMLMessageInInterceptor extends AbstractMessageInInterceptor < XMLMessage > { private static final Logger LOG = LogUtils . getL7dLogger ( XMLMessageInInterceptor . class ) ; public XMLMessageInInterceptor ( ) { super ( Phase . READ ) ; } protected Logger getLogger ( ) { return LOG ; } protected boolean isFaultMessage ( XMLMessage message ) { XMLStreamReader xsr = message . getContent ( XMLStreamReader . class ) ; boolean isFault = false ; try { if ( StaxUtils . skipToStartOfElement ( xsr ) ) { QName startQName = xsr . getName ( ) ; isFault = XMLConstants . NS_XML_FORMAT . equals ( startQName . getNamespaceURI ( ) ) && XMLFault . XML_FAULT_ROOT . equals ( startQName . getLocalPart ( ) ) ; } } catch ( XMLStreamException xse ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "STAX_READ_EXC" , LOG ) ) ; } return isFault ; } protected BindingOperationInfo getBindingOperation ( XMLMessage message , Document doc ) { Exchange ex = message . getExchange ( ) ; BindingInfo binding = ex . get ( BindingInfo . class ) ; if ( binding == null ) { Endpoint ep = ex . get ( Endpoint . class ) ; binding = ep . getEndpointInfo ( ) . getBinding ( ) ; } Element payloadEl = ( Element ) doc . getChildNodes ( ) . item ( 0 ) ; QName startQName = new QName ( payloadEl . getNamespaceURI ( ) , payloadEl . getLocalName ( ) ) ; boolean client = isRequestor ( message ) ; List < BindingOperationInfo > boiList = new ArrayList < BindingOperationInfo > ( ) ; for ( BindingOperationInfo boi : binding . getOperations ( ) ) { BindingMessageInfo bmi = client ? boi . getOutput ( ) : boi . getInput ( ) ; QName rootName = null ; if ( bmi != null ) { XMLBindingMessageFormat msgFormat = bmi . getExtensor ( XMLBindingMessageFormat . class ) ; if ( msgFormat != null ) { rootName = msgFormat . getRootNode ( ) ; } else { Collection < MessagePartInfo > bodyParts = bmi . getMessageParts ( ) ; if ( bodyParts . size ( ) == 1 ) { MessagePartInfo p = bodyParts . iterator ( ) . next ( ) ; rootName = p . getConcreteName ( ) ; } } } if ( startQName . equals ( rootName ) ) { boiList . add ( boi ) ; } } BindingOperationInfo match = null ; if ( boiList . size ( ) > 1 ) { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "Mulitple matching BindingOperationIno found in Binding." ) ; } } else if ( ! boiList . isEmpty ( ) ) { match = boiList . get ( 0 ) ; } return match ; } protected List < Element > getPartList ( XMLMessage inMessage , Element rootNode , BindingMessageInfo bmi ) { List < Element > partList = new ArrayList < Element > ( ) ; XMLBindingMessageFormat msgFormat = bmi . getExtensor ( XMLBindingMessageFormat . class ) ; if ( msgFormat != null ) { NodeList nodeList = rootNode . getChildNodes ( ) ; for ( int idx = 0 ; idx < nodeList . getLength ( ) ; idx ++ ) { partList . add ( ( Element ) nodeList . item ( idx ) ) ; } } else { partList . add ( rootNode ) ; } return partList ; } protected Element getHeader ( XMLMessage inMessage ) { return null ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class Builder { private Builder ( ) { } public static < E extends Exchange > ValueBuilder < E > constant ( Object value ) { Expression < E > expression = ExpressionBuilder . constantExpression ( value ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > header ( String name ) { Expression < E > expression = ExpressionBuilder . headerExpression ( name ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > body ( ) { Expression < E > expression = ExpressionBuilder . bodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > bodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > bodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > outBody ( ) { Expression < E > expression = ExpressionBuilder . outBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > outBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > outBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > faultBody ( ) { Expression < E > expression = ExpressionBuilder . faultBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > faultBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . < E , T > faultBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name , final String defaultValue ) { return new ValueBuilder < E > ( ExpressionBuilder . < E > systemProperty ( name , defaultValue ) ) ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "python" ) public class PythonExpression extends ExpressionType { public PythonExpression ( ) { } public PythonExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "python" ; } } 	0
package org . apache . camel . component . log ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . ThroughputLogger ; public class LogComponent extends DefaultComponent < Exchange > { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { LoggingLevel level = getLoggingLevel ( parameters ) ; Integer groupSize = getAndRemoveParameter ( parameters , "groupSize" , Integer . class ) ; Logger logger ; if ( groupSize != null ) { logger = new ThroughputLogger ( remaining , level , ObjectConverter . toInteger ( groupSize ) ) ; } else { LogFormatter formatter = new LogFormatter ( ) ; IntrospectionSupport . setProperties ( formatter , parameters ) ; logger = new Logger ( remaining ) ; logger . setLevel ( level ) ; logger . setFormatter ( formatter ) ; } return new ProcessorEndpoint ( uri , this , logger ) ; } protected LoggingLevel getLoggingLevel ( Map parameters ) { String levelText = getAndRemoveParameter ( parameters , "level" , String . class , "INFO" ) ; return LoggingLevel . valueOf ( levelText . toUpperCase ( ) ) ; } } 	1
package org . apache . camel . component . atom ; import java . text . DateFormat ; import java . text . ParseException ; import java . text . SimpleDateFormat ; import java . util . Date ; import org . apache . camel . Converter ; @ Converter public final class AtomConverter { public static final String DATE_PATTERN_NO_TIMEZONE = "yyyy-MM-dd'T'HH:mm:ss" ; private AtomConverter ( ) { } @ Converter public static Date toDate ( String text ) throws ParseException { DateFormat sdf = new SimpleDateFormat ( DATE_PATTERN_NO_TIMEZONE ) ; return sdf . parse ( text ) ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . Externalizable ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . Reader ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import javax . xml . transform . stream . StreamSource ; public class StringSource extends StreamSource implements Externalizable { private String text ; private String encoding = "UTF-8" ; public StringSource ( ) { } public StringSource ( String text ) { if ( text == null ) { throw new NullPointerException ( "text can not be null" ) ; } this . text = text ; } public StringSource ( String text , String systemId ) { this ( text ) ; setSystemId ( systemId ) ; } public StringSource ( String text , String systemId , String encoding ) { this . text = text ; this . encoding = encoding ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { try { return new ByteArrayInputStream ( text . getBytes ( encoding ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } public Reader getReader ( ) { return new StringReader ( text ) ; } public String toString ( ) { return "StringSource[" + text + "]" ; } public String getText ( ) { return text ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public void setText ( String text ) { this . text = text ; } public void writeExternal ( ObjectOutput out ) throws IOException { out . writeUTF ( text ) ; out . writeUTF ( encoding ) ; out . writeUTF ( getPublicId ( ) ) ; out . writeUTF ( getSystemId ( ) ) ; } public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { text = in . readUTF ( ) ; encoding = in . readUTF ( ) ; setPublicId ( in . readUTF ( ) ) ; setSystemId ( in . readUTF ( ) ) ; } } 	1
package org . apache . camel ; public interface Consumer < E extends Exchange > extends Service { } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ConvertBodyProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( ConvertBodyProcessor . class ) ; private final Class type ; public ConvertBodyProcessor ( Class type ) { this . type = type ; } public void process ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object value = in . getBody ( type ) ; if ( value == null ) { LOG . warn ( "Could not convert body of IN message: " + in + " to type: " + type . getName ( ) ) ; } if ( exchange . getPattern ( ) . isOutCapable ( ) ) { Message out = exchange . getOut ( ) ; out . copyFrom ( in ) ; out . setBody ( value ) ; } else { in . setBody ( value ) ; } } } 	1
package org . apache . camel . component . jms ; import javax . jms . Message ; import org . apache . camel . impl . PollingConsumerSupport ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . JmsTemplate ; import org . springframework . jms . core . JmsTemplate102 ; public class JmsPollingConsumer extends PollingConsumerSupport < JmsExchange > { private JmsOperations template ; public JmsPollingConsumer ( JmsEndpoint endpoint , JmsOperations template ) { super ( endpoint ) ; this . template = template ; } @ Override public JmsEndpoint getEndpoint ( ) { return ( JmsEndpoint ) super . getEndpoint ( ) ; } public JmsExchange receiveNoWait ( ) { return receive ( 0 ) ; } public JmsExchange receive ( ) { return receive ( - 1 ) ; } public JmsExchange receive ( long timeout ) { setReceiveTimeout ( timeout ) ; Message message = template . receive ( ) ; if ( message != null ) { return getEndpoint ( ) . createExchange ( message ) ; } return null ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } protected void setReceiveTimeout ( long timeout ) { if ( template instanceof JmsTemplate ) { JmsTemplate jmsTemplate = ( JmsTemplate ) template ; jmsTemplate . setReceiveTimeout ( timeout ) ; } else if ( template instanceof JmsTemplate102 ) { JmsTemplate102 jmsTemplate102 = ( JmsTemplate102 ) template ; jmsTemplate102 . setReceiveTimeout ( timeout ) ; } else { throw new IllegalArgumentException ( "Cannot set the receiveTimeout property on unknown JmsOperations type: " + template ) ; } } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . spi . Synchronization ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultUnitOfWork implements UnitOfWork { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; private String id ; private List < Synchronization > synchronizations ; private List < AsyncCallback > asyncCallbacks ; private CountDownLatch latch ; public DefaultUnitOfWork ( ) { } public synchronized void addSynchronization ( Synchronization synchronization ) { if ( synchronizations == null ) { synchronizations = new ArrayList < Synchronization > ( ) ; } synchronizations . add ( synchronization ) ; } public synchronized void removeSynchronization ( Synchronization synchronization ) { if ( synchronizations != null ) { synchronizations . remove ( synchronization ) ; } } public void reset ( ) { } public void done ( Exchange exchange ) { if ( synchronizations != null ) { boolean failed = exchange . isFailed ( ) ; for ( Synchronization synchronization : synchronizations ) { if ( failed ) { synchronization . onFailure ( exchange ) ; } else { synchronization . onComplete ( exchange ) ; } } } } public boolean isSynchronous ( ) { return asyncCallbacks == null || asyncCallbacks . isEmpty ( ) ; } public String getId ( ) { if ( id == null ) { id = DEFAULT_ID_GENERATOR . generateId ( ) ; } return id ; } } 	1
package org . apache . camel . builder . xml ; import javax . xml . xpath . XPathException ; import org . apache . camel . RuntimeExpressionException ; public class InvalidXPathExpression extends RuntimeExpressionException { private final String xpath ; public InvalidXPathExpression ( String xpath , XPathException e ) { super ( "Invalid xpath: " + xpath + ". Reason: " + e , e ) ; this . xpath = xpath ; } public String getXpath ( ) { return xpath ; } } 	0
package org . apache . camel . model ; public class NodeFactory { public FilterType createFilter ( ) { return new FilterType ( ) ; } public RouteType createRoute ( ) { return new RouteType ( ) ; } } 	1
package org . apache . camel . processor ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . exceptionpolicy . DefaultExceptionPolicyStrategy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; public abstract class ErrorHandlerSupport extends ServiceSupport implements ErrorHandler { private Map < Class , ExceptionType > exceptionPolicies = new LinkedHashMap < Class , ExceptionType > ( ) ; private ExceptionPolicyStrategy exceptionPolicy = createDefaultExceptionPolicyStrategy ( ) ; public void addExceptionPolicy ( ExceptionType exception ) { Processor processor = exception . getErrorHandler ( ) ; addChildService ( processor ) ; List < Class > list = exception . getExceptionClasses ( ) ; for ( Class exceptionType : list ) { exceptionPolicies . put ( exceptionType , exception ) ; } } protected boolean customProcessorForException ( Exchange exchange , Throwable exception ) throws Exception { ExceptionType policy = getExceptionPolicy ( exchange , exception ) ; if ( policy != null ) { Processor processor = policy . getErrorHandler ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return true ; } } return false ; } protected ExceptionType getExceptionPolicy ( Exchange exchange , Throwable exception ) { if ( exceptionPolicy == null ) { throw new IllegalStateException ( "The exception policy has not been set" ) ; } return exceptionPolicy . getExceptionPolicy ( exceptionPolicies , exchange , exception ) ; } public void setExceptionPolicy ( ExceptionPolicyStrategy exceptionPolicy ) { this . exceptionPolicy = exceptionPolicy ; } public static ExceptionPolicyStrategy createDefaultExceptionPolicyStrategy ( ) { return new DefaultExceptionPolicyStrategy ( ) ; } } 	0
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class BeanExchange extends DefaultExchange { public BeanExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public BeanExchange ( DefaultExchange parent ) { super ( parent ) ; } public BeanInvocation getInvocation ( ) { return getIn ( ) . getBody ( BeanInvocation . class ) ; } public void setInvocation ( BeanInvocation invocation ) { getIn ( ) . setBody ( invocation ) ; } @ Override public Exchange newInstance ( ) { return new BeanExchange ( this ) ; } } 	1
package org . apache . camel . component . xmpp ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import org . apache . camel . impl . DefaultMessage ; import org . jivesoftware . smack . packet . Message ; public class XmppMessage extends DefaultMessage { private Message xmppMessage ; public XmppMessage ( ) { this ( new Message ( ) ) ; } public XmppMessage ( Message jmsMessage ) { this . xmppMessage = jmsMessage ; } @ Override public String toString ( ) { if ( xmppMessage != null ) { return "XmppMessage: " + xmppMessage ; } else { return "XmppMessage: " + getBody ( ) ; } } @ Override public XmppExchange getExchange ( ) { return ( XmppExchange ) super . getExchange ( ) ; } public Message getXmppMessage ( ) { return xmppMessage ; } public void setXmppMessage ( Message xmppMessage ) { this . xmppMessage = xmppMessage ; } public Object getHeader ( String name ) { return xmppMessage . getProperty ( name ) ; } @ Override public void setHeader ( String name , Object value ) { if ( value == null ) { xmppMessage . deleteProperty ( name ) ; } else { xmppMessage . setProperty ( name , value ) ; } } @ Override public Map < String , Object > getHeaders ( ) { Map < String , Object > answer = new HashMap < String , Object > ( ) ; Iterator iter = xmppMessage . getPropertyNames ( ) ; while ( iter . hasNext ( ) ) { String name = ( String ) iter . next ( ) ; answer . put ( name , xmppMessage . getProperty ( name ) ) ; } return answer ; } @ Override public XmppMessage newInstance ( ) { return new XmppMessage ( ) ; } @ Override protected Object createBody ( ) { if ( xmppMessage != null ) { return getExchange ( ) . getBinding ( ) . extractBodyFromXmpp ( getExchange ( ) , xmppMessage ) ; } return null ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . processor . ErrorHandlerSupport ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannelBuilder extends ErrorHandlerBuilderSupport { private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; private ExceptionPolicyStrategy exceptionPolicyStrategy = ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ; private ProcessorFactory deadLetterFactory ; private Processor defaultDeadLetterEndpoint ; private Expression defaultDeadLetterEndpointExpression ; private String defaultDeadLetterEndpointUri = "log:org.apache.camel.DeadLetterChannel?level=error" ; private Logger logger = DeadLetterChannel . createDefaultLogger ( ) ; public DeadLetterChannelBuilder ( ) { } public DeadLetterChannelBuilder ( Processor processor ) { this ( new ConstantProcessorBuilder ( processor ) ) ; } public DeadLetterChannelBuilder ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public ErrorHandlerBuilder copy ( ) { DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( deadLetterFactory ) ; answer . setRedeliveryPolicy ( getRedeliveryPolicy ( ) . copy ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { Processor deadLetter = getDeadLetterFactory ( ) . createProcessor ( ) ; DeadLetterChannel answer = new DeadLetterChannel ( processor , deadLetter , getRedeliveryPolicy ( ) , getLogger ( ) , getExceptionPolicyStrategy ( ) ) ; configure ( answer ) ; return answer ; } public DeadLetterChannelBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public DeadLetterChannelBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public DeadLetterChannelBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { getRedeliveryPolicy ( ) . maximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public DeadLetterChannelBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public DeadLetterChannelBuilder logger ( Logger logger ) { setLogger ( logger ) ; return this ; } public DeadLetterChannelBuilder loggingLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; return this ; } public DeadLetterChannelBuilder log ( Log log ) { getLogger ( ) . setLog ( log ) ; return this ; } public DeadLetterChannelBuilder log ( String log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder log ( Class log ) { return log ( LogFactory . getLog ( log ) ) ; } public ErrorHandlerBuilderSupport exceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { setExceptionPolicyStrategy ( exceptionPolicyStrategy ) ; return this ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ProcessorFactory getDeadLetterFactory ( ) { if ( deadLetterFactory == null ) { deadLetterFactory = new ProcessorFactory ( ) { public Processor createProcessor ( ) { return getDefaultDeadLetterEndpoint ( ) ; } } ; } return deadLetterFactory ; } public void setDeadLetterFactory ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public Processor getDefaultDeadLetterEndpoint ( ) { if ( defaultDeadLetterEndpoint == null ) { defaultDeadLetterEndpoint = new RecipientList ( getDefaultDeadLetterEndpointExpression ( ) ) ; } return defaultDeadLetterEndpoint ; } public void setDefaultDeadLetterEndpoint ( Processor defaultDeadLetterEndpoint ) { this . defaultDeadLetterEndpoint = defaultDeadLetterEndpoint ; } public Expression getDefaultDeadLetterEndpointExpression ( ) { if ( defaultDeadLetterEndpointExpression == null ) { defaultDeadLetterEndpointExpression = ExpressionBuilder . constantExpression ( getDefaultDeadLetterEndpointUri ( ) ) ; } return defaultDeadLetterEndpointExpression ; } public void setDefaultDeadLetterEndpointExpression ( Expression defaultDeadLetterEndpointExpression ) { this . defaultDeadLetterEndpointExpression = defaultDeadLetterEndpointExpression ; } public String getDefaultDeadLetterEndpointUri ( ) { return defaultDeadLetterEndpointUri ; } public void setDefaultDeadLetterEndpointUri ( String defaultDeadLetterEndpointUri ) { this . defaultDeadLetterEndpointUri = defaultDeadLetterEndpointUri ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } public ExceptionPolicyStrategy getExceptionPolicyStrategy ( ) { return exceptionPolicyStrategy ; } public void setExceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . exceptionPolicyStrategy = exceptionPolicyStrategy ; } } 	1
package org . apache . camel . component . quartz ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class QuartzConsumer extends DefaultConsumer < QuartzExchange > { public QuartzConsumer ( QuartzEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; } @ Override public QuartzEndpoint getEndpoint ( ) { return ( QuartzEndpoint ) super . getEndpoint ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; getEndpoint ( ) . consumerStarted ( this ) ; } @ Override protected void doStop ( ) throws Exception { getEndpoint ( ) . consumerStopped ( this ) ; super . doStop ( ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RoutingSlip extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( RoutingSlip . class ) ; private final String header ; private final String uriDelimiter ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RoutingSlip ( String header ) { this ( header , RoutingSlipType . DEFAULT_DELIMITER ) ; } public RoutingSlip ( String header , String uriDelimiter ) { notNull ( header , "header" ) ; notNull ( uriDelimiter , "uriDelimiter" ) ; this . header = header ; this . uriDelimiter = uriDelimiter ; } @ Override public String toString ( ) { return "RoutingSlip[header=" + header + " uriDelimiter=" + uriDelimiter + "]" ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getIn ( ) ; String [ ] recipients = recipients ( message ) ; Exchange current = exchange ; for ( String nextRecipient : recipients ) { Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , nextRecipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; Exchange ex = endpoint . createExchange ( ExchangePattern . InOut ) ; updateRoutingSlip ( current ) ; copyOutToIn ( ex , current ) ; producer . process ( ex ) ; current = ex ; } ExchangeHelper . copyResults ( exchange , current ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } private void updateRoutingSlip ( Exchange current ) { Message message = getResultMessage ( current ) ; message . setHeader ( header , removeFirstElement ( recipients ( message ) ) ) ; } private Message getResultMessage ( Exchange exchange ) { Message message = exchange . getOut ( false ) ; if ( message == null ) { message = exchange . getIn ( ) ; } return message ; } private String [ ] recipients ( Message message ) { Object headerValue = message . getHeader ( header ) ; if ( headerValue != null && ! headerValue . equals ( "" ) ) { return headerValue . toString ( ) . split ( uriDelimiter ) ; } return new String [ ] { } ; } private String removeFirstElement ( String [ ] elements ) { CollectionStringBuffer updatedElements = new CollectionStringBuffer ( uriDelimiter ) ; for ( int i = 1 ; i < elements . length ; i ++ ) { updatedElements . append ( elements [ i ] ) ; } return updatedElements . toString ( ) ; } private void copyOutToIn ( Exchange result , Exchange source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } result . setIn ( getResultMessage ( source ) ) ; result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } 	1
package org . apache . camel . component . ibatis ; import java . util . Iterator ; import org . apache . camel . Exchange ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultProducer ; public class IBatisProducer extends DefaultProducer { private final IBatisEndpoint endpoint ; public IBatisProducer ( IBatisEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } @ Override public IBatisEndpoint getEndpoint ( ) { return ( IBatisEndpoint ) super . getEndpoint ( ) ; } public void process ( Exchange exchange ) throws Exception { Object body = exchange . getIn ( ) . getBody ( ) ; if ( body == null ) { endpoint . query ( exchange . getOut ( true ) ) ; } else { String operation = getOperationName ( exchange ) ; Iterator iter = ObjectConverter . iterator ( body ) ; while ( iter . hasNext ( ) ) { endpoint . getSqlClient ( ) . insert ( operation , iter . next ( ) ) ; } } } protected String getOperationName ( Exchange exchange ) { return endpoint . getEntityName ( ) ; } } 	0
package org . apache . camel . component . log ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . util . ObjectHelper ; public class LogFormatter implements ExchangeFormatter { private boolean showExchangeId ; private boolean showProperties ; private boolean showHeaders ; private boolean showBodyType = true ; private boolean showBody = true ; private boolean showOut ; private boolean showAll ; private boolean multiline ; public Object format ( Exchange exchange ) { Message in = exchange . getIn ( ) ; StringBuilder sb = new StringBuilder ( "" ) ; if ( showAll || showExchangeId ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Id:" ) . append ( exchange . getExchangeId ( ) ) ; } if ( showAll || showProperties ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Properties:" ) . append ( exchange . getProperties ( ) ) ; } if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Headers:" ) . append ( in . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", BodyType:" ) . append ( getBodyTypeAsString ( in ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Body:" ) . append ( getBodyAsString ( in ) ) ; } Message out = exchange . getOut ( false ) ; if ( showAll || showOut ) { if ( out != null ) { if ( showAll || showHeaders ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutHeaders:" ) . append ( out . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBodyType:" ) . append ( getBodyTypeAsString ( out ) ) ; } if ( showAll || showBody ) { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", OutBody:" ) . append ( getBodyAsString ( out ) ) ; } } else { if ( multiline ) sb . append ( '\n' ) ; sb . append ( ", Out: null" ) ; } } return "Exchange[" + ( multiline ? sb . append ( ']' ) . toString ( ) : sb . toString ( ) . substring ( 2 ) + "]" ) ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowOut ( ) { return showOut ; } public void setShowOut ( boolean showOut ) { this . showOut = showOut ; } public boolean isShowAll ( ) { return showAll ; } public void setShowAll ( boolean showAll ) { this . showAll = showAll ; } public boolean isMultiline ( ) { return multiline ; } public void setMultiline ( boolean multiline ) { this . multiline = multiline ; } protected Object getBodyAsString ( Message message ) { Object answer = message . getBody ( String . class ) ; if ( answer == null ) { answer = message . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } } 	1
package org . apache . camel ; public class InvalidPayloadException extends CamelExchangeException { private final Class < ? > type ; public InvalidPayloadException ( Exchange exchange , Class < ? > type ) { this ( exchange , type , exchange . getIn ( ) ) ; } public InvalidPayloadException ( Exchange exchange , Class < ? > type , Message message ) { super ( "No in body available of type: " + type . getName ( ) + NoSuchPropertyException . valueDescription ( message . getBody ( ) ) + " on: " + message , exchange ) ; this . type = type ; } public Class < ? > getType ( ) { return type ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . idempotent . IdempotentConsumer ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "idempotentConsumer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class IdempotentConsumerType extends ExpressionNode { @ XmlAttribute private String messageIdRepositoryRef ; @ XmlTransient private MessageIdRepository messageIdRepository ; public IdempotentConsumerType ( ) { } public IdempotentConsumerType ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { super ( messageIdExpression ) ; this . messageIdRepository = messageIdRepository ; } @ Override public String toString ( ) { return "IdempotentConsumer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "idempotentConsumer" ; } public String getMessageIdRepositoryRef ( ) { return messageIdRepositoryRef ; } public void setMessageIdRepositoryRef ( String messageIdRepositoryRef ) { this . messageIdRepositoryRef = messageIdRepositoryRef ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public void setMessageIdRepository ( MessageIdRepository messageIdRepository ) { this . messageIdRepository = messageIdRepository ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; MessageIdRepository messageIdRepository = resolveMessageIdRepository ( routeContext ) ; return new IdempotentConsumer ( getExpression ( ) . createExpression ( routeContext ) , messageIdRepository , childProcessor ) ; } public MessageIdRepository resolveMessageIdRepository ( RouteContext routeContext ) { if ( messageIdRepository == null ) { messageIdRepository = routeContext . lookup ( messageIdRepositoryRef , MessageIdRepository . class ) ; } return messageIdRepository ; } } 	1
package org . apache . camel . component . http ; import java . io . BufferedReader ; import java . io . IOException ; import javax . servlet . ServletInputStream ; import javax . servlet . http . HttpServletRequest ; import org . apache . camel . Converter ; @ Converter public class HttpConverter { @ Converter public HttpServletRequest toServletRequest ( HttpMessage message ) { if ( message == null ) { return null ; } return message . getRequest ( ) ; } @ Converter public ServletInputStream toServletInputStream ( HttpMessage message ) throws IOException { HttpServletRequest request = toServletRequest ( message ) ; if ( request != null ) { return request . getInputStream ( ) ; } return null ; } @ Converter public BufferedReader toReader ( HttpMessage message ) throws IOException { HttpServletRequest request = toServletRequest ( message ) ; if ( request != null ) { return request . getReader ( ) ; } return null ; } } 	0
package org . apache . camel ; import java . util . List ; public interface Routes { CamelContext getContext ( ) ; void setContext ( CamelContext context ) ; List < Route > getRouteList ( ) throws Exception ; } 	1
package org . apache . camel . component . event ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . context . ConfigurableApplicationContext ; public class EventComponent extends DefaultComponent < Exchange > implements ApplicationContextAware { private ApplicationContext applicationContext ; public EventComponent ( ) { } public EventComponent ( ApplicationContext applicationContext ) { setApplicationContext ( applicationContext ) ; } public ApplicationContext getApplicationContext ( ) { return applicationContext ; } public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { this . applicationContext = applicationContext ; } public ConfigurableApplicationContext getConfigurableApplicationContext ( ) { ApplicationContext applicationContext = getApplicationContext ( ) ; if ( applicationContext instanceof ConfigurableApplicationContext ) { return ( ConfigurableApplicationContext ) applicationContext ; } else { throw new IllegalArgumentException ( "Not created with a ConfigurableApplicationContext! Was: " + applicationContext ) ; } } protected EventEndpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { EventEndpoint answer = new EventEndpoint ( uri , this ) ; return answer ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . ObjectHelper ; public class TraceFormatter { private boolean showBreadCrumb = true ; private boolean showNode = true ; private boolean showExchangeId ; private boolean showProperties = true ; private boolean showHeaders = true ; private boolean showBody = true ; private boolean showBodyType = true ; public Object format ( TraceInterceptor interceptor , Exchange exchange ) { Message in = exchange . getIn ( ) ; Throwable exception = exchange . getException ( ) ; return ( showBreadCrumb ? getBreadCrumbID ( exchange ) + " " : "" ) + "-> " + getNodeMessage ( interceptor ) + " " + ( showNode ? interceptor . getNode ( ) + " " : "" ) + exchange . getPattern ( ) + ( showExchangeId ? " Id: " + exchange . getExchangeId ( ) : "" ) + ( showProperties ? " Properties:" + exchange . getProperties ( ) : "" ) + ( showHeaders ? " Headers:" + in . getHeaders ( ) : "" ) + ( showBodyType ? " BodyType:" + getBodyTypeAsString ( in ) : "" ) + ( showBody ? " Body:" + getBodyAsString ( in ) : "" ) + ( exception != null ? " Exception: " + exception : "" ) ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBreadCrumb ( ) { return showBreadCrumb ; } public void setShowBreadCrumb ( boolean showBreadCrumb ) { this . showBreadCrumb = showBreadCrumb ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowNode ( ) { return showNode ; } public void setShowNode ( boolean showNode ) { this . showNode = showNode ; } protected Object getBreadCrumbID ( Exchange exchange ) { UnitOfWork unitOfWork = exchange . getUnitOfWork ( ) ; return unitOfWork . getId ( ) ; } protected Object getBodyAsString ( Message in ) { Object answer = in . getBody ( String . class ) ; if ( answer == null ) { answer = in . getBody ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . className ( message . getBody ( ) ) ; if ( answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } protected String getNodeMessage ( TraceInterceptor interceptor ) { return interceptor . getNode ( ) . idOrCreate ( ) ; } } 	1
package org . apache . camel . component . jpa ; import javax . persistence . EntityManager ; import javax . persistence . Query ; public interface QueryFactory { Query createQuery ( EntityManager entityManager ) ; } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; public class CamelInvocationHandler implements InvocationHandler { private final Endpoint endpoint ; private final Producer producer ; public CamelInvocationHandler ( Endpoint endpoint , Producer producer ) { this . endpoint = endpoint ; this . producer = producer ; } public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { BeanInvocation invocation = new BeanInvocation ( method , args ) ; BeanExchange exchange = new BeanExchange ( endpoint . getCamelContext ( ) , ExchangePattern . InOut ) ; exchange . setInvocation ( invocation ) ; producer . process ( exchange ) ; Throwable fault = exchange . getException ( ) ; if ( fault != null ) { throw new InvocationTargetException ( fault ) ; } return exchange . getOut ( true ) . getBody ( ) ; } } 	1
package org . apache . camel . osgi ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . spring . SpringCamelContext ; import org . osgi . framework . BundleContext ; import org . springframework . osgi . context . BundleContextAware ; @ XmlRootElement ( name = "camelContext" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CamelContextFactoryBean extends org . apache . camel . spring . CamelContextFactoryBean implements BundleContextAware { @ XmlTransient private BundleContext bundleContext ; public BundleContext getBundleContext ( ) { return bundleContext ; } public void setBundleContext ( BundleContext bundleContext ) { this . bundleContext = bundleContext ; } protected SpringCamelContext createContext ( ) { SpringCamelContext context = super . createContext ( ) ; context . setComponentResolver ( new OsgiComponentResolver ( bundleContext ) ) ; return context ; } } 	0
package org . apache . camel ; @ Deprecated public class InvalidHeaderTypeException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; private final Object headerValue ; public InvalidHeaderTypeException ( Throwable cause , Object headerValue ) { super ( cause . getMessage ( ) + " headerValue is: " + headerValue + " of type: " + typeName ( headerValue ) , cause ) ; this . headerValue = headerValue ; } public InvalidHeaderTypeException ( String message , Object headerValue ) { super ( message ) ; this . headerValue = headerValue ; } public Object getHeaderValue ( ) { return headerValue ; } protected static String typeName ( Object headerValue ) { return ( headerValue != null ) ? headerValue . getClass ( ) . getName ( ) : "null" ; } } 	1
package org . apache . camel . component . stream ; import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . net . URL ; import java . net . URLConnection ; import java . nio . charset . Charset ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . camel . impl . DefaultMessage ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class StreamConsumer extends DefaultConsumer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( StreamConsumer . class ) ; private static final String TYPES = "in,file,url" ; private static final String INVALID_URI = "Invalid uri, valid form: 'stream:{" + TYPES + "}'" ; private static final List < String > TYPES_LIST = Arrays . asList ( TYPES . split ( "," ) ) ; private InputStream inputStream = System . in ; private StreamEndpoint endpoint ; private String uri ; public StreamConsumer ( StreamEndpoint endpoint , Processor processor , String uri ) throws Exception { super ( endpoint , processor ) ; this . endpoint = endpoint ; this . uri = uri ; validateUri ( uri ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( "in" . equals ( uri ) ) { inputStream = System . in ; } else if ( "file" . equals ( uri ) ) { inputStream = resolveStreamFromFile ( ) ; } else if ( "url" . equals ( uri ) ) { inputStream = resolveStreamFromUrl ( ) ; } readFromStream ( ) ; } @ Override public void doStop ( ) throws Exception { super . doStop ( ) ; } private void readFromStream ( ) throws Exception { Charset charset = endpoint . getCharset ( ) ; BufferedReader br = new BufferedReader ( new InputStreamReader ( inputStream , charset ) ) ; String line ; while ( ( line = br . readLine ( ) ) != null ) { consumeLine ( line ) ; } } private void consumeLine ( Object line ) throws Exception { Exchange exchange = endpoint . createExchange ( ) ; Message msg = new DefaultMessage ( ) ; msg . setBody ( line ) ; exchange . setIn ( msg ) ; getProcessor ( ) . process ( exchange ) ; } private InputStream resolveStreamFromUrl ( ) throws IOException { String u = endpoint . getUrl ( ) ; URL url = new URL ( u ) ; URLConnection c = url . openConnection ( ) ; return c . getInputStream ( ) ; } private InputStream resolveStreamFromFile ( ) throws IOException { String fileName = endpoint . getFile ( ) != null ? endpoint . getFile ( ) . trim ( ) : "_file" ; File f = new File ( fileName ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to read from file: " + f ) ; } f . createNewFile ( ) ; return new FileInputStream ( f ) ; } private void validateUri ( String uri ) throws IllegalArgumentException { String [ ] s = uri . split ( ":" ) ; if ( s . length < 2 ) { throw new IllegalArgumentException ( INVALID_URI ) ; } String [ ] t = s [ 1 ] . split ( "\\?" ) ; if ( t . length < 1 ) { throw new IllegalArgumentException ( INVALID_URI ) ; } this . uri = t [ 0 ] . trim ( ) ; if ( ! TYPES_LIST . contains ( this . uri ) ) { throw new IllegalArgumentException ( INVALID_URI ) ; } } } 	0
package org . apache . camel ; import java . util . Map ; import org . apache . camel . spi . UnitOfWork ; public interface Exchange { ExchangePattern getPattern ( ) ; void setPattern ( ExchangePattern pattern ) ; Object getProperty ( String name ) ; < T > T getProperty ( String name , Class < T > type ) ; void setProperty ( String name , Object value ) ; Object removeProperty ( String name ) ; Map < String , Object > getProperties ( ) ; Message getIn ( ) ; void setIn ( Message in ) ; Message getOut ( ) ; Message getOut ( boolean lazyCreate ) ; void setOut ( Message out ) ; Message getFault ( ) ; Message getFault ( boolean lazyCreate ) ; Throwable getException ( ) ; void setException ( Throwable e ) ; boolean isFailed ( ) ; boolean isTransacted ( ) ; CamelContext getContext ( ) ; Exchange newInstance ( ) ; Exchange copy ( ) ; void copyFrom ( Exchange source ) ; UnitOfWork getUnitOfWork ( ) ; void setUnitOfWork ( UnitOfWork unitOfWork ) ; String getExchangeId ( ) ; void setExchangeId ( String id ) ; } 	1
package org . apache . camel . builder ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . dataformat . ArtixDSContentType ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . model . dataformat . XStreamDataFormat ; import org . apache . camel . spi . DataFormat ; public class DataFormatClause < T extends ProcessorType > { private final T processorType ; private final Operation operation ; public enum Operation { Marshal , Unmarshal } public DataFormatClause ( T processorType , Operation operation ) { this . processorType = processorType ; this . operation = operation ; } public T artixDS ( ) { return dataFormat ( new ArtixDSDataFormat ( ) ) ; } public T artixDS ( Class < ? > dataObjectType ) { return dataFormat ( new ArtixDSDataFormat ( dataObjectType ) ) ; } public T artixDS ( Class < ? > elementType , ArtixDSContentType contentType ) { return dataFormat ( new ArtixDSDataFormat ( elementType , contentType ) ) ; } public T artixDS ( ArtixDSContentType contentType ) { return dataFormat ( new ArtixDSDataFormat ( contentType ) ) ; } public T csv ( ) { return dataFormat ( new CsvDataFormat ( ) ) ; } public T jaxb ( ) { return dataFormat ( new JaxbDataFormat ( ) ) ; } public T jaxb ( boolean prettyPrint ) { return dataFormat ( new JaxbDataFormat ( prettyPrint ) ) ; } public T serialization ( ) { return dataFormat ( new SerializationDataFormat ( ) ) ; } public T string ( ) { return string ( null ) ; } public T string ( String charset ) { StringDataFormat sdf = new StringDataFormat ( ) ; sdf . setCharset ( charset ) ; return dataFormat ( sdf ) ; } public T xmlBeans ( ) { return dataFormat ( new XMLBeansDataFormat ( ) ) ; } public T xstream ( ) { return dataFormat ( new XStreamDataFormat ( ) ) ; } private T dataFormat ( DataFormatType dataFormatType ) { switch ( operation ) { case Unmarshal : return ( T ) processorType . unmarshal ( dataFormatType ) ; case Marshal : return ( T ) processorType . marshal ( dataFormatType ) ; default : throw new IllegalArgumentException ( "Unknown DataFormat operation: " + operation ) ; } } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . RedeliveryPolicy ; @ XmlRootElement ( name = "redeliveryPolicy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RedeliveryPolicyType { private Integer maximumRedeliveries ; private Long initialRedeliveryDelay ; private Double backOffMultiplier ; private Boolean useExponentialBackOff ; private Double collisionAvoidanceFactor ; private Boolean useCollisionAvoidance ; public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; if ( maximumRedeliveries != null ) { answer . setMaximumRedeliveries ( maximumRedeliveries ) ; } if ( initialRedeliveryDelay != null ) { answer . setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; } if ( backOffMultiplier != null ) { answer . setBackOffMultiplier ( backOffMultiplier ) ; } if ( useExponentialBackOff != null ) { answer . setUseExponentialBackOff ( useExponentialBackOff ) ; } if ( collisionAvoidanceFactor != null ) { answer . setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; } if ( useCollisionAvoidance != null ) { answer . setUseCollisionAvoidance ( useCollisionAvoidance ) ; } return answer ; } public String toString ( ) { return "RedeliveryPolicy[maxRedeliveries: " + maximumRedeliveries + "]" ; } public RedeliveryPolicyType backOffMultiplier ( double backOffMultiplier ) { setBackOffMultiplier ( backOffMultiplier ) ; return this ; } public RedeliveryPolicyType collisionAvoidancePercent ( double collisionAvoidancePercent ) { setCollisionAvoidanceFactor ( collisionAvoidancePercent * 0.01d ) ; return this ; } public RedeliveryPolicyType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public RedeliveryPolicyType initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicyType maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicyType useCollisionAvoidance ( ) { setUseCollisionAvoidance ( Boolean . TRUE ) ; return this ; } public RedeliveryPolicyType useExponentialBackOff ( ) { setUseExponentialBackOff ( Boolean . TRUE ) ; return this ; } public Double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( Double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public Double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( Double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public Long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( Long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public Integer getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( Integer maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public Boolean getUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( Boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public Boolean getUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( Boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } } 	1
package org . apache . camel . spring ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . impl . DefaultLifecycleStrategy ; import org . apache . camel . management . DefaultInstrumentationAgent ; import org . apache . camel . management . InstrumentationLifecycleStrategy ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . model . RouteBuilderRef ; import org . apache . camel . model . RouteContainer ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . processor . interceptor . Debugger ; import org . apache . camel . processor . interceptor . Tracer ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . factory . DisposableBean ; import org . springframework . beans . factory . FactoryBean ; import org . springframework . beans . factory . InitializingBean ; import org . springframework . beans . factory . config . BeanPostProcessor ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . context . ApplicationEvent ; import org . springframework . context . ApplicationListener ; import org . springframework . context . event . ContextRefreshedEvent ; @ XmlRootElement ( name = "camelContext" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CamelContextFactoryBean extends IdentifiedType implements RouteContainer , FactoryBean , InitializingBean , DisposableBean , ApplicationContextAware , ApplicationListener { private static final Log LOG = LogFactory . getLog ( CamelContextFactoryBean . class ) ; @ XmlAttribute ( required = false ) private Boolean useJmx = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Boolean autowireRouteBuilders = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Boolean trace ; @ XmlAttribute ( required = false ) private String errorHandlerRef ; @ XmlElement ( name = "package" , required = false ) private String [ ] packages = { } ; @ XmlElement ( name = "jmxAgent" , type = CamelJMXAgentType . class , required = false ) private CamelJMXAgentType camelJMXAgent ; @ XmlElements ( { @ XmlElement ( name = "beanPostProcessor" , type = CamelBeanPostProcessor . class , required = false ) , @ XmlElement ( name = "template" , type = CamelTemplateFactoryBean . class , required = false ) , @ XmlElement ( name = "proxy" , type = CamelProxyFactoryType . class , required = false ) , @ XmlElement ( name = "export" , type = CamelServiceExporterType . class , required = false ) } ) private List beans ; @ XmlElement ( name = "routeBuilderRef" , required = false ) private List < RouteBuilderRef > builderRefs = new ArrayList < RouteBuilderRef > ( ) ; @ XmlElement ( name = "endpoint" , required = false ) private List < EndpointFactoryBean > endpoints ; @ XmlElementRef private List < DataFormatType > dataFormats ; @ XmlElement ( name = "route" , required = false ) private List < RouteType > routes = new ArrayList < RouteType > ( ) ; @ XmlTransient private SpringCamelContext context ; @ XmlTransient private RouteBuilder routeBuilder ; @ XmlTransient private List < RouteBuilder > additionalBuilders = new ArrayList < RouteBuilder > ( ) ; @ XmlTransient private ApplicationContext applicationContext ; @ XmlTransient private ClassLoader contextClassLoaderOnStart ; @ XmlTransient private BeanPostProcessor beanPostProcessor ; public CamelContextFactoryBean ( ) { contextClassLoaderOnStart = Thread . currentThread ( ) . getContextClassLoader ( ) ; } public Object getObject ( ) throws Exception { return getContext ( ) ; } public Class getObjectType ( ) { return SpringCamelContext . class ; } public boolean isSingleton ( ) { return true ; } public void afterPropertiesSet ( ) throws Exception { Debugger debugger = getBeanForType ( Debugger . class ) ; if ( debugger != null ) { getContext ( ) . addInterceptStrategy ( debugger ) ; } Tracer tracer = getBeanForType ( Tracer . class ) ; if ( tracer != null ) { getContext ( ) . addInterceptStrategy ( tracer ) ; } LifecycleStrategy lifecycleStrategy = getBeanForType ( LifecycleStrategy . class ) ; if ( lifecycleStrategy != null ) { getContext ( ) . setLifecycleStrategy ( lifecycleStrategy ) ; } Registry registry = getBeanForType ( Registry . class ) ; if ( registry != null ) { getContext ( ) . setRegistry ( registry ) ; } if ( beanPostProcessor != null ) { if ( beanPostProcessor instanceof ApplicationContextAware ) { ( ( ApplicationContextAware ) beanPostProcessor ) . setApplicationContext ( applicationContext ) ; } if ( beanPostProcessor instanceof CamelBeanPostProcessor ) { ( ( CamelBeanPostProcessor ) beanPostProcessor ) . setCamelContext ( getContext ( ) ) ; } } getContext ( ) . addRouteDefinitions ( routes ) ; if ( ! isJmxEnabled ( ) || ( camelJMXAgent != null && camelJMXAgent . isDisabled ( ) != null && camelJMXAgent . isDisabled ( ) ) ) { LOG . debug ( "JMXAgent disabled" ) ; getContext ( ) . setLifecycleStrategy ( new DefaultLifecycleStrategy ( ) ) ; } else if ( camelJMXAgent != null ) { LOG . debug ( "JMXAgent enabled" ) ; if ( lifecycleStrategy != null ) { LOG . warn ( "lifecycleStrategy will be overriden by InstrumentationLifecycleStrategy" ) ; } DefaultInstrumentationAgent agent = new DefaultInstrumentationAgent ( ) ; agent . setConnectorPort ( camelJMXAgent . getConnectorPort ( ) ) ; agent . setCreateConnector ( camelJMXAgent . isCreateConnector ( ) ) ; agent . setMBeanObjectDomainName ( camelJMXAgent . getMbeanObjectDomainName ( ) ) ; agent . setMBeanServerDefaultDomain ( camelJMXAgent . getMbeanServerDefaultDomain ( ) ) ; agent . setRegistryPort ( camelJMXAgent . getRegistryPort ( ) ) ; agent . setServiceUrlPath ( camelJMXAgent . getServiceUrlPath ( ) ) ; agent . setUsePlatformMBeanServer ( camelJMXAgent . isUsePlatformMBeanServer ( ) ) ; getContext ( ) . setLifecycleStrategy ( new InstrumentationLifecycleStrategy ( agent ) ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found JAXB created routes: " + getRoutes ( ) ) ; } findRouteBuiders ( ) ; installRoutes ( ) ; } private < T > T getBeanForType ( Class < T > clazz ) { T bean = null ; String [ ] names = getApplicationContext ( ) . getBeanNamesForType ( clazz , true , true ) ; if ( names . length == 1 ) { bean = ( T ) getApplicationContext ( ) . getBean ( names [ 0 ] , clazz ) ; } if ( bean == null ) { ApplicationContext parentContext = getApplicationContext ( ) . getParent ( ) ; if ( parentContext != null ) { names = parentContext . getBeanNamesForType ( clazz , true , true ) ; if ( names . length == 1 ) { bean = ( T ) parentContext . getBean ( names [ 0 ] , clazz ) ; } } } return bean ; } public void destroy ( ) throws Exception { getContext ( ) . stop ( ) ; } public void onApplicationEvent ( ApplicationEvent event ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Publishing event: " + event ) ; } if ( event instanceof ContextRefreshedEvent ) { try { LOG . debug ( "Starting the context now!" ) ; getContext ( ) . start ( ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } } public SpringCamelContext getContext ( ) throws Exception { if ( context == null ) { context = createContext ( ) ; } return context ; } public void setContext ( SpringCamelContext context ) { this . context = context ; } public List < RouteType > getRoutes ( ) { return routes ; } public void setRoutes ( List < RouteType > routes ) { this . routes = routes ; } public RouteBuilder getRouteBuilder ( ) { return routeBuilder ; } public void setRouteBuilder ( RouteBuilder routeBuilder ) { this . routeBuilder = routeBuilder ; } public void setRouteBuilders ( RouteBuilder [ ] builders ) { for ( RouteBuilder builder : builders ) { additionalBuilders . add ( builder ) ; } } public ApplicationContext getApplicationContext ( ) { if ( applicationContext == null ) { throw new IllegalArgumentException ( "No applicationContext has been injected!" ) ; } return applicationContext ; } public void setApplicationContext ( ApplicationContext applicationContext ) { this . applicationContext = applicationContext ; } public String [ ] getPackages ( ) { return packages ; } public void setPackages ( String [ ] packages ) { this . packages = packages ; } public void setBeanPostProcessor ( BeanPostProcessor postProcessor ) { this . beanPostProcessor = postProcessor ; } public BeanPostProcessor getBeanPostProcessor ( ) { return beanPostProcessor ; } public boolean isJmxEnabled ( ) { return useJmx . booleanValue ( ) ; } public Boolean getUseJmx ( ) { return useJmx ; } public void setUseJmx ( Boolean useJmx ) { this . useJmx = useJmx ; } public void setCamelJMXAgent ( CamelJMXAgentType agent ) { camelJMXAgent = agent ; } public Boolean getTrace ( ) { return trace ; } public void setTrace ( Boolean trace ) { this . trace = trace ; } public CamelJMXAgentType getCamelJMXAgent ( ) { return camelJMXAgent ; } public List < RouteBuilderRef > getBuilderRefs ( ) { return builderRefs ; } public void setBuilderRefs ( List < RouteBuilderRef > builderRefs ) { this . builderRefs = builderRefs ; } public void setAutowireRouteBuilders ( Boolean autowireRouteBuilders ) { this . autowireRouteBuilders = autowireRouteBuilders ; } public String getErrorHandlerRef ( ) { return errorHandlerRef ; } public void setErrorHandlerRef ( String errorHandlerRef ) { this . errorHandlerRef = errorHandlerRef ; } protected SpringCamelContext createContext ( ) { SpringCamelContext ctx = new SpringCamelContext ( getApplicationContext ( ) ) ; ctx . setName ( getId ( ) ) ; if ( trace != null ) { ctx . setTrace ( trace ) ; } if ( errorHandlerRef != null ) { ErrorHandlerBuilder errorHandlerBuilder = ( ErrorHandlerBuilder ) getApplicationContext ( ) . getBean ( errorHandlerRef , ErrorHandlerBuilder . class ) ; if ( errorHandlerBuilder == null ) { throw new IllegalArgumentException ( "Could not find bean: " + errorHandlerRef ) ; } ctx . setErrorHandlerBuilder ( errorHandlerBuilder ) ; } return ctx ; } protected void installRoutes ( ) throws Exception { if ( autowireRouteBuilders != null && autowireRouteBuilders . booleanValue ( ) ) { Map builders = getApplicationContext ( ) . getBeansOfType ( RouteBuilder . class , true , true ) ; if ( builders != null ) { for ( Object builder : builders . values ( ) ) { getContext ( ) . addRoutes ( ( RouteBuilder ) builder ) ; } } } for ( RouteBuilder routeBuilder : additionalBuilders ) { getContext ( ) . addRoutes ( routeBuilder ) ; } if ( routeBuilder != null ) { getContext ( ) . addRoutes ( routeBuilder ) ; } if ( builderRefs != null ) { for ( RouteBuilderRef builderRef : builderRefs ) { RouteBuilder builder = builderRef . createRouteBuilder ( getContext ( ) ) ; getContext ( ) . addRoutes ( builder ) ; } } } protected void findRouteBuiders ( ) throws Exception , InstantiationException { if ( packages != null && packages . length > 0 ) { RouteBuilderFinder finder = new RouteBuilderFinder ( getContext ( ) , packages , contextClassLoaderOnStart , getBeanPostProcessor ( ) ) ; finder . appendBuilders ( additionalBuilders ) ; } } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingErrorHandler ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandlerBuilder extends ErrorHandlerBuilderSupport { private Log log = LogFactory . getLog ( Logger . class ) ; private LoggingLevel level = LoggingLevel . INFO ; public LoggingErrorHandlerBuilder ( ) { } public LoggingErrorHandlerBuilder ( Log log ) { this . log = log ; } public LoggingErrorHandlerBuilder ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public ErrorHandlerBuilder copy ( ) { LoggingErrorHandlerBuilder answer = new LoggingErrorHandlerBuilder ( ) ; answer . setLog ( getLog ( ) ) ; answer . setLevel ( getLevel ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) { LoggingErrorHandler handler = new LoggingErrorHandler ( processor , log , level ) ; configure ( handler ) ; return handler ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } } 	1
package org . apache . camel ; public class RuntimeTransformException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; public RuntimeTransformException ( String message ) { super ( message ) ; } public RuntimeTransformException ( String message , Throwable cause ) { super ( message , cause ) ; } public RuntimeTransformException ( Throwable cause ) { super ( cause ) ; } } 	0
package org . apache . camel . impl ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . util . ObjectHelper ; public abstract class DefaultEndpoint < E extends Exchange > implements Endpoint < E > , CamelContextAware { private String endpointUri ; private CamelContext camelContext ; private Component component ; private ScheduledExecutorService executorService ; private ExchangePattern exchangePattern = ExchangePattern . InOnly ; protected DefaultEndpoint ( String endpointUri , Component component ) { this ( endpointUri , component . getCamelContext ( ) ) ; this . component = component ; } protected DefaultEndpoint ( String endpointUri , CamelContext camelContext ) { this ( endpointUri ) ; this . camelContext = camelContext ; } protected DefaultEndpoint ( String endpointUri ) { this . setEndpointUri ( endpointUri ) ; } protected DefaultEndpoint ( ) { } public int hashCode ( ) { return getEndpointUri ( ) . hashCode ( ) * 37 + 1 ; } @ Override public boolean equals ( Object object ) { if ( object instanceof DefaultEndpoint ) { DefaultEndpoint that = ( DefaultEndpoint ) object ; return ObjectHelper . equal ( this . getEndpointUri ( ) , that . getEndpointUri ( ) ) ; } return false ; } @ Override public String toString ( ) { return "Endpoint[" + getEndpointUri ( ) + "]" ; } public String getEndpointUri ( ) { if ( endpointUri == null ) { endpointUri = createEndpointUri ( ) ; if ( endpointUri == null ) { throw new IllegalArgumentException ( "endpointUri is not specified and " + getClass ( ) . getName ( ) + " does not implement createEndpointUri() to create a default value" ) ; } } return endpointUri ; } public CamelContext getCamelContext ( ) { return camelContext ; } public Component getComponent ( ) { return component ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public synchronized ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { Component c = getComponent ( ) ; if ( c != null && c instanceof DefaultComponent ) { DefaultComponent dc = ( DefaultComponent ) c ; executorService = dc . getExecutorService ( ) ; } if ( executorService == null ) { executorService = createExecutorService ( ) ; } } return executorService ; } public synchronized void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } public PollingConsumer < E > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < E > ( this ) ; } public E convertTo ( Class < E > type , Exchange exchange ) { if ( type . isInstance ( exchange ) ) { return type . cast ( exchange ) ; } return getCamelContext ( ) . getExchangeConverter ( ) . convertTo ( type , exchange ) ; } public E createExchange ( Exchange exchange ) { Class < E > exchangeType = getExchangeType ( ) ; if ( exchangeType != null ) { if ( exchangeType . isInstance ( exchange ) ) { return exchangeType . cast ( exchange ) ; } } E answer = createExchange ( ) ; answer . copyFrom ( exchange ) ; return answer ; } public Class < E > getExchangeType ( ) { Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { return ( Class < E > ) argumentType ; } } } return null ; } public E createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public E createExchange ( ExchangePattern pattern ) { return ( E ) new DefaultExchange ( getCamelContext ( ) , pattern ) ; } public ExchangePattern getExchangePattern ( ) { return exchangePattern ; } public void setExchangePattern ( ExchangePattern exchangePattern ) { this . exchangePattern = exchangePattern ; } protected ScheduledThreadPoolExecutor createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( 10 ) ; } public void configureProperties ( Map options ) { } protected String createEndpointUri ( ) { return null ; } protected void setEndpointUri ( String endpointUri ) { this . endpointUri = endpointUri ; } @ Deprecated public CamelContext getContext ( ) { return getCamelContext ( ) ; } @ Deprecated public void setContext ( CamelContext context ) { setCamelContext ( context ) ; } } 	1
package org . apache . camel . converter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Hashtable ; import java . util . List ; import java . util . Map ; import java . util . Properties ; import java . util . Set ; import org . apache . camel . Converter ; @ Converter public final class CollectionConverter { private CollectionConverter ( ) { } @ Converter public static Object [ ] toArray ( Collection value ) { if ( value == null ) { return null ; } return value . toArray ( ) ; } @ Converter public static List toList ( Object [ ] array ) { return Arrays . asList ( array ) ; } @ Converter public static List toList ( Collection collection ) { return new ArrayList ( collection ) ; } @ Converter public static Set toSet ( Object [ ] array ) { Set answer = new HashSet ( ) ; answer . addAll ( Arrays . asList ( array ) ) ; return answer ; } @ Converter public static Set toSet ( Collection collection ) { return new HashSet ( collection ) ; } @ Converter public static Set toSet ( Map map ) { return map . entrySet ( ) ; } @ Converter public static Properties toProperties ( Map map ) { Properties answer = new Properties ( ) ; answer . putAll ( map ) ; return answer ; } @ Converter public static Hashtable toHashtable ( Map map ) { return new Hashtable ( map ) ; } @ Converter public static HashMap toHashMap ( Map map ) { return new HashMap ( map ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultUnitOfWork ; public final class UnitOfWorkProcessor extends DelegateAsyncProcessor { public UnitOfWorkProcessor ( AsyncProcessor processor ) { super ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( exchange . getUnitOfWork ( ) == null ) { exchange . setUnitOfWork ( new DefaultUnitOfWork ( ) ) ; return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( sync ) ; exchange . getUnitOfWork ( ) . done ( exchange ) ; exchange . setUnitOfWork ( null ) ; } } ) ; } else { return processor . process ( exchange , callback ) ; } } } 	1
package org . apache . camel . processor . resequencer ; import java . util . TreeSet ; public class Sequence < E > extends TreeSet < E > { private static final long serialVersionUID = 5647393631147741711L ; private SequenceElementComparator < E > comparator ; public Sequence ( SequenceElementComparator < E > comparator ) { super ( comparator ) ; this . comparator = comparator ; } public E predecessor ( E e ) { E elem = lower ( e ) ; if ( elem == null ) { return null ; } if ( comparator . predecessor ( elem , e ) ) { return elem ; } return null ; } public E successor ( E e ) { E elem = higher ( e ) ; if ( elem == null ) { return null ; } if ( comparator . successor ( elem , e ) ) { return elem ; } return null ; } public SequenceElementComparator < E > comparator ( ) { return comparator ; } public E higher ( E e ) { boolean found = false ; for ( E current : this ) { if ( found ) { return current ; } if ( comparator . compare ( e , current ) == 0 ) { found = true ; } } return null ; } public E lower ( E e ) { E last = null ; for ( E current : this ) { if ( comparator . compare ( e , current ) == 0 ) { return last ; } last = current ; } return last ; } } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; public class SerializationDataFormat implements DataFormat { public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { ObjectOutput out = IOConverter . toObjectOutput ( stream ) ; out . writeObject ( graph ) ; out . flush ( ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { ObjectInput in = IOConverter . toObjectInput ( stream ) ; return in . readObject ( ) ; } } 	1
package org . apache . camel . impl . converter ; import java . lang . reflect . Method ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; public class StaticMethodTypeConverter implements TypeConverter { private final Method method ; public StaticMethodTypeConverter ( Method method ) { this . method = method ; } @ Override public String toString ( ) { return "StaticMethodTypeConverter: " + method ; } public < T > T convertTo ( Class < T > type , Object value ) { return ( T ) ObjectHelper . invokeMethod ( method , null , value ) ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ProceedProcessor ; import org . apache . camel . processor . UnitOfWorkProcessor ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . RouteContext ; public class DefaultRouteContext implements RouteContext { private RouteType route ; private FromType from ; private Collection < Route > routes ; private Endpoint < ? extends Exchange > endpoint ; private List < Processor > eventDrivenProcessors = new ArrayList < Processor > ( ) ; private Interceptor lastInterceptor ; private CamelContext camelContext ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private ErrorHandlerWrappingStrategy errorHandlerWrappingStrategy ; private boolean routeAdded ; public DefaultRouteContext ( RouteType route , FromType from , Collection < Route > routes ) { this . route = route ; this . from = from ; this . routes = routes ; } public DefaultRouteContext ( CamelContext camelContext ) { this . camelContext = camelContext ; routes = new ArrayList < Route > ( ) ; route = new RouteType ( "temporary" ) ; } public Endpoint < ? extends Exchange > getEndpoint ( ) { if ( endpoint == null ) { endpoint = from . resolveEndpoint ( this ) ; } return endpoint ; } public FromType getFrom ( ) { return from ; } public RouteType getRoute ( ) { return route ; } public CamelContext getCamelContext ( ) { if ( camelContext == null ) { camelContext = getRoute ( ) . getCamelContext ( ) ; } return camelContext ; } public Processor createProcessor ( ProcessorType node ) throws Exception { return node . createOutputsProcessor ( this ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) { return route . resolveEndpoint ( uri ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) { Endpoint < ? extends Exchange > endpoint = null ; if ( uri != null ) { endpoint = resolveEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } } if ( ref != null ) { endpoint = lookup ( ref , Endpoint . class ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( "ref:" + ref ) ; } } if ( endpoint == null ) { throw new IllegalArgumentException ( "Either 'uri' or 'ref' must be specified on: " + this ) ; } else { return endpoint ; } } public < T > T lookup ( String name , Class < T > type ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } public void commit ( ) { if ( ! eventDrivenProcessors . isEmpty ( ) ) { Processor processor = Pipeline . newInstance ( eventDrivenProcessors ) ; final AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; Processor unitOfWorkProcessor = new UnitOfWorkProcessor ( asyncProcessor ) ; Route edcr = new EventDrivenConsumerRoute ( getEndpoint ( ) , unitOfWorkProcessor ) ; edcr . getProperties ( ) . put ( Route . PARENT_PROPERTY , Integer . toHexString ( route . hashCode ( ) ) ) ; if ( route . getGroup ( ) != null ) { edcr . getProperties ( ) . put ( Route . GROUP_PROPERTY , route . getGroup ( ) ) ; } routes . add ( edcr ) ; } } public void addEventDrivenProcessor ( Processor processor ) { eventDrivenProcessors . add ( processor ) ; } public void intercept ( Intercept interceptor ) { lastInterceptor = ( Interceptor ) interceptor ; } public Processor createProceedProcessor ( ) { if ( lastInterceptor == null ) { throw new IllegalArgumentException ( "Cannot proceed() from outside of an interceptor!" ) ; } else { return new ProceedProcessor ( lastInterceptor ) ; } } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) { return errorHandlerWrappingStrategy ; } public void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) { errorHandlerWrappingStrategy = strategy ; } public boolean isRouteAdded ( ) { return routeAdded ; } public void setIsRouteAdded ( boolean b ) { routeAdded = b ; } } 	1
package org . apache . camel . util ; import org . apache . camel . spi . Injector ; public class ReflectionInjector implements Injector { public < T > T newInstance ( Class < T > type ) { return ObjectHelper . newInstance ( type ) ; } } 	0
package org . apache . camel . management ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationProcessor extends DelegateProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private PerformanceCounter counter ; public InstrumentationProcessor ( PerformanceCounter counter ) { this . counter = counter ; } public InstrumentationProcessor ( ) { } public void setCounter ( PerformanceCounter counter ) { this . counter = counter ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { final long startTime = System . nanoTime ( ) ; if ( processor instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) processor ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( doneSynchronously ) ; } } ) ; } try { processor . process ( exchange ) ; } catch ( Exception e ) { exchange . setException ( e ) ; } if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( true ) ; return true ; } protected void recordTime ( Exchange exchange , double duration ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Recording duration: " + duration + " millis for exchange: " + exchange ) ; } if ( ! exchange . isFailed ( ) && exchange . getException ( ) == null ) { counter . completedExchange ( duration ) ; } else { counter . failedExchange ( ) ; } } } 	1
package org . apache . camel . bam . processor ; import java . lang . reflect . Method ; import java . util . List ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . bam . model . ProcessDefinition ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . transaction . support . TransactionTemplate ; public class JpaBamProcessorSupport < T > extends BamProcessorSupport < T > { private static final transient Log LOG = LogFactory . getLog ( JpaBamProcessorSupport . class ) ; private static final Lock LOCK = new ReentrantLock ( ) ; private ActivityRules activityRules ; private JpaTemplate template ; private String findByKeyQuery ; private String keyPropertyName = "correlationKey" ; private boolean correlationKeyIsPrimary = true ; public JpaBamProcessorSupport ( TransactionTemplate transactionTemplate , JpaTemplate template , Expression < Exchange > correlationKeyExpression , ActivityRules activityRules , Class < T > entitytype ) { super ( transactionTemplate , correlationKeyExpression , entitytype ) ; this . activityRules = activityRules ; this . template = template ; } public JpaBamProcessorSupport ( TransactionTemplate transactionTemplate , JpaTemplate template , Expression < Exchange > correlationKeyExpression , ActivityRules activityRules ) { super ( transactionTemplate , correlationKeyExpression ) ; this . activityRules = activityRules ; this . template = template ; } public String getFindByKeyQuery ( ) { if ( findByKeyQuery == null ) { findByKeyQuery = createFindByKeyQuery ( ) ; } return findByKeyQuery ; } public void setFindByKeyQuery ( String findByKeyQuery ) { this . findByKeyQuery = findByKeyQuery ; } public ActivityRules getActivityRules ( ) { return activityRules ; } public void setActivityRules ( ActivityRules activityRules ) { this . activityRules = activityRules ; } public String getKeyPropertyName ( ) { return keyPropertyName ; } public void setKeyPropertyName ( String keyPropertyName ) { this . keyPropertyName = keyPropertyName ; } public JpaTemplate getTemplate ( ) { return template ; } public void setTemplate ( JpaTemplate template ) { this . template = template ; } public boolean isCorrelationKeyIsPrimary ( ) { return correlationKeyIsPrimary ; } public void setCorrelationKeyIsPrimary ( boolean correlationKeyIsPrimary ) { this . correlationKeyIsPrimary = correlationKeyIsPrimary ; } protected T loadEntity ( Exchange exchange , Object key ) throws Exception { LOCK . lock ( ) ; try { T entity = findEntityByCorrelationKey ( key ) ; if ( entity == null ) { entity = createEntity ( exchange , key ) ; setKeyProperty ( entity , key ) ; ProcessDefinition definition = ProcessDefinition . getRefreshedProcessDefinition ( template , getActivityRules ( ) . getProcessRules ( ) . getProcessDefinition ( ) ) ; setProcessDefinitionProperty ( entity , definition ) ; template . persist ( entity ) ; LOG . debug ( "About to flush on entity: " + entity + " with key: " + key ) ; template . flush ( ) ; } return entity ; } finally { LOCK . unlock ( ) ; } } protected T findEntityByCorrelationKey ( Object key ) { if ( isCorrelationKeyIsPrimary ( ) ) { return template . find ( getEntityType ( ) , key ) ; } else { List < T > list = template . find ( getFindByKeyQuery ( ) , key ) ; if ( list . isEmpty ( ) ) { return null ; } else { return list . get ( 0 ) ; } } } protected Class getKeyType ( ) { try { Method getter = IntrospectionSupport . getPropertyGetter ( getEntityType ( ) , getKeyPropertyName ( ) ) ; return getter . getReturnType ( ) ; } catch ( NoSuchMethodException e ) { LOG . warn ( "no such getter for: " + getKeyPropertyName ( ) + " on " + getEntityType ( ) + ". Reason: " + e , e ) ; return null ; } } protected void setKeyProperty ( T entity , Object key ) throws Exception { IntrospectionSupport . setProperty ( entity , getKeyPropertyName ( ) , key ) ; } protected void setProcessDefinitionProperty ( T entity , ProcessDefinition processDefinition ) throws Exception { IntrospectionSupport . setProperty ( entity , "processDefinition" , processDefinition ) ; } protected T createEntity ( Exchange exchange , Object key ) { return ( T ) exchange . getContext ( ) . getInjector ( ) . newInstance ( getEntityType ( ) ) ; } protected void processEntity ( Exchange exchange , T entity ) throws Exception { if ( entity instanceof Processor ) { Processor processor = ( Processor ) entity ; processor . process ( exchange ) ; } else { throw new IllegalArgumentException ( "No processor defined for this route" ) ; } } protected String createFindByKeyQuery ( ) { return "select x from " + getEntityType ( ) . getName ( ) + " x where x." + getKeyPropertyName ( ) + " = ?1" ; } } 	0
package org . apache . camel . impl . converter ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Method ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; import static java . lang . reflect . Modifier . isAbstract ; import static java . lang . reflect . Modifier . isPublic ; import static java . lang . reflect . Modifier . isStatic ; import org . apache . camel . Converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ResolverUtil ; import org . apache . camel . util . WebSphereResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AnnotationTypeConverterLoader implements TypeConverterLoader { public static final String META_INF_SERVICES = "META-INF/services/org/apache/camel/TypeConverter" ; private static final transient Log LOG = LogFactory . getLog ( AnnotationTypeConverterLoader . class ) ; private ResolverUtil resolver = new ResolverUtil ( ) ; private Set < Class > visitedClasses = new HashSet < Class > ( ) ; public AnnotationTypeConverterLoader ( ) { if ( WebSphereResolverUtil . isWebSphereClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ) { LOG . info ( "Using WebSphere specific ResolverUtil" ) ; resolver = new WebSphereResolverUtil ( META_INF_SERVICES ) ; } } public void load ( TypeConverterRegistry registry ) throws Exception { String [ ] packageNames = findPackageNames ( ) ; resolver . findAnnotated ( Converter . class , packageNames ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class type : classes ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading converter class: " + ObjectHelper . name ( type ) ) ; } loadConverterMethods ( registry , type ) ; } } protected String [ ] findPackageNames ( ) throws IOException { Set < String > packages = new HashSet < String > ( ) ; findPackages ( packages , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; findPackages ( packages , getClass ( ) . getClassLoader ( ) ) ; return packages . toArray ( new String [ packages . size ( ) ] ) ; } protected void findPackages ( Set < String > packages , ClassLoader classLoader ) throws IOException { Enumeration < URL > resources = classLoader . getResources ( META_INF_SERVICES ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; if ( url != null ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ; try { while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } finally { ObjectHelper . close ( reader , null , LOG ) ; } } } } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected void loadConverterMethods ( TypeConverterRegistry registry , Class type ) { if ( visitedClasses . contains ( type ) ) { return ; } visitedClasses . add ( type ) ; try { Method [ ] methods = type . getDeclaredMethods ( ) ; CachingInjector injector = null ; for ( Method method : methods ) { Converter annotation = method . getAnnotation ( Converter . class ) ; if ( annotation != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes == null || parameterTypes . length != 1 ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method should have one parameter" ) ; } else { int modifiers = method . getModifiers ( ) ; if ( isAbstract ( modifiers ) || ! isPublic ( modifiers ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method is not a public and concrete method" ) ; } else { Class toType = method . getReturnType ( ) ; if ( toType . equals ( Void . class ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method returns a void method" ) ; } else { Class fromType = parameterTypes [ 0 ] ; if ( isStatic ( modifiers ) ) { registerTypeConverter ( registry , method , toType , fromType , new StaticMethodTypeConverter ( method ) ) ; } else { if ( injector == null ) { injector = new CachingInjector ( registry , type ) ; } registerTypeConverter ( registry , method , toType , fromType , new InstanceMethodTypeConverter ( injector , method ) ) ; } } } } } } Class superclass = type . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { loadConverterMethods ( registry , superclass ) ; } } catch ( NoClassDefFoundError e ) { LOG . debug ( "Ignoring converter type: " + type . getName ( ) + " as a dependent class could not be found: " + e , e ) ; } } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { registry . addTypeConverter ( toType , fromType , typeConverter ) ; } } 	1
package org . apache . camel . builder . xml ; public class DomResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new DomResultHandler ( ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; public interface ErrorHandlerBuilder { ErrorHandlerBuilder copy ( ) ; Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception ; void addErrorHandlers ( ExceptionType exception ) ; } 	1
package org . apache . camel . component . jpa ; import javax . persistence . EntityManager ; import javax . persistence . EntityManagerFactory ; import javax . persistence . EntityTransaction ; import org . apache . camel . impl . ServiceSupport ; import org . springframework . orm . jpa . JpaCallback ; import static org . apache . camel . util . ObjectHelper . notNull ; public class DefaultTransactionStrategy extends ServiceSupport implements TransactionStrategy { private EntityManagerFactory entityManagerFactory ; private EntityManager entityManager ; public DefaultTransactionStrategy ( EntityManagerFactory entityManagerFactory ) { notNull ( entityManagerFactory , "entityManagerFactory" ) ; this . entityManagerFactory = entityManagerFactory ; } public DefaultTransactionStrategy ( EntityManager entityManager ) { notNull ( entityManager , "entityManager" ) ; this . entityManager = entityManager ; } public Object execute ( JpaCallback callback ) { EntityManager em = getEntityManager ( ) ; EntityTransaction transaction = em . getTransaction ( ) ; transaction . begin ( ) ; try { Object answer = callback . doInJpa ( em ) ; transaction . commit ( ) ; return answer ; } catch ( RuntimeException e ) { if ( transaction != null ) { transaction . rollback ( ) ; } throw e ; } } public EntityManager getEntityManager ( ) { if ( entityManager == null ) { entityManager = entityManagerFactory . createEntityManager ( ) ; } return entityManager ; } protected void doStart ( ) throws Exception { getEntityManager ( ) ; } protected void doStop ( ) throws Exception { if ( entityManager != null ) { entityManager . close ( ) ; } } } 	0
package org . apache . camel . model . dataformat ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Exchange ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "dataFormatType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DataFormatType extends IdentifiedType implements DataFormat { @ XmlTransient private DataFormat dataFormat ; @ XmlTransient private String dataFormatTypeName ; public DataFormatType ( ) { } public DataFormatType ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } protected DataFormatType ( String dataFormatTypeName ) { this . dataFormatTypeName = dataFormatTypeName ; } public static DataFormat getDataFormat ( RouteContext routeContext , DataFormatType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; DataFormat dataFormat = routeContext . lookup ( ref , DataFormat . class ) ; if ( dataFormat instanceof DataFormatType ) { type = ( DataFormatType ) dataFormat ; } else { return dataFormat ; } } return type . getDataFormat ( routeContext ) ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; dataFormat . marshal ( exchange , graph , stream ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; return dataFormat . unmarshal ( exchange , stream ) ; } public DataFormat getDataFormat ( RouteContext routeContext ) { if ( dataFormat == null ) { dataFormat = createDataFormat ( routeContext ) ; ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; configureDataFormat ( dataFormat ) ; } return dataFormat ; } protected DataFormat createDataFormat ( RouteContext routeContext ) { if ( dataFormatTypeName != null ) { Class type = ObjectHelper . loadClass ( dataFormatTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + dataFormatTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } return ( DataFormat ) ObjectHelper . newInstance ( type ) ; } return null ; } protected void configureDataFormat ( DataFormat dataFormat ) { } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } } 	1
package org . apache . camel . model ; public interface Block { void addOutput ( ProcessorType processorType ) ; } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultExchange implements Exchange { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; protected final CamelContext context ; private Map < String , Object > properties ; private Message in ; private Message out ; private Message fault ; private Throwable exception ; private String exchangeId ; private UnitOfWork unitOfWork ; private ExchangePattern pattern ; public DefaultExchange ( CamelContext context ) { this ( context , ExchangePattern . InOnly ) ; } public DefaultExchange ( CamelContext context , ExchangePattern pattern ) { this . context = context ; this . pattern = pattern ; } public DefaultExchange ( DefaultExchange parent ) { this ( parent . getContext ( ) , parent . getPattern ( ) ) ; this . unitOfWork = parent . getUnitOfWork ( ) ; } @ Override public String toString ( ) { return "Exchange[" + in + "]" ; } public Exchange copy ( ) { Exchange exchange = newInstance ( ) ; exchange . copyFrom ( this ) ; return exchange ; } public void copyFrom ( Exchange exchange ) { if ( exchange == this ) { return ; } setProperties ( safeCopy ( exchange . getProperties ( ) ) ) ; safeCopy ( getIn ( ) , exchange , exchange . getIn ( ) ) ; Message copyOut = exchange . getOut ( false ) ; if ( copyOut != null ) { safeCopy ( getOut ( true ) , exchange , copyOut ) ; } Message copyFault = exchange . getFault ( false ) ; if ( copyFault != null ) { safeCopy ( getFault ( true ) , exchange , copyFault ) ; } setException ( exchange . getException ( ) ) ; unitOfWork = exchange . getUnitOfWork ( ) ; pattern = exchange . getPattern ( ) ; } private static void safeCopy ( Message message , Exchange exchange , Message that ) { if ( message != null ) { message . copyFrom ( that ) ; } } private static Map < String , Object > safeCopy ( Map < String , Object > properties ) { if ( properties == null ) { return null ; } return new HashMap < String , Object > ( properties ) ; } private static Message safeCopy ( Exchange exchange , Message message ) { if ( message == null ) { return null ; } Message answer = message . copy ( ) ; if ( answer instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) answer ; messageSupport . setExchange ( exchange ) ; } return answer ; } public Exchange newInstance ( ) { return new DefaultExchange ( this ) ; } public CamelContext getContext ( ) { return context ; } public Object getProperty ( String name ) { if ( properties != null ) { return properties . get ( name ) ; } return null ; } public < T > T getProperty ( String name , Class < T > type ) { Object value = getProperty ( name ) ; ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { validateExchangePropertyIsExpectedType ( property , type , value ) ; } return getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setProperty ( String name , Object value ) { ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { Class type = value . getClass ( ) ; validateExchangePropertyIsExpectedType ( property , type , value ) ; } getProperties ( ) . put ( name , value ) ; } private < T > void validateExchangePropertyIsExpectedType ( ExchangeProperty < ? > property , Class < T > type , Object value ) { if ( value != null && property != null && ! property . type ( ) . isAssignableFrom ( type ) ) { throw new RuntimeCamelException ( "Type cast exception while getting an " + "Exchange Property value '" + value . toString ( ) + "' on Exchange " + this + " for a well known Exchange Property with these traits: " + property ) ; } } public Object removeProperty ( String name ) { return getProperties ( ) . remove ( name ) ; } public Map < String , Object > getProperties ( ) { if ( properties == null ) { properties = new HashMap < String , Object > ( ) ; } return properties ; } public void setProperties ( Map < String , Object > properties ) { this . properties = properties ; } public Message getIn ( ) { if ( in == null ) { in = createInMessage ( ) ; configureMessage ( in ) ; } return in ; } public void setIn ( Message in ) { this . in = in ; configureMessage ( in ) ; } public Message getOut ( ) { return getOut ( true ) ; } public Message getOut ( boolean lazyCreate ) { if ( out == null && lazyCreate ) { out = createOutMessage ( ) ; configureMessage ( out ) ; } return out ; } public void setOut ( Message out ) { this . out = out ; configureMessage ( out ) ; } public Throwable getException ( ) { return exception ; } public void setException ( Throwable exception ) { this . exception = exception ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } public void throwException ( ) throws Exception { if ( exception == null ) { return ; } if ( exception instanceof RuntimeException ) { throw ( RuntimeException ) exception ; } if ( exception instanceof Exception ) { throw ( Exception ) exception ; } throw new RuntimeCamelException ( exception ) ; } public Message getFault ( ) { return getFault ( true ) ; } public Message getFault ( boolean lazyCreate ) { if ( fault == null && lazyCreate ) { fault = createFaultMessage ( ) ; configureMessage ( fault ) ; } return fault ; } public void setFault ( Message fault ) { this . fault = fault ; configureMessage ( fault ) ; } public String getExchangeId ( ) { if ( exchangeId == null ) { exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( ) ; } return exchangeId ; } public void setExchangeId ( String id ) { this . exchangeId = id ; } public boolean isFailed ( ) { Message faultMessage = getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return getException ( ) != null ; } public boolean isTransacted ( ) { ExchangeProperty < ? > property = ExchangeProperty . get ( "transacted" ) ; return property != null && property . get ( this ) == Boolean . TRUE ; } public UnitOfWork getUnitOfWork ( ) { return unitOfWork ; } public void setUnitOfWork ( UnitOfWork unitOfWork ) { this . unitOfWork = unitOfWork ; } protected Message createInMessage ( ) { return new DefaultMessage ( ) ; } protected Message createOutMessage ( ) { return new DefaultMessage ( ) ; } protected Message createFaultMessage ( ) { return new DefaultMessage ( ) ; } protected void configureMessage ( Message message ) { if ( message instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) message ; messageSupport . setExchange ( this ) ; } } } 	1
package org . apache . camel . management ; public final class JmxSystemPropertyKeys { public static final String DISABLED = "org.apache.camel.jmx.disabled" ; public static final String REGISTRY_PORT = "org.apache.camel.jmx.rmiConnector.registryPort" ; public static final String CONNECTOR_PORT = "org.apache.camel.jmx.rmiConnector.connectorPort" ; public static final String DOMAIN = "org.apache.camel.jmx.mbeanServerDefaultDomain" ; public static final String MBEAN_DOMAIN = "org.apache.camel.jmx.mbeanObjectDomainName" ; public static final String SERVICE_URL_PATH = "org.apache.camel.jmx.serviceUrlPath" ; public static final String CREATE_CONNECTOR = "org.apache.camel.jmx.createRmiConnector" ; public static final String USE_PLATFORM_MBS = "org.apache.camel.jmx.usePlatformMBeanServer" ; private JmxSystemPropertyKeys ( ) { } } 	0
package org . apache . camel . model ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . loadbalancer . LoadBalancerType ; import org . apache . camel . model . loadbalancer . RandomLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . RoundRobinLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . StickyLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . TopicLoadBalanceStrategy ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RandomLoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . processor . loadbalancer . StickyLoadBalancer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; @ XmlRootElement ( name = "loadBalance" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalanceType extends OutputType < LoadBalanceType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "roundRobin" , type = RoundRobinLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "random" , type = RandomLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "sticky" , type = StickyLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "topic" , type = TopicLoadBalanceStrategy . class ) } ) private LoadBalancerType loadBalancerType ; public LoadBalanceType ( ) { } @ Override public String getShortName ( ) { return "loadbalance" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public LoadBalancerType getLoadBalancerType ( ) { return loadBalancerType ; } public void setLoadBalancerType ( LoadBalancerType loadbalancer ) { loadBalancerType = loadbalancer ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : outputs ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : getOutputs ( ) ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } public LoadBalanceType setLoadBalancer ( LoadBalancer loadBalancer ) { loadBalancerType = new LoadBalancerType ( loadBalancer ) ; return this ; } public LoadBalanceType roundRobin ( ) { loadBalancerType = new LoadBalancerType ( new RoundRobinLoadBalancer ( ) ) ; return this ; } public LoadBalanceType random ( ) { loadBalancerType = new LoadBalancerType ( new RandomLoadBalancer ( ) ) ; return this ; } public LoadBalanceType sticky ( Expression < Exchange > correlationExpression ) { loadBalancerType = new LoadBalancerType ( new StickyLoadBalancer ( correlationExpression ) ) ; return this ; } public LoadBalanceType topic ( ) { loadBalancerType = new LoadBalancerType ( new TopicLoadBalancer ( ) ) ; return this ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < ProcessorType < ? > > list = getOutputs ( ) ; for ( ProcessorType < ? > processorType : list ) { buffer . append ( processorType . getLabel ( ) ) ; } return buffer . toString ( ) ; } @ Override public String toString ( ) { String result ; if ( loadBalancerType != null ) { result = "LoadBalanceType[" + loadBalancerType + ", " ; } else { result = "LoadBalanceType[" + ref + ", " ; } result = result + getOutputs ( ) + "]" ; return result ; } } 	1
package org . apache . camel . component . xmpp ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . jivesoftware . smack . Chat ; import org . jivesoftware . smack . XMPPException ; import org . jivesoftware . smack . packet . Message ; public class XmppPrivateChatProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( XmppPrivateChatProducer . class ) ; private final XmppEndpoint endpoint ; private final String participant ; private Chat chat ; public XmppPrivateChatProducer ( XmppEndpoint endpoint , String participant ) { super ( endpoint ) ; this . endpoint = endpoint ; this . participant = participant ; if ( participant == null ) { throw new IllegalArgumentException ( "No participant property specified" ) ; } } public void process ( Exchange exchange ) { Message message = chat . createMessage ( ) ; message . setTo ( participant ) ; message . setThread ( exchange . getExchangeId ( ) ) ; endpoint . getBinding ( ) . populateXmppMessage ( message , exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> message: " + message . getBody ( ) ) ; } try { chat . sendMessage ( message ) ; } catch ( XMPPException e ) { throw new RuntimeXmppException ( e ) ; } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( chat == null ) { chat = endpoint . getConnection ( ) . createChat ( getParticipant ( ) ) ; } } @ Override protected void doStop ( ) throws Exception { chat = null ; super . doStop ( ) ; } public Chat getChat ( ) { return chat ; } public void setChat ( Chat chat ) { this . chat = chat ; } public String getParticipant ( ) { return participant ; } } 	0
package org . apache . camel . processor . aggregate ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class PredicateAggregationCollection extends AggregationCollection { private Predicate aggregationCompletedPredicate ; private List < Exchange > collection = new ArrayList < Exchange > ( ) ; public PredicateAggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { super ( correlationExpression , aggregationStrategy ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } @ Override protected void onAggregation ( Object correlationKey , Exchange newExchange ) { if ( aggregationCompletedPredicate . matches ( newExchange ) ) { super . getMap ( ) . remove ( correlationKey ) ; collection . add ( newExchange ) ; } } @ Override public Iterator < Exchange > iterator ( ) { return collection . iterator ( ) ; } @ Override public int size ( ) { return collection . size ( ) ; } @ Override public void clear ( ) { collection . clear ( ) ; super . clear ( ) ; } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/spring" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . spring ; 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Body ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Header ; import org . apache . camel . Headers ; import org . apache . camel . Message ; import org . apache . camel . OutHeaders ; import org . apache . camel . Properties ; import org . apache . camel . Property ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ExchangeHelper . convertToType ; public class BeanInfo { private static final transient Log LOG = LogFactory . getLog ( BeanInfo . class ) ; private final CamelContext camelContext ; private Class type ; private ParameterMappingStrategy strategy ; private Map < String , MethodInfo > operations = new ConcurrentHashMap < String , MethodInfo > ( ) ; private MethodInfo defaultMethod ; private List < MethodInfo > operationsWithBody = new ArrayList < MethodInfo > ( ) ; private List < MethodInfo > operationsWithCustomAnnotation = new ArrayList < MethodInfo > ( ) ; public BeanInfo ( CamelContext camelContext , Class type ) { this ( camelContext , type , createParameterMappingStrategy ( camelContext ) ) ; } public BeanInfo ( CamelContext camelContext , Class type , ParameterMappingStrategy strategy ) { this . camelContext = camelContext ; this . type = type ; this . strategy = strategy ; introspect ( getType ( ) ) ; if ( operations . size ( ) == 1 ) { Collection < MethodInfo > methodInfos = operations . values ( ) ; for ( MethodInfo methodInfo : methodInfos ) { defaultMethod = methodInfo ; } } } public Class getType ( ) { return type ; } public CamelContext getCamelContext ( ) { return camelContext ; } public MethodInvocation createInvocation ( Method method , Object pojo , Exchange exchange ) throws RuntimeCamelException { MethodInfo methodInfo = introspect ( type , method ) ; if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } public MethodInvocation createInvocation ( Object pojo , Exchange exchange ) throws RuntimeCamelException , AmbiguousMethodCallException { MethodInfo methodInfo = null ; String name = exchange . getIn ( ) . getHeader ( BeanProcessor . METHOD_NAME , String . class ) ; if ( name != null ) { methodInfo = operations . get ( name ) ; } if ( methodInfo == null ) { methodInfo = chooseMethod ( pojo , exchange ) ; } if ( methodInfo == null ) { methodInfo = defaultMethod ; } if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } protected void introspect ( Class clazz ) { Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( isValidMethod ( clazz , method ) ) { introspect ( clazz , method ) ; } } Class superclass = clazz . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { introspect ( superclass ) ; } } protected MethodInfo introspect ( Class clazz , Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; Annotation [ ] [ ] parametersAnnotations = method . getParameterAnnotations ( ) ; List < ParameterInfo > parameters = new ArrayList < ParameterInfo > ( ) ; List < ParameterInfo > bodyParameters = new ArrayList < ParameterInfo > ( ) ; boolean hasCustomAnnotation = false ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { Class parameterType = parameterTypes [ i ] ; Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] ; Expression expression = createParameterUnmarshalExpression ( clazz , method , parameterType , parameterAnnotations ) ; hasCustomAnnotation |= expression != null ; ParameterInfo parameterInfo = new ParameterInfo ( i , parameterType , parameterAnnotations , expression ) ; parameters . add ( parameterInfo ) ; if ( expression == null ) { hasCustomAnnotation |= ObjectHelper . hasAnnotation ( parameterAnnotations , Body . class ) ; if ( bodyParameters . isEmpty ( ) ) { if ( Exchange . class . isAssignableFrom ( parameterType ) ) { expression = ExpressionBuilder . exchangeExpression ( ) ; } else { expression = ExpressionBuilder . bodyExpression ( parameterType ) ; } parameterInfo . setExpression ( expression ) ; bodyParameters . add ( parameterInfo ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No expression available for method: " + method . toString ( ) + " which already has a body so ignoring parameter: " + i + " so ignoring method" ) ; } return null ; } } } String opName = method . getName ( ) ; MethodInfo methodInfo = new MethodInfo ( clazz , method , parameters , bodyParameters , hasCustomAnnotation ) ; operations . put ( opName , methodInfo ) ; if ( methodInfo . hasBodyParameter ( ) ) { operationsWithBody . add ( methodInfo ) ; } if ( methodInfo . isHasCustomAnnotation ( ) && ! methodInfo . hasBodyParameter ( ) ) { operationsWithCustomAnnotation . add ( methodInfo ) ; } return methodInfo ; } protected MethodInfo chooseMethod ( Object pojo , Exchange exchange ) throws AmbiguousMethodCallException { if ( operationsWithBody . size ( ) == 1 ) { return operationsWithBody . get ( 0 ) ; } else if ( ! operationsWithBody . isEmpty ( ) ) { return chooseMethodWithMatchingBody ( exchange , operationsWithBody ) ; } else if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return null ; } protected MethodInfo chooseMethodWithMatchingBody ( Exchange exchange , Collection < MethodInfo > operationList ) throws AmbiguousMethodCallException { Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; if ( body != null ) { Class bodyType = body . getClass ( ) ; List < MethodInfo > possibles = new ArrayList < MethodInfo > ( ) ; for ( MethodInfo methodInfo : operationList ) { boolean out = exchange . getPattern ( ) . isOutCapable ( ) ; if ( out && methodInfo . isReturnTypeVoid ( ) ) { continue ; } if ( methodInfo . bodyParameterMatches ( bodyType ) ) { possibles . add ( methodInfo ) ; } } if ( possibles . size ( ) == 1 ) { return possibles . get ( 0 ) ; } else if ( possibles . isEmpty ( ) ) { Object newBody = null ; MethodInfo matched = null ; for ( MethodInfo methodInfo : operationList ) { Object value = convertToType ( exchange , methodInfo . getBodyParameterType ( ) , body ) ; if ( value != null ) { if ( newBody != null ) { throw new AmbiguousMethodCallException ( exchange , Arrays . asList ( matched , methodInfo ) ) ; } else { newBody = value ; matched = methodInfo ; } } } if ( matched != null ) { in . setBody ( newBody ) ; return matched ; } } else { if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return chooseMethodWithCustomAnnotations ( exchange , possibles ) ; } } return null ; } protected MethodInfo chooseMethodWithCustomAnnotations ( Exchange exchange , Collection < MethodInfo > possibles ) throws AmbiguousMethodCallException { MethodInfo chosen = null ; for ( MethodInfo possible : possibles ) { if ( possible . isHasCustomAnnotation ( ) ) { if ( chosen != null ) { chosen = null ; break ; } else { chosen = possible ; } } } if ( chosen != null ) { return chosen ; } throw new AmbiguousMethodCallException ( exchange , possibles ) ; } protected Expression createParameterUnmarshalExpression ( Class clazz , Method method , Class parameterType , Annotation [ ] parameterAnnotation ) { for ( Annotation annotation : parameterAnnotation ) { Expression answer = createParameterUnmarshalExpressionForAnnotation ( clazz , method , parameterType , annotation ) ; if ( answer != null ) { return answer ; } } return strategy . getDefaultParameterTypeExpression ( parameterType ) ; } protected boolean isPossibleBodyParameter ( Annotation [ ] annotations ) { if ( annotations != null ) { for ( Annotation annotation : annotations ) { if ( ( annotation instanceof Property ) || ( annotation instanceof Header ) || ( annotation instanceof Headers ) || ( annotation instanceof OutHeaders ) || ( annotation instanceof Properties ) ) { return false ; } LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { return false ; } } } return true ; } protected Expression createParameterUnmarshalExpressionForAnnotation ( Class clazz , Method method , Class parameterType , Annotation annotation ) { if ( annotation instanceof Property ) { Property propertyAnnotation = ( Property ) annotation ; return ExpressionBuilder . propertyExpression ( propertyAnnotation . name ( ) ) ; } else if ( annotation instanceof Properties ) { return ExpressionBuilder . propertiesExpression ( ) ; } else if ( annotation instanceof Header ) { Header headerAnnotation = ( Header ) annotation ; return ExpressionBuilder . headerExpression ( headerAnnotation . name ( ) ) ; } else if ( annotation instanceof Headers ) { return ExpressionBuilder . headersExpression ( ) ; } else if ( annotation instanceof OutHeaders ) { return ExpressionBuilder . outHeadersExpression ( ) ; } else { LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { Class < ? > type = languageAnnotation . factory ( ) ; Object object = camelContext . getInjector ( ) . newInstance ( type ) ; if ( object instanceof AnnotationExpressionFactory ) { AnnotationExpressionFactory expressionFactory = ( AnnotationExpressionFactory ) object ; return expressionFactory . createExpression ( camelContext , annotation , languageAnnotation , parameterType ) ; } else { LOG . error ( "Ignoring bad annotation: " + languageAnnotation + "on method: " + method + " which declares a factory: " + type . getName ( ) + " which does not implement " + AnnotationExpressionFactory . class . getName ( ) ) ; } } } return null ; } protected boolean isValidMethod ( Class clazz , Method method ) { if ( ! Modifier . isPublic ( method . getModifiers ( ) ) ) { return false ; } if ( method . getReturnType ( ) != null && Exchange . class . isAssignableFrom ( method . getReturnType ( ) ) ) { return false ; } return true ; } public static ParameterMappingStrategy createParameterMappingStrategy ( CamelContext camelContext ) { Registry registry = camelContext . getRegistry ( ) ; ParameterMappingStrategy answer = registry . lookup ( ParameterMappingStrategy . class . getName ( ) , ParameterMappingStrategy . class ) ; if ( answer == null ) { answer = new DefaultParameterMappingStrategy ( ) ; } return answer ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; public abstract class DefaultPollingEndpoint < E extends Exchange > extends ScheduledPollEndpoint < E > { protected DefaultPollingEndpoint ( ) { } protected DefaultPollingEndpoint ( String endpointUri ) { super ( endpointUri ) ; } protected DefaultPollingEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; } protected DefaultPollingEndpoint ( String endpointUri , CamelContext context ) { super ( endpointUri , context ) ; } public Consumer < E > createConsumer ( Processor processor ) throws Exception { DefaultScheduledPollConsumer result = new DefaultScheduledPollConsumer ( this , processor ) ; configureConsumer ( result ) ; return result ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "filter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FilterType extends ExpressionNode implements Block { public FilterType ( ) { } public FilterType ( ExpressionType expression ) { super ( expression ) ; } public FilterType ( Predicate predicate ) { super ( predicate ) ; } @ Override public String toString ( ) { return "Filter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "filter" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1
package org . apache . camel . component . jcr ; import javax . jcr . LoginException ; import javax . jcr . Node ; import javax . jcr . RepositoryException ; import javax . jcr . Session ; import javax . jcr . Value ; import org . apache . camel . Exchange ; import org . apache . camel . TypeConverter ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . DefaultProducer ; public class JcrProducer extends DefaultProducer < DefaultExchange > { public JcrProducer ( JcrEndpoint jcrEndpoint ) throws LoginException , RepositoryException { super ( jcrEndpoint ) ; } public void process ( Exchange exchange ) throws Exception { Session session = openSession ( ) ; try { Node base = getBaseNode ( session ) ; Node node = base . addNode ( getNodeName ( exchange ) ) ; TypeConverter converter = exchange . getContext ( ) . getTypeConverter ( ) ; for ( String key : exchange . getProperties ( ) . keySet ( ) ) { Value value = converter . convertTo ( Value . class , exchange . getProperty ( key ) ) ; node . setProperty ( key , value ) ; } node . addMixin ( "mix:referenceable" ) ; session . save ( ) ; exchange . getOut ( ) . setBody ( node . getUUID ( ) ) ; } finally { if ( session != null && session . isLive ( ) ) { session . logout ( ) ; } } } private String getNodeName ( Exchange exchange ) { if ( exchange . getProperty ( JcrComponent . NODE_NAME ) != null ) { return exchange . getProperty ( JcrComponent . NODE_NAME ) . toString ( ) ; } return exchange . getExchangeId ( ) ; } private Node getBaseNode ( Session session ) throws Exception { Node baseNode = session . getRootNode ( ) ; for ( String node : getJcrEndpoint ( ) . getBase ( ) . split ( "/" ) ) { baseNode = baseNode . addNode ( node ) ; } return baseNode ; } protected Session openSession ( ) throws LoginException , RepositoryException { return getJcrEndpoint ( ) . getRepository ( ) . login ( getJcrEndpoint ( ) . getCredentials ( ) ) ; } private JcrEndpoint getJcrEndpoint ( ) { JcrEndpoint endpoint = ( JcrEndpoint ) getEndpoint ( ) ; return endpoint ; } } 	0
package org . apache . camel . component . seda ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . PollingConsumerSupport ; @ Deprecated public class ListPollingConsumer extends PollingConsumerSupport { private final List < Exchange > exchanges ; public ListPollingConsumer ( Endpoint endpoint , List < Exchange > exchanges ) { super ( endpoint ) ; this . exchanges = exchanges ; } public Exchange receive ( ) { return receiveNoWait ( ) ; } public Exchange receiveNoWait ( ) { if ( exchanges . isEmpty ( ) ) { return null ; } else { return exchanges . remove ( 0 ) ; } } public Exchange receive ( long timeout ) { return receiveNoWait ( ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	1
package org . apache . camel . processor . resequencer ; class ElementComparator < E > implements SequenceElementComparator < Element < E > > { private SequenceElementComparator < E > comparator ; public ElementComparator ( SequenceElementComparator < E > comparator ) { this . comparator = comparator ; } public boolean predecessor ( Element < E > o1 , Element < E > o2 ) { return comparator . predecessor ( o1 . getObject ( ) , o2 . getObject ( ) ) ; } public boolean successor ( Element < E > o1 , Element < E > o2 ) { return comparator . successor ( o1 . getObject ( ) , o2 . getObject ( ) ) ; } public int compare ( Element < E > o1 , Element < E > o2 ) { return comparator . compare ( o1 . getObject ( ) , o2 . getObject ( ) ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . LogFactory ; public class LoggingExceptionHandler implements ExceptionHandler { private final Logger logger ; public LoggingExceptionHandler ( Class ownerType ) { this ( new Logger ( LogFactory . getLog ( ownerType ) , LoggingLevel . ERROR ) ) ; } public LoggingExceptionHandler ( Logger logger ) { this . logger = logger ; } public void handleException ( Throwable exception ) { logger . log ( exception . getMessage ( ) , exception ) ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . ArrayList ; import java . util . List ; import java . util . ResourceBundle ; import java . util . logging . Level ; import java . util . logging . Logger ; import javax . wsdl . Definition ; import javax . xml . namespace . QName ; import org . w3c . dom . Element ; import org . apache . cxf . binding . soap . SoapMessage ; import org . apache . cxf . binding . soap . SoapVersion ; import org . apache . cxf . binding . soap . model . SoapBindingInfo ; import org . apache . cxf . binding . soap . model . SoapHeaderInfo ; import org . apache . cxf . common . i18n . BundleUtils ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . service . model . BindingInfo ; import org . apache . cxf . service . model . BindingMessageInfo ; import org . apache . cxf . service . model . MessagePartInfo ; import org . apache . cxf . service . model . OperationInfo ; import org . apache . cxf . wsdl11 . WSDLServiceBuilder ; public class SoapMessageOutInterceptor extends AbstractMessageOutInterceptor < SoapMessage > { private static final Logger LOG = LogUtils . getL7dLogger ( SoapMessageInInterceptor . class ) ; public SoapMessageOutInterceptor ( ) { super ( Phase . PREPARE_SEND ) ; addAfter ( DOMOutInterceptor . class . getName ( ) ) ; } protected Logger getLogger ( ) { return LOG ; } @ SuppressWarnings ( "unchecked" ) public void handleMessage ( SoapMessage message ) throws Fault { Element header = message . get ( Element . class ) ; List < Element > payload = message . get ( List . class ) ; Exchange exchange = message . getExchange ( ) ; BindingMessageInfo bmi = exchange . get ( BindingMessageInfo . class ) ; List < SoapHeaderInfo > bindingHdr = bmi . getExtensors ( SoapHeaderInfo . class ) ; if ( bindingHdr != null && ! bindingHdr . isEmpty ( ) ) { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "SoapMessageOutInterceptor BindingOperation header processing." ) ; } List < Element > headerList = new ArrayList < Element > ( ) ; List < Element > newPayload = new ArrayList < Element > ( payload ) ; for ( SoapHeaderInfo shi : bindingHdr ) { List < Element > tmpList = new ArrayList < Element > ( ) ; MessagePartInfo mpi = shi . getPart ( ) ; QName hdrName = mpi . getConcreteName ( ) ; for ( Element el : payload ) { QName elName = new QName ( el . getNamespaceURI ( ) , el . getLocalName ( ) ) ; if ( elName . equals ( hdrName ) ) { newPayload . remove ( el ) ; tmpList . add ( el ) ; } } if ( tmpList . size ( ) > 1 ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "MULTIPLE_HDR_PARTS" , LOG , hdrName ) ) ; } headerList . addAll ( tmpList ) ; } if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "DOMOutInterceptor Copy Payload parts to SOAPHeaders" ) ; } if ( headerList . size ( ) != 0 ) { SoapVersion version = ( ( SoapMessage ) message ) . getVersion ( ) ; header = createElement ( version . getHeader ( ) , headerList ) ; } payload = newPayload ; } if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "SoapMessageOutInterceptor binding operation style processing." ) ; } SoapBindingInfo soapBinding = ( SoapBindingInfo ) exchange . get ( BindingInfo . class ) ; String style = soapBinding . getStyle ( bmi . getBindingOperation ( ) . getOperationInfo ( ) ) ; if ( "rpc" . equals ( style ) ) { OperationInfo oi = bmi . getBindingOperation ( ) . getOperationInfo ( ) ; Endpoint ep = exchange . get ( Endpoint . class ) ; Definition def = ep . getService ( ) . getServiceInfos ( ) . get ( 0 ) . getProperty ( WSDLServiceBuilder . WSDL_DEFINITION , Definition . class ) ; String prefix = def . getPrefix ( oi . getName ( ) . getNamespaceURI ( ) ) ; if ( "" . equals ( prefix ) ) { prefix = "tns" ; } QName opName = null ; boolean isClient = isRequestor ( message ) ; if ( isClient ) { opName = new QName ( oi . getName ( ) . getNamespaceURI ( ) , oi . getName ( ) . getLocalPart ( ) , prefix ) ; } else { opName = new QName ( oi . getName ( ) . getNamespaceURI ( ) , oi . getName ( ) . getLocalPart ( ) + "Response" , prefix ) ; } Element opEl = createElement ( opName , payload ) ; payload = new ArrayList < Element > ( ) ; payload . add ( opEl ) ; } message . put ( List . class , payload ) ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class FileComponent extends DefaultComponent < FileExchange > { public static final String HEADER_FILE_NAME = "org.apache.camel.file.name" ; public static final String HEADER_FILE_NAME_PRODUCED = "org.apache.camel.file.name.produced" ; public FileComponent ( ) { } public FileComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < FileExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { File file = new File ( remaining ) ; FileEndpoint result = new FileEndpoint ( file , uri , this ) ; setProperties ( result , parameters ) ; return result ; } } 	1
package org . apache . camel . language . juel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "el" ) public @ interface EL { String value ( ) ; } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "expression" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LanguageExpression extends ExpressionType { @ XmlAttribute private String language ; public LanguageExpression ( ) { } public LanguageExpression ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . component . jetty ; import java . io . IOException ; import java . io . InputStream ; import java . util . Iterator ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Producer ; import org . apache . camel . component . http . HttpBinding ; import org . apache . camel . component . http . HttpEndpoint ; import org . apache . camel . component . http . HttpExchange ; import org . apache . camel . impl . DefaultProducer ; import org . mortbay . io . Buffer ; import org . mortbay . jetty . HttpFields ; import org . mortbay . jetty . HttpFields . Field ; import org . mortbay . jetty . HttpMethods ; import org . mortbay . jetty . HttpURI ; import org . mortbay . jetty . client . HttpClient ; import org . mortbay . jetty . client . HttpExchange . ContentExchange ; public class JettyHttpProducer extends DefaultProducer < HttpExchange > implements Producer < HttpExchange > , AsyncProcessor { private final class CamelContentExchange extends ContentExchange { private final AsyncCallback callback ; private final Exchange exchange ; private HttpFields responseFields ; private CamelContentExchange ( Exchange exchange , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; responseFields = new HttpFields ( ) ; } protected void onResponseComplete ( ) throws IOException { super . onRequestComplete ( ) ; try { Message out = exchange . getOut ( true ) ; out . setBody ( getResponseContent ( ) ) ; for ( Iterator i = responseFields . getFields ( ) ; i . hasNext ( ) ; ) { Field field = ( Field ) i . next ( ) ; out . setHeader ( field . getName ( ) , field . getValue ( ) ) ; } } catch ( Throwable e ) { exchange . setException ( e ) ; } callback . done ( false ) ; } public HttpFields getResponseFields ( ) { return responseFields ; } protected void onResponsetHeader ( Buffer name , Buffer value ) throws IOException { responseFields . add ( name , value ) ; } } private HttpClient httpClient ; private String address ; public JettyHttpProducer ( HttpEndpoint endpoint ) { super ( endpoint ) ; httpClient = ( ( JettyHttpComponent ) endpoint . getComponent ( ) ) . getHttpClient ( ) ; address = endpoint . getHttpUri ( ) . toString ( ) ; HttpURI uri = new HttpURI ( address ) ; if ( uri . getCompletePath ( ) == null ) { address += "/" ; } } public void process ( Exchange exchange ) throws Exception { final CountDownLatch latch = new CountDownLatch ( 1 ) ; process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { latch . countDown ( ) ; } } ) ; latch . await ( ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { ContentExchange jettyExchange = new CamelContentExchange ( exchange , callback ) ; jettyExchange . setURL ( address ) ; Message in = exchange . getIn ( ) ; InputStream is = in . getBody ( InputStream . class ) ; if ( is != null ) { jettyExchange . setMethod ( HttpMethods . POST ) ; jettyExchange . setRequestContentSource ( is ) ; } else { Buffer buffer = in . getBody ( Buffer . class ) ; if ( buffer != null ) { jettyExchange . setMethod ( HttpMethods . POST ) ; jettyExchange . setRequestContent ( buffer ) ; } else { jettyExchange . setMethod ( HttpMethods . GET ) ; } } HttpBinding binding = ( ( HttpEndpoint ) getEndpoint ( ) ) . getBinding ( ) ; for ( String name : in . getHeaders ( ) . keySet ( ) ) { String value = in . getHeader ( name , String . class ) ; if ( "Content-Type" . equals ( name ) ) { jettyExchange . setRequestContentType ( value ) ; } else if ( binding . shouldHeaderBePropagated ( name , value ) ) { jettyExchange . addRequestHeader ( name , value ) ; } } try { httpClient . send ( jettyExchange ) ; } catch ( IOException e ) { exchange . setException ( e ) ; return true ; } return false ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class Tracer implements InterceptStrategy { private TraceFormatter formatter = new TraceFormatter ( ) ; public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; return new TraceInterceptor ( processorType , target , formatter ) ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . language . groovy ; import groovy . lang . GroovyClassLoader ; import groovy . lang . Script ; import org . apache . camel . spi . Language ; public class GroovyLanguage implements Language { public static GroovyExpression groovy ( String expression ) { return new GroovyLanguage ( ) . createExpression ( expression ) ; } public GroovyExpression createPredicate ( String expression ) { return createExpression ( expression ) ; } public GroovyExpression createExpression ( String expression ) { Class < Script > scriptType = parseExpression ( expression ) ; return new GroovyExpression ( scriptType , expression ) ; } protected Class < Script > parseExpression ( String expression ) { return new GroovyClassLoader ( ) . parseClass ( expression ) ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class JMXExchange extends DefaultExchange { public JMXExchange ( CamelContext camelContext , ExchangePattern pattern , Notification notification ) { super ( camelContext , pattern ) ; setIn ( new JMXMessage ( notification ) ) ; } } 	1
package org . apache . camel . component . jpa ; import java . util . Map ; import javax . persistence . EntityManagerFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . util . ObjectHelper ; public class JpaComponent extends DefaultComponent < Exchange > { private EntityManagerFactory entityManagerFactory ; public Component resolveComponent ( CamelContext container , String uri ) throws Exception { return null ; } public EntityManagerFactory getEntityManagerFactory ( ) { return entityManagerFactory ; } public void setEntityManagerFactory ( EntityManagerFactory entityManagerFactory ) { this . entityManagerFactory = entityManagerFactory ; } @ Override protected Endpoint < Exchange > createEndpoint ( String uri , String path , Map options ) throws Exception { JpaEndpoint endpoint = new JpaEndpoint ( uri , this ) ; if ( path != null ) { Class < ? > type = ObjectHelper . loadClass ( path ) ; if ( type != null ) { endpoint . setEntityType ( type ) ; } } return endpoint ; } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . language . bean . BeanExpression ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "methodCall" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MethodCallExpression extends ExpressionType { @ XmlAttribute ( required = false ) private String bean ; @ XmlAttribute ( required = false ) private String method ; public MethodCallExpression ( ) { } public MethodCallExpression ( String beanName ) { super ( beanName ) ; } public MethodCallExpression ( String beanName , String method ) { super ( beanName ) ; this . method = method ; } public String getLanguage ( ) { return "bean" ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Override public Expression createExpression ( RouteContext routeContext ) { return new BeanExpression ( beanName ( ) , getMethod ( ) ) ; } @ Override public Predicate < Exchange > createPredicate ( RouteContext routeContext ) { return new BeanExpression < Exchange > ( beanName ( ) , getMethod ( ) ) ; } protected String beanName ( ) { if ( bean != null ) { return bean ; } return getExpression ( ) ; } } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlEnum ; @ XmlEnum ( String . class ) public enum ArtixDSContentType { Default , Auto , Binary , Text , Java , Xml , Sax , TagValuePair } 	0
package org . apache . camel . util ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import org . w3c . dom . NodeList ; public final class CollectionHelper { private CollectionHelper ( ) { } public static Integer size ( Object value ) { if ( value != null ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . size ( ) ; } else if ( value instanceof Map ) { Map map = ( Map ) value ; return map . size ( ) ; } else if ( value instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) value ; return array . length ; } else if ( value . getClass ( ) . isArray ( ) ) { return Array . getLength ( value ) ; } else if ( value instanceof NodeList ) { NodeList nodeList = ( NodeList ) value ; return nodeList . getLength ( ) ; } } return null ; } public static void appendValue ( Map map , Object key , Object value ) { Object oldValue = map . get ( key ) ; if ( oldValue != null ) { List list ; if ( oldValue instanceof List ) { list = ( List ) oldValue ; } else { list = new ArrayList ( ) ; list . add ( oldValue ) ; } list . add ( value ) ; } else { map . put ( key , value ) ; } } } 	1
package org . apache . camel . component . cxf ; import java . util . Map ; import javax . wsdl . Definition ; import javax . wsdl . factory . WSDLFactory ; import javax . wsdl . xml . WSDLReader ; import javax . xml . namespace . QName ; import org . apache . camel . CamelContext ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . cxf . Bus ; import org . apache . cxf . BusFactory ; import org . apache . cxf . helpers . DOMUtils ; import org . springframework . core . io . Resource ; import org . springframework . util . Assert ; public class CxfSoapEndpoint implements Endpoint { private final Endpoint endpoint ; private Resource wsdl ; private String serviceClass ; private org . w3c . dom . Document description ; private Definition definition ; private QName serviceName ; private QName endpointName ; private Bus bus ; public CxfSoapEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } protected Endpoint getInnerEndpoint ( ) { return endpoint ; } public boolean isSingleton ( ) { return endpoint . isSingleton ( ) ; } public String getEndpointUri ( ) { return endpoint . getEndpointUri ( ) ; } public Exchange createExchange ( ) { return endpoint . createExchange ( ) ; } public Exchange createExchange ( ExchangePattern pattern ) { return endpoint . createExchange ( pattern ) ; } public Exchange createExchange ( Exchange exchange ) { return endpoint . createExchange ( exchange ) ; } public CamelContext getCamelContext ( ) { return endpoint . getCamelContext ( ) ; } public Producer createProducer ( ) throws Exception { return new CxfSoapProducer ( this ) ; } public Consumer createConsumer ( Processor processor ) throws Exception { return new CxfSoapConsumer ( this , processor ) ; } public PollingConsumer createPollingConsumer ( ) throws Exception { throw new UnsupportedOperationException ( ) ; } public void configureProperties ( Map options ) { } public Resource getWsdl ( ) { return wsdl ; } public void setWsdl ( Resource wsdl ) { this . wsdl = wsdl ; } public void setServiceClass ( String serviceClass ) { this . serviceClass = serviceClass ; } public String getServiceClass ( ) { return serviceClass ; } public void setServiceName ( String serviceName ) { this . serviceName = QName . valueOf ( serviceName ) ; } public void setEndpointName ( String endpointName ) { this . endpointName = QName . valueOf ( endpointName ) ; } public QName getEndpointName ( ) { return endpointName ; } public void init ( ) throws Exception { Assert . notNull ( wsdl , "soap.wsdl parameter must be set on the uri" ) ; if ( serviceName == null ) { description = DOMUtils . readXml ( wsdl . getInputStream ( ) ) ; WSDLFactory wsdlFactory = WSDLFactory . newInstance ( ) ; WSDLReader reader = wsdlFactory . newWSDLReader ( ) ; reader . setFeature ( "javax.wsdl.verbose" , false ) ; definition = reader . readWSDL ( wsdl . getURL ( ) . toString ( ) , description ) ; serviceName = ( QName ) definition . getServices ( ) . keySet ( ) . iterator ( ) . next ( ) ; } } protected Bus getBus ( ) { if ( bus == null ) { bus = BusFactory . newInstance ( ) . createBus ( ) ; } return bus ; } public Definition getDefinition ( ) { return definition ; } public QName getServiceName ( ) { return serviceName ; } public void setCamelContext ( CamelContext context ) { endpoint . setCamelContext ( context ) ; } @ Deprecated public CamelContext getContext ( ) { return getCamelContext ( ) ; } @ Deprecated public void setContext ( CamelContext context ) { setCamelContext ( context ) ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setBody" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetBodyType extends ExpressionNode { public SetBodyType ( ) { } public SetBodyType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "SetBody[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setBody" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; return ProcessorBuilder . setBody ( expr ) ; } } 	1
package org . apache . camel . component . jmx ; import java . util . Map ; import javax . management . MBeanServer ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class JMXComponent extends DefaultComponent < JMXExchange > { private MBeanServer mbeanServer ; public JMXComponent ( ) { } public JMXComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < JMXExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { JMXEndpoint result = new JMXEndpoint ( remaining , this ) ; setProperties ( result , parameters ) ; result . setMbeanServer ( getMbeanServer ( ) ) ; return result ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	0
package org . apache . camel . processor . exceptionpolicy ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . model . ExceptionType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultExceptionPolicyStrategy implements ExceptionPolicyStrategy { private static final transient Log LOG = LogFactory . getLog ( DefaultExceptionPolicyStrategy . class ) ; public ExceptionType getExceptionPolicy ( Map < Class , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finding best suited exception policy for thrown exception " + exception . getClass ( ) . getName ( ) ) ; } int targetLevel = getInheritanceLevel ( exception . getClass ( ) ) ; ExceptionType candidate = null ; int candidateDiff = Integer . MAX_VALUE ; Set < Map . Entry < Class , ExceptionType > > entries = exceptionPolicices . entrySet ( ) ; for ( Map . Entry < Class , ExceptionType > entry : entries ) { Class clazz = entry . getKey ( ) ; ExceptionType type = entry . getValue ( ) ; if ( clazz . isInstance ( exception ) ) { if ( clazz . equals ( exception . getClass ( ) ) ) { candidate = type ; break ; } int level = getInheritanceLevel ( clazz ) ; int diff = targetLevel - level ; if ( diff < candidateDiff ) { candidate = type ; candidateDiff = diff ; } } } if ( LOG . isDebugEnabled ( ) ) { if ( candidate != null ) { LOG . debug ( "Using " + candidate + " as the exception policy" ) ; } else { LOG . debug ( "No candidate found to be used as exception policy" ) ; } } return candidate ; } private static int getInheritanceLevel ( Class clazz ) { if ( clazz == null || "java.lang.Object" . equals ( clazz . getName ( ) ) ) { return 0 ; } return 1 + getInheritanceLevel ( clazz . getSuperclass ( ) ) ; } } 	1
package org . apache . camel ; public class ExpectedBodyTypeException extends RuntimeCamelException { private final Exchange exchange ; private final Class expectedBodyType ; public ExpectedBodyTypeException ( Exchange exchange , Class expectedBodyType ) { super ( "Could not extract IN message body as type: " + expectedBodyType + " body is: " + exchange . getIn ( ) . getBody ( ) ) ; this . exchange = exchange ; this . expectedBodyType = expectedBodyType ; } public Exchange getExchange ( ) { return exchange ; } public Class getExpectedBodyType ( ) { return expectedBodyType ; } } 	0
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URLDecoder ; import java . net . URLEncoder ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class URISupport { public static class CompositeData { public String host ; String scheme ; String path ; URI components [ ] ; Map parameters ; String fragment ; public URI [ ] getComponents ( ) { return components ; } public String getFragment ( ) { return fragment ; } public Map getParameters ( ) { return parameters ; } public String getScheme ( ) { return scheme ; } public String getPath ( ) { return path ; } public String getHost ( ) { return host ; } public URI toURI ( ) throws URISyntaxException { StringBuffer sb = new StringBuffer ( ) ; if ( scheme != null ) { sb . append ( scheme ) ; sb . append ( ':' ) ; } if ( host != null && host . length ( ) != 0 ) { sb . append ( host ) ; } else { sb . append ( '(' ) ; for ( int i = 0 ; i < components . length ; i ++ ) { if ( i != 0 ) { sb . append ( ',' ) ; } sb . append ( components [ i ] . toString ( ) ) ; } sb . append ( ')' ) ; } if ( path != null ) { sb . append ( '/' ) ; sb . append ( path ) ; } if ( ! parameters . isEmpty ( ) ) { sb . append ( "?" ) ; sb . append ( createQueryString ( parameters ) ) ; } if ( fragment != null ) { sb . append ( "#" ) ; sb . append ( fragment ) ; } return new URI ( sb . toString ( ) ) ; } } public static Map parseQuery ( String uri ) throws URISyntaxException { try { Map rc = new HashMap ( ) ; if ( uri != null ) { String [ ] parameters = uri . split ( "&" ) ; for ( String parameter : parameters ) { int p = parameter . indexOf ( "=" ) ; if ( p >= 0 ) { String name = URLDecoder . decode ( parameter . substring ( 0 , p ) , "UTF-8" ) ; String value = URLDecoder . decode ( parameter . substring ( p + 1 ) , "UTF-8" ) ; rc . put ( name , value ) ; } else { rc . put ( parameter , null ) ; } } } return rc ; } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static Map parseParameters ( URI uri ) throws URISyntaxException { String query = uri . getQuery ( ) ; if ( query == null ) { String schemeSpecificPart = uri . getSchemeSpecificPart ( ) ; int idx = schemeSpecificPart . lastIndexOf ( '?' ) ; if ( idx < 0 ) { return Collections . EMPTY_MAP ; } else { query = schemeSpecificPart . substring ( idx + 1 ) ; } } else { query = stripPrefix ( query , "?" ) ; } return parseQuery ( query ) ; } public static URI removeQuery ( URI uri ) throws URISyntaxException { return createURIWithQuery ( uri , null ) ; } public static URI createURIWithQuery ( URI uri , String query ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getUserInfo ( ) , uri . getHost ( ) , uri . getPort ( ) , uri . getPath ( ) , query , uri . getFragment ( ) ) ; } public static CompositeData parseComposite ( URI uri ) throws URISyntaxException { CompositeData rc = new CompositeData ( ) ; rc . scheme = uri . getScheme ( ) ; String ssp = stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) . trim ( ) ; parseComposite ( uri , rc , ssp ) ; rc . fragment = uri . getFragment ( ) ; return rc ; } private static void parseComposite ( URI uri , CompositeData rc , String ssp ) throws URISyntaxException { String componentString ; String params ; if ( ! checkParenthesis ( ssp ) ) { throw new URISyntaxException ( uri . toString ( ) , "Not a matching number of '(' and ')' parenthesis" ) ; } int p ; int intialParen = ssp . indexOf ( "(" ) ; if ( intialParen == 0 ) { rc . host = ssp . substring ( 0 , intialParen ) ; p = rc . host . indexOf ( "/" ) ; if ( p >= 0 ) { rc . path = rc . host . substring ( p ) ; rc . host = rc . host . substring ( 0 , p ) ; } p = ssp . lastIndexOf ( ")" ) ; componentString = ssp . substring ( intialParen + 1 , p ) ; params = ssp . substring ( p + 1 ) . trim ( ) ; } else { componentString = ssp ; params = "" ; } String components [ ] = splitComponents ( componentString ) ; rc . components = new URI [ components . length ] ; for ( int i = 0 ; i < components . length ; i ++ ) { rc . components [ i ] = new URI ( components [ i ] . trim ( ) ) ; } p = params . indexOf ( "?" ) ; if ( p >= 0 ) { if ( p > 0 ) { rc . path = stripPrefix ( params . substring ( 0 , p ) , "/" ) ; } rc . parameters = parseQuery ( params . substring ( p + 1 ) ) ; } else { if ( params . length ( ) > 0 ) { rc . path = stripPrefix ( params , "/" ) ; } rc . parameters = Collections . EMPTY_MAP ; } } private static String [ ] splitComponents ( String str ) { ArrayList l = new ArrayList ( ) ; int last = 0 ; int depth = 0 ; char chars [ ] = str . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { switch ( chars [ i ] ) { case '(' : depth ++ ; break ; case ')' : depth -- ; break ; case ',' : if ( depth == 0 ) { String s = str . substring ( last , i ) ; l . add ( s ) ; last = i + 1 ; } break ; default : } } String s = str . substring ( last ) ; if ( s . length ( ) != 0 ) { l . add ( s ) ; } String rc [ ] = new String [ l . size ( ) ] ; l . toArray ( rc ) ; return rc ; } public static String stripPrefix ( String value , String prefix ) { if ( value . startsWith ( prefix ) ) { return value . substring ( prefix . length ( ) ) ; } return value ; } public static URI stripScheme ( URI uri ) throws URISyntaxException { return new URI ( stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) ) ; } public static String createQueryString ( Map options ) throws URISyntaxException { try { if ( options . size ( ) > 0 ) { StringBuffer rc = new StringBuffer ( ) ; boolean first = true ; for ( Iterator iter = options . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { if ( first ) { first = false ; } else { rc . append ( "&" ) ; } String key = ( String ) iter . next ( ) ; String value = ( String ) options . get ( key ) ; rc . append ( URLEncoder . encode ( key , "UTF-8" ) ) ; rc . append ( "=" ) ; rc . append ( URLEncoder . encode ( value , "UTF-8" ) ) ; } return rc . toString ( ) ; } else { return "" ; } } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static URI createRemainingURI ( URI originalURI , Map params ) throws URISyntaxException { String s = createQueryString ( params ) ; if ( s . length ( ) == 0 ) { s = null ; } return createURIWithQuery ( originalURI , s ) ; } public static URI changeScheme ( URI bindAddr , String scheme ) throws URISyntaxException { return new URI ( scheme , bindAddr . getUserInfo ( ) , bindAddr . getHost ( ) , bindAddr . getPort ( ) , bindAddr . getPath ( ) , bindAddr . getQuery ( ) , bindAddr . getFragment ( ) ) ; } public static boolean checkParenthesis ( String str ) { boolean result = true ; if ( str != null ) { int open = 0 ; int closed = 0 ; int i = 0 ; while ( ( i = str . indexOf ( '(' , i ) ) >= 0 ) { i ++ ; open ++ ; } i = 0 ; while ( ( i = str . indexOf ( ')' , i ) ) >= 0 ) { i ++ ; closed ++ ; } result = open == closed ; } return result ; } @ Deprecated public int indexOfParenthesisMatch ( String str ) { int result = - 1 ; return result ; } } 	1
package org . apache . camel . model . config ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . Resequencer ; @ XmlRootElement @ XmlAccessorType ( XmlAccessType . FIELD ) public class BatchResequencerConfig { @ XmlAttribute private Integer batchSize ; @ XmlAttribute private Long batchTimeout ; public BatchResequencerConfig ( ) { this ( 100 , 1000L ) ; } public BatchResequencerConfig ( int batchSize , long batchTimeout ) { this . batchSize = batchSize ; this . batchTimeout = batchTimeout ; } public static BatchResequencerConfig getDefault ( ) { return new BatchResequencerConfig ( ) ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BatchProcessor extends ServiceSupport implements Runnable , Processor { public static final long DEFAULT_BATCH_TIMEOUT = 1000L ; public static final int DEFAULT_BATCH_SIZE = 100 ; private static final transient Log LOG = LogFactory . getLog ( BatchProcessor . class ) ; private Endpoint endpoint ; private Processor processor ; private Collection < Exchange > collection ; private long batchTimeout = DEFAULT_BATCH_TIMEOUT ; private int batchSize = DEFAULT_BATCH_SIZE ; private PollingConsumer consumer ; private ExceptionHandler exceptionHandler ; public BatchProcessor ( Endpoint endpoint , Processor processor , Collection < Exchange > collection ) { this . endpoint = endpoint ; this . processor = processor ; this . collection = collection ; } @ Override public String toString ( ) { return "BatchProcessor[to: " + processor + "]" ; } public void run ( ) { LOG . debug ( "Starting thread for " + this ) ; while ( isRunAllowed ( ) ) { try { processBatch ( ) ; } catch ( Exception e ) { getExceptionHandler ( ) . handleException ( e ) ; } } collection . clear ( ) ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public Endpoint getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } protected synchronized void processBatch ( ) throws Exception { long start = System . currentTimeMillis ( ) ; long end = start + batchTimeout ; for ( int i = 0 ; ! isBatchCompleted ( i ) ; i ++ ) { long timeout = end - System . currentTimeMillis ( ) ; if ( timeout < 0L ) { LOG . debug ( "batch timeout expired at batch index:" + i ) ; break ; } Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { LOG . debug ( "receive with timeout: " + timeout + " expired at batch index:" + i ) ; break ; } collection . add ( exchange ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finished batch size: " + batchSize + " timeout: " + batchTimeout + " so sending set: " + collection ) ; } Iterator < Exchange > iter = collection . iterator ( ) ; while ( iter . hasNext ( ) ) { Exchange exchange = iter . next ( ) ; iter . remove ( ) ; processExchange ( exchange ) ; } } protected boolean isBatchCompleted ( int index ) { return index >= batchSize ; } protected void processExchange ( Exchange exchange ) throws Exception { processor . process ( exchange ) ; } protected void doStart ( ) throws Exception { consumer = endpoint . createPollingConsumer ( ) ; ServiceHelper . startServices ( processor , consumer ) ; Thread thread = new Thread ( this , this + " Polling Thread" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( consumer , processor ) ; collection . clear ( ) ; } protected Collection < Exchange > getCollection ( ) { return collection ; } public void process ( Exchange exchange ) throws Exception { } } 	1
package org . apache . camel . language ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "bean" ) public @ interface Bean { String value ( ) ; } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . BlockingQueue ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class QueueComponent extends SedaComponent { private static final transient Log LOG = LogFactory . getLog ( QueueComponent . class ) ; public QueueComponent ( ) { LOG . warn ( "This component has been deprecated; please use the seda: URI format instead of queue:" ) ; } } 	1
package org . apache . camel ; public class InvalidTypeException extends CamelExchangeException { private final Object value ; private final Class < ? > type ; public InvalidTypeException ( Exchange exchange , Object value , Class < ? > type ) { super ( "Could not convert value: " + value + " to type: " + type . getName ( ) + NoSuchPropertyException . valueDescription ( value ) , exchange ) ; this . value = value ; this . type = type ; } public Object getValue ( ) { return value ; } public Class < ? > getType ( ) { return type ; } } 	0
package org . apache . camel ; import java . util . Map ; public interface Endpoint < E extends Exchange > { boolean isSingleton ( ) ; String getEndpointUri ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( Exchange exchange ) ; CamelContext getCamelContext ( ) ; Producer < E > createProducer ( ) throws Exception ; Consumer < E > createConsumer ( Processor processor ) throws Exception ; PollingConsumer < E > createPollingConsumer ( ) throws Exception ; void configureProperties ( Map options ) ; void setCamelContext ( CamelContext context ) ; @ Deprecated CamelContext getContext ( ) ; @ Deprecated void setContext ( CamelContext context ) ; } 	1
package org . apache . camel . component . jms . requestor ; import java . util . concurrent . Callable ; import java . util . concurrent . FutureTask ; import javax . jms . JMSException ; import javax . jms . Message ; public class FutureHandler extends FutureTask < Message > implements ReplyHandler { private static final Callable < Message > EMPTY_CALLABLE = new Callable < Message > ( ) { public Message call ( ) throws Exception { return null ; } } ; public FutureHandler ( ) { super ( EMPTY_CALLABLE ) ; } public synchronized void set ( Message result ) { super . set ( result ) ; } public boolean handle ( Message message ) throws JMSException { set ( message ) ; return true ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "recipientList" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RecipientListType extends ExpressionNode { public RecipientListType ( ) { } public RecipientListType ( ExpressionType expression ) { super ( expression ) ; } public RecipientListType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "RecipientList[ " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "recipientList" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new RecipientList ( getExpression ( ) . createExpression ( routeContext ) ) ; } } 	1
package org . apache . camel ; public class InvalidPayloadRuntimeException extends RuntimeExchangeException { private final Class < ? > type ; public InvalidPayloadRuntimeException ( Exchange exchange , Class < ? > type ) { super ( "No in body available of type: " + type . getName ( ) + NoSuchPropertyException . valueDescription ( exchange . getIn ( ) . getBody ( ) ) , exchange ) ; this . type = type ; } public Class < ? > getType ( ) { return type ; } } 	0
package org . apache . camel . model ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "convertBodyTo" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ConvertBodyType extends ProcessorType < ProcessorType > { @ XmlAttribute private String type ; @ XmlTransient private Class typeClass ; public ConvertBodyType ( ) { } public ConvertBodyType ( String type ) { setType ( type ) ; } public ConvertBodyType ( Class typeClass ) { setTypeClass ( typeClass ) ; } @ Override public String toString ( ) { return "convertBodyTo[ " + getType ( ) + "]" ; } @ Override public String getShortName ( ) { return "convertBodyTo" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new ConvertBodyProcessor ( getTypeClass ( ) ) ; } @ Override public List < ProcessorType < ? > > getOutputs ( ) { return Collections . EMPTY_LIST ; } protected Class createTypeClass ( ) { return ObjectHelper . loadClass ( getType ( ) , getClass ( ) . getClassLoader ( ) ) ; } public void setType ( String type ) { this . type = type ; } public String getType ( ) { return type ; } public void setTypeClass ( Class typeClass ) { this . typeClass = typeClass ; } public Class getTypeClass ( ) { if ( typeClass == null ) { setTypeClass ( createTypeClass ( ) ) ; } return typeClass ; } } 	1
package org . apache . camel . component . jms ; import java . util . List ; import org . apache . camel . Exchange ; import org . springframework . jms . core . JmsOperations ; public interface QueueBrowseStrategy { List < Exchange > browse ( JmsOperations template , String queue , JmsQueueEndpoint endpoint ) ; } 	0
package org . apache . camel ; import java . util . Map ; public interface ProducerTemplate < E extends Exchange > extends Service { E send ( E exchange ) ; E send ( Processor processor ) ; Object sendBody ( Object body ) ; Object sendBodyAndHeader ( Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) ; E send ( String endpointUri , E exchange ) ; E send ( String endpointUri , Processor processor ) ; E send ( String endpointUri , ExchangePattern pattern , Processor processor ) ; E send ( String endpointUri , Processor processor , AsyncCallback callback ) ; E send ( Endpoint < E > endpoint , E exchange ) ; E send ( Endpoint < E > endpoint , Processor processor ) ; E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) ; E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) ; Object sendBody ( Endpoint < E > endpoint , Object body ) ; Object sendBody ( String endpointUri , Object body ) ; Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) ; Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) ; Object sendBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( String endpointUri , Object body , Map < String , Object > headers ) ; Object sendBodyAndHeaders ( Endpoint endpoint , Object body , Map < String , Object > headers ) ; E request ( Endpoint < E > endpoint , Processor processor ) ; Object requestBody ( Endpoint < E > endpoint , Object body ) ; Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) ; E request ( String endpointUri , Processor processor ) ; Object requestBody ( String endpointUri , Object body ) ; Object requestBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; } 	1
package org . apache . camel . component . cxf . invoker ; import org . apache . camel . component . cxf . DataFormat ; public final class InvokingContextFactory { private InvokingContextFactory ( ) { } public static InvokingContext createContext ( DataFormat dataFormat ) { if ( dataFormat == DataFormat . MESSAGE ) { return new RawMessageInvokingContext ( ) ; } if ( dataFormat == DataFormat . PAYLOAD ) { return new PayloadInvokingContext ( ) ; } return new RawMessageInvokingContext ( ) ; } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . FileOutputStream ; import java . io . InputStream ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( FileProducer . class ) ; private FileEndpoint endpoint ; public FileProducer ( FileEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public FileEndpoint getEndpoint ( ) { return ( FileEndpoint ) super . getEndpoint ( ) ; } public void process ( Exchange exchange ) throws Exception { FileExchange fileExchange = endpoint . createExchange ( exchange ) ; process ( fileExchange ) ; ExchangeHelper . copyResults ( exchange , fileExchange ) ; } public void process ( FileExchange exchange ) throws Exception { InputStream in = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; File file = createFileName ( exchange . getIn ( ) ) ; buildDirectory ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to: " + file + " from exchange: " + exchange ) ; } FileChannel fc = null ; try { if ( getEndpoint ( ) . isAppend ( ) ) { fc = new RandomAccessFile ( file , "rw" ) . getChannel ( ) ; fc . position ( fc . size ( ) ) ; } else { fc = new FileOutputStream ( file ) . getChannel ( ) ; } int size = getEndpoint ( ) . getBufferSize ( ) ; byte [ ] buffer = new byte [ size ] ; ByteBuffer byteBuffer = ByteBuffer . wrap ( buffer ) ; while ( true ) { int count = in . read ( buffer ) ; if ( count <= 0 ) { break ; } else if ( count < size ) { byteBuffer = ByteBuffer . wrap ( buffer , 0 , count ) ; fc . write ( byteBuffer ) ; break ; } else { fc . write ( byteBuffer ) ; byteBuffer . clear ( ) ; } } } finally { ObjectHelper . close ( in , file . getName ( ) , LOG ) ; ObjectHelper . close ( fc , file . getName ( ) , LOG ) ; } } protected File createFileName ( Message message ) { File answer ; String name = null ; if ( ! endpoint . isIgnoreFileNameHeader ( ) ) { name = message . getHeader ( FileComponent . HEADER_FILE_NAME , String . class ) ; } File endpointFile = endpoint . getFile ( ) ; if ( endpointFile . isDirectory ( ) ) { if ( name != null ) { answer = new File ( endpointFile , name ) ; if ( answer . isDirectory ( ) ) { answer = new File ( answer , endpoint . getGeneratedFileName ( message ) ) ; } } else { answer = new File ( endpointFile , endpoint . getGeneratedFileName ( message ) ) ; } } else { if ( name == null ) { answer = endpointFile ; } else { answer = new File ( endpointFile , name ) ; } } message . setHeader ( FileComponent . HEADER_FILE_NAME_PRODUCED , answer . getAbsolutePath ( ) ) ; return answer ; } private void buildDirectory ( File file ) { String dirName = file . getAbsolutePath ( ) ; int index = dirName . lastIndexOf ( File . separatorChar ) ; if ( index > 0 ) { dirName = dirName . substring ( 0 , index ) ; File dir = new File ( dirName ) ; dir . mkdirs ( ) ; } } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . CamelContext ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "routeBuilderRef" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RouteBuilderRef extends IdentifiedType { @ XmlAttribute ( required = true ) private String ref ; public RouteBuilderRef ( ) { } public RouteBuilderRef ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { return "RouteBuilderRef[" + getRef ( ) + "]" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public RouteBuilder createRouteBuilder ( CamelContext camelContext ) { ObjectHelper . notNull ( camelContext , "camelContext" ) ; ObjectHelper . notNull ( ref , "ref" ) ; RouteBuilder builder = CamelContextHelper . lookup ( camelContext , ref , RouteBuilder . class ) ; return builder != null ? builder : CamelContextHelper . newInstance ( camelContext , RouteBuilder . class ) ; } } 	0
package org . apache . camel . language . simple ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . language . IllegalSyntaxException ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class SimpleLanguage implements Language { public static Expression simple ( String expression ) { SimpleLanguage language = new SimpleLanguage ( ) ; return language . createExpression ( expression ) ; } public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { if ( expression . indexOf ( "${" ) >= 0 ) { return createComplexExpression ( expression ) ; } return createSimpleExpression ( expression ) ; } protected Expression < Exchange > createComplexExpression ( String expression ) { List < Expression > results = new ArrayList < Expression > ( ) ; int pivot = 0 ; int size = expression . length ( ) ; while ( pivot < size ) { int idx = expression . indexOf ( "${" , pivot ) ; if ( idx < 0 ) { results . add ( createConstantExpression ( expression , pivot , size ) ) ; break ; } else { if ( pivot < idx ) { results . add ( createConstantExpression ( expression , pivot , idx ) ) ; } pivot = idx + 2 ; int endIdx = expression . indexOf ( "}" , pivot ) ; if ( endIdx < 0 ) { throw new IllegalArgumentException ( "Expecting } but found end of string for simple expression: " + expression ) ; } String simpleText = expression . substring ( pivot , endIdx ) ; Expression simpleExpression = createSimpleExpression ( simpleText ) ; results . add ( simpleExpression ) ; pivot = endIdx + 1 ; } } return ExpressionBuilder . concatExpression ( results , expression ) ; } protected Expression createConstantExpression ( String expression , int start , int end ) { return ExpressionBuilder . constantExpression ( expression . substring ( start , end ) ) ; } protected Expression < Exchange > createSimpleExpression ( String expression ) { if ( ObjectHelper . isEqualToAny ( expression , "body" , "in.body" ) ) { return ExpressionBuilder . bodyExpression ( ) ; } else if ( ObjectHelper . equal ( expression , "out.body" ) ) { return ExpressionBuilder . outBodyExpression ( ) ; } String remainder = ifStartsWithReturnRemainder ( "in.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "header." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "headers." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "in.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . headerExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "out.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "out.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . outHeaderExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "property." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "sys." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } throw new IllegalSyntaxException ( this , expression ) ; } protected String ifStartsWithReturnRemainder ( String prefix , String text ) { if ( text . startsWith ( prefix ) ) { String remainder = text . substring ( prefix . length ( ) ) ; if ( remainder . length ( ) > 0 ) { return remainder ; } } return null ; } } 	1
package org . apache . camel . component . file . strategy ; import java . util . Properties ; import org . apache . camel . component . file . FileProcessStrategy ; public final class FileProcessStrategyFactory { private FileProcessStrategyFactory ( ) { } public static FileProcessStrategy createFileProcessStrategy ( Properties params ) { boolean isDelete = params . getProperty ( "delete" ) != null ; boolean isLock = params . getProperty ( "lock" ) != null ; String moveNamePrefix = params . getProperty ( "moveNamePrefix" ) ; String moveNamePostfix = params . getProperty ( "moveNamePostfix" ) ; if ( params . getProperty ( "noop" ) != null ) { return new NoOpFileProcessStrategy ( isLock ) ; } else if ( moveNamePostfix != null || moveNamePrefix != null ) { if ( isDelete ) { throw new IllegalArgumentException ( "You cannot set the deleteFiles property " + "and a moveFilenamePostfix or moveFilenamePrefix" ) ; } return new RenameFileProcessStrategy ( isLock , moveNamePrefix , moveNamePostfix ) ; } else if ( isDelete ) { return new DeleteFileProcessStrategy ( isLock ) ; } else { return new RenameFileProcessStrategy ( isLock ) ; } } } 	0
package org . apache . camel . component . file ; import java . io . File ; public interface FileProcessStrategy { boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; } 	1
package org . apache . camel . component . spring . integration . adapter . config ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . util . ObjectHelper ; import org . springframework . beans . factory . config . BeanDefinition ; import org . springframework . beans . factory . config . RuntimeBeanReference ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . AbstractSingleBeanDefinitionParser ; import org . springframework . beans . factory . xml . ParserContext ; import org . springframework . util . StringUtils ; public class AbstractCamelContextBeanDefinitionParaser extends AbstractSingleBeanDefinitionParser { private static final String DEFAULT_CAMEL_CONTEXT_NAME = "camelContext" ; private String getContextId ( String contextId ) { if ( ObjectHelper . isNullOrBlank ( contextId ) ) { return DEFAULT_CAMEL_CONTEXT_NAME ; } else { return contextId ; } } protected void mapToProperty ( BeanDefinitionBuilder bean , String propertyName , String val ) { if ( ID_ATTRIBUTE . equals ( propertyName ) ) { return ; } if ( StringUtils . hasText ( val ) ) { if ( val . startsWith ( "#" ) ) { bean . addPropertyReference ( propertyName , val . substring ( 1 ) ) ; } else { bean . addPropertyValue ( propertyName , val ) ; } } } protected void wireCamelContext ( BeanDefinitionBuilder bean , String camelContextId ) { bean . addPropertyReference ( "camelContext" , camelContextId ) ; } protected void parseAttributes ( Element element , ParserContext ctx , BeanDefinitionBuilder bean ) { NamedNodeMap atts = element . getAttributes ( ) ; for ( int i = 0 ; i < atts . getLength ( ) ; i ++ ) { Attr node = ( Attr ) atts . item ( i ) ; String val = node . getValue ( ) ; String name = node . getLocalName ( ) ; if ( name . equals ( "requestChannel" ) || name . equals ( "replyChannel" ) ) { bean . addPropertyReference ( name , val ) ; } else { mapToProperty ( bean , name , val ) ; } } } protected void parseCamelContext ( Element element , ParserContext ctx , BeanDefinitionBuilder bean ) { NodeList children = element . getChildNodes ( ) ; for ( int i = 0 ; i < children . getLength ( ) ; i ++ ) { Node n = children . item ( i ) ; if ( n . getNodeType ( ) == Node . ELEMENT_NODE ) { String name = n . getLocalName ( ) ; if ( "camelContext" . equals ( name ) ) { BeanDefinition bd = ctx . getDelegate ( ) . parseCustomElement ( ( Element ) n ) ; String contextId = ( String ) bd . getPropertyValues ( ) . getPropertyValue ( "id" ) . getValue ( ) ; wireCamelContext ( bean , getContextId ( contextId ) ) ; } else if ( "camelContextRef" . equals ( name ) ) { String contextId = n . getTextContent ( ) ; wireCamelContext ( bean , getContextId ( contextId ) ) ; } } } } protected void doParse ( Element element , ParserContext ctx , BeanDefinitionBuilder bean ) { parseAttributes ( element , ctx , bean ) ; parseCamelContext ( element , ctx , bean ) ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . MBeanServer ; import javax . management . Notification ; import javax . management . ObjectName ; import javax . management . monitor . CounterMonitor ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JMXEndpoint extends DefaultEndpoint < JMXExchange > { private static final transient Log LOG = LogFactory . getLog ( JMXEndpoint . class ) ; private String name ; private ObjectName ourName ; private String observedObjectName ; private String attributeName ; private long granularityPeriod = 5000 ; private Number threshold ; private Number offset ; private MBeanServer mbeanServer ; private CounterMonitor counterMonitor = new CounterMonitor ( ) ; protected JMXEndpoint ( String endpointUri , JMXComponent component ) { super ( endpointUri , component ) ; observedObjectName = endpointUri ; } public JMXEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < JMXExchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "Producer not supported" ) ; } public Consumer < JMXExchange > createConsumer ( Processor proc ) throws Exception { ObjectName observedName = new ObjectName ( observedObjectName ) ; if ( name == null ) { String type = observedName . getKeyProperty ( "type" ) ; type = type != null ? type : "UNKNOWN" ; name = mbeanServer . getDefaultDomain ( ) + ":type=CounterMonitor_" + type ; } JMXConsumer result = new JMXConsumer ( this , proc ) ; ourName = new ObjectName ( name ) ; counterMonitor . setNotify ( true ) ; counterMonitor . addObservedObject ( observedName ) ; counterMonitor . setObservedAttribute ( attributeName ) ; counterMonitor . setGranularityPeriod ( granularityPeriod ) ; counterMonitor . setDifferenceMode ( false ) ; counterMonitor . setInitThreshold ( threshold ) ; counterMonitor . setOffset ( offset ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Registering and adding notification listener for [" + counterMonitor + "] with name [" + ourName + "]" ) ; } mbeanServer . registerMBean ( counterMonitor , ourName ) ; mbeanServer . addNotificationListener ( ourName , result , null , new Object ( ) ) ; return result ; } public boolean isSingleton ( ) { return true ; } public JMXExchange createExchange ( Notification notification ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , notification ) ; } public JMXExchange createExchange ( ) { return new JMXExchange ( getCamelContext ( ) , getExchangePattern ( ) , null ) ; } public JMXExchange createExchange ( ExchangePattern pattern ) { return new JMXExchange ( getCamelContext ( ) , pattern , null ) ; } public String getAttributeName ( ) { return attributeName ; } public void setAttributeName ( String attributeName ) { this . attributeName = attributeName ; } public long getGranularityPeriod ( ) { return granularityPeriod ; } public void setGranularityPeriod ( long granularityPeriod ) { this . granularityPeriod = granularityPeriod ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Number getOffset ( ) { return offset ; } public void setOffset ( Number offset ) { this . offset = offset ; } public Number getThreshold ( ) { return threshold ; } public void setThreshold ( Number threshold ) { this . threshold = threshold ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	1
package org . apache . camel . component . irc ; import org . apache . camel . Exchange ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . schwering . irc . lib . IRCConnection ; import org . schwering . irc . lib . IRCEventListener ; public class IrcProducer extends DefaultProducer < IrcExchange > { public static final String [ ] COMMANDS = new String [ ] { "AWAY" , "INVITE" , "ISON" , "JOIN" , "KICK" , "LIST" , "NAMES" , "PRIVMSG" , "MODE" , "NICK" , "NOTICE" , "PART" , "PONG" , "QUIT" , "TOPIC" , "WHO" , "WHOIS" , "WHOWAS" , "USERHOST" } ; private static final transient Log LOG = LogFactory . getLog ( IrcProducer . class ) ; private IRCConnection connection ; private IrcEndpoint endpoint ; private IRCEventListener ircErrorLogger ; public IrcProducer ( IrcEndpoint endpoint , IRCConnection connection ) { super ( endpoint ) ; this . endpoint = endpoint ; this . connection = connection ; } public void process ( Exchange exchange ) throws Exception { try { final String msg = exchange . getIn ( ) . getBody ( String . class ) ; if ( isMessageACommand ( msg ) ) { connection . send ( msg ) ; } else { final String target = endpoint . getConfiguration ( ) . getTarget ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "sending to: " + target + " message: " + msg ) ; } connection . doPrivmsg ( target , msg ) ; } } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; ircErrorLogger = createIrcErrorLogger ( ) ; connection . addIRCEventListener ( ircErrorLogger ) ; final String target = endpoint . getConfiguration ( ) . getTarget ( ) ; LOG . debug ( "joining: " + target ) ; connection . doJoin ( target ) ; } @ Override protected void doStop ( ) throws Exception { super . doStop ( ) ; if ( connection != null ) { connection . removeIRCEventListener ( ircErrorLogger ) ; } } protected boolean isMessageACommand ( String msg ) { for ( String command : COMMANDS ) { if ( msg . startsWith ( command ) ) { return true ; } } return false ; } protected IRCEventListener createIrcErrorLogger ( ) { return new IrcErrorLogger ( LOG ) ; } } 	0
package org . apache . camel ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . Callable ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; public interface CamelContext extends Service { String getName ( ) ; void addComponent ( String componentName , Component component ) ; Component getComponent ( String componentName ) ; < T extends Component > T getComponent ( String name , Class < T > componentType ) ; Component removeComponent ( String componentName ) ; Component getOrCreateComponent ( String componentName , Callable < Component > factory ) ; Endpoint getEndpoint ( String uri ) ; < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) ; Collection < Endpoint > getSingletonEndpoints ( ) ; Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception ; Endpoint removeSingletonEndpoint ( String uri ) throws Exception ; List < RouteType > getRouteDefinitions ( ) ; List < Route > getRoutes ( ) ; void setRoutes ( List < Route > routes ) ; void addRoutes ( Collection < Route > routes ) throws Exception ; void addRoutes ( Routes builder ) throws Exception ; void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception ; ExchangeConverter getExchangeConverter ( ) ; TypeConverter getTypeConverter ( ) ; Registry getRegistry ( ) ; Injector getInjector ( ) ; LifecycleStrategy getLifecycleStrategy ( ) ; Language resolveLanguage ( String language ) ; < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; } 	1
package org . apache . camel . spi ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public interface Language { Predicate < Exchange > createPredicate ( String expression ) ; Expression < Exchange > createExpression ( String expression ) ; } 	0
package org . apache . camel . processor ; import java . util . concurrent . RejectedExecutionException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannel extends ErrorHandlerSupport implements AsyncProcessor { public static final String REDELIVERY_COUNTER = "org.apache.camel.RedeliveryCounter" ; public static final String REDELIVERED = "org.apache.camel.Redelivered" ; public static final String EXCEPTION_CAUSE_PROPERTY = "CamelCauseException" ; private class RedeliveryData { int redeliveryCounter ; long redeliveryDelay ; boolean sync = true ; RedeliveryPolicy currentRedeliveryPolicy = redeliveryPolicy ; Processor failureProcessor = deadLetter ; } private static final transient Log LOG = LogFactory . getLog ( DeadLetterChannel . class ) ; private static final String FAILURE_HANDLED_PROPERTY = DeadLetterChannel . class . getName ( ) + ".FAILURE_HANDLED" ; private Processor output ; private Processor deadLetter ; private AsyncProcessor outputAsync ; private RedeliveryPolicy redeliveryPolicy ; private Logger logger ; public DeadLetterChannel ( Processor output , Processor deadLetter ) { this ( output , deadLetter , new RedeliveryPolicy ( ) , DeadLetterChannel . createDefaultLogger ( ) , ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ) ; } public DeadLetterChannel ( Processor output , Processor deadLetter , RedeliveryPolicy redeliveryPolicy , Logger logger , ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . deadLetter = deadLetter ; this . output = output ; this . outputAsync = AsyncProcessorTypeConverter . convert ( output ) ; this . redeliveryPolicy = redeliveryPolicy ; this . logger = logger ; setExceptionPolicy ( exceptionPolicyStrategy ) ; } public static < E extends Exchange > Logger createDefaultLogger ( ) { return new Logger ( LOG , LoggingLevel . ERROR ) ; } @ Override public String toString ( ) { return "DeadLetterChannel[" + output + ", " + deadLetter + ", " + redeliveryPolicy + "]" ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { return process ( exchange , callback , new RedeliveryData ( ) ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { while ( true ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return data . sync ; } if ( exchange . isTransacted ( ) && exchange . getException ( ) != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Transacted Exchange, this DeadLetterChannel is bypassed: " + exchange ) ; } return data . sync ; } if ( exchange . getException ( ) != null ) { Throwable e = exchange . getException ( ) ; exchange . setException ( null ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". On delivery attempt: " + data . redeliveryCounter + " caught: " + e , e ) ; data . redeliveryCounter = incrementRedeliveryCounter ( exchange , e ) ; ExceptionType exceptionPolicy = getExceptionPolicy ( exchange , e ) ; if ( exceptionPolicy != null ) { data . currentRedeliveryPolicy = exceptionPolicy . createRedeliveryPolicy ( data . currentRedeliveryPolicy ) ; Processor processor = exceptionPolicy . getErrorHandler ( ) ; if ( processor != null ) { data . failureProcessor = processor ; } } } if ( ! data . currentRedeliveryPolicy . shouldRedeliver ( data . redeliveryCounter ) ) { setFailureHandled ( exchange , true ) ; AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( data . failureProcessor ) ; boolean sync = afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { restoreExceptionOnExchange ( exchange ) ; callback . done ( data . sync ) ; } } ) ; restoreExceptionOnExchange ( exchange ) ; logger . log ( "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". Handled by the failure processor: " + data . failureProcessor ) ; return sync ; } if ( data . redeliveryCounter > 0 ) { data . redeliveryDelay = data . currentRedeliveryPolicy . sleep ( data . redeliveryDelay ) ; } exchange . setProperty ( EXCEPTION_CAUSE_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; boolean sync = outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null ) { process ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; if ( ! sync ) { return false ; } if ( exchange . getException ( ) == null || isFailureHandled ( exchange ) ) { callback . done ( true ) ; return true ; } } } public static boolean isFailureHandled ( Exchange exchange ) { return exchange . getProperty ( FAILURE_HANDLED_PROPERTY ) != null ; } public static void setFailureHandled ( Exchange exchange , boolean isHandled ) { if ( isHandled ) { exchange . setProperty ( FAILURE_HANDLED_PROPERTY , exchange . getException ( ) ) ; exchange . setException ( null ) ; } else { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; exchange . removeProperty ( FAILURE_HANDLED_PROPERTY ) ; } } public static void restoreExceptionOnExchange ( Exchange exchange ) { exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public Processor getOutput ( ) { return output ; } public Processor getDeadLetter ( ) { return deadLetter ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } protected int incrementRedeliveryCounter ( Exchange exchange , Throwable e ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; int next = 1 ; if ( counter != null ) { next = counter + 1 ; } in . setHeader ( REDELIVERY_COUNTER , next ) ; in . setHeader ( REDELIVERED , Boolean . TRUE ) ; exchange . setException ( e ) ; return next ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output , deadLetter ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( deadLetter , output ) ; } } 	1
package org . apache . camel . component . cxf ; import org . apache . cxf . message . Exchange ; public interface MessageInvoker { void invoke ( Exchange exchange ) ; } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "onException" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExceptionType extends ProcessorType < ProcessorType > { @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElement ( name = "redeliveryPolicy" , required = false ) private RedeliveryPolicyType redeliveryPolicy ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; @ XmlTransient private Processor errorHandler ; public ExceptionType ( ) { } public ExceptionType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public ExceptionType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Exception[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { if ( redeliveryPolicy != null ) { return redeliveryPolicy . createRedeliveryPolicy ( parentPolicy ) ; } else if ( errorHandler != null ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; answer . setMaximumRedeliveries ( 0 ) ; return answer ; } return parentPolicy ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { errorHandler = routeContext . createProcessor ( this ) ; ErrorHandlerBuilder builder = routeContext . getRoute ( ) . getErrorHandlerBuilder ( ) ; builder . addErrorHandlers ( this ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public ExceptionType backOffMultiplier ( double backOffMultiplier ) { getOrCreateRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public ExceptionType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public ExceptionType collisionAvoidancePercent ( short collisionAvoidancePercent ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public ExceptionType initialRedeliveryDelay ( long initialRedeliveryDelay ) { getOrCreateRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public ExceptionType maximumRedeliveries ( int maximumRedeliveries ) { getOrCreateRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public ExceptionType useCollisionAvoidance ( ) { getOrCreateRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public ExceptionType useExponentialBackOff ( ) { getOrCreateRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } public Processor getErrorHandler ( ) { return errorHandler ; } public RedeliveryPolicyType getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicyType redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } protected RedeliveryPolicyType getOrCreateRedeliveryPolicy ( ) { if ( redeliveryPolicy == null ) { redeliveryPolicy = new RedeliveryPolicyType ( ) ; } return redeliveryPolicy ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1
package org . apache . camel . language ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . ANNOTATION_TYPE } ) public @ interface NamespacePrefix { String prefix ( ) ; String uri ( ) ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultExchangeFormatter ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . processor . interceptor . TraceInterceptor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Logger implements Processor { private Log log ; private LoggingLevel level ; private ExchangeFormatter formatter = DefaultExchangeFormatter . getInstance ( ) ; public Logger ( ) { this ( LogFactory . getLog ( Logger . class ) ) ; } public Logger ( Log log ) { this ( log , LoggingLevel . INFO ) ; } public Logger ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public Logger ( String logName ) { this ( LogFactory . getLog ( logName ) ) ; } public Logger ( String logName , LoggingLevel level ) { this ( LogFactory . getLog ( logName ) , level ) ; } public Logger ( Log log , ExchangeFormatter formatter ) { this ( log ) ; this . formatter = formatter ; } @ Override public String toString ( ) { return "Logger[" + log + "]" ; } public void process ( Exchange exchange ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void process ( Exchange exchange , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void log ( String message ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message ) ; } } public void log ( String message , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message , exception ) ; } } protected Object logMessage ( Exchange exchange ) { return formatter . format ( exchange ) ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public void setFormatter ( ExchangeFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . component . cxf . util ; import java . io . IOException ; import java . util . List ; import java . util . Set ; import org . apache . cxf . binding . AbstractBindingFactory ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . transport . Destination ; import org . apache . cxf . transport . DestinationFactory ; public class NullDestinationFactory implements DestinationFactory { public Destination getDestination ( EndpointInfo ei ) throws IOException { ei . setAddress ( "local://" + ei . getService ( ) . getName ( ) . toString ( ) + "/" + ei . getName ( ) . getLocalPart ( ) ) ; ei . getBinding ( ) . setProperty ( AbstractBindingFactory . DATABINDING_DISABLED , Boolean . TRUE ) ; return new NullDestination ( ) ; } public List < String > getTransportIds ( ) { return null ; } public Set < String > getUriPrefixes ( ) { return null ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TransformProcessor extends DelegateProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( TransformProcessor . class ) ; private Expression expression ; public TransformProcessor ( Expression expression ) { this . expression = expression ; } public TransformProcessor ( Expression expression , Processor childProcessor ) { super ( childProcessor ) ; this . expression = expression ; } public void process ( Exchange exchange ) throws Exception { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; exchange . getOut ( ) . getHeaders ( ) . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; super . process ( exchange ) ; } @ Override public String toString ( ) { return "transform(" + expression + ")" ; } } 	1
package org . apache . camel . component . jpa ; import java . util . Iterator ; import javax . persistence . EntityManager ; import javax . persistence . PersistenceException ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . DefaultProducer ; import org . springframework . orm . jpa . JpaCallback ; public class JpaProducer extends DefaultProducer < Exchange > { private final TransactionStrategy template ; private final JpaEndpoint endpoint ; private final Expression < Exchange > expression ; public JpaProducer ( JpaEndpoint endpoint , Expression < Exchange > expression ) { super ( endpoint ) ; this . endpoint = endpoint ; this . expression = expression ; this . template = endpoint . createTransactionStrategy ( ) ; } public void process ( Exchange exchange ) { final Object values = expression . evaluate ( exchange ) ; if ( values != null ) { template . execute ( new JpaCallback ( ) { public Object doInJpa ( EntityManager entityManager ) throws PersistenceException { Iterator iter = ObjectConverter . iterator ( values ) ; while ( iter . hasNext ( ) ) { Object value = iter . next ( ) ; entityManager . persist ( value ) ; } if ( endpoint . isFlushOnSend ( ) ) { entityManager . flush ( ) ; } return null ; } } ) ; } exchange . setProperty ( "CamelJpaValue" , values ) ; } } 	0
package org . apache . camel . processor ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . TreeSet ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ExpressionListComparator ; public class Resequencer extends BatchProcessor { public Resequencer ( Endpoint endpoint , Processor processor , Expression < Exchange > expression ) { this ( endpoint , processor , createSet ( expression ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , List < Expression > expressions ) { this ( endpoint , processor , createSet ( expressions ) ) ; } public Resequencer ( Endpoint endpoint , Processor processor , Set < Exchange > collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Resequencer[to: " + getProcessor ( ) + "]" ; } protected static Set < Exchange > createSet ( Expression < Exchange > expression ) { return createSet ( new ExpressionComparator < Exchange > ( expression ) ) ; } protected static Set < Exchange > createSet ( List < Expression > expressions ) { if ( expressions . size ( ) == 1 ) { return createSet ( expressions . get ( 0 ) ) ; } return createSet ( new ExpressionListComparator ( expressions ) ) ; } protected static Set < Exchange > createSet ( Comparator < ? super Exchange > comparator ) { return new TreeSet < Exchange > ( comparator ) ; } } 	1
package org . apache . camel . component . mail ; import java . net . URI ; import java . util . HashMap ; import java . util . Map ; import java . util . Properties ; import javax . mail . Authenticator ; import javax . mail . Message ; import javax . mail . PasswordAuthentication ; import javax . mail . Session ; import org . apache . camel . component . mail . security . DummySSLSocketFactory ; import org . springframework . mail . javamail . JavaMailSenderImpl ; public class MailConfiguration { public static final String DEFAULT_FOLDER_NAME = "INBOX" ; public static final String DEFAULT_FROM = "camel@localhost" ; public static final long DEFAULT_CONNECTION_TIMEOUT = 30000L ; private Properties javaMailProperties ; private String protocol ; private String host ; private int port = - 1 ; private String username ; private String password ; private Session session ; private String defaultEncoding ; private String from = DEFAULT_FROM ; private String folderName = DEFAULT_FOLDER_NAME ; private boolean deleteProcessedMessages = true ; private boolean ignoreUriScheme ; private boolean processOnlyUnseenMessages ; private Map < Message . RecipientType , String > recipients = new HashMap < Message . RecipientType , String > ( ) ; private int fetchSize = - 1 ; private boolean debugMode ; private long connectionTimeout = DEFAULT_CONNECTION_TIMEOUT ; private boolean dummyTrustManager ; public MailConfiguration ( ) { } public void configure ( URI uri ) { String value = uri . getHost ( ) ; if ( value != null ) { setHost ( value ) ; } if ( ! isIgnoreUriScheme ( ) ) { String scheme = uri . getScheme ( ) ; if ( scheme != null ) { setProtocol ( scheme ) ; } } String userInfo = uri . getUserInfo ( ) ; if ( userInfo != null ) { setUsername ( userInfo ) ; String address = userInfo + "@" + host ; recipients . put ( Message . RecipientType . TO , address ) ; } int port = uri . getPort ( ) ; if ( port >= 0 ) { setPort ( port ) ; } else { setPort ( MailUtils . getDefaultPortForProtocol ( uri . getScheme ( ) ) ) ; } } protected JavaMailSenderImpl createJavaMailSender ( ) { JavaMailSenderImpl answer = new JavaMailSenderImpl ( ) ; answer . getSession ( ) . setDebug ( debugMode ) ; if ( javaMailProperties != null ) { answer . setJavaMailProperties ( javaMailProperties ) ; } else { answer . setJavaMailProperties ( createJavaMailProperties ( ) ) ; } if ( defaultEncoding != null ) { answer . setDefaultEncoding ( defaultEncoding ) ; } if ( host != null ) { answer . setHost ( host ) ; } if ( port >= 0 ) { answer . setPort ( port ) ; } if ( password != null ) { answer . setPassword ( password ) ; } if ( protocol != null ) { answer . setProtocol ( protocol ) ; } if ( session != null ) { answer . setSession ( session ) ; } else { Session session = Session . getDefaultInstance ( answer . getJavaMailProperties ( ) , getAuthenticator ( ) ) ; answer . setSession ( session ) ; } if ( username != null ) { answer . setUsername ( username ) ; } return answer ; } private Properties createJavaMailProperties ( ) { Properties properties = ( Properties ) System . getProperties ( ) . clone ( ) ; properties . put ( "mail." + protocol + ".connectiontimeout" , connectionTimeout ) ; properties . put ( "mail." + protocol + ".timeout" , connectionTimeout ) ; properties . put ( "mail." + protocol + ".host" , host ) ; properties . put ( "mail." + protocol + ".port" , "" + port ) ; properties . put ( "mail." + protocol + ".user" , username ) ; properties . put ( "mail." + protocol + ".rsetbeforequit" , "true" ) ; properties . put ( "mail." + protocol + ".auth" , "true" ) ; properties . put ( "mail.transport.protocol" , protocol ) ; properties . put ( "mail.store.protocol" , protocol ) ; properties . put ( "mail.host" , host ) ; properties . put ( "mail.user" , username ) ; if ( debugMode ) { properties . put ( "javax.net.debug" , "all" ) ; } if ( dummyTrustManager && isSecureProtocol ( ) ) { properties . put ( "mail." + protocol + ".socketFactory.class" , DummySSLSocketFactory . class . getName ( ) ) ; properties . put ( "mail." + protocol + ".socketFactory.fallback" , "false" ) ; properties . put ( "mail." + protocol + ".socketFactory.port" , "" + port ) ; } return properties ; } public boolean isSecureProtocol ( ) { return this . protocol . equalsIgnoreCase ( "smtps" ) || this . protocol . equalsIgnoreCase ( "pop3s" ) || this . protocol . equalsIgnoreCase ( "imaps" ) ; } public Authenticator getAuthenticator ( ) { return new Authenticator ( ) { protected PasswordAuthentication getPasswordAuthentication ( ) { return new PasswordAuthentication ( getUsername ( ) , getPassword ( ) ) ; } } ; } public String getMailStoreLogInformation ( ) { String ssl = "" ; if ( isSecureProtocol ( ) ) { ssl = "(SSL enabled" + ( dummyTrustManager ? " using DummyTrustManager)" : ")" ) ; } return protocol + "//" + host + ":" + port + ssl + ", folder=" + folderName ; } public String getDefaultEncoding ( ) { return defaultEncoding ; } public void setDefaultEncoding ( String defaultEncoding ) { this . defaultEncoding = defaultEncoding ; } public String getHost ( ) { return host ; } public void setHost ( String host ) { this . host = host ; } public Properties getJavaMailProperties ( ) { return javaMailProperties ; } public void setJavaMailProperties ( Properties javaMailProperties ) { this . javaMailProperties = javaMailProperties ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public int getPort ( ) { return port ; } public void setPort ( int port ) { this . port = port ; } public String getProtocol ( ) { return protocol ; } public void setProtocol ( String protocol ) { this . protocol = protocol ; } public Session getSession ( ) { return session ; } public void setSession ( Session session ) { this . session = session ; } public String getUsername ( ) { return username ; } public void setUsername ( String username ) { this . username = username ; if ( ! recipients . containsKey ( Message . RecipientType . TO ) ) { String address = username + "@" + host ; recipients . put ( Message . RecipientType . TO , address ) ; } } public String getDestination ( ) { return recipients . get ( Message . RecipientType . TO ) ; } public void setDestination ( String destination ) { recipients . put ( Message . RecipientType . TO , destination ) ; } public String getFrom ( ) { return from ; } public void setFrom ( String from ) { this . from = from ; } public boolean isDeleteProcessedMessages ( ) { return deleteProcessedMessages ; } public void setDeleteProcessedMessages ( boolean deleteProcessedMessages ) { this . deleteProcessedMessages = deleteProcessedMessages ; } public String getFolderName ( ) { return folderName ; } public void setFolderName ( String folderName ) { this . folderName = folderName ; } public boolean isIgnoreUriScheme ( ) { return ignoreUriScheme ; } public void setIgnoreUriScheme ( boolean ignoreUriScheme ) { this . ignoreUriScheme = ignoreUriScheme ; } public boolean isProcessOnlyUnseenMessages ( ) { return processOnlyUnseenMessages ; } public void setProcessOnlyUnseenMessages ( boolean processOnlyUnseenMessages ) { this . processOnlyUnseenMessages = processOnlyUnseenMessages ; } public void setTo ( String address ) { recipients . put ( Message . RecipientType . TO , address ) ; } public void setCC ( String address ) { recipients . put ( Message . RecipientType . CC , address ) ; } public void setBCC ( String address ) { recipients . put ( Message . RecipientType . BCC , address ) ; } public Map < Message . RecipientType , String > getRecipients ( ) { return recipients ; } public int getFetchSize ( ) { return fetchSize ; } public void setFetchSize ( int fetchSize ) { this . fetchSize = fetchSize ; } public boolean isDebugMode ( ) { return debugMode ; } public void setDebugMode ( boolean debugMode ) { this . debugMode = debugMode ; } public long getConnectionTimeout ( ) { return connectionTimeout ; } public void setConnectionTimeout ( long connectionTimeout ) { this . connectionTimeout = connectionTimeout ; } public boolean isDummyTrustManager ( ) { return dummyTrustManager ; } public void setDummyTrustManager ( boolean dummyTrustManager ) { this . dummyTrustManager = dummyTrustManager ; } } 	0
package org . apache . camel . view ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . AggregatorType ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FilterType ; import org . apache . camel . model . FromType ; import org . apache . camel . model . OtherwiseType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RecipientListType ; import org . apache . camel . model . ResequencerType ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . model . SplitterType ; import org . apache . camel . model . ToType ; import org . apache . camel . model . WhenType ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; public class NodeData { public String id ; public String image ; public String label ; public String shape ; public String edgeLabel ; public String tooltop ; public String nodeType ; public boolean nodeWritten ; public String url ; public List < ProcessorType > outputs ; public String association = "property" ; private final String imagePrefix ; public NodeData ( String id , Object node , String imagePrefix ) { this . id = id ; this . imagePrefix = imagePrefix ; if ( node instanceof ProcessorType ) { ProcessorType processorType = ( ProcessorType ) node ; this . edgeLabel = processorType . getLabel ( ) ; } if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; this . tooltop = fromType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; this . tooltop = toType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof FilterType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "Message Filter" ; } else if ( node instanceof WhenType ) { this . image = imagePrefix + "MessageFilterIcon.png" ; this . nodeType = "When Filter" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; } else if ( node instanceof OtherwiseType ) { this . nodeType = "Otherwise" ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; this . tooltop = "Otherwise" ; } else if ( node instanceof ChoiceType ) { this . image = imagePrefix + "ContentBasedRouterIcon.png" ; this . nodeType = "Content Based Router" ; this . label = "" ; this . edgeLabel = "" ; ChoiceType choice = ( ChoiceType ) node ; List < ProcessorType > outputs = new ArrayList < ProcessorType > ( choice . getWhenClauses ( ) ) ; if ( choice . getOtherwise ( ) != null ) { outputs . add ( choice . getOtherwise ( ) ) ; } this . outputs = outputs ; } else if ( node instanceof RecipientListType ) { this . image = imagePrefix + "RecipientListIcon.png" ; this . nodeType = "Recipient List" ; } else if ( node instanceof RoutingSlipType ) { this . image = imagePrefix + "RoutingTableIcon.png" ; this . nodeType = "Routing Slip" ; this . url = "http://activemq.apache.org/camel/routing-slip.html" ; this . tooltop = ( ( RoutingSlipType ) node ) . getHeaderName ( ) ; } else if ( node instanceof SplitterType ) { this . image = imagePrefix + "SplitterIcon.png" ; this . nodeType = "Splitter" ; } else if ( node instanceof AggregatorType ) { this . image = imagePrefix + "AggregatorIcon.png" ; this . nodeType = "Aggregator" ; } else if ( node instanceof ResequencerType ) { this . image = imagePrefix + "ResequencerIcon.png" ; this . nodeType = "Resequencer" ; } if ( isNullOrBlank ( this . nodeType ) && node != null ) { String name = node . getClass ( ) . getName ( ) ; int idx = name . lastIndexOf ( '.' ) ; if ( idx > 0 ) { name = name . substring ( idx + 1 ) ; } if ( name . endsWith ( "Type" ) ) { name = name . substring ( 0 , name . length ( ) - 4 ) ; } this . nodeType = insertSpacesBetweenCamelCase ( name ) ; } if ( this . label == null ) { if ( isNullOrBlank ( this . image ) ) { this . label = this . nodeType ; this . shape = "box" ; } else if ( isNotNullAndNonEmpty ( this . edgeLabel ) ) { this . label = "" ; } else { this . label = node . toString ( ) ; } } if ( isNullOrBlank ( this . tooltop ) ) { if ( isNotNullAndNonEmpty ( this . nodeType ) ) { String description = isNotNullAndNonEmpty ( this . edgeLabel ) ? this . edgeLabel : this . label ; this . tooltop = this . nodeType + ": " + description ; } else { this . tooltop = this . label ; } } if ( isNullOrBlank ( this . url ) && isNotNullAndNonEmpty ( this . nodeType ) ) { this . url = "http://activemq.apache.org/camel/" + this . nodeType . toLowerCase ( ) . replace ( ' ' , '-' ) + ".html" ; } if ( node instanceof ProcessorType && this . outputs == null ) { ProcessorType processorType = ( ProcessorType ) node ; this . outputs = processorType . getOutputs ( ) ; } } protected String removeQueryString ( String text ) { int idx = text . indexOf ( "?" ) ; if ( idx <= 0 ) { return text ; } else { return text . substring ( 0 , idx ) ; } } public static String insertSpacesBetweenCamelCase ( String name ) { boolean lastCharacterLowerCase = false ; StringBuffer buffer = new StringBuffer ( ) ; int i = 0 ; for ( int size = name . length ( ) ; i < size ; i ++ ) { char ch = name . charAt ( i ) ; if ( Character . isUpperCase ( ch ) ) { if ( lastCharacterLowerCase ) { buffer . append ( ' ' ) ; } lastCharacterLowerCase = false ; } else { lastCharacterLowerCase = true ; } buffer . append ( ch ) ; } return buffer . toString ( ) ; } } 	1
package org . apache . camel . util ; import java . util . Comparator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public class ExpressionListComparator implements Comparator < Exchange > { private final List < Expression > expressions ; public ExpressionListComparator ( List < Expression > expressions ) { this . expressions = expressions ; } public int compare ( Exchange e1 , Exchange e2 ) { for ( Expression expression : expressions ) { Object o1 = expression . evaluate ( e1 ) ; Object o2 = expression . evaluate ( e2 ) ; int answer = ObjectHelper . compare ( o1 , o2 ) ; if ( answer != 0 ) { return answer ; } } return 0 ; } } 	0
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . impl . DefaultMessage ; public class JMXMessage extends DefaultMessage { private Notification notification ; public JMXMessage ( ) { this ( null ) ; } public JMXMessage ( Notification notification ) { this . notification = notification ; } @ Override public String toString ( ) { return "JMXMessage: " + notification ; } @ Override public JMXExchange getExchange ( ) { return ( JMXExchange ) super . getExchange ( ) ; } @ Override public JMXMessage newInstance ( ) { return new JMXMessage ( ) ; } public Notification getNotification ( ) { return notification ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "php" ) public class PhpExpression extends ExpressionType { public PhpExpression ( ) { } public PhpExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "php" ; } } 	0
package org . apache . camel . converter ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Converter ; import org . apache . camel . util . ObjectHelper ; @ Converter public final class ObjectConverter { private ObjectConverter ( ) { } public static boolean isCollection ( Object value ) { return value instanceof Collection || ( value != null && value . getClass ( ) . isArray ( ) ) ; } @ SuppressWarnings ( "unchecked" ) @ Converter @ Deprecated public static Iterator iterator ( Object value ) { return ObjectHelper . createIterator ( value ) ; } @ Converter public static boolean toBool ( Object value ) { Boolean answer = toBoolean ( value ) ; if ( answer != null ) { return answer . booleanValue ( ) ; } return false ; } @ Converter public static Boolean toBoolean ( Object value ) { return ObjectHelper . toBoolean ( value ) ; } @ Converter public static Boolean toBoolean ( Boolean value ) { if ( value != null ) { return value ; } return Boolean . FALSE ; } @ Converter public static Byte toByte ( Object value ) { if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Byte . valueOf ( number . byteValue ( ) ) ; } else if ( value instanceof String ) { return Byte . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static byte [ ] toByteArray ( String value ) { return value . getBytes ( ) ; } @ Converter public static char [ ] toCharArray ( String value ) { return value . toCharArray ( ) ; } @ Converter public static String fromCharArray ( char [ ] value ) { return new String ( value ) ; } @ Converter public static Short toShort ( Object value ) { if ( value instanceof Short ) { return ( Short ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Short . valueOf ( number . shortValue ( ) ) ; } else if ( value instanceof String ) { return Short . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Integer toInteger ( Object value ) { if ( value instanceof Integer ) { return ( Integer ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Integer . valueOf ( number . intValue ( ) ) ; } else if ( value instanceof String ) { return Integer . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Long toLong ( Object value ) { if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Long . valueOf ( number . longValue ( ) ) ; } else if ( value instanceof String ) { return Long . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Float toFloat ( Object value ) { if ( value instanceof Float ) { return ( Float ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Float . valueOf ( number . floatValue ( ) ) ; } else if ( value instanceof String ) { return Float . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Double toDouble ( Object value ) { if ( value instanceof Double ) { return ( Double ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Double . valueOf ( number . doubleValue ( ) ) ; } else if ( value instanceof String ) { return Double . valueOf ( ( String ) value ) ; } else { return null ; } } } 	1
package org . apache . camel ; public class FailedToCreateProducerException extends RuntimeCamelException { private final Endpoint endpoint ; public FailedToCreateProducerException ( Endpoint endpoint , Throwable cause ) { super ( "Failed to create Producer for endpoint: " + endpoint + ". Reason: " + cause , cause ) ; this . endpoint = endpoint ; } public Endpoint getEndpoint ( ) { return endpoint ; } } 	0
package org . apache . camel . processor . resequencer ; import java . util . Queue ; import java . util . Timer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResequencerEngine < E > implements TimeoutHandler { private static final transient Log LOG = LogFactory . getLog ( ResequencerEngine . class ) ; private long timeout ; private int capacity ; private Queue < E > outQueue ; private Element < E > lastDelivered ; private Sequence < Element < E > > sequence ; private Timer timer ; public ResequencerEngine ( SequenceElementComparator < E > comparator ) { this ( comparator , Integer . MAX_VALUE ) ; } public ResequencerEngine ( SequenceElementComparator < E > comparator , int capacity ) { this . timer = new Timer ( "Resequencer Timer" ) ; this . sequence = createSequence ( comparator ) ; this . capacity = capacity ; this . timeout = 2000L ; this . lastDelivered = null ; } public void stop ( ) { this . timer . cancel ( ) ; } public Queue < E > getOutQueue ( ) { return outQueue ; } public void setOutQueue ( Queue < E > outQueue ) { this . outQueue = outQueue ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public synchronized void timeout ( Timeout timout ) { try { while ( deliver ( ) ) { } } catch ( RuntimeException e ) { LOG . error ( "error during delivery" , e ) ; } } public synchronized void add ( E o ) { if ( sequence . size ( ) >= capacity ) { throw new IllegalStateException ( "maximum capacity is reached" ) ; } insert ( o ) ; } public synchronized void put ( E o ) throws InterruptedException { if ( sequence . size ( ) >= capacity ) { wait ( ) ; } insert ( o ) ; } E getLastDelivered ( ) { if ( lastDelivered == null ) { return null ; } return lastDelivered . getObject ( ) ; } void setLastDelivered ( E o ) { lastDelivered = new Element < E > ( o ) ; } private void insert ( E o ) { Element < E > element = new Element < E > ( o ) ; sequence . add ( element ) ; Element < E > successor = sequence . successor ( element ) ; if ( successor != null ) { successor . cancel ( ) ; } if ( successorOfLastDelivered ( element ) ) { } else if ( sequence . predecessor ( element ) != null ) { } else { Timeout t = defineTimeout ( ) ; element . schedule ( t ) ; } while ( deliver ( ) ) { } } private boolean deliver ( ) { if ( sequence . size ( ) == 0 ) { return false ; } Element < E > element = sequence . first ( ) ; if ( element . scheduled ( ) ) { return false ; } sequence . remove ( element ) ; lastDelivered = element ; notify ( ) ; outQueue . add ( element . getObject ( ) ) ; return true ; } private boolean successorOfLastDelivered ( Element < E > element ) { if ( lastDelivered == null ) { return false ; } if ( sequence . comparator ( ) . successor ( element , lastDelivered ) ) { return true ; } return false ; } private Timeout defineTimeout ( ) { Timeout result = new Timeout ( timer , timeout ) ; result . addTimeoutHandler ( this ) ; return result ; } private static < E > Sequence < Element < E > > createSequence ( SequenceElementComparator < E > comparator ) { return new Sequence < Element < E > > ( new ElementComparator < E > ( comparator ) ) ; } } 	1
