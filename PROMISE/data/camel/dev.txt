package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import javax . xml . namespace . QName ; import javax . xml . xpath . XPathVariableResolver ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . builder . xml . Namespaces . ENVIRONMENT_VARIABLES ; import static org . apache . camel . builder . xml . Namespaces . EXCHANGE_PROPERTY ; import static org . apache . camel . builder . xml . Namespaces . IN_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . OUT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . SYSTEM_PROPERTIES_NAMESPACE ; public class MessageVariableResolver implements XPathVariableResolver { private static final transient Log LOG = LogFactory . getLog ( MessageVariableResolver . class ) ; private Exchange exchange ; private Map < String , Object > variables = new HashMap < String , Object > ( ) ; public Exchange getExchange ( ) { return exchange ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public Object resolveVariable ( QName name ) { String uri = name . getNamespaceURI ( ) ; String localPart = name . getLocalPart ( ) ; Object answer = null ; Message in = exchange . getIn ( ) ; if ( uri == null || uri . length ( ) == 0 ) { answer = variables . get ( localPart ) ; if ( answer == null ) { Message message = in ; if ( message != null ) { answer = message . getHeader ( localPart ) ; } if ( answer == null ) { answer = exchange . getProperty ( localPart ) ; } } } else if ( uri . equals ( SYSTEM_PROPERTIES_NAMESPACE ) ) { try { answer = System . getProperty ( localPart ) ; } catch ( Exception e ) { LOG . debug ( "Security exception evaluating system property: " + localPart + ". Reason: " + e , e ) ; } } else if ( uri . equals ( ENVIRONMENT_VARIABLES ) ) { answer = System . getenv ( ) . get ( localPart ) ; } else if ( uri . equals ( EXCHANGE_PROPERTY ) ) { answer = exchange . getProperty ( localPart ) ; } else if ( uri . equals ( IN_NAMESPACE ) ) { answer = in . getHeader ( localPart ) ; if ( answer == null && localPart . equals ( "body" ) ) { answer = in . getBody ( ) ; } } else if ( uri . equals ( OUT_NAMESPACE ) ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { answer = out . getHeader ( localPart ) ; if ( answer == null && localPart . equals ( "body" ) ) { answer = out . getBody ( ) ; } } } if ( answer == null ) { return Void . class ; } else { return answer ; } } public void addVariable ( String localPart , Object value ) { variables . put ( localPart , value ) ; } } 	0
package org . apache . camel . util ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Properties ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . spi . Injector ; public class FactoryFinder { protected final ConcurrentHashMap < String , Class > classMap = new ConcurrentHashMap < String , Class > ( ) ; private final String path ; public FactoryFinder ( ) { this ( "META-INF/services/org/apache/camel/" ) ; } public FactoryFinder ( String path ) { this . path = path ; } public Object newInstance ( String key ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { return newInstance ( key , ( String ) null ) ; } public Object newInstance ( String key , String propertyPrefix ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { Class clazz = findClass ( key , propertyPrefix ) ; return clazz . newInstance ( ) ; } public Object newInstance ( String key , Injector injector ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , ( String ) null ) ; } public Object newInstance ( String key , Injector injector , String propertyPrefix ) throws IOException , ClassNotFoundException { Class < ? > type = findClass ( key , propertyPrefix ) ; return injector . newInstance ( type ) ; } public < T > T newInstance ( String key , Injector injector , Class < T > expectedType ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , null , expectedType ) ; } public < T > T newInstance ( String key , Injector injector , String propertyPrefix , Class < T > expectedType ) throws IOException , ClassNotFoundException { Class < ? > type = findClass ( key , propertyPrefix ) ; Object value = injector . newInstance ( type ) ; if ( expectedType . isInstance ( value ) ) { return expectedType . cast ( value ) ; } else { throw new ClassCastException ( "Not instanceof " + expectedType . getName ( ) + " value: " + value ) ; } } public < T > List < T > newInstances ( String key , Injector injector , Class < T > type ) throws IOException , ClassNotFoundException { List < Class > list = findClasses ( key ) ; List < T > answer = new ArrayList < T > ( list . size ( ) ) ; answer . add ( newInstance ( key , injector , type ) ) ; return answer ; } public Class findClass ( String key ) throws ClassNotFoundException , IOException { return findClass ( key , null ) ; } public Class findClass ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { if ( propertyPrefix == null ) { propertyPrefix = "" ; } Class clazz = ( Class ) classMap . get ( propertyPrefix + key ) ; if ( clazz == null ) { clazz = newInstance ( doFindFactoryProperties ( key ) , propertyPrefix ) ; if ( clazz != null ) { classMap . put ( propertyPrefix + key , clazz ) ; } } return clazz ; } public List < Class > findClasses ( String key ) throws ClassNotFoundException , IOException { return findClasses ( key , null ) ; } public List < Class > findClasses ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { Class type = findClass ( key , propertyPrefix ) ; return Collections . singletonList ( type ) ; } public String getPath ( ) { return path ; } private Class newInstance ( Properties properties , String propertyPrefix ) throws ClassNotFoundException , IOException { String className = properties . getProperty ( propertyPrefix + "class" ) ; if ( className == null ) { throw new IOException ( "Expected property is missing: " + propertyPrefix + "class" ) ; } return ObjectHelper . loadClass ( className ) ; } private Properties doFindFactoryProperties ( String key ) throws IOException { String uri = path + key ; InputStream in = ObjectHelper . loadResourceAsStream ( uri ) ; if ( in == null ) { throw new NoFactoryAvailableException ( uri ) ; } BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( in ) ; Properties properties = new Properties ( ) ; properties . load ( reader ) ; return properties ; } finally { ObjectHelper . close ( reader , key , null ) ; ObjectHelper . close ( in , key , null ) ; } } } 	1
package org . apache . camel . spi ; import javax . management . JMException ; import javax . management . MBeanServer ; import javax . management . ObjectName ; import org . apache . camel . Service ; public interface InstrumentationAgent extends Service { void register ( Object obj , ObjectName name ) throws JMException ; void register ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException ; void unregister ( ObjectName name ) throws JMException ; MBeanServer getMBeanServer ( ) ; String getMBeanObjectDomainName ( ) ; } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; public abstract class DefaultPollingEndpoint < E extends Exchange > extends ScheduledPollEndpoint < E > { protected DefaultPollingEndpoint ( ) { } protected DefaultPollingEndpoint ( String endpointUri ) { super ( endpointUri ) ; } protected DefaultPollingEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; } protected DefaultPollingEndpoint ( String endpointUri , CamelContext context ) { super ( endpointUri , context ) ; } public Consumer < E > createConsumer ( Processor processor ) throws Exception { DefaultScheduledPollConsumer result = new DefaultScheduledPollConsumer ( this , processor ) ; configureConsumer ( result ) ; return result ; } } 	1
package org . apache . camel . component ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . core . io . DefaultResourceLoader ; import org . springframework . core . io . Resource ; import org . springframework . core . io . ResourceLoader ; public abstract class ResourceBasedComponent extends DefaultComponent < Exchange > { protected final transient Log log = LogFactory . getLog ( getClass ( ) ) ; private ResourceLoader resourceLoader = new DefaultResourceLoader ( ) ; public ResourceLoader getResourceLoader ( ) { return resourceLoader ; } public void setResourceLoader ( ResourceLoader resourceLoader ) { this . resourceLoader = resourceLoader ; } protected Resource resolveMandatoryResource ( String uri ) { Resource resource = getResourceLoader ( ) . getResource ( uri ) ; if ( resource == null ) { throw new IllegalArgumentException ( "Could not find resource for URI: " + uri + " using: " + getResourceLoader ( ) ) ; } else { return resource ; } } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ; public class DefaultProducerTemplate < E extends Exchange > extends ServiceSupport implements ProducerTemplate < E > { private CamelContext context ; private final ProducerCache < E > producerCache = new ProducerCache < E > ( ) ; private boolean useEndpointCache = true ; private final Map < String , Endpoint < E > > endpointCache = new HashMap < String , Endpoint < E > > ( ) ; private Endpoint < E > defaultEndpoint ; public DefaultProducerTemplate ( CamelContext context ) { this . context = context ; } public DefaultProducerTemplate ( CamelContext context , Endpoint defaultEndpoint ) { this ( context ) ; this . defaultEndpoint = defaultEndpoint ; } public static DefaultProducerTemplate newInstance ( CamelContext camelContext , String defaultEndpointUri ) { Endpoint endpoint = CamelContextHelper . getMandatoryEndpoint ( camelContext , defaultEndpointUri ) ; return new DefaultProducerTemplate ( camelContext , endpoint ) ; } public E send ( String endpointUri , E exchange ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , exchange ) ; } public E send ( String endpointUri , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor ) ; } public E send ( String endpointUri , Processor processor , AsyncCallback callback ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor , callback ) ; } public E send ( String endpointUri , ExchangePattern pattern , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , pattern , processor ) ; } public E send ( Endpoint < E > endpoint , E exchange ) { E convertedExchange = exchange ; producerCache . send ( endpoint , convertedExchange ) ; return convertedExchange ; } public E send ( Endpoint < E > endpoint , Processor processor ) { return producerCache . send ( endpoint , processor ) ; } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { return producerCache . send ( endpoint , processor , callback ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { return producerCache . send ( endpoint , pattern , processor ) ; } public Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) { E result = send ( endpoint , pattern , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBody ( Endpoint < E > endpoint , Object body ) { E result = send ( endpoint , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result ) ; } public Object sendBody ( String endpointUri , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , body ) ; } public Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , pattern , body ) ; } public Object sendBodyAndHeader ( String endpointUri , final Object body , final String header , final Object headerValue ) { return sendBodyAndHeader ( resolveMandatoryEndpoint ( endpointUri ) , body , header , headerValue ) ; } public Object sendBodyAndHeader ( Endpoint < E > endpoint , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeader ( Endpoint < E > endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result , pattern ) ; } public Object sendBodyAndHeaders ( String endpointUri , final Object body , final Map < String , Object > headers ) { return sendBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , body , headers ) ; } public Object sendBodyAndHeaders ( Endpoint < E > endpoint , final Object body , final Map < String , Object > headers ) { E result = send ( endpoint , new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; for ( Map . Entry < String , Object > header : headers . entrySet ( ) ) { in . setHeader ( header . getKey ( ) , header . getValue ( ) ) ; } in . setBody ( body ) ; } } ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeaders ( String endpointUri , ExchangePattern pattern , Object body , Map < String , Object > headers ) { return sendBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , pattern , body , headers ) ; } public Object sendBodyAndHeaders ( Endpoint < E > endpoint , ExchangePattern pattern , final Object body , final Map < String , Object > headers ) { E result = send ( endpoint , pattern , new Processor ( ) { public void process ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; for ( Map . Entry < String , Object > header : headers . entrySet ( ) ) { in . setHeader ( header . getKey ( ) , header . getValue ( ) ) ; } in . setBody ( body ) ; } } ) ; return extractResultBody ( result ) ; } public E request ( Endpoint < E > endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( Endpoint < E > endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public E request ( String endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( String endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( String endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public Object requestBodyAndHeaders ( String endpointUri , Object body , Map < String , Object > headers ) { return requestBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , body , headers ) ; } public Object requestBodyAndHeaders ( Endpoint < E > endpoint , final Object body , final Map < String , Object > headers ) { return sendBodyAndHeaders ( endpoint , ExchangePattern . InOut , body , headers ) ; } public Object sendBody ( Object body ) { return sendBody ( getMandatoryDefaultEndpoint ( ) , body ) ; } public E send ( E exchange ) { return send ( getMandatoryDefaultEndpoint ( ) , exchange ) ; } public E send ( Processor processor ) { return send ( getMandatoryDefaultEndpoint ( ) , processor ) ; } public Object sendBodyAndHeader ( Object body , String header , Object headerValue ) { return sendBodyAndHeader ( getMandatoryDefaultEndpoint ( ) , body , header , headerValue ) ; } public Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) { return sendBodyAndHeaders ( getMandatoryDefaultEndpoint ( ) , body , headers ) ; } public Producer < E > getProducer ( Endpoint < E > endpoint ) { return producerCache . getProducer ( endpoint ) ; } public CamelContext getContext ( ) { return context ; } public Endpoint < E > getDefaultEndpoint ( ) { return defaultEndpoint ; } public void setDefaultEndpoint ( Endpoint < E > defaultEndpoint ) { this . defaultEndpoint = defaultEndpoint ; } public void setDefaultEndpointUri ( String endpointUri ) { setDefaultEndpoint ( getContext ( ) . getEndpoint ( endpointUri ) ) ; } public boolean isUseEndpointCache ( ) { return useEndpointCache ; } public void setUseEndpointCache ( boolean useEndpointCache ) { this . useEndpointCache = useEndpointCache ; } public < T extends Endpoint < ? > > T getResolvedEndpoint ( String endpointUri , Class < T > expectedClass ) { Endpoint < ? > e = null ; synchronized ( endpointCache ) { e = endpointCache . get ( endpointUri ) ; } if ( e != null && expectedClass . isAssignableFrom ( e . getClass ( ) ) ) { return expectedClass . asSubclass ( expectedClass ) . cast ( e ) ; } return null ; } protected Processor createBodyAndHeaderProcessor ( final Object body , final String header , final Object headerValue ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setHeader ( header , headerValue ) ; in . setBody ( body ) ; } } ; } protected Processor createSetBodyProcessor ( final Object body ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setBody ( body ) ; } } ; } protected Endpoint resolveMandatoryEndpoint ( String endpointUri ) { Endpoint endpoint = null ; if ( isUseEndpointCache ( ) ) { synchronized ( endpointCache ) { endpoint = endpointCache . get ( endpointUri ) ; if ( endpoint == null ) { endpoint = context . getEndpoint ( endpointUri ) ; if ( endpoint != null ) { endpointCache . put ( endpointUri , endpoint ) ; } } } } else { endpoint = context . getEndpoint ( endpointUri ) ; } if ( endpoint == null ) { throw new NoSuchEndpointException ( endpointUri ) ; } return endpoint ; } protected Endpoint < E > getMandatoryDefaultEndpoint ( ) { Endpoint < E > answer = getDefaultEndpoint ( ) ; ObjectHelper . notNull ( answer , "defaultEndpoint" ) ; return answer ; } protected void doStart ( ) throws Exception { producerCache . start ( ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; endpointCache . clear ( ) ; } protected Object extractResultBody ( E result ) { return extractResultBody ( result , null ) ; } protected Object extractResultBody ( E result , ExchangePattern pattern ) { Object answer = null ; if ( result != null ) { if ( result . getException ( ) != null ) { throw wrapRuntimeCamelException ( result . getException ( ) ) ; } if ( hasFaultMessage ( result ) ) { return result . getFault ( ) . getBody ( ) ; } boolean notOut = pattern != null && ! pattern . isOutCapable ( ) ; boolean hasOut = result . getOut ( false ) != null ; if ( hasOut && ! notOut ) { answer = result . getOut ( ) . getBody ( ) ; } else { answer = result . getIn ( ) . getBody ( ) ; } } return answer ; } protected boolean hasFaultMessage ( E result ) { Message faultMessage = result . getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return false ; } } 	1
package org . apache . camel . component . irc ; import java . net . URI ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultComponent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . schwering . irc . lib . IRCConnection ; public class IrcComponent extends DefaultComponent < IrcExchange > { private static final transient Log LOG = LogFactory . getLog ( IrcComponent . class ) ; private IrcConfiguration configuration ; private final Map < String , IRCConnection > connectionCache = new HashMap < String , IRCConnection > ( ) ; public IrcComponent ( ) { configuration = new IrcConfiguration ( ) ; } public IrcComponent ( IrcConfiguration configuration ) { this . configuration = configuration ; } public IrcComponent ( CamelContext context ) { super ( context ) ; configuration = new IrcConfiguration ( ) ; } public static IrcComponent ircComponent ( ) { return new IrcComponent ( ) ; } protected IrcEndpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { IrcConfiguration config = getConfiguration ( ) . copy ( ) ; config . configure ( new URI ( uri ) ) ; final IrcEndpoint endpoint = new IrcEndpoint ( uri , this , config ) ; setProperties ( endpoint . getConfiguration ( ) , parameters ) ; return endpoint ; } public IrcConfiguration getConfiguration ( ) { return configuration ; } public void setConfiguration ( IrcConfiguration configuration ) { this . configuration = configuration ; } public synchronized IRCConnection getIRCConnection ( IrcConfiguration configuration ) { final IRCConnection connection ; if ( connectionCache . containsKey ( configuration . getCacheKey ( ) ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Returning Cached Connection to " + configuration . getHostname ( ) + " " + configuration . getTarget ( ) ) ; } connection = connectionCache . get ( configuration . getCacheKey ( ) ) ; } else { connection = createConnection ( configuration ) ; connectionCache . put ( configuration . getCacheKey ( ) , connection ) ; } return connection ; } protected IRCConnection createConnection ( IrcConfiguration configuration ) { LOG . debug ( "Creating Connection to " + configuration . getHostname ( ) + " destination: " + configuration . getTarget ( ) + " nick: " + configuration . getNickname ( ) + " user: " + configuration . getUsername ( ) ) ; final IRCConnection conn = new IRCConnection ( configuration . getHostname ( ) , configuration . getPorts ( ) , configuration . getPassword ( ) , configuration . getNickname ( ) , configuration . getUsername ( ) , configuration . getRealname ( ) ) ; conn . setEncoding ( "UTF-8" ) ; conn . setColors ( configuration . isColors ( ) ) ; conn . setPong ( true ) ; try { conn . connect ( ) ; } catch ( Exception e ) { LOG . error ( "Failed to connect: " + e , e ) ; throw new RuntimeCamelException ( e ) ; } return conn ; } public void closeConnection ( String key , IRCConnection connection ) { try { connection . doQuit ( ) ; connection . close ( ) ; } catch ( Exception e ) { LOG . warn ( "Error closing connection." , e ) ; } } @ Override protected synchronized void doStop ( ) throws Exception { Map < String , IRCConnection > map = new HashMap < String , IRCConnection > ( connectionCache ) ; connectionCache . clear ( ) ; for ( Map . Entry < String , IRCConnection > entry : map . entrySet ( ) ) { closeConnection ( entry . getKey ( ) , entry . getValue ( ) ) ; } super . doStop ( ) ; } } 	0
package org . apache . camel ; public class ExpectedBodyTypeException extends RuntimeCamelException { private final Exchange exchange ; private final Class expectedBodyType ; public ExpectedBodyTypeException ( Exchange exchange , Class expectedBodyType ) { super ( "Could not extract IN message body as type: " + expectedBodyType + " body is: " + exchange . getIn ( ) . getBody ( ) ) ; this . exchange = exchange ; this . expectedBodyType = expectedBodyType ; } public Exchange getExchange ( ) { return exchange ; } public Class getExpectedBodyType ( ) { return expectedBodyType ; } } 	1
package org . apache . camel . spring . factory ; import org . apache . camel . component . bean . BeanEndpoint ; import org . springframework . beans . factory . FactoryBean ; public class BeanEndpointFactory implements FactoryBean { private boolean singleton = true ; public Object getObject ( ) throws Exception { return new BeanEndpoint ( ) ; } public Class getObjectType ( ) { return BeanEndpoint . class ; } public boolean isSingleton ( ) { return singleton ; } protected void setSingleton ( boolean singleton ) { this . singleton = singleton ; } } 	0
package org . apache . camel . model . loadbalancer ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "topic" ) public class TopicLoadBalanceStrategy extends LoadBalancerType { @ Override protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { return new org . apache . camel . processor . loadbalancer . TopicLoadBalancer ( ) ; } } 	1
package org . apache . camel . processor ; import org . apache . camel . Processor ; public interface ErrorHandler extends Processor { } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoopProcessor extends DelegateProcessor { public static final String PROP_ITER_COUNT = "CamelIterationCount" ; public static final String PROP_ITER_INDEX = "CamelIterationIndex" ; private static final Log LOG = LogFactory . getLog ( LoopProcessor . class ) ; private Expression < Exchange > expression ; public LoopProcessor ( Expression < Exchange > expression , Processor processor ) { super ( processor ) ; this . expression = expression ; } @ Override public void process ( Exchange exchange ) throws Exception { String text = ExchangeHelper . convertToType ( exchange , String . class , expression . evaluate ( exchange ) ) ; Integer value = ExchangeHelper . convertToType ( exchange , Integer . class , text ) ; if ( value == null ) { throw new RuntimeCamelException ( "Expression \"" + expression + "\" does not evaluate to an int." ) ; } int count = value . intValue ( ) ; exchange . setProperty ( PROP_ITER_COUNT , count ) ; for ( int i = 0 ; i < count ; i ++ ) { LOG . debug ( "LoopProcessor: iteration #" + i ) ; exchange . setProperty ( PROP_ITER_INDEX , i ) ; super . process ( exchange ) ; } } @ Override public String toString ( ) { return "Loop[for: " + expression + " times do: " + getProcessor ( ) + "]" ; } public Expression < Exchange > getExpression ( ) { return expression ; } } 	1
package org . apache . camel . component . rmi ; import java . rmi . registry . Registry ; import org . apache . camel . CamelContext ; import org . apache . camel . component . bean . ParameterMappingStrategy ; import org . apache . camel . component . bean . RegistryBean ; public class RmiRegistryBean extends RegistryBean { private final Registry registry ; public RmiRegistryBean ( CamelContext context , String name , Registry registry ) { super ( context , name ) ; this . registry = registry ; } public RmiRegistryBean ( CamelContext context , String name , ParameterMappingStrategy parameterMappingStrategy , Registry registry ) { super ( context , name , parameterMappingStrategy ) ; this . registry = registry ; } @ Override protected Object lookupBean ( ) throws Exception { return registry . lookup ( getName ( ) ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . util . ServiceHelper ; public class Interceptor extends DelegateProcessor implements Intercept { private Processor interceptorLogic ; public Interceptor ( ) { } public Interceptor ( Processor interceptorLogic ) { this . interceptorLogic = interceptorLogic ; } public void process ( Exchange exchange ) throws Exception { interceptorLogic . process ( exchange ) ; } public Processor getInterceptorLogic ( ) { return interceptorLogic ; } public void setInterceptorLogic ( Processor interceptorLogic ) { this . interceptorLogic = interceptorLogic ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startService ( interceptorLogic ) ; super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopService ( interceptorLogic ) ; super . doStop ( ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "when" ) public class WhenType < Type extends ProcessorType > extends ExpressionNode { public WhenType ( ) { } public WhenType ( Predicate predicate ) { super ( predicate ) ; } public WhenType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "When[" + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "when" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public final class ProcessorBuilder { private ProcessorBuilder ( ) { } public static Processor setBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setBody(" + expression + ")" ; } } ; } public static Processor setOutBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setOutBody(" + expression + ")" ; } } ; } public static Processor setFaultBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setFaultBody(" + expression + ")" ; } } ; } public static Processor setHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setOutHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setOutHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setFaultHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setFaultHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setProperty ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . setProperty ( name , value ) ; } @ Override public String toString ( ) { return "setProperty(" + name + ", " + expression + ")" ; } } ; } public static Processor removeHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getIn ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeHeader(" + name + ")" ; } } ; } public static Processor removeFaultHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getFault ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeFaultHeader(" + name + ")" ; } } ; } public static Processor removeProperty ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . removeProperty ( name ) ; } @ Override public String toString ( ) { return "removeProperty(" + name + ")" ; } } ; } public static Processor throwException ( final Exception ex ) { return new Processor ( ) { public void process ( Exchange exchange ) throws Exception { throw ex ; } @ Override public String toString ( ) { return "throwException(" + ex . toString ( ) + ")" ; } } ; } } 	1
package org . apache . camel . component . validator ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . component . ResourceBasedComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . springframework . core . io . Resource ; public class ValidatorComponent extends ResourceBasedComponent { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { SpringValidator validator = new SpringValidator ( ) ; Resource resource = resolveMandatoryResource ( remaining ) ; validator . setSchemaResource ( resource ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( this + " using schema resource: " + resource ) ; } configureValidator ( validator , uri , remaining , parameters ) ; return new ProcessorEndpoint ( uri , this , validator ) ; } protected void configureValidator ( SpringValidator validator , String uri , String remaining , Map parameters ) throws Exception { setProperties ( validator , parameters ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . UuidGenerator ; public abstract class MessageSupport implements Message { private static final UuidGenerator DEFALT_ID_GENERATOR = new UuidGenerator ( ) ; private Exchange exchange ; private Object body ; private String messageId ; public Object getBody ( ) { if ( body == null ) { body = createBody ( ) ; } return body ; } @ SuppressWarnings ( { "unchecked" } ) public < T > T getBody ( Class < T > type ) { return getBody ( type , getBody ( ) ) ; } protected < T > T getBody ( Class < T > type , Object body ) { Exchange e = getExchange ( ) ; if ( e != null ) { CamelContext camelContext = e . getContext ( ) ; if ( camelContext != null ) { TypeConverter converter = camelContext . getTypeConverter ( ) ; try { return converter . convertTo ( type , e , body ) ; } catch ( NoTypeConversionAvailableException ex ) { } return converter . convertTo ( type , this ) ; } } return ( T ) getBody ( ) ; } public void setBody ( Object body ) { this . body = body ; } public < T > void setBody ( Object value , Class < T > type ) { Exchange e = getExchange ( ) ; if ( e != null ) { T v = e . getContext ( ) . getTypeConverter ( ) . convertTo ( type , e , value ) ; if ( v != null ) { value = v ; } } setBody ( value ) ; } public Message copy ( ) { Message answer = newInstance ( ) ; answer . copyFrom ( this ) ; return answer ; } public void copyFrom ( Message that ) { setMessageId ( that . getMessageId ( ) ) ; setBody ( that . getBody ( ) ) ; getHeaders ( ) . putAll ( that . getHeaders ( ) ) ; getAttachments ( ) . putAll ( that . getAttachments ( ) ) ; } public Exchange getExchange ( ) { return exchange ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public abstract Message newInstance ( ) ; protected Object createBody ( ) { return null ; } public String getMessageId ( ) { if ( messageId == null ) { messageId = createMessageId ( ) ; } return this . messageId ; } public void setMessageId ( String messageId ) { this . messageId = messageId ; } protected String createMessageId ( ) { return DEFALT_ID_GENERATOR . generateId ( ) ; } } 	1
package org . apache . camel . builder . xml ; import java . io . ByteArrayOutputStream ; import javax . xml . transform . Result ; import javax . xml . transform . stream . StreamResult ; import org . apache . camel . Message ; public class StreamResultHandler implements ResultHandler { ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; StreamResult result = new StreamResult ( buffer ) ; public Result getResult ( ) { return result ; } public void setBody ( Message in ) { in . setBody ( buffer . toByteArray ( ) ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultExchangeFormatter ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Logger implements Processor { private Log log ; private LoggingLevel level ; private ExchangeFormatter formatter = DefaultExchangeFormatter . getInstance ( ) ; public Logger ( ) { this ( LogFactory . getLog ( Logger . class ) ) ; } public Logger ( Log log ) { this ( log , LoggingLevel . INFO ) ; } public Logger ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public Logger ( String logName ) { this ( LogFactory . getLog ( logName ) ) ; } public Logger ( String logName , LoggingLevel level ) { this ( LogFactory . getLog ( logName ) , level ) ; } public Logger ( Log log , ExchangeFormatter formatter ) { this ( log ) ; this . formatter = formatter ; } @ Override public String toString ( ) { return "Logger[" + log + "]" ; } public void process ( Exchange exchange ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void process ( Exchange exchange , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void log ( String message , LoggingLevel loggingLevel ) { LoggingLevel oldLogLevel = getLevel ( ) ; setLevel ( loggingLevel ) ; log ( message ) ; setLevel ( oldLogLevel ) ; } public void log ( String message ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message ) ; } } public void log ( String message , Throwable exception , LoggingLevel loggingLevel ) { LoggingLevel oldLogLevel = getLevel ( ) ; setLevel ( loggingLevel ) ; log ( message , exception ) ; setLevel ( oldLogLevel ) ; } public void log ( String message , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message , exception ) ; } break ; case OFF : break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message , exception ) ; } } protected Object logMessage ( Exchange exchange ) { return formatter . format ( exchange ) ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public void setFormatter ( ExchangeFormatter formatter ) { this . formatter = formatter ; } } 	1
package org . apache . camel . component . velocity ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . velocity . app . VelocityEngine ; public class VelocityComponent extends DefaultComponent { private VelocityEngine velocityEngine = new VelocityEngine ( ) ; public VelocityEngine getVelocityEngine ( ) { return velocityEngine ; } public void setVelocityEngine ( VelocityEngine velocityEngine ) { this . velocityEngine = velocityEngine ; } protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new VelocityEndpoint ( uri , this , remaining , parameters ) ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . model . InterceptorRef ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Logger ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . commons . logging . LogFactory ; public class TraceInterceptor extends DelegateProcessor implements ExchangeFormatter { private Logger logger ; private final ProcessorType node ; private final Tracer tracer ; private TraceFormatter formatter ; public TraceInterceptor ( ProcessorType node , Processor target , TraceFormatter formatter , Tracer tracer ) { super ( target ) ; this . tracer = tracer ; this . node = node ; this . formatter = formatter ; if ( tracer . getLogName ( ) != null ) { logger = new Logger ( LogFactory . getLog ( tracer . getLogName ( ) ) , this ) ; } else { logger = new Logger ( LogFactory . getLog ( TraceInterceptor . class ) , this ) ; } if ( tracer . getLogLevel ( ) != null ) { logger . setLevel ( tracer . getLogLevel ( ) ) ; } if ( tracer . getFormatter ( ) != null ) { this . formatter = tracer . getFormatter ( ) ; } } public TraceInterceptor ( ProcessorType node , Processor target , TraceFormatter formatter ) { this ( node , target , formatter , new Tracer ( ) ) ; } public TraceInterceptor ( ProcessorType node , Processor target , Tracer tracer ) { this ( node , target , null , tracer ) ; } @ Override public String toString ( ) { return "TraceInterceptor[" + node + "]" ; } public void process ( final Exchange exchange ) throws Exception { try { if ( shouldLogNode ( node ) && shouldLogExchange ( exchange ) ) { logExchange ( exchange ) ; } super . proceed ( exchange ) ; if ( tracer . isTraceOutExchanges ( ) && shouldLogNode ( node ) && shouldLogExchange ( exchange ) ) { logExchange ( exchange ) ; } } catch ( Exception e ) { if ( shouldLogException ( exchange ) ) { logException ( exchange , e ) ; } throw e ; } } public Object format ( Exchange exchange ) { return formatter . format ( this , exchange ) ; } public ProcessorType getNode ( ) { return node ; } public Logger getLogger ( ) { return logger ; } public TraceFormatter getFormatter ( ) { return formatter ; } protected void logExchange ( Exchange exchange ) { logger . process ( exchange ) ; } protected void logException ( Exchange exchange , Throwable throwable ) { if ( tracer . isTraceExceptions ( ) ) { logger . process ( exchange , throwable ) ; } } protected boolean shouldLogExchange ( Exchange exchange ) { return ( tracer == null || tracer . isEnabled ( ) ) && ( tracer . getTraceFilter ( ) == null || tracer . getTraceFilter ( ) . matches ( exchange ) ) ; } protected boolean shouldLogException ( Exchange exchange ) { return tracer . isTraceExceptions ( ) ; } public boolean shouldTraceOutExchanges ( ) { return tracer . isTraceOutExchanges ( ) ; } protected boolean shouldLogNode ( ProcessorType node ) { if ( node == null ) { return false ; } if ( ! tracer . isTraceInterceptors ( ) && ( node instanceof InterceptStrategy || node instanceof InterceptorRef ) ) { return false ; } return true ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "from" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FromType extends OptionalIdentifiedType < FromType > { @ XmlAttribute private String uri ; @ XmlAttribute private String ref ; @ XmlTransient private Endpoint < ? extends Exchange > endpoint ; public FromType ( ) { } public FromType ( String uri ) { setUri ( uri ) ; } public FromType ( Endpoint < ? extends Exchange > endpoint ) { this . endpoint = endpoint ; } @ Override public String toString ( ) { return "From[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "from" ; } public String getLabel ( ) { return description ( getUri ( ) , getRef ( ) , getEndpoint ( ) ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( RouteContext context ) { if ( endpoint == null ) { endpoint = context . resolveEndpoint ( getUri ( ) , getRef ( ) ) ; } return endpoint ; } public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public Object getUriOrRef ( ) { if ( ObjectHelper . isNullOrBlank ( uri ) ) { return uri ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } return ref ; } protected static String description ( String uri , String ref , Endpoint endpoint ) { if ( ref != null ) { return "ref:" + ref ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } else if ( uri != null ) { return uri ; } else { return "no uri or ref supplied!" ; } } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class ValueBuilder < E extends Exchange > implements Expression < E > { private Expression < E > expression ; public ValueBuilder ( Expression < E > expression ) { this . expression = expression ; } public Object evaluate ( E exchange ) { return expression . evaluate ( exchange ) ; } public Expression < E > getExpression ( ) { return expression ; } @ Override public String toString ( ) { return expression . toString ( ) ; } public Predicate < E > isNotEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isNotEqualTo ( expression , right ) ) ; } public Predicate < E > isEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isEqualTo ( expression , right ) ) ; } public Predicate < E > isLessThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThan ( expression , right ) ) ; } public Predicate < E > isLessThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isLessThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isGreaterThan ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThan ( expression , right ) ) ; } public Predicate < E > isGreaterThanOrEqualTo ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . isGreaterThanOrEqualTo ( expression , right ) ) ; } public Predicate < E > isInstanceOf ( Class type ) { return onNewPredicate ( PredicateBuilder . isInstanceOf ( expression , type ) ) ; } public Predicate < E > matchesRegex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public Predicate < E > isNull ( ) { return onNewPredicate ( PredicateBuilder . isNull ( expression ) ) ; } public Predicate < E > isNotNull ( ) { return onNewPredicate ( PredicateBuilder . isNotNull ( expression ) ) ; } public Predicate < E > contains ( Object value ) { Expression < E > right = asExpression ( value ) ; return onNewPredicate ( PredicateBuilder . contains ( expression , right ) ) ; } public Predicate < E > regex ( String regex ) { return onNewPredicate ( PredicateBuilder . regex ( expression , regex ) ) ; } public ValueBuilder < E > tokenize ( ) { return tokenize ( "\n" ) ; } public ValueBuilder < E > tokenize ( String token ) { Expression < E > newExp = ExpressionBuilder . tokenizeExpression ( expression , token ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexTokenize ( String regex ) { Expression < E > newExp = ExpressionBuilder . regexTokenize ( expression , regex ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , String replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > regexReplaceAll ( String regex , Expression < E > replacement ) { Expression < E > newExp = ExpressionBuilder . regexReplaceAll ( expression , regex , replacement ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertTo ( Class type ) { Expression < E > newExp = ExpressionBuilder . convertTo ( expression , type ) ; return new ValueBuilder < E > ( newExp ) ; } public ValueBuilder < E > convertToString ( ) { return convertTo ( String . class ) ; } public ValueBuilder < E > append ( Object value ) { return new ValueBuilder < E > ( ExpressionBuilder . append ( expression , asExpression ( value ) ) ) ; } protected Predicate < E > onNewPredicate ( Predicate < E > predicate ) { return predicate ; } protected Expression < E > asExpression ( Object value ) { if ( value instanceof Expression ) { return ( Expression < E > ) value ; } else { return ExpressionBuilder . constantExpression ( value ) ; } } } 	1
package org . apache . camel . component . quartz ; import java . util . Date ; import java . util . Map ; import java . util . Set ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . quartz . JobDetail ; import org . quartz . JobExecutionContext ; import org . quartz . JobExecutionException ; import org . quartz . Scheduler ; import org . quartz . SchedulerException ; import org . quartz . SimpleTrigger ; import org . quartz . Trigger ; public class QuartzEndpoint extends DefaultEndpoint < QuartzExchange > { public static final String ENDPOINT_KEY = "org.apache.camel.quartz" ; public static final String CONTEXT_KEY = "org.apache.camel.CamelContext" ; private static final transient Log LOG = LogFactory . getLog ( QuartzEndpoint . class ) ; private Scheduler scheduler ; private LoadBalancer loadBalancer ; private Trigger trigger ; private JobDetail jobDetail ; private boolean started ; private boolean stateful ; public QuartzEndpoint ( final String endpointUri , final QuartzComponent component , final Scheduler scheduler ) { super ( endpointUri , component ) ; this . scheduler = scheduler ; } public QuartzEndpoint ( final String endpointUri , final Scheduler scheduler ) { super ( endpointUri ) ; this . scheduler = scheduler ; } public void addTriggers ( final Map < Trigger , JobDetail > triggerMap ) throws SchedulerException { if ( triggerMap != null ) { Set < Map . Entry < Trigger , JobDetail > > entries = triggerMap . entrySet ( ) ; for ( Map . Entry < Trigger , JobDetail > entry : entries ) { Trigger key = entry . getKey ( ) ; JobDetail value = entry . getValue ( ) ; ObjectHelper . notNull ( key , "key" ) ; ObjectHelper . notNull ( value , "value" ) ; addTrigger ( key , value ) ; } } } public void addTrigger ( final Trigger trigger , final JobDetail detail ) throws SchedulerException { if ( trigger . getName ( ) == null ) { trigger . setName ( detail . getName ( ) ) ; } if ( trigger . getGroup ( ) == null ) { trigger . setGroup ( detail . getGroup ( ) ) ; } if ( trigger . getStartTime ( ) == null ) { trigger . setStartTime ( new Date ( ) ) ; } if ( isStateful ( ) ) { detail . getJobDataMap ( ) . put ( ENDPOINT_KEY , getEndpointUri ( ) ) ; } else { detail . getJobDataMap ( ) . put ( ENDPOINT_KEY , this ) ; } if ( null == detail . getJobClass ( ) ) { if ( isStateful ( ) ) { detail . setJobClass ( StatefulCamelJob . class ) ; } else { detail . setJobClass ( CamelJob . class ) ; } } if ( detail . getName ( ) == null ) { detail . setName ( getEndpointUri ( ) ) ; } getScheduler ( ) . scheduleJob ( detail , trigger ) ; } public void removeTrigger ( final Trigger trigger , final JobDetail jobDetail ) throws SchedulerException { getScheduler ( ) . unscheduleJob ( trigger . getName ( ) , trigger . getGroup ( ) ) ; } public void onJobExecute ( final JobExecutionContext jobExecutionContext ) throws JobExecutionException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Firing Quartz Job with context: " + jobExecutionContext ) ; } QuartzExchange exchange = createExchange ( jobExecutionContext ) ; try { getLoadBalancer ( ) . process ( exchange ) ; } catch ( JobExecutionException e ) { throw e ; } catch ( Exception e ) { throw new JobExecutionException ( e ) ; } } @ Override public QuartzExchange createExchange ( final ExchangePattern pattern ) { return new QuartzExchange ( getCamelContext ( ) , pattern , null ) ; } public QuartzExchange createExchange ( final JobExecutionContext jobExecutionContext ) { return new QuartzExchange ( getCamelContext ( ) , getExchangePattern ( ) , jobExecutionContext ) ; } public Producer < QuartzExchange > createProducer ( ) throws Exception { throw new UnsupportedOperationException ( "You cannot send messages to this endpoint" ) ; } public QuartzConsumer createConsumer ( final Processor processor ) throws Exception { return new QuartzConsumer ( this , processor ) ; } @ Override public QuartzComponent getComponent ( ) { return ( QuartzComponent ) super . getComponent ( ) ; } public boolean isSingleton ( ) { return true ; } public Scheduler getScheduler ( ) { return scheduler ; } public LoadBalancer getLoadBalancer ( ) { if ( loadBalancer == null ) { loadBalancer = createLoadBalancer ( ) ; } return loadBalancer ; } public void setLoadBalancer ( final LoadBalancer loadBalancer ) { this . loadBalancer = loadBalancer ; } public JobDetail getJobDetail ( ) { if ( jobDetail == null ) { jobDetail = createJobDetail ( ) ; } return jobDetail ; } public void setJobDetail ( final JobDetail jobDetail ) { this . jobDetail = jobDetail ; } public Trigger getTrigger ( ) { if ( trigger == null ) { trigger = createTrigger ( ) ; } return trigger ; } public void setTrigger ( final Trigger trigger ) { this . trigger = trigger ; } public boolean isStateful ( ) { return this . stateful ; } public void setStateful ( final boolean stateful ) { this . stateful = stateful ; } public synchronized void consumerStarted ( final QuartzConsumer consumer ) throws SchedulerException { getLoadBalancer ( ) . addProcessor ( consumer . getProcessor ( ) ) ; if ( ! started ) { addTrigger ( getTrigger ( ) , getJobDetail ( ) ) ; started = true ; } } public synchronized void consumerStopped ( final QuartzConsumer consumer ) throws SchedulerException { getLoadBalancer ( ) . removeProcessor ( consumer . getProcessor ( ) ) ; if ( getLoadBalancer ( ) . getProcessors ( ) . isEmpty ( ) && started ) { removeTrigger ( getTrigger ( ) , getJobDetail ( ) ) ; started = false ; } } protected LoadBalancer createLoadBalancer ( ) { return new RoundRobinLoadBalancer ( ) ; } protected JobDetail createJobDetail ( ) { return new JobDetail ( ) ; } protected Trigger createTrigger ( ) { return new SimpleTrigger ( ) ; } } 	0
package org . apache . camel . processor ; import java . io . ByteArrayOutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . spi . DataFormat ; public class MarshalProcessor implements Processor { private final DataFormat dataFormat ; public MarshalProcessor ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } public void process ( Exchange exchange ) throws Exception { ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; Message out = exchange . getOut ( true ) ; out . copyFrom ( in ) ; dataFormat . marshal ( exchange , body , buffer ) ; byte [ ] data = buffer . toByteArray ( ) ; out . setBody ( data ) ; } } 	1
package org . apache . camel . osgi ; import java . io . BufferedInputStream ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashMap ; import java . util . Map ; import java . util . Properties ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . spi . ComponentResolver ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . osgi . framework . Bundle ; import org . osgi . framework . BundleContext ; import org . osgi . framework . BundleEvent ; import org . osgi . framework . SynchronousBundleListener ; import org . springframework . osgi . util . BundleDelegatingClassLoader ; public class OsgiComponentResolver implements ComponentResolver { private static final transient Log LOG = LogFactory . getLog ( OsgiComponentResolver . class ) ; protected Class getComponent ( String name ) throws Exception { return Activator . getComponent ( name ) ; } public Component resolveComponent ( String name , CamelContext context ) throws Exception { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } } Class type = null ; try { type = getComponent ( name ) ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	0
package org . apache . camel . util ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class PackageHelper { private static final transient Log LOG = LogFactory . getLog ( PackageHelper . class ) ; private PackageHelper ( ) { } public static boolean isValidVersion ( String packageName , double minimumVersion ) { try { Package spring = Package . getPackage ( packageName ) ; String value = spring . getImplementationVersion ( ) ; if ( value != null ) { int idx = value . indexOf ( '.' ) ; if ( idx >= 0 ) { StringBuffer buffer = new StringBuffer ( value . substring ( 0 , ++ idx ) ) ; int i = idx ; for ( int size = value . length ( ) ; i < size ; i ++ ) { char ch = value . charAt ( i ) ; if ( Character . isDigit ( ch ) ) { buffer . append ( ch ) ; } } value = buffer . toString ( ) ; } double number = Double . parseDouble ( value ) ; return number >= minimumVersion ; } } catch ( Exception e ) { LOG . debug ( "Failed to find out " + packageName + " version: " + e , e ) ; } return true ; } } 	1
package org . apache . camel . component . jms . requestor ; import javax . jms . JMSException ; import javax . jms . Message ; import org . apache . camel . RuntimeCamelException ; public class FailedToProcessResponse extends RuntimeCamelException { private final Message response ; public FailedToProcessResponse ( Message response , JMSException e ) { super ( "Failed to process response: " + e + ". Message: " + response , e ) ; this . response = response ; } public Message getResponse ( ) { return response ; } } 	0
package org . apache . camel . model . loadbalancer ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "loadBalancerType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalancerType extends IdentifiedType implements LoadBalancer { @ XmlTransient private LoadBalancer loadBalancer ; @ XmlTransient private String loadBalancerTypeName ; public LoadBalancerType ( ) { } public LoadBalancerType ( LoadBalancer loadBalancer ) { this . loadBalancer = loadBalancer ; } protected LoadBalancerType ( String loadBalancerTypeName ) { this . loadBalancerTypeName = loadBalancerTypeName ; } public static LoadBalancer getLoadBalancer ( RouteContext routeContext , LoadBalancerType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or LoadBalancerType" ) ; LoadBalancer loadBalancer = routeContext . lookup ( ref , LoadBalancer . class ) ; if ( loadBalancer instanceof LoadBalancerType ) { type = ( LoadBalancerType ) loadBalancer ; } else { return loadBalancer ; } } return type . getLoadBalancer ( routeContext ) ; } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } protected void configureLoadBalancer ( LoadBalancer loadBalancer ) { } public LoadBalancer getLoadBalancer ( RouteContext routeContext ) { if ( loadBalancer == null ) { loadBalancer = createLoadBalancer ( routeContext ) ; ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; configureLoadBalancer ( loadBalancer ) ; } return loadBalancer ; } protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { if ( loadBalancerTypeName != null ) { Class type = ObjectHelper . loadClass ( loadBalancerTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + loadBalancerTypeName + " is not on the classpath! Cannot use the loadBalancer " + this ) ; } return ( LoadBalancer ) ObjectHelper . newInstance ( type ) ; } return null ; } public void addProcessor ( Processor processor ) { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; loadBalancer . addProcessor ( processor ) ; } public List < Processor > getProcessors ( ) { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; return loadBalancer . getProcessors ( ) ; } public void removeProcessor ( Processor processor ) { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; loadBalancer . removeProcessor ( processor ) ; } public void process ( Exchange exchange ) throws Exception { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; loadBalancer . process ( exchange ) ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { ObjectHelper . notNull ( loadBalancer , "loadBalancer" ) ; return loadBalancer . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( doneSynchronously ) { return ; } else { callback . done ( doneSynchronously ) ; } } } ) ; } } 	1
package org . apache . camel . component . uface ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class UFaceComponent extends DefaultComponent { protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new UFaceEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . spi ; public interface HeaderFilterStrategy { boolean applyFilterToCamelHeaders ( String headerName , Object headerValue ) ; boolean applyFilterToExternalHeaders ( String headerName , Object headerValue ) ; } 	1
package org . apache . camel . builder ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . compare ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class PredicateBuilder { private PredicateBuilder ( ) { } public static < E extends Exchange > Predicate < E > toPredicate ( final Expression < E > expression ) { return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return ObjectHelper . evaluateValuePredicate ( value ) ; } @ Override public String toString ( ) { return expression . toString ( ) ; } } ; } public static < E extends Exchange > Predicate < E > not ( final Predicate < E > predicate ) { notNull ( predicate , "predicate" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { return ! predicate . matches ( exchange ) ; } @ Override public String toString ( ) { return "not " + predicate ; } } ; } public static < E extends Exchange > Predicate < E > and ( final Predicate < E > left , final Predicate < E > right ) { notNull ( left , "left" ) ; notNull ( right , "right" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { return left . matches ( exchange ) && right . matches ( exchange ) ; } @ Override public String toString ( ) { return "(" + left + ") and (" + right + ")" ; } } ; } public static < E extends Exchange > Predicate < E > or ( final Predicate < E > left , final Predicate < E > right ) { notNull ( left , "left" ) ; notNull ( right , "right" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { return left . matches ( exchange ) || right . matches ( exchange ) ; } @ Override public String toString ( ) { return "(" + left + ") or (" + right + ")" ; } } ; } public static < E extends Exchange > Predicate < E > isEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return ObjectHelper . equal ( leftValue , rightValue ) ; } protected String getOperationText ( ) { return "==" ; } } ; } public static < E extends Exchange > Predicate < E > isNotEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return ! ObjectHelper . equal ( leftValue , rightValue ) ; } protected String getOperationText ( ) { return "!=" ; } } ; } public static < E extends Exchange > Predicate < E > isLessThan ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) < 0 ; } protected String getOperationText ( ) { return "<" ; } } ; } public static < E extends Exchange > Predicate < E > isLessThanOrEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) <= 0 ; } protected String getOperationText ( ) { return "<=" ; } } ; } public static < E extends Exchange > Predicate < E > isGreaterThan ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) > 0 ; } protected String getOperationText ( ) { return ">" ; } } ; } public static < E extends Exchange > Predicate < E > isGreaterThanOrEqualTo ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return compare ( leftValue , rightValue ) >= 0 ; } protected String getOperationText ( ) { return ">=" ; } } ; } public static < E extends Exchange > Predicate < E > contains ( final Expression < E > left , final Expression < E > right ) { return new BinaryPredicateSupport < E > ( left , right ) { protected boolean matches ( E exchange , Object leftValue , Object rightValue ) { return ObjectHelper . contains ( leftValue , rightValue ) ; } protected String getOperationText ( ) { return "contains" ; } } ; } public static < E extends Exchange > Predicate < E > isNull ( final Expression < E > expression ) { return isEqualTo ( expression , ExpressionBuilder . < E > constantExpression ( null ) ) ; } public static < E extends Exchange > Predicate < E > isNotNull ( final Expression < E > expression ) { return isNotEqualTo ( expression , ExpressionBuilder . < E > constantExpression ( null ) ) ; } public static < E extends Exchange > Predicate < E > isInstanceOf ( final Expression < E > expression , final Class type ) { notNull ( expression , "expression" ) ; notNull ( type , "type" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return type . isInstance ( value ) ; } @ Override public String toString ( ) { return expression + " instanceof " + type . getName ( ) ; } @ Override protected String assertionFailureMessage ( E exchange ) { return super . assertionFailureMessage ( exchange ) + " for <" + expression . evaluate ( exchange ) + ">" ; } } ; } public static < E extends Exchange > Predicate < E > regex ( final Expression < E > expression , final String regex ) { return regex ( expression , Pattern . compile ( regex ) ) ; } public static < E extends Exchange > Predicate < E > regex ( final Expression < E > expression , final Pattern pattern ) { notNull ( expression , "expression" ) ; notNull ( pattern , "pattern" ) ; return new PredicateSupport < E > ( ) { public boolean matches ( E exchange ) { Object value = expression . evaluate ( exchange ) ; if ( value != null ) { Matcher matcher = pattern . matcher ( value . toString ( ) ) ; return matcher . matches ( ) ; } return false ; } @ Override public String toString ( ) { return expression + ".matches(" + pattern + ")" ; } @ Override protected String assertionFailureMessage ( E exchange ) { return super . assertionFailureMessage ( exchange ) + " for <" + expression . evaluate ( exchange ) + ">" ; } } ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanProcessor extends ServiceSupport implements Processor { public static final String METHOD_NAME = "org.apache.camel.MethodName" ; public static final String MULTI_PARAMETER_ARRAY = "org.apache.camel.MultiParameterArray" ; private static final transient Log LOG = LogFactory . getLog ( BeanProcessor . class ) ; private boolean multiParameterArray ; private Method methodObject ; private String method ; private BeanHolder beanHolder ; public BeanProcessor ( Object pojo , BeanInfo beanInfo ) { this ( new ConstantBeanHolder ( pojo , beanInfo ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext , ParameterMappingStrategy parameterMappingStrategy ) { this ( pojo , new BeanInfo ( camelContext , pojo . getClass ( ) , parameterMappingStrategy ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext ) { this ( pojo , camelContext , BeanInfo . createParameterMappingStrategy ( camelContext ) ) ; } public BeanProcessor ( BeanHolder beanHolder ) { this . beanHolder = beanHolder ; } @ Override public String toString ( ) { String description = methodObject != null ? " " + methodObject : "" ; return "BeanProcessor[" + beanHolder + description + "]" ; } public void process ( Exchange exchange ) throws Exception { Object bean = beanHolder . getBean ( ) ; exchange . setProperty ( "org.apache.camel.bean.BeanHolder" , beanHolder ) ; Processor processor = getProcessor ( ) ; BeanInfo beanInfo = beanHolder . getBeanInfo ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return ; } Message in = exchange . getIn ( ) ; if ( in . getHeader ( MULTI_PARAMETER_ARRAY ) == null ) { in . setHeader ( MULTI_PARAMETER_ARRAY , isMultiParameterArray ( ) ) ; } try { BeanInvocation beanInvoke = in . getBody ( BeanInvocation . class ) ; if ( beanInvoke != null ) { beanInvoke . invoke ( bean , exchange ) ; return ; } } catch ( NoTypeConversionAvailableException ex ) { } boolean isExplicitMethod = false ; String prevMethod = null ; MethodInvocation invocation ; if ( methodObject != null ) { invocation = beanInfo . createInvocation ( methodObject , bean , exchange ) ; } else { if ( ObjectHelper . isNotNullAndNonEmpty ( method ) ) { prevMethod = in . getHeader ( METHOD_NAME , String . class ) ; in . setHeader ( METHOD_NAME , method ) ; isExplicitMethod = true ; } invocation = beanInfo . createInvocation ( bean , exchange ) ; } if ( invocation == null ) { throw new IllegalStateException ( "No method invocation could be created, no maching method could be found on: " + bean ) ; } try { Object value = invocation . proceed ( ) ; if ( value != null ) { if ( exchange . getPattern ( ) . isOutCapable ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation result on the OUT message: " + value ) ; } exchange . getOut ( true ) . setBody ( value ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting bean invocation result on the IN message: " + value ) ; } exchange . getIn ( ) . setBody ( value ) ; } } } catch ( InvocationTargetException e ) { Throwable throwable = e . getCause ( ) ; if ( throwable instanceof Exception ) { Exception exception = ( Exception ) throwable ; throw exception ; } else { Error error = ( Error ) throwable ; throw error ; } } finally { if ( isExplicitMethod ) { in . setHeader ( METHOD_NAME , prevMethod ) ; } } } protected Processor getProcessor ( ) { return beanHolder . getProcessor ( ) ; } public Method getMethodObject ( ) { return methodObject ; } public void setMethodObject ( Method methodObject ) { this . methodObject = methodObject ; } public String getMethod ( ) { return method ; } public boolean isMultiParameterArray ( ) { return multiParameterArray ; } public void setMultiParameterArray ( boolean mpArray ) { multiParameterArray = mpArray ; } public void setMethod ( String method ) { this . method = method ; } @ Deprecated public void setMethodName ( String method ) { setMethod ( method ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startService ( getProcessor ( ) ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopService ( getProcessor ( ) ) ; } } 	1
package org . apache . camel . management ; import java . io . IOException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedOperation ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "Managed Route" , currencyTimeLimit = 15 ) public class ManagedRoute extends PerformanceCounter { public static final String VALUE_UNKNOWN = "Unknown" ; private Route < ? extends Exchange > route ; private String description ; ManagedRoute ( Route < ? extends Exchange > route ) { this . route = route ; this . description = route . toString ( ) ; } public Route < ? extends Exchange > getRoute ( ) { return route ; } @ ManagedAttribute ( description = "Route Endpoint Uri" ) public String getEndpointUri ( ) { Endpoint < ? extends Exchange > ep = route . getEndpoint ( ) ; return ep != null ? ep . getEndpointUri ( ) : VALUE_UNKNOWN ; } @ ManagedAttribute ( description = "Route description" ) public String getDescription ( ) { return description ; } @ ManagedOperation ( description = "Start Route" ) public void start ( ) throws IOException { throw new IOException ( "Not supported" ) ; } @ ManagedOperation ( description = "Stop Route" ) public void stop ( ) throws IOException { throw new IOException ( "Not supported" ) ; } } 	0
package org . apache . camel . component . seda ; import java . util . Collection ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultProducer ; public class CollectionProducer extends DefaultProducer implements AsyncProcessor { private final Collection < Exchange > queue ; public CollectionProducer ( Endpoint endpoint , Collection < Exchange > queue ) { super ( endpoint ) ; this . queue = queue ; } public void process ( Exchange exchange ) throws Exception { queue . add ( exchange . copy ( ) ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { queue . add ( exchange . copy ( ) ) ; callback . done ( true ) ; return true ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "beanshell" ) public class BeanShellExpression extends ExpressionType { public BeanShellExpression ( ) { } public BeanShellExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "beanshell" ; } } 	0
package org . apache . camel ; import java . util . Map ; import java . util . Set ; import javax . activation . DataHandler ; public interface Message { String getMessageId ( ) ; void setMessageId ( String messageId ) ; Exchange getExchange ( ) ; Object getHeader ( String name ) ; < T > T getHeader ( String name , Class < T > type ) ; void setHeader ( String name , Object value ) ; Object removeHeader ( String name ) ; Map < String , Object > getHeaders ( ) ; void setHeaders ( Map < String , Object > headers ) ; Object getBody ( ) ; < T > T getBody ( Class < T > type ) ; void setBody ( Object body ) ; < T > void setBody ( Object body , Class < T > type ) ; Message copy ( ) ; void copyFrom ( Message message ) ; DataHandler getAttachment ( String id ) ; Set < String > getAttachmentNames ( ) ; void removeAttachment ( String id ) ; void addAttachment ( String id , DataHandler content ) ; Map < String , DataHandler > getAttachments ( ) ; void setAttachments ( Map < String , DataHandler > attachments ) ; boolean hasAttachments ( ) ; } 	1
package org . apache . camel . component . http ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class HttpConsumer extends DefaultConsumer < HttpExchange > { private final HttpEndpoint endpoint ; public HttpConsumer ( HttpEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override public HttpEndpoint getEndpoint ( ) { return ( HttpEndpoint ) super . getEndpoint ( ) ; } public HttpBinding getBinding ( ) { return endpoint . getBinding ( ) ; } public String getPath ( ) { return endpoint . getPath ( ) ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; endpoint . connect ( this ) ; } @ Override protected void doStop ( ) throws Exception { endpoint . disconnect ( this ) ; super . doStop ( ) ; } } 	0
package org . apache . camel . processor ; import java . io . Serializable ; public class DelayPolicy implements Cloneable , Serializable { protected long delay = 1000L ; public DelayPolicy ( ) { } @ Override public String toString ( ) { return "DelayPolicy[delay=" + delay + "]" ; } public DelayPolicy copy ( ) { try { return ( DelayPolicy ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( "Could not clone: " + e , e ) ; } } public DelayPolicy delay ( long delay ) { setDelay ( delay ) ; return this ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } } 	1
package org . apache . camel . language . ognl ; import ognl . Ognl ; import ognl . OgnlContext ; import ognl . OgnlException ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . impl . ExpressionSupport ; import org . apache . camel . language . ExpressionEvaluationException ; import org . apache . camel . language . IllegalSyntaxException ; public class OgnlExpression extends ExpressionSupport < Exchange > { private final String expressionString ; private final Class < ? > type ; private Object expression ; public OgnlExpression ( OgnlLanguage language , String expressionString , Class < ? > type ) { this . expressionString = expressionString ; this . type = type ; try { this . expression = Ognl . parseExpression ( expressionString ) ; } catch ( OgnlException e ) { throw new IllegalSyntaxException ( language , expressionString , e ) ; } } public static OgnlExpression ognl ( String expression ) { return new OgnlExpression ( new OgnlLanguage ( ) , expression , Object . class ) ; } public Object evaluate ( Exchange exchange ) { OgnlContext oglContext = new OgnlContext ( ) ; try { return Ognl . getValue ( expression , oglContext , new RootObject ( exchange ) ) ; } catch ( OgnlException e ) { throw new ExpressionEvaluationException ( this , exchange , e ) ; } } protected String assertionFailureMessage ( Exchange exchange ) { return expressionString ; } } 	0
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; public class CamelInvocationHandler implements InvocationHandler { private final Endpoint endpoint ; private final Producer producer ; private final MethodInfoCache methodInfoCache ; public CamelInvocationHandler ( Endpoint endpoint , Producer producer , MethodInfoCache methodInfoCache ) { this . endpoint = endpoint ; this . producer = producer ; this . methodInfoCache = methodInfoCache ; } public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { BeanInvocation invocation = new BeanInvocation ( method , args ) ; ExchangePattern pattern = ExchangePattern . InOut ; MethodInfo methodInfo = methodInfoCache . getMethodInfo ( method ) ; if ( methodInfo != null ) { pattern = methodInfo . getPattern ( ) ; } BeanExchange exchange = new BeanExchange ( endpoint . getCamelContext ( ) , pattern ) ; exchange . setInvocation ( invocation ) ; producer . process ( exchange ) ; Throwable fault = exchange . getException ( ) ; if ( fault != null ) { throw new InvocationTargetException ( fault ) ; } if ( pattern . isOutCapable ( ) ) { return exchange . getOut ( true ) . getBody ( ) ; } else { return null ; } } } 	1
package org . apache . camel . impl ; import java . lang . reflect . Method ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Consume ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . MessageDriven ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . Service ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . component . bean . ProxyHelper ; import org . apache . camel . util . CamelContextHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class CamelPostProcessorHelper implements CamelContextAware { private static final transient Log LOG = LogFactory . getLog ( CamelPostProcessorHelper . class ) ; @ XmlTransient private CamelContext camelContext ; public CamelPostProcessorHelper ( ) { } public CamelPostProcessorHelper ( CamelContext camelContext ) { this . setCamelContext ( camelContext ) ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public void consumerInjection ( Method method , Object bean ) { MessageDriven annotation = method . getAnnotation ( MessageDriven . class ) ; if ( annotation != null ) { LOG . info ( "Creating a consumer for: " + annotation ) ; subscribeMethod ( method , bean , annotation . uri ( ) , annotation . name ( ) ) ; } Consume consume = method . getAnnotation ( Consume . class ) ; if ( consume != null ) { LOG . info ( "Creating a consumer for: " + consume ) ; subscribeMethod ( method , bean , consume . uri ( ) , consume . ref ( ) ) ; } } protected void subscribeMethod ( Method method , Object bean , String endpointUri , String endpointName ) { String injectionPointName = method . getName ( ) ; Endpoint endpoint = getEndpointInjection ( endpointUri , endpointName , injectionPointName , true ) ; if ( endpoint != null ) { try { Processor processor = createConsumerProcessor ( bean , method , endpoint ) ; LOG . info ( "Created processor: " + processor ) ; Consumer consumer = endpoint . createConsumer ( processor ) ; startService ( consumer ) ; } catch ( Exception e ) { LOG . warn ( e ) ; throw org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ( e ) ; } } } public void startService ( Service service ) throws Exception { CamelContext camelContext = getCamelContext ( ) ; if ( camelContext instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) camelContext ; defaultCamelContext . addService ( service ) ; } else { service . start ( ) ; } } protected Processor createConsumerProcessor ( final Object pojo , final Method method , final Endpoint endpoint ) { BeanProcessor answer = new BeanProcessor ( pojo , getCamelContext ( ) ) ; answer . setMethodObject ( method ) ; return answer ; } protected Endpoint getEndpointInjection ( String uri , String name , String injectionPointName , boolean mandatory ) { return CamelContextHelper . getEndpointInjection ( getCamelContext ( ) , uri , name , injectionPointName , mandatory ) ; } public Object getInjectionValue ( Class < ? > type , String endpointUri , String endpointRef , String injectionPointName ) { if ( type . isAssignableFrom ( ProducerTemplate . class ) ) { Endpoint endpoint = getEndpointInjection ( endpointUri , endpointRef , injectionPointName , false ) ; return new DefaultProducerTemplate ( getCamelContext ( ) , endpoint ) ; } else { Endpoint endpoint = getEndpointInjection ( endpointUri , endpointRef , injectionPointName , true ) ; if ( endpoint != null ) { if ( type . isInstance ( endpoint ) ) { return endpoint ; } else if ( type . isAssignableFrom ( Producer . class ) ) { return createInjectionProducer ( endpoint ) ; } else if ( type . isAssignableFrom ( PollingConsumer . class ) ) { return createInjectionPollingConsumer ( endpoint ) ; } else if ( type . isInterface ( ) ) { try { return ProxyHelper . createProxy ( endpoint , type ) ; } catch ( Exception e ) { throw createProxyInstantiationRuntimeException ( type , endpoint , e ) ; } } else { throw new IllegalArgumentException ( "Invalid type: " + type . getName ( ) + " which cannot be injected via @EndpointInject for " + endpoint ) ; } } return null ; } } protected RuntimeException createProxyInstantiationRuntimeException ( Class < ? > type , Endpoint endpoint , Exception e ) { return new ProxyInstantiationException ( type , endpoint , e ) ; } protected PollingConsumer createInjectionPollingConsumer ( Endpoint endpoint ) { try { PollingConsumer pollingConsumer = endpoint . createPollingConsumer ( ) ; startService ( pollingConsumer ) ; return pollingConsumer ; } catch ( Exception e ) { throw org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ( e ) ; } } protected Producer createInjectionProducer ( Endpoint endpoint ) { try { Producer producer = endpoint . createProducer ( ) ; startService ( producer ) ; return producer ; } catch ( Exception e ) { throw org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ( e ) ; } } } 	0
package org . apache . camel . processor ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . exceptionpolicy . DefaultExceptionPolicyStrategy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyKey ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; public abstract class ErrorHandlerSupport extends ServiceSupport implements ErrorHandler { private Map < ExceptionPolicyKey , ExceptionType > exceptionPolicies = new LinkedHashMap < ExceptionPolicyKey , ExceptionType > ( ) ; private ExceptionPolicyStrategy exceptionPolicy = createDefaultExceptionPolicyStrategy ( ) ; public void addExceptionPolicy ( ExceptionType exceptionType ) { Processor processor = exceptionType . getErrorHandler ( ) ; addChildService ( processor ) ; List < Class > list = exceptionType . getExceptionClasses ( ) ; for ( Class clazz : list ) { ExceptionPolicyKey key = new ExceptionPolicyKey ( clazz , exceptionType . getOnWhen ( ) ) ; exceptionPolicies . put ( key , exceptionType ) ; } } protected boolean customProcessorForException ( Exchange exchange , Throwable exception ) throws Exception { ExceptionType policy = getExceptionPolicy ( exchange , exception ) ; if ( policy != null ) { Processor processor = policy . getErrorHandler ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return true ; } } return false ; } protected ExceptionType getExceptionPolicy ( Exchange exchange , Throwable exception ) { if ( exceptionPolicy == null ) { throw new IllegalStateException ( "The exception policy has not been set" ) ; } return exceptionPolicy . getExceptionPolicy ( exceptionPolicies , exchange , exception ) ; } public void setExceptionPolicy ( ExceptionPolicyStrategy exceptionPolicy ) { this . exceptionPolicy = exceptionPolicy ; } public static ExceptionPolicyStrategy createDefaultExceptionPolicyStrategy ( ) { return new DefaultExceptionPolicyStrategy ( ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "otherwise" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class OtherwiseType extends OutputType < ProcessorType > implements Block { @ Override public String toString ( ) { return "Otherwise[" + getOutputs ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return routeContext . createProcessor ( this ) ; } @ Override public String getShortName ( ) { return "otherwise" ; } @ Override public String getLabel ( ) { return "otherwise" ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . Service ; import org . apache . camel . spi . Synchronization ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; public class DefaultUnitOfWork implements UnitOfWork , Service { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; private String id ; private List < Synchronization > synchronizations ; private List < AsyncCallback > asyncCallbacks ; private CountDownLatch latch ; public DefaultUnitOfWork ( ) { } public void start ( ) throws Exception { } public void stop ( ) throws Exception { if ( synchronizations != null ) { synchronizations . clear ( ) ; } if ( asyncCallbacks != null ) { asyncCallbacks . clear ( ) ; } } public synchronized void addSynchronization ( Synchronization synchronization ) { if ( synchronizations == null ) { synchronizations = new ArrayList < Synchronization > ( ) ; } synchronizations . add ( synchronization ) ; } public synchronized void removeSynchronization ( Synchronization synchronization ) { if ( synchronizations != null ) { synchronizations . remove ( synchronization ) ; } } public void reset ( ) { } public void done ( Exchange exchange ) { if ( synchronizations != null ) { boolean failed = exchange . isFailed ( ) ; for ( Synchronization synchronization : synchronizations ) { if ( failed ) { synchronization . onFailure ( exchange ) ; } else { synchronization . onComplete ( exchange ) ; } } } } public boolean isSynchronous ( ) { return asyncCallbacks == null || asyncCallbacks . isEmpty ( ) ; } public String getId ( ) { if ( id == null ) { id = DEFAULT_ID_GENERATOR . generateId ( ) ; } return id ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; @ XmlRootElement ( name = "inOut" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class InOutType extends SendType < InOutType > { public InOutType ( ) { } public InOutType ( String uri ) { setUri ( uri ) ; } public InOutType ( Endpoint endpoint ) { setEndpoint ( endpoint ) ; } @ Override public String toString ( ) { return "InOut[" + getLabel ( ) + "]" ; } @ Override public String getShortName ( ) { return "inOut" ; } @ Override public ExchangePattern getPattern ( ) { return ExchangePattern . InOut ; } } 	0
package org . apache . camel . processor ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AlreadyStoppedException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DelayProcessorSupport extends DelegateProcessor { private static final transient Log LOG = LogFactory . getLog ( Delayer . class ) ; private CountDownLatch stoppedLatch = new CountDownLatch ( 1 ) ; private boolean fastStop = true ; public DelayProcessorSupport ( Processor processor ) { super ( processor ) ; } public void process ( Exchange exchange ) throws Exception { delay ( exchange ) ; super . process ( exchange ) ; } public boolean isFastStop ( ) { return fastStop ; } public void setFastStop ( boolean fastStop ) { this . fastStop = fastStop ; } protected void doStop ( ) throws Exception { stoppedLatch . countDown ( ) ; super . doStop ( ) ; } protected abstract void delay ( Exchange exchange ) throws Exception ; protected void waitUntil ( long time , Exchange exchange ) throws Exception { while ( true ) { long delay = time - currentSystemTime ( ) ; if ( delay < 0 ) { return ; } else { if ( isFastStop ( ) && ! isRunAllowed ( ) ) { throw new AlreadyStoppedException ( ) ; } try { sleep ( delay ) ; } catch ( InterruptedException e ) { handleSleepInteruptedException ( e ) ; } } } } protected void sleep ( long delay ) throws InterruptedException { if ( delay <= 0 ) { return ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Sleeping for: " + delay + " millis" ) ; } if ( isFastStop ( ) ) { stoppedLatch . await ( delay , TimeUnit . MILLISECONDS ) ; } else { Thread . sleep ( delay ) ; } } protected void handleSleepInteruptedException ( InterruptedException e ) { LOG . debug ( "Sleep interupted: " + e , e ) ; } protected long currentSystemTime ( ) { return System . currentTimeMillis ( ) ; } } 	1
package org . apache . camel . component . jhc ; import java . net . URI ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . HeaderFilterStrategyAware ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . DefaultHeaderFilterStrategy ; import org . apache . camel . spi . HeaderFilterStrategy ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . http . params . BasicHttpParams ; import org . apache . http . params . HttpConnectionParams ; import org . apache . http . params . HttpParams ; import org . apache . http . params . HttpProtocolParams ; public class JhcComponent extends DefaultComponent < JhcExchange > implements HeaderFilterStrategyAware { private static final Log LOG = LogFactory . getLog ( JhcComponent . class ) ; private HttpParams params ; private HeaderFilterStrategy headerFilterStrategy ; public JhcComponent ( ) { setHeaderFilterStrategy ( new JhcHeaderFilterStrategy ( ) ) ; params = new BasicHttpParams ( ) . setIntParameter ( HttpConnectionParams . SO_TIMEOUT , 5000 ) . setIntParameter ( HttpConnectionParams . CONNECTION_TIMEOUT , 10000 ) . setIntParameter ( HttpConnectionParams . SOCKET_BUFFER_SIZE , 8 * 1024 ) . setBooleanParameter ( HttpConnectionParams . STALE_CONNECTION_CHECK , false ) . setBooleanParameter ( HttpConnectionParams . TCP_NODELAY , true ) . setParameter ( HttpProtocolParams . USER_AGENT , "Camel-JhcComponent/1.1" ) ; } public HttpParams getParams ( ) { return params ; } public void setParams ( HttpParams params ) { this . params = params ; } protected Endpoint < JhcExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new JhcEndpoint ( uri , this , new URI ( uri . substring ( uri . indexOf ( ':' ) + 1 ) ) ) ; } public HeaderFilterStrategy getHeaderFilterStrategy ( ) { return headerFilterStrategy ; } public void setHeaderFilterStrategy ( HeaderFilterStrategy strategy ) { headerFilterStrategy = strategy ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . LinkedList ; import java . util . List ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . RejectedExecutionHandler ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . camel . util . concurrent . AtomicExchange ; import org . apache . camel . util . concurrent . CountingLatch ; import static org . apache . camel . util . ObjectHelper . notNull ; public class MulticastProcessor extends ServiceSupport implements Processor { static class ProcessorExchangePair { private final Processor processor ; private final Exchange exchange ; public ProcessorExchangePair ( Processor processor , Exchange exchange ) { this . processor = processor ; this . exchange = exchange ; } public Processor getProcessor ( ) { return processor ; } public Exchange getExchange ( ) { return exchange ; } } private Collection < Processor > processors ; private AggregationStrategy aggregationStrategy ; private boolean isParallelProcessing ; private ThreadPoolExecutor executor ; private final boolean streaming ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; public MulticastProcessor ( Collection < Processor > processors ) { this ( processors , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy ) { this ( processors , aggregationStrategy , false , null ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor executor ) { this ( processors , aggregationStrategy , parallelProcessing , executor , false ) ; } public MulticastProcessor ( Collection < Processor > processors , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor executor , boolean streaming ) { notNull ( processors , "processors" ) ; this . processors = processors ; this . aggregationStrategy = aggregationStrategy ; this . isParallelProcessing = parallelProcessing ; if ( isParallelProcessing ) { if ( executor != null ) { this . executor = executor ; } else { this . executor = new ThreadPoolExecutor ( processors . size ( ) , processors . size ( ) , 0 , TimeUnit . MILLISECONDS , new ArrayBlockingQueue < Runnable > ( processors . size ( ) ) ) ; } } this . streaming = streaming ; } public static < E extends Exchange > Collection < Processor > toProducers ( Collection < Endpoint > endpoints ) throws Exception { Collection < Processor > answer = new ArrayList < Processor > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint . createProducer ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Multicast" + getProcessors ( ) ; } class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; private final Processor processor ; public ProcessCall ( Exchange exchange , Processor processor , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; this . processor = processor ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; callback . done ( false ) ; } else { try { processor . process ( exchange ) ; } catch ( Exception ex ) { exchange . setException ( ex ) ; } callback . done ( false ) ; } } } public void process ( Exchange exchange ) throws Exception { final AtomicExchange result = new AtomicExchange ( ) ; Iterable < ProcessorExchangePair > pairs = createProcessorExchangePairs ( exchange ) ; if ( isParallelProcessing ) { List < Exchange > exchanges = new LinkedList < Exchange > ( ) ; final CountingLatch completedExchanges = new CountingLatch ( ) ; int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; final Exchange subExchange = pair . getExchange ( ) ; updateNewExchange ( subExchange , i , pairs ) ; exchanges . add ( subExchange ) ; completedExchanges . increment ( ) ; ProcessCall call = new ProcessCall ( subExchange , producer , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( streaming && aggregationStrategy != null ) { doAggregate ( result , subExchange ) ; } completedExchanges . decrement ( ) ; } } ) ; executor . execute ( call ) ; i ++ ; } completedExchanges . await ( ) ; if ( ! streaming && aggregationStrategy != null ) { for ( Exchange resultExchange : exchanges ) { doAggregate ( result , resultExchange ) ; } } } else { int i = 0 ; for ( ProcessorExchangePair pair : pairs ) { Processor producer = pair . getProcessor ( ) ; Exchange subExchange = pair . getExchange ( ) ; updateNewExchange ( subExchange , i , pairs ) ; try { producer . process ( subExchange ) ; } catch ( Exception exception ) { subExchange . setException ( exception ) ; } doAggregate ( result , subExchange ) ; i ++ ; } } if ( result . get ( ) != null ) { ExchangeHelper . copyResults ( exchange , result . get ( ) ) ; } } protected synchronized void doAggregate ( AtomicExchange result , Exchange exchange ) { if ( aggregationStrategy != null ) { if ( result . get ( ) == null ) { result . set ( exchange ) ; } else { result . set ( aggregationStrategy . aggregate ( result . get ( ) , exchange ) ) ; } } } protected void updateNewExchange ( Exchange exchange , int i , Iterable < ProcessorExchangePair > allPairs ) { } protected Iterable < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { List < ProcessorExchangePair > result = new ArrayList < ProcessorExchangePair > ( processors . size ( ) ) ; Processor [ ] processorsArray = processors . toArray ( new Processor [ processors . size ( ) ] ) ; for ( int i = 0 ; i < processorsArray . length ; i ++ ) { result . add ( new ProcessorExchangePair ( processorsArray [ i ] , exchange . copy ( ) ) ) ; } return result ; } protected void doStop ( ) throws Exception { shutdown . set ( true ) ; if ( executor != null ) { executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } ServiceHelper . stopServices ( processors ) ; } protected void doStart ( ) throws Exception { shutdown . set ( false ) ; if ( executor != null ) { executor . setRejectedExecutionHandler ( new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor executor ) { ProcessCall call = ( ProcessCall ) runnable ; call . exchange . setException ( new RejectedExecutionException ( ) ) ; call . callback . done ( false ) ; } } ) ; } ServiceHelper . startServices ( processors ) ; } protected boolean isStreaming ( ) { return streaming ; } public Collection < Processor > getProcessors ( ) { return processors ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } } 	1
package org . apache . camel . builder ; import org . apache . camel . Processor ; public interface ProcessorFactory { Processor createProcessor ( ) throws Exception ; } 	0
package org . apache . camel . impl ; import java . io . IOException ; import java . lang . reflect . Constructor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import javax . naming . Context ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . Route ; import org . apache . camel . Routes ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . management . InstrumentationLifecycleStrategy ; import org . apache . camel . management . JmxSystemPropertyKeys ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . processor . interceptor . Delayer ; import org . apache . camel . processor . interceptor . TraceFormatter ; import org . apache . camel . processor . interceptor . Tracer ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ReflectionInjector ; import org . apache . camel . util . SystemHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; public class DefaultCamelContext extends ServiceSupport implements CamelContext , Service { private static final transient Log LOG = LogFactory . getLog ( DefaultCamelContext . class ) ; private static final String NAME_PREFIX = "camel-" ; private static int nameSuffix ; private String name ; private final Map < String , Endpoint > endpoints = new HashMap < String , Endpoint > ( ) ; private final Map < String , Component > components = new HashMap < String , Component > ( ) ; private List < Route > routes ; private List < Service > servicesToClose = new ArrayList < Service > ( ) ; private TypeConverter typeConverter ; private ExchangeConverter exchangeConverter ; private Injector injector ; private ComponentResolver componentResolver ; private boolean autoCreateComponents = true ; private LanguageResolver languageResolver = new DefaultLanguageResolver ( ) ; private Registry registry ; private LifecycleStrategy lifecycleStrategy ; private List < RouteType > routeDefinitions = new ArrayList < RouteType > ( ) ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private Boolean trace ; private Long delay ; private ErrorHandlerBuilder errorHandlerBuilder ; private Map < String , DataFormatType > dataFormats = new HashMap < String , DataFormatType > ( ) ; private Class < ? extends FactoryFinder > factoryFinderClass = FactoryFinder . class ; public DefaultCamelContext ( ) { name = NAME_PREFIX + ++ nameSuffix ; if ( Boolean . getBoolean ( JmxSystemPropertyKeys . DISABLED ) ) { LOG . info ( "JMX is disabled. Using DefaultLifecycleStrategy." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } else { try { LOG . info ( "JMX enabled. Using InstrumentationLifecycleStrategy." ) ; lifecycleStrategy = new InstrumentationLifecycleStrategy ( ) ; } catch ( NoClassDefFoundError e ) { LOG . warn ( "Could not find needed classes for JMX lifecycle strategy." + " Needed class is in spring-context.jar using Spring 2.5 or newer (" + " spring-jmx.jar using Spring 2.0.x)." + " NoClassDefFoundError: " + e . getMessage ( ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not create JMX lifecycle strategy, caused by: " + e . getMessage ( ) ) ; } if ( lifecycleStrategy == null ) { LOG . warn ( "Not possible to use JMX lifecycle strategy. Using DefaultLifecycleStrategy instead." ) ; lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; } } } public DefaultCamelContext ( Context jndiContext ) { this ( ) ; setJndiContext ( jndiContext ) ; } public DefaultCamelContext ( Registry registry ) { this ( ) ; this . registry = registry ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public void addComponent ( String componentName , final Component component ) { if ( component == null ) { throw new IllegalArgumentException ( "Component cannot be null" ) ; } synchronized ( components ) { if ( components . containsKey ( componentName ) ) { throw new IllegalArgumentException ( "Component previously added: " + componentName ) ; } component . setCamelContext ( this ) ; components . put ( componentName , component ) ; } } public Component getComponent ( String name ) { synchronized ( components ) { Component component = components . get ( name ) ; if ( component == null && autoCreateComponents ) { try { component = getComponentResolver ( ) . resolveComponent ( name , this ) ; if ( component != null ) { addComponent ( name , component ) ; if ( isStarted ( ) ) { startServices ( component ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( "Could not auto create component: " + name , e ) ; } } return component ; } } public < T extends Component > T getComponent ( String name , Class < T > componentType ) { Component component = getComponent ( name ) ; if ( componentType . isInstance ( component ) ) { return componentType . cast ( component ) ; } else { throw new IllegalArgumentException ( "The component is not of type: " + componentType + " but is: " + component ) ; } } public Component removeComponent ( String componentName ) { synchronized ( components ) { return components . remove ( componentName ) ; } } public Component getOrCreateComponent ( String componentName , Callable < Component > factory ) { synchronized ( components ) { Component component = components . get ( componentName ) ; if ( component == null ) { try { component = factory . call ( ) ; if ( component == null ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component, it returned null." ) ; } components . put ( componentName , component ) ; component . setCamelContext ( this ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component" , e ) ; } } return component ; } } public Collection < Endpoint > getEndpoints ( ) { synchronized ( endpoints ) { return new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } } public Collection < Endpoint > getEndpoints ( String uri ) { Collection < Endpoint > answer = new ArrayList < Endpoint > ( ) ; Collection < Endpoint > coll ; synchronized ( endpoints ) { Endpoint ep = endpoints . get ( uri ) ; if ( ep != null ) { answer . add ( ep ) ; return answer ; } coll = new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } for ( Endpoint ep : coll ) { if ( ! ep . isSingleton ( ) && uri . equals ( ep . getEndpointUri ( ) ) ) { answer . add ( ep ) ; } } return answer ; } public Collection < Endpoint > getSingletonEndpoints ( ) { Collection < Endpoint > answer = new ArrayList < Endpoint > ( ) ; Collection < Endpoint > coll = getEndpoints ( ) ; for ( Endpoint ep : coll ) { if ( ep . isSingleton ( ) ) { answer . add ( ep ) ; } } return answer ; } public Endpoint addEndpoint ( String uri , Endpoint endpoint ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { startServices ( endpoint ) ; oldEndpoint = endpoints . remove ( uri ) ; endpoints . put ( CamelContextHelper . getEndpointKey ( uri , endpoint ) , endpoint ) ; if ( oldEndpoint != null ) { stopServices ( oldEndpoint ) ; } } return oldEndpoint ; } public Collection < Endpoint > removeEndpoints ( String uri ) throws Exception { Collection < Endpoint > answer = new ArrayList < Endpoint > ( ) ; synchronized ( endpoints ) { Endpoint oldEndpoint = endpoints . remove ( uri ) ; if ( oldEndpoint != null ) { answer . add ( oldEndpoint ) ; stopServices ( oldEndpoint ) ; } else { for ( Map . Entry entry : endpoints . entrySet ( ) ) { oldEndpoint = ( Endpoint ) entry . getValue ( ) ; if ( ! oldEndpoint . isSingleton ( ) && uri . equals ( oldEndpoint . getEndpointUri ( ) ) ) { answer . add ( oldEndpoint ) ; stopServices ( oldEndpoint ) ; endpoints . remove ( entry . getKey ( ) ) ; } } } } return answer ; } public Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception { return addEndpoint ( uri , endpoint ) ; } public Endpoint removeSingletonEndpoint ( String uri ) throws Exception { Collection < Endpoint > answer = removeEndpoints ( uri ) ; return ( Endpoint ) ( answer . size ( ) > 0 ? answer . toArray ( ) [ 0 ] : null ) ; } public Endpoint getEndpoint ( String uri ) { Endpoint < ? > answer ; synchronized ( endpoints ) { answer = endpoints . get ( uri ) ; if ( answer == null ) { try { String splitURI [ ] = ObjectHelper . splitOnCharacter ( uri , ":" , 2 ) ; if ( splitURI [ 1 ] != null ) { String scheme = splitURI [ 0 ] ; Component < ? > component = getComponent ( scheme ) ; if ( component != null ) { answer = component . createEndpoint ( uri ) ; if ( answer != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( uri + " converted to endpoint: " + answer + " by component: " + component ) ; } } } if ( answer == null ) { answer = createEndpoint ( uri ) ; } if ( answer != null ) { addService ( answer ) ; endpoints . put ( CamelContextHelper . getEndpointKey ( uri , answer ) , answer ) ; lifecycleStrategy . onEndpointAdd ( answer ) ; } } catch ( Exception e ) { LOG . debug ( "Failed to resolve endpoint " + uri + ". Reason: " + e , e ) ; throw new ResolveEndpointFailedException ( uri , e ) ; } } } return answer ; } public < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) { Endpoint endpoint = getEndpoint ( name ) ; if ( endpointType . isInstance ( endpoint ) ) { return endpointType . cast ( endpoint ) ; } else { throw new IllegalArgumentException ( "The endpoint is not of type: " + endpointType + " but is: " + endpoint ) ; } } public List < Route > getRoutes ( ) { if ( routes == null ) { routes = new ArrayList < Route > ( ) ; } return routes ; } public void setRoutes ( List < Route > routes ) { this . routes = routes ; throw new UnsupportedOperationException ( "overriding existing routes is not supported yet, use addRoutes instead" ) ; } public void addRoutes ( Collection < Route > routes ) throws Exception { if ( this . routes == null ) { this . routes = new ArrayList < Route > ( ) ; } if ( routes != null ) { this . routes . addAll ( routes ) ; lifecycleStrategy . onRoutesAdd ( routes ) ; if ( shouldStartRoutes ( ) ) { startRoutes ( routes ) ; } } } public void addRoutes ( Routes builder ) throws Exception { builder . setContext ( this ) ; List < Route > routeList = builder . getRouteList ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Adding routes from: " + builder + " routes: " + routeList ) ; } addRoutes ( routeList ) ; } public void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception { this . routeDefinitions . addAll ( routeDefinitions ) ; if ( shouldStartRoutes ( ) ) { startRouteDefinitions ( routeDefinitions ) ; } } public void addService ( Object object ) throws Exception { if ( object instanceof Service ) { Service service = ( Service ) object ; getLifecycleStrategy ( ) . onServiceAdd ( this , service ) ; service . start ( ) ; servicesToClose . add ( service ) ; } } public Language resolveLanguage ( String language ) { return getLanguageResolver ( ) . resolveLanguage ( language , this ) ; } public ExchangeConverter getExchangeConverter ( ) { if ( exchangeConverter == null ) { exchangeConverter = createExchangeConverter ( ) ; } return exchangeConverter ; } public void setExchangeConverter ( ExchangeConverter exchangeConverter ) { this . exchangeConverter = exchangeConverter ; } public TypeConverter getTypeConverter ( ) { if ( typeConverter == null ) { typeConverter = createTypeConverter ( ) ; } return typeConverter ; } public void setTypeConverter ( TypeConverter typeConverter ) { this . typeConverter = typeConverter ; } public Injector getInjector ( ) { if ( injector == null ) { injector = createInjector ( ) ; } return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } public ComponentResolver getComponentResolver ( ) { if ( componentResolver == null ) { componentResolver = createComponentResolver ( ) ; } return componentResolver ; } public void setComponentResolver ( ComponentResolver componentResolver ) { this . componentResolver = componentResolver ; } public LanguageResolver getLanguageResolver ( ) { return languageResolver ; } public void setLanguageResolver ( LanguageResolver languageResolver ) { this . languageResolver = languageResolver ; } public boolean isAutoCreateComponents ( ) { return autoCreateComponents ; } public void setAutoCreateComponents ( boolean autoCreateComponents ) { this . autoCreateComponents = autoCreateComponents ; } public Registry getRegistry ( ) { if ( registry == null ) { registry = createRegistry ( ) ; } return registry ; } public void setJndiContext ( Context jndiContext ) { setRegistry ( new JndiRegistry ( jndiContext ) ) ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public LifecycleStrategy getLifecycleStrategy ( ) { return lifecycleStrategy ; } public void setLifecycleStrategy ( LifecycleStrategy lifecycleStrategy ) { this . lifecycleStrategy = lifecycleStrategy ; } public List < RouteType > getRouteDefinitions ( ) { return routeDefinitions ; } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public boolean getTrace ( ) { final Boolean value = getTracing ( ) ; if ( value != null ) { return value ; } else { return SystemHelper . isSystemProperty ( "camel.trace" ) ; } } public Boolean getTracing ( ) { return trace ; } public void setTrace ( Boolean trace ) { this . trace = trace ; } public long getDelay ( ) { final Long value = getDelaying ( ) ; if ( value != null ) { return value ; } else { String prop = SystemHelper . getSystemProperty ( "camel.delay" ) ; return prop != null ? Long . getLong ( prop ) : 0 ; } } public Long getDelaying ( ) { return delay ; } public void setDelay ( Long delay ) { this . delay = delay ; } public < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) { return new DefaultProducerTemplate < E > ( this ) ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void doStart ( ) throws Exception { LOG . info ( "Apache Camel " + getVersion ( ) + " (CamelContext:" + getName ( ) + ") is starting" ) ; if ( getTrace ( ) ) { if ( Tracer . getTracer ( this ) == null ) { Tracer tracer = new Tracer ( ) ; TraceFormatter formatter = this . getRegistry ( ) . lookup ( "traceFormatter" , TraceFormatter . class ) ; if ( formatter != null ) { tracer . setFormatter ( formatter ) ; } addInterceptStrategy ( tracer ) ; } } if ( getDelay ( ) > 0 ) { if ( Delayer . getDelayer ( this ) == null ) { addInterceptStrategy ( new Delayer ( getDelay ( ) ) ) ; } } lifecycleStrategy . onContextStart ( this ) ; forceLazyInitialization ( ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { startServices ( component ) ; } } startRouteDefinitions ( routeDefinitions ) ; startRoutes ( routes ) ; LOG . info ( "Apache Camel " + getVersion ( ) + " (CamelContext:" + getName ( ) + ") started" ) ; } protected void startRouteDefinitions ( Collection < RouteType > list ) throws Exception { if ( list != null ) { Collection < Route > routes = new ArrayList < Route > ( ) ; for ( RouteType route : list ) { route . addRoutes ( this , routes ) ; } addRoutes ( routes ) ; } } protected void doStop ( ) throws Exception { stopServices ( servicesToClose ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { stopServices ( component ) ; } } } protected void startRoutes ( Collection < Route > routeList ) throws Exception { if ( routeList != null ) { for ( Route < Exchange > route : routeList ) { List < Service > services = route . getServicesForRoute ( ) ; for ( Service service : services ) { addService ( service ) ; } } } } protected void forceLazyInitialization ( ) { getExchangeConverter ( ) ; getInjector ( ) ; getLanguageResolver ( ) ; getTypeConverter ( ) ; } protected ExchangeConverter createExchangeConverter ( ) { return new DefaultExchangeConverter ( ) ; } protected TypeConverter createTypeConverter ( ) { return new DefaultTypeConverter ( getInjector ( ) ) ; } protected Injector createInjector ( ) { FactoryFinder finder = createFactoryFinder ( ) ; try { return ( Injector ) finder . newInstance ( "Injector" ) ; } catch ( NoFactoryAvailableException e ) { return new ReflectionInjector ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } protected ComponentResolver createComponentResolver ( ) { return new DefaultComponentResolver ( ) ; } protected Registry createRegistry ( ) { return new JndiRegistry ( ) ; } protected Endpoint createEndpoint ( String uri ) { Object value = getRegistry ( ) . lookup ( uri ) ; if ( value instanceof Endpoint ) { return ( Endpoint ) value ; } else if ( value instanceof Processor ) { return new ProcessorEndpoint ( uri , this , ( Processor ) value ) ; } else if ( value != null ) { return convertBeanToEndpoint ( uri , value ) ; } return null ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { throw new IllegalArgumentException ( "uri: " + uri + " bean: " + bean + " could not be converted to an Endpoint" ) ; } protected boolean shouldStartRoutes ( ) { return isStarted ( ) && ! isStarting ( ) ; } public void setDataFormats ( Map < String , DataFormatType > dataFormats ) { this . dataFormats = dataFormats ; } public Map < String , DataFormatType > getDataFormats ( ) { return dataFormats ; } public void setFactoryFinderClass ( Class < ? extends FactoryFinder > finderClass ) { factoryFinderClass = finderClass ; } public FactoryFinder createFactoryFinder ( ) { try { return factoryFinderClass . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public FactoryFinder createFactoryFinder ( String path ) { try { Constructor < ? extends FactoryFinder > constructor ; constructor = factoryFinderClass . getConstructor ( String . class ) ; return constructor . newInstance ( path ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } } 	1
package org . apache . camel . component . jcr ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . DefaultExchange ; public class JcrComponent extends DefaultComponent < DefaultExchange > { public static final String NODE_NAME = "org.apache.camel.component.jcr.node_name" ; @ Override @ SuppressWarnings ( "unchecked" ) protected Endpoint < DefaultExchange > createEndpoint ( String uri , String remaining , Map properties ) throws Exception { return new JcrEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . util . CollectionHelper ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class Splitter extends MulticastProcessor implements Processor { public static final String SPLIT_SIZE = "org.apache.camel.splitSize" ; public static final String SPLIT_COUNTER = "org.apache.camel.splitCounter" ; private final Expression expression ; public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy ) { this ( expression , destination , aggregationStrategy , false , null , false ) ; } public Splitter ( Expression expression , Processor destination , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor , boolean streaming ) { super ( Collections . singleton ( destination ) , aggregationStrategy , parallelProcessing , threadPoolExecutor , streaming ) ; this . expression = expression ; notNull ( expression , "expression" ) ; notNull ( destination , "destination" ) ; } @ Override public String toString ( ) { return "Splitter[on: " + expression + " to: " + getProcessors ( ) . iterator ( ) . next ( ) + " aggregate: " + getAggregationStrategy ( ) + "]" ; } @ Override protected Iterable < ProcessorExchangePair > createProcessorExchangePairs ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; if ( isStreaming ( ) ) { return createProcessorExchangePairsIterable ( exchange , value ) ; } else { return createProcessorExchangePairsList ( exchange , value ) ; } } private Iterable < ProcessorExchangePair > createProcessorExchangePairsIterable ( final Exchange exchange , Object value ) { final Iterator iterator = ObjectHelper . createIterator ( value ) ; return new Iterable ( ) { public Iterator iterator ( ) { return new Iterator ( ) { public boolean hasNext ( ) { return iterator . hasNext ( ) ; } public Object next ( ) { Object part = iterator . next ( ) ; Exchange newExchange = exchange . copy ( ) ; Message in = newExchange . getIn ( ) ; in . setBody ( part ) ; return new ProcessorExchangePair ( getProcessors ( ) . iterator ( ) . next ( ) , newExchange ) ; } public void remove ( ) { throw new UnsupportedOperationException ( "remove is not supported by this iterator" ) ; } } ; } } ; } private Iterable < ProcessorExchangePair > createProcessorExchangePairsList ( Exchange exchange , Object value ) { List < ProcessorExchangePair > result ; Integer collectionSize = CollectionHelper . size ( value ) ; if ( collectionSize != null ) { result = new ArrayList < ProcessorExchangePair > ( collectionSize ) ; } else { result = new ArrayList < ProcessorExchangePair > ( ) ; } Iterator < Object > iter = ObjectHelper . createIterator ( value ) ; while ( iter . hasNext ( ) ) { Object part = iter . next ( ) ; Exchange newExchange = exchange . copy ( ) ; Message in = newExchange . getIn ( ) ; in . setBody ( part ) ; result . add ( new ProcessorExchangePair ( getProcessors ( ) . iterator ( ) . next ( ) , newExchange ) ) ; } return result ; } @ Override protected void updateNewExchange ( Exchange exchange , int i , Iterable < ProcessorExchangePair > allPairs ) { exchange . getIn ( ) . setHeader ( SPLIT_COUNTER , i ) ; if ( allPairs instanceof Collection ) { exchange . getIn ( ) . setHeader ( SPLIT_SIZE , ( ( Collection ) allPairs ) . size ( ) ) ; } } } 	1
package org . apache . camel . component . atom ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import org . apache . abdera . Abdera ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Feed ; import org . apache . abdera . parser . ParseException ; import org . apache . abdera . parser . Parser ; public final class AtomUtils { private AtomUtils ( ) { } public static Parser getAtomParser ( ) { return Abdera . getInstance ( ) . getParser ( ) ; } public static Document < Feed > parseDocument ( String uri ) throws IOException , ParseException { InputStream in = new URL ( uri ) . openStream ( ) ; return getAtomParser ( ) . parse ( in ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Producer ; import org . apache . camel . Service ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SendProcessor extends ServiceSupport implements AsyncProcessor , Service { private static final transient Log LOG = LogFactory . getLog ( SendProcessor . class ) ; private Endpoint destination ; private Producer producer ; private AsyncProcessor processor ; private ExchangePattern pattern ; public SendProcessor ( Endpoint destination ) { if ( destination == null ) { throw new IllegalArgumentException ( "Endpoint cannot be null!" ) ; } this . destination = destination ; } public SendProcessor ( Endpoint destination , ExchangePattern pattern ) { this ( destination ) ; this . pattern = pattern ; } @ Override public String toString ( ) { return "sendTo(" + destination + ( pattern != null ? " " + pattern : "" ) + ")" ; } public void process ( Exchange exchange ) throws Exception { if ( producer == null ) { if ( isStopped ( ) ) { LOG . warn ( "Ignoring exchange sent after processor is stopped: " + exchange ) ; } else { throw new IllegalStateException ( "No producer, this processor has not been started!" ) ; } } else { configureExchange ( exchange ) ; producer . process ( exchange ) ; } } public boolean process ( Exchange exchange , AsyncCallback callback ) { if ( producer == null ) { if ( isStopped ( ) ) { LOG . warn ( "Ignoring exchange sent after processor is stopped: " + exchange ) ; } else { exchange . setException ( new IllegalStateException ( "No producer, this processor has not been started!" ) ) ; } callback . done ( true ) ; return true ; } else { configureExchange ( exchange ) ; return processor . process ( exchange , callback ) ; } } public Endpoint getDestination ( ) { return destination ; } protected void doStart ( ) throws Exception { this . producer = destination . createProducer ( ) ; this . producer . start ( ) ; this . processor = AsyncProcessorTypeConverter . convert ( producer ) ; } protected void doStop ( ) throws Exception { if ( producer != null ) { try { producer . stop ( ) ; } finally { producer = null ; processor = null ; } } } protected void configureExchange ( Exchange exchange ) { if ( pattern != null ) { exchange . setPattern ( pattern ) ; } } } 	1
package org . apache . camel . component . stream ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . net . URL ; import java . net . URLConnection ; import java . nio . charset . Charset ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class StreamProducer extends DefaultProducer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( StreamProducer . class ) ; private static final String TYPES = "out,err,file,header,url" ; private static final String INVALID_URI = "Invalid uri, valid form: 'stream:{" + TYPES + "}'" ; private static final List < String > TYPES_LIST = Arrays . asList ( TYPES . split ( "," ) ) ; private OutputStream outputStream = System . out ; private StreamEndpoint endpoint ; private String uri ; public StreamProducer ( StreamEndpoint endpoint , String uri ) throws Exception { super ( endpoint ) ; this . endpoint = endpoint ; validateUri ( uri ) ; } @ Override public void doStop ( ) throws Exception { super . doStop ( ) ; } public void process ( Exchange exchange ) throws Exception { delay ( endpoint . getDelay ( ) ) ; if ( "out" . equals ( uri ) ) { outputStream = System . out ; } else if ( "err" . equals ( uri ) ) { outputStream = System . err ; } else if ( "file" . equals ( uri ) ) { outputStream = resolveStreamFromFile ( ) ; } else if ( "header" . equals ( uri ) ) { outputStream = resolveStreamFromHeader ( exchange . getIn ( ) . getHeader ( "stream" ) , exchange ) ; } else if ( "url" . equals ( uri ) ) { outputStream = resolveStreamFromUrl ( ) ; } writeToStream ( exchange ) ; } private OutputStream resolveStreamFromUrl ( ) throws IOException { String u = endpoint . getUrl ( ) ; URL url = new URL ( u ) ; URLConnection c = url . openConnection ( ) ; return c . getOutputStream ( ) ; } private OutputStream resolveStreamFromFile ( ) throws IOException { String fileName = endpoint . getFile ( ) != null ? endpoint . getFile ( ) . trim ( ) : "_file" ; File f = new File ( fileName ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to file: " + f ) ; } f . createNewFile ( ) ; return new FileOutputStream ( f ) ; } private OutputStream resolveStreamFromHeader ( Object o , Exchange exchange ) throws CamelExchangeException { if ( o != null && o instanceof OutputStream ) { return ( OutputStream ) o ; } else { throw new CamelExchangeException ( "Expected OutputStream in header('stream'), found: " + o , exchange ) ; } } private void delay ( long ms ) throws InterruptedException { if ( ms == 0 ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Delaying " + ms + " millis" ) ; } Thread . sleep ( ms ) ; } private void writeToStream ( Exchange exchange ) throws IOException , CamelExchangeException { Object body = exchange . getIn ( ) . getBody ( ) ; if ( body instanceof String ) { Charset charset = endpoint . getCharset ( ) ; Writer writer = new OutputStreamWriter ( outputStream , charset ) ; BufferedWriter bw = new BufferedWriter ( writer ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Writing as text: " + body + " to " + outputStream + " using encoding:" + charset ) ; } bw . write ( ( String ) body ) ; bw . write ( "\n" ) ; bw . flush ( ) ; } else if ( body instanceof byte [ ] ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Writing as text: " + body + " to " + outputStream ) ; } outputStream . write ( ( byte [ ] ) body ) ; } else { throw new CamelExchangeException ( "The body is neither a String or byte array. " + "Can not write body to output stream" , exchange ) ; } } private void validateUri ( String uri ) throws Exception { String [ ] s = uri . split ( ":" ) ; if ( s . length < 2 ) { throw new IllegalArgumentException ( INVALID_URI ) ; } String [ ] t = s [ 1 ] . split ( "\\?" ) ; if ( t . length < 1 ) { throw new IllegalArgumentException ( INVALID_URI ) ; } this . uri = t [ 0 ] . trim ( ) ; if ( ! TYPES_LIST . contains ( this . uri ) ) { throw new IllegalArgumentException ( INVALID_URI ) ; } } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandler extends ErrorHandlerSupport { private Processor output ; private Log log ; private LoggingLevel level ; public LoggingErrorHandler ( Processor output ) { this ( output , LogFactory . getLog ( LoggingErrorHandler . class ) , LoggingLevel . INFO ) ; } public LoggingErrorHandler ( Processor output , Log log , LoggingLevel level ) { this . output = output ; this . log = log ; this . level = level ; } @ Override public String toString ( ) { return "LoggingErrorHandler[" + output + "]" ; } public void process ( Exchange exchange ) throws Exception { Throwable error = null ; try { output . process ( exchange ) ; if ( exchange . getException ( ) != null ) { error = exchange . getException ( ) ; } } catch ( Throwable e ) { error = e ; } if ( error != null ) { if ( ! customProcessorForException ( exchange , error ) ) { logError ( exchange , error ) ; } } } public Processor getOutput ( ) { return output ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } protected void logError ( Exchange exchange , Throwable e ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange , e ) , e ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange , e ) , e ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange , e ) , e ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange , e ) , e ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange , e ) , e ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange , e ) , e ) ; } } protected Object logMessage ( Exchange exchange , Throwable e ) { return e + " while processing exchange: " + exchange ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( output ) ; } } 	1
package org . apache . camel . spring ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . model . IdentifiedType ; @ XmlRootElement ( name = "jmxAgent" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CamelJMXAgentType extends IdentifiedType { @ XmlAttribute ( required = false ) private Boolean disabled = Boolean . FALSE ; @ XmlAttribute ( required = false ) private Integer registryPort ; @ XmlAttribute ( required = false ) private Integer connectorPort ; @ XmlAttribute ( required = false ) private String mbeanServerDefaultDomain ; @ XmlAttribute ( required = false ) private String mbeanObjectDomainName ; @ XmlAttribute ( required = false ) private String serviceUrlPath ; @ XmlAttribute ( required = false ) private Boolean createConnector = Boolean . TRUE ; @ XmlAttribute ( required = false ) private Boolean usePlatformMBeanServer = Boolean . TRUE ; public Integer getConnectorPort ( ) { return connectorPort ; } public void setConnectorPort ( Integer value ) { connectorPort = value ; } public Integer getRegistryPort ( ) { return registryPort ; } public void setRegistryPort ( Integer value ) { registryPort = value ; } public String getMbeanServerDefaultDomain ( ) { return mbeanServerDefaultDomain ; } public void setMbeanServerDefaultDomain ( String value ) { mbeanServerDefaultDomain = value ; } public String getMbeanObjectDomainName ( ) { return mbeanObjectDomainName ; } public void setMbeanObjectDomainName ( String value ) { mbeanObjectDomainName = value ; } public String getServiceUrlPath ( ) { return serviceUrlPath ; } public void setServiceUrlPath ( String value ) { serviceUrlPath = value ; } public Boolean isCreateConnector ( ) { return createConnector ; } public void setCreateConnector ( Boolean value ) { createConnector = value != null ? value : Boolean . FALSE ; } public Boolean isUsePlatformMBeanServer ( ) { return usePlatformMBeanServer ; } public void setUsePlatformMBeanServer ( Boolean value ) { usePlatformMBeanServer = value != null ? value : Boolean . FALSE ; } public Boolean isDisabled ( ) { return disabled ; } public void setDisabled ( Boolean value ) { disabled = value != null ? value : Boolean . FALSE ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . processor . ErrorHandlerSupport ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . processor . interceptor . StreamCaching ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannelBuilder extends ErrorHandlerBuilderSupport { private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; private Processor onRedelivery ; private ExceptionPolicyStrategy exceptionPolicyStrategy = ErrorHandlerSupport . createDefaultExceptionPolicyStrategy ( ) ; private ProcessorFactory deadLetterFactory ; private Processor defaultDeadLetterEndpoint ; private Expression defaultDeadLetterEndpointExpression ; private String defaultDeadLetterEndpointUri = "log:org.apache.camel.DeadLetterChannel?level=error" ; private Logger logger = DeadLetterChannel . createDefaultLogger ( ) ; public DeadLetterChannelBuilder ( ) { } public DeadLetterChannelBuilder ( Processor processor ) { this ( new ConstantProcessorBuilder ( processor ) ) ; } public DeadLetterChannelBuilder ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public ErrorHandlerBuilder copy ( ) { DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( deadLetterFactory ) ; answer . setRedeliveryPolicy ( getRedeliveryPolicy ( ) . copy ( ) ) ; return answer ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { Processor deadLetter = getDeadLetterFactory ( ) . createProcessor ( ) ; DeadLetterChannel answer = new DeadLetterChannel ( processor , deadLetter , onRedelivery , getRedeliveryPolicy ( ) , getLogger ( ) , getExceptionPolicyStrategy ( ) ) ; StreamCaching . enable ( routeContext ) ; configure ( answer ) ; return answer ; } public DeadLetterChannelBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public DeadLetterChannelBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public DeadLetterChannelBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { getRedeliveryPolicy ( ) . maximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public DeadLetterChannelBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public DeadLetterChannelBuilder retriesExhaustedLogLevel ( LoggingLevel retriesExhaustedLogLevel ) { getRedeliveryPolicy ( ) . setRetriesExhaustedLogLevel ( retriesExhaustedLogLevel ) ; return this ; } public DeadLetterChannelBuilder retryAttemptedLogLevel ( LoggingLevel retryAttemptedLogLevel ) { getRedeliveryPolicy ( ) . setRetryAttemptedLogLevel ( retryAttemptedLogLevel ) ; return this ; } public DeadLetterChannelBuilder logger ( Logger logger ) { setLogger ( logger ) ; return this ; } public DeadLetterChannelBuilder loggingLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; return this ; } public DeadLetterChannelBuilder log ( Log log ) { getLogger ( ) . setLog ( log ) ; return this ; } public DeadLetterChannelBuilder log ( String log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder log ( Class log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder exceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { setExceptionPolicyStrategy ( exceptionPolicyStrategy ) ; return this ; } public DeadLetterChannelBuilder onRedelivery ( Processor processor ) { setOnRedelivery ( processor ) ; return this ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ProcessorFactory getDeadLetterFactory ( ) { if ( deadLetterFactory == null ) { deadLetterFactory = new ProcessorFactory ( ) { public Processor createProcessor ( ) { return getDefaultDeadLetterEndpoint ( ) ; } } ; } return deadLetterFactory ; } public void setDeadLetterFactory ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public Processor getDefaultDeadLetterEndpoint ( ) { if ( defaultDeadLetterEndpoint == null ) { defaultDeadLetterEndpoint = new RecipientList ( getDefaultDeadLetterEndpointExpression ( ) ) ; } return defaultDeadLetterEndpoint ; } public void setDefaultDeadLetterEndpoint ( Processor defaultDeadLetterEndpoint ) { this . defaultDeadLetterEndpoint = defaultDeadLetterEndpoint ; } public Expression getDefaultDeadLetterEndpointExpression ( ) { if ( defaultDeadLetterEndpointExpression == null ) { defaultDeadLetterEndpointExpression = ExpressionBuilder . constantExpression ( getDefaultDeadLetterEndpointUri ( ) ) ; } return defaultDeadLetterEndpointExpression ; } public void setDefaultDeadLetterEndpointExpression ( Expression defaultDeadLetterEndpointExpression ) { this . defaultDeadLetterEndpointExpression = defaultDeadLetterEndpointExpression ; } public String getDefaultDeadLetterEndpointUri ( ) { return defaultDeadLetterEndpointUri ; } public void setDefaultDeadLetterEndpointUri ( String defaultDeadLetterEndpointUri ) { this . defaultDeadLetterEndpointUri = defaultDeadLetterEndpointUri ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } public ExceptionPolicyStrategy getExceptionPolicyStrategy ( ) { return exceptionPolicyStrategy ; } public void setExceptionPolicyStrategy ( ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . exceptionPolicyStrategy = exceptionPolicyStrategy ; } public Processor getOnRedelivery ( ) { return onRedelivery ; } public void setOnRedelivery ( Processor onRedelivery ) { this . onRedelivery = onRedelivery ; } @ Override public String toString ( ) { return "DeadLetterChannelBuilder(" + ( deadLetterFactory != null ? deadLetterFactory : defaultDeadLetterEndpoint ) + ")" ; } } 	1
package org . apache . camel . component . jhc ; import org . apache . camel . CamelContext ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; public class JhcExchange extends DefaultExchange { public JhcExchange ( CamelContext context ) { super ( context ) ; } public JhcExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ProducerCache ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RoutingSlipType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . notNull ; public class RoutingSlip extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( RoutingSlip . class ) ; private final String header ; private final String uriDelimiter ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RoutingSlip ( String header ) { this ( header , RoutingSlipType . DEFAULT_DELIMITER ) ; } public RoutingSlip ( String header , String uriDelimiter ) { notNull ( header , "header" ) ; notNull ( uriDelimiter , "uriDelimiter" ) ; this . header = header ; this . uriDelimiter = uriDelimiter ; } @ Override public String toString ( ) { return "RoutingSlip[header=" + header + " uriDelimiter=" + uriDelimiter + "]" ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getIn ( ) ; String [ ] recipients = recipients ( message ) ; Exchange current = exchange ; for ( String nextRecipient : recipients ) { Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , nextRecipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; Exchange ex = current . newInstance ( ) ; updateRoutingSlip ( current ) ; copyOutToIn ( ex , current ) ; producer . process ( ex ) ; current = ex ; } ExchangeHelper . copyResults ( exchange , current ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } private void updateRoutingSlip ( Exchange current ) { Message message = getResultMessage ( current ) ; message . setHeader ( header , removeFirstElement ( recipients ( message ) ) ) ; } private Message getResultMessage ( Exchange exchange ) { Message message = exchange . getOut ( false ) ; if ( message == null ) { message = exchange . getIn ( ) ; } return message ; } private String [ ] recipients ( Message message ) { Object headerValue = message . getHeader ( header ) ; if ( headerValue != null && ! headerValue . equals ( "" ) ) { return headerValue . toString ( ) . split ( uriDelimiter ) ; } return new String [ ] { } ; } private String removeFirstElement ( String [ ] elements ) { CollectionStringBuffer updatedElements = new CollectionStringBuffer ( uriDelimiter ) ; for ( int i = 1 ; i < elements . length ; i ++ ) { updatedElements . append ( elements [ i ] ) ; } return updatedElements . toString ( ) ; } private void copyOutToIn ( Exchange result , Exchange source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } result . setIn ( getResultMessage ( source ) ) ; result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } 	1
package org . apache . camel . component . uface ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . Collection ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . DelegateLifecycleStrategy ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; import org . eclipse . core . databinding . observable . Realm ; import org . eclipse . core . databinding . observable . list . IObservableList ; import org . eclipse . core . databinding . observable . list . WritableList ; import org . eclipse . core . databinding . observable . value . WritableValue ; import org . ufacekit . model . ModelHelper ; import org . ufacekit . ui . AttributeDescriptor ; import org . ufacekit . ui . UIComposite ; import org . ufacekit . ui . UIFactory ; import org . ufacekit . ui . beanform . BeanForm ; import org . ufacekit . ui . controls . CellLabelProvider ; import org . ufacekit . ui . controls . UITable ; import org . ufacekit . ui . controls . UITableColumn ; import org . ufacekit . ui . layouts . GridLayoutData ; public class UFaceBrowser { private final DefaultCamelContext camelContext ; private IObservableList endpoints ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; public UFaceBrowser ( DefaultCamelContext camelContext ) { ObjectHelper . notNull ( camelContext , "camelContext" ) ; this . camelContext = camelContext ; this . endpoints = new WritableList ( Realm . getDefault ( ) ) ; List < BrowsableEndpoint > list = CamelContextHelper . getSingletonEndpoints ( camelContext , BrowsableEndpoint . class ) ; for ( BrowsableEndpoint endpoint : list ) { if ( ! endpoints . contains ( endpoint ) ) { endpoints . add ( endpoint ) ; } } camelContext . setLifecycleStrategy ( new DelegateLifecycleStrategy ( camelContext . getLifecycleStrategy ( ) ) { @ Override public void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) { super . onEndpointAdd ( endpoint ) ; if ( endpoint instanceof BrowsableEndpoint ) { onBrowsableEndpoint ( ( BrowsableEndpoint ) endpoint ) ; } } } ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public IObservableList getEndpoints ( ) { return endpoints ; } public DefaultCamelContext getCamelContext ( ) { return camelContext ; } public void createBrowserUI ( UIComposite root ) { UIFactory ui = root . getFactory ( ) ; UIComposite splitter = ui . newHorizontalSplitPanel ( root , new GridLayoutData ( GridLayoutData . ALIGN_CENTER , GridLayoutData . ALIGN_CENTER ) ) ; UITable tree = createEndpointTableUI ( splitter ) ; BeanForm selectionForm = new BeanForm ( ) ; UITable table = ui . newTable ( splitter , new UITable . TableUIInfo ( new GridLayoutData ( GridLayoutData . ALIGN_FILL , GridLayoutData . ALIGN_FILL , true , true ) ) ) ; selectionForm . add ( table , new UITable . TableBindingInfo ( selectionForm . detailList ( "exchanges" , Collection . class ) ) ) ; ui . newTableColumn ( table , new UITableColumn . TableColumnUIInfo ( null , new CellLabelProvider ( ) { public String getLabel ( Object object ) { Exchange exchange = ( Exchange ) object ; return exchange . getIn ( ) . getBody ( String . class ) ; } } ) ) ; ui . newTableColumn ( table , new UITableColumn . TableColumnUIInfo ( null , new CellLabelProvider ( ) { public String getLabel ( Object object ) { Exchange exchange = ( Exchange ) object ; return exchange . getIn ( ) . getHeaders ( ) . toString ( ) ; } } ) ) ; selectionForm . bind ( tree . getSelectionObservable ( ) ) ; } protected UITable createEndpointTableUI ( UIComposite root ) { BeanForm form = new BeanForm ( ) ; UIFactory ui = root . getFactory ( ) ; AttributeDescriptor bindingData = form . detailList ( "endpoints" , Collection . class ) ; UITable table = ui . newTable ( root , new UITable . TableUIInfo ( null ) ) ; form . add ( table , new UITable . TableBindingInfo ( bindingData ) ) ; ui . newTableColumn ( table , new UITableColumn . TableColumnUIInfo ( null , new CellLabelProvider ( ) { public String getLabel ( Object object ) { BrowsableEndpoint endpoint = ( BrowsableEndpoint ) object ; return endpoint . getEndpointUri ( ) ; } } ) ) ; WritableValue value = ModelHelper . createWritableValue ( this ) ; form . bind ( value ) ; return table ; } protected void onBrowsableEndpoint ( BrowsableEndpoint endpoint ) { endpoints . add ( endpoint ) ; } } 	0
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class TopicLoadBalancer extends LoadBalancerSupport { public void process ( Exchange exchange ) throws Exception { List < Processor > list = getProcessors ( ) ; for ( Processor processor : list ) { Exchange copy = copyExchangeStrategy ( processor , exchange ) ; processor . process ( copy ) ; } } protected Exchange copyExchangeStrategy ( Processor processor , Exchange exchange ) { return exchange . copy ( ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { List < Processor > list = getProcessors ( ) ; for ( Processor processor : list ) { Exchange copy = copyExchangeStrategy ( processor , exchange ) ; try { processor . process ( copy ) ; } catch ( Exception ex ) { } } callback . done ( false ) ; return false ; } } 	1
package org . apache . camel . spi ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; public interface ComponentResolver < E extends Exchange > { Component < E > resolveComponent ( String name , CamelContext context ) throws Exception ; } 	0
package org . apache . camel . processor . validation ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import javax . xml . XMLConstants ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . validation . Schema ; import javax . xml . validation . SchemaFactory ; import javax . xml . validation . Validator ; import org . xml . sax . SAXException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class ValidatingProcessor implements Processor { private String schemaLanguage = XMLConstants . W3C_XML_SCHEMA_NS_URI ; private Schema schema ; private Source schemaSource ; private SchemaFactory schemaFactory ; private URL schemaUrl ; private File schemaFile ; private ValidatorErrorHandler errorHandler = new DefaultValidationErrorHandler ( ) ; public void process ( Exchange exchange ) throws Exception { Schema schema = getSchema ( ) ; Validator validator = schema . newValidator ( ) ; Source source = exchange . getIn ( ) . getBody ( DOMSource . class ) ; if ( source == null ) { throw new NoXmlBodyValidationException ( exchange ) ; } ValidatorErrorHandler handler = errorHandler . getClass ( ) . newInstance ( ) ; validator . setErrorHandler ( handler ) ; DOMResult result = new DOMResult ( ) ; validator . validate ( source , result ) ; handler . handleErrors ( exchange , schema , result ) ; } public Schema getSchema ( ) throws IOException , SAXException { if ( schema == null ) { schema = createSchema ( ) ; } return schema ; } public void setSchema ( Schema schema ) { this . schema = schema ; } public String getSchemaLanguage ( ) { return schemaLanguage ; } public void setSchemaLanguage ( String schemaLanguage ) { this . schemaLanguage = schemaLanguage ; } public Source getSchemaSource ( ) throws IOException { if ( schemaSource == null ) { schemaSource = createSchemaSource ( ) ; } return schemaSource ; } public void setSchemaSource ( Source schemaSource ) { this . schemaSource = schemaSource ; } public URL getSchemaUrl ( ) { return schemaUrl ; } public void setSchemaUrl ( URL schemaUrl ) { this . schemaUrl = schemaUrl ; } public File getSchemaFile ( ) { return schemaFile ; } public void setSchemaFile ( File schemaFile ) { this . schemaFile = schemaFile ; } public SchemaFactory getSchemaFactory ( ) { if ( schemaFactory == null ) { schemaFactory = createSchemaFactory ( ) ; } return schemaFactory ; } public void setSchemaFactory ( SchemaFactory schemaFactory ) { this . schemaFactory = schemaFactory ; } public ValidatorErrorHandler getErrorHandler ( ) { return errorHandler ; } public void setErrorHandler ( ValidatorErrorHandler errorHandler ) { this . errorHandler = errorHandler ; } protected SchemaFactory createSchemaFactory ( ) { return SchemaFactory . newInstance ( schemaLanguage ) ; } protected Source createSchemaSource ( ) throws IOException { throw new IllegalArgumentException ( "You must specify a schema, " + "schemaFile, schemaSource or schemaUrl property" ) ; } protected Schema createSchema ( ) throws SAXException , IOException { SchemaFactory factory = getSchemaFactory ( ) ; URL url = getSchemaUrl ( ) ; if ( url != null ) { return factory . newSchema ( url ) ; } File file = getSchemaFile ( ) ; if ( file != null ) { return factory . newSchema ( file ) ; } return factory . newSchema ( getSchemaSource ( ) ) ; } } 	1
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; public interface ExchangeFormatter { Object format ( Exchange exchange ) ; } 	0
package org . apache . camel . processor . loadbalancer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class LoadBalancerConsumer extends DefaultConsumer < Exchange > { private final LoadBalancer loadBalancer ; public LoadBalancerConsumer ( Endpoint endpoint , Processor processor , LoadBalancer loadBalancer ) { super ( endpoint , processor ) ; this . loadBalancer = loadBalancer ; } @ Override protected void doStart ( ) throws Exception { loadBalancer . addProcessor ( getProcessor ( ) ) ; } @ Override protected void doStop ( ) throws Exception { loadBalancer . removeProcessor ( getProcessor ( ) ) ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . http . HttpEntity ; import org . apache . http . HttpEntityEnclosingRequest ; import org . apache . http . HttpException ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . HttpResponseFactory ; import org . apache . http . HttpStatus ; import org . apache . http . HttpVersion ; import org . apache . http . ProtocolVersion ; import org . apache . http . impl . DefaultHttpResponseFactory ; import org . apache . http . nio . NHttpConnection ; import org . apache . http . nio . protocol . EventListener ; import org . apache . http . params . HttpParams ; import org . apache . http . protocol . HttpContext ; import org . apache . http . protocol . HttpRequestHandler ; public class JhcConsumer extends DefaultConsumer < JhcExchange > { private static final Log LOG = LogFactory . getLog ( JhcConsumer . class ) ; private JhcServerEngine engine ; private MyHandler handler ; public JhcConsumer ( JhcEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; engine = JhcServerEngineFactory . getJhcServerEngine ( endpoint . getParams ( ) , endpoint . getPort ( ) , endpoint . getProtocol ( ) ) ; handler = new MyHandler ( endpoint . getParams ( ) , endpoint . getPath ( ) ) ; } public JhcEndpoint getEndpoint ( ) { return ( JhcEndpoint ) super . getEndpoint ( ) ; } protected void doStart ( ) throws Exception { super . doStart ( ) ; engine . register ( handler . getPath ( ) + "*" , handler ) ; if ( ! engine . isStarted ( ) ) { engine . start ( ) ; } } protected void doStop ( ) throws Exception { engine . unregister ( handler . getPath ( ) + "*" ) ; if ( engine . getReferenceCounter ( ) == 0 ) { engine . stop ( ) ; } super . doStop ( ) ; } class MyHttpRequestHandler implements HttpRequestHandler { public void handle ( HttpRequest httpRequest , HttpResponse httpResponse , HttpContext httpContext ) throws HttpException , IOException { LOG . debug ( "handle" ) ; } } static class EventLogger implements EventListener { public void connectionOpen ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection open: " + conn ) ; } } public void connectionTimeout ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection timed out: " + conn ) ; } } public void connectionClosed ( final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Connection closed: " + conn ) ; } } public void fatalIOException ( final IOException ex , final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "I/O error: " + ex . getMessage ( ) ) ; } } public void fatalProtocolException ( final HttpException ex , final NHttpConnection conn ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "HTTP error: " + ex . getMessage ( ) ) ; } } } class MyHandler implements AsyncHttpRequestHandler { private final HttpParams params ; private final HttpResponseFactory responseFactory ; private final String path ; public MyHandler ( HttpParams params , String path ) { this ( params , path , new DefaultHttpResponseFactory ( ) ) ; } public MyHandler ( HttpParams params , String path , HttpResponseFactory responseFactory ) { this . params = params ; this . path = path ; this . responseFactory = responseFactory ; } public String getPath ( ) { return path ; } public void handle ( final HttpRequest request , final HttpContext context , final AsyncResponseHandler handler ) throws HttpException , IOException { final Exchange exchange = getEndpoint ( ) . createExchange ( ) ; exchange . getIn ( ) . setHeader ( "http.uri" , request . getRequestLine ( ) . getUri ( ) ) ; if ( request instanceof HttpEntityEnclosingRequest ) { exchange . getIn ( ) . setBody ( ( ( HttpEntityEnclosingRequest ) request ) . getEntity ( ) ) ; } getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { LOG . debug ( "handleExchange" ) ; ProtocolVersion httpVersion = ( HttpVersion ) request . getRequestLine ( ) . getProtocolVersion ( ) ; HttpResponse response = responseFactory . newHttpResponse ( httpVersion , HttpStatus . SC_OK , context ) ; response . setParams ( params ) ; HttpEntity entity = exchange . getOut ( ) . getBody ( HttpEntity . class ) ; response . setEntity ( entity ) ; response . setParams ( getEndpoint ( ) . getParams ( ) ) ; try { handler . sendResponse ( response ) ; } catch ( Exception e ) { LOG . info ( e ) ; } } } ) ; } public void handle ( HttpRequest request , HttpResponse response , HttpContext context ) throws HttpException , IOException { } } } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . IOException ; import java . io . RandomAccessFile ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Processor ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . util . LRUCache ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileConsumer extends ScheduledPollConsumer < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileConsumer . class ) ; private FileEndpoint endpoint ; private ConcurrentHashMap < File , File > filesBeingProcessed = new ConcurrentHashMap < File , File > ( ) ; private ConcurrentHashMap < File , Long > fileSizes = new ConcurrentHashMap < File , Long > ( new LRUCache ( 1000 ) ) ; private ConcurrentHashMap < File , Long > noopMap = new ConcurrentHashMap < File , Long > ( new LRUCache ( 1000 ) ) ; private long lastPollTime ; private int unchangedDelay ; private boolean unchangedSize ; private boolean generateEmptyExchangeWhenIdle ; private boolean alwaysConsume ; private boolean recursive ; private String regexPattern = "" ; private boolean exclusiveReadLock = true ; public FileConsumer ( final FileEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } protected synchronized void poll ( ) throws Exception { int rc = pollFileOrDirectory ( endpoint . getFile ( ) , true ) ; if ( rc == 0 && generateEmptyExchangeWhenIdle ) { final FileExchange exchange = endpoint . createExchange ( ( File ) null ) ; getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } lastPollTime = System . currentTimeMillis ( ) ; } protected int pollFileOrDirectory ( File fileOrDirectory , boolean processDir ) { if ( ! fileOrDirectory . isDirectory ( ) ) { return pollFile ( fileOrDirectory ) ; } else if ( processDir ) { int rc = 0 ; if ( isValidFile ( fileOrDirectory ) ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Polling directory " + fileOrDirectory ) ; } File [ ] files = fileOrDirectory . listFiles ( ) ; for ( File file : files ) { rc += pollFileOrDirectory ( file , isRecursive ( ) ) ; } } return rc ; } else { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Skipping directory " + fileOrDirectory ) ; } return 0 ; } } protected int pollFile ( final File target ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Polling file: " + target ) ; } if ( ! target . exists ( ) ) { return 0 ; } if ( ! isValidFile ( target ) ) { return 0 ; } if ( ! endpoint . isNoop ( ) ) { if ( filesBeingProcessed . contains ( target ) ) { return 1 ; } filesBeingProcessed . put ( target , target ) ; } final FileProcessStrategy processStrategy = endpoint . getFileStrategy ( ) ; final FileExchange exchange = endpoint . createExchange ( target ) ; endpoint . configureMessage ( target , exchange . getIn ( ) ) ; try { if ( exclusiveReadLock ) { acquireExclusiveReadLock ( target ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to process file: " + target + " using exchange: " + exchange ) ; } if ( processStrategy . begin ( endpoint , exchange , target ) ) { getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { final File file = exchange . getFile ( ) ; boolean failed = exchange . isFailed ( ) ; boolean handled = DeadLetterChannel . isFailureHandled ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Done processing file: " + file + ". Status is: " + ( failed ? "failed: " + failed + ", handled by failure processor: " + handled : "processed OK" ) ) ; } boolean committed = false ; try { if ( ! failed || handled ) { processStrategyCommit ( processStrategy , exchange , file , handled ) ; committed = true ; } else { handleException ( exchange . getException ( ) ) ; } } finally { if ( ! committed ) { processStrategyRollback ( processStrategy , exchange , file ) ; } filesBeingProcessed . remove ( file ) ; } } } ) ; } else { LOG . warn ( endpoint + " can not process file: " + target ) ; } } catch ( Throwable e ) { handleException ( e ) ; } return 1 ; } protected void acquireExclusiveReadLock ( File file ) throws IOException { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Waiting for exclusive read lock to file: " + file ) ; } FileChannel channel = new RandomAccessFile ( file , "rw" ) . getChannel ( ) ; try { FileLock lock = channel . lock ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Acquired exclusive read lock: " + lock + " to file: " + file ) ; } lock . release ( ) ; } finally { ObjectHelper . close ( channel , "FileConsumer during acquiring of exclusive read lock" , LOG ) ; } } protected void processStrategyCommit ( FileProcessStrategy processStrategy , FileExchange exchange , File file , boolean failureHandled ) { try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Committing file strategy: " + processStrategy + " for file: " + file + ( failureHandled ? " that was handled by the failure processor." : "" ) ) ; } processStrategy . commit ( endpoint , exchange , file ) ; } catch ( Exception e ) { LOG . warn ( "Error committing file strategy: " + processStrategy , e ) ; handleException ( e ) ; } } protected void processStrategyRollback ( FileProcessStrategy processStrategy , FileExchange exchange , File file ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Rolling back file strategy: " + processStrategy + " for file: " + file ) ; } processStrategy . rollback ( endpoint , exchange , file ) ; } protected boolean isValidFile ( File file ) { boolean result = false ; if ( file != null && file . exists ( ) ) { if ( isMatched ( file ) && ( alwaysConsume || isChanged ( file ) ) ) { result = true ; } } return result ; } protected boolean isChanged ( File file ) { if ( file == null ) { return false ; } else if ( file . isDirectory ( ) ) { return true ; } else { boolean lastModifiedCheck = false ; long modifiedDuration = 0 ; if ( getUnchangedDelay ( ) > 0 ) { modifiedDuration = System . currentTimeMillis ( ) - file . lastModified ( ) ; lastModifiedCheck = modifiedDuration >= getUnchangedDelay ( ) ; } long fileModified = file . lastModified ( ) ; Long previousModified = noopMap . get ( file ) ; noopMap . put ( file , fileModified ) ; if ( previousModified == null || fileModified > previousModified ) { lastModifiedCheck = true ; } boolean sizeCheck = false ; long sizeDifference = 0 ; if ( isUnchangedSize ( ) ) { Long value = fileSizes . get ( file ) ; if ( value == null ) { sizeCheck = true ; } else { sizeCheck = file . length ( ) != value ; } } boolean answer = lastModifiedCheck || sizeCheck ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "file:" + file + " isChanged:" + answer + " " + "sizeCheck:" + sizeCheck + "(" + sizeDifference + ") " + "lastModifiedCheck:" + lastModifiedCheck + "(" + modifiedDuration + ")" ) ; } if ( isUnchangedSize ( ) ) { if ( answer ) { fileSizes . put ( file , file . length ( ) ) ; } else { fileSizes . remove ( file ) ; } } return answer ; } } protected boolean isMatched ( File file ) { String name = file . getName ( ) ; if ( name . startsWith ( "." ) ) { return false ; } if ( name . endsWith ( FileEndpoint . DEFAULT_LOCK_FILE_POSTFIX ) ) { return false ; } if ( file . isDirectory ( ) ) { return true ; } if ( regexPattern != null && regexPattern . length ( ) > 0 ) { if ( ! name . matches ( regexPattern ) ) { return false ; } } if ( endpoint . getExcludedNamePrefix ( ) != null ) { if ( name . startsWith ( endpoint . getExcludedNamePrefix ( ) ) ) { return false ; } } String [ ] prefixes = endpoint . getExcludedNamePrefixes ( ) ; if ( prefixes != null ) { for ( String prefix : prefixes ) { if ( name . startsWith ( prefix ) ) { return false ; } } } if ( endpoint . getExcludedNamePostfix ( ) != null ) { if ( name . endsWith ( endpoint . getExcludedNamePostfix ( ) ) ) { return false ; } } String [ ] postfixes = endpoint . getExcludedNamePostfixes ( ) ; if ( postfixes != null ) { for ( String postfix : postfixes ) { if ( name . endsWith ( postfix ) ) { return false ; } } } return true ; } public boolean isRecursive ( ) { return this . recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public String getRegexPattern ( ) { return this . regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isGenerateEmptyExchangeWhenIdle ( ) { return generateEmptyExchangeWhenIdle ; } public void setGenerateEmptyExchangeWhenIdle ( boolean generateEmptyExchangeWhenIdle ) { this . generateEmptyExchangeWhenIdle = generateEmptyExchangeWhenIdle ; } public int getUnchangedDelay ( ) { return unchangedDelay ; } public void setUnchangedDelay ( int unchangedDelay ) { this . unchangedDelay = unchangedDelay ; } public boolean isUnchangedSize ( ) { return unchangedSize ; } public void setUnchangedSize ( boolean unchangedSize ) { this . unchangedSize = unchangedSize ; } public boolean isExclusiveReadLock ( ) { return exclusiveReadLock ; } public void setExclusiveReadLock ( boolean exclusiveReadLock ) { this . exclusiveReadLock = exclusiveReadLock ; } public boolean isAlwaysConsume ( ) { return alwaysConsume ; } public void setAlwaysConsume ( boolean alwaysConsume ) { this . alwaysConsume = alwaysConsume ; } public boolean isTimestamp ( ) { return ! alwaysConsume ; } public void setTimestamp ( boolean timestamp ) { this . alwaysConsume = ! timestamp ; } } 	1
package org . apache . camel . builder ; public class NoRouteBuilder extends RouteBuilder { private static final NoRouteBuilder INSTANCE = new NoRouteBuilder ( ) ; public static NoRouteBuilder getInstance ( ) { return INSTANCE ; } public void configure ( ) throws Exception { } } 	0
package org . apache . camel ; public class NoTypeConversionAvailableException extends RuntimeCamelException { private final Object value ; private final Class type ; public NoTypeConversionAvailableException ( Object value , Class type ) { super ( "No type converter available to convert from type: " + ( value != null ? value . getClass ( ) : null ) + " to the required type: " + type . getCanonicalName ( ) + " with value " + value ) ; this . value = value ; this . type = type ; } public Object getValue ( ) { return value ; } public Class getType ( ) { return type ; } public Class getFromType ( ) { if ( value != null ) { return value . getClass ( ) ; } else { return null ; } } } 	1
package org . apache . camel . impl . converter ; import org . apache . camel . Exchange ; import org . apache . camel . TypeConverter ; public class ToStringTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > toType , Object value ) { if ( value != null ) { if ( toType . equals ( String . class ) ) { return ( T ) value . toString ( ) ; } } return null ; } public < T > T convertTo ( Class < T > type , Exchange exchange , Object value ) { return convertTo ( type , value ) ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlType ( name = "outputType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class OutputType < Type extends ProcessorType > extends ProcessorType < Type > { private static final transient Log LOG = LogFactory . getLog ( OutputType . class ) ; @ XmlElementRef protected List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { configureChild ( output ) ; } } } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "pipeline" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class PipelineType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "pipeline" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class Throttler extends DelayProcessorSupport { private long maximumRequestsPerPeriod ; private long timePeriodMillis ; private TimeSlot slot ; public Throttler ( Processor processor , long maximumRequestsPerPeriod ) { this ( processor , maximumRequestsPerPeriod , 1000 ) ; } public Throttler ( Processor processor , long maximumRequestsPerPeriod , long timePeriodMillis ) { super ( processor ) ; this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; this . timePeriodMillis = timePeriodMillis ; } @ Override public String toString ( ) { return "Throttler[requests: " + maximumRequestsPerPeriod + " per: " + timePeriodMillis + " (ms) to: " + getProcessor ( ) + "]" ; } public long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } protected void delay ( Exchange exchange ) throws Exception { TimeSlot slot = nextSlot ( ) ; if ( ! slot . isActive ( ) ) { waitUntil ( slot . startTime , exchange ) ; } } protected synchronized TimeSlot nextSlot ( ) { if ( slot == null ) { slot = new TimeSlot ( ) ; } if ( slot . isFull ( ) ) { slot = slot . next ( ) ; } slot . assign ( ) ; return slot ; } protected class TimeSlot { private long capacity = Throttler . this . maximumRequestsPerPeriod ; private final long duration = Throttler . this . timePeriodMillis ; private final long startTime ; protected TimeSlot ( ) { this ( System . currentTimeMillis ( ) ) ; } protected TimeSlot ( long startTime ) { this . startTime = startTime ; } protected void assign ( ) { capacity -- ; } protected TimeSlot next ( ) { return new TimeSlot ( Math . max ( System . currentTimeMillis ( ) , this . startTime + this . duration ) ) ; } protected boolean isActive ( ) { return startTime <= System . currentTimeMillis ( ) ; } protected boolean isFull ( ) { return capacity <= 0 ; } } } 	1
package org . apache . camel . model ; import java . util . List ; import javax . xml . bind . annotation . XmlElementRef ; public interface RouteContainer { @ XmlElementRef List < RouteType > getRoutes ( ) ; void setRoutes ( List < RouteType > routes ) ; } 	0
package org . apache . camel ; import java . util . Map ; import org . apache . camel . spi . UnitOfWork ; public interface Exchange { String CHARSET_NAME = "org.apache.camel.Exchange.CharsetName" ; String AGGREGATED_COUNT = "org.apache.camel.Exchange.AggregatedCount" ; String EXCEPTION_HANDLED_PROPERTY = "CamelExceptionHandled" ; ExchangePattern getPattern ( ) ; void setPattern ( ExchangePattern pattern ) ; Object getProperty ( String name ) ; < T > T getProperty ( String name , Class < T > type ) ; void setProperty ( String name , Object value ) ; Object removeProperty ( String name ) ; Map < String , Object > getProperties ( ) ; Message getIn ( ) ; void setIn ( Message in ) ; Message getOut ( ) ; Message getOut ( boolean lazyCreate ) ; void setOut ( Message out ) ; Message getFault ( ) ; Message getFault ( boolean lazyCreate ) ; Throwable getException ( ) ; void setException ( Throwable e ) ; boolean isFailed ( ) ; boolean isTransacted ( ) ; CamelContext getContext ( ) ; Exchange newInstance ( ) ; Exchange copy ( ) ; void copyFrom ( Exchange source ) ; UnitOfWork getUnitOfWork ( ) ; void setUnitOfWork ( UnitOfWork unitOfWork ) ; String getExchangeId ( ) ; void setExchangeId ( String id ) ; } 	1
package org . apache . camel . model ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . processor . ExchangePatternProcessor ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "setExchangePattern" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetExchangePatternType extends OutputType { @ XmlAttribute ( required = true ) private ExchangePattern pattern ; @ XmlTransient private ExchangePatternProcessor processor ; public SetExchangePatternType ( ) { } public SetExchangePatternType ( ExchangePattern pattern ) { this . pattern = pattern ; } public SetExchangePatternType pattern ( ExchangePattern pattern ) { setPattern ( pattern ) ; return this ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } @ Override public String getShortName ( ) { return "setExchangePattern" ; } @ Override public String toString ( ) { return "setExchangePattern[" + "pattern: " + pattern + "]" ; } @ Override public String getLabel ( ) { return "setExchangePattern: " + pattern ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { if ( processor == null ) { processor = new ExchangePatternProcessor ( getPattern ( ) ) ; } return processor ; } } 	0
package org . apache . camel ; import org . apache . camel . util . ExchangeHelper ; public class NoSuchHeaderException extends CamelExchangeException { private static final long serialVersionUID = - 8721487431101572630L ; private final String headerName ; private final Class < ? > type ; public NoSuchHeaderException ( Exchange exchange , String headerName , Class < ? > type ) { super ( "No '" + headerName + "' header available of type: " + type . getName ( ) + reason ( exchange , headerName ) , exchange ) ; this . headerName = headerName ; this . type = type ; } public String getHeaderName ( ) { return headerName ; } public Class < ? > getType ( ) { return type ; } protected static String reason ( Exchange exchange , String propertyName ) { Object value = exchange . getProperty ( propertyName ) ; return valueDescription ( value ) ; } static String valueDescription ( Object value ) { if ( value == null ) { return "" ; } return " but has value: " + value + " of type: " + value . getClass ( ) . getName ( ) ; } } 	1
package org . apache . camel . component . rmi ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . component . bean . BeanExchange ; import org . apache . camel . impl . DefaultComponent ; public class RmiComponent extends DefaultComponent < BeanExchange > { public RmiComponent ( ) { } public RmiComponent ( CamelContext context ) { super ( context ) ; } @ Override protected Endpoint < BeanExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new RmiEndpoint ( uri , this ) ; } } 	0
package org . apache . camel . processor . interceptor ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . RouteContext ; public final class StreamCaching implements InterceptStrategy { private StreamCaching ( ) { super ( ) ; } @ SuppressWarnings ( "unchecked" ) public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { return new StreamCachingInterceptor ( target ) ; } public static void enable ( RouteContext context ) { for ( InterceptStrategy strategy : context . getInterceptStrategies ( ) ) { if ( strategy instanceof StreamCaching ) { return ; } } context . addInterceptStrategy ( new StreamCaching ( ) ) ; } } 	1
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; public interface BrowsableEndpoint < T extends Exchange > extends Endpoint < T > { List < Exchange > getExchanges ( ) ; } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . language . simple . FileLanguage ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . UuidGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class FileEndpoint extends ScheduledPollEndpoint < FileExchange > { public static final transient String DEFAULT_LOCK_FILE_POSTFIX = ".camelLock" ; private static final transient Log LOG = LogFactory . getLog ( FileEndpoint . class ) ; private static final transient String DEFAULT_STRATEGYFACTORY_CLASS = "org.apache.camel.component.file.strategy.FileProcessStrategyFactory" ; private File file ; private FileProcessStrategy fileProcessStrategy ; private boolean autoCreate = true ; private boolean lock = true ; private boolean delete ; private boolean noop ; private boolean append = true ; private String moveNamePrefix ; private String moveNamePostfix ; private String [ ] excludedNamePrefixes ; private String [ ] excludedNamePostfixes ; private String preMoveNamePrefix ; private String preMoveNamePostfix ; private String excludedNamePrefix ; private String excludedNamePostfix ; private int bufferSize = 128 * 1024 ; private boolean ignoreFileNameHeader ; private Expression expression ; private Expression preMoveExpression ; protected FileEndpoint ( File file , String endpointUri , FileComponent component ) { super ( endpointUri , component ) ; this . file = file ; } public FileEndpoint ( String endpointUri , File file ) { super ( endpointUri ) ; this . file = file ; } public FileEndpoint ( File file ) { this . file = file ; } public FileEndpoint ( ) { } public Producer < FileExchange > createProducer ( ) throws Exception { Producer < FileExchange > result = new FileProducer ( this ) ; return result ; } public Consumer < FileExchange > createConsumer ( Processor processor ) throws Exception { Consumer < FileExchange > result = new FileConsumer ( this , processor ) ; if ( isDelete ( ) && ( getMoveNamePrefix ( ) != null || getMoveNamePostfix ( ) != null || getExpression ( ) != null ) ) { throw new IllegalArgumentException ( "You cannot set delet and a moveNamePrefix, moveNamePostfix or expression option" ) ; } configureConsumer ( result ) ; return result ; } public FileExchange createExchange ( File file ) { return new FileExchange ( getCamelContext ( ) , getExchangePattern ( ) , file ) ; } @ Override public FileExchange createExchange ( ) { return createExchange ( getFile ( ) ) ; } @ Override public FileExchange createExchange ( ExchangePattern pattern ) { return new FileExchange ( getCamelContext ( ) , pattern , file ) ; } public String getGeneratedFileName ( Message message ) { return getFileFriendlyMessageId ( message . getMessageId ( ) ) ; } public void configureMessage ( File file , Message message ) { message . setBody ( file ) ; String relativePath = file . getPath ( ) . substring ( getFile ( ) . getPath ( ) . length ( ) ) ; if ( relativePath . startsWith ( File . separator ) || relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } message . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } public File getFile ( ) { ObjectHelper . notNull ( file , "file" ) ; if ( autoCreate && ! file . exists ( ) ) { file . mkdirs ( ) ; } return file ; } public void setFile ( File file ) { this . file = file ; } public boolean isSingleton ( ) { return true ; } public boolean isAutoCreate ( ) { return this . autoCreate ; } public void setAutoCreate ( boolean autoCreate ) { this . autoCreate = autoCreate ; } public FileProcessStrategy getFileStrategy ( ) { if ( fileProcessStrategy == null ) { fileProcessStrategy = createFileStrategy ( ) ; LOG . debug ( "Using file process strategy: " + fileProcessStrategy ) ; } return fileProcessStrategy ; } public void setFileStrategy ( FileProcessStrategy fileProcessStrategy ) { this . fileProcessStrategy = fileProcessStrategy ; } public boolean isDelete ( ) { return delete ; } public void setDelete ( boolean delete ) { this . delete = delete ; } public boolean isLock ( ) { return lock ; } public void setLock ( boolean lock ) { this . lock = lock ; } public String getMoveNamePostfix ( ) { return moveNamePostfix ; } public void setMoveNamePostfix ( String moveNamePostfix ) { this . moveNamePostfix = moveNamePostfix ; } public String getMoveNamePrefix ( ) { return moveNamePrefix ; } public void setMoveNamePrefix ( String moveNamePrefix ) { this . moveNamePrefix = moveNamePrefix ; } public String [ ] getExcludedNamePrefixes ( ) { return excludedNamePrefixes ; } public void setExcludedNamePrefixes ( String [ ] excludedNamePrefixes ) { this . excludedNamePrefixes = excludedNamePrefixes ; } public String [ ] getExcludedNamePostfixes ( ) { return excludedNamePostfixes ; } public void setExcludedNamePostfixes ( String [ ] excludedNamePostfixes ) { this . excludedNamePostfixes = excludedNamePostfixes ; } public String getPreMoveNamePrefix ( ) { return preMoveNamePrefix ; } public void setPreMoveNamePrefix ( String preMoveNamePrefix ) { this . preMoveNamePrefix = preMoveNamePrefix ; } public String getPreMoveNamePostfix ( ) { return preMoveNamePostfix ; } public void setPreMoveNamePostfix ( String preMoveNamePostfix ) { this . preMoveNamePostfix = preMoveNamePostfix ; } public boolean isNoop ( ) { return noop ; } public void setNoop ( boolean noop ) { this . noop = noop ; } public boolean isAppend ( ) { return append ; } public void setAppend ( boolean append ) { this . append = append ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public boolean isIgnoreFileNameHeader ( ) { return ignoreFileNameHeader ; } public void setIgnoreFileNameHeader ( boolean ignoreFileNameHeader ) { this . ignoreFileNameHeader = ignoreFileNameHeader ; } public String getExcludedNamePrefix ( ) { return excludedNamePrefix ; } public void setExcludedNamePrefix ( String excludedNamePrefix ) { this . excludedNamePrefix = excludedNamePrefix ; } public String getExcludedNamePostfix ( ) { return excludedNamePostfix ; } public void setExcludedNamePostfix ( String excludedNamePostfix ) { this . excludedNamePostfix = excludedNamePostfix ; } public Expression getExpression ( ) { return expression ; } public void setExpression ( Expression expression ) { this . expression = expression ; } public void setExpression ( String fileLanguageExpression ) { this . expression = FileLanguage . file ( fileLanguageExpression ) ; } public Expression getPreMoveExpression ( ) { return preMoveExpression ; } public void setPreMoveExpression ( Expression expression ) { this . preMoveExpression = expression ; } public void setPreMoveExpression ( String fileLanguageExpression ) { this . preMoveExpression = FileLanguage . file ( fileLanguageExpression ) ; } protected FileProcessStrategy createFileStrategy ( ) { Class < ? > factory = null ; try { FactoryFinder finder = getCamelContext ( ) . createFactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; factory = finder . findClass ( "file" , "strategy.factory." ) ; } catch ( ClassNotFoundException e ) { LOG . debug ( "'strategy.factory.class' not found" , e ) ; } catch ( IOException e ) { LOG . debug ( "No strategy factory defined in 'META-INF/services/org/apache/camel/component/file'" , e ) ; } if ( factory == null ) { factory = ObjectHelper . loadClass ( DEFAULT_STRATEGYFACTORY_CLASS ) ; if ( factory == null ) { throw new TypeNotPresentException ( "FileProcessStrategyFactory class not found" , null ) ; } } try { Method factoryMethod = factory . getMethod ( "createFileProcessStrategy" , Map . class ) ; return ( FileProcessStrategy ) ObjectHelper . invokeMethod ( factoryMethod , null , getParamsAsMap ( ) ) ; } catch ( NoSuchMethodException e ) { throw new TypeNotPresentException ( factory . getSimpleName ( ) + ".createFileProcessStrategy(Properties params) method not found" , e ) ; } } protected Map < String , Object > getParamsAsMap ( ) { Map < String , Object > params = new HashMap < String , Object > ( ) ; if ( isNoop ( ) ) { params . put ( "noop" , Boolean . toString ( true ) ) ; } if ( isDelete ( ) ) { params . put ( "delete" , Boolean . toString ( true ) ) ; } if ( isAppend ( ) ) { params . put ( "append" , Boolean . toString ( true ) ) ; } if ( isLock ( ) ) { params . put ( "lock" , Boolean . toString ( true ) ) ; } if ( moveNamePrefix != null ) { params . put ( "moveNamePrefix" , moveNamePrefix ) ; } if ( moveNamePostfix != null ) { params . put ( "moveNamePostfix" , moveNamePostfix ) ; } if ( preMoveNamePrefix != null ) { params . put ( "preMoveNamePrefix" , preMoveNamePrefix ) ; } if ( preMoveNamePostfix != null ) { params . put ( "preMoveNamePostfix" , preMoveNamePostfix ) ; } if ( expression != null ) { params . put ( "expression" , expression ) ; } if ( preMoveExpression != null ) { params . put ( "preMoveExpression" , preMoveExpression ) ; } return params ; } @ Override protected String createEndpointUri ( ) { return "file://" + getFile ( ) . getAbsolutePath ( ) ; } protected String getFileFriendlyMessageId ( String id ) { return UuidGenerator . generateSanitizedId ( id ) ; } } 	1
package org . apache . camel . component . cxf . transport ; import java . io . IOException ; import java . io . OutputStream ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . camel . CamelContext ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . ProducerTemplate ; import org . apache . camel . component . cxf . CxfConstants ; import org . apache . camel . component . cxf . CxfSoapBinding ; import org . apache . camel . component . cxf . util . CxfHeaderHelper ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . spi . HeaderFilterStrategy ; import org . apache . cxf . Bus ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . configuration . Configurable ; import org . apache . cxf . configuration . Configurer ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . MessageImpl ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . transport . AbstractConduit ; import org . apache . cxf . transport . AbstractDestination ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . ConduitInitiator ; import org . apache . cxf . transport . MessageObserver ; import org . apache . cxf . ws . addressing . EndpointReferenceType ; import org . apache . cxf . wsdl . EndpointReferenceUtils ; public class CamelDestination extends AbstractDestination implements Configurable { protected static final String BASE_BEAN_NAME_SUFFIX = ".camel-destination" ; private static final Logger LOG = LogUtils . getL7dLogger ( CamelDestination . class ) ; final ConduitInitiator conduitInitiator ; CamelContext camelContext ; Consumer consumer ; String camelDestinationUri ; private ProducerTemplate < Exchange > camelTemplate ; private Endpoint distinationEndpoint ; private HeaderFilterStrategy headerFilterStrategy ; public CamelDestination ( CamelContext camelContext , Bus bus , ConduitInitiator ci , EndpointInfo info ) throws IOException { this ( camelContext , bus , ci , info , null ) ; } public CamelDestination ( CamelContext camelContext , Bus bus , ConduitInitiator ci , EndpointInfo info , HeaderFilterStrategy headerFilterStrategy ) throws IOException { super ( bus , getTargetReference ( info , bus ) , info ) ; this . camelContext = camelContext ; conduitInitiator = ci ; camelDestinationUri = endpointInfo . getAddress ( ) . substring ( CxfConstants . CAMEL_TRANSPORT_PREFIX . length ( ) ) ; if ( camelDestinationUri . startsWith ( "//" ) ) { camelDestinationUri = camelDestinationUri . substring ( 2 ) ; } initConfig ( ) ; this . headerFilterStrategy = headerFilterStrategy ; } protected Logger getLogger ( ) { return LOG ; } protected Conduit getInbuiltBackChannel ( Message inMessage ) { return new BackChannelConduit ( inMessage ) ; } public void activate ( ) { getLogger ( ) . log ( Level . FINE , "CamelDestination activate().... " ) ; try { getLogger ( ) . log ( Level . FINE , "establishing Camel connection" ) ; distinationEndpoint = getCamelContext ( ) . getEndpoint ( camelDestinationUri ) ; consumer = distinationEndpoint . createConsumer ( new ConsumerProcessor ( ) ) ; consumer . start ( ) ; } catch ( Exception ex ) { getLogger ( ) . log ( Level . SEVERE , "Camel connect failed with Exception : " , ex ) ; } } public void deactivate ( ) { try { consumer . stop ( ) ; } catch ( Exception e ) { getLogger ( ) . log ( Level . SEVERE , "Camel stop failed with Exception : " , e ) ; } } public void shutdown ( ) { getLogger ( ) . log ( Level . FINE , "CamelDestination shutdown()" ) ; this . deactivate ( ) ; } public ProducerTemplate < Exchange > getCamelTemplate ( ) { if ( camelTemplate == null ) { camelTemplate = getCamelContext ( ) . createProducerTemplate ( ) ; } return camelTemplate ; } public void setCamelTemplate ( ProducerTemplate < Exchange > template ) { camelTemplate = template ; } public void setCamelContext ( CamelContext context ) { camelContext = context ; } public CamelContext getCamelContext ( ) { if ( camelContext == null ) { getLogger ( ) . log ( Level . INFO , "No CamelContext injected, create a default one" ) ; camelContext = new DefaultCamelContext ( ) ; } return camelContext ; } protected void incoming ( org . apache . camel . Exchange camelExchange ) { getLogger ( ) . log ( Level . FINE , "server received request: " , camelExchange ) ; org . apache . cxf . message . Message inMessage = CxfSoapBinding . getCxfInMessage ( headerFilterStrategy , camelExchange , false ) ; inMessage . put ( CxfConstants . CAMEL_EXCHANGE , camelExchange ) ; ( ( MessageImpl ) inMessage ) . setDestination ( this ) ; incomingObserver . onMessage ( inMessage ) ; } public String getBeanName ( ) { if ( endpointInfo == null || endpointInfo . getName ( ) == null ) { return "default" + BASE_BEAN_NAME_SUFFIX ; } return endpointInfo . getName ( ) . toString ( ) + BASE_BEAN_NAME_SUFFIX ; } private void initConfig ( ) { if ( bus != null ) { Configurer configurer = bus . getExtension ( Configurer . class ) ; if ( null != configurer ) { configurer . configureBean ( this ) ; } } } protected class ConsumerProcessor implements Processor { public void process ( Exchange exchange ) { try { incoming ( exchange ) ; } catch ( Throwable ex ) { getLogger ( ) . log ( Level . WARNING , "Failed to process incoming message : " , ex ) ; } } } protected class BackChannelConduit extends AbstractConduit { protected Message inMessage ; Exchange camelExchange ; org . apache . cxf . message . Exchange cxfExchange ; BackChannelConduit ( Message message ) { super ( EndpointReferenceUtils . getAnonymousEndpointReference ( ) ) ; inMessage = message ; cxfExchange = inMessage . getExchange ( ) ; camelExchange = cxfExchange . get ( Exchange . class ) ; } public void setMessageObserver ( MessageObserver observer ) { } public void prepare ( Message message ) throws IOException { message . put ( CxfConstants . CAMEL_EXCHANGE , inMessage . get ( CxfConstants . CAMEL_EXCHANGE ) ) ; message . setContent ( OutputStream . class , new CamelOutputStream ( message ) ) ; } protected Logger getLogger ( ) { return LOG ; } } protected boolean markPartialResponse ( Message partialResponse , EndpointReferenceType decoupledTarget ) { return true ; } protected ConduitInitiator getConduitInitiator ( ) { return conduitInitiator ; } private class CamelOutputStream extends CachedOutputStream { private Message outMessage ; public CamelOutputStream ( Message m ) { super ( ) ; outMessage = m ; } private void commitOutputMessage ( ) throws IOException { Exchange camelExchange = ( Exchange ) outMessage . get ( CxfConstants . CAMEL_EXCHANGE ) ; CxfHeaderHelper . propagateCxfToCamel ( headerFilterStrategy , outMessage , camelExchange . getOut ( ) . getHeaders ( ) ) ; CachedOutputStream outputStream = ( CachedOutputStream ) outMessage . getContent ( OutputStream . class ) ; camelExchange . getOut ( ) . setBody ( outputStream . getBytes ( ) ) ; getLogger ( ) . log ( Level . FINE , "send the response message: " + outputStream ) ; } @ Override protected void doFlush ( ) throws IOException { } @ Override protected void doClose ( ) throws IOException { commitOutputMessage ( ) ; } @ Override protected void onWrite ( ) throws IOException { } } } 	0
package org . apache . camel . management ; import java . util . Map ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class InstrumentationInterceptStrategy implements InterceptStrategy { private Map < ProcessorType , PerformanceCounter > counterMap ; public InstrumentationInterceptStrategy ( Map < ProcessorType , PerformanceCounter > counterMap ) { this . counterMap = counterMap ; } public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { Processor retval = target ; PerformanceCounter counter = counterMap . get ( processorType ) ; if ( counter != null ) { InstrumentationProcessor wrapper = new InstrumentationProcessor ( counter ) ; wrapper . setProcessor ( target ) ; retval = wrapper ; } return retval ; } } 	1
package org . apache . camel . component . bean ; import java . io . Serializable ; import java . lang . reflect . Method ; public class MethodBean implements Serializable { private String name ; private Class < ? > type ; private Class < ? > [ ] parameterTypes ; public MethodBean ( ) { } public MethodBean ( Method method ) { this . name = method . getName ( ) ; this . type = method . getDeclaringClass ( ) ; this . parameterTypes = method . getParameterTypes ( ) ; } public Method getMethod ( ) throws NoSuchMethodException { return type . getMethod ( name , parameterTypes ) ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Class < ? > [ ] getParameterTypes ( ) { return parameterTypes ; } public void setParameterTypes ( Class < ? > [ ] parameterTypes ) { this . parameterTypes = parameterTypes ; } public Class < ? > getType ( ) { return type ; } public void setType ( Class < ? > type ) { this . type = type ; } } 	0
package org . apache . camel . processor . interceptor ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Debugger implements InterceptStrategy { private static final transient Log LOG = LogFactory . getLog ( Debugger . class ) ; private int exchangeBufferSize = - 1 ; private Map < String , DebugInterceptor > interceptors = new HashMap < String , DebugInterceptor > ( ) ; private boolean logExchanges = true ; private boolean enabled = true ; private Tracer tracer = new Tracer ( ) ; public static Debugger getDebugger ( CamelContext context ) { if ( context instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) context ; List < InterceptStrategy > list = defaultCamelContext . getInterceptStrategies ( ) ; for ( InterceptStrategy interceptStrategy : list ) { if ( interceptStrategy instanceof Debugger ) { return ( Debugger ) interceptStrategy ; } } } return null ; } public DebugInterceptor getInterceptor ( String id ) { return interceptors . get ( id ) ; } public List < Exchange > getExchanges ( String id ) { DebugInterceptor interceptor = getInterceptor ( id ) ; if ( interceptor == null ) { return null ; } else { return interceptor . getExchanges ( ) ; } } public void setEnable ( boolean flag ) { enabled = flag ; tracer . setEnabled ( flag ) ; for ( DebugInterceptor interceptor : interceptors . values ( ) ) { interceptor . setEnabled ( flag ) ; } } public boolean isEnabled ( ) { return enabled ; } public Breakpoint getBreakpoint ( String id ) { DebugInterceptor interceptor = getInterceptor ( id ) ; if ( interceptor == null ) { return null ; } else { return interceptor . getBreakpoint ( ) ; } } public TraceFormatter getTraceFormatter ( ) { return tracer . getFormatter ( ) ; } public void setTraceFormatter ( TraceFormatter formatter ) { tracer . setFormatter ( formatter ) ; } public void setLogExchanges ( boolean flag ) { logExchanges = flag ; } public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; if ( logExchanges ) { TraceInterceptor traceInterceptor = new TraceInterceptor ( processorType , target , tracer ) ; target = traceInterceptor ; } DebugInterceptor interceptor = new DebugInterceptor ( processorType , target , createExchangeList ( ) , createExceptionsList ( ) ) ; interceptors . put ( id , interceptor ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Adding " + id + " interceptor: " + interceptor ) ; } return interceptor ; } protected List < Exchange > createExchangeList ( ) { if ( exchangeBufferSize == 0 ) { return null ; } else if ( exchangeBufferSize > 0 ) { return new ArrayList < Exchange > ( ) ; } else { return new ArrayList < Exchange > ( ) ; } } protected List < ExceptionEvent > createExceptionsList ( ) { return new ArrayList < ExceptionEvent > ( ) ; } } 	1
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . RandomAccessFile ; import java . nio . channels . Channel ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . component . file . FileProcessStrategy ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class FileProcessStrategySupport implements FileProcessStrategy { private static final transient Log LOG = LogFactory . getLog ( FileProcessStrategySupport . class ) ; private boolean lockFile ; private FileRenamer lockFileRenamer ; protected FileProcessStrategySupport ( ) { this ( true ) ; } protected FileProcessStrategySupport ( boolean lockFile ) { this ( lockFile , new DefaultFileRenamer ( null , FileEndpoint . DEFAULT_LOCK_FILE_POSTFIX ) ) ; } protected FileProcessStrategySupport ( boolean lockFile , FileRenamer lockFileRenamer ) { this . lockFile = lockFile ; this . lockFileRenamer = lockFileRenamer ; } public boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { File newFile = lockFileRenamer . renameFile ( exchange , file ) ; String lockFileName = newFile . getAbsolutePath ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Locking the file: " + file + " using the lock file name: " + lockFileName ) ; } FileChannel channel = new RandomAccessFile ( lockFileName , "rw" ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; if ( lock != null ) { exchange . setProperty ( "org.apache.camel.file.lock" , lock ) ; exchange . setProperty ( "org.apache.camel.file.lock.name" , lockFileName ) ; return true ; } else { return false ; } } return true ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { unlockFile ( endpoint , exchange , file ) ; } public void rollback ( FileEndpoint endpoint , FileExchange exchange , File file ) { try { unlockFile ( endpoint , exchange , file ) ; } catch ( Exception e ) { LOG . warn ( "Unable to unlock file: " + file , e ) ; } } public boolean isLockFile ( ) { return lockFile ; } public void setLockFile ( boolean lockFile ) { this . lockFile = lockFile ; } public FileRenamer getLockFileRenamer ( ) { return lockFileRenamer ; } public void setLockFileRenamer ( FileRenamer lockFileRenamer ) { this . lockFileRenamer = lockFileRenamer ; } protected void unlockFile ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { FileLock lock = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock" , FileLock . class ) ; String lockFileName = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock.name" , String . class ) ; Channel channel = lock . channel ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unlocking file: " + file ) ; } try { lock . release ( ) ; } finally { ObjectHelper . close ( channel , "Closing channel" , LOG ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Deleting lock file: " + lockFileName ) ; } File lockfile = new File ( lockFileName ) ; lockfile . delete ( ) ; } } } } 	0
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public class ChoiceProcessor extends ServiceSupport implements Processor { private List < FilterProcessor > filters = new ArrayList < FilterProcessor > ( ) ; private Processor otherwise ; public ChoiceProcessor ( List < FilterProcessor > filters , Processor otherwise ) { this . filters = filters ; this . otherwise = otherwise ; } public void process ( Exchange exchange ) throws Exception { for ( FilterProcessor filterProcessor : filters ) { Predicate < Exchange > predicate = filterProcessor . getPredicate ( ) ; if ( predicate != null && predicate . matches ( exchange ) ) { filterProcessor . processNext ( exchange ) ; return ; } } if ( otherwise != null ) { otherwise . process ( exchange ) ; } } @ Override public String toString ( ) { StringBuilder builder = new StringBuilder ( "choice{" ) ; boolean first = true ; for ( FilterProcessor processor : filters ) { if ( first ) { first = false ; } else { builder . append ( ", " ) ; } builder . append ( "when " ) ; builder . append ( processor . getPredicate ( ) . toString ( ) ) ; builder . append ( ": " ) ; builder . append ( processor . getProcessor ( ) ) ; } if ( otherwise != null ) { builder . append ( ", otherwise: " ) ; builder . append ( otherwise ) ; } builder . append ( "}" ) ; return builder . toString ( ) ; } public List < FilterProcessor > getFilters ( ) { return filters ; } public Processor getOtherwise ( ) { return otherwise ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( filters ) ; ServiceHelper . startServices ( otherwise ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( otherwise ) ; ServiceHelper . stopServices ( filters ) ; } } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "php" ) public @ interface PHP { String value ( ) ; } 	0
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . spi . Registry ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . CONSTRUCTOR } ) public @ interface EndpointInject { String uri ( ) default "" ; String name ( ) default "" ; } 	1
package org . apache . camel . component . jpa ; import java . util . Map ; import javax . persistence . EntityManager ; import javax . persistence . EntityManagerFactory ; import javax . persistence . Persistence ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . springframework . orm . jpa . JpaTemplate ; public class JpaEndpoint extends ScheduledPollEndpoint < Exchange > { private EntityManagerFactory entityManagerFactory ; private String persistenceUnit = "camel" ; private JpaTemplate template ; private Expression < Exchange > producerExpression ; private int maximumResults = - 1 ; private Class < ? > entityType ; private Map entityManagerProperties ; private boolean consumeDelete = true ; private boolean consumeLockEntity = true ; private boolean flushOnSend = true ; public JpaEndpoint ( String uri , JpaComponent component ) { super ( uri , component ) ; entityManagerFactory = component . getEntityManagerFactory ( ) ; } public JpaEndpoint ( String endpointUri , EntityManagerFactory entityManagerFactory ) { super ( endpointUri ) ; this . entityManagerFactory = entityManagerFactory ; } public JpaEndpoint ( String endpointUri ) { super ( endpointUri ) ; } public Producer < Exchange > createProducer ( ) throws Exception { validate ( ) ; return new JpaProducer ( this , getProducerExpression ( ) ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { validate ( ) ; JpaConsumer consumer = new JpaConsumer ( this , processor ) ; configureConsumer ( consumer ) ; return consumer ; } @ Override public void configureProperties ( Map options ) { super . configureProperties ( options ) ; Map emProperties = IntrospectionSupport . extractProperties ( options , "emf." ) ; if ( emProperties != null ) { setEntityManagerProperties ( emProperties ) ; } } public boolean isSingleton ( ) { return false ; } public JpaTemplate getTemplate ( ) { if ( template == null ) { template = createTemplate ( ) ; } return template ; } public void setTemplate ( JpaTemplate template ) { this . template = template ; } public Expression < Exchange > getProducerExpression ( ) { if ( producerExpression == null ) { producerExpression = createProducerExpression ( ) ; } return producerExpression ; } public void setProducerExpression ( Expression < Exchange > producerExpression ) { this . producerExpression = producerExpression ; } public int getMaximumResults ( ) { return maximumResults ; } public void setMaximumResults ( int maximumResults ) { this . maximumResults = maximumResults ; } public Class < ? > getEntityType ( ) { return entityType ; } public void setEntityType ( Class < ? > entityType ) { this . entityType = entityType ; } public EntityManagerFactory getEntityManagerFactory ( ) { if ( entityManagerFactory == null ) { entityManagerFactory = createEntityManagerFactory ( ) ; } return entityManagerFactory ; } public void setEntityManagerFactory ( EntityManagerFactory entityManagerFactory ) { this . entityManagerFactory = entityManagerFactory ; } public Map getEntityManagerProperties ( ) { if ( entityManagerProperties == null ) { entityManagerProperties = System . getProperties ( ) ; } return entityManagerProperties ; } public void setEntityManagerProperties ( Map entityManagerProperties ) { this . entityManagerProperties = entityManagerProperties ; } public String getPersistenceUnit ( ) { return persistenceUnit ; } public void setPersistenceUnit ( String persistenceUnit ) { this . persistenceUnit = persistenceUnit ; } public boolean isConsumeDelete ( ) { return consumeDelete ; } public void setConsumeDelete ( boolean consumeDelete ) { this . consumeDelete = consumeDelete ; } public boolean isConsumeLockEntity ( ) { return consumeLockEntity ; } public void setConsumeLockEntity ( boolean consumeLockEntity ) { this . consumeLockEntity = consumeLockEntity ; } public boolean isFlushOnSend ( ) { return flushOnSend ; } public void setFlushOnSend ( boolean flushOnSend ) { this . flushOnSend = flushOnSend ; } protected void validate ( ) { ObjectHelper . notNull ( getEntityManagerFactory ( ) , "entityManagerFactory property" ) ; } protected JpaTemplate createTemplate ( ) { return new JpaTemplate ( getEntityManagerFactory ( ) ) ; } protected EntityManagerFactory createEntityManagerFactory ( ) { return Persistence . createEntityManagerFactory ( persistenceUnit , getEntityManagerProperties ( ) ) ; } protected EntityManager createEntityManager ( ) { return getEntityManagerFactory ( ) . createEntityManager ( ) ; } protected TransactionStrategy createTransactionStrategy ( ) { EntityManagerFactory emf = getEntityManagerFactory ( ) ; return JpaTemplateTransactionStrategy . newInstance ( emf , getTemplate ( ) ) ; } protected Expression < Exchange > createProducerExpression ( ) { final Class < ? > type = getEntityType ( ) ; if ( type == null ) { return ExpressionBuilder . bodyExpression ( ) ; } else { return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { Object defaultValue = exchange . getIn ( ) . getBody ( ) ; if ( defaultValue != null ) { throw new NoTypeConversionAvailableException ( defaultValue , type ) ; } answer = exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } return answer ; } } ; } } } 	0
package org . apache . camel . impl ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledFuture ; import java . util . concurrent . TimeUnit ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class ScheduledPollConsumer < E extends Exchange > extends DefaultConsumer < E > implements Runnable { private static final transient Log LOG = LogFactory . getLog ( ScheduledPollConsumer . class ) ; private final ScheduledExecutorService executor ; private long initialDelay = 1000 ; private long delay = 500 ; private TimeUnit timeUnit = TimeUnit . MILLISECONDS ; private boolean useFixedDelay ; private ScheduledFuture < ? > future ; private Exception firstExceptionThrown ; public ScheduledPollConsumer ( DefaultEndpoint < E > endpoint , Processor processor ) { this ( endpoint , processor , endpoint . getExecutorService ( ) ) ; } public ScheduledPollConsumer ( Endpoint < E > endpoint , Processor processor , ScheduledExecutorService executor ) { super ( endpoint , processor ) ; this . executor = executor ; if ( executor == null ) { throw new IllegalArgumentException ( "A non null ScheduledExecutorService must be provided." ) ; } } public void run ( ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Starting to poll: " + this . getEndpoint ( ) ) ; } try { poll ( ) ; } catch ( Exception e ) { LOG . warn ( "An exception occured while polling: " + this . getEndpoint ( ) + ": " + e . getMessage ( ) , e ) ; if ( firstExceptionThrown == null ) { firstExceptionThrown = e ; } } } public long getInitialDelay ( ) { return initialDelay ; } public void setInitialDelay ( long initialDelay ) { this . initialDelay = initialDelay ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } public TimeUnit getTimeUnit ( ) { return timeUnit ; } public void setTimeUnit ( TimeUnit timeUnit ) { this . timeUnit = timeUnit ; } public boolean isUseFixedDelay ( ) { return useFixedDelay ; } public void setUseFixedDelay ( boolean useFixedDelay ) { this . useFixedDelay = useFixedDelay ; } protected abstract void poll ( ) throws Exception ; @ Override protected void doStart ( ) throws Exception { firstExceptionThrown = null ; super . doStart ( ) ; if ( isUseFixedDelay ( ) ) { future = executor . scheduleWithFixedDelay ( this , getInitialDelay ( ) , getDelay ( ) , getTimeUnit ( ) ) ; } else { future = executor . scheduleAtFixedRate ( this , getInitialDelay ( ) , getDelay ( ) , getTimeUnit ( ) ) ; } } @ Override protected void doStop ( ) throws Exception { if ( future != null ) { future . cancel ( false ) ; } super . doStop ( ) ; if ( firstExceptionThrown != null ) { throw firstExceptionThrown ; } } } 	1
package org . apache . camel . view ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . CamelContext ; import org . apache . camel . model . ChoiceType ; import org . apache . camel . model . FromType ; import org . apache . camel . model . MulticastType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . ToType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class GraphGeneratorSupport { private static final transient Log LOG = LogFactory . getLog ( RouteDotGenerator . class ) ; protected String dir ; protected int clusterCounter ; protected String extension ; private String imagePrefix = "http://activemq.apache.org/camel/images/eip/" ; private Map < Object , NodeData > nodeMap = new HashMap < Object , NodeData > ( ) ; private boolean makeParentDirs = true ; private Map < String , List < RouteType > > routeGroupMap ; protected GraphGeneratorSupport ( String dir , String extension ) { this . dir = dir ; this . extension = extension ; } public String getDir ( ) { return dir ; } public void setDir ( String dir ) { this . dir = dir ; } public void drawRoutes ( CamelContext context ) throws IOException { File parent = new File ( dir ) ; if ( makeParentDirs ) { parent . mkdirs ( ) ; } List < RouteType > routes = context . getRouteDefinitions ( ) ; routeGroupMap = createRouteGroupMap ( routes ) ; generateFile ( parent , "routes" + extension , routeGroupMap ) ; if ( routeGroupMap . size ( ) >= 1 ) { Set < Map . Entry < String , List < RouteType > > > entries = routeGroupMap . entrySet ( ) ; for ( Map . Entry < String , List < RouteType > > entry : entries ) { Map < String , List < RouteType > > map = new HashMap < String , List < RouteType > > ( ) ; String group = entry . getKey ( ) ; map . put ( group , entry . getValue ( ) ) ; generateFile ( parent , group + extension , map ) ; } } } private void generateFile ( File parent , String fileName , Map < String , List < RouteType > > map ) throws IOException { nodeMap . clear ( ) ; clusterCounter = 0 ; PrintWriter writer = new PrintWriter ( new FileWriter ( new File ( parent , fileName ) ) ) ; try { generateFile ( writer , map ) ; } finally { writer . close ( ) ; } } protected abstract void generateFile ( PrintWriter writer , Map < String , List < RouteType > > map ) ; protected boolean isMulticastNode ( ProcessorType node ) { return node instanceof MulticastType || node instanceof ChoiceType ; } protected String getLabel ( List < ExpressionType > expressions ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; for ( ExpressionType expression : expressions ) { buffer . append ( getLabel ( expression ) ) ; } return buffer . toString ( ) ; } protected String getLabel ( ExpressionType expression ) { if ( expression != null ) { return expression . getLabel ( ) ; } return "" ; } protected NodeData getNodeData ( Object node ) { Object key = node ; if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; key = fromType . getUriOrRef ( ) ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; key = toType . getUriOrRef ( ) ; } NodeData answer = nodeMap . get ( key ) ; if ( answer == null ) { String id = "node" + ( nodeMap . size ( ) + 1 ) ; answer = new NodeData ( id , node , imagePrefix ) ; nodeMap . put ( key , answer ) ; } return answer ; } protected Map < String , List < RouteType > > createRouteGroupMap ( List < RouteType > routes ) { Map < String , List < RouteType > > map = new HashMap < String , List < RouteType > > ( ) ; for ( RouteType route : routes ) { String group = route . getGroup ( ) ; if ( group == null ) { group = "Camel Routes" ; } List < RouteType > list = map . get ( group ) ; if ( list == null ) { list = new ArrayList < RouteType > ( ) ; map . put ( group , list ) ; } list . add ( route ) ; } return map ; } } 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . AnnotatedElement ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Expression ; import org . apache . camel . Pattern ; import org . apache . camel . model . language . ConstantExpression ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . asString ; public class MethodInfo { private static final transient Log LOG = LogFactory . getLog ( MethodInfo . class ) ; private Class type ; private Method method ; private final List < ParameterInfo > parameters ; private final List < ParameterInfo > bodyParameters ; private final boolean hasCustomAnnotation ; private Expression parametersExpression ; private ExchangePattern pattern = ExchangePattern . InOut ; private RecipientList recipientList ; public MethodInfo ( Class type , Method method , List < ParameterInfo > parameters , List < ParameterInfo > bodyParameters , boolean hasCustomAnnotation ) { this . type = type ; this . method = method ; this . parameters = parameters ; this . bodyParameters = bodyParameters ; this . hasCustomAnnotation = hasCustomAnnotation ; this . parametersExpression = createParametersExpression ( ) ; Pattern oneway = findOneWayAnnotation ( method ) ; if ( oneway != null ) { pattern = oneway . value ( ) ; } if ( method . getAnnotation ( org . apache . camel . RecipientList . class ) != null ) { recipientList = new RecipientList ( new ConstantExpression ( null ) ) ; } } public String toString ( ) { return method . toString ( ) ; } public MethodInvocation createMethodInvocation ( final Object pojo , final Exchange exchange ) { final Object [ ] arguments = ( Object [ ] ) parametersExpression . evaluate ( exchange ) ; return new MethodInvocation ( ) { public Method getMethod ( ) { return method ; } public Object [ ] getArguments ( ) { return arguments ; } public Object proceed ( ) throws Exception { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( ">>>> invoking: " + method + " on bean: " + pojo + " with arguments: " + asString ( arguments ) + " for exchange: " + exchange ) ; } Object result = invoke ( method , pojo , arguments , exchange ) ; if ( recipientList != null ) { recipientList . sendToRecipientList ( exchange , result ) ; } return result ; } public Object getThis ( ) { return pojo ; } public AccessibleObject getStaticPart ( ) { return method ; } } ; } public Class getType ( ) { return type ; } public Method getMethod ( ) { return method ; } public ExchangePattern getPattern ( ) { return pattern ; } public Expression getParametersExpression ( ) { return parametersExpression ; } public List < ParameterInfo > getBodyParameters ( ) { return bodyParameters ; } public Class getBodyParameterType ( ) { ParameterInfo parameterInfo = bodyParameters . get ( 0 ) ; return parameterInfo . getType ( ) ; } public boolean bodyParameterMatches ( Class bodyType ) { Class actualType = getBodyParameterType ( ) ; return actualType != null && ObjectHelper . isAssignableFrom ( bodyType , actualType ) ; } public List < ParameterInfo > getParameters ( ) { return parameters ; } public boolean hasBodyParameter ( ) { return ! bodyParameters . isEmpty ( ) ; } public boolean isHasCustomAnnotation ( ) { return hasCustomAnnotation ; } public boolean isReturnTypeVoid ( ) { return method . getReturnType ( ) . getName ( ) . equals ( "void" ) ; } protected Object invoke ( Method mth , Object pojo , Object [ ] arguments , Exchange exchange ) throws IllegalAccessException , InvocationTargetException { return mth . invoke ( pojo , arguments ) ; } protected Expression createParametersExpression ( ) { final int size = parameters . size ( ) ; final Expression [ ] expressions = new Expression [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Expression parameterExpression = parameters . get ( i ) . getExpression ( ) ; expressions [ i ] = parameterExpression ; } return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object [ ] answer = new Object [ size ] ; Object body = exchange . getIn ( ) . getBody ( ) ; boolean multiParameterArray = false ; if ( exchange . getIn ( ) . getHeader ( BeanProcessor . MULTI_PARAMETER_ARRAY ) != null ) { multiParameterArray = exchange . getIn ( ) . getHeader ( BeanProcessor . MULTI_PARAMETER_ARRAY , Boolean . class ) ; } for ( int i = 0 ; i < size ; i ++ ) { Object value = null ; if ( multiParameterArray ) { value = ( ( Object [ ] ) body ) [ i ] ; } else { value = expressions [ i ] . evaluate ( exchange ) ; } Class expectedType = parameters . get ( i ) . getType ( ) ; value = ExchangeHelper . convertToType ( exchange , expectedType , value ) ; answer [ i ] = value ; } return answer ; } @ Override public String toString ( ) { return "ParametersExpression: " + Arrays . asList ( expressions ) ; } } ; } protected Pattern findOneWayAnnotation ( Method method ) { Pattern answer = getPatternAnnotation ( method ) ; if ( answer == null ) { Class < ? > type = method . getDeclaringClass ( ) ; List < Class < ? > > typesToSearch = new ArrayList < Class < ? > > ( ) ; addTypeAndSuperTypes ( type , typesToSearch ) ; Class [ ] interfaces = type . getInterfaces ( ) ; for ( Class anInterface : interfaces ) { addTypeAndSuperTypes ( anInterface , typesToSearch ) ; } answer = findOneWayAnnotationOnMethod ( typesToSearch , method ) ; if ( answer == null ) { answer = findOneWayAnnotation ( typesToSearch ) ; } } return answer ; } protected Pattern getPatternAnnotation ( AnnotatedElement annotatedElement ) { return getPatternAnnotation ( annotatedElement , 2 ) ; } protected Pattern getPatternAnnotation ( AnnotatedElement annotatedElement , int depth ) { Pattern answer = annotatedElement . getAnnotation ( Pattern . class ) ; int nextDepth = depth - 1 ; if ( nextDepth > 0 ) { Annotation [ ] annotations = annotatedElement . getAnnotations ( ) ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( annotation instanceof Pattern || annotationType . equals ( annotatedElement ) ) { continue ; } else { Pattern another = getPatternAnnotation ( annotationType , nextDepth ) ; if ( pattern != null ) { if ( answer == null ) { answer = another ; } else { LOG . warn ( "Duplicate pattern annotation: " + another + " found on annotation: " + annotation + " which will be ignored" ) ; } } } } } return answer ; } protected void addTypeAndSuperTypes ( Class < ? > type , List < Class < ? > > result ) { for ( Class < ? > t = type ; t != null && t != Object . class ; t = t . getSuperclass ( ) ) { result . add ( t ) ; } } protected Pattern findOneWayAnnotationOnMethod ( List < Class < ? > > classes , Method method ) { for ( Class < ? > type : classes ) { try { Method definedMethod = type . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; Pattern answer = getPatternAnnotation ( definedMethod ) ; if ( answer != null ) { return answer ; } } catch ( NoSuchMethodException e ) { } } return null ; } protected Pattern findOneWayAnnotation ( List < Class < ? > > classes ) { for ( Class < ? > type : classes ) { Pattern answer = getPatternAnnotation ( type ) ; if ( answer != null ) { return answer ; } } return null ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "setOutHeader" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetOutHeaderType extends ExpressionNode { @ XmlAttribute ( required = true ) private String headerName ; public SetOutHeaderType ( ) { } public SetOutHeaderType ( String headerName , ExpressionType expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } public SetOutHeaderType ( String headerName , Expression expression ) { super ( expression ) ; setHeaderName ( headerName ) ; } @ Override public String toString ( ) { return "SetOutHeader[" + getHeaderName ( ) + ", " + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setOutHeader" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ObjectHelper . notNull ( getHeaderName ( ) , "headerName" ) ; Expression expr = getExpression ( ) . createExpression ( routeContext ) ; return ProcessorBuilder . setOutHeader ( getHeaderName ( ) , expr ) ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return headerName ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; public class ExchangePatternProcessor implements AsyncProcessor { private ExchangePattern exchangePattern = ExchangePattern . InOnly ; public ExchangePatternProcessor ( ) { } public ExchangePatternProcessor ( ExchangePattern ep ) { setExchangePattern ( ep ) ; } public void setExchangePattern ( ExchangePattern ep ) { exchangePattern = ep ; } public void process ( Exchange exchange ) throws Exception { exchange . setPattern ( exchangePattern ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { exchange . setPattern ( exchangePattern ) ; callback . done ( true ) ; return true ; } } 	1
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ExchangeHelper ; public class StringDataFormat implements DataFormat { private String charset ; public StringDataFormat ( String charset ) { this . charset = charset ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { String text = ExchangeHelper . convertToType ( exchange , String . class , graph ) ; byte [ ] bytes ; if ( charset != null ) { bytes = text . getBytes ( charset ) ; } else { bytes = text . getBytes ( ) ; } stream . write ( bytes ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { byte [ ] bytes = IOConverter . toBytes ( stream ) ; String answer ; if ( charset != null ) { answer = new String ( bytes , charset ) ; } else { answer = new String ( bytes ) ; } return answer ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . ServiceHelper ; public class DelegateProcessor extends ServiceSupport implements Processor { protected Processor processor ; public DelegateProcessor ( ) { } public DelegateProcessor ( Processor processor ) { if ( processor == this ) { throw new IllegalArgumentException ( "Recursive DelegateProcessor!" ) ; } this . processor = processor ; } public void process ( Exchange exchange ) throws Exception { processNext ( exchange ) ; } protected void processNext ( Exchange exchange ) throws Exception { if ( processor != null ) { processor . process ( exchange ) ; } } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public Processor getProcessor ( ) { return processor ; } public void setProcessor ( Processor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public void proceed ( Exchange exchange ) throws Exception { processNext ( exchange ) ; } } 	1
package org . apache . camel . processor . resequencer ; public interface TimeoutHandler { void timeout ( Timeout timeout ) ; } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultUnitOfWork ; import static org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ; public final class UnitOfWorkProcessor extends DelegateAsyncProcessor { public UnitOfWorkProcessor ( AsyncProcessor processor ) { super ( processor ) ; } @ Override public String toString ( ) { return "UnitOfWrok(" + processor + ")" ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( exchange . getUnitOfWork ( ) == null ) { final DefaultUnitOfWork uow = new DefaultUnitOfWork ( ) ; exchange . setUnitOfWork ( uow ) ; try { uow . start ( ) ; } catch ( Exception e ) { throw wrapRuntimeCamelException ( e ) ; } return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( sync ) ; exchange . getUnitOfWork ( ) . done ( exchange ) ; try { uow . stop ( ) ; } catch ( Exception e ) { throw wrapRuntimeCamelException ( e ) ; } exchange . setUnitOfWork ( null ) ; } } ) ; } else { return processor . process ( exchange , callback ) ; } } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . TYPE , ElementType . METHOD } ) @ Pattern ( ExchangePattern . InOnly ) public @ interface InOnly { } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ProceedProcessor ; import org . apache . camel . processor . UnitOfWorkProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . RouteContext ; public class DefaultRouteContext implements RouteContext { private RouteType route ; private FromType from ; private Collection < Route > routes ; private Endpoint < ? extends Exchange > endpoint ; private List < Processor > eventDrivenProcessors = new ArrayList < Processor > ( ) ; private Interceptor lastInterceptor ; private CamelContext camelContext ; private List < InterceptStrategy > interceptStrategies = new ArrayList < InterceptStrategy > ( ) ; private ErrorHandlerWrappingStrategy errorHandlerWrappingStrategy ; private boolean routeAdded ; public DefaultRouteContext ( RouteType route , FromType from , Collection < Route > routes ) { this . route = route ; this . from = from ; this . routes = routes ; } public DefaultRouteContext ( CamelContext camelContext ) { this . camelContext = camelContext ; routes = new ArrayList < Route > ( ) ; route = new RouteType ( "temporary" ) ; } public Endpoint < ? extends Exchange > getEndpoint ( ) { if ( endpoint == null ) { endpoint = from . resolveEndpoint ( this ) ; } return endpoint ; } public FromType getFrom ( ) { return from ; } public RouteType getRoute ( ) { return route ; } public CamelContext getCamelContext ( ) { if ( camelContext == null ) { camelContext = getRoute ( ) . getCamelContext ( ) ; } return camelContext ; } public Processor createProcessor ( ProcessorType node ) throws Exception { return node . createOutputsProcessor ( this ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) { return route . resolveEndpoint ( uri ) ; } public Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) { Endpoint < ? extends Exchange > endpoint = null ; if ( uri != null ) { endpoint = resolveEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } } if ( ref != null ) { endpoint = lookup ( ref , Endpoint . class ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( "ref:" + ref ) ; } } if ( endpoint == null ) { throw new IllegalArgumentException ( "Either 'uri' or 'ref' must be specified on: " + this ) ; } else { return endpoint ; } } public < T > T lookup ( String name , Class < T > type ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } public void commit ( ) { if ( ! eventDrivenProcessors . isEmpty ( ) ) { Processor processor = Pipeline . newInstance ( eventDrivenProcessors ) ; final AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; Processor unitOfWorkProcessor = new UnitOfWorkProcessor ( asyncProcessor ) ; Route edcr = new EventDrivenConsumerRoute ( getEndpoint ( ) , unitOfWorkProcessor ) ; edcr . getProperties ( ) . put ( Route . ID_PROPERTY , route . idOrCreate ( ) ) ; edcr . getProperties ( ) . put ( Route . PARENT_PROPERTY , Integer . toHexString ( route . hashCode ( ) ) ) ; if ( route . getGroup ( ) != null ) { edcr . getProperties ( ) . put ( Route . GROUP_PROPERTY , route . getGroup ( ) ) ; } routes . add ( edcr ) ; } } public void addEventDrivenProcessor ( Processor processor ) { eventDrivenProcessors . add ( processor ) ; } public void intercept ( Intercept interceptor ) { lastInterceptor = ( Interceptor ) interceptor ; } public Processor createProceedProcessor ( ) { if ( lastInterceptor == null ) { throw new IllegalArgumentException ( "Cannot proceed() from outside of an interceptor!" ) ; } else { return new ProceedProcessor ( lastInterceptor ) ; } } public List < InterceptStrategy > getInterceptStrategies ( ) { return interceptStrategies ; } public void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) { this . interceptStrategies = interceptStrategies ; } public void addInterceptStrategy ( InterceptStrategy interceptStrategy ) { getInterceptStrategies ( ) . add ( interceptStrategy ) ; } public ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) { return errorHandlerWrappingStrategy ; } public void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) { errorHandlerWrappingStrategy = strategy ; } public boolean isRouteAdded ( ) { return routeAdded ; } public void setIsRouteAdded ( boolean b ) { routeAdded = b ; } public DataFormatType getDataFormat ( String ref ) { Map < String , DataFormatType > dataFormats = getCamelContext ( ) . getDataFormats ( ) ; if ( dataFormats != null ) { return dataFormats . get ( ref ) ; } else { return null ; } } } 	1
package org . apache . camel . builder . xml ; public class StreamResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new StreamResultHandler ( ) ; } } 	0
package org . apache . camel . component . dataset ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . util . ExchangeHelper ; public abstract class DataSetSupport implements DataSet { private Map < String , Object > defaultHeaders ; private Processor outputTransformer ; private long size = 10 ; private long reportCount = - 1 ; public DataSetSupport ( ) { } public DataSetSupport ( int size ) { setSize ( size ) ; } public void populateMessage ( Exchange exchange , long messageIndex ) throws Exception { Message in = exchange . getIn ( ) ; in . setBody ( createMessageBody ( messageIndex ) ) ; in . setHeaders ( getDefaultHeaders ( ) ) ; applyHeaders ( exchange , messageIndex ) ; if ( outputTransformer != null ) { outputTransformer . process ( exchange ) ; } } public void assertMessageExpected ( DataSetEndpoint dataSetEndpoint , Exchange expected , Exchange actual , long index ) throws Exception { Object expectedBody = expected . getIn ( ) . getBody ( ) ; Object actualBody = actual . getIn ( ) . getBody ( ) ; if ( expectedBody != null ) { actualBody = ExchangeHelper . getMandatoryInBody ( actual , expectedBody . getClass ( ) ) ; } DataSetEndpoint . assertEquals ( "message body" , expectedBody , actualBody , actual ) ; } public long getSize ( ) { return size ; } public void setSize ( long size ) { this . size = size ; } public long getReportCount ( ) { if ( reportCount <= 0 ) { reportCount = getSize ( ) / 5 ; } return reportCount ; } public void setReportCount ( long reportCount ) { this . reportCount = reportCount ; } public Map < String , Object > getDefaultHeaders ( ) { if ( defaultHeaders == null ) { defaultHeaders = new HashMap < String , Object > ( ) ; populateDefaultHeaders ( defaultHeaders ) ; } return defaultHeaders ; } public void setDefaultHeaders ( Map < String , Object > defaultHeaders ) { this . defaultHeaders = defaultHeaders ; } public Processor getOutputTransformer ( ) { return outputTransformer ; } public void setOutputTransformer ( Processor outputTransformer ) { this . outputTransformer = outputTransformer ; } protected abstract Object createMessageBody ( long messageIndex ) ; protected void applyHeaders ( Exchange exchange , long messageIndex ) { } protected void populateDefaultHeaders ( Map < String , Object > map ) { } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "jxpath" ) public class JXPathExpression extends ExpressionType { public JXPathExpression ( ) { } public JXPathExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "jxpath" ; } } 	0
package org . apache . camel . component . seda ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SedaConsumer extends ServiceSupport implements Consumer , Runnable { private static final transient Log LOG = LogFactory . getLog ( SedaConsumer . class ) ; private SedaEndpoint endpoint ; private AsyncProcessor processor ; private Thread thread ; public SedaConsumer ( SedaEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; } @ Override public String toString ( ) { return "SedaConsumer: " + endpoint . getEndpointUri ( ) ; } public void run ( ) { BlockingQueue < Exchange > queue = endpoint . getQueue ( ) ; while ( queue != null && isRunAllowed ( ) ) { final Exchange exchange ; try { exchange = queue . poll ( 1000 , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Interupted: " + e , e ) ; } continue ; } if ( exchange != null ) { if ( isRunAllowed ( ) ) { try { processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } catch ( Exception e ) { LOG . error ( "Seda queue caught: " + e , e ) ; } } else { LOG . warn ( "This consumer is stopped during polling an exchange, so putting it back on the seda queue: " + exchange ) ; try { queue . put ( exchange ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Interupted: " + e , e ) ; } } } } } } protected void doStart ( ) throws Exception { thread = new Thread ( this , getThreadName ( endpoint . getEndpointUri ( ) ) ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { thread . join ( ) ; thread = null ; } } 	1
package org . apache . camel . builder . xml ; public interface ResultHandlerFactory { ResultHandler createResult ( ) ; } 	0
package org . apache . camel . spi ; public interface Registry { < T > T lookup ( String name , Class < T > type ) ; Object lookup ( String name ) ; } 	1
package org . apache . camel . component . jms ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . MessageListener ; import javax . jms . Session ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . jms . core . JmsOperations ; import org . springframework . jms . core . MessageCreator ; import static org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ; public class EndpointMessageListener implements MessageListener { private static final transient Log LOG = LogFactory . getLog ( EndpointMessageListener . class ) ; private JmsEndpoint endpoint ; private Processor processor ; private JmsBinding binding ; private boolean eagerLoadingOfProperties ; private Destination replyToDestination ; private JmsOperations template ; private boolean disableReplyTo ; public EndpointMessageListener ( JmsEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; endpoint . getConfiguration ( ) . configure ( this ) ; } public void onMessage ( final Message message ) { RuntimeCamelException rce = null ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " consumer receiving JMS message: " + message ) ; } Destination replyDestination = getReplyToDestination ( message ) ; final JmsExchange exchange = createExchange ( message , replyDestination ) ; if ( eagerLoadingOfProperties ) { exchange . getIn ( ) . getHeaders ( ) ; } processor . process ( exchange ) ; JmsMessage body = null ; if ( exchange . isFailed ( ) ) { if ( exchange . getException ( ) != null ) { rce = wrapRuntimeCamelException ( exchange . getException ( ) ) ; } else if ( exchange . getFault ( ) . getBody ( ) != null ) { body = exchange . getFault ( ) ; } } else { body = exchange . getOut ( false ) ; } if ( rce == null && body != null && ! disableReplyTo ) { sendReply ( replyDestination , message , exchange , body ) ; } } catch ( Exception e ) { rce = wrapRuntimeCamelException ( e ) ; } if ( rce != null ) { LOG . warn ( endpoint + " consumer caught an exception while processing " + "JMS message: " + message , rce ) ; throw rce ; } } public JmsExchange createExchange ( Message message , Destination replyDestination ) { JmsExchange exchange = new JmsExchange ( endpoint . getCamelContext ( ) , endpoint . getExchangePattern ( ) , getBinding ( ) , message ) ; if ( replyDestination != null && ! disableReplyTo ) { exchange . setProperty ( "org.apache.camel.jms.replyDestination" , replyDestination ) ; exchange . setPattern ( ExchangePattern . InOut ) ; } return exchange ; } public JmsBinding getBinding ( ) { if ( binding == null ) { binding = new JmsBinding ( endpoint ) ; } return binding ; } public void setBinding ( JmsBinding binding ) { this . binding = binding ; } public boolean isEagerLoadingOfProperties ( ) { return eagerLoadingOfProperties ; } public void setEagerLoadingOfProperties ( boolean eagerLoadingOfProperties ) { this . eagerLoadingOfProperties = eagerLoadingOfProperties ; } public synchronized JmsOperations getTemplate ( ) { if ( template == null ) { template = endpoint . createInOnlyTemplate ( ) ; } return template ; } public void setTemplate ( JmsOperations template ) { this . template = template ; } public boolean isDisableReplyTo ( ) { return disableReplyTo ; } public void setDisableReplyTo ( boolean disableReplyTo ) { this . disableReplyTo = disableReplyTo ; } public Destination getReplyToDestination ( ) { return replyToDestination ; } public void setReplyToDestination ( Destination replyToDestination ) { this . replyToDestination = replyToDestination ; } protected void sendReply ( Destination replyDestination , final Message message , final JmsExchange exchange , final JmsMessage out ) { if ( replyDestination == null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Cannot send reply message as there is no replyDestination for: " + out ) ; } return ; } getTemplate ( ) . send ( replyDestination , new MessageCreator ( ) { public Message createMessage ( Session session ) throws JMSException { Message reply = endpoint . getBinding ( ) . makeJmsMessage ( exchange , out , session ) ; if ( endpoint . getConfiguration ( ) . isUseMessageIDAsCorrelationID ( ) ) { String messageID = exchange . getIn ( ) . getHeader ( "JMSMessageID" , String . class ) ; reply . setJMSCorrelationID ( messageID ) ; } else { String correlationID = message . getJMSCorrelationID ( ) ; if ( correlationID != null ) { reply . setJMSCorrelationID ( correlationID ) ; } } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " sending reply JMS message: " + reply ) ; } return reply ; } } ) ; } protected Destination getReplyToDestination ( Message message ) throws JMSException { Destination destination = replyToDestination ; if ( destination == null ) { destination = message . getJMSReplyTo ( ) ; } return destination ; } } 	0
package org . apache . camel . impl ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . TimeUnit ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . processor . Logger ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class EventDrivenPollingConsumer < E extends Exchange > extends PollingConsumerSupport < E > implements Processor { private static final transient Log LOG = LogFactory . getLog ( EventDrivenPollingConsumer . class ) ; private BlockingQueue < E > queue ; private ExceptionHandler interuptedExceptionHandler = new LoggingExceptionHandler ( new Logger ( LOG ) ) ; private Consumer < E > consumer ; public EventDrivenPollingConsumer ( Endpoint < E > endpoint ) { this ( endpoint , new ArrayBlockingQueue < E > ( 1000 ) ) ; } public EventDrivenPollingConsumer ( Endpoint < E > endpoint , BlockingQueue < E > queue ) { super ( endpoint ) ; this . queue = queue ; } public E receiveNoWait ( ) { return receive ( 0 ) ; } public E receive ( ) { while ( isRunAllowed ( ) ) { try { return queue . take ( ) ; } catch ( InterruptedException e ) { handleInteruptedException ( e ) ; } } LOG . debug ( "Consumer is not running, so returning null" ) ; return null ; } public E receive ( long timeout ) { try { return queue . poll ( timeout , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { handleInteruptedException ( e ) ; return null ; } } public void process ( Exchange exchange ) throws Exception { queue . offer ( ( E ) exchange ) ; } public ExceptionHandler getInteruptedExceptionHandler ( ) { return interuptedExceptionHandler ; } public void setInteruptedExceptionHandler ( ExceptionHandler interuptedExceptionHandler ) { this . interuptedExceptionHandler = interuptedExceptionHandler ; } protected void handleInteruptedException ( InterruptedException e ) { getInteruptedExceptionHandler ( ) . handleException ( e ) ; } protected void doStart ( ) throws Exception { consumer = getEndpoint ( ) . createConsumer ( this ) ; consumer . start ( ) ; } protected void doStop ( ) throws Exception { if ( consumer != null ) { try { consumer . stop ( ) ; } finally { consumer = null ; } } } } 	1
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; public class ThrowFaultProcessor implements Processor { private Throwable fault ; public ThrowFaultProcessor ( Throwable fault ) { this . fault = fault ; } public void process ( Exchange exchange ) throws Exception { Message message = exchange . getFault ( ) ; message . setBody ( fault ) ; } } 	0
package org . apache . camel . builder ; import java . util . List ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; public interface ErrorHandlerBuilder { ErrorHandlerBuilder copy ( ) ; Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception ; void addErrorHandlers ( ExceptionType exception ) ; void setErrorHandlers ( List < ExceptionType > exceptions ) ; } 	1
package org . apache . camel . component . freemarker ; import java . io . StringWriter ; import java . util . Map ; import freemarker . template . Configuration ; import freemarker . template . Template ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . component . ResourceBasedEndpoint ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; public class FreemarkerEndpoint extends ResourceBasedEndpoint { private String encoding ; private Configuration configuration ; public FreemarkerEndpoint ( String uri , Component component , String resourceUri , Map parameters ) { super ( uri , component , resourceUri , null ) ; } @ Override public boolean isSingleton ( ) { return true ; } @ Override public ExchangePattern getExchangePattern ( ) { return ExchangePattern . InOut ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public String getEncoding ( ) { return encoding ; } public Configuration getConfiguration ( ) { return configuration ; } public void setConfiguration ( Configuration configuration ) { this . configuration = configuration ; } @ Override @ SuppressWarnings ( "unchecked" ) protected void onExchange ( Exchange exchange ) throws Exception { String path = getResourceUri ( ) ; ObjectHelper . notNull ( configuration , "configuration" ) ; ObjectHelper . notNull ( path , "resourceUri" ) ; Map variableMap = ExchangeHelper . createVariableMap ( exchange ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Freemarker is evaluating " + path + " using context: " + variableMap ) ; } Template template ; if ( encoding != null ) { template = configuration . getTemplate ( path , encoding ) ; } else { template = configuration . getTemplate ( path ) ; } StringWriter buffer = new StringWriter ( ) ; template . process ( variableMap , buffer ) ; buffer . flush ( ) ; Message out = exchange . getOut ( true ) ; out . setBody ( buffer . toString ( ) ) ; out . setHeader ( "org.apache.camel.freemarker.resource" , getResource ( ) ) ; out . setHeader ( "org.apache.camel.freemarker.resourceUri" , path ) ; Map < String , Object > headers = ( Map < String , Object > ) variableMap . get ( "headers" ) ; for ( String key : headers . keySet ( ) ) { out . setHeader ( key , headers . get ( key ) ) ; } } } 	0
package org . apache . camel . impl ; import java . util . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . RouteContext ; public class DelegateLifecycleStrategy implements LifecycleStrategy { private final LifecycleStrategy delegate ; public DelegateLifecycleStrategy ( LifecycleStrategy delegate ) { this . delegate = delegate ; } public void onContextStart ( CamelContext context ) { delegate . onContextStart ( context ) ; } public void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) { delegate . onEndpointAdd ( endpoint ) ; } public void onRouteContextCreate ( RouteContext routeContext ) { delegate . onRouteContextCreate ( routeContext ) ; } public void onRoutesAdd ( Collection < Route > routes ) { delegate . onRoutesAdd ( routes ) ; } public void onServiceAdd ( CamelContext context , Service service ) { delegate . onServiceAdd ( context , service ) ; } } 	1
package org . apache . camel . component . event ; import org . apache . camel . Exchange ; import org . springframework . context . ApplicationEvent ; public class CamelEvent extends ApplicationEvent { private final Exchange exchange ; public CamelEvent ( EventEndpoint source , Exchange exchange ) { super ( source ) ; this . exchange = exchange ; } @ Override public EventEndpoint getSource ( ) { return ( EventEndpoint ) super . getSource ( ) ; } public Exchange getExchange ( ) { return exchange ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . processor . Logger ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . LogFactory ; public class LoggingExceptionHandler implements ExceptionHandler { private final Logger logger ; public LoggingExceptionHandler ( Class ownerType ) { this ( new Logger ( LogFactory . getLog ( ownerType ) , LoggingLevel . ERROR ) ) ; } public LoggingExceptionHandler ( Logger logger ) { this . logger = logger ; } public void handleException ( Throwable exception ) { logger . log ( exception . getMessage ( ) , exception ) ; } } 	1
package org . apache . camel . component . timer ; import java . util . Date ; import java . util . Timer ; import java . util . TimerTask ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TimerConsumer extends DefaultConsumer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( TimerConsumer . class ) ; private final TimerEndpoint endpoint ; private TimerTask task ; public TimerConsumer ( TimerEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { task = new TimerTask ( ) { @ Override public void run ( ) { sendTimerExchange ( ) ; } } ; Timer timer = endpoint . getTimer ( ) ; configureTask ( task , timer ) ; } @ Override protected void doStop ( ) throws Exception { task . cancel ( ) ; } protected void configureTask ( TimerTask task , Timer timer ) { if ( endpoint . isFixedRate ( ) ) { if ( endpoint . getTime ( ) != null ) { timer . scheduleAtFixedRate ( task , endpoint . getTime ( ) , endpoint . getPeriod ( ) ) ; } else { timer . scheduleAtFixedRate ( task , endpoint . getDelay ( ) , endpoint . getPeriod ( ) ) ; } } else { if ( endpoint . getTime ( ) != null ) { if ( endpoint . getPeriod ( ) >= 0 ) { timer . schedule ( task , endpoint . getTime ( ) , endpoint . getPeriod ( ) ) ; } else { timer . schedule ( task , endpoint . getTime ( ) ) ; } } else { if ( endpoint . getPeriod ( ) >= 0 ) { timer . schedule ( task , endpoint . getDelay ( ) , endpoint . getPeriod ( ) ) ; } else { timer . schedule ( task , endpoint . getDelay ( ) ) ; } } } } protected void sendTimerExchange ( ) { Exchange exchange = endpoint . createExchange ( ) ; exchange . setProperty ( "org.apache.camel.timer.name" , endpoint . getTimerName ( ) ) ; exchange . setProperty ( "org.apache.camel.timer.time" , endpoint . getTime ( ) ) ; exchange . setProperty ( "org.apache.camel.timer.period" , endpoint . getPeriod ( ) ) ; Date now = new Date ( ) ; exchange . setProperty ( "org.apache.camel.timer.firedTime" , now ) ; exchange . getIn ( ) . setHeader ( "firedTime" , now ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { LOG . error ( "Caught: " + e , e ) ; } } } 	0
package org . apache . camel . builder ; import java . util . List ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; public class ErrorHandlerBuilderRef extends ErrorHandlerBuilderSupport { private final String ref ; private ErrorHandlerBuilder handler ; public ErrorHandlerBuilderRef ( String ref ) { this . ref = ref ; } public ErrorHandlerBuilder copy ( ) { return new ErrorHandlerBuilderRef ( ref ) ; } @ Override public void addErrorHandlers ( ExceptionType exception ) { if ( handler != null ) { handler . addErrorHandlers ( exception ) ; } super . addErrorHandlers ( exception ) ; } public Processor createErrorHandler ( RouteContext routeContext , Processor processor ) throws Exception { if ( handler == null ) { handler = routeContext . lookup ( ref , ErrorHandlerBuilder . class ) ; ObjectHelper . notNull ( handler , "error handler '" + ref + "'" ) ; List < ExceptionType > list = getExceptions ( ) ; for ( ExceptionType exceptionType : list ) { handler . addErrorHandlers ( exceptionType ) ; } } return handler . createErrorHandler ( routeContext , processor ) ; } } 	1
package org . apache . camel . component . http ; import java . io . InputStream ; import org . apache . camel . CamelException ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . httpclient . Header ; import org . apache . commons . httpclient . StatusLine ; public class HttpOperationFailedException extends CamelException { private final String redirectLocation ; private final int statusCode ; private final StatusLine statusLine ; private final Header [ ] responseHeaders ; private final InputStream responseBody ; public HttpOperationFailedException ( int statusCode , StatusLine statusLine , String location , Header [ ] responseHeaders , InputStream responseBody ) { super ( "HTTP operation failed with statusCode: " + statusCode + ", status: " + statusLine + ( location != null ? ", redirectLocation: " + location : "" ) ) ; this . statusCode = statusCode ; this . statusLine = statusLine ; this . redirectLocation = location ; this . responseHeaders = responseHeaders ; this . responseBody = responseBody ; } public HttpOperationFailedException ( int statusCode , StatusLine statusLine , Header [ ] responseHeaders , InputStream responseBody ) { this ( statusCode , statusLine , null , responseHeaders , responseBody ) ; } public boolean isRedirectError ( ) { return statusCode >= 300 && statusCode < 400 ; } public boolean hasRedirectLocation ( ) { return ObjectHelper . isNotNullAndNonEmpty ( redirectLocation ) ; } public String getRedirectLocation ( ) { return redirectLocation ; } public StatusLine getStatusLine ( ) { return statusLine ; } public int getStatusCode ( ) { return statusCode ; } public Header [ ] getResponseHeaders ( ) { return responseHeaders ; } public InputStream getResponseBody ( ) { return responseBody ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class BuilderSupport { private CamelContext context ; private ErrorHandlerBuilder errorHandlerBuilder ; private boolean inheritErrorHandler = true ; protected BuilderSupport ( CamelContext context ) { this . context = context ; } protected BuilderSupport ( BuilderSupport parent ) { this . context = parent . getContext ( ) ; this . inheritErrorHandler = parent . inheritErrorHandler ; if ( inheritErrorHandler && parent . errorHandlerBuilder != null ) { this . errorHandlerBuilder = parent . errorHandlerBuilder . copy ( ) ; } } public ValueBuilder header ( String name ) { return Builder . header ( name ) ; } public ValueBuilder body ( ) { return Builder . body ( ) ; } public < T > ValueBuilder body ( Class < T > type ) { return Builder . bodyAs ( type ) ; } public ValueBuilder outBody ( ) { return Builder . outBody ( ) ; } public < T > ValueBuilder outBody ( Class < T > type ) { return Builder . outBodyAs ( type ) ; } public ValueBuilder faultBody ( ) { return Builder . faultBody ( ) ; } public < T > ValueBuilder faultBodyAs ( Class < T > type ) { return Builder . faultBodyAs ( type ) ; } public ValueBuilder systemProperty ( String name ) { return Builder . systemProperty ( name ) ; } public ValueBuilder systemProperty ( String name , String defaultValue ) { return Builder . systemProperty ( name , defaultValue ) ; } public ValueBuilder constant ( Object value ) { return Builder . constant ( value ) ; } public Endpoint endpoint ( String uri ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; Endpoint endpoint = getContext ( ) . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public < T extends Endpoint > T endpoint ( String uri , Class < T > type ) throws NoSuchEndpointException { ObjectHelper . notNull ( uri , "uri" ) ; T endpoint = getContext ( ) . getEndpoint ( uri , type ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public List < Endpoint > endpoints ( String ... uris ) throws NoSuchEndpointException { List < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; for ( String uri : uris ) { endpoints . add ( endpoint ( uri ) ) ; } return endpoints ; } public List < Endpoint > endpoints ( Endpoint ... endpoints ) { List < Endpoint > answer = new ArrayList < Endpoint > ( ) ; answer . addAll ( Arrays . asList ( endpoints ) ) ; return answer ; } public NoErrorHandlerBuilder noErrorHandler ( ) { return new NoErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( ) { return new LoggingErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( String log ) { return loggingErrorHandler ( LogFactory . getLog ( log ) ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log ) { return new LoggingErrorHandlerBuilder ( log ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log , LoggingLevel level ) { return new LoggingErrorHandlerBuilder ( log , level ) ; } public DeadLetterChannelBuilder deadLetterChannel ( ) { return new DeadLetterChannelBuilder ( ) ; } public DeadLetterChannelBuilder deadLetterChannel ( String deadLetterUri ) { return deadLetterChannel ( endpoint ( deadLetterUri ) ) ; } public DeadLetterChannelBuilder deadLetterChannel ( Endpoint deadLetterEndpoint ) { return new DeadLetterChannelBuilder ( new SendProcessor ( deadLetterEndpoint ) ) ; } public CamelContext getContext ( ) { return context ; } public void setContext ( CamelContext context ) { this . context = context ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public boolean isInheritErrorHandler ( ) { return inheritErrorHandler ; } public void setInheritErrorHandler ( boolean inheritErrorHandler ) { this . inheritErrorHandler = inheritErrorHandler ; } } 	1
package org . apache . camel . component . cxf . spring ; import org . springframework . beans . factory . xml . NamespaceHandlerSupport ; public class NamespaceHandler extends NamespaceHandlerSupport { public void init ( ) { registerBeanDefinitionParser ( "cxfEndpoint" , new CxfEndpointBeanDefinitionParser ( ) ) ; } } 	0
package org . apache . camel . spi ; import org . apache . camel . Exchange ; public interface UnitOfWork { void addSynchronization ( Synchronization synchronization ) ; void removeSynchronization ( Synchronization synchronization ) ; void done ( Exchange exchange ) ; String getId ( ) ; } 	1
package org . apache . camel . model ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "optionalIdentifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class OptionalIdentifiedType < T extends OptionalIdentifiedType > { @ XmlTransient protected static Map < String , AtomicInteger > nodeCounters = new HashMap < String , AtomicInteger > ( ) ; @ XmlAttribute ( required = false ) @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlElement ( required = false ) private Description description ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Description getDescription ( ) { return description ; } public void setDescription ( Description description ) { this . description = description ; } public String getShortName ( ) { return "node" ; } public T describe ( String id , String text , String lang ) { if ( id != null ) { setId ( id ) ; } if ( text != null ) { if ( description == null ) { description = new Description ( ) ; } description . setText ( text ) ; } if ( lang != null ) { if ( description == null ) { description = new Description ( ) ; } description . setLang ( lang ) ; } return ( T ) this ; } public T description ( String text ) { if ( description == null ) { description = new Description ( ) ; } description . setText ( text ) ; return ( T ) this ; } public T description ( String text , String lang ) { description ( text ) ; description . setLang ( lang ) ; return ( T ) this ; } public T id ( String id ) { setId ( id ) ; return ( T ) this ; } public String idOrCreate ( ) { if ( id == null ) { setId ( createId ( ) ) ; } return getId ( ) ; } protected String createId ( ) { String key = getShortName ( ) ; return key + getNodeCounter ( key ) . incrementAndGet ( ) ; } protected static synchronized AtomicInteger getNodeCounter ( String key ) { AtomicInteger answer = nodeCounters . get ( key ) ; if ( answer == null ) { answer = new AtomicInteger ( 0 ) ; nodeCounters . put ( key , answer ) ; } return answer ; } } 	0
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . Service ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ServiceHelper ; public abstract class ServiceSupport implements Service { private static int threadCounter ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private AtomicBoolean starting = new AtomicBoolean ( false ) ; private AtomicBoolean stopping = new AtomicBoolean ( false ) ; private AtomicBoolean stopped = new AtomicBoolean ( false ) ; private Collection childServices ; private String version ; public void start ( ) throws Exception { if ( started . compareAndSet ( false , true ) ) { starting . set ( true ) ; try { if ( childServices != null ) { ServiceHelper . startServices ( childServices ) ; } doStart ( ) ; } finally { starting . set ( false ) ; } } } public void stop ( ) throws Exception { if ( started . get ( ) && stopping . compareAndSet ( false , true ) ) { try { doStop ( ) ; } finally { if ( childServices != null ) { ServiceHelper . stopServices ( childServices ) ; } stopped . set ( true ) ; started . set ( false ) ; stopping . set ( false ) ; } } } public boolean isStarted ( ) { return started . get ( ) ; } public boolean isStarting ( ) { return starting . get ( ) ; } public boolean isStopping ( ) { return stopping . get ( ) ; } protected boolean isRunAllowed ( ) { return ! ( stopping . get ( ) || stopped . get ( ) ) ; } public boolean isStopped ( ) { return stopped . get ( ) ; } protected abstract void doStart ( ) throws Exception ; protected abstract void doStop ( ) throws Exception ; protected String getThreadName ( String prefix ) { return prefix + " thread:" + nextThreadCounter ( ) ; } protected static synchronized int nextThreadCounter ( ) { return ++ threadCounter ; } protected void addChildService ( Object childService ) { if ( childServices == null ) { childServices = new ArrayList ( ) ; } childServices . add ( childService ) ; } protected boolean removeChildService ( Object childService ) { if ( childServices != null ) { return childServices . remove ( childService ) ; } else { return false ; } } protected synchronized String getVersion ( ) { if ( ObjectHelper . isNotNullAndNonEmpty ( version ) ) { return version ; } Package aPackage = getClass ( ) . getPackage ( ) ; if ( aPackage != null ) { version = aPackage . getImplementationVersion ( ) ; if ( version == null ) { version = aPackage . getSpecificationVersion ( ) ; if ( version == null ) { version = "" ; } } } else { version = "" ; } return version ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "xpath" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class XPathExpression extends NamespaceAwareExpression { @ XmlAttribute ( required = false ) private Class resultType ; public XPathExpression ( ) { } public XPathExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "xpath" ; } public Class getResultType ( ) { return resultType ; } public void setResultType ( Class resultType ) { this . resultType = resultType ; } @ Override protected void configureExpression ( RouteContext routeContext , Expression expression ) { super . configureExpression ( routeContext , expression ) ; if ( resultType != null ) { setProperty ( expression , "resultType" , resultType ) ; } } @ Override protected void configurePredicate ( RouteContext routeContext , Predicate predicate ) { super . configurePredicate ( routeContext , predicate ) ; if ( resultType != null ) { setProperty ( predicate , "resultType" , resultType ) ; } } } 	0
package org . apache . camel . impl ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import org . apache . camel . TypeConverter ; import org . apache . camel . impl . converter . AnnotationTypeConverterLoader ; import org . apache . camel . impl . converter . TypeConverterRegistry ; import org . apache . camel . util . ObjectHelper ; public class ReportingTypeConverterLoader extends AnnotationTypeConverterLoader { private static final Comparator < TypeMapping > COMPARE_LAST_LOADED_FIRST = new Comparator < TypeMapping > ( ) { public int compare ( TypeMapping t1 , TypeMapping t2 ) { if ( ObjectHelper . equal ( t1 . fromType , t2 . fromType ) ) { return ObjectHelper . equal ( t1 . toType , t2 . toType ) ? t1 . index - t2 . index : ObjectHelper . compare ( getTypeName ( t1 . toType ) , getTypeName ( t2 . toType ) ) ; } return ObjectHelper . compare ( getTypeName ( t1 . fromType ) , getTypeName ( t2 . fromType ) ) ; } } ; private List < TypeMapping > typeMappings = new ArrayList < TypeMapping > ( ) ; public TypeMapping [ ] getTypeConversions ( ) { Collections . sort ( typeMappings , COMPARE_LAST_LOADED_FIRST ) ; return typeMappings . toArray ( new TypeMapping [ typeMappings . size ( ) ] ) ; } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { TypeMapping mapping = new TypeMapping ( toType , fromType , typeConverter . getClass ( ) , method ) ; typeMappings . add ( mapping ) ; } private static String getTypeName ( Class type ) { return type != null ? type . getName ( ) : null ; } public static class TypeMapping { private static int counter ; private Class toType ; private Class fromType ; private Class converterType ; private Method method ; private int index ; public TypeMapping ( Class toType , Class fromType , Class converterType , Method method ) { this . toType = toType ; this . fromType = fromType ; this . converterType = converterType ; this . method = method ; this . index = counter ++ ; } public Class getFromType ( ) { return fromType ; } public Class getToType ( ) { return toType ; } public Class getConverterType ( ) { return converterType ; } public Method getMethod ( ) { return method ; } public int getIndex ( ) { return index ; } @ Override public boolean equals ( Object object ) { if ( object instanceof TypeMapping ) { TypeMapping that = ( TypeMapping ) object ; return this . index == that . index ; } return false ; } @ Override public int hashCode ( ) { int answer = toType . hashCode ( ) ; if ( fromType != null ) { answer *= 37 + fromType . hashCode ( ) ; } return answer ; } @ Override public String toString ( ) { return "[" + fromType . getSimpleName ( ) + "=>" + toType . getSimpleName ( ) + "]" ; } } } 	1
package org . apache . camel . language ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . component . bean . XPathAnnotationExpressionFactory ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "xpath" , factory = XPathAnnotationExpressionFactory . class ) public @ interface XPath { String value ( ) ; NamespacePrefix [ ] namespaces ( ) default { @ NamespacePrefix ( prefix = "soap" , uri = "http://www.w3.org/2003/05/soap-envelope" ) , @ NamespacePrefix ( prefix = "xsd" , uri = "http://www.w3.org/2001/XMLSchema" ) } ; } 	0
package org . apache . camel . builder ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . InputStream ; import java . nio . channels . ReadableByteChannel ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Date ; import java . util . Scanner ; import java . util . regex . Pattern ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . language . bean . BeanLanguage ; import org . apache . camel . language . simple . SimpleLanguage ; public final class ExpressionBuilder { private ExpressionBuilder ( ) { } public static < E extends Exchange > Expression < E > headerExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getIn ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "header(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > headersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "headers" ; } } ; } public static < E extends Exchange > Expression < E > outHeaderExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } Object header = out . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "outHeader(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > outHeadersExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "outHeaders" ; } } ; } public static < E extends Exchange > Expression < E > propertyExpression ( final String propertyName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperty ( propertyName ) ; } @ Override public String toString ( ) { return "property(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertiesExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperties ( ) ; } @ Override public String toString ( ) { return "properties" ; } } ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName ) { return systemPropertyExpression ( propertyName , null ) ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( propertyName , defaultValue ) ; } @ Override public String toString ( ) { return "systemProperty(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > constantExpression ( final Object value ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return value ; } @ Override public String toString ( ) { return "" + value ; } } ; } public static < E extends Exchange > Expression < E > bodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "body" ; } } ; } public static < E extends Exchange , T > Expression < E > bodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "bodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > outBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( ) ; } @ Override public String toString ( ) { return "outBody" ; } } ; } public static < E extends Exchange , T > Expression < E > outBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Message out = exchange . getOut ( false ) ; if ( out == null ) { return null ; } return out . getBody ( type ) ; } @ Override public String toString ( ) { return "outBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > faultBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "faultBody" ; } } ; } public static < E extends Exchange , T > Expression < E > faultBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "faultBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > exchangeExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange ; } @ Override public String toString ( ) { return "exchange" ; } } ; } public static < E extends Exchange > Expression < E > inMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) ; } @ Override public String toString ( ) { return "inMessage" ; } } ; } public static < E extends Exchange > Expression < E > outMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) ; } @ Override public String toString ( ) { return "outMessage" ; } } ; } public static < E extends Exchange > Expression < E > convertTo ( final Expression expression , final Class type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , exchange , value ) ; } @ Override public String toString ( ) { return "" + expression + ".convertTo(" + type . getName ( ) + ".class)" ; } } ; } public static < E extends Exchange > Expression < E > tokenizeExpression ( final Expression < E > expression , final String token ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; Scanner scanner = getScanner ( exchange , value ) ; scanner . useDelimiter ( token ) ; return scanner ; } @ Override public String toString ( ) { return "tokenize(" + expression + ", " + token + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexTokenize ( final Expression < E > expression , final String regexTokenizer ) { final Pattern pattern = Pattern . compile ( regexTokenizer ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; Scanner scanner = getScanner ( exchange , value ) ; scanner . useDelimiter ( regexTokenizer ) ; return scanner ; } @ Override public String toString ( ) { return "regexTokenize(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } private static Scanner getScanner ( Exchange exchange , Object value ) { String charset = exchange . getProperty ( Exchange . CHARSET_NAME , String . class ) ; Scanner scanner = null ; if ( value instanceof Readable ) { scanner = new Scanner ( ( Readable ) value ) ; } else if ( value instanceof InputStream ) { scanner = charset == null ? new Scanner ( ( InputStream ) value ) : new Scanner ( ( InputStream ) value , charset ) ; } else if ( value instanceof File ) { try { scanner = charset == null ? new Scanner ( ( File ) value ) : new Scanner ( ( File ) value , charset ) ; } catch ( FileNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } else if ( value instanceof String ) { scanner = new Scanner ( ( String ) value ) ; } else if ( value instanceof ReadableByteChannel ) { scanner = charset == null ? new Scanner ( ( ReadableByteChannel ) value ) : new Scanner ( ( ReadableByteChannel ) value , charset ) ; } if ( scanner == null ) { String text = exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , exchange , value ) ; if ( text != null ) { scanner = new Scanner ( text ) ; } } if ( scanner == null ) { scanner = new Scanner ( "" ) ; } return scanner ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , final String regex , final String replacement ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final Expression < E > replacementExpression ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; String replacement = evaluateStringExpression ( replacementExpression , exchange ) ; if ( text == null || replacement == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > append ( final Expression < E > left , final Expression < E > right ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return evaluateStringExpression ( left , exchange ) + evaluateStringExpression ( right , exchange ) ; } @ Override public String toString ( ) { return "append(" + left + ", " + right + ")" ; } } ; } public static < E extends Exchange > String evaluateStringExpression ( Expression < E > expression , E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , exchange , value ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( name , defaultValue ) ; } } ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions ) { return concatExpression ( expressions , null ) ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions , final String expression ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Expression < E > expression : expressions ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text != null ) { buffer . append ( text ) ; } } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( expression != null ) { return expression ; } else { return "concat" + expressions ; } } } ; } public static < E extends Exchange > Expression < E > messageIdExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getMessageId ( ) ; } @ Override public String toString ( ) { return "messageId" ; } } ; } public static < E extends Exchange > Expression < E > dateExpression ( final String command , final String pattern ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Date date ; if ( "now" . equals ( command ) ) { date = new Date ( ) ; } else if ( command . startsWith ( "header." ) || command . startsWith ( "in.header." ) ) { String key = command . substring ( command . lastIndexOf ( "." ) + 1 ) ; date = exchange . getIn ( ) . getHeader ( key , Date . class ) ; if ( date == null ) { throw new IllegalArgumentException ( "Could not find java.util.Date object at " + command ) ; } } else if ( command . startsWith ( "out.header." ) ) { String key = command . substring ( command . lastIndexOf ( "." ) + 1 ) ; date = exchange . getOut ( ) . getHeader ( key , Date . class ) ; if ( date == null ) { throw new IllegalArgumentException ( "Could not find java.util.Date object at " + command ) ; } } else { throw new IllegalArgumentException ( "Command not supported for dateExpression: " + command ) ; } SimpleDateFormat df = new SimpleDateFormat ( pattern ) ; return df . format ( date ) ; } @ Override public String toString ( ) { return "date(" + command + ":" + pattern + ")" ; } } ; } public static < E extends Exchange > Expression < E > simpleExpression ( final String simple ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return SimpleLanguage . simple ( simple ) . evaluate ( exchange ) ; } @ Override public String toString ( ) { return "simple(" + simple + ")" ; } } ; } public static < E extends Exchange > Expression < E > beanExpression ( final String bean ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return BeanLanguage . bean ( bean ) . evaluate ( exchange ) ; } @ Override public String toString ( ) { return "bean(" + bean + ")" ; } } ; } } 	1
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Method ; public interface MethodInvocation { Method getMethod ( ) ; Object [ ] getArguments ( ) ; Object proceed ( ) throws Exception ; Object getThis ( ) ; AccessibleObject getStaticPart ( ) ; } 	0
package org . apache . camel . language . simple ; import org . apache . camel . Expression ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . language . IllegalSyntaxException ; import org . apache . camel . util . ObjectHelper ; public class FileLanguage extends AbstractSimpleLanguage { public static Expression file ( String expression ) { FileLanguage language = new FileLanguage ( ) ; return language . createExpression ( expression ) ; } protected Expression < FileExchange > createSimpleExpression ( String expression ) { String remainder = ifStartsWithReturnRemainder ( "file:" , expression ) ; if ( remainder != null ) { if ( ObjectHelper . equal ( remainder , "name" ) ) { return FileExpressionBuilder . fileNameExpression ( ) ; } else if ( ObjectHelper . equal ( remainder , "name.noext" ) ) { return FileExpressionBuilder . fileNameNoExtensionExpression ( ) ; } else if ( ObjectHelper . equal ( remainder , "parent" ) ) { return FileExpressionBuilder . fileParentExpression ( ) ; } else if ( ObjectHelper . equal ( remainder , "path" ) ) { return FileExpressionBuilder . filePathExpression ( ) ; } else if ( ObjectHelper . equal ( remainder , "absolute.path" ) ) { return FileExpressionBuilder . fileAbsolutePathExpression ( ) ; } else if ( ObjectHelper . equal ( remainder , "canonical.path" ) ) { return FileExpressionBuilder . fileCanoicalPathExpression ( ) ; } else if ( ObjectHelper . equal ( remainder , "length" ) ) { return FileExpressionBuilder . fileSizeExpression ( ) ; } } remainder = ifStartsWithReturnRemainder ( "date:" , expression ) ; if ( remainder != null ) { String [ ] parts = remainder . split ( ":" ) ; if ( parts . length != 2 ) { throw new IllegalSyntaxException ( this , expression + " ${date:command:pattern} is the correct syntax." ) ; } String command = parts [ 0 ] ; String pattern = parts [ 1 ] ; return FileExpressionBuilder . dateExpression ( command , pattern ) ; } return FileExpressionBuilder . simpleExpression ( expression ) ; } } 	1
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import static org . apache . camel . util . ObjectHelper . notNull ; public abstract class BinaryPredicateSupport < E extends Exchange > implements Predicate < E > { private final Expression < E > left ; private final Expression < E > right ; protected BinaryPredicateSupport ( Expression < E > left , Expression < E > right ) { notNull ( left , "left" ) ; notNull ( right , "right" ) ; this . left = left ; this . right = right ; } @ Override public String toString ( ) { return left + " " + getOperationText ( ) + " " + right ; } public boolean matches ( E exchange ) { Object leftValue = left . evaluate ( exchange ) ; Object rightValue = right . evaluate ( exchange ) ; return matches ( exchange , leftValue , rightValue ) ; } public void assertMatches ( String text , E exchange ) { Object leftValue = left . evaluate ( exchange ) ; Object rightValue = right . evaluate ( exchange ) ; if ( ! matches ( exchange , leftValue , rightValue ) ) { throw new AssertionError ( text + assertionFailureMessage ( exchange , leftValue , rightValue ) ) ; } } protected abstract boolean matches ( E exchange , Object leftValue , Object rightValue ) ; protected abstract String getOperationText ( ) ; protected String assertionFailureMessage ( E exchange , Object leftValue , Object rightValue ) { return this + " failed on " + exchange + " with left value <" + leftValue + "> right value <" + rightValue + ">" ; } } 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . XPathBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . language . NamespacePrefix ; import org . apache . camel . language . XPath ; public class XPathAnnotationExpressionFactory extends DefaultAnnotationExpressionFactory { @ Override public Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) { String xpath = getExpressionFromAnnotation ( annotation ) ; XPathBuilder builder = XPathBuilder . xpath ( xpath ) ; if ( annotation instanceof XPath ) { XPath xpathAnnotation = ( XPath ) annotation ; NamespacePrefix [ ] namespaces = xpathAnnotation . namespaces ( ) ; if ( namespaces != null ) { for ( NamespacePrefix namespacePrefix : namespaces ) { builder = builder . namespace ( namespacePrefix . prefix ( ) , namespacePrefix . uri ( ) ) ; } } } return builder ; } } 	1
package org . apache . camel . model . config ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . processor . StreamResequencer ; import org . apache . camel . processor . resequencer . DefaultExchangeComparator ; import org . apache . camel . processor . resequencer . ExpressionResultComparator ; @ XmlRootElement @ XmlAccessorType ( XmlAccessType . FIELD ) public class StreamResequencerConfig { @ XmlAttribute private Integer capacity ; @ XmlAttribute private Long timeout ; @ XmlTransient private ExpressionResultComparator < Exchange > comparator ; public StreamResequencerConfig ( ) { this ( 1000 , 1000L ) ; } public StreamResequencerConfig ( int capacity , long timeout ) { this ( capacity , timeout , new DefaultExchangeComparator ( ) ) ; } public StreamResequencerConfig ( int capacity , long timeout , ExpressionResultComparator < Exchange > comparator ) { this . capacity = capacity ; this . timeout = timeout ; this . comparator = comparator ; } public static StreamResequencerConfig getDefault ( ) { return new StreamResequencerConfig ( ) ; } public int getCapacity ( ) { return capacity ; } public void setCapacity ( int capacity ) { this . capacity = capacity ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public ExpressionResultComparator < Exchange > getComparator ( ) { return comparator ; } public void setComparator ( ExpressionResultComparator < Exchange > comparator ) { this . comparator = comparator ; } } 	0
package org . apache . camel . util ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class EndpointHelper { private static final transient Log LOG = LogFactory . getLog ( EndpointHelper . class ) ; private EndpointHelper ( ) { } public static void pollEndpoint ( Endpoint endpoint , Processor processor , long timeout ) throws Exception { PollingConsumer consumer = endpoint . createPollingConsumer ( ) ; try { consumer . start ( ) ; while ( true ) { Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { break ; } else { processor . process ( exchange ) ; } } } finally { try { consumer . stop ( ) ; } catch ( Exception e ) { LOG . warn ( "Failed to stop PollingConsumer: " + e , e ) ; } } } public static void pollEndpoint ( Endpoint endpoint , Processor processor ) throws Exception { pollEndpoint ( endpoint , processor , 1000L ) ; } } 	1
package org . apache . camel . component . ibatis ; import java . io . IOException ; import java . sql . SQLException ; import java . util . List ; import com . ibatis . sqlmap . client . SqlMapClient ; import org . apache . camel . Message ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultPollingEndpoint ; public class IBatisEndpoint extends DefaultPollingEndpoint { private final String entityName ; public IBatisEndpoint ( String endpointUri , IBatisComponent component , String entityName ) { super ( endpointUri , component ) ; this . entityName = entityName ; } public IBatisEndpoint ( String endpointUri , String entityName ) { super ( endpointUri ) ; this . entityName = entityName ; } @ Override public IBatisComponent getComponent ( ) { return ( IBatisComponent ) super . getComponent ( ) ; } public boolean isSingleton ( ) { return true ; } public Producer createProducer ( ) throws Exception { return new IBatisProducer ( this ) ; } @ Override public PollingConsumer createPollingConsumer ( ) throws Exception { return new IBatisPollingConsumer ( this ) ; } public SqlMapClient getSqlClient ( ) throws IOException { return getComponent ( ) . getSqlMapClient ( ) ; } public String getEntityName ( ) { return entityName ; } public void query ( Message message ) throws IOException , SQLException { String name = getEntityName ( ) ; List list = getSqlClient ( ) . queryForList ( name ) ; message . setBody ( list ) ; message . setHeader ( "org.apache.camel.ibatis.queryName" , name ) ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class BatchProcessor extends ServiceSupport implements Processor { public static final long DEFAULT_BATCH_TIMEOUT = 1000L ; public static final int DEFAULT_BATCH_SIZE = 100 ; private long batchTimeout = DEFAULT_BATCH_TIMEOUT ; private int batchSize = DEFAULT_BATCH_SIZE ; private int outBatchSize ; private Processor processor ; private Collection < Exchange > collection ; private ExceptionHandler exceptionHandler ; private BatchSender sender ; public BatchProcessor ( Processor processor , Collection < Exchange > collection ) { this . processor = processor ; this . collection = collection ; this . sender = new BatchSender ( ) ; } @ Override public String toString ( ) { return "BatchProcessor[to: " + processor + "]" ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public int getOutBatchSize ( ) { return outBatchSize ; } public void setOutBatchSize ( int outBatchSize ) { this . outBatchSize = outBatchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public Processor getProcessor ( ) { return processor ; } protected boolean isInBatchCompleted ( int num ) { return num >= batchSize ; } protected boolean isOutBatchCompleted ( ) { if ( outBatchSize == 0 ) { return true ; } return collection . size ( ) > 0 && collection . size ( ) >= outBatchSize ; } protected void processExchange ( Exchange exchange ) throws Exception { processor . process ( exchange ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; sender . start ( ) ; } protected void doStop ( ) throws Exception { sender . cancel ( ) ; ServiceHelper . stopServices ( processor ) ; collection . clear ( ) ; } protected Collection < Exchange > getCollection ( ) { return collection ; } public void process ( Exchange exchange ) throws Exception { sender . enqueueExchange ( exchange ) ; } private class BatchSender extends Thread { private volatile boolean cancelRequested ; private LinkedBlockingQueue < Exchange > queue ; public BatchSender ( ) { super ( "Batch Sender" ) ; this . queue = new LinkedBlockingQueue < Exchange > ( ) ; } @ Override public void run ( ) { while ( true ) { try { Thread . sleep ( batchTimeout ) ; queue . drainTo ( collection , batchSize ) ; } catch ( InterruptedException e ) { if ( cancelRequested ) { return ; } while ( isInBatchCompleted ( queue . size ( ) ) ) { queue . drainTo ( collection , batchSize ) ; } if ( ! isOutBatchCompleted ( ) ) { continue ; } } try { sendExchanges ( ) ; } catch ( Exception e ) { getExceptionHandler ( ) . handleException ( e ) ; } } } public void cancel ( ) { cancelRequested = true ; interrupt ( ) ; } public void enqueueExchange ( Exchange exchange ) { queue . add ( exchange ) ; interrupt ( ) ; } private void sendExchanges ( ) throws Exception { Iterator < Exchange > iter = collection . iterator ( ) ; while ( iter . hasNext ( ) ) { Exchange exchange = iter . next ( ) ; iter . remove ( ) ; processExchange ( exchange ) ; } } } } 	1
package org . apache . camel . component . irc ; import java . net . URI ; import org . apache . camel . RuntimeCamelException ; public class IrcConfiguration implements Cloneable { private String target ; private String hostname ; private String password ; private String nickname ; private String realname ; private String username ; private boolean persistent = true ; private boolean colors = true ; private boolean onNick = true ; private boolean onQuit = true ; private boolean onJoin = true ; private boolean onKick = true ; private boolean onMode = true ; private boolean onPart = true ; private boolean onTopic = true ; private boolean onPrivmsg = true ; private int [ ] ports = { 6667 , 6668 , 6669 } ; public IrcConfiguration ( ) { } public IrcConfiguration ( String hostname , String nickname , String displayname , String target ) { this . target = target ; this . hostname = hostname ; this . nickname = nickname ; this . username = nickname ; this . realname = displayname ; } public IrcConfiguration ( String hostname , String username , String password , String nickname , String displayname , String target ) { this . target = target ; this . hostname = hostname ; this . username = username ; this . password = password ; this . nickname = nickname ; this . realname = displayname ; } public IrcConfiguration copy ( ) { try { return ( IrcConfiguration ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeCamelException ( e ) ; } } public String getCacheKey ( ) { return hostname + ":" + nickname ; } public void configure ( URI uri ) { setNickname ( uri . getUserInfo ( ) ) ; setUsername ( uri . getUserInfo ( ) ) ; setRealname ( uri . getUserInfo ( ) ) ; setHostname ( uri . getHost ( ) ) ; setTarget ( uri . getPath ( ) . substring ( 1 ) ) ; } public String getHostname ( ) { return hostname ; } public void setHostname ( String hostname ) { this . hostname = hostname ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getNickname ( ) { return nickname ; } public void setNickname ( String nickname ) { this . nickname = nickname ; } public String getRealname ( ) { return realname ; } public void setRealname ( String realname ) { this . realname = realname ; } public String getUsername ( ) { return username ; } public void setUsername ( String username ) { this . username = username ; } public int [ ] getPorts ( ) { return ports ; } public void setPorts ( int [ ] ports ) { this . ports = ports ; } public String getTarget ( ) { return target ; } public void setTarget ( String target ) { this . target = target ; } public boolean isPersistent ( ) { return persistent ; } public void setPersistent ( boolean persistent ) { this . persistent = persistent ; } public boolean isColors ( ) { return colors ; } public void setColors ( boolean colors ) { this . colors = colors ; } public boolean isOnNick ( ) { return onNick ; } public void setOnNick ( boolean onNick ) { this . onNick = onNick ; } public boolean isOnQuit ( ) { return onQuit ; } public void setOnQuit ( boolean onQuit ) { this . onQuit = onQuit ; } public boolean isOnJoin ( ) { return onJoin ; } public void setOnJoin ( boolean onJoin ) { this . onJoin = onJoin ; } public boolean isOnKick ( ) { return onKick ; } public void setOnKick ( boolean onKick ) { this . onKick = onKick ; } public boolean isOnMode ( ) { return onMode ; } public void setOnMode ( boolean onMode ) { this . onMode = onMode ; } public boolean isOnPart ( ) { return onPart ; } public void setOnPart ( boolean onPart ) { this . onPart = onPart ; } public boolean isOnTopic ( ) { return onTopic ; } public void setOnTopic ( boolean onTopic ) { this . onTopic = onTopic ; } public boolean isOnPrivmsg ( ) { return onPrivmsg ; } public void setOnPrivmsg ( boolean onPrivmsg ) { this . onPrivmsg = onPrivmsg ; } public String toString ( ) { return "IrcConfiguration{" + "target='" + target + '\'' + ", hostname='" + hostname + '\'' + ", password='" + password + '\'' + ", nickname='" + nickname + '\'' + ", realname='" + realname + '\'' + ", username='" + username + '\'' + ", persistent=" + persistent + ", colors=" + colors + ", onNick=" + onNick + ", onQuit=" + onQuit + ", onJoin=" + onJoin + ", onKick=" + onKick + ", onMode=" + onMode + ", onPart=" + onPart + ", onTopic=" + onTopic + ", onPrivmsg=" + onPrivmsg + ", ports=" + ports + '}' ; } } 	0
package org . apache . camel . model . loadbalancer ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "random" ) public class RandomLoadBalanceStrategy extends LoadBalancerType { @ Override protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { return new org . apache . camel . processor . loadbalancer . RandomLoadBalancer ( ) ; } } 	1
package org . apache . camel . component . irc ; import java . util . Map ; import org . apache . camel . impl . DefaultMessage ; import org . schwering . irc . lib . IRCUser ; public class IrcMessage extends DefaultMessage { private String messageType ; private String target ; private IRCUser user ; private String whoWasKickedNick ; private String message ; public IrcMessage ( ) { } public IrcMessage ( String messageType , IRCUser user , String message ) { this . messageType = messageType ; this . user = user ; this . message = message ; } public IrcMessage ( String messageType , String target , IRCUser user , String message ) { this . messageType = messageType ; this . target = target ; this . user = user ; this . message = message ; } public IrcMessage ( String messageType , String target , IRCUser user , String whoWasKickedNick , String message ) { this . messageType = messageType ; this . target = target ; this . user = user ; this . whoWasKickedNick = whoWasKickedNick ; this . message = message ; } public IrcMessage ( String messageType , String target , IRCUser user ) { this . messageType = messageType ; this . target = target ; this . user = user ; } public String getMessageType ( ) { return messageType ; } public void setMessageType ( String messageType ) { this . messageType = messageType ; } public String getTarget ( ) { return target ; } public void setTarget ( String target ) { this . target = target ; } public IRCUser getUser ( ) { return user ; } public void setUser ( IRCUser user ) { this . user = user ; } public String getWhoWasKickedNick ( ) { return whoWasKickedNick ; } public void setWhoWasKickedNick ( String whoWasKickedNick ) { this . whoWasKickedNick = whoWasKickedNick ; } public String getMessage ( ) { return message ; } public void setMessage ( String message ) { this . message = message ; } @ Override public IrcExchange getExchange ( ) { return ( IrcExchange ) super . getExchange ( ) ; } @ Override protected Object createBody ( ) { IrcExchange ircExchange = getExchange ( ) ; IrcBinding binding = ircExchange . getBinding ( ) ; return binding . extractBodyFromIrc ( ircExchange , this ) ; } @ Override public IrcMessage newInstance ( ) { return new IrcMessage ( ) ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { map . put ( "irc.messageType" , messageType ) ; if ( target != null ) { map . put ( "irc.target" , target ) ; } if ( whoWasKickedNick != null ) { map . put ( "irc.user.kicked" , whoWasKickedNick ) ; } if ( user != null ) { map . put ( "irc.user.host" , user . getHost ( ) ) ; map . put ( "irc.user.nick" , user . getNick ( ) ) ; map . put ( "irc.user.servername" , user . getServername ( ) ) ; map . put ( "irc.user.username" , user . getUsername ( ) ) ; } } @ Override public String toString ( ) { if ( message != null ) { return "IrcMessage: " + message ; } else { return "IrcMessage: " + getBody ( ) ; } } } 	0
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . NoSuchLanguageException ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; public class DefaultLanguageResolver implements LanguageResolver { protected static final FactoryFinder LANGUAGE_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/language/" ) ; protected static final FactoryFinder LANGUAGE_RESOLVER = new FactoryFinder ( "META-INF/services/org/apache/camel/language/resolver/" ) ; public Language resolveLanguage ( String name , CamelContext context ) { Class type = null ; try { type = LANGUAGE_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Language registered for scheme : " + name , e ) ; } if ( type != null ) { if ( Language . class . isAssignableFrom ( type ) ) { return ( Language ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Language implementation. Found: " + type . getName ( ) ) ; } } return noSpecificLanguageFound ( name , context ) ; } protected Language noSpecificLanguageFound ( String name , CamelContext context ) { Class type = null ; try { type = LANGUAGE_RESOLVER . findClass ( "default" ) ; } catch ( NoFactoryAvailableException e ) { } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Language registered for scheme : " + name , e ) ; } if ( type != null ) { if ( LanguageResolver . class . isAssignableFrom ( type ) ) { LanguageResolver resolver = ( LanguageResolver ) context . getInjector ( ) . newInstance ( type ) ; return resolver . resolveLanguage ( name , context ) ; } else { throw new IllegalArgumentException ( "Type is not a LanguageResolver implementation. Found: " + type . getName ( ) ) ; } } throw new NoSuchLanguageException ( name ) ; } } 	1
package org . apache . camel . component . atom ; import java . io . IOException ; import java . util . Date ; import java . util . List ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Entry ; import org . apache . abdera . model . Feed ; import org . apache . abdera . parser . ParseException ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class AtomEntryPollingConsumer extends AtomPollingConsumer { private Document < Feed > document ; private int entryIndex ; private EntryFilter entryFilter ; private List < Entry > list ; public AtomEntryPollingConsumer ( AtomEndpoint endpoint , Processor processor , boolean filter , Date lastUpdate ) { super ( endpoint , processor ) ; if ( filter ) { entryFilter = new UpdatedDateFilter ( lastUpdate ) ; } } public void poll ( ) throws Exception { getDocument ( ) ; Feed feed = document . getRoot ( ) ; while ( hasNextEntry ( ) ) { Entry entry = list . get ( entryIndex -- ) ; boolean valid = true ; if ( entryFilter != null ) { valid = entryFilter . isValidEntry ( endpoint , document , entry ) ; } if ( valid ) { Exchange exchange = endpoint . createExchange ( feed , entry ) ; getProcessor ( ) . process ( exchange ) ; return ; } } document = null ; } private Document < Feed > getDocument ( ) throws IOException , ParseException { if ( document == null ) { document = AtomUtils . parseDocument ( endpoint . getAtomUri ( ) ) ; list = document . getRoot ( ) . getEntries ( ) ; entryIndex = list . size ( ) - 1 ; } return document ; } private boolean hasNextEntry ( ) { return entryIndex >= 0 ; } } 	0
package org . apache . camel . component . mock ; import java . beans . PropertyChangeListener ; import java . beans . PropertyChangeSupport ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . spi . BrowsableEndpoint ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MockEndpoint extends DefaultEndpoint < Exchange > implements BrowsableEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( MockEndpoint . class ) ; private int expectedCount ; private int counter ; private Processor defaultProcessor ; private Map < Integer , Processor > processors ; private List < Exchange > receivedExchanges ; private List < Throwable > failures ; private List < Runnable > tests ; private CountDownLatch latch ; private long sleepForEmptyTest ; private long resultWaitTime ; private long resultMinimumWaitTime ; private int expectedMinimumCount ; private List expectedBodyValues ; private List actualBodyValues ; private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport ( this ) ; private String headerName ; private String headerValue ; private Object actualHeader ; private Processor reporter ; public MockEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; init ( ) ; } public MockEndpoint ( String endpointUri ) { super ( endpointUri ) ; init ( ) ; } public static MockEndpoint resolve ( CamelContext context , String uri ) { return CamelContextHelper . getMandatoryEndpoint ( context , uri , MockEndpoint . class ) ; } public static void assertWait ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; long left = unit . toMillis ( timeout ) ; long end = start + left ; for ( MockEndpoint endpoint : endpoints ) { if ( ! endpoint . await ( left , TimeUnit . MILLISECONDS ) ) { throw new AssertionError ( "Timeout waiting for endpoints to receive enough messages. " + endpoint . getEndpointUri ( ) + " timed out." ) ; } left = end - System . currentTimeMillis ( ) ; if ( left <= 0 ) { left = 0 ; } } } public static void assertIsSatisfied ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { assertWait ( timeout , unit , endpoints ) ; for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( CamelContext context ) throws InterruptedException { ObjectHelper . notNull ( context , "camelContext" ) ; Collection < Endpoint > endpoints = context . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( endpoint instanceof MockEndpoint ) { MockEndpoint mockEndpoint = ( MockEndpoint ) endpoint ; mockEndpoint . assertIsSatisfied ( ) ; } } } public static void expectsMessageCount ( int count , MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { MockEndpoint . expectsMessageCount ( count ) ; } } public List < Exchange > getExchanges ( ) { return getReceivedExchanges ( ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { propertyChangeSupport . removePropertyChangeListener ( listener ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "You cannot consume from this endpoint" ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) { onExchange ( exchange ) ; } } ; } public void reset ( ) { init ( ) ; } public void whenExchangeReceived ( int index , Processor processor ) { this . processors . put ( index , processor ) ; } public void whenAnyExchangeReceived ( Processor processor ) { this . defaultProcessor = processor ; } public void assertIsSatisfied ( ) throws InterruptedException { assertIsSatisfied ( sleepForEmptyTest ) ; } public void assertIsSatisfied ( long timeoutForEmptyEndpoints ) throws InterruptedException { LOG . info ( "Asserting: " + this + " is satisfied" ) ; if ( expectedCount == 0 ) { if ( timeoutForEmptyEndpoints > 0 ) { LOG . debug ( "Sleeping for: " + timeoutForEmptyEndpoints + " millis to check there really are no messages received" ) ; Thread . sleep ( timeoutForEmptyEndpoints ) ; } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedCount > 0 ) { if ( expectedCount != getReceivedCounter ( ) ) { waitForCompleteLatch ( ) ; } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedMinimumCount > 0 && getReceivedCounter ( ) < expectedMinimumCount ) { waitForCompleteLatch ( ) ; } if ( expectedMinimumCount >= 0 ) { int receivedCounter = getReceivedCounter ( ) ; assertTrue ( "Received message count " + receivedCounter + ", expected at least " + expectedMinimumCount , expectedMinimumCount <= receivedCounter ) ; } for ( Runnable test : tests ) { test . run ( ) ; } for ( Throwable failure : failures ) { if ( failure != null ) { LOG . error ( "Caught on " + getEndpointUri ( ) + " Exception: " + failure , failure ) ; fail ( "Failed due to caught exception: " + failure ) ; } } } public void assertIsNotSatisfied ( ) throws InterruptedException { try { assertIsSatisfied ( ) ; fail ( "Expected assertion failure!" ) ; } catch ( AssertionError e ) { LOG . info ( "Caught expected failure: " + e ) ; } } public void expectedMessageCount ( int expectedCount ) { setExpectedMessageCount ( expectedCount ) ; } public void expectedMinimumMessageCount ( int expectedCount ) { setMinimumExpectedMessageCount ( expectedCount ) ; } public void expectedHeaderReceived ( String name , String value ) { this . headerName = name ; this . headerValue = value ; expects ( new Runnable ( ) { public void run ( ) { assertTrue ( "No header with name " + headerName + " found." , actualHeader != null ) ; assertEquals ( "Header of message" , headerValue , actualHeader ) ; } } ) ; } public void expectedBodiesReceived ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; Object actualBody = null ; if ( i < actualBodyValues . size ( ) ) { actualBody = actualBodyValues . get ( i ) ; } assertEquals ( "Body of message: " + i , expectedBody , actualBody ) ; } } } ) ; } public void expectedBodiesReceived ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; bodyList . addAll ( Arrays . asList ( bodies ) ) ; expectedBodiesReceived ( bodyList ) ; } public void expectedBodiesReceivedInAnyOrder ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { Set actualBodyValuesSet = new HashSet ( actualBodyValues ) ; for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; assertTrue ( "Message with body " + expectedBody + " was expected but not found in " + actualBodyValuesSet , actualBodyValuesSet . remove ( expectedBody ) ) ; } } } ) ; } public void expectedBodiesReceivedInAnyOrder ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; bodyList . addAll ( Arrays . asList ( bodies ) ) ; expectedBodiesReceivedInAnyOrder ( bodyList ) ; } public void expectsAscending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesAscending ( expression ) ; } } ) ; } public void expectsDescending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesDescending ( expression ) ; } } ) ; } public void expectsNoDuplicates ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertNoDuplicates ( expression ) ; } } ) ; } public void assertMessagesAscending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , true ) ; } public void assertMessagesDescending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , false ) ; } protected void assertMessagesSorted ( Expression < Exchange > expression , boolean ascending ) { String type = ascending ? "ascending" : "descending" ; ExpressionComparator comparator = new ExpressionComparator ( expression ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 1 ; i < list . size ( ) ; i ++ ) { int j = i - 1 ; Exchange e1 = list . get ( j ) ; Exchange e2 = list . get ( i ) ; int result = comparator . compare ( e1 , e2 ) ; if ( result == 0 ) { fail ( "Messages not " + type + ". Messages" + j + " and " + i + " are equal with value: " + expression . evaluate ( e1 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { if ( ! ascending ) { result = result * - 1 ; } if ( result > 0 ) { fail ( "Messages not " + type + ". Message " + j + " has value: " + expression . evaluate ( e1 ) + " and message " + i + " has value: " + expression . evaluate ( e2 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } } } } public void assertNoDuplicates ( Expression < Exchange > expression ) { Map < Object , Exchange > map = new HashMap < Object , Exchange > ( ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Exchange e2 = list . get ( i ) ; Object key = expression . evaluate ( e2 ) ; Exchange e1 = map . get ( key ) ; if ( e1 != null ) { fail ( "Duplicate message found on message " + i + " has value: " + key + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { map . put ( key , e2 ) ; } } } public void expects ( Runnable runnable ) { tests . add ( runnable ) ; } public AssertionClause message ( final int messageIndex ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { applyAssertionOn ( MockEndpoint . this , messageIndex , assertExchangeReceived ( messageIndex ) ) ; } } ; expects ( clause ) ; return clause ; } public AssertionClause allMessages ( ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { applyAssertionOn ( MockEndpoint . this , index ++ , exchange ) ; } } } ; expects ( clause ) ; return clause ; } public Exchange assertExchangeReceived ( int index ) { int count = getReceivedCounter ( ) ; assertTrue ( "Not enough messages received. Was: " + count , count > index ) ; return getReceivedExchanges ( ) . get ( index ) ; } public List < Throwable > getFailures ( ) { return failures ; } public int getReceivedCounter ( ) { return getReceivedExchanges ( ) . size ( ) ; } public List < Exchange > getReceivedExchanges ( ) { return receivedExchanges ; } public int getExpectedCount ( ) { return expectedCount ; } public long getSleepForEmptyTest ( ) { return sleepForEmptyTest ; } public void setSleepForEmptyTest ( long sleepForEmptyTest ) { this . sleepForEmptyTest = sleepForEmptyTest ; } public long getResultWaitTime ( ) { return resultWaitTime ; } public void setResultWaitTime ( long resultWaitTime ) { this . resultWaitTime = resultWaitTime ; } public void setMinimumResultWaitTime ( long resultMinimumWaitTime ) { this . resultMinimumWaitTime = resultMinimumWaitTime ; } public void setExpectedMessageCount ( int expectedCount ) { this . expectedCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedCount ) ; } } public void setMinimumExpectedMessageCount ( int expectedCount ) { this . expectedMinimumCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedMinimumCount ) ; } } public Processor getReporter ( ) { return reporter ; } public void setReporter ( Processor reporter ) { this . reporter = reporter ; } private void init ( ) { expectedCount = - 1 ; counter = 0 ; processors = new HashMap < Integer , Processor > ( ) ; receivedExchanges = new CopyOnWriteArrayList < Exchange > ( ) ; failures = new CopyOnWriteArrayList < Throwable > ( ) ; tests = new CopyOnWriteArrayList < Runnable > ( ) ; latch = null ; sleepForEmptyTest = 0 ; resultWaitTime = 20000L ; resultMinimumWaitTime = 0L ; expectedMinimumCount = - 1 ; expectedBodyValues = null ; actualBodyValues = new ArrayList ( ) ; } protected synchronized void onExchange ( Exchange exchange ) { try { if ( reporter != null ) { reporter . process ( exchange ) ; } performAssertions ( exchange ) ; } catch ( Throwable e ) { failures . add ( e ) ; } if ( latch != null ) { latch . countDown ( ) ; } } protected void performAssertions ( Exchange exchange ) throws Exception { Message in = exchange . getIn ( ) ; Object actualBody = in . getBody ( ) ; if ( headerName != null ) { actualHeader = in . getHeader ( headerName ) ; } if ( expectedBodyValues != null ) { int index = actualBodyValues . size ( ) ; if ( expectedBodyValues . size ( ) > index ) { Object expectedBody = expectedBodyValues . get ( index ) ; if ( expectedBody != null ) { actualBody = in . getBody ( expectedBody . getClass ( ) ) ; } actualBodyValues . add ( actualBody ) ; } } LOG . debug ( getEndpointUri ( ) + " >>>> " + ( ++ counter ) + " : " + exchange + " with body: " + actualBody ) ; receivedExchanges . add ( exchange ) ; Processor processor = processors . get ( getReceivedCounter ( ) ) != null ? processors . get ( getReceivedCounter ( ) ) : defaultProcessor ; if ( processor != null ) { processor . process ( exchange ) ; } } protected void waitForCompleteLatch ( ) throws InterruptedException { if ( latch == null ) { fail ( "Should have a latch!" ) ; } LOG . debug ( "Waiting on the latch for: " + resultWaitTime + " millis" ) ; long start = System . currentTimeMillis ( ) ; latch . await ( resultWaitTime , TimeUnit . MILLISECONDS ) ; long delta = System . currentTimeMillis ( ) - start ; LOG . debug ( "Took " + delta + " millis to complete latch" ) ; if ( resultMinimumWaitTime > 0 && delta < resultMinimumWaitTime ) { fail ( "Expected minimum " + resultWaitTime + " millis waiting on the result, but was faster with " + delta + " millis." ) ; } } protected void assertEquals ( String message , Object expectedValue , Object actualValue ) { if ( ! ObjectHelper . equal ( expectedValue , actualValue ) ) { fail ( message + ". Expected: <" + expectedValue + "> but was: <" + actualValue + ">" ) ; } } protected void assertTrue ( String message , boolean predicate ) { if ( ! predicate ) { fail ( message ) ; } } protected void fail ( Object message ) { if ( LOG . isDebugEnabled ( ) ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { LOG . debug ( "Received[" + ( ++ index ) + "]: " + exchange ) ; } } throw new AssertionError ( getEndpointUri ( ) + " " + message ) ; } public int getExpectedMinimumCount ( ) { return expectedMinimumCount ; } public void await ( ) throws InterruptedException { if ( latch != null ) { latch . await ( ) ; } } public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { if ( latch != null ) { return latch . await ( timeout , unit ) ; } return true ; } public boolean isSingleton ( ) { return true ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . InputStream ; import com . jcraft . jsch . ChannelSftp ; import com . jcraft . jsch . JSchException ; import com . jcraft . jsch . Session ; import org . apache . camel . Exchange ; public class SftpProducer extends RemoteFileProducer < RemoteFileExchange > { private SftpEndpoint endpoint ; private ChannelSftp channel ; private Session session ; public SftpProducer ( SftpEndpoint endpoint , Session session ) { super ( endpoint ) ; this . endpoint = endpoint ; this . session = session ; } public void process ( Exchange exchange ) throws Exception { if ( log . isTraceEnabled ( ) ) { log . trace ( "Processing " + endpoint . getConfiguration ( ) ) ; } connectIfNecessary ( ) ; try { process ( endpoint . createExchange ( exchange ) ) ; } catch ( Exception e ) { if ( isStopping ( ) || isStopped ( ) ) { log . warn ( "Producer is stopping. Ignoring caught exception: " + e . getClass ( ) . getCanonicalName ( ) + " message: " + e . getMessage ( ) ) ; } else { log . warn ( "Exception occured during processing: " + e . getClass ( ) . getCanonicalName ( ) + " message: " + e . getMessage ( ) ) ; disconnect ( ) ; throw e ; } } } protected void connectIfNecessary ( ) throws JSchException { if ( channel == null || ! channel . isConnected ( ) ) { if ( session == null || ! session . isConnected ( ) ) { log . trace ( "Session isn't connected, trying to recreate and connect." ) ; session = endpoint . createSession ( ) ; session . connect ( ) ; } log . trace ( "Channel isn't connected, trying to recreate and connect." ) ; channel = endpoint . createChannelSftp ( session ) ; channel . connect ( ) ; log . info ( "Connected to " + endpoint . getConfiguration ( ) . remoteServerInformation ( ) ) ; } } protected void disconnect ( ) throws JSchException { if ( log . isDebugEnabled ( ) ) { log . debug ( "Disconnecting from " + remoteServer ( ) ) ; } if ( session != null ) { session . disconnect ( ) ; } if ( channel != null ) { channel . disconnect ( ) ; } } public void process ( RemoteFileExchange exchange ) throws Exception { InputStream payload = exchange . getIn ( ) . getBody ( InputStream . class ) ; try { String remoteServer = endpoint . getConfiguration ( ) . remoteServerInformation ( ) ; String fileName = createFileName ( exchange . getIn ( ) , endpoint . getConfiguration ( ) ) ; int lastPathIndex = fileName . lastIndexOf ( '/' ) ; if ( lastPathIndex != - 1 ) { String directory = fileName . substring ( 0 , lastPathIndex ) ; boolean success = SftpUtils . buildDirectory ( channel , directory ) ; if ( ! success ) { log . warn ( "Couldn't build directory: " + directory + " (could be because of denied permissions)" ) ; } } channel . put ( payload , fileName ) ; log . info ( "Sent: " + fileName + " to: " + remoteServer ) ; } finally { if ( payload != null ) { payload . close ( ) ; } } } } 	0
package org . apache . camel . impl . converter ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Exchange ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . TypeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . TypeConverterAware ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ; public class DefaultTypeConverter implements TypeConverter , TypeConverterRegistry { private static final transient Log LOG = LogFactory . getLog ( DefaultTypeConverter . class ) ; private final Map < TypeMapping , TypeConverter > typeMappings = new ConcurrentHashMap < TypeMapping , TypeConverter > ( ) ; private Injector injector ; private List < TypeConverterLoader > typeConverterLoaders = new ArrayList < TypeConverterLoader > ( ) ; private List < TypeConverter > fallbackConverters = new ArrayList < TypeConverter > ( ) ; private boolean loaded ; public DefaultTypeConverter ( Injector injector ) { typeConverterLoaders . add ( new AnnotationTypeConverterLoader ( ) ) ; this . injector = injector ; addFallbackConverter ( new AsyncProcessorTypeConverter ( ) ) ; addFallbackConverter ( new PropertyEditorTypeConverter ( ) ) ; addFallbackConverter ( new ToStringTypeConverter ( ) ) ; addFallbackConverter ( new ArrayTypeConverter ( ) ) ; addFallbackConverter ( new EnumTypeConverter ( ) ) ; } public List < TypeConverterLoader > getTypeConverterLoaders ( ) { return typeConverterLoaders ; } public < T > T convertTo ( Class < T > type , Object value ) { return convertTo ( type , null , value ) ; } @ SuppressWarnings ( "unchecked" ) public < T > T convertTo ( Class < T > type , Exchange exchange , Object value ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Converting " + ( value == null ? "null" : value . getClass ( ) . getCanonicalName ( ) ) + " -> " + type . getCanonicalName ( ) + " with value: " + value ) ; } if ( value == null ) { if ( boolean . class . isAssignableFrom ( type ) ) { return ( T ) Boolean . FALSE ; } return null ; } if ( type . isInstance ( value ) ) { return type . cast ( value ) ; } checkLoaded ( ) ; TypeConverter converter = getOrFindTypeConverter ( type , value ) ; if ( converter != null ) { T rc = converter . convertTo ( type , exchange , value ) ; if ( rc != null ) { return rc ; } } for ( TypeConverter fallback : fallbackConverters ) { T rc = fallback . convertTo ( type , exchange , value ) ; if ( rc != null ) { return rc ; } } if ( type . isPrimitive ( ) ) { Class primitiveType = ObjectHelper . convertPrimitiveTypeToWrapperType ( type ) ; if ( primitiveType != type ) { return ( T ) convertTo ( primitiveType , exchange , value ) ; } } throw new NoTypeConversionAvailableException ( value , type ) ; } public void addTypeConverter ( Class toType , Class fromType , TypeConverter typeConverter ) { TypeMapping key = new TypeMapping ( toType , fromType ) ; synchronized ( typeMappings ) { TypeConverter converter = typeMappings . get ( key ) ; if ( converter != null ) { LOG . warn ( "Overriding type converter from: " + converter + " to: " + typeConverter ) ; } typeMappings . put ( key , typeConverter ) ; } } public void addFallbackConverter ( TypeConverter converter ) { fallbackConverters . add ( converter ) ; if ( converter instanceof TypeConverterAware ) { TypeConverterAware typeConverterAware = ( TypeConverterAware ) converter ; typeConverterAware . setTypeConverter ( this ) ; } } public TypeConverter getTypeConverter ( Class toType , Class fromType ) { TypeMapping key = new TypeMapping ( toType , fromType ) ; return typeMappings . get ( key ) ; } public Injector getInjector ( ) { return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } protected < T > TypeConverter getOrFindTypeConverter ( Class toType , Object value ) { Class fromType = null ; if ( value != null ) { fromType = value . getClass ( ) ; } TypeMapping key = new TypeMapping ( toType , fromType ) ; TypeConverter converter ; synchronized ( typeMappings ) { converter = typeMappings . get ( key ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromType , value ) ; if ( converter != null ) { typeMappings . put ( key , converter ) ; } } } return converter ; } protected TypeConverter findTypeConverter ( Class toType , Class fromType , Object value ) { if ( fromType != null ) { Class fromSuperClass = fromType . getSuperclass ( ) ; if ( fromSuperClass != null && ! fromSuperClass . equals ( Object . class ) ) { TypeConverter converter = getTypeConverter ( toType , fromSuperClass ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromSuperClass , value ) ; } if ( converter != null ) { return converter ; } } for ( Class type : fromType . getInterfaces ( ) ) { TypeConverter converter = getTypeConverter ( toType , type ) ; if ( converter != null ) { return converter ; } } if ( fromType . isArray ( ) && ! fromType . getComponentType ( ) . isPrimitive ( ) ) { if ( ! fromType . equals ( Object [ ] . class ) ) { fromSuperClass = Object [ ] . class ; TypeConverter converter = getTypeConverter ( toType , fromSuperClass ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromSuperClass , value ) ; } if ( converter != null ) { return converter ; } } } if ( ! fromType . equals ( Object . class ) ) { TypeConverter converter = getTypeConverter ( toType , Object . class ) ; if ( converter != null ) { return converter ; } } } if ( fromType != null ) { Set < Map . Entry < TypeMapping , TypeConverter > > entries = typeMappings . entrySet ( ) ; for ( Map . Entry < TypeMapping , TypeConverter > entry : entries ) { TypeMapping key = entry . getKey ( ) ; Class aToType = key . getToType ( ) ; if ( toType . isAssignableFrom ( aToType ) ) { if ( key . getFromType ( ) . isAssignableFrom ( fromType ) ) { return entry . getValue ( ) ; } } } } return null ; } protected synchronized void checkLoaded ( ) { if ( ! loaded ) { loaded = true ; try { for ( TypeConverterLoader typeConverterLoader : typeConverterLoaders ) { typeConverterLoader . load ( this ) ; } try { loadFallbackTypeConverters ( ) ; } catch ( NoFactoryAvailableException e ) { } } catch ( Exception e ) { throw wrapRuntimeCamelException ( e ) ; } } } protected void loadFallbackTypeConverters ( ) throws IOException , ClassNotFoundException { FactoryFinder finder = new FactoryFinder ( ) ; List < TypeConverter > converters = finder . newInstances ( "FallbackTypeConverter" , getInjector ( ) , TypeConverter . class ) ; for ( TypeConverter converter : converters ) { addFallbackConverter ( converter ) ; } } protected static class TypeMapping { Class toType ; Class fromType ; public TypeMapping ( Class toType , Class fromType ) { this . toType = toType ; this . fromType = fromType ; } public Class getFromType ( ) { return fromType ; } public Class getToType ( ) { return toType ; } @ Override public boolean equals ( Object object ) { if ( object instanceof TypeMapping ) { TypeMapping that = ( TypeMapping ) object ; return ObjectHelper . equal ( this . fromType , that . fromType ) && ObjectHelper . equal ( this . toType , that . toType ) ; } return false ; } @ Override public int hashCode ( ) { int answer = toType . hashCode ( ) ; if ( fromType != null ) { answer *= 37 + fromType . hashCode ( ) ; } return answer ; } @ Override public String toString ( ) { return "[" + fromType + "=>" + toType + "]" ; } } } 	1
package org . apache . camel ; public interface Component < E extends Exchange > { CamelContext getCamelContext ( ) ; void setCamelContext ( CamelContext context ) ; Endpoint < E > createEndpoint ( String uri ) throws Exception ; } 	0
package org . apache . camel ; public interface AsyncProcessor extends Processor { boolean process ( Exchange exchange , AsyncCallback callback ) ; } 	1
package org . apache . camel . component . mail ; import java . io . IOException ; import java . util . Map ; import javax . activation . DataHandler ; import javax . mail . Message ; import javax . mail . MessagingException ; import javax . mail . Multipart ; import javax . mail . Part ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . DefaultMessage ; import org . apache . camel . util . CollectionHelper ; public class MailMessage extends DefaultMessage { private Message mailMessage ; public MailMessage ( ) { } public MailMessage ( Message message ) { this . mailMessage = message ; } @ Override public String toString ( ) { if ( mailMessage != null ) { return "MailMessage: " + MailUtils . dumpMessage ( mailMessage ) ; } else { return "MailMessage: " + getBody ( ) ; } } @ Override public MailExchange getExchange ( ) { return ( MailExchange ) super . getExchange ( ) ; } public MailMessage copy ( ) { MailMessage answer = ( MailMessage ) super . copy ( ) ; answer . mailMessage = mailMessage ; return answer ; } public Message getMessage ( ) { return mailMessage ; } public void setMessage ( Message mailMessage ) { this . mailMessage = mailMessage ; } @ Override public Object getHeader ( String name ) { Object answer = super . getHeader ( name ) ; if ( answer == null ) { answer = super . getHeader ( name . toLowerCase ( ) ) ; } return answer ; } @ Override public MailMessage newInstance ( ) { return new MailMessage ( ) ; } @ Override protected Object createBody ( ) { if ( mailMessage != null ) { return getExchange ( ) . getBinding ( ) . extractBodyFromMail ( getExchange ( ) , mailMessage ) ; } return null ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { if ( mailMessage != null ) { try { map . putAll ( getExchange ( ) . getBinding ( ) . extractHeadersFromMail ( mailMessage ) ) ; } catch ( MessagingException e ) { throw new RuntimeCamelException ( "Error accessing headers due to: " + e . getMessage ( ) , e ) ; } } } @ Override protected void populateInitialAttachments ( Map < String , DataHandler > map ) { if ( mailMessage != null ) { try { extractAttachments ( mailMessage , map ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Error populating the initial mail message attachments" , e ) ; } } } public void copyFrom ( org . apache . camel . Message that ) { super . copyFrom ( that ) ; if ( that instanceof MailMessage ) { MailMessage mailMessage = ( MailMessage ) that ; this . mailMessage = mailMessage . mailMessage ; } } protected static void extractAttachments ( Message message , Map < String , DataHandler > map ) throws javax . mail . MessagingException , IOException { Object content = message . getContent ( ) ; if ( content instanceof Multipart ) { Multipart mp = ( Multipart ) content ; for ( int i = 0 ; i < mp . getCount ( ) ; i ++ ) { Part part = mp . getBodyPart ( i ) ; String disposition = part . getDisposition ( ) ; if ( disposition != null ) { if ( disposition . equalsIgnoreCase ( Part . ATTACHMENT ) || disposition . equalsIgnoreCase ( Part . INLINE ) ) { if ( part . getFileName ( ) != null ) { CollectionHelper . appendValue ( map , part . getFileName ( ) , part . getDataHandler ( ) ) ; } } } } } } } 	0
package org . apache . camel . processor . interceptor ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . InterceptStrategy ; public class Tracer implements InterceptStrategy { private TraceFormatter formatter = new TraceFormatter ( ) ; private boolean enabled = true ; private String logName ; private LoggingLevel logLevel ; private Predicate < Exchange > traceFilter ; private boolean traceInterceptors ; private boolean traceExceptions = true ; private boolean traceOutExchanges ; public static Tracer getTracer ( CamelContext context ) { if ( context instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) context ; List < InterceptStrategy > list = defaultCamelContext . getInterceptStrategies ( ) ; for ( InterceptStrategy interceptStrategy : list ) { if ( interceptStrategy instanceof Tracer ) { return ( Tracer ) interceptStrategy ; } } } return null ; } public Processor wrapProcessorInInterceptors ( ProcessorType processorType , Processor target ) throws Exception { String id = processorType . idOrCreate ( ) ; return new TraceInterceptor ( processorType , target , this ) ; } public TraceFormatter getFormatter ( ) { return formatter ; } public void setFormatter ( TraceFormatter formatter ) { this . formatter = formatter ; } public void setEnabled ( boolean flag ) { enabled = flag ; } public boolean isEnabled ( ) { return enabled ; } public boolean isTraceInterceptors ( ) { return traceInterceptors ; } public void setTraceInterceptors ( boolean traceInterceptors ) { this . traceInterceptors = traceInterceptors ; } public Predicate getTraceFilter ( ) { return traceFilter ; } public void setTraceFilter ( Predicate traceFilter ) { this . traceFilter = traceFilter ; } public LoggingLevel getLogLevel ( ) { return logLevel ; } public void setLogLevel ( LoggingLevel logLevel ) { this . logLevel = logLevel ; } public boolean isTraceExceptions ( ) { return traceExceptions ; } public void setTraceExceptions ( boolean traceExceptions ) { this . traceExceptions = traceExceptions ; } public String getLogName ( ) { return logName ; } public void setLogName ( String logName ) { this . logName = logName ; } public void setTraceOutExchanges ( boolean traceOutExchanges ) { this . traceOutExchanges = traceOutExchanges ; } public boolean isTraceOutExchanges ( ) { return traceOutExchanges ; } } 	1
package org . apache . camel ; public class ExchangeTimedOutException extends CamelExchangeException { private final long timeout ; public ExchangeTimedOutException ( Exchange exchange , long timeout ) { super ( "The OUT message was not received within: " + timeout + " millis" , exchange ) ; this . timeout = timeout ; } public long getTimeout ( ) { return timeout ; } } 	0
package org . apache . camel . impl ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . ExchangeProperty ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; import static org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ; public class DefaultExchange implements Exchange { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; protected final CamelContext context ; private Map < String , Object > properties ; private Message in ; private Message out ; private Message fault ; private Throwable exception ; private String exchangeId ; private UnitOfWork unitOfWork ; private ExchangePattern pattern ; public DefaultExchange ( CamelContext context ) { this ( context , ExchangePattern . InOnly ) ; } public DefaultExchange ( CamelContext context , ExchangePattern pattern ) { this . context = context ; this . pattern = pattern ; } public DefaultExchange ( DefaultExchange parent ) { this ( parent . getContext ( ) , parent . getPattern ( ) ) ; this . unitOfWork = parent . getUnitOfWork ( ) ; } @ Override public String toString ( ) { return "Exchange[" + in + "]" ; } public Exchange copy ( ) { Exchange exchange = newInstance ( ) ; exchange . copyFrom ( this ) ; return exchange ; } public void copyFrom ( Exchange exchange ) { if ( exchange == this ) { return ; } setProperties ( safeCopy ( exchange . getProperties ( ) ) ) ; safeCopy ( getIn ( ) , exchange , exchange . getIn ( ) ) ; Message copyOut = exchange . getOut ( false ) ; if ( copyOut != null ) { safeCopy ( getOut ( true ) , exchange , copyOut ) ; } Message copyFault = exchange . getFault ( false ) ; if ( copyFault != null ) { safeCopy ( getFault ( true ) , exchange , copyFault ) ; } setException ( exchange . getException ( ) ) ; unitOfWork = exchange . getUnitOfWork ( ) ; pattern = exchange . getPattern ( ) ; } private static void safeCopy ( Message message , Exchange exchange , Message that ) { if ( message != null ) { message . copyFrom ( that ) ; } } private static Map < String , Object > safeCopy ( Map < String , Object > properties ) { if ( properties == null ) { return null ; } return new ConcurrentHashMap < String , Object > ( properties ) ; } private static Message safeCopy ( Exchange exchange , Message message ) { if ( message == null ) { return null ; } Message answer = message . copy ( ) ; if ( answer instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) answer ; messageSupport . setExchange ( exchange ) ; } return answer ; } public Exchange newInstance ( ) { return new DefaultExchange ( this ) ; } public CamelContext getContext ( ) { return context ; } public Object getProperty ( String name ) { if ( properties != null ) { return properties . get ( name ) ; } return null ; } public < T > T getProperty ( String name , Class < T > type ) { Object value = getProperty ( name ) ; ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { validateExchangePropertyIsExpectedType ( property , type , value ) ; } return getContext ( ) . getTypeConverter ( ) . convertTo ( type , this , value ) ; } public void setProperty ( String name , Object value ) { ExchangeProperty < ? > property = ExchangeProperty . getByName ( name ) ; if ( property != null ) { Class type = value . getClass ( ) ; validateExchangePropertyIsExpectedType ( property , type , value ) ; } if ( value != null ) { getProperties ( ) . put ( name , value ) ; } else { if ( name != null ) { getProperties ( ) . remove ( name ) ; } } } private < T > void validateExchangePropertyIsExpectedType ( ExchangeProperty < ? > property , Class < T > type , Object value ) { if ( value != null && property != null && ! property . type ( ) . isAssignableFrom ( type ) ) { throw new RuntimeCamelException ( "Type cast exception while getting an " + "Exchange Property value '" + value . toString ( ) + "' on Exchange " + this + " for a well known Exchange Property with these traits: " + property ) ; } } public Object removeProperty ( String name ) { return getProperties ( ) . remove ( name ) ; } public Map < String , Object > getProperties ( ) { if ( properties == null ) { properties = new ConcurrentHashMap < String , Object > ( ) ; } return properties ; } public void setProperties ( Map < String , Object > properties ) { this . properties = properties ; } public Message getIn ( ) { if ( in == null ) { in = createInMessage ( ) ; configureMessage ( in ) ; } return in ; } public void setIn ( Message in ) { this . in = in ; configureMessage ( in ) ; } public Message getOut ( ) { return getOut ( true ) ; } public Message getOut ( boolean lazyCreate ) { if ( out == null && lazyCreate ) { out = createOutMessage ( ) ; configureMessage ( out ) ; } return out ; } public void setOut ( Message out ) { this . out = out ; configureMessage ( out ) ; } public Throwable getException ( ) { return exception ; } public void setException ( Throwable exception ) { this . exception = exception ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } public void throwException ( ) throws Exception { if ( exception == null ) { return ; } if ( exception instanceof RuntimeException ) { throw ( RuntimeException ) exception ; } if ( exception instanceof Exception ) { throw ( Exception ) exception ; } throw wrapRuntimeCamelException ( exception ) ; } public Message getFault ( ) { return getFault ( true ) ; } public Message getFault ( boolean lazyCreate ) { if ( fault == null && lazyCreate ) { fault = createFaultMessage ( ) ; configureMessage ( fault ) ; } return fault ; } public void setFault ( Message fault ) { this . fault = fault ; configureMessage ( fault ) ; } public String getExchangeId ( ) { if ( exchangeId == null ) { exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( ) ; } return exchangeId ; } public void setExchangeId ( String id ) { this . exchangeId = id ; } public boolean isFailed ( ) { Message faultMessage = getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return getException ( ) != null ; } public boolean isTransacted ( ) { ExchangeProperty < ? > property = ExchangeProperty . get ( "transacted" ) ; return property != null && property . get ( this ) == Boolean . TRUE ; } public UnitOfWork getUnitOfWork ( ) { return unitOfWork ; } public void setUnitOfWork ( UnitOfWork unitOfWork ) { this . unitOfWork = unitOfWork ; } protected Message createInMessage ( ) { return new DefaultMessage ( ) ; } protected Message createOutMessage ( ) { return new DefaultMessage ( ) ; } protected Message createFaultMessage ( ) { return new DefaultMessage ( ) ; } protected void configureMessage ( Message message ) { if ( message instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) message ; messageSupport . setExchange ( this ) ; } } } 	1
package org . apache . camel . component . cxf . invoker ; import java . util . IdentityHashMap ; import java . util . List ; import java . util . Map ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . w3c . dom . Element ; import org . apache . camel . Headers ; import org . apache . cxf . binding . soap . SoapHeader ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . headers . Header ; import org . apache . cxf . helpers . CastUtils ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; public class PayloadInvokingContext extends AbstractInvokingContext { private static final Logger LOG = LogUtils . getL7dLogger ( PayloadInvokingContext . class ) ; public PayloadInvokingContext ( ) { } public void setRequestOutMessageContent ( Message message , Map < Class , Object > contents ) { PayloadMessage request = ( PayloadMessage ) contents . get ( PayloadMessage . class ) ; List < SoapHeader > headers = request . getHeaders ( ) ; List < Element > payload = request . getPayload ( ) ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( "header = " + headers + ", paylaod = " + payload ) ; } message . put ( Header . HEADER_LIST , headers ) ; message . put ( List . class , payload ) ; } @ SuppressWarnings ( "unchecked" ) public Object getResponseObject ( Exchange exchange , Map < String , Object > responseContext ) { PayloadMessage payloadMsg = null ; Message msg = exchange . getInMessage ( ) ; List < Element > payload = getResponseObject ( msg , responseContext , List . class ) ; List < SoapHeader > header = CastUtils . cast ( ( List < ? > ) exchange . getInMessage ( ) . get ( Header . HEADER_LIST ) ) ; payloadMsg = new PayloadMessage ( payload , header ) ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( payloadMsg . toString ( ) ) ; } return payloadMsg ; } @ Override protected < T > T getResponseObject ( Message inMessage , Map < String , Object > responseContext , Class < T > clazz ) { T retval = null ; if ( inMessage != null ) { if ( null != responseContext ) { responseContext . putAll ( inMessage ) ; LOG . info ( "set responseContext to be" + responseContext ) ; } retval = inMessage . get ( clazz ) ; } return retval ; } public void setResponseContent ( Message outMessage , Object resultPayload ) { if ( resultPayload != null ) { PayloadMessage payloadMessage = ( PayloadMessage ) resultPayload ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( payloadMessage . toString ( ) ) ; } outMessage . put ( List . class , payloadMessage . getPayload ( ) ) ; outMessage . put ( Header . HEADER_LIST , payloadMessage . getHeaders ( ) ) ; } } @ SuppressWarnings ( "unchecked" ) public Map < Class , Object > getRequestContent ( Message inMessage ) { List < Element > payload = inMessage . get ( List . class ) ; List < SoapHeader > headers = CastUtils . cast ( ( List < ? > ) inMessage . get ( Header . HEADER_LIST ) ) ; if ( LOG . isLoggable ( Level . FINEST ) ) { LOG . finest ( "Header = " + headers + ", Payload = " + payload ) ; } Map < Class , Object > contents = new IdentityHashMap < Class , Object > ( ) ; contents . put ( PayloadMessage . class , new PayloadMessage ( payload , headers ) ) ; return contents ; } @ Override protected Logger getLogger ( ) { return LOG ; } } 	0
package org . apache . camel . util ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import org . w3c . dom . NodeList ; public final class CollectionHelper { private CollectionHelper ( ) { } public static Integer size ( Object value ) { if ( value != null ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . size ( ) ; } else if ( value instanceof Map ) { Map map = ( Map ) value ; return map . size ( ) ; } else if ( value instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) value ; return array . length ; } else if ( value . getClass ( ) . isArray ( ) ) { return Array . getLength ( value ) ; } else if ( value instanceof NodeList ) { NodeList nodeList = ( NodeList ) value ; return nodeList . getLength ( ) ; } } return null ; } public static void appendValue ( Map map , Object key , Object value ) { Object oldValue = map . get ( key ) ; if ( oldValue != null ) { List list ; if ( oldValue instanceof List ) { list = ( List ) oldValue ; } else { list = new ArrayList ( ) ; list . add ( oldValue ) ; } list . add ( value ) ; } else { map . put ( key , value ) ; } } public static List filterList ( List list , Object ... filters ) { List answer = new ArrayList ( ) ; for ( Object o : list ) { for ( Object filter : filters ) { if ( ! o . getClass ( ) . isInstance ( filter ) ) { answer . add ( o ) ; } } } return answer ; } } 	1
package org . apache . camel ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class Route < E extends Exchange > { public static final String ID_PROPERTY = "id" ; public static final String PARENT_PROPERTY = "parent" ; public static final String GROUP_PROPERTY = "group" ; private final Map < String , Object > properties = new HashMap < String , Object > ( 16 ) ; private Endpoint < E > endpoint ; private List < Service > services = new ArrayList < Service > ( ) ; public Route ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } public Route ( Endpoint < E > endpoint , Service ... services ) { this ( endpoint ) ; for ( Service service : services ) { addService ( service ) ; } } @ Override public String toString ( ) { return "Route" ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } public Map < String , Object > getProperties ( ) { return properties ; } public List < Service > getServicesForRoute ( ) throws Exception { List < Service > servicesForRoute = new ArrayList < Service > ( getServices ( ) ) ; addServices ( servicesForRoute ) ; return servicesForRoute ; } public List < Service > getServices ( ) { return services ; } public void setServices ( List < Service > services ) { this . services = services ; } public void addService ( Service service ) { getServices ( ) . add ( service ) ; } protected void addServices ( List < Service > services ) throws Exception { } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; @ XmlRootElement ( name = "flatpack" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FlatpackDataFormat extends DataFormatType { public FlatpackDataFormat ( ) { super ( "org.apache.camel.component.flatpack.FlatpackDataFormat" ) ; } } 	1
package org . apache . camel . bam . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . bam . rules . ActivityRules ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . transaction . support . TransactionTemplate ; public class JpaBamProcessor extends JpaBamProcessorSupport < ProcessInstance > { private static final transient Log LOG = LogFactory . getLog ( JpaBamProcessor . class ) ; public JpaBamProcessor ( TransactionTemplate transactionTemplate , JpaTemplate template , Expression < Exchange > correlationKeyExpression , ActivityRules activityRules ) { super ( transactionTemplate , template , correlationKeyExpression , activityRules ) ; } public JpaBamProcessor ( TransactionTemplate transactionTemplate , JpaTemplate template , Expression < Exchange > correlationKeyExpression , ActivityRules activityRules , Class < ProcessInstance > entitytype ) { super ( transactionTemplate , template , correlationKeyExpression , activityRules , entitytype ) ; } protected void processEntity ( Exchange exchange , ProcessInstance process ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Processing process instance: " + process ) ; } ActivityRules rules = getActivityRules ( ) ; ActivityState state = process . getOrCreateActivityState ( rules ) ; state . processExchange ( rules , new ProcessContext ( exchange , rules , state ) ) ; rules . getProcessRules ( ) . processExchange ( exchange , process ) ; } } 	0
package org . apache . camel . model . loadbalancer ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "roundRobin" ) public class RoundRobinLoadBalanceStrategy extends LoadBalancerType { @ Override protected LoadBalancer createLoadBalancer ( RouteContext routeContext ) { return new org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ( ) ; } } 	1
package org . apache . camel . component . sql ; import java . util . Map ; import javax . sql . DataSource ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; public class SqlComponent extends DefaultComponent < Exchange > { private DataSource dataSource ; public SqlComponent ( ) { } public SqlComponent ( CamelContext context ) { super ( context ) ; } @ Override protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { String dataSourceRef = getAndRemoveParameter ( parameters , "dataSourceRef" , String . class ) ; if ( dataSourceRef != null ) { dataSource = getCamelContext ( ) . getRegistry ( ) . lookup ( dataSourceRef , DataSource . class ) ; if ( dataSource == null ) { throw new IllegalArgumentException ( "DataSource " + dataSourceRef + " not found in registry" ) ; } } return new SqlEndpoint ( uri , remaining . replaceAll ( "#" , "?" ) , this , dataSource , parameters ) ; } public void setDataSource ( DataSource dataSource ) { this . dataSource = dataSource ; } } 	0
package org . apache . camel . component . dataset ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . Service ; import org . apache . camel . component . mock . MockEndpoint ; import org . apache . camel . impl . EventDrivenPollingConsumer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DataSetEndpoint extends MockEndpoint implements Service { private static final transient Log LOG = LogFactory . getLog ( DataSetEndpoint . class ) ; private DataSet dataSet ; private AtomicInteger receivedCounter = new AtomicInteger ( ) ; private long produceDelay = - 1 ; private long consumeDelay = - 1 ; private long startTime ; private long preloadSize ; public DataSetEndpoint ( String endpointUri , Component component , DataSet dataSet ) { super ( endpointUri , component ) ; this . dataSet = dataSet ; } public DataSetEndpoint ( String endpointUri , DataSet dataSet ) { super ( endpointUri ) ; this . dataSet = dataSet ; } public static void assertEquals ( String description , Object expected , Object actual , Exchange exchange ) { if ( ! ObjectHelper . equal ( expected , actual ) ) { throw new AssertionError ( description + " does not match. Expected: " + expected + " but was: " + actual + " on " + exchange + " with headers: " + exchange . getIn ( ) . getHeaders ( ) ) ; } } @ Override public PollingConsumer < Exchange > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < Exchange > ( this ) ; } @ Override public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { return new DataSetConsumer ( this , processor ) ; } @ Override public void reset ( ) { super . reset ( ) ; receivedCounter . set ( 0 ) ; } @ Override public int getReceivedCounter ( ) { return receivedCounter . get ( ) ; } public Exchange createExchange ( long messageIndex ) throws Exception { Exchange exchange = createExchange ( ) ; getDataSet ( ) . populateMessage ( exchange , messageIndex ) ; Message in = exchange . getIn ( ) ; in . setHeader ( DataSet . INDEX_HEADER , messageIndex ) ; return exchange ; } @ Override protected void waitForCompleteLatch ( ) throws InterruptedException { long size = getDataSet ( ) . getSize ( ) ; size *= 4000 ; setResultWaitTime ( size ) ; super . waitForCompleteLatch ( ) ; } public DataSet getDataSet ( ) { return dataSet ; } public void setDataSet ( DataSet dataSet ) { this . dataSet = dataSet ; } public long getPreloadSize ( ) { return preloadSize ; } public void setPreloadSize ( long preloadSize ) { this . preloadSize = preloadSize ; } public long getConsumeDelay ( ) { return consumeDelay ; } public void setConsumeDelay ( long consumeDelay ) { this . consumeDelay = consumeDelay ; } public long getProduceDelay ( ) { return produceDelay ; } public void setProduceDelay ( long produceDelay ) { this . produceDelay = produceDelay ; } @ Override protected void performAssertions ( Exchange actual ) throws Exception { if ( startTime == 0 ) { startTime = System . currentTimeMillis ( ) ; } int receivedCount = receivedCounter . incrementAndGet ( ) ; long index = receivedCount - 1 ; Exchange expected = createExchange ( index ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Received message: " + index + " = " + actual ) ; } assertMessageExpected ( index , expected , actual ) ; if ( consumeDelay > 0 ) { Thread . sleep ( consumeDelay ) ; } long group = getDataSet ( ) . getReportCount ( ) ; if ( receivedCount % group == 0 ) { reportProgress ( actual , receivedCount ) ; } } protected void reportProgress ( Exchange actual , int receivedCount ) { long time = System . currentTimeMillis ( ) ; long elapsed = time - startTime ; startTime = time ; LOG . info ( "Received: " + receivedCount + " messages so far. Last group took: " + elapsed + " millis" ) ; } protected void assertMessageExpected ( long index , Exchange expected , Exchange actual ) throws Exception { long actualCounter = ExchangeHelper . getMandatoryHeader ( actual , DataSet . INDEX_HEADER , Long . class ) ; assertEquals ( "Header: " + DataSet . INDEX_HEADER , index , actualCounter , actual ) ; getDataSet ( ) . assertMessageExpected ( this , expected , actual , index ) ; } public void start ( ) throws Exception { long size = getDataSet ( ) . getSize ( ) ; expectedMessageCount ( ( int ) size ) ; } public void stop ( ) throws Exception { } } 	1
package org . apache . camel . util ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class ExpressionHelper { private ExpressionHelper ( ) { } public static < E extends Exchange > String evaluateAsString ( Expression < E > expression , E exchange ) { return evaluateAsType ( expression , exchange , String . class ) ; } public static < T , E extends Exchange > T evaluateAsType ( Expression < E > expression , E exchange , Class < T > resultType ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( resultType , exchange , value ) ; } } 	0
package org . apache . camel . processor . exceptionpolicy ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . model . ExceptionType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultExceptionPolicyStrategy implements ExceptionPolicyStrategy { private static final transient Log LOG = LogFactory . getLog ( DefaultExceptionPolicyStrategy . class ) ; public ExceptionType getExceptionPolicy ( Map < ExceptionPolicyKey , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) { Iterator < Throwable > it = createExceptionIterator ( exception ) ; while ( it . hasNext ( ) ) { ExceptionType type = findMatchedExceptionPolicy ( exceptionPolicices , exchange , it . next ( ) ) ; if ( type != null ) { return type ; } } return null ; } private ExceptionType findMatchedExceptionPolicy ( Map < ExceptionPolicyKey , ExceptionType > exceptionPolicices , Exchange exchange , Throwable exception ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finding best suited exception policy for thrown exception " + exception . getClass ( ) . getName ( ) ) ; } int targetLevel = getInheritanceLevel ( exception . getClass ( ) ) ; ExceptionType candidate = null ; int candidateDiff = Integer . MAX_VALUE ; Set < Map . Entry < ExceptionPolicyKey , ExceptionType > > entries = exceptionPolicices . entrySet ( ) ; for ( Map . Entry < ExceptionPolicyKey , ExceptionType > entry : entries ) { Class clazz = entry . getKey ( ) . getExceptionClass ( ) ; ExceptionType type = entry . getValue ( ) ; if ( filter ( type , clazz , exception ) ) { if ( ! matchesWhen ( type , exchange ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "The type did not match when: " + type ) ; } continue ; } if ( clazz . equals ( exception . getClass ( ) ) ) { candidate = type ; break ; } int level = getInheritanceLevel ( clazz ) ; int diff = targetLevel - level ; if ( diff < candidateDiff ) { candidate = type ; candidateDiff = diff ; } } } if ( LOG . isDebugEnabled ( ) ) { if ( candidate != null ) { LOG . debug ( "Using " + candidate + " as the exception policy" ) ; } else { LOG . debug ( "No candidate found to be used as exception policy" ) ; } } return candidate ; } protected boolean filter ( ExceptionType type , Class exceptionClass , Throwable exception ) { return exceptionClass . isInstance ( exception ) ; } protected boolean matchesWhen ( ExceptionType type , Exchange exchange ) { if ( type . getOnWhen ( ) == null || type . getOnWhen ( ) . getExpression ( ) == null ) { return true ; } return type . getOnWhen ( ) . getExpression ( ) . matches ( exchange ) ; } protected Iterator < Throwable > createExceptionIterator ( Throwable exception ) { return new ExceptionIterator ( exception ) ; } private static int getInheritanceLevel ( Class clazz ) { if ( clazz == null || "java.lang.Object" . equals ( clazz . getName ( ) ) ) { return 0 ; } return 1 + getInheritanceLevel ( clazz . getSuperclass ( ) ) ; } private class ExceptionIterator implements Iterator < Throwable > { private List < Throwable > tree = new ArrayList < Throwable > ( ) ; private Iterator < Throwable > it ; public ExceptionIterator ( Throwable exception ) { Throwable current = exception ; while ( current != null ) { tree . add ( current ) ; current = current . getCause ( ) ; } Collections . reverse ( tree ) ; it = tree . iterator ( ) ; } public boolean hasNext ( ) { return it . hasNext ( ) ; } public Throwable next ( ) { return it . next ( ) ; } public void remove ( ) { it . remove ( ) ; } } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . CONSTRUCTOR } ) public @ interface MessageDriven { String uri ( ) default "" ; String name ( ) default "" ; } 	0
package org . apache . camel . management ; import java . util . Map ; import org . apache . camel . Processor ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . RouteContext ; public class InstrumentationErrorHandlerWrappingStrategy implements ErrorHandlerWrappingStrategy { private Map < ProcessorType , PerformanceCounter > counterMap ; public InstrumentationErrorHandlerWrappingStrategy ( Map < ProcessorType , PerformanceCounter > counterMap ) { this . counterMap = counterMap ; } public Processor wrapProcessorInErrorHandler ( RouteContext routeContext , ProcessorType processorType , Processor target ) throws Exception { if ( counterMap . containsKey ( processorType ) ) { return processorType . getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } return target ; } } 	1
package org . apache . camel . bam . processor ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; public class NoCorrelationKeyException extends CamelExchangeException { private final BamProcessorSupport processor ; public NoCorrelationKeyException ( BamProcessorSupport processor , Exchange exchange ) { super ( "No correlation key could be found for " + processor . getCorrelationKeyExpression ( ) , exchange ) ; this . processor = processor ; } public BamProcessorSupport getProcessor ( ) { return processor ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import java . io . StringReader ; import java . io . StringWriter ; import java . lang . reflect . Constructor ; import java . nio . ByteBuffer ; import java . util . Properties ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerConfigurationException ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . sax . SAXSource ; import javax . xml . transform . stream . StreamResult ; import javax . xml . transform . stream . StreamSource ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . XMLReader ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . NIOConverter ; import org . apache . camel . util . ObjectHelper ; @ Converter public class XmlConverter { public static final String DEFAULT_CHARSET_PROPERTY = "org.apache.camel.default.charset" ; public static String defaultCharset = ObjectHelper . getSystemProperty ( DEFAULT_CHARSET_PROPERTY , "UTF-8" ) ; private static final Class DOM_TO_SAX_CLASS ; private DocumentBuilderFactory documentBuilderFactory ; private TransformerFactory transformerFactory ; static { Class cl = null ; try { cl = Class . forName ( "org.apache.xalan.xsltc.trax.DOM2SAX" ) ; } catch ( Throwable t ) { } DOM_TO_SAX_CLASS = cl ; } public XmlConverter ( ) { } public XmlConverter ( DocumentBuilderFactory documentBuilderFactory ) { this . documentBuilderFactory = documentBuilderFactory ; } public Properties defaultOutputProperties ( ) { Properties properties = new Properties ( ) ; properties . put ( OutputKeys . ENCODING , defaultCharset ) ; properties . put ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; return properties ; } public void toResult ( Source source , Result result ) throws TransformerException { toResult ( source , result , defaultOutputProperties ( ) ) ; } public void toResult ( Source source , Result result , Properties outputProperties ) throws TransformerException { if ( source == null ) { return ; } Transformer transformer = createTransfomer ( ) ; if ( transformer == null ) { throw new TransformerException ( "Could not create a transformer - JAXP is misconfigured!" ) ; } transformer . setOutputProperties ( outputProperties ) ; transformer . transform ( source , result ) ; } @ Converter public BytesSource toSource ( byte [ ] data ) { return new BytesSource ( data ) ; } @ Converter public StringSource toSource ( String data ) { return new StringSource ( data ) ; } @ Converter public DOMSource toSource ( Document document ) { return new DOMSource ( document ) ; } @ Converter public Source toSource ( Node node ) { return new DOMSource ( node ) ; } @ Converter public String toString ( Source source ) throws TransformerException { if ( source == null ) { return null ; } else if ( source instanceof StringSource ) { return ( ( StringSource ) source ) . getText ( ) ; } else if ( source instanceof BytesSource ) { return new String ( ( ( BytesSource ) source ) . getData ( ) ) ; } else { StringWriter buffer = new StringWriter ( ) ; toResult ( source , new StreamResult ( buffer ) ) ; return buffer . toString ( ) ; } } @ Converter public String toString ( Node node ) throws TransformerException { return toString ( new DOMSource ( node ) ) ; } @ Converter public DOMSource toDOMSource ( Source source ) throws ParserConfigurationException , IOException , SAXException , TransformerException { if ( source instanceof DOMSource ) { return ( DOMSource ) source ; } else if ( source instanceof SAXSource ) { return toDOMSourceFromSAX ( ( SAXSource ) source ) ; } else if ( source instanceof StreamSource ) { return toDOMSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public DOMSource toDOMSource ( String text ) throws ParserConfigurationException , IOException , SAXException , TransformerException { Source source = toSource ( text ) ; if ( source != null ) { return toDOMSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public SAXSource toSAXSource ( String source ) throws IOException , SAXException , TransformerException { return toSAXSource ( toSource ( source ) ) ; } @ Converter public SAXSource toSAXSource ( InputStream source ) throws IOException , SAXException , TransformerException { return toSAXSource ( toStreamSource ( source ) ) ; } @ Converter public SAXSource toSAXSource ( Source source ) throws IOException , SAXException , TransformerException { if ( source instanceof SAXSource ) { return ( SAXSource ) source ; } else if ( source instanceof DOMSource ) { return toSAXSourceFromDOM ( ( DOMSource ) source ) ; } else if ( source instanceof StreamSource ) { return toSAXSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public StreamSource toStreamSource ( Source source ) throws TransformerException { if ( source instanceof StreamSource ) { return ( StreamSource ) source ; } else if ( source instanceof DOMSource ) { return toStreamSourceFromDOM ( ( DOMSource ) source ) ; } else if ( source instanceof SAXSource ) { return toStreamSourceFromSAX ( ( SAXSource ) source ) ; } else { return null ; } } @ Converter public StreamSource toStreamSource ( InputStream in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( Reader in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( File in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( byte [ ] in ) throws TransformerException { if ( in != null ) { return new StreamSource ( IOConverter . toInputStream ( in ) ) ; } return null ; } @ Converter public StreamSource toStreamSource ( ByteBuffer in ) throws TransformerException { if ( in != null ) { return new StreamSource ( NIOConverter . toInputStream ( in ) ) ; } return null ; } @ Converter public StreamSource toStreamSourceFromSAX ( SAXSource source ) throws TransformerException { InputSource inputSource = source . getInputSource ( ) ; if ( inputSource != null ) { if ( inputSource . getCharacterStream ( ) != null ) { return new StreamSource ( inputSource . getCharacterStream ( ) ) ; } if ( inputSource . getByteStream ( ) != null ) { return new StreamSource ( inputSource . getByteStream ( ) ) ; } } String result = toString ( source ) ; return new StringSource ( result ) ; } @ Converter public StreamSource toStreamSourceFromDOM ( DOMSource source ) throws TransformerException { String result = toString ( source ) ; return new StringSource ( result ) ; } @ Converter public SAXSource toSAXSourceFromStream ( StreamSource source ) { InputSource inputSource ; if ( source . getReader ( ) != null ) { inputSource = new InputSource ( source . getReader ( ) ) ; } else { inputSource = new InputSource ( source . getInputStream ( ) ) ; } inputSource . setSystemId ( source . getSystemId ( ) ) ; inputSource . setPublicId ( source . getPublicId ( ) ) ; return new SAXSource ( inputSource ) ; } @ Converter public Reader toReaderFromSource ( Source src ) throws TransformerException { StreamSource stSrc = toStreamSource ( src ) ; Reader r = stSrc . getReader ( ) ; if ( r == null ) { r = new InputStreamReader ( stSrc . getInputStream ( ) ) ; } return r ; } @ Converter public DOMSource toDOMSourceFromStream ( StreamSource source ) throws ParserConfigurationException , IOException , SAXException { DocumentBuilder builder = createDocumentBuilder ( ) ; String systemId = source . getSystemId ( ) ; Document document = null ; Reader reader = source . getReader ( ) ; if ( reader != null ) { document = builder . parse ( new InputSource ( reader ) ) ; } else { InputStream inputStream = source . getInputStream ( ) ; if ( inputStream != null ) { InputSource inputsource = new InputSource ( inputStream ) ; inputsource . setSystemId ( systemId ) ; document = builder . parse ( inputsource ) ; } else { throw new IOException ( "No input stream or reader available" ) ; } } return new DOMSource ( document , systemId ) ; } @ Converter public SAXSource toSAXSourceFromDOM ( DOMSource source ) throws TransformerException { if ( DOM_TO_SAX_CLASS != null ) { try { Constructor cns = DOM_TO_SAX_CLASS . getConstructor ( Node . class ) ; XMLReader converter = ( XMLReader ) cns . newInstance ( source . getNode ( ) ) ; return new SAXSource ( converter , new InputSource ( ) ) ; } catch ( Exception e ) { throw new TransformerException ( e ) ; } } else { String str = toString ( source ) ; StringReader reader = new StringReader ( str ) ; return new SAXSource ( new InputSource ( reader ) ) ; } } @ Converter public DOMSource toDOMSourceFromSAX ( SAXSource source ) throws IOException , SAXException , ParserConfigurationException , TransformerException { return new DOMSource ( toDOMNodeFromSAX ( source ) ) ; } @ Converter public Node toDOMNodeFromSAX ( SAXSource source ) throws ParserConfigurationException , IOException , SAXException , TransformerException { DOMResult result = new DOMResult ( ) ; toResult ( source , result ) ; return result . getNode ( ) ; } @ Converter public Node toDOMNode ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { DOMSource domSrc = toDOMSource ( source ) ; return domSrc != null ? domSrc . getNode ( ) : null ; } @ Converter public Element toDOMElement ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { Node node = toDOMNode ( source ) ; return toDOMElement ( node ) ; } @ Converter public Element toDOMElement ( Node node ) throws TransformerException { if ( node instanceof Document ) { return ( ( Document ) node ) . getDocumentElement ( ) ; } else if ( node instanceof Element ) { return ( Element ) node ; } else { throw new TransformerException ( "Unable to convert DOM node to an Element" ) ; } } @ Converter public Document toDOMDocument ( byte [ ] data ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( new ByteArrayInputStream ( data ) ) ; } @ Converter public Document toDOMDocument ( InputStream in ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( in ) ; } @ Converter public Document toDOMDocument ( Reader in ) throws IOException , SAXException , ParserConfigurationException { return toDOMDocument ( new InputSource ( in ) ) ; } @ Converter public Document toDOMDocument ( InputSource in ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( in ) ; } @ Converter public Document toDOMDocument ( String text ) throws IOException , SAXException , ParserConfigurationException { return toDOMDocument ( new StringReader ( text ) ) ; } @ Converter public Document toDOMDocument ( File file ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( file ) ; } @ Converter public Document toDOMDocument ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { Node node = toDOMNode ( source ) ; return toDOMDocument ( node ) ; } @ Converter public Document toDOMDocument ( Node node ) throws ParserConfigurationException , TransformerException { if ( node instanceof Document ) { return ( Document ) node ; } else if ( node instanceof Element ) { Element elem = ( Element ) node ; if ( elem . getOwnerDocument ( ) . getDocumentElement ( ) == elem ) { return elem . getOwnerDocument ( ) ; } else { Document doc = createDocument ( ) ; doc . appendChild ( doc . importNode ( node , true ) ) ; return doc ; } } else { throw new TransformerException ( "Unable to convert DOM node to a Document" ) ; } } public DocumentBuilderFactory getDocumentBuilderFactory ( ) { if ( documentBuilderFactory == null ) { documentBuilderFactory = createDocumentBuilderFactory ( ) ; } return documentBuilderFactory ; } public void setDocumentBuilderFactory ( DocumentBuilderFactory documentBuilderFactory ) { this . documentBuilderFactory = documentBuilderFactory ; } public DocumentBuilderFactory createDocumentBuilderFactory ( ) { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; factory . setNamespaceAware ( true ) ; factory . setIgnoringElementContentWhitespace ( true ) ; factory . setIgnoringComments ( true ) ; return factory ; } public DocumentBuilder createDocumentBuilder ( ) throws ParserConfigurationException { DocumentBuilderFactory factory = getDocumentBuilderFactory ( ) ; return factory . newDocumentBuilder ( ) ; } public Document createDocument ( ) throws ParserConfigurationException { DocumentBuilder builder = createDocumentBuilder ( ) ; return builder . newDocument ( ) ; } public TransformerFactory getTransformerFactory ( ) { if ( transformerFactory == null ) { transformerFactory = createTransformerFactory ( ) ; } return transformerFactory ; } public void setTransformerFactory ( TransformerFactory transformerFactory ) { this . transformerFactory = transformerFactory ; } public Transformer createTransfomer ( ) throws TransformerConfigurationException { TransformerFactory factory = getTransformerFactory ( ) ; return factory . newTransformer ( ) ; } public TransformerFactory createTransformerFactory ( ) { TransformerFactory answer = TransformerFactory . newInstance ( ) ; return answer ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . InputStream ; import org . apache . camel . Converter ; @ Converter public final class RemoteFileConverter { private RemoteFileConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteArrayOutputStream os ) { return os . toByteArray ( ) ; } @ Converter public static String toString ( ByteArrayOutputStream os ) { return os . toString ( ) ; } @ Converter public static InputStream toInputStream ( ByteArrayOutputStream os ) { return new ByteArrayInputStream ( os . toByteArray ( ) ) ; } } 	0
package org . apache . camel . util ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . Registry ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; import static org . apache . camel . util . ObjectHelper . notNull ; public final class CamelContextHelper { private CamelContextHelper ( ) { } public static Endpoint getMandatoryEndpoint ( CamelContext camelContext , String uri ) throws NoSuchEndpointException { Endpoint endpoint = camelContext . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } else { return endpoint ; } } public static String getEndpointKey ( String uri , Endpoint ep ) { return ep . isSingleton ( ) ? uri : ( "Ox" + Integer . toHexString ( ep . hashCode ( ) ) + ":" + uri ) ; } public static < T extends Endpoint > T getMandatoryEndpoint ( CamelContext camelContext , String uri , Class < T > type ) { Endpoint endpoint = getMandatoryEndpoint ( camelContext , uri ) ; return ObjectHelper . cast ( type , endpoint ) ; } public < T > List < T > getEndpoints ( CamelContext camelContext , Class < T > type ) { return getEndpointsImpl ( camelContext , type , false ) ; } public static < T > List < T > getSingletonEndpoints ( CamelContext camelContext , Class < T > type ) { return getEndpointsImpl ( camelContext , type , true ) ; } private static < T > List < T > getEndpointsImpl ( CamelContext camelContext , Class < T > type , boolean singleton ) { List < T > answer = new ArrayList < T > ( ) ; Collection < Endpoint > endpoints = singleton ? camelContext . getSingletonEndpoints ( ) : camelContext . getEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( type . isInstance ( endpoint ) ) { T value = type . cast ( endpoint ) ; answer . add ( value ) ; } } return answer ; } public static < T > T convertTo ( CamelContext context , Class < T > type , Object value ) { notNull ( context , "camelContext" ) ; return context . getTypeConverter ( ) . convertTo ( type , value ) ; } public static < T > T mandatoryConvertTo ( CamelContext context , Class < T > type , Object value ) { T answer = convertTo ( context , type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Value " + value + " converted to " + type . getName ( ) + " cannot be null" ) ; } return answer ; } public static < T > T newInstance ( CamelContext context , Class < T > beanType ) { return context . getInjector ( ) . newInstance ( beanType ) ; } public static Object lookup ( CamelContext context , String name ) { return context . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookup ( CamelContext context , String name , Class < T > beanType ) { return context . getRegistry ( ) . lookup ( name , beanType ) ; } public static Object mandatoryLookup ( CamelContext context , String name ) { Object answer = lookup ( context , name ) ; notNull ( answer , "registry entry called " + name ) ; return answer ; } public static < T > T mandatoryLookup ( CamelContext context , String name , Class < T > beanType ) { T answer = lookup ( context , name , beanType ) ; notNull ( answer , "registry entry called " + name + " of type " + beanType . getName ( ) ) ; return answer ; } public static Language resolveMandatoryLanguage ( CamelContext camelContext , String languageName ) { notNull ( camelContext , "camelContext" ) ; notNull ( languageName , "languageName" ) ; Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Could not resolve language: " + languageName ) ; } return language ; } public static Expression resolveMandatoryExpression ( CamelContext camelContext , String languageName , String expressionText ) { notNull ( expressionText , "expressionText" ) ; Language language = resolveMandatoryLanguage ( camelContext , languageName ) ; Expression < Exchange > expression = language . createExpression ( expressionText ) ; if ( expression == null ) { throw new IllegalArgumentException ( "Could not create expression: " + expressionText + " with language: " + language ) ; } return expression ; } public static Endpoint getEndpointInjection ( CamelContext camelContext , String uri , String name , String injectionPointName , boolean mandatory ) { Endpoint endpoint = null ; if ( isNotNullAndNonEmpty ( uri ) ) { endpoint = camelContext . getEndpoint ( uri ) ; } else { if ( isNullOrBlank ( name ) ) { name = injectionPointName ; } if ( mandatory ) { endpoint = mandatoryLookup ( camelContext , name , Endpoint . class ) ; } else { endpoint = lookup ( camelContext , name , Endpoint . class ) ; } } return endpoint ; } } 	1
package org . apache . camel . component . hl7 ; import java . nio . charset . Charset ; import java . nio . charset . CharsetDecoder ; import java . nio . charset . CharsetEncoder ; import ca . uhn . hl7v2 . model . Message ; import org . apache . camel . dataformat . hl7 . HL7Converter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . mina . common . ByteBuffer ; import org . apache . mina . common . IoSession ; import org . apache . mina . filter . codec . ProtocolCodecFactory ; import org . apache . mina . filter . codec . ProtocolDecoder ; import org . apache . mina . filter . codec . ProtocolDecoderOutput ; import org . apache . mina . filter . codec . ProtocolEncoder ; import org . apache . mina . filter . codec . ProtocolEncoderOutput ; public class HL7MLLPCodec implements ProtocolCodecFactory { private static final transient Log LOG = LogFactory . getLog ( HL7MLLPCodec . class ) ; private static final String CHARSET_ENCODER = HL7MLLPCodec . class . getName ( ) + ".charsetencoder" ; private static final String CHARSET_DECODER = HL7MLLPCodec . class . getName ( ) + ".charsetdecoder" ; private char startByte = 0x0b ; private char endByte1 = 0x1c ; private char endByte2 = 0x0d ; private Charset charset = Charset . defaultCharset ( ) ; private boolean convertLFtoCR = true ; public ProtocolEncoder getEncoder ( ) throws Exception { return new ProtocolEncoder ( ) { public void encode ( IoSession session , Object message , ProtocolEncoderOutput out ) throws Exception { if ( message == null ) { throw new IllegalArgumentException ( "Message to encode is null" ) ; } else if ( message instanceof Exception ) { throw ( Exception ) message ; } CharsetEncoder encoder = ( CharsetEncoder ) session . getAttribute ( CHARSET_ENCODER ) ; if ( encoder == null ) { encoder = charset . newEncoder ( ) ; session . setAttribute ( CHARSET_ENCODER , encoder ) ; } String body ; if ( message instanceof Message ) { body = HL7Converter . toString ( ( Message ) message ) ; } else if ( message instanceof String ) { body = ( String ) message ; } else if ( message instanceof byte [ ] ) { body = new String ( ( byte [ ] ) message ) ; } else { throw new IllegalArgumentException ( "The message to encode is not a supported type: " + message . getClass ( ) . getCanonicalName ( ) ) ; } if ( convertLFtoCR ) { body = body . replace ( '\n' , '\r' ) ; } ByteBuffer bb = ByteBuffer . allocate ( body . length ( ) + 3 ) . setAutoExpand ( true ) ; bb . put ( ( byte ) startByte ) ; bb . putString ( body , encoder ) ; bb . put ( ( byte ) endByte1 ) ; bb . put ( ( byte ) endByte2 ) ; bb . flip ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Encoding HL7 from " + message . getClass ( ) . getCanonicalName ( ) + " to byte stream" ) ; } out . write ( bb ) ; } public void dispose ( IoSession session ) throws Exception { session . removeAttribute ( CHARSET_ENCODER ) ; } } ; } public ProtocolDecoder getDecoder ( ) throws Exception { return new ProtocolDecoder ( ) { public void decode ( IoSession session , ByteBuffer in , ProtocolDecoderOutput out ) throws Exception { int posEnd = 0 ; int posStart = 0 ; while ( in . hasRemaining ( ) ) { byte b = in . get ( ) ; if ( b == startByte ) { posStart = in . position ( ) ; } if ( b == endByte1 ) { byte next = in . get ( ) ; if ( next == endByte2 ) { posEnd = in . position ( ) - 2 ; break ; } else { LOG . warn ( "The 2nd end byte " + endByte2 + " was not found, but was " + b ) ; } } } in . rewind ( ) ; in . skip ( posStart ) ; if ( posEnd > 0 ) { in . limit ( posEnd ) ; } try { CharsetDecoder decoder = ( CharsetDecoder ) session . getAttribute ( CHARSET_DECODER ) ; if ( decoder == null ) { decoder = charset . newDecoder ( ) ; session . setAttribute ( CHARSET_DECODER , decoder ) ; } String body = in . getString ( decoder ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Decoding HL7 from byte stream to String" ) ; } out . write ( body ) ; } finally { in . clear ( ) ; } } public void finishDecode ( IoSession session , ProtocolDecoderOutput out ) throws Exception { } public void dispose ( IoSession session ) throws Exception { session . removeAttribute ( CHARSET_DECODER ) ; } } ; } public Charset getCharset ( ) { return charset ; } public void setCharset ( Charset charset ) { this . charset = charset ; } public void setCharset ( String charsetName ) { this . charset = Charset . forName ( charsetName ) ; } public boolean isConvertLFtoCR ( ) { return convertLFtoCR ; } public void setConvertLFtoCR ( boolean convertLFtoCR ) { this . convertLFtoCR = convertLFtoCR ; } public char getStartByte ( ) { return startByte ; } public void setStartByte ( char startByte ) { this . startByte = startByte ; } public char getEndByte1 ( ) { return endByte1 ; } public void setEndByte1 ( char endByte1 ) { this . endByte1 = endByte1 ; } public char getEndByte2 ( ) { return endByte2 ; } public void setEndByte2 ( char endByte2 ) { this . endByte2 = endByte2 ; } } 	0
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . language . bean . BeanExpression ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "methodCall" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MethodCallExpression extends ExpressionType { @ XmlAttribute ( required = false ) private String bean ; @ XmlAttribute ( required = false ) private String method ; public MethodCallExpression ( ) { } public MethodCallExpression ( String beanName ) { super ( beanName ) ; } public MethodCallExpression ( String beanName , String method ) { super ( beanName ) ; this . method = method ; } public String getLanguage ( ) { return "bean" ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } @ Override public Expression createExpression ( RouteContext routeContext ) { return new BeanExpression ( beanName ( ) , getMethod ( ) ) ; } @ Override public Predicate < Exchange > createPredicate ( RouteContext routeContext ) { return new BeanExpression < Exchange > ( beanName ( ) , getMethod ( ) ) ; } protected String beanName ( ) { if ( bean != null ) { return bean ; } return getExpression ( ) ; } } 	1
package org . apache . camel . converter . stream ; import java . io . IOException ; import org . apache . camel . processor . interceptor . StreamCachingInterceptor ; public interface StreamCache { void reset ( ) ; } 	0
package org . apache . camel . impl ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . spi . ExceptionHandler ; public abstract class PollingConsumerSupport < E extends Exchange > extends ServiceSupport implements PollingConsumer < E > { private final Endpoint < E > endpoint ; private ExceptionHandler exceptionHandler ; public PollingConsumerSupport ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } @ Override public String toString ( ) { return "PullConsumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void handleException ( Throwable t ) { getExceptionHandler ( ) . handleException ( t ) ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "finally" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FinallyType extends OutputType < ProcessorType > implements Block { @ Override public String toString ( ) { return "Finally[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "finally" ; } @ Override public String getLabel ( ) { return "" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return routeContext . createProcessor ( this ) ; } } 	0
package org . apache . camel . processor . aggregate ; import java . util . AbstractCollection ; import java . util . Collection ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultAggregationCollection extends AbstractCollection < Exchange > implements AggregationCollection { private static final transient Log LOG = LogFactory . getLog ( DefaultAggregationCollection . class ) ; private Expression < Exchange > correlationExpression ; private AggregationStrategy aggregationStrategy ; private Map < Object , Exchange > map = new LinkedHashMap < Object , Exchange > ( ) ; public DefaultAggregationCollection ( ) { } public DefaultAggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy ) { this . correlationExpression = correlationExpression ; this . aggregationStrategy = aggregationStrategy ; } protected Map < Object , Exchange > getMap ( ) { return map ; } @ Override public boolean add ( Exchange exchange ) { Object correlationKey = correlationExpression . evaluate ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "evaluated expression: " + correlationExpression + " as CorrelationKey: " + correlationKey ) ; } Exchange oldExchange = map . get ( correlationKey ) ; Exchange newExchange = exchange ; if ( oldExchange != null ) { Integer count = oldExchange . getProperty ( Exchange . AGGREGATED_COUNT , Integer . class ) ; if ( count == null ) { count = 1 ; } count ++ ; newExchange = aggregationStrategy . aggregate ( oldExchange , newExchange ) ; newExchange . setProperty ( Exchange . AGGREGATED_COUNT , count ) ; } if ( newExchange != oldExchange ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "put exchange:" + newExchange + " for key:" + correlationKey ) ; } if ( oldExchange == null ) { newExchange . setProperty ( Exchange . AGGREGATED_COUNT , Integer . valueOf ( 1 ) ) ; } map . put ( correlationKey , newExchange ) ; } onAggregation ( correlationKey , newExchange ) ; return true ; } public Iterator < Exchange > iterator ( ) { return map . values ( ) . iterator ( ) ; } public int size ( ) { return map . size ( ) ; } @ Override public void clear ( ) { map . clear ( ) ; } public void onAggregation ( Object correlationKey , Exchange newExchange ) { } public Expression < Exchange > getCorrelationExpression ( ) { return correlationExpression ; } public void setCorrelationExpression ( Expression < Exchange > correlationExpression ) { this . correlationExpression = correlationExpression ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . model . language . ExpressionType ; @ XmlRootElement ( name = "serviceActivation" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ServiceActivationType { @ XmlAttribute private String group = "default" ; @ XmlElementRef private List < ExpressionType > uris = new ArrayList < ExpressionType > ( ) ; public String getGroup ( ) { return group ; } public void setGroup ( String group ) { this . group = group ; } public List < ExpressionType > getUris ( ) { return uris ; } public void setUris ( List < ExpressionType > uris ) { this . uris = uris ; } } 	0
package org . apache . camel . management ; import java . net . InetAddress ; import java . net . UnknownHostException ; import javax . management . MalformedObjectNameException ; import javax . management . ObjectName ; import org . apache . camel . CamelContext ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . RouteContext ; public class CamelNamingStrategy { public static final String VALUE_UNKNOWN = "unknown" ; public static final String KEY_NAME = "name" ; public static final String KEY_TYPE = "type" ; public static final String KEY_CONTEXT = "context" ; public static final String KEY_GROUP = "group" ; public static final String KEY_ROUTE = "route" ; public static final String KEY_NODE_ID = "nodeid" ; public static final String TYPE_CONTEXT = "context" ; public static final String TYPE_ENDPOINT = "endpoints" ; public static final String TYPE_PROCESSOR = "processors" ; public static final String TYPE_CONSUMER = "consumers" ; public static final String TYPE_ROUTE = "routes" ; protected String domainName ; protected String hostName = "locahost" ; public CamelNamingStrategy ( ) { this ( "org.apache.camel" ) ; } public CamelNamingStrategy ( String domainName ) { if ( domainName != null ) { this . domainName = domainName ; } try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException ex ) { } } public ObjectName getObjectName ( CamelContext context ) throws MalformedObjectNameException { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( getContextId ( context ) ) . append ( "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( "context" ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( ManagedEndpoint mbean ) throws MalformedObjectNameException { Endpoint < ? extends Exchange > ep = mbean . getEndpoint ( ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( getContextId ( ep . getCamelContext ( ) ) ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_ENDPOINT + "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( ObjectName . quote ( getEndpointId ( ep ) ) ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( CamelContext context , ManagedService mbean ) throws MalformedObjectNameException { String serviceBranch ; Service service = mbean . getService ( ) ; if ( service instanceof Consumer ) { serviceBranch = TYPE_CONSUMER ; } else { return null ; } StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( getContextId ( context ) ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + serviceBranch + "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( service . getClass ( ) . getSimpleName ( ) ) . append ( "(0x" ) . append ( Integer . toHexString ( mbean . getService ( ) . hashCode ( ) ) ) . append ( ")" ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( ManagedRoute mbean ) throws MalformedObjectNameException { Route < ? extends Exchange > route = mbean . getRoute ( ) ; Endpoint < ? extends Exchange > ep = route . getEndpoint ( ) ; String id = ( String ) route . getProperties ( ) . get ( Route . ID_PROPERTY ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( getContextId ( ep . getCamelContext ( ) ) ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_ROUTE + "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( ObjectName . quote ( id == null ? ( "0x" + Integer . toHexString ( route . hashCode ( ) ) ) : id ) ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( RouteContext routeContext , ProcessorType processor ) throws MalformedObjectNameException { Endpoint < ? extends Exchange > ep = routeContext . getEndpoint ( ) ; String ctxid = ep != null ? getContextId ( ep . getCamelContext ( ) ) : VALUE_UNKNOWN ; String cid = ObjectName . quote ( ep . getEndpointUri ( ) ) ; String nodeId = processor . idOrCreate ( ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName ) . append ( ":" ) ; buffer . append ( KEY_CONTEXT + "=" ) . append ( ctxid ) . append ( "," ) ; buffer . append ( KEY_TYPE + "=" + TYPE_PROCESSOR + "," ) ; buffer . append ( KEY_NODE_ID + "=" ) . append ( nodeId ) . append ( "," ) ; buffer . append ( KEY_NAME + "=" ) . append ( ObjectName . quote ( processor . toString ( ) ) ) ; return createObjectName ( buffer ) ; } public String getDomainName ( ) { return domainName ; } public void setDomainName ( String domainName ) { this . domainName = domainName ; } public String getHostName ( ) { return hostName ; } public void setHostName ( String hostName ) { this . hostName = hostName ; } protected String getContextId ( CamelContext context ) { return hostName + "/" + ( context != null ? context . getName ( ) : VALUE_UNKNOWN ) ; } protected String getEndpointId ( Endpoint < ? extends Exchange > ep ) { String uri = ep . getEndpointUri ( ) ; int pos = uri . indexOf ( '?' ) ; String id = ( pos == - 1 ) ? uri : uri . substring ( 0 , pos ) ; id += "?id=0x" + Integer . toHexString ( ep . hashCode ( ) ) ; return id ; } protected ObjectName createObjectName ( StringBuffer buffer ) throws MalformedObjectNameException { String text = buffer . toString ( ) ; try { return new ObjectName ( text ) ; } catch ( MalformedObjectNameException e ) { throw new MalformedObjectNameException ( "Could not create ObjectName from: " + text + ". Reason: " + e ) ; } } } 	1
package org . apache . camel . converter . jaxb ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAnyElement ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "exchange" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class ExchangeType { @ XmlElement ( name = "property" , required = false ) List < PropertyType > properties = new ArrayList < PropertyType > ( ) ; @ XmlAnyElement ( lax = true ) private Object body ; public Object getBody ( ) { return body ; } public void setBody ( Object body ) { this . body = body ; } public List < PropertyType > getProperties ( ) { return properties ; } public void setProperties ( List < PropertyType > properties ) { this . properties = properties ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . util . AsyncProcessorHelper ; public class HandleFaultProcessor extends DelegateProcessor implements AsyncProcessor { @ Override public String toString ( ) { return "HandleFaultProcessor(" + processor + ")" ; } @ Override public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( processor == null ) { callback . done ( true ) ; return true ; } if ( processor instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) processor ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { Message faultMessage = exchange . getFault ( false ) ; if ( faultMessage != null ) { final Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { faultMessage . setBody ( null ) ; if ( faultBody instanceof Throwable ) { exchange . setException ( ( Throwable ) faultBody ) ; } else { if ( exchange . getException ( ) == null ) { exchange . setException ( new CamelException ( "Message contains fault of type " + faultBody . getClass ( ) . getName ( ) + ":\n" + faultBody ) ) ; } } } } callback . done ( doneSynchronously ) ; } } ) ; } try { processor . process ( exchange ) ; } catch ( Throwable e ) { exchange . setException ( e ) ; } final Message faultMessage = exchange . getFault ( false ) ; if ( faultMessage != null ) { final Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { faultMessage . setBody ( null ) ; if ( faultBody instanceof Throwable ) { exchange . setException ( ( Throwable ) faultBody ) ; } else { if ( exchange . getException ( ) == null ) { exchange . setException ( new CamelException ( "Message contains fault of type " + faultBody . getClass ( ) . getName ( ) + ":\n" + faultBody ) ) ; } } } } callback . done ( true ) ; return true ; } } 	1
package org . apache . camel . component . mail ; import javax . mail . Message ; import org . apache . camel . Consumer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . springframework . mail . javamail . JavaMailSender ; import org . springframework . mail . javamail . JavaMailSenderImpl ; public class MailEndpoint extends ScheduledPollEndpoint < MailExchange > { private MailBinding binding ; private MailConfiguration configuration ; public MailEndpoint ( String uri , MailComponent component , MailConfiguration configuration ) { super ( uri , component ) ; this . configuration = configuration ; this . binding = new MailBinding ( component . getHeaderFilterStrategy ( ) ) ; } public MailEndpoint ( String endpointUri , MailConfiguration configuration ) { super ( endpointUri ) ; this . configuration = configuration ; } public MailEndpoint ( String endpointUri ) { this ( endpointUri , new MailConfiguration ( ) ) ; } public Producer < MailExchange > createProducer ( ) throws Exception { JavaMailSender sender = configuration . createJavaMailSender ( ) ; return createProducer ( sender ) ; } public Producer < MailExchange > createProducer ( JavaMailSender sender ) throws Exception { return new MailProducer ( this , sender ) ; } public Consumer < MailExchange > createConsumer ( Processor processor ) throws Exception { if ( configuration . getProtocol ( ) . startsWith ( "smtp" ) ) { throw new IllegalArgumentException ( "Protocol " + configuration . getProtocol ( ) + " can not be used for a MailConsumer. Please use another protocol such as pop3 or imap." ) ; } JavaMailSenderImpl sender = configuration . createJavaMailSender ( ) ; return createConsumer ( processor , sender ) ; } public Consumer < MailExchange > createConsumer ( Processor processor , JavaMailSenderImpl sender ) throws Exception { MailConsumer answer = new MailConsumer ( this , processor , sender ) ; answer . setDelay ( MailConsumer . DEFAULT_CONSUMER_DELAY ) ; configureConsumer ( answer ) ; return answer ; } @ Override public MailExchange createExchange ( ExchangePattern pattern ) { return new MailExchange ( getCamelContext ( ) , pattern , getBinding ( ) ) ; } public MailExchange createExchange ( Message message ) { return new MailExchange ( getCamelContext ( ) , getExchangePattern ( ) , getBinding ( ) , message ) ; } public MailBinding getBinding ( ) { if ( binding == null ) { binding = new MailBinding ( ) ; } return binding ; } public void setBinding ( MailBinding binding ) { this . binding = binding ; } public boolean isSingleton ( ) { return false ; } public MailConfiguration getConfiguration ( ) { return configuration ; } } 	0
package org . apache . camel ; import org . apache . camel . spi . Registry ; public class NoSuchBeanException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String name ; public NoSuchBeanException ( String name ) { super ( "No bean could be found in the registry for: " + name ) ; this . name = name ; } public String getName ( ) { return name ; } } 	1
package org . apache . camel . spring . handler ; import org . w3c . dom . Attr ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . xml . AbstractSingleBeanDefinitionParser ; import org . springframework . core . Conventions ; import org . springframework . util . Assert ; import org . springframework . util . StringUtils ; public class BeanDefinitionParser extends AbstractSingleBeanDefinitionParser { private Class type ; protected BeanDefinitionParser ( ) { } public BeanDefinitionParser ( Class type ) { this . type = type ; } protected Class getBeanClass ( Element element ) { if ( type == null ) { type = loadType ( ) ; } return type ; } protected Class loadType ( ) { throw new IllegalArgumentException ( "No type specified!" ) ; } protected boolean isEligibleAttribute ( String attributeName ) { return attributeName != null && ! ID_ATTRIBUTE . equals ( attributeName ) && ! attributeName . equals ( "xmlns" ) && ! attributeName . startsWith ( "xmlns:" ) ; } protected final void doParse ( Element element , BeanDefinitionBuilder builder ) { NamedNodeMap attributes = element . getAttributes ( ) ; for ( int x = 0 ; x < attributes . getLength ( ) ; x ++ ) { Attr attribute = ( Attr ) attributes . item ( x ) ; String name = attribute . getLocalName ( ) ; String fullName = attribute . getName ( ) ; if ( ! fullName . startsWith ( "xmlns:" ) && ! fullName . equals ( "xmlns" ) && isEligibleAttribute ( name ) ) { String propertyName = extractPropertyName ( name ) ; Assert . state ( StringUtils . hasText ( propertyName ) , "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty." ) ; builder . addPropertyValue ( propertyName , attribute . getValue ( ) ) ; } } postProcess ( builder , element ) ; } protected String extractPropertyName ( String attributeName ) { return Conventions . attributeNameToPropertyName ( attributeName ) ; } protected void postProcess ( BeanDefinitionBuilder beanDefinition , Element element ) { } } 	0
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor { protected AsyncProcessor processor ; public DelegateAsyncProcessor ( ) { } public DelegateAsyncProcessor ( AsyncProcessor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "DelegateAsync(" + processor + ")" ; } public AsyncProcessor getProcessor ( ) { return processor ; } public void setProcessor ( AsyncProcessor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . IOException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . commons . net . ftp . FTPClient ; public final class FtpUtils { private static final transient Log LOG = LogFactory . getLog ( FtpUtils . class ) ; private FtpUtils ( ) { } public static boolean connect ( FTPClient client , RemoteFileConfiguration config ) throws IOException { String host = config . getHost ( ) ; int port = config . getPort ( ) ; String username = config . getUsername ( ) ; if ( config . getFtpClientConfig ( ) != null ) { LOG . trace ( "Configuring FTPClient with config: " + config . getFtpClientConfig ( ) ) ; client . configure ( config . getFtpClientConfig ( ) ) ; } LOG . trace ( "Connecting to " + config ) ; client . connect ( host , port ) ; if ( config . isPassiveMode ( ) ) { LOG . trace ( "Using passive mode connections" ) ; client . enterLocalPassiveMode ( ) ; } boolean login ; if ( username != null ) { LOG . trace ( "Attempting to login user: " + username ) ; login = client . login ( username , config . getPassword ( ) ) ; } else { LOG . trace ( "Attempting to login anonymous" ) ; login = client . login ( "anonymous" , null ) ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "User " + ( username != null ? username : "anonymous" ) + " logged in: " + login ) ; } if ( ! login ) { return false ; } client . setFileType ( config . isBinary ( ) ? FTPClient . BINARY_FILE_TYPE : FTPClient . ASCII_FILE_TYPE ) ; return true ; } public static void disconnect ( FTPClient client ) throws IOException { if ( client . isConnected ( ) ) { client . disconnect ( ) ; } } public static FTPClient createNewFtpClient ( ) { return new FTPClient ( ) ; } public static boolean buildDirectory ( FTPClient ftpClient , String dirName ) throws IOException { String originalDirectory = ftpClient . printWorkingDirectory ( ) ; boolean success = false ; try { success = ftpClient . changeWorkingDirectory ( dirName ) ; if ( ! success ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Trying to build remote directory: " + dirName ) ; } success = ftpClient . makeDirectory ( dirName ) ; if ( ! success ) { buildDirectoryChunks ( ftpClient , dirName ) ; } } } finally { ftpClient . changeWorkingDirectory ( originalDirectory ) ; } return success ; } public static boolean buildDirectoryChunks ( FTPClient ftpClient , String dirName ) throws IOException { final StringBuilder sb = new StringBuilder ( dirName . length ( ) ) ; final String [ ] dirs = dirName . split ( "\\/" ) ; boolean success = false ; for ( String dir : dirs ) { sb . append ( dir ) . append ( '/' ) ; String directory = sb . toString ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Trying to build remote directory: " + directory ) ; } success = ftpClient . makeDirectory ( directory ) ; } return success ; } } 	0
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelException ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . DataFormatClause ; import org . apache . camel . builder . DeadLetterChannelBuilder ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . ErrorHandlerBuilderRef ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . builder . NoErrorHandlerBuilder ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . language . ConstantExpression ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . LanguageExpression ; import org . apache . camel . processor . ConvertBodyProcessor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . ErrorHandlerWrappingStrategy ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlAccessorType ( XmlAccessType . PROPERTY ) public abstract class ProcessorType < Type extends ProcessorType > extends OptionalIdentifiedType < Type > implements Block { public static final String DEFAULT_TRACE_CATEGORY = "org.apache.camel.TRACE" ; private static final transient Log LOG = LogFactory . getLog ( ProcessorType . class ) ; private ErrorHandlerBuilder errorHandlerBuilder ; private Boolean inheritErrorHandlerFlag ; private NodeFactory nodeFactory ; private LinkedList < Block > blocks = new LinkedList < Block > ( ) ; private ProcessorType < ? extends ProcessorType > parent ; private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; private String errorHandlerRef ; public abstract List < ProcessorType < ? > > getOutputs ( ) ; public Processor createProcessor ( RouteContext routeContext ) throws Exception { throw new UnsupportedOperationException ( "Not implemented yet for class: " + getClass ( ) . getName ( ) ) ; } public Processor createOutputsProcessor ( RouteContext routeContext ) throws Exception { Collection < ProcessorType < ? > > outputs = getOutputs ( ) ; return createOutputsProcessor ( routeContext , outputs ) ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Processor processor = makeProcessor ( routeContext ) ; if ( ! routeContext . isRouteAdded ( ) ) { routeContext . addEventDrivenProcessor ( processor ) ; } } public Processor wrapProcessor ( RouteContext routeContext , Processor processor ) throws Exception { processor = wrapProcessorInInterceptors ( routeContext , processor ) ; return wrapInErrorHandler ( routeContext , processor ) ; } public Type to ( String uri ) { addOutput ( new ToType ( uri ) ) ; return ( Type ) this ; } public Type to ( Endpoint endpoint ) { addOutput ( new ToType ( endpoint ) ) ; return ( Type ) this ; } public Type to ( ExchangePattern pattern , String uri ) { addOutput ( new ToType ( uri , pattern ) ) ; return ( Type ) this ; } public Type to ( ExchangePattern pattern , Endpoint endpoint ) { addOutput ( new ToType ( endpoint , pattern ) ) ; return ( Type ) this ; } public Type to ( String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri ) ) ; } return ( Type ) this ; } public Type to ( Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( Iterable < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( ExchangePattern pattern , String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri , pattern ) ) ; } return ( Type ) this ; } public Type to ( ExchangePattern pattern , Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint , pattern ) ) ; } return ( Type ) this ; } public Type to ( ExchangePattern pattern , Iterable < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint , pattern ) ) ; } return ( Type ) this ; } public Type setExchangePattern ( ExchangePattern exchangePattern ) { addOutput ( new SetExchangePatternType ( exchangePattern ) ) ; return ( Type ) this ; } public Type inOnly ( ) { return setExchangePattern ( ExchangePattern . InOnly ) ; } public Type inOnly ( String uri ) { return to ( ExchangePattern . InOnly , uri ) ; } public Type inOnly ( Endpoint endpoint ) { return to ( ExchangePattern . InOnly , endpoint ) ; } public Type inOnly ( String ... uris ) { return to ( ExchangePattern . InOnly , uris ) ; } public Type inOnly ( Endpoint ... endpoints ) { return to ( ExchangePattern . InOnly , endpoints ) ; } public Type inOnly ( Iterable < Endpoint > endpoints ) { return to ( ExchangePattern . InOnly , endpoints ) ; } public Type inOut ( ) { return setExchangePattern ( ExchangePattern . InOut ) ; } public Type inOut ( String uri ) { return to ( ExchangePattern . InOut , uri ) ; } public Type inOut ( Endpoint endpoint ) { return to ( ExchangePattern . InOut , endpoint ) ; } public Type inOut ( String ... uris ) { return to ( ExchangePattern . InOut , uris ) ; } public Type inOut ( Endpoint ... endpoints ) { return to ( ExchangePattern . InOut , endpoints ) ; } public Type inOut ( Iterable < Endpoint > endpoints ) { return to ( ExchangePattern . InOut , endpoints ) ; } public MulticastType multicast ( ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public MulticastType multicast ( AggregationStrategy aggregationStrategy ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public Type pipeline ( String ... uris ) { return to ( uris ) ; } public Type pipeline ( Endpoint ... endpoints ) { return to ( endpoints ) ; } public Type pipeline ( Collection < Endpoint > endpoints ) { return to ( endpoints ) ; } public ProcessorType < ? extends ProcessorType > end ( ) { if ( blocks . isEmpty ( ) ) { if ( parent == null ) { throw new IllegalArgumentException ( "Root node with no active block" ) ; } return parent ; } popBlock ( ) ; return this ; } public ThreadType thread ( int coreSize ) { ThreadType answer = new ThreadType ( coreSize ) ; addOutput ( answer ) ; return answer ; } public ProcessorType < Type > thread ( ThreadPoolExecutor executor ) { ThreadType answer = new ThreadType ( executor ) ; addOutput ( answer ) ; return this ; } public IdempotentConsumerType idempotentConsumer ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( messageIdExpression , messageIdRepository ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < IdempotentConsumerType > idempotentConsumer ( MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( ) ; answer . setMessageIdRepository ( messageIdRepository ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < FilterType > filter ( ) { FilterType filter = new FilterType ( ) ; addOutput ( filter ) ; return ExpressionClause . createAndSetExpression ( filter ) ; } public FilterType filter ( Predicate predicate ) { FilterType filter = new FilterType ( predicate ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( ExpressionType expression ) { FilterType filter = getNodeFactory ( ) . createFilter ( ) ; filter . setExpression ( expression ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( String language , String expression ) { return filter ( new LanguageExpression ( language , expression ) ) ; } public LoadBalanceType loadBalance ( ) { LoadBalanceType answer = new LoadBalanceType ( ) ; addOutput ( answer ) ; return answer ; } public ChoiceType choice ( ) { ChoiceType answer = new ChoiceType ( ) ; addOutput ( answer ) ; return answer ; } public TryType tryBlock ( ) { TryType answer = new TryType ( ) ; addOutput ( answer ) ; return answer ; } public Type recipientList ( Expression recipients ) { RecipientListType answer = new RecipientListType ( recipients ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > recipientList ( ) { RecipientListType answer = new RecipientListType ( ) ; addOutput ( answer ) ; ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; answer . setExpression ( clause ) ; return clause ; } public Type routingSlip ( String header , String uriDelimiter ) { RoutingSlipType answer = new RoutingSlipType ( header , uriDelimiter ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( String header ) { RoutingSlipType answer = new RoutingSlipType ( header ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type routingSlip ( ) { RoutingSlipType answer = new RoutingSlipType ( ) ; addOutput ( answer ) ; return ( Type ) this ; } public SplitterType splitter ( Expression recipients ) { SplitterType answer = new SplitterType ( recipients ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression recipients , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( recipients ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public SplitterType splitter ( Expression recipients , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { SplitterType answer = new SplitterType ( recipients ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; answer . setThreadPoolExecutor ( threadPoolExecutor ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < SplitterType > splitter ( boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setParallelProcessing ( parallelProcessing ) ; answer . setThreadPoolExecutor ( threadPoolExecutor ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return answer ; } public SplitterType splitter ( Expression partsExpression , AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { SplitterType answer = new SplitterType ( partsExpression ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; answer . setThreadPoolExecutor ( threadPoolExecutor ) ; return answer ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy , boolean parallelProcessing ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < SplitterType > splitter ( AggregationStrategy aggregationStrategy , boolean parallelProcessing , ThreadPoolExecutor threadPoolExecutor ) { SplitterType answer = new SplitterType ( ) ; addOutput ( answer ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; answer . setParallelProcessing ( parallelProcessing ) ; answer . setThreadPoolExecutor ( threadPoolExecutor ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < ResequencerType > resequencer ( ) { ResequencerType answer = new ResequencerType ( ) ; addOutput ( answer ) ; ExpressionClause < ResequencerType > clause = new ExpressionClause < ResequencerType > ( answer ) ; answer . expression ( clause ) ; return clause ; } public ResequencerType resequencer ( Expression < Exchange > expression ) { return resequencer ( Collections . < Expression > singletonList ( expression ) ) ; } public ResequencerType resequencer ( List < Expression > expressions ) { ResequencerType answer = new ResequencerType ( expressions ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression ... expressions ) { List < Expression > list = new ArrayList < Expression > ( ) ; list . addAll ( Arrays . asList ( expressions ) ) ; return resequencer ( list ) ; } public ExpressionClause < AggregatorType > aggregator ( ) { AggregatorType answer = new AggregatorType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public ExpressionClause < AggregatorType > aggregator ( AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationStrategy ( aggregationStrategy ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public AggregatorType aggregator ( AggregationCollection aggregationCollection ) { AggregatorType answer = new AggregatorType ( ) ; answer . setAggregationCollection ( aggregationCollection ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression ) { AggregatorType answer = new AggregatorType ( correlationExpression ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( correlationExpression , aggregationStrategy ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( Expression < Exchange > processAtExpression ) { return delayer ( processAtExpression , 0L ) ; } public DelayerType delayer ( Expression < Exchange > processAtExpression , long delay ) { DelayerType answer = new DelayerType ( processAtExpression , delay ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < DelayerType > delayer ( ) { DelayerType answer = new DelayerType ( ) ; addOutput ( answer ) ; return ExpressionClause . createAndSetExpression ( answer ) ; } public DelayerType delayer ( long delay ) { return delayer ( null , delay ) ; } public ThrottlerType throttler ( long maximumRequestCount ) { ThrottlerType answer = new ThrottlerType ( maximumRequestCount ) ; addOutput ( answer ) ; return answer ; } public ExpressionClause < LoopType > loop ( ) { LoopType loop = new LoopType ( ) ; addOutput ( loop ) ; return ExpressionClause . createAndSetExpression ( loop ) ; } public LoopType loop ( Expression < ? > expression ) { LoopType loop = getNodeFactory ( ) . createLoop ( ) ; loop . setExpression ( expression ) ; addOutput ( loop ) ; return loop ; } public LoopType loop ( int count ) { LoopType loop = getNodeFactory ( ) . createLoop ( ) ; loop . setExpression ( new ConstantExpression ( Integer . toString ( count ) ) ) ; addOutput ( loop ) ; return loop ; } public Type throwFault ( Throwable fault ) { ThrowFaultType answer = new ThrowFaultType ( ) ; answer . setFault ( fault ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type throwFault ( String message ) { return throwFault ( new CamelException ( message ) ) ; } public Type interceptor ( String ref ) { InterceptorRef interceptor = new InterceptorRef ( ref ) ; intercept ( interceptor ) ; return ( Type ) this ; } public Type intercept ( DelegateProcessor interceptor ) { intercept ( new InterceptorRef ( interceptor ) ) ; return ( Type ) this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer ; } public void intercept ( InterceptorType interceptor ) { addOutput ( interceptor ) ; pushBlock ( interceptor ) ; } public void addInterceptor ( InterceptorType interceptor ) { interceptors . add ( interceptor ) ; } public void addInterceptor ( DelegateProcessor interceptor ) { addInterceptor ( new InterceptorRef ( interceptor ) ) ; } public void pushBlock ( Block block ) { blocks . add ( block ) ; } public Block popBlock ( ) { return blocks . isEmpty ( ) ? null : blocks . removeLast ( ) ; } public Type proceed ( ) { ProceedType proceed = null ; ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { proceed = ( ( InterceptType ) currentProcessor ) . getProceed ( ) ; LOG . info ( "proceed() is the implied and hence not needed for an intercept()" ) ; } if ( proceed == null ) { for ( ProcessorType node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { InterceptType intercept = ( InterceptType ) node ; proceed = intercept . getProceed ( ) ; break ; } } if ( proceed == null ) { throw new IllegalArgumentException ( "Cannot use proceed() without being within an intercept() block" ) ; } } addOutput ( proceed ) ; return ( Type ) this ; } public Type stop ( ) { ProcessorType currentProcessor = this ; if ( currentProcessor instanceof InterceptType ) { ( ( InterceptType ) currentProcessor ) . stopIntercept ( ) ; } else { ProcessorType node ; for ( node = parent ; node != null ; node = node . getParent ( ) ) { if ( node instanceof InterceptType ) { ( ( InterceptType ) node ) . stopIntercept ( ) ; break ; } } if ( node == null ) { throw new IllegalArgumentException ( "Cannot use stop() without being within an intercept() block" ) ; } } return ( Type ) this ; } public ExceptionType exception ( Class exceptionType ) { return onException ( exceptionType ) ; } public ExceptionType onException ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public ChoiceType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer . when ( predicate ) ; } public Type interceptors ( String ... refs ) { for ( String ref : refs ) { interceptor ( ref ) ; } return ( Type ) this ; } public Type trace ( ) { return trace ( DEFAULT_TRACE_CATEGORY ) ; } public Type trace ( String category ) { final Log log = LogFactory . getLog ( category ) ; return intercept ( new DelegateProcessor ( ) { @ Override public void process ( Exchange exchange ) throws Exception { log . trace ( exchange ) ; processNext ( exchange ) ; } } ) ; } public PolicyRef policies ( ) { PolicyRef answer = new PolicyRef ( ) ; addOutput ( answer ) ; return answer ; } public PolicyRef policy ( Policy policy ) { PolicyRef answer = new PolicyRef ( policy ) ; addOutput ( answer ) ; return answer ; } public Type handleFault ( ) { intercept ( new HandleFaultType ( ) ) ; return ( Type ) this ; } public Type errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return ( Type ) this ; } public Type inheritErrorHandler ( boolean condition ) { setInheritErrorHandlerFlag ( condition ) ; return ( Type ) this ; } public Type process ( Processor processor ) { ProcessorRef answer = new ProcessorRef ( processor ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type processRef ( String ref ) { ProcessorRef answer = new ProcessorRef ( ) ; answer . setRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref ) { BeanRef answer = new BeanRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref , String method ) { BeanRef answer = new BeanRef ( ref , method ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setBody ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetBodyType answer = new SetBodyType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setBody ( Expression expression ) { SetBodyType answer = new SetBodyType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } @ Deprecated public Type setOutBody ( Expression expression ) { return transform ( expression ) ; } @ Deprecated public ExpressionClause < ProcessorType < Type > > setOutBody ( ) { return transform ( ) ; } public Type transform ( Expression expression ) { TransformType answer = new TransformType ( expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > transform ( ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; TransformType answer = new TransformType ( clause ) ; addOutput ( answer ) ; return clause ; } public Type setFaultBody ( Expression expression ) { return process ( ProcessorBuilder . setFaultBody ( expression ) ) ; } public ExpressionClause < ProcessorType < Type > > setHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetHeaderType answer = new SetHeaderType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type setHeader ( String name , Expression expression ) { SetHeaderType answer = new SetHeaderType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setHeader ( String name , String value ) { SetHeaderType answer = new SetHeaderType ( name , value ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setOutHeader ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetOutHeaderType answer = new SetOutHeaderType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type setOutHeader ( String name , Expression expression ) { SetOutHeaderType answer = new SetOutHeaderType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setFaultHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setFaultHeader ( name , expression ) ) ; } public Type setProperty ( String name , Expression expression ) { SetPropertyType answer = new SetPropertyType ( name , expression ) ; addOutput ( answer ) ; return ( Type ) this ; } public ExpressionClause < ProcessorType < Type > > setProperty ( String name ) { ExpressionClause < ProcessorType < Type > > clause = new ExpressionClause < ProcessorType < Type > > ( ( Type ) this ) ; SetPropertyType answer = new SetPropertyType ( name , clause ) ; addOutput ( answer ) ; return clause ; } public Type removeHeader ( String name ) { RemoveHeaderType answer = new RemoveHeaderType ( name ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type removeFaultHeader ( String name ) { return process ( ProcessorBuilder . removeFaultHeader ( name ) ) ; } public Type removeProperty ( String name ) { RemovePropertyType answer = new RemovePropertyType ( name ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type convertBodyTo ( Class type ) { addOutput ( new ConvertBodyType ( type ) ) ; return ( Type ) this ; } public Type convertBodyTo ( String typeString ) { addOutput ( new ConvertBodyType ( typeString ) ) ; return ( Type ) this ; } @ Deprecated public Type convertOutBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } @ Deprecated public Type convertFaultBodyTo ( Class type ) { return process ( new ConvertBodyProcessor ( type ) ) ; } public DataFormatClause < ProcessorType < Type > > unmarshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Unmarshal ) ; } public Type unmarshal ( DataFormatType dataFormatType ) { addOutput ( new UnmarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type unmarshal ( DataFormat dataFormat ) { return unmarshal ( new DataFormatType ( dataFormat ) ) ; } public Type unmarshal ( String dataTypeRef ) { addOutput ( new UnmarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } public DataFormatClause < ProcessorType < Type > > marshal ( ) { return new DataFormatClause < ProcessorType < Type > > ( this , DataFormatClause . Operation . Marshal ) ; } public Type marshal ( DataFormatType dataFormatType ) { addOutput ( new MarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type marshal ( DataFormat dataFormat ) { return marshal ( new DataFormatType ( dataFormat ) ) ; } public Type marshal ( String dataTypeRef ) { addOutput ( new MarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } @ XmlTransient public ProcessorType < ? extends ProcessorType > getParent ( ) { return parent ; } public void setParent ( ProcessorType < ? extends ProcessorType > parent ) { this . parent = parent ; } @ XmlTransient public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } protected void setErrorHandlerBuilderIfNull ( ErrorHandlerBuilder errorHandlerBuilder ) { if ( this . errorHandlerBuilder == null ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; } } public String getErrorHandlerRef ( ) { return errorHandlerRef ; } @ XmlAttribute ( required = false ) public void setErrorHandlerRef ( String errorHandlerRef ) { this . errorHandlerRef = errorHandlerRef ; setErrorHandlerBuilder ( new ErrorHandlerBuilderRef ( errorHandlerRef ) ) ; } @ XmlTransient public boolean isInheritErrorHandler ( ) { return isInheritErrorHandler ( getInheritErrorHandlerFlag ( ) ) ; } public static boolean isInheritErrorHandler ( Boolean value ) { return value == null || value . booleanValue ( ) ; } @ XmlAttribute ( name = "inheritErrorHandler" , required = false ) public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } @ XmlTransient public NodeFactory getNodeFactory ( ) { if ( nodeFactory == null ) { nodeFactory = new NodeFactory ( ) ; } return nodeFactory ; } public void setNodeFactory ( NodeFactory nodeFactory ) { this . nodeFactory = nodeFactory ; } public String getLabel ( ) { return "" ; } protected Processor makeProcessor ( RouteContext routeContext ) throws Exception { Processor processor = createProcessor ( routeContext ) ; return wrapProcessor ( routeContext , processor ) ; } protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new IllegalArgumentException ( "target not provided on node: " + this ) ; } List < InterceptStrategy > strategies = new ArrayList < InterceptStrategy > ( ) ; CamelContext camelContext = routeContext . getCamelContext ( ) ; if ( camelContext instanceof DefaultCamelContext ) { DefaultCamelContext defaultCamelContext = ( DefaultCamelContext ) camelContext ; strategies . addAll ( defaultCamelContext . getInterceptStrategies ( ) ) ; } strategies . addAll ( routeContext . getInterceptStrategies ( ) ) ; for ( InterceptStrategy strategy : strategies ) { if ( strategy != null ) { target = strategy . wrapProcessorInInterceptors ( this , target ) ; } } List < InterceptorType > list = routeContext . getRoute ( ) . getInterceptors ( ) ; if ( interceptors != null ) { list . addAll ( interceptors ) ; } Collections . reverse ( list ) ; Set < Processor > interceptors = new HashSet < Processor > ( ) ; interceptors . add ( target ) ; for ( InterceptorType interceptorType : list ) { DelegateProcessor interceptor = interceptorType . createInterceptor ( routeContext ) ; if ( ! interceptors . contains ( interceptor ) ) { interceptors . add ( interceptor ) ; if ( interceptor . getProcessor ( ) != null ) { LOG . warn ( "Interceptor " + interceptor + " currently wraps target " + interceptor . getProcessor ( ) + " is attempting to change target " + target + " new wrapping has been denied." ) ; } else { interceptor . setProcessor ( target ) ; target = interceptor ; } } } return target ; } protected Processor wrapInErrorHandler ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new IllegalArgumentException ( "target not provided on node: " + this ) ; } ErrorHandlerWrappingStrategy strategy = routeContext . getErrorHandlerWrappingStrategy ( ) ; if ( strategy != null ) { return strategy . wrapProcessorInErrorHandler ( routeContext , this , target ) ; } return getErrorHandlerBuilder ( ) . createErrorHandler ( routeContext , target ) ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( errorHandlerRef != null ) { return new ErrorHandlerBuilderRef ( errorHandlerRef ) ; } if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } protected void configureChild ( ProcessorType output ) { output . setNodeFactory ( getNodeFactory ( ) ) ; } public void addOutput ( ProcessorType processorType ) { processorType . setParent ( this ) ; configureChild ( processorType ) ; if ( blocks . isEmpty ( ) ) { getOutputs ( ) . add ( processorType ) ; } else { Block block = blocks . getLast ( ) ; block . addOutput ( processorType ) ; } } protected Processor createCompositeProcessor ( RouteContext routeContext , List < Processor > list ) { return new Pipeline ( list ) ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { List < Processor > list = new ArrayList < Processor > ( ) ; for ( ProcessorType output : outputs ) { Processor processor = output . createProcessor ( routeContext ) ; if ( output instanceof ProceedType && processor == null ) { continue ; } processor = output . wrapProcessorInInterceptors ( routeContext , processor ) ; ProcessorType currentProcessor = this ; if ( ! ( currentProcessor instanceof ExceptionType || currentProcessor instanceof TryType ) ) { processor = output . wrapInErrorHandler ( routeContext , processor ) ; } list . add ( processor ) ; } Processor processor = null ; if ( ! list . isEmpty ( ) ) { if ( list . size ( ) == 1 ) { processor = list . get ( 0 ) ; } else { processor = createCompositeProcessor ( routeContext , list ) ; } } return processor ; } public void clearOutput ( ) { getOutputs ( ) . clear ( ) ; blocks . clear ( ) ; } } 	1
package org . apache . camel . component . cxf ; import org . apache . camel . impl . DefaultHeaderFilterStrategy ; public class CxfHeaderFilterStrategy extends DefaultHeaderFilterStrategy { public CxfHeaderFilterStrategy ( ) { initialize ( ) ; } protected void initialize ( ) { getOutFilter ( ) . add ( CxfConstants . OPERATION_NAME ) ; getOutFilter ( ) . add ( CxfConstants . OPERATION_NAMESPACE ) ; } } 	0
package org . apache . camel . impl ; import java . util . concurrent . ScheduledExecutorService ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; public class DefaultScheduledPollConsumer < E extends Exchange > extends ScheduledPollConsumer < E > { private PollingConsumer < E > pollingConsumer ; public DefaultScheduledPollConsumer ( DefaultEndpoint < E > defaultEndpoint , Processor processor ) { super ( defaultEndpoint , processor ) ; } public DefaultScheduledPollConsumer ( Endpoint < E > endpoint , Processor processor , ScheduledExecutorService executor ) { super ( endpoint , processor , executor ) ; } protected void poll ( ) throws Exception { while ( true ) { E exchange = pollingConsumer . receiveNoWait ( ) ; if ( exchange == null ) { break ; } Message out = exchange . getOut ( false ) ; if ( out != null ) { E newExchange = getEndpoint ( ) . createExchange ( ) ; newExchange . getIn ( ) . copyFrom ( out ) ; exchange = newExchange ; } getProcessor ( ) . process ( exchange ) ; } } @ Override protected void doStart ( ) throws Exception { pollingConsumer = getEndpoint ( ) . createPollingConsumer ( ) ; super . doStart ( ) ; } @ Override protected void doStop ( ) throws Exception { super . doStop ( ) ; if ( pollingConsumer != null ) { pollingConsumer . stop ( ) ; } } } 	1
package org . apache . camel . dataformat . xstream ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . stream . XMLStreamException ; import com . thoughtworks . xstream . XStream ; import com . thoughtworks . xstream . io . HierarchicalStreamReader ; import com . thoughtworks . xstream . io . HierarchicalStreamWriter ; import org . apache . camel . Exchange ; import org . apache . camel . converter . jaxp . StaxConverter ; import org . apache . camel . spi . DataFormat ; public abstract class AbstractXStreamWrapper implements DataFormat { private XStream xstream ; private StaxConverter staxConverter ; public AbstractXStreamWrapper ( ) { } public AbstractXStreamWrapper ( XStream xstream ) { this . xstream = xstream ; } public XStream getXStream ( ) { if ( xstream == null ) { xstream = createXStream ( ) ; } return xstream ; } public void setXStream ( XStream xstream ) { this . xstream = xstream ; } protected XStream createXStream ( ) { return new XStream ( ) ; } public StaxConverter getStaxConverter ( ) { if ( staxConverter == null ) { staxConverter = new StaxConverter ( ) ; } return staxConverter ; } public void setStaxConverter ( StaxConverter staxConverter ) { this . staxConverter = staxConverter ; } public void marshal ( Exchange exchange , Object body , OutputStream stream ) throws Exception { HierarchicalStreamWriter writer = createHierarchicalStreamWriter ( exchange , body , stream ) ; try { getXStream ( ) . marshal ( body , writer ) ; } finally { writer . close ( ) ; } } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { HierarchicalStreamReader reader = createHierarchicalStreamReader ( exchange , stream ) ; try { return getXStream ( ) . unmarshal ( reader ) ; } finally { reader . close ( ) ; } } protected abstract HierarchicalStreamWriter createHierarchicalStreamWriter ( Exchange exchange , Object body , OutputStream stream ) throws XMLStreamException ; protected abstract HierarchicalStreamReader createHierarchicalStreamReader ( Exchange exchange , InputStream stream ) throws XMLStreamException ; } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; public class FilterProcessor extends DelegateProcessor { private Predicate < Exchange > predicate ; public FilterProcessor ( Predicate < Exchange > predicate , Processor processor ) { super ( processor ) ; this . predicate = predicate ; } public void process ( Exchange exchange ) throws Exception { if ( predicate . matches ( exchange ) ) { super . process ( exchange ) ; } } @ Override public String toString ( ) { return "Filter[if: " + predicate + " do: " + getProcessor ( ) + "]" ; } public Predicate < Exchange > getPredicate ( ) { return predicate ; } } 	1
package org . apache . camel . component . stringtemplate ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class StringTemplateComponent extends DefaultComponent { protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new StringTemplateEndpoint ( uri , this , remaining , parameters ) ; } } 	0
package org . apache . camel . impl ; import java . util . Hashtable ; import javax . naming . Context ; import javax . naming . InitialContext ; import javax . naming . NameNotFoundException ; import javax . naming . NamingException ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . Registry ; public class JndiRegistry implements Registry { private Context context ; public JndiRegistry ( ) { } public JndiRegistry ( Context context ) { this . context = context ; } public < T > T lookup ( String name , Class < T > type ) { Object value = lookup ( name ) ; return type . cast ( value ) ; } public Object lookup ( String name ) { try { return getContext ( ) . lookup ( name ) ; } catch ( NameNotFoundException e ) { return null ; } catch ( NamingException e ) { return null ; } } public void bind ( String s , Object o ) { try { getContext ( ) . bind ( s , o ) ; } catch ( NamingException e ) { throw new RuntimeCamelException ( e ) ; } } public void close ( ) throws NamingException { getContext ( ) . close ( ) ; } public Context getContext ( ) throws NamingException { if ( context == null ) { context = createContext ( ) ; } return context ; } public void setContext ( Context context ) { this . context = context ; } protected Context createContext ( ) throws NamingException { Hashtable properties = new Hashtable ( System . getProperties ( ) ) ; return new InitialContext ( properties ) ; } } 	1
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; import javax . xml . namespace . NamespaceContext ; import javax . xml . xpath . XPathFactory ; import org . apache . camel . spi . NamespaceAware ; public class DefaultNamespaceContext implements NamespaceContext , NamespaceAware { private final Map < String , String > map ; private final NamespaceContext parent ; public DefaultNamespaceContext ( ) { this ( XPathFactory . newInstance ( ) ) ; } public DefaultNamespaceContext ( XPathFactory factory ) { this . parent = factory . newXPath ( ) . getNamespaceContext ( ) ; this . map = new HashMap < String , String > ( ) ; } public DefaultNamespaceContext ( NamespaceContext parent , Map < String , String > map ) { this . parent = parent ; this . map = map ; } public DefaultNamespaceContext add ( String prefix , String uri ) { map . put ( prefix , uri ) ; return this ; } public String getNamespaceURI ( String prefix ) { String answer = map . get ( prefix ) ; if ( answer == null && parent != null ) { return parent . getNamespaceURI ( prefix ) ; } return answer ; } public String getPrefix ( String namespaceURI ) { for ( Iterator iter = map . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( namespaceURI . equals ( entry . getValue ( ) ) ) { return ( String ) entry . getKey ( ) ; } } if ( parent != null ) { return parent . getPrefix ( namespaceURI ) ; } return null ; } public Iterator getPrefixes ( String namespaceURI ) { Set set = new HashSet ( ) ; for ( Iterator iter = map . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( namespaceURI . equals ( entry . getValue ( ) ) ) { set . add ( entry . getKey ( ) ) ; } } if ( parent != null ) { Iterator iter = parent . getPrefixes ( namespaceURI ) ; while ( iter . hasNext ( ) ) { set . add ( iter . next ( ) ) ; } } return set . iterator ( ) ; } public void setNamespaces ( Map < String , String > namespaces ) { map . putAll ( namespaces ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . DefaultAggregationCollection ; import org . apache . camel . processor . aggregate . PredicateAggregationCollection ; public class Aggregator extends BatchProcessor { private Predicate aggregationCompletedPredicate ; public Aggregator ( Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy ) { this ( processor , new DefaultAggregationCollection ( correlationExpression , aggregationStrategy ) ) ; } public Aggregator ( Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { this ( processor , new PredicateAggregationCollection ( correlationExpression , aggregationStrategy , aggregationCompletedPredicate ) ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } public Aggregator ( Processor processor , AggregationCollection collection ) { super ( processor , collection ) ; } @ Override public String toString ( ) { return "Aggregator[to: " + getProcessor ( ) + "]" ; } } 	1
package org . apache . camel . processor . aggregate ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; public class PredicateAggregationCollection extends DefaultAggregationCollection { private Predicate aggregationCompletedPredicate ; private List < Exchange > collection = new ArrayList < Exchange > ( ) ; public PredicateAggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy , Predicate aggregationCompletedPredicate ) { super ( correlationExpression , aggregationStrategy ) ; this . aggregationCompletedPredicate = aggregationCompletedPredicate ; } @ Override public void onAggregation ( Object correlationKey , Exchange newExchange ) { if ( aggregationCompletedPredicate . matches ( newExchange ) ) { super . getMap ( ) . remove ( correlationKey ) ; collection . add ( newExchange ) ; } } @ Override public Iterator < Exchange > iterator ( ) { return collection . iterator ( ) ; } @ Override public int size ( ) { return collection . size ( ) ; } @ Override public void clear ( ) { collection . clear ( ) ; super . clear ( ) ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TransformProcessor extends DelegateProcessor implements Processor { private static final transient Log LOG = LogFactory . getLog ( TransformProcessor . class ) ; private Expression expression ; public TransformProcessor ( Expression expression ) { this . expression = expression ; } public TransformProcessor ( Expression expression , Processor childProcessor ) { super ( childProcessor ) ; this . expression = expression ; } public void process ( Exchange exchange ) throws Exception { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; exchange . getOut ( ) . getHeaders ( ) . putAll ( exchange . getIn ( ) . getHeaders ( ) ) ; super . process ( exchange ) ; } @ Override public String toString ( ) { return "transform(" + expression + "," + processor + ")" ; } } 	1
package org . apache . camel . component . mina ; import java . nio . charset . Charset ; import org . apache . mina . filter . codec . ProtocolCodecFactory ; import org . apache . mina . filter . codec . ProtocolDecoder ; import org . apache . mina . filter . codec . ProtocolEncoder ; import org . apache . mina . filter . codec . textline . LineDelimiter ; import org . apache . mina . filter . codec . textline . TextLineDecoder ; import org . apache . mina . filter . codec . textline . TextLineEncoder ; public class TextLineCodecFactory implements ProtocolCodecFactory { private ProtocolEncoder encoder ; private ProtocolDecoder decoder ; public TextLineCodecFactory ( Charset charset , LineDelimiter delimiter ) { if ( delimiter . equals ( LineDelimiter . AUTO ) ) { encoder = new TextLineEncoder ( charset ) ; } else { encoder = new TextLineEncoder ( charset , delimiter ) ; } decoder = new TextLineDecoder ( charset , delimiter ) ; } public ProtocolEncoder getEncoder ( ) throws Exception { return encoder ; } public ProtocolDecoder getDecoder ( ) throws Exception { return decoder ; } } 	0
package org . apache . camel . management ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import javax . management . JMException ; import javax . management . MalformedObjectNameException ; import javax . management . ObjectName ; import org . apache . camel . CamelContext ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . InstrumentationAgent ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationLifecycleStrategy implements LifecycleStrategy { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private InstrumentationAgent agent ; private CamelNamingStrategy namingStrategy ; private boolean initialized ; private Map < Endpoint , InstrumentationProcessor > interceptorMap = new HashMap < Endpoint , InstrumentationProcessor > ( ) ; public InstrumentationLifecycleStrategy ( ) { this ( new DefaultInstrumentationAgent ( ) ) ; } public InstrumentationLifecycleStrategy ( InstrumentationAgent agent ) { this . agent = agent ; } public InstrumentationLifecycleStrategy ( InstrumentationAgent agent , CamelContext context ) { this . agent = agent ; onContextStart ( context ) ; } public void onContextStart ( CamelContext context ) { if ( context instanceof DefaultCamelContext ) { try { initialized = true ; DefaultCamelContext dc = ( DefaultCamelContext ) context ; dc . addService ( agent ) ; namingStrategy = new CamelNamingStrategy ( agent . getMBeanObjectDomainName ( ) ) ; ManagedService ms = new ManagedService ( dc ) ; agent . register ( ms , getNamingStrategy ( ) . getObjectName ( dc ) ) ; } catch ( Exception e ) { LOG . warn ( "Could not register CamelContext MBean" , e ) ; } } } public void onEndpointAdd ( Endpoint < ? extends Exchange > endpoint ) { if ( ! initialized ) { return ; } try { ManagedEndpoint me = new ManagedEndpoint ( endpoint ) ; agent . register ( me , getNamingStrategy ( ) . getObjectName ( me ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Endpoint MBean" , e ) ; } } public void onRoutesAdd ( Collection < Route > routes ) { if ( ! initialized ) { return ; } for ( Route route : routes ) { try { ManagedRoute mr = new ManagedRoute ( route ) ; InstrumentationProcessor interceptor = interceptorMap . get ( route . getEndpoint ( ) ) ; if ( interceptor == null ) { LOG . warn ( "Instrumentation processor not found for route endpoint " + route . getEndpoint ( ) ) ; } else { interceptor . setCounter ( mr ) ; } agent . register ( mr , getNamingStrategy ( ) . getObjectName ( mr ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Route MBean" , e ) ; } } } public void onServiceAdd ( CamelContext context , Service service ) { if ( ! initialized ) { return ; } if ( service instanceof ServiceSupport && service instanceof Consumer ) { try { ManagedService ms = new ManagedService ( ( ServiceSupport ) service ) ; agent . register ( ms , getNamingStrategy ( ) . getObjectName ( context , ms ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Service MBean" , e ) ; } } } public void onRouteContextCreate ( RouteContext routeContext ) { if ( ! initialized ) { return ; } Map < ProcessorType , PerformanceCounter > counterMap = new HashMap < ProcessorType , PerformanceCounter > ( ) ; RouteType route = routeContext . getRoute ( ) ; for ( ProcessorType processor : route . getOutputs ( ) ) { ObjectName name = null ; try { name = getNamingStrategy ( ) . getObjectName ( routeContext , processor ) ; PerformanceCounter pc = new PerformanceCounter ( ) ; agent . register ( pc , name ) ; counterMap . put ( processor , pc ) ; } catch ( MalformedObjectNameException e ) { LOG . warn ( "Could not create MBean name: " + name , e ) ; } catch ( JMException e ) { LOG . warn ( "Could not register PerformanceCounter MBean: " + name , e ) ; } } routeContext . addInterceptStrategy ( new InstrumentationInterceptStrategy ( counterMap ) ) ; routeContext . setErrorHandlerWrappingStrategy ( new InstrumentationErrorHandlerWrappingStrategy ( counterMap ) ) ; RouteType routeType = routeContext . getRoute ( ) ; if ( routeType . getInputs ( ) != null && ! routeType . getInputs ( ) . isEmpty ( ) ) { if ( routeType . getInputs ( ) . size ( ) > 1 ) { LOG . warn ( "Add InstrumentationProcessor to first input only." ) ; } Endpoint endpoint = routeType . getInputs ( ) . get ( 0 ) . getEndpoint ( ) ; List < ProcessorType < ? > > exceptionHandlers = new ArrayList < ProcessorType < ? > > ( ) ; List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; for ( ProcessorType output : routeType . getOutputs ( ) ) { if ( output instanceof ExceptionType ) { exceptionHandlers . add ( output ) ; } else { outputs . add ( output ) ; } } routeType . clearOutput ( ) ; routeType . getOutputs ( ) . addAll ( exceptionHandlers ) ; InstrumentationProcessor processor = new InstrumentationProcessor ( ) ; routeType . intercept ( processor ) ; for ( ProcessorType < ? > processorType : outputs ) { routeType . addOutput ( processorType ) ; } interceptorMap . put ( endpoint , processor ) ; } } public CamelNamingStrategy getNamingStrategy ( ) { return namingStrategy ; } public void setNamingStrategy ( CamelNamingStrategy strategy ) { this . namingStrategy = strategy ; } public void setAgent ( InstrumentationAgent agent ) { this . agent = agent ; } } 	1
package org . apache . camel . bam . rules ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . bam . ProcessBuilder ; import org . apache . camel . bam . model . ActivityDefinition ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ActivityRules extends ServiceSupport { private static final transient Log LOG = LogFactory . getLog ( ActivityRules . class ) ; private int expectedMessages = 1 ; private ProcessRules processRules ; private List < TemporalRule > rules = new ArrayList < TemporalRule > ( ) ; private ActivityDefinition activityDefinition ; private String activityName ; private final org . apache . camel . bam . ProcessBuilder builder ; public ActivityRules ( ProcessBuilder builder ) { this . builder = builder ; this . processRules = builder . getProcessRules ( ) ; processRules . getActivities ( ) . add ( this ) ; } public void addRule ( TemporalRule rule ) { rules . add ( rule ) ; } public void processExpired ( ActivityState activityState ) throws Exception { for ( TemporalRule rule : rules ) { rule . processExpired ( activityState ) ; } } public void processExchange ( Exchange exchange , ProcessInstance process ) { for ( TemporalRule rule : rules ) { rule . processExchange ( exchange , process ) ; } } public ActivityDefinition getActivityDefinition ( ) { return builder . findOrCreateActivityDefinition ( activityName ) ; } public void setActivityDefinition ( ActivityDefinition activityDefinition ) { this . activityDefinition = activityDefinition ; } public int getExpectedMessages ( ) { return expectedMessages ; } public void setExpectedMessages ( int expectedMessages ) { this . expectedMessages = expectedMessages ; } public ProcessRules getProcessRules ( ) { return processRules ; } public void setActivityName ( String activityName ) { this . activityName = activityName ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( rules ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( rules ) ; } } 	0
package org . apache . camel . management ; import java . io . IOException ; import java . lang . management . ManagementFactory ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . rmi . RemoteException ; import java . rmi . registry . LocateRegistry ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import javax . management . JMException ; import javax . management . MBeanServer ; import javax . management . MBeanServerFactory ; import javax . management . NotCompliantMBeanException ; import javax . management . ObjectInstance ; import javax . management . ObjectName ; import javax . management . modelmbean . InvalidTargetObjectTypeException ; import javax . management . modelmbean . ModelMBeanInfo ; import javax . management . modelmbean . RequiredModelMBean ; import javax . management . remote . JMXConnectorServer ; import javax . management . remote . JMXConnectorServerFactory ; import javax . management . remote . JMXServiceURL ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . InstrumentationAgent ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . jmx . export . annotation . AnnotationJmxAttributeSource ; import org . springframework . jmx . export . assembler . MetadataMBeanInfoAssembler ; public class DefaultInstrumentationAgent extends ServiceSupport implements InstrumentationAgent { public static final String DEFAULT_DOMAIN = "org.apache.camel" ; public static final String DEFAULT_HOST = "localhost" ; public static final int DEFAULT_REGISTRY_PORT = 1099 ; public static final int DEFAULT_CONNECTION_PORT = - 1 ; public static final String DEFAULT_SERVICE_URL_PATH = "/jmxrmi/camel" ; private static final transient Log LOG = LogFactory . getLog ( DefaultInstrumentationAgent . class ) ; private MBeanServer server ; private Set < ObjectName > mbeans = new HashSet < ObjectName > ( ) ; private MetadataMBeanInfoAssembler assembler ; private JMXConnectorServer cs ; private Integer registryPort ; private Integer connectorPort ; private String mBeanServerDefaultDomain ; private String mBeanObjectDomainName ; private String serviceUrlPath ; private Boolean usePlatformMBeanServer = true ; private Boolean createConnector ; protected void finalizeSettings ( ) { if ( registryPort == null ) { registryPort = Integer . getInteger ( JmxSystemPropertyKeys . REGISTRY_PORT , DEFAULT_REGISTRY_PORT ) ; } if ( connectorPort == null ) { connectorPort = Integer . getInteger ( JmxSystemPropertyKeys . CONNECTOR_PORT , DEFAULT_CONNECTION_PORT ) ; } if ( mBeanServerDefaultDomain == null ) { mBeanServerDefaultDomain = System . getProperty ( JmxSystemPropertyKeys . DOMAIN , DEFAULT_DOMAIN ) ; } if ( mBeanObjectDomainName == null ) { mBeanObjectDomainName = System . getProperty ( JmxSystemPropertyKeys . MBEAN_DOMAIN , DEFAULT_DOMAIN ) ; } if ( serviceUrlPath == null ) { serviceUrlPath = System . getProperty ( JmxSystemPropertyKeys . SERVICE_URL_PATH , DEFAULT_SERVICE_URL_PATH ) ; } if ( createConnector == null ) { createConnector = Boolean . getBoolean ( JmxSystemPropertyKeys . CREATE_CONNECTOR ) ; } if ( System . getProperty ( JmxSystemPropertyKeys . USE_PLATFORM_MBS ) != null ) { usePlatformMBeanServer = Boolean . getBoolean ( JmxSystemPropertyKeys . USE_PLATFORM_MBS ) ; } } public void setRegistryPort ( Integer value ) { registryPort = value ; } public void setConnectorPort ( Integer value ) { connectorPort = value ; } public void setMBeanServerDefaultDomain ( String value ) { mBeanServerDefaultDomain = value ; } public void setMBeanObjectDomainName ( String value ) { mBeanObjectDomainName = value ; } public void setServiceUrlPath ( String value ) { serviceUrlPath = value ; } public void setCreateConnector ( Boolean flag ) { createConnector = flag ; } public void setUsePlatformMBeanServer ( Boolean flag ) { usePlatformMBeanServer = flag ; } public MBeanServer getMBeanServer ( ) { return server ; } public void register ( Object obj , ObjectName name ) throws JMException { register ( obj , name , false ) ; } public void register ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException { try { registerMBeanWithServer ( obj , name , forceRegistration ) ; } catch ( NotCompliantMBeanException e ) { ModelMBeanInfo mbi = null ; mbi = assembler . getMBeanInfo ( obj , name . toString ( ) ) ; RequiredModelMBean mbean = ( RequiredModelMBean ) server . instantiate ( RequiredModelMBean . class . getName ( ) ) ; mbean . setModelMBeanInfo ( mbi ) ; try { mbean . setManagedResource ( obj , "ObjectReference" ) ; } catch ( InvalidTargetObjectTypeException itotex ) { throw new JMException ( itotex . getMessage ( ) ) ; } registerMBeanWithServer ( mbean , name , forceRegistration ) ; } } public void unregister ( ObjectName name ) throws JMException { server . unregisterMBean ( name ) ; } protected void doStart ( ) throws Exception { assembler = new MetadataMBeanInfoAssembler ( ) ; assembler . setAttributeSource ( new AnnotationJmxAttributeSource ( ) ) ; if ( server == null ) { finalizeSettings ( ) ; createMBeanServer ( ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Starting JMX agent on server: " + getMBeanServer ( ) ) ; } } protected void doStop ( ) throws Exception { if ( cs != null ) { try { cs . stop ( ) ; } catch ( IOException e ) { } cs = null ; } Object [ ] mBeans = mbeans . toArray ( ) ; int caught = 0 ; for ( Object name : mBeans ) { mbeans . remove ( ( ObjectName ) name ) ; try { unregister ( ( ObjectName ) name ) ; } catch ( JMException jmex ) { LOG . info ( "Exception unregistering MBean" , jmex ) ; caught ++ ; } } if ( caught > 0 ) { LOG . warn ( "A number of " + caught + " exceptions caught while unregistering MBeans during stop operation." + " See INFO log for details." ) ; } } private void registerMBeanWithServer ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException { boolean exists = server . isRegistered ( name ) ; if ( exists ) { if ( forceRegistration ) { LOG . info ( "ForceRegistration enabled, unregistering existing MBean" ) ; server . unregisterMBean ( name ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "MBean already registered with objectname: " + name ) ; } } } ObjectInstance instance = null ; if ( forceRegistration || ! exists ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Registering MBean with objectname: " + name ) ; } instance = server . registerMBean ( obj , name ) ; } if ( instance != null ) { ObjectName registeredName = instance . getObjectName ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Registered MBean with objectname: " + registeredName ) ; } mbeans . add ( registeredName ) ; } } protected void createMBeanServer ( ) { String hostName = DEFAULT_HOST ; boolean canAccessSystemProps = true ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPropertiesAccess ( ) ; } } catch ( SecurityException se ) { canAccessSystemProps = false ; } if ( canAccessSystemProps ) { try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException uhe ) { LOG . info ( "Cannot determine localhost name. Using default: " + DEFAULT_REGISTRY_PORT , uhe ) ; hostName = DEFAULT_HOST ; } } else { hostName = DEFAULT_HOST ; } server = findOrCreateMBeanServer ( ) ; try { if ( createConnector ) { createJmxConnector ( hostName ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not create and start JMX connector." , ioe ) ; } } @ SuppressWarnings ( "unchecked" ) protected MBeanServer findOrCreateMBeanServer ( ) { if ( usePlatformMBeanServer ) { return ManagementFactory . getPlatformMBeanServer ( ) ; } List < MBeanServer > servers = ( List < MBeanServer > ) MBeanServerFactory . findMBeanServer ( null ) ; for ( MBeanServer server : servers ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found MBeanServer with default domain " + server . getDefaultDomain ( ) ) ; } if ( mBeanServerDefaultDomain . equals ( server . getDefaultDomain ( ) ) ) { return server ; } } return MBeanServerFactory . createMBeanServer ( mBeanServerDefaultDomain ) ; } protected void createJmxConnector ( String host ) throws IOException { try { LocateRegistry . createRegistry ( registryPort ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Created JMXConnector RMI regisry on port " + registryPort ) ; } } catch ( RemoteException ex ) { } JMXServiceURL url ; if ( connectorPort > 0 ) { url = new JMXServiceURL ( "service:jmx:rmi://" + host + ":" + connectorPort + "/jndi/rmi://" + host + ":" + registryPort + serviceUrlPath ) ; } else { url = new JMXServiceURL ( "service:jmx:rmi:///jndi/rmi://" + host + ":" + registryPort + serviceUrlPath ) ; } cs = JMXConnectorServerFactory . newJMXConnectorServer ( url , null , server ) ; Thread connectorThread = new Thread ( ) { public void run ( ) { try { cs . start ( ) ; } catch ( IOException ioe ) { LOG . warn ( "Could not start JMXConnector thread." , ioe ) ; } } } ; connectorThread . setName ( "Camel JMX Connector Thread [" + url + "]" ) ; connectorThread . start ( ) ; LOG . info ( "JMX Connector thread started and listening at: " + url ) ; } public String getMBeanObjectDomainName ( ) { return mBeanObjectDomainName ; } public void setServer ( MBeanServer value ) { server = value ; } } 	1
package org . apache . camel . component . cxf . util ; import java . lang . annotation . Annotation ; import java . net . URI ; import java . net . URL ; import java . util . logging . Logger ; import javax . jws . WebService ; import javax . xml . namespace . QName ; import javax . xml . ws . WebServiceProvider ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelException ; import org . apache . camel . component . cxf . CxfConstants ; import org . apache . camel . component . cxf . CxfEndpoint ; import org . apache . camel . component . cxf . DataFormat ; import org . apache . camel . component . cxf . spring . CxfEndpointBean ; import org . apache . camel . util . ObjectHelper ; import org . apache . cxf . Bus ; import org . apache . cxf . common . classloader . ClassLoaderUtils ; import org . apache . cxf . common . i18n . Message ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . common . util . ClassHelper ; import org . apache . cxf . frontend . ClientProxyFactoryBean ; import org . apache . cxf . frontend . ServerFactoryBean ; import org . apache . cxf . jaxws . JaxWsProxyFactoryBean ; import org . apache . cxf . jaxws . JaxWsServerFactoryBean ; import org . apache . cxf . jaxws . support . JaxWsServiceFactoryBean ; import org . apache . cxf . service . Service ; import org . apache . cxf . service . factory . AbstractServiceFactoryBean ; import org . apache . cxf . service . factory . ReflectionServiceFactoryBean ; import org . apache . cxf . service . model . EndpointInfo ; import org . apache . cxf . wsdl11 . WSDLServiceFactory ; public final class CxfEndpointUtils { public static final String PROP_NAME_PORT = "port" ; public static final String PROP_NAME_SERVICE = "service" ; public static final String PROP_NAME_SERVICECLASS = "serviceClass" ; public static final String PROP_NAME_DATAFORMAT = "dataFormat" ; public static final String DATAFORMAT_POJO = "pojo" ; public static final String DATAFORMAT_MESSAGE = "message" ; public static final String DATAFORMAT_PAYLOAD = "payload" ; private static final Logger LOG = LogUtils . getL7dLogger ( CxfEndpointUtils . class ) ; private CxfEndpointUtils ( ) { } static QName getQName ( final String name ) { QName qName = null ; if ( name != null ) { try { qName = QName . valueOf ( name ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } } return qName ; } public static Class getServiceClass ( CxfEndpoint cxfEndpoint ) throws ClassNotFoundException { Class < ? > answer = null ; if ( cxfEndpoint . isSpringContextEndpoint ( ) ) { answer = cxfEndpoint . getCxfEndpointBean ( ) . getServiceClass ( ) ; if ( answer != null ) { return answer ; } } if ( cxfEndpoint . getServiceClassInstance ( ) != null ) { Object bean = cxfEndpoint . getCamelContext ( ) . getRegistry ( ) . lookup ( cxfEndpoint . getServiceClassInstance ( ) ) ; if ( bean != null ) { answer = ClassHelper . getRealClass ( bean ) ; } else { throw new ClassNotFoundException ( "Can't find serviceClass instace with name" + cxfEndpoint . getServiceClassInstance ( ) + " from CamelContext registry." ) ; } } else { if ( ObjectHelper . isNotEmpty ( cxfEndpoint . getServiceClass ( ) ) ) { answer = ClassLoaderUtils . loadClass ( cxfEndpoint . getServiceClass ( ) , CxfEndpointUtils . class ) ; } else { throw new ClassNotFoundException ( "Can't find serviceClass from uri, please check the cxf endpoint configuration" ) ; } } return answer ; } public static QName getPortName ( final CxfEndpoint endpoint ) { if ( endpoint . getPortName ( ) != null ) { return getQName ( endpoint . getPortName ( ) ) ; } else { String portLocalName = getCxfEndpointPropertyValue ( endpoint , CxfConstants . PORT_LOCALNAME ) ; String portNamespace = getCxfEndpointPropertyValue ( endpoint , CxfConstants . PORT_NAMESPACE ) ; if ( portLocalName != null ) { return new QName ( portNamespace , portLocalName ) ; } else { return null ; } } } public static QName getServiceName ( final CxfEndpoint endpoint ) { if ( endpoint . getServiceName ( ) != null ) { return getQName ( endpoint . getServiceName ( ) ) ; } else { String serviceLocalName = getCxfEndpointPropertyValue ( endpoint , CxfConstants . SERVICE_LOCALNAME ) ; String serviceNamespace = getCxfEndpointPropertyValue ( endpoint , CxfConstants . SERVICE_NAMESPACE ) ; if ( serviceLocalName != null ) { return new QName ( serviceNamespace , serviceLocalName ) ; } else { return null ; } } } public static EndpointInfo getEndpointInfo ( final Service service , final CxfEndpoint endpoint ) { EndpointInfo endpointInfo = null ; final java . util . Collection < EndpointInfo > endpoints = service . getServiceInfos ( ) . get ( 0 ) . getEndpoints ( ) ; if ( endpoints . size ( ) == 1 ) { endpointInfo = endpoints . iterator ( ) . next ( ) ; } else { final String port = endpoint . getPortName ( ) ; if ( port != null ) { final QName endpointName = QName . valueOf ( port ) ; endpointInfo = service . getServiceInfos ( ) . get ( 0 ) . getEndpoint ( endpointName ) ; } } return endpointInfo ; } public static boolean hasWebServiceAnnotation ( Class < ? > cls ) { return hasAnnotation ( cls , WebService . class ) || hasAnnotation ( cls , WebServiceProvider . class ) ; } public static boolean hasAnnotation ( Class < ? > cls , Class < ? extends Annotation > annotation ) { if ( cls == null || cls == Object . class ) { return false ; } if ( null != cls . getAnnotation ( annotation ) ) { return true ; } for ( Class < ? > interfaceClass : cls . getInterfaces ( ) ) { if ( null != interfaceClass . getAnnotation ( annotation ) ) { return true ; } } return hasAnnotation ( cls . getSuperclass ( ) , annotation ) ; } public static ServerFactoryBean getServerFactoryBean ( Class < ? > cls ) throws CamelException { ServerFactoryBean serverFactory = null ; try { if ( cls == null ) { serverFactory = new ServerFactoryBean ( ) ; serverFactory . setServiceFactory ( new WSDLSoapServiceFactoryBean ( ) ) ; } else { boolean isJSR181SEnabled = CxfEndpointUtils . hasWebServiceAnnotation ( cls ) ; serverFactory = isJSR181SEnabled ? new JaxWsServerFactoryBean ( ) : new ServerFactoryBean ( ) ; } return serverFactory ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } public static ClientProxyFactoryBean getClientFactoryBean ( Class < ? > cls ) throws CamelException { ClientProxyFactoryBean clientFactory = null ; try { if ( cls == null ) { clientFactory = new ClientProxyFactoryBean ( ) ; clientFactory . setServiceFactory ( new WSDLSoapServiceFactoryBean ( ) ) ; } else { boolean isJSR181SEnabled = CxfEndpointUtils . hasWebServiceAnnotation ( cls ) ; clientFactory = isJSR181SEnabled ? new JaxWsProxyFactoryBean ( ) : new ClientProxyFactoryBean ( ) ; } return clientFactory ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } public static void checkEndpiontIntegration ( CxfEndpoint endpoint , Bus bus ) throws CamelException { String wsdlLocation = endpoint . getWsdlURL ( ) ; QName serviceQName = CxfEndpointUtils . getQName ( endpoint . getServiceName ( ) ) ; String serviceClassName = endpoint . getServiceClass ( ) ; DataFormat dataFormat = CxfEndpointUtils . getDataFormat ( endpoint ) ; URL wsdlUrl = null ; if ( wsdlLocation != null ) { try { wsdlUrl = UriUtils . getWsdlUrl ( new URI ( wsdlLocation ) ) ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } if ( serviceQName == null ) { throw new CamelException ( new Message ( "SVC_QNAME_NOT_FOUND_X" , LOG , endpoint . getServiceName ( ) ) . toString ( ) ) ; } if ( serviceClassName == null && dataFormat == DataFormat . POJO ) { throw new CamelException ( new Message ( "SVC_CLASS_PROP_IS_REQUIRED_X" , LOG ) . toString ( ) ) ; } AbstractServiceFactoryBean serviceFactory = null ; try { if ( serviceClassName != null ) { Class < ? > cls = ClassLoaderUtils . loadClass ( serviceClassName , CxfEndpointUtils . class ) ; boolean isJSR181SEnabled = CxfEndpointUtils . hasWebServiceAnnotation ( cls ) ; serviceFactory = isJSR181SEnabled ? new JaxWsServiceFactoryBean ( ) : new ReflectionServiceFactoryBean ( ) ; serviceFactory . setBus ( bus ) ; if ( wsdlUrl != null ) { ( ( ReflectionServiceFactoryBean ) serviceFactory ) . setWsdlURL ( wsdlUrl ) ; } if ( serviceQName != null ) { ( ( ReflectionServiceFactoryBean ) serviceFactory ) . setServiceName ( serviceQName ) ; } ( ( ReflectionServiceFactoryBean ) serviceFactory ) . setServiceClass ( cls ) ; } else { if ( wsdlUrl == null ) { throw new CamelException ( new Message ( "SVC_WSDL_URL_IS_NULL_X" , LOG , wsdlLocation ) . toString ( ) ) ; } serviceFactory = new WSDLServiceFactory ( bus , wsdlUrl , serviceQName ) ; } } catch ( ClassNotFoundException cnfe ) { throw new CamelException ( new Message ( "CLASS_X_NOT_FOUND " , LOG , serviceClassName ) . toString ( ) , cnfe ) ; } catch ( Exception e ) { throw new CamelException ( e ) ; } } public static boolean getSetDefaultBus ( CxfEndpoint endpoint ) { Boolean isSetDefaultBus = null ; CxfEndpointBean cxfEndpointBean = endpoint . getCxfEndpointBean ( ) ; if ( cxfEndpointBean != null && cxfEndpointBean . getProperties ( ) != null ) { String value = ( String ) cxfEndpointBean . getProperties ( ) . get ( CxfConstants . SET_DEFAULT_BUS ) ; isSetDefaultBus = Boolean . valueOf ( value ) ; } if ( isSetDefaultBus != null && endpoint . isSetDefaultBus ( ) == null ) { return isSetDefaultBus . booleanValue ( ) ; } else if ( endpoint . isSetDefaultBus ( ) != null ) { return endpoint . isSetDefaultBus ( ) . booleanValue ( ) ; } else { return false ; } } public static String getCxfEndpointPropertyValue ( CxfEndpoint endpoint , String property ) { String result = null ; CxfEndpointBean cxfEndpointBean = endpoint . getCxfEndpointBean ( ) ; if ( cxfEndpointBean != null && cxfEndpointBean . getProperties ( ) != null ) { result = ( String ) cxfEndpointBean . getProperties ( ) . get ( property ) ; } return result ; } public static DataFormat getDataFormat ( CxfEndpoint endpoint ) throws CamelException { String dataFormatString = endpoint . getDataFormat ( ) ; if ( dataFormatString == null ) { dataFormatString = getCxfEndpointPropertyValue ( endpoint , CxfConstants . DATA_FORMAT ) ; } if ( dataFormatString == null ) { return DataFormat . POJO ; } DataFormat retval = DataFormat . asEnum ( dataFormatString ) ; if ( retval == DataFormat . UNKNOWN ) { throw new CamelException ( new Message ( "INVALID_MESSAGE_FORMAT_XXXX" , LOG , dataFormatString ) . toString ( ) ) ; } return retval ; } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; @ XmlRootElement ( name = "csv" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CsvDataFormat extends DataFormatType { public CsvDataFormat ( ) { super ( "org.apache.camel.dataformat.csv.CsvDataFormat" ) ; } } 	1
package org . apache . camel . component . event ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class EventConsumer extends DefaultConsumer < Exchange > { private EventEndpoint endpoint ; public EventConsumer ( EventEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; endpoint . consumerStarted ( this ) ; } @ Override protected void doStop ( ) throws Exception { endpoint . consumerStopped ( this ) ; super . doStop ( ) ; } } 	0
package org . apache . camel . processor ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . TreeSet ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ExpressionListComparator ; public class Resequencer extends BatchProcessor { public Resequencer ( Processor processor , Expression expression ) { this ( processor , createSet ( expression ) ) ; } public Resequencer ( Processor processor , List < Expression > expressions ) { this ( processor , createSet ( expressions ) ) ; } public Resequencer ( Processor processor , Set < Exchange > collection ) { super ( processor , collection ) ; } @ Override public String toString ( ) { return "Resequencer[to: " + getProcessor ( ) + "]" ; } protected static Set < Exchange > createSet ( Expression < Exchange > expression ) { return createSet ( new ExpressionComparator < Exchange > ( expression ) ) ; } protected static Set < Exchange > createSet ( List < Expression > expressions ) { if ( expressions . size ( ) == 1 ) { return createSet ( expressions . get ( 0 ) ) ; } return createSet ( new ExpressionListComparator ( expressions ) ) ; } protected static Set < Exchange > createSet ( Comparator < ? super Exchange > comparator ) { return new TreeSet < Exchange > ( comparator ) ; } } 	1
package org . apache . camel . component . validator . jing ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . component . ResourceBasedComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . springframework . core . io . Resource ; public class JingComponent extends ResourceBasedComponent { protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { JingValidator validator = new JingValidator ( ) ; Resource resource = resolveMandatoryResource ( remaining ) ; validator . setSchemaResource ( resource ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( this + " using schema resource: " + resource ) ; } configureValidator ( validator , uri , remaining , parameters ) ; return new ProcessorEndpoint ( uri , this , validator ) ; } protected void configureValidator ( JingValidator validator , String uri , String remaining , Map parameters ) throws Exception { setProperties ( validator , parameters ) ; } } 	0
package org . apache . camel . converter ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Converter ; import org . apache . camel . util . ObjectHelper ; @ Converter public final class ObjectConverter { private ObjectConverter ( ) { } public static boolean isCollection ( Object value ) { return value instanceof Collection || ( value != null && value . getClass ( ) . isArray ( ) ) ; } @ SuppressWarnings ( "unchecked" ) @ Converter @ Deprecated public static Iterator iterator ( Object value ) { return ObjectHelper . createIterator ( value ) ; } @ Converter public static boolean toBool ( Object value ) { Boolean answer = toBoolean ( value ) ; if ( answer != null ) { return answer . booleanValue ( ) ; } return false ; } @ Converter public static Boolean toBoolean ( Object value ) { return ObjectHelper . toBoolean ( value ) ; } @ Converter public static Boolean toBoolean ( Boolean value ) { if ( value != null ) { return value ; } return Boolean . FALSE ; } @ Converter public static Byte toByte ( Object value ) { if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Byte . valueOf ( number . byteValue ( ) ) ; } else if ( value instanceof String ) { return Byte . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static byte [ ] toByteArray ( String value ) { return value . getBytes ( ) ; } @ Converter public static char [ ] toCharArray ( String value ) { return value . toCharArray ( ) ; } @ Converter public static String fromCharArray ( char [ ] value ) { return new String ( value ) ; } @ Converter public static Short toShort ( Object value ) { if ( value instanceof Short ) { return ( Short ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Short . valueOf ( number . shortValue ( ) ) ; } else if ( value instanceof String ) { return Short . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Integer toInteger ( Object value ) { if ( value instanceof Integer ) { return ( Integer ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Integer . valueOf ( number . intValue ( ) ) ; } else if ( value instanceof String ) { return Integer . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Long toLong ( Object value ) { if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Long . valueOf ( number . longValue ( ) ) ; } else if ( value instanceof String ) { return Long . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Float toFloat ( Object value ) { if ( value instanceof Float ) { return ( Float ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Float . valueOf ( number . floatValue ( ) ) ; } else if ( value instanceof String ) { return Float . valueOf ( ( String ) value ) ; } else { return null ; } } @ Converter public static Double toDouble ( Object value ) { if ( value instanceof Double ) { return ( Double ) value ; } else if ( value instanceof Number ) { Number number = ( Number ) value ; return Double . valueOf ( number . doubleValue ( ) ) ; } else if ( value instanceof String ) { return Double . valueOf ( ( String ) value ) ; } else { return null ; } } } 	1
package org . apache . camel . processor . idempotent ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . util . LRUCache ; public class MemoryMessageIdRepository implements MessageIdRepository { private final Map cache ; public MemoryMessageIdRepository ( Map set ) { this . cache = set ; } public static MessageIdRepository memoryMessageIdRepository ( ) { return memoryMessageIdRepository ( new HashMap ( ) ) ; } public static MessageIdRepository memoryMessageIdRepository ( int cacheSize ) { return memoryMessageIdRepository ( new LRUCache ( cacheSize ) ) ; } public static MessageIdRepository memoryMessageIdRepository ( Map cache ) { return new MemoryMessageIdRepository ( cache ) ; } public boolean contains ( String messageId ) { synchronized ( cache ) { if ( cache . containsKey ( messageId ) ) { return true ; } else { cache . put ( messageId , messageId ) ; return false ; } } } } 	0
package org . apache . camel ; public interface AsyncCallback { void done ( boolean doneSynchronously ) ; } 	1
package org . apache . camel . component . velocity ; import java . io . InputStreamReader ; import java . io . Reader ; import java . io . StringWriter ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . component . ResourceBasedEndpoint ; import org . apache . camel . util . ExchangeHelper ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . context . Context ; import org . apache . velocity . runtime . log . SimpleLog4JLogSystem ; import org . springframework . core . io . Resource ; public class VelocityEndpoint extends ResourceBasedEndpoint { private final VelocityComponent component ; private VelocityEngine velocityEngine ; private boolean loaderCache = true ; private String encoding ; public VelocityEndpoint ( String uri , VelocityComponent component , String resourceUri , Map parameters ) { super ( uri , component , resourceUri , null ) ; this . component = component ; } @ Override public boolean isSingleton ( ) { return true ; } @ Override public ExchangePattern getExchangePattern ( ) { return ExchangePattern . InOut ; } private VelocityEngine getVelocityEngine ( ) throws Exception { if ( velocityEngine == null ) { velocityEngine = component . getVelocityEngine ( ) ; velocityEngine . setProperty ( Velocity . FILE_RESOURCE_LOADER_CACHE , isLoaderCache ( ) ? Boolean . TRUE : Boolean . FALSE ) ; velocityEngine . setProperty ( Velocity . RUNTIME_LOG_LOGSYSTEM_CLASS , SimpleLog4JLogSystem . class . getName ( ) ) ; velocityEngine . setProperty ( "runtime.log.logsystem.log4j.category" , VelocityEndpoint . class . getName ( ) ) ; velocityEngine . init ( ) ; } return velocityEngine ; } public void setVelocityEngine ( VelocityEngine velocityEngine ) { this . velocityEngine = velocityEngine ; } public boolean isLoaderCache ( ) { return loaderCache ; } public void setLoaderCache ( boolean loaderCache ) { this . loaderCache = loaderCache ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public String getEncoding ( ) { return encoding ; } @ SuppressWarnings ( "unchecked" ) @ Override protected void onExchange ( Exchange exchange ) throws Exception { Resource resource = getResource ( ) ; Reader reader = encoding != null ? new InputStreamReader ( getResourceAsInputStream ( ) , encoding ) : new InputStreamReader ( getResourceAsInputStream ( ) ) ; StringWriter buffer = new StringWriter ( ) ; String logTag = getClass ( ) . getName ( ) ; Map variableMap = ExchangeHelper . createVariableMap ( exchange ) ; Context velocityContext = new VelocityContext ( variableMap ) ; VelocityEngine engine = getVelocityEngine ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Velocity is evaluating using velocity context: " + variableMap ) ; } engine . evaluate ( velocityContext , buffer , logTag , reader ) ; Message out = exchange . getOut ( true ) ; out . setBody ( buffer . toString ( ) ) ; out . setHeader ( "org.apache.camel.velocity.resource" , resource ) ; Map < String , Object > headers = ( Map < String , Object > ) velocityContext . get ( "headers" ) ; for ( String key : headers . keySet ( ) ) { out . setHeader ( key , headers . get ( key ) ) ; } } } 	0
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public final class Builder { private Builder ( ) { } public static < E extends Exchange > ValueBuilder < E > constant ( Object value ) { Expression < E > expression = ExpressionBuilder . constantExpression ( value ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > header ( String name ) { Expression < E > expression = ExpressionBuilder . headerExpression ( name ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > body ( ) { Expression < E > expression = ExpressionBuilder . bodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > bodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . bodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > outBody ( ) { Expression < E > expression = ExpressionBuilder . outBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > outBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . outBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > faultBody ( ) { Expression < E > expression = ExpressionBuilder . faultBodyExpression ( ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange , T > ValueBuilder < E > faultBodyAs ( Class < T > type ) { Expression < E > expression = ExpressionBuilder . faultBodyExpression ( type ) ; return new ValueBuilder < E > ( expression ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > ValueBuilder < E > systemProperty ( final String name , final String defaultValue ) { return new ValueBuilder < E > ( ExpressionBuilder . < E > systemProperty ( name , defaultValue ) ) ; } } 	1
package org . apache . camel . dataformat . hl7 ; import java . io . InputStream ; import java . io . OutputStream ; import ca . uhn . hl7v2 . model . Message ; import ca . uhn . hl7v2 . util . Terser ; import org . apache . camel . Exchange ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ExchangeHelper ; public class HL7DataFormat implements DataFormat { public void marshal ( Exchange exchange , Object body , OutputStream outputStream ) throws Exception { Message message = ExchangeHelper . convertToMandatoryType ( exchange , Message . class , body ) ; String encoded = HL7Converter . toString ( message ) ; outputStream . write ( encoded . getBytes ( ) ) ; } public Object unmarshal ( Exchange exchange , InputStream inputStream ) throws Exception { String body = ExchangeHelper . convertToMandatoryType ( exchange , String . class , inputStream ) ; Message message = HL7Converter . toMessage ( body ) ; Terser terser = new Terser ( message ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.sendingApplication" , terser . get ( "MSH-3" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.sendingFacility" , terser . get ( "MSH-4" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.receivingApplication" , terser . get ( "MSH-5" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.receivingFacility" , terser . get ( "MSH-6" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.timestamp" , terser . get ( "MSH-7" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.security" , terser . get ( "MSH-8" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.messageType" , terser . get ( "MSH-9-1" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.triggerEvent" , terser . get ( "MSH-9-2" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.messageControl" , terser . get ( "MSH-10" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.processingId" , terser . get ( "MSH-11" ) ) ; exchange . getOut ( ) . setHeader ( "hl7.msh.versionId" , terser . get ( "MSH-12" ) ) ; return message ; } } 	0
package org . apache . camel . processor . interceptor ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . Processor ; import org . apache . camel . converter . stream . StreamCache ; import org . apache . camel . model . InterceptorRef ; import org . apache . camel . model . InterceptorType ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . MessageHelper ; public class StreamCachingInterceptor extends DelegateProcessor implements AsyncProcessor { public StreamCachingInterceptor ( ) { super ( ) ; } public StreamCachingInterceptor ( Processor processor ) { this ( ) ; setProcessor ( processor ) ; } @ Override public String toString ( ) { return "StreamCachingInterceptor(" + processor + ")" ; } public static void noStreamCaching ( List < InterceptorType > interceptors ) { for ( int i = 0 ; i < interceptors . size ( ) ; i ++ ) { InterceptorType interceptor = interceptors . get ( i ) ; if ( interceptor instanceof InterceptorRef && ( ( InterceptorRef ) interceptor ) . getInterceptor ( ) instanceof StreamCachingInterceptor ) { interceptors . remove ( interceptor ) ; } } } @ Override public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { try { StreamCache newBody = exchange . getIn ( ) . getBody ( StreamCache . class ) ; if ( newBody != null ) { exchange . getIn ( ) . setBody ( newBody ) ; } MessageHelper . resetStreamCache ( exchange . getIn ( ) ) ; } catch ( NoTypeConversionAvailableException ex ) { } return proceed ( exchange , callback ) ; } public boolean proceed ( Exchange exchange , AsyncCallback callback ) { if ( getProcessor ( ) instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) getProcessor ( ) ) . process ( exchange , callback ) ; } else { try { processor . process ( exchange ) ; } catch ( Throwable e ) { exchange . setException ( e ) ; } callback . done ( true ) ; return true ; } } } 	1
package org . apache . camel . component . xquery ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; public class XQueryLanguage implements Language { public Predicate < Exchange > createPredicate ( String expression ) { return XQueryBuilder . xquery ( expression ) ; } public Expression < Exchange > createExpression ( String expression ) { return XQueryBuilder . xquery ( expression ) ; } } 	0
package org . apache . camel ; public class InvalidPayloadException extends CamelExchangeException { private final Class < ? > type ; public InvalidPayloadException ( Exchange exchange , Class < ? > type ) { this ( exchange , type , exchange . getIn ( ) ) ; } public InvalidPayloadException ( Exchange exchange , Class < ? > type , Message message ) { super ( "No in body available of type: " + type . getName ( ) + NoSuchPropertyException . valueDescription ( message . getBody ( ) ) + " on: " + message , exchange ) ; this . type = type ; } public Class < ? > getType ( ) { return type ; } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "removeHeader" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RemoveHeaderType extends OutputType < ProcessorType > { @ XmlAttribute ( required = true ) private String headerName ; public RemoveHeaderType ( ) { } public RemoveHeaderType ( String headerName ) { setHeaderName ( headerName ) ; } @ Override public String toString ( ) { return "RemoveHeader[" + getHeaderName ( ) + "]" ; } @ Override public String getShortName ( ) { return "removeHeader" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ObjectHelper . notNull ( getHeaderName ( ) , "headerName" ) ; return ProcessorBuilder . removeHeader ( getHeaderName ( ) ) ; } public void setHeaderName ( String headerName ) { this . headerName = headerName ; } public String getHeaderName ( ) { return headerName ; } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . util . ExpressionHelper ; public class Delayer extends DelayProcessorSupport { private Expression < Exchange > timeExpression ; private long delay ; public Delayer ( Processor processor , Expression < Exchange > timeExpression , long delay ) { super ( processor ) ; this . timeExpression = timeExpression ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[on: " + timeExpression + " delay: " + delay + " to: " + getProcessor ( ) + "]" ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } protected void delay ( Exchange exchange ) throws Exception { long time = 0 ; if ( timeExpression != null ) { Long longValue = ExpressionHelper . evaluateAsType ( timeExpression , exchange , Long . class ) ; if ( longValue != null ) { time = longValue . longValue ( ) ; } } if ( time <= 0 ) { time = defaultProcessTime ( exchange ) ; } time += delay ; waitUntil ( time , exchange ) ; } protected long defaultProcessTime ( Exchange exchange ) { return currentSystemTime ( ) ; } } 	1
package org . apache . camel . component . cxf ; import java . io . InputStream ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import javax . xml . ws . BindingProvider ; import javax . xml . ws . handler . MessageContext ; import javax . xml . ws . handler . MessageContext . Scope ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . component . cxf . util . CxfHeaderHelper ; import org . apache . camel . spi . HeaderFilterStrategy ; import org . apache . cxf . endpoint . Client ; import org . apache . cxf . helpers . CastUtils ; import org . apache . cxf . jaxws . context . WrappedMessageContext ; import org . apache . cxf . message . Message ; public final class CxfBinding { private CxfBinding ( ) { } public static Object extractBodyFromCxf ( CxfExchange exchange , Message message ) { return getBody ( message ) ; } protected static Object getBody ( Message message ) { Set < Class < ? > > contentFormats = message . getContentFormats ( ) ; if ( contentFormats != null ) { for ( Class < ? > contentFormat : contentFormats ) { Object answer = message . getContent ( contentFormat ) ; if ( answer != null ) { return answer ; } } } return null ; } public static Message createCxfMessage ( CxfExchange exchange ) { return CxfBinding . createCxfMessage ( new CxfHeaderFilterStrategy ( ) , exchange ) ; } public static Message createCxfMessage ( HeaderFilterStrategy strategy , CxfExchange exchange ) { Message answer = exchange . getInMessage ( ) ; CxfMessage in = exchange . getIn ( ) ; try { List body = in . getBody ( List . class ) ; answer . setContent ( List . class , body ) ; CxfHeaderHelper . propagateCamelToCxf ( strategy , in . getHeaders ( ) , answer ) ; } catch ( NoTypeConversionAvailableException ex ) { try { InputStream body = in . getBody ( InputStream . class ) ; answer . setContent ( InputStream . class , body ) ; } catch ( NoTypeConversionAvailableException ex2 ) { } } Map < String , Object > requestContext = CastUtils . cast ( ( Map ) answer . get ( Client . REQUEST_CONTEXT ) ) ; if ( requestContext == null ) { requestContext = new HashMap < String , Object > ( ) ; } if ( exchange . getExchange ( ) != null ) { requestContext . putAll ( exchange . getExchange ( ) ) ; } if ( exchange . getProperties ( ) != null ) { requestContext . putAll ( exchange . getProperties ( ) ) ; } answer . put ( Client . REQUEST_CONTEXT , requestContext ) ; return answer ; } public static void storeCxfResponse ( CxfExchange exchange , Message response ) { CxfBinding . storeCxfResponse ( new CxfHeaderFilterStrategy ( ) , exchange , response ) ; } public static void storeCxfResponse ( HeaderFilterStrategy strategy , CxfExchange exchange , Message response ) { CxfMessage out = exchange . getOut ( ) ; if ( response != null ) { CxfHeaderHelper . propagateCxfToCamel ( strategy , response , out . getHeaders ( ) ) ; out . setMessage ( response ) ; DataFormat dataFormat = ( DataFormat ) exchange . getProperty ( CxfExchange . DATA_FORMAT ) ; if ( dataFormat . equals ( DataFormat . MESSAGE ) ) { out . setBody ( response . getContent ( InputStream . class ) ) ; } if ( dataFormat . equals ( DataFormat . PAYLOAD ) ) { out . setBody ( response ) ; } } } public static void copyMessage ( org . apache . camel . Message camelMessage , org . apache . cxf . message . Message cxfMessage ) { CxfBinding . copyMessage ( new CxfHeaderFilterStrategy ( ) , camelMessage , cxfMessage ) ; } public static void copyMessage ( HeaderFilterStrategy strategy , org . apache . camel . Message camelMessage , org . apache . cxf . message . Message cxfMessage ) { CxfHeaderHelper . propagateCamelToCxf ( strategy , camelMessage . getHeaders ( ) , cxfMessage ) ; try { InputStream is = camelMessage . getBody ( InputStream . class ) ; if ( is != null ) { cxfMessage . setContent ( InputStream . class , is ) ; } } catch ( NoTypeConversionAvailableException ex ) { Object result = camelMessage . getBody ( ) ; if ( result instanceof InputStream ) { cxfMessage . setContent ( InputStream . class , result ) ; } else { cxfMessage . setContent ( result . getClass ( ) , result ) ; } } } public static void storeCXfResponseContext ( Message response , Map < String , Object > context ) { if ( context != null ) { MessageContext messageContext = new WrappedMessageContext ( context , null , Scope . HANDLER ) ; response . put ( Client . RESPONSE_CONTEXT , messageContext ) ; Object value = context . get ( Message . RESPONSE_CODE ) ; if ( value != null ) { response . put ( Message . RESPONSE_CODE , value ) ; } } } public static void storeCxfResponse ( CxfExchange exchange , Object response ) { CxfMessage out = exchange . getOut ( ) ; if ( response != null ) { out . setBody ( response ) ; } } public static void storeCxfFault ( CxfExchange exchange , Message message ) { CxfMessage fault = exchange . getFault ( ) ; if ( fault != null ) { fault . setBody ( getBody ( message ) ) ; } } public static Map < String , Object > propogateContext ( Message message , Map < String , Object > context ) { Map < String , Object > requestContext = CastUtils . cast ( ( Map ) message . get ( Client . REQUEST_CONTEXT ) ) ; Map < String , Object > responseContext = CastUtils . cast ( ( Map ) message . get ( Client . RESPONSE_CONTEXT ) ) ; if ( requestContext != null ) { Map < String , Object > realMap = new HashMap < String , Object > ( ) ; WrappedMessageContext ctx = new WrappedMessageContext ( realMap , null , Scope . APPLICATION ) ; ctx . putAll ( requestContext ) ; requestContext = realMap ; } if ( responseContext == null ) { responseContext = new HashMap < String , Object > ( ) ; } else { responseContext . clear ( ) ; } context . put ( Client . REQUEST_CONTEXT , requestContext ) ; context . put ( Client . RESPONSE_CONTEXT , responseContext ) ; return responseContext ; } } 	0
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "proceed" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProceedType extends OutputType < ProcessorType > { @ Override public String getShortName ( ) { return "proceed" ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } } 	1
package org . apache . camel ; public class NoSuchLanguageException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String language ; public NoSuchLanguageException ( String language ) { super ( "No language could be found for: " + language ) ; this . language = language ; } public String getLanguage ( ) { return language ; } } 	0
package org . apache . camel ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . InterceptStrategy ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . FactoryFinder ; public interface CamelContext extends Service { String getName ( ) ; void addComponent ( String componentName , Component component ) ; Component getComponent ( String componentName ) ; < T extends Component > T getComponent ( String name , Class < T > componentType ) ; Component removeComponent ( String componentName ) ; Component getOrCreateComponent ( String componentName , Callable < Component > factory ) ; Endpoint getEndpoint ( String uri ) ; < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) ; Collection < Endpoint > getEndpoints ( ) ; Collection < Endpoint > getEndpoints ( String uri ) ; Collection < Endpoint > getSingletonEndpoints ( ) ; Endpoint addEndpoint ( String uri , Endpoint endpoint ) throws Exception ; Collection < Endpoint > removeEndpoints ( String uri ) throws Exception ; @ Deprecated Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception ; @ Deprecated Endpoint removeSingletonEndpoint ( String uri ) throws Exception ; List < RouteType > getRouteDefinitions ( ) ; List < Route > getRoutes ( ) ; @ Deprecated void setRoutes ( List < Route > routes ) ; void addRoutes ( Collection < Route > routes ) throws Exception ; void addRoutes ( Routes builder ) throws Exception ; void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception ; ExchangeConverter getExchangeConverter ( ) ; TypeConverter getTypeConverter ( ) ; Registry getRegistry ( ) ; Injector getInjector ( ) ; LifecycleStrategy getLifecycleStrategy ( ) ; Language resolveLanguage ( String language ) ; < E extends Exchange > ProducerTemplate < E > createProducerTemplate ( ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; ErrorHandlerBuilder getErrorHandlerBuilder ( ) ; void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) ; void setDataFormats ( Map < String , DataFormatType > dataFormats ) ; Map < String , DataFormatType > getDataFormats ( ) ; FactoryFinder createFactoryFinder ( ) ; FactoryFinder createFactoryFinder ( String path ) ; } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . builder . ExpressionClause ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Aggregator ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "aggregator" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class AggregatorType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy ; @ XmlTransient private AggregationCollection aggregationCollection ; @ XmlAttribute ( required = false ) private Integer batchSize ; @ XmlAttribute ( required = false ) private Integer outBatchSize ; @ XmlAttribute ( required = false ) private Long batchTimeout ; @ XmlAttribute ( required = false ) private String strategyRef ; @ XmlAttribute ( required = false ) private String collectionRef ; @ XmlElement ( name = "completedPredicate" , required = false ) private ExpressionSubElementType completedPredicate ; public AggregatorType ( ) { } public AggregatorType ( Expression correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( ExpressionType correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { super ( correlationExpression ) ; this . aggregationStrategy = aggregationStrategy ; } @ Override public String toString ( ) { return "Aggregator[" + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "aggregator" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createAggregator ( routeContext ) ; } protected Aggregator createAggregator ( RouteContext routeContext ) throws Exception { final Processor processor = routeContext . createProcessor ( this ) ; final Aggregator aggregator ; if ( getAggregationCollection ( ) == null ) { setAggregationCollection ( createAggregationCollection ( routeContext ) ) ; } if ( aggregationCollection != null ) { if ( aggregationCollection . getCorrelationExpression ( ) == null ) { aggregationCollection . setCorrelationExpression ( getExpression ( ) ) ; } if ( aggregationCollection . getAggregationStrategy ( ) == null ) { AggregationStrategy strategy = createAggregationStrategy ( routeContext ) ; aggregationCollection . setAggregationStrategy ( strategy ) ; } aggregator = new Aggregator ( processor , aggregationCollection ) ; } else { AggregationStrategy strategy = createAggregationStrategy ( routeContext ) ; Expression aggregateExpression = getExpression ( ) . createExpression ( routeContext ) ; Predicate predicate = null ; if ( getCompletedPredicate ( ) != null ) { predicate = getCompletedPredicate ( ) . createPredicate ( routeContext ) ; } if ( predicate != null ) { aggregator = new Aggregator ( processor , aggregateExpression , strategy , predicate ) ; } else { aggregator = new Aggregator ( processor , aggregateExpression , strategy ) ; } } if ( batchSize != null ) { aggregator . setBatchSize ( batchSize ) ; } if ( batchTimeout != null ) { aggregator . setBatchTimeout ( batchTimeout ) ; } if ( outBatchSize != null ) { aggregator . setOutBatchSize ( outBatchSize ) ; } return aggregator ; } private AggregationStrategy createAggregationStrategy ( RouteContext routeContext ) { AggregationStrategy strategy = getAggregationStrategy ( ) ; if ( strategy == null && strategyRef != null ) { strategy = routeContext . lookup ( strategyRef , AggregationStrategy . class ) ; } if ( strategy == null ) { strategy = new UseLatestAggregationStrategy ( ) ; } return strategy ; } private AggregationCollection createAggregationCollection ( RouteContext routeContext ) { AggregationCollection collection = getAggregationCollection ( ) ; if ( collection == null && collectionRef != null ) { collection = routeContext . lookup ( collectionRef , AggregationCollection . class ) ; } return collection ; } public AggregationCollection getAggregationCollection ( ) { return aggregationCollection ; } public void setAggregationCollection ( AggregationCollection aggregationCollection ) { this . aggregationCollection = aggregationCollection ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public Integer getBatchSize ( ) { return batchSize ; } public void setBatchSize ( Integer batchSize ) { this . batchSize = batchSize ; } public Integer getOutBatchSize ( ) { return outBatchSize ; } public void setOutBatchSize ( Integer outBatchSize ) { this . outBatchSize = outBatchSize ; } public Long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( Long batchTimeout ) { this . batchTimeout = batchTimeout ; } public String getStrategyRef ( ) { return strategyRef ; } public void setStrategyRef ( String strategyRef ) { this . strategyRef = strategyRef ; } public void setCompletedPredicate ( ExpressionSubElementType completedPredicate ) { this . completedPredicate = completedPredicate ; } public ExpressionSubElementType getCompletedPredicate ( ) { return completedPredicate ; } public AggregatorType batchSize ( int batchSize ) { setBatchSize ( batchSize ) ; return this ; } public AggregatorType outBatchSize ( int batchSize ) { setOutBatchSize ( batchSize ) ; return this ; } public AggregatorType batchTimeout ( long batchTimeout ) { setBatchTimeout ( batchTimeout ) ; return this ; } public AggregatorType aggregationCollection ( AggregationCollection aggregationCollection ) { setAggregationCollection ( aggregationCollection ) ; return this ; } public AggregatorType aggregationStrategy ( AggregationStrategy aggregationStrategy ) { setAggregationStrategy ( aggregationStrategy ) ; return this ; } public AggregatorType strategyRef ( String strategyRef ) { setStrategyRef ( strategyRef ) ; return this ; } public ExpressionClause < AggregatorType > completedPredicate ( ) { checkNoCompletedPredicate ( ) ; ExpressionClause < AggregatorType > clause = new ExpressionClause < AggregatorType > ( this ) ; setCompletedPredicate ( new ExpressionSubElementType ( ( Expression ) clause ) ) ; return clause ; } public AggregatorType completedPredicate ( Predicate predicate ) { checkNoCompletedPredicate ( ) ; setCompletedPredicate ( new ExpressionSubElementType ( predicate ) ) ; return this ; } protected void checkNoCompletedPredicate ( ) { if ( getCompletedPredicate ( ) != null ) { throw new IllegalArgumentException ( "There is already a completedPredicate defined for this aggregator: " + this ) ; } } } 	0
package org . apache . camel . processor ; import java . util . Timer ; import java . util . TimerTask ; import java . util . concurrent . RejectedExecutionException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . processor . exceptionpolicy . ExceptionPolicyStrategy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . MessageHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannel extends ErrorHandlerSupport implements AsyncProcessor { public static final String REDELIVERY_COUNTER = "org.apache.camel.RedeliveryCounter" ; public static final String REDELIVERED = "org.apache.camel.Redelivered" ; public static final String EXCEPTION_CAUSE_PROPERTY = "CamelCauseException" ; public static final String CAUGHT_EXCEPTION_HEADER = "org.apache.camel.CamelCaughtException" ; private static final transient Log LOG = LogFactory . getLog ( DeadLetterChannel . class ) ; private static final String FAILURE_HANDLED_PROPERTY = DeadLetterChannel . class . getName ( ) + ".FAILURE_HANDLED" ; private static Timer timer = new Timer ( ) ; private Processor output ; private Processor deadLetter ; private AsyncProcessor outputAsync ; private RedeliveryPolicy redeliveryPolicy ; private Logger logger ; private Processor redeliveryProcessor ; private class RedeliveryData { int redeliveryCounter ; long redeliveryDelay ; boolean sync = true ; Predicate handledPredicate ; RedeliveryPolicy currentRedeliveryPolicy = redeliveryPolicy ; Processor failureProcessor = deadLetter ; } private class RedeliverTimerTask extends TimerTask { private final Exchange exchange ; private final AsyncCallback callback ; private final RedeliveryData data ; public RedeliverTimerTask ( Exchange exchange , AsyncCallback callback , RedeliveryData data ) { this . exchange = exchange ; this . callback = callback ; this . data = data ; } @ Override public void run ( ) { outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null && ! isFailureHandled ( exchange ) ) { asyncProcess ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; } } public DeadLetterChannel ( Processor output , Processor deadLetter , Processor redeliveryProcessor , RedeliveryPolicy redeliveryPolicy , Logger logger , ExceptionPolicyStrategy exceptionPolicyStrategy ) { this . output = output ; this . deadLetter = deadLetter ; this . redeliveryProcessor = redeliveryProcessor ; this . outputAsync = AsyncProcessorTypeConverter . convert ( output ) ; this . redeliveryPolicy = redeliveryPolicy ; this . logger = logger ; setExceptionPolicy ( exceptionPolicyStrategy ) ; } public static < E extends Exchange > Logger createDefaultLogger ( ) { return new Logger ( LOG , LoggingLevel . ERROR ) ; } @ Override public String toString ( ) { return "DeadLetterChannel[" + output + ", " + deadLetter + "]" ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { return process ( exchange , callback , new RedeliveryData ( ) ) ; } protected boolean process ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { while ( true ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return data . sync ; } if ( exchange . isTransacted ( ) && exchange . getException ( ) != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "This is a transacted exchange, bypassing this DeadLetterChannel: " + this + " for exchange: " + exchange ) ; } return data . sync ; } if ( exchange . getException ( ) != null ) { handleException ( exchange , data ) ; } boolean shouldRedeliver = shouldRedeliver ( exchange , data ) ; if ( ! shouldRedeliver ) { return deliverToFaultProcessor ( exchange , callback , data ) ; } if ( data . redeliveryCounter > 0 ) { if ( exchange . getException ( ) != null ) { exchange . setException ( null ) ; } MessageHelper . resetStreamCache ( exchange . getIn ( ) ) ; data . redeliveryDelay = data . currentRedeliveryPolicy . sleep ( data . redeliveryDelay ) ; deliverToRedeliveryProcessor ( exchange , callback , data ) ; } boolean sync = outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null && ! isFailureHandled ( exchange ) ) { asyncProcess ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; if ( ! sync ) { return false ; } if ( exchange . getException ( ) == null || isFailureHandled ( exchange ) ) { callback . done ( true ) ; return true ; } } } protected void asyncProcess ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return ; } if ( exchange . isTransacted ( ) && exchange . getException ( ) != null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "This is a transacted exchange, bypassing this DeadLetterChannel: " + this + " for exchange: " + exchange ) ; } return ; } if ( exchange . getException ( ) != null ) { handleException ( exchange , data ) ; } boolean shouldRedeliver = shouldRedeliver ( exchange , data ) ; if ( ! shouldRedeliver ) { deliverToFaultProcessor ( exchange , callback , data ) ; return ; } if ( data . redeliveryCounter > 0 ) { if ( exchange . getException ( ) != null ) { exchange . setException ( null ) ; } data . redeliveryDelay = data . currentRedeliveryPolicy . getRedeliveryDelay ( data . redeliveryDelay ) ; timer . schedule ( new RedeliverTimerTask ( exchange , callback , data ) , data . redeliveryDelay ) ; deliverToRedeliveryProcessor ( exchange , callback , data ) ; } } private void handleException ( Exchange exchange , RedeliveryData data ) { Throwable e = exchange . getException ( ) ; exchange . setProperty ( EXCEPTION_CAUSE_PROPERTY , e ) ; ExceptionType exceptionPolicy = getExceptionPolicy ( exchange , e ) ; if ( exceptionPolicy != null ) { data . currentRedeliveryPolicy = exceptionPolicy . createRedeliveryPolicy ( exchange . getContext ( ) , data . currentRedeliveryPolicy ) ; data . handledPredicate = exceptionPolicy . getHandledPolicy ( ) ; Processor processor = exceptionPolicy . getErrorHandler ( ) ; if ( processor != null ) { data . failureProcessor = processor ; } } String msg = "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". On delivery attempt: " + data . redeliveryCounter + " caught: " + e ; logFailedDelivery ( true , exchange , msg , data , e ) ; data . redeliveryCounter = incrementRedeliveryCounter ( exchange , e ) ; } private boolean deliverToRedeliveryProcessor ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { if ( redeliveryProcessor == null ) { return true ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "RedeliveryProcessor " + redeliveryProcessor + " is processing Exchange before its redelivered" ) ; } AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( redeliveryProcessor ) ; boolean sync = afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( data . sync ) ; } } ) ; return sync ; } private boolean deliverToFaultProcessor ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { setFailureHandled ( exchange ) ; decrementRedeliveryCounter ( exchange ) ; AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( data . failureProcessor ) ; boolean sync = afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { restoreExceptionOnExchange ( exchange , data . handledPredicate ) ; callback . done ( data . sync ) ; } } ) ; String msg = "Failed delivery for exchangeId: " + exchange . getExchangeId ( ) + ". Handled by the failure processor: " + data . failureProcessor ; logFailedDelivery ( false , exchange , msg , data , null ) ; return sync ; } public static boolean isFailureHandled ( Exchange exchange ) { return exchange . getProperty ( FAILURE_HANDLED_PROPERTY ) != null || exchange . getIn ( ) . getHeader ( CAUGHT_EXCEPTION_HEADER ) != null ; } public static void setFailureHandled ( Exchange exchange ) { exchange . setProperty ( FAILURE_HANDLED_PROPERTY , exchange . getException ( ) ) ; exchange . getIn ( ) . setHeader ( CAUGHT_EXCEPTION_HEADER , exchange . getException ( ) ) ; exchange . setException ( null ) ; } public Processor getOutput ( ) { return output ; } public Processor getDeadLetter ( ) { return deadLetter ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } protected static void restoreExceptionOnExchange ( Exchange exchange , Predicate handledPredicate ) { if ( handledPredicate == null || ! handledPredicate . matches ( exchange ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "This exchange is not handled so its marked as failed: " + exchange ) ; } exchange . setException ( exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Throwable . class ) ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "This exchange is handled so its marked as not failed: " + exchange ) ; } exchange . setProperty ( Exchange . EXCEPTION_HANDLED_PROPERTY , Boolean . TRUE ) ; } } private void logFailedDelivery ( boolean shouldRedeliver , Exchange exchange , String message , RedeliveryData data , Throwable e ) { LoggingLevel newLogLevel ; if ( shouldRedeliver ) { newLogLevel = data . currentRedeliveryPolicy . getRetryAttemptedLogLevel ( ) ; } else { newLogLevel = data . currentRedeliveryPolicy . getRetriesExhaustedLogLevel ( ) ; } if ( e != null ) { logger . log ( message , e , newLogLevel ) ; } else { logger . log ( message , newLogLevel ) ; } } private boolean shouldRedeliver ( Exchange exchange , RedeliveryData data ) { return data . currentRedeliveryPolicy . shouldRedeliver ( data . redeliveryCounter ) ; } protected int incrementRedeliveryCounter ( Exchange exchange , Throwable e ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; int next = 1 ; if ( counter != null ) { next = counter + 1 ; } in . setHeader ( REDELIVERY_COUNTER , next ) ; in . setHeader ( REDELIVERED , Boolean . TRUE ) ; return next ; } private void decrementRedeliveryCounter ( Exchange exchange ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; if ( counter != null ) { int prev = counter - 1 ; in . setHeader ( REDELIVERY_COUNTER , prev ) ; in . setHeader ( REDELIVERED , prev > 0 ? Boolean . TRUE : Boolean . FALSE ) ; } else { in . setHeader ( REDELIVERY_COUNTER , 0 ) ; in . setHeader ( REDELIVERED , Boolean . FALSE ) ; } } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output , deadLetter ) ; } @ Override protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( deadLetter , output ) ; } } 	1
package org . apache . camel . component . cxf ; import org . apache . camel . CamelContext ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . Destination ; public class CxfExchange extends DefaultExchange { public static final String DATA_FORMAT = "DATA_FORMAT" ; private Exchange exchange ; public CxfExchange ( CamelContext context , ExchangePattern pattern , Exchange exchange ) { super ( context , pattern ) ; this . exchange = exchange ; if ( exchange != null ) { if ( exchange . getOutMessage ( ) != null ) { setOut ( new CxfMessage ( exchange . getOutMessage ( ) ) ) ; } if ( exchange . getInMessage ( ) != null ) { setIn ( new CxfMessage ( exchange . getInMessage ( ) ) ) ; } if ( exchange . getInFaultMessage ( ) != null ) { setFault ( new CxfMessage ( exchange . getInFaultMessage ( ) ) ) ; } } } public CxfExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public CxfExchange ( CxfExchange exchange ) { super ( exchange ) ; this . exchange = exchange . getExchange ( ) ; } public CxfExchange ( CamelContext context , ExchangePattern pattern , Message inMessage ) { this ( context , pattern ) ; this . exchange = inMessage . getExchange ( ) ; setIn ( new CxfMessage ( inMessage ) ) ; if ( exchange != null ) { if ( exchange . getOutMessage ( ) != null ) { setOut ( new CxfMessage ( exchange . getOutMessage ( ) ) ) ; } if ( exchange . getInFaultMessage ( ) != null ) { setFault ( new CxfMessage ( exchange . getInFaultMessage ( ) ) ) ; } } } @ Override public org . apache . camel . Exchange newInstance ( ) { return new CxfExchange ( this ) ; } @ Override public CxfMessage getIn ( ) { return ( CxfMessage ) super . getIn ( ) ; } @ Override public CxfMessage getOut ( ) { return ( CxfMessage ) super . getOut ( ) ; } @ Override public CxfMessage getOut ( boolean lazyCreate ) { return ( CxfMessage ) super . getOut ( lazyCreate ) ; } @ Override public CxfMessage getFault ( ) { return ( CxfMessage ) super . getFault ( ) ; } @ Override protected org . apache . camel . Message createFaultMessage ( ) { return new CxfMessage ( ) ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } public Message getInMessage ( ) { return getIn ( ) . getMessage ( ) ; } public Message getOutMessage ( ) { return getOut ( ) . getMessage ( ) ; } public Message getOutFaultMessage ( ) { return getExchange ( ) . getOutFaultMessage ( ) ; } public Message getInFaultMessage ( ) { return getExchange ( ) . getInFaultMessage ( ) ; } public Destination getDestination ( ) { return getExchange ( ) . getDestination ( ) ; } public Conduit getConduit ( Message message ) { return getExchange ( ) . getConduit ( message ) ; } @ Override protected CxfMessage createInMessage ( ) { return new CxfMessage ( ) ; } @ Override protected CxfMessage createOutMessage ( ) { return new CxfMessage ( ) ; } } 	0
package org . apache . camel ; public class RuntimeExchangeException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final Exchange exchange ; public RuntimeExchangeException ( String message , Exchange exchange ) { super ( message + " on the exchange: " + exchange ) ; this . exchange = exchange ; } public RuntimeExchangeException ( Exception e , Exchange exchange ) { super ( e . getMessage ( ) , e ) ; this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } } 	1
package org . apache . camel . util ; import java . util . Date ; import java . util . concurrent . TimeUnit ; public class Time { private long number ; private TimeUnit timeUnit = TimeUnit . MILLISECONDS ; public Time ( long number , TimeUnit timeUnit ) { this . number = number ; this . timeUnit = timeUnit ; } public static Time millis ( long value ) { return new Time ( value , TimeUnit . MILLISECONDS ) ; } public static Time micros ( long value ) { return new Time ( value , TimeUnit . MICROSECONDS ) ; } public static Time nanos ( long value ) { return new Time ( value , TimeUnit . NANOSECONDS ) ; } public static Time seconds ( long value ) { return new Time ( value , TimeUnit . SECONDS ) ; } public static Time minutes ( long value ) { return new Time ( minutesAsSeconds ( value ) , TimeUnit . MILLISECONDS ) ; } public static Time hours ( long value ) { return new Time ( hoursAsSeconds ( value ) , TimeUnit . MILLISECONDS ) ; } public static Time days ( long value ) { return new Time ( daysAsSeconds ( value ) , TimeUnit . MILLISECONDS ) ; } public long toMillis ( ) { return timeUnit . toMillis ( number ) ; } public Date toDate ( ) { return new Date ( toMillis ( ) ) ; } public long getNumber ( ) { return number ; } public TimeUnit getTimeUnit ( ) { return timeUnit ; } protected static long minutesAsSeconds ( long value ) { return value * 60 ; } protected static long hoursAsSeconds ( long value ) { return minutesAsSeconds ( value ) * 60 ; } protected static long daysAsSeconds ( long value ) { return hoursAsSeconds ( value ) * 24 ; } } 	0
package org . apache . camel ; public class ResolveEndpointFailedException extends RuntimeCamelException { private final String uri ; public ResolveEndpointFailedException ( String uri , Throwable cause ) { super ( "Failed to resolve endpoint: " + uri + " due to: " + cause , cause ) ; this . uri = uri ; } public ResolveEndpointFailedException ( String uri , String message ) { super ( "Failed to resolve endpoint: " + uri + " due to: " + message ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	1
package org . apache . camel . component . jpa ; import javax . persistence . EntityManager ; import javax . persistence . EntityManagerFactory ; import javax . persistence . PersistenceException ; import org . apache . camel . impl . ServiceSupport ; import org . springframework . orm . jpa . JpaCallback ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . orm . jpa . JpaTransactionManager ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallback ; import org . springframework . transaction . support . TransactionTemplate ; public class JpaTemplateTransactionStrategy extends ServiceSupport implements TransactionStrategy { private final JpaTemplate jpaTemplate ; private final TransactionTemplate transactionTemplate ; public JpaTemplateTransactionStrategy ( JpaTemplate jpaTemplate , TransactionTemplate transactionTemplate ) { this . jpaTemplate = jpaTemplate ; this . transactionTemplate = transactionTemplate ; } public static JpaTemplateTransactionStrategy newInstance ( EntityManagerFactory emf ) { JpaTemplate template = new JpaTemplate ( emf ) ; return newInstance ( emf , template ) ; } public static JpaTemplateTransactionStrategy newInstance ( EntityManagerFactory emf , JpaTemplate template ) { JpaTransactionManager transactionManager = new JpaTransactionManager ( emf ) ; transactionManager . afterPropertiesSet ( ) ; TransactionTemplate tranasctionTemplate = new TransactionTemplate ( transactionManager ) ; tranasctionTemplate . afterPropertiesSet ( ) ; return new JpaTemplateTransactionStrategy ( template , tranasctionTemplate ) ; } public Object execute ( final JpaCallback callback ) { return transactionTemplate . execute ( new TransactionCallback ( ) { public Object doInTransaction ( TransactionStatus status ) { return jpaTemplate . execute ( new JpaCallback ( ) { public Object doInJpa ( EntityManager entityManager ) throws PersistenceException { return callback . doInJpa ( entityManager ) ; } } ) ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; @ XmlRootElement ( name = "hl7" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class HL7DataFormat extends DataFormatType { public HL7DataFormat ( ) { super ( "org.apache.camel.dataformat.hl7.HL7DataFormat" ) ; } } 	1
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . language . LanguageAnnotation ; public interface AnnotationExpressionFactory { Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) ; } 	0
package org . apache . camel . builder ; import java . util . Map ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . model . ExpressionNode ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . MethodCallExpression ; import org . apache . camel . model . language . XPathExpression ; import org . apache . camel . model . language . XQueryExpression ; public class ExpressionClause < T > extends ExpressionType { private T result ; private String language ; public ExpressionClause ( T result ) { this . result = result ; } public static < T extends ExpressionNode > ExpressionClause < T > createAndSetExpression ( T result ) { ExpressionClause < T > clause = new ExpressionClause < T > ( result ) ; result . setExpression ( clause ) ; return clause ; } public T expression ( Expression expression ) { setExpressionValue ( expression ) ; return result ; } public T constant ( Object value ) { return expression ( ExpressionBuilder . constantExpression ( value ) ) ; } public T exchange ( ) { return expression ( ExpressionBuilder . exchangeExpression ( ) ) ; } public T inMessage ( ) { return expression ( ExpressionBuilder . inMessageExpression ( ) ) ; } public T outMessage ( ) { return expression ( ExpressionBuilder . outMessageExpression ( ) ) ; } public T body ( ) { return expression ( ExpressionBuilder . bodyExpression ( ) ) ; } public T body ( Class expectedType ) { return expression ( ExpressionBuilder . bodyExpression ( expectedType ) ) ; } public T outBody ( ) { return expression ( ExpressionBuilder . outBodyExpression ( ) ) ; } public T outBody ( Class expectedType ) { return expression ( ExpressionBuilder . outBodyExpression ( expectedType ) ) ; } public T header ( String name ) { return expression ( ExpressionBuilder . headerExpression ( name ) ) ; } public T headers ( ) { return expression ( ExpressionBuilder . headersExpression ( ) ) ; } public T outHeader ( String name ) { return expression ( ExpressionBuilder . outHeaderExpression ( name ) ) ; } public T outHeaders ( ) { return expression ( ExpressionBuilder . outHeadersExpression ( ) ) ; } public T property ( String name ) { return expression ( ExpressionBuilder . propertyExpression ( name ) ) ; } public T properties ( ) { return expression ( ExpressionBuilder . propertiesExpression ( ) ) ; } public T method ( String bean ) { MethodCallExpression expression = new MethodCallExpression ( bean ) ; setExpressionType ( expression ) ; return result ; } public T method ( String bean , String method ) { MethodCallExpression expression = new MethodCallExpression ( bean , method ) ; setExpressionType ( expression ) ; return result ; } public T beanShell ( String text ) { return language ( "beanshell" , text ) ; } public T el ( String text ) { return language ( "el" , text ) ; } public T groovy ( String text ) { return language ( "groovy" , text ) ; } public T javaScript ( String text ) { return language ( "js" , text ) ; } public T jxpath ( String text ) { return language ( "jxpath" , text ) ; } public T ognl ( String text ) { return language ( "ognl" , text ) ; } public T php ( String text ) { return language ( "php" , text ) ; } public T python ( String text ) { return language ( "python" , text ) ; } public T ruby ( String text ) { return language ( "ruby" , text ) ; } public T sql ( String text ) { return language ( "sql" , text ) ; } public T simple ( String text ) { return language ( "simple" , text ) ; } public T xpath ( String text ) { return language ( "xpath" , text ) ; } public T xpath ( String text , Class resultType ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Class resultType , Namespaces namespaces ) { return xpath ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Class resultType , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xpath ( String text , Namespaces namespaces ) { return xpath ( text , namespaces . getNamespaces ( ) ) ; } public T xpath ( String text , Map < String , String > namespaces ) { XPathExpression expression = new XPathExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text ) { return language ( "xquery" , text ) ; } public T xquery ( String text , Class resultType ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Class resultType , Namespaces namespaces ) { return xquery ( text , resultType , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Class resultType , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setResultType ( resultType ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T xquery ( String text , Namespaces namespaces ) { return xquery ( text , namespaces . getNamespaces ( ) ) ; } public T xquery ( String text , Map < String , String > namespaces ) { XQueryExpression expression = new XQueryExpression ( text ) ; expression . setNamespaces ( namespaces ) ; setExpressionType ( expression ) ; return result ; } public T language ( String language , String expression ) { setLanguage ( language ) ; setExpression ( expression ) ; return result ; } public String getLanguage ( ) { return language ; } public void setLanguage ( String language ) { this . language = language ; } } 	1
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "serialization" ) public class SerializationDataFormat extends DataFormatType { @ Override protected DataFormat createDataFormat ( RouteContext routeContext ) { return new org . apache . camel . impl . SerializationDataFormat ( ) ; } } 	0
package org . apache . camel . component . file . strategy ; import java . util . Map ; import org . apache . camel . Expression ; import org . apache . camel . component . file . FileProcessStrategy ; public final class FileProcessStrategyFactory { private FileProcessStrategyFactory ( ) { } public static FileProcessStrategy createFileProcessStrategy ( Map < String , Object > params ) { boolean isDelete = params . get ( "delete" ) != null ; boolean isLock = params . get ( "lock" ) != null ; String moveNamePrefix = ( String ) params . get ( "moveNamePrefix" ) ; String moveNamePostfix = ( String ) params . get ( "moveNamePostfix" ) ; String preMoveNamePrefix = ( String ) params . get ( "preMoveNamePrefix" ) ; String preMoveNamePostfix = ( String ) params . get ( "preMoveNamePostfix" ) ; Expression expression = ( Expression ) params . get ( "expression" ) ; Expression preMoveExpression = ( Expression ) params . get ( "preMoveExpression" ) ; boolean move = moveNamePrefix != null || moveNamePostfix != null ; boolean preMove = preMoveNamePrefix != null || preMoveNamePostfix != null ; if ( params . containsKey ( "noop" ) ) { return new NoOpFileProcessStrategy ( isLock ) ; } else if ( move || preMove ) { RenameFileProcessStrategy strategy = new RenameFileProcessStrategy ( isLock ) ; if ( move ) { strategy . setCommitRenamer ( new DefaultFileRenamer ( moveNamePrefix , moveNamePostfix ) ) ; } if ( preMove ) { strategy . setBeginRenamer ( new DefaultFileRenamer ( preMoveNamePrefix , preMoveNamePostfix ) ) ; } return strategy ; } else if ( expression != null || preMoveExpression != null ) { RenameFileProcessStrategy strategy = new RenameFileProcessStrategy ( isLock ) ; if ( expression != null ) { FileExpressionRenamer renamer = new FileExpressionRenamer ( ) ; renamer . setExpression ( expression ) ; strategy . setCommitRenamer ( renamer ) ; } if ( preMoveExpression != null ) { FileExpressionRenamer renamer = new FileExpressionRenamer ( ) ; renamer . setExpression ( preMoveExpression ) ; strategy . setBeginRenamer ( renamer ) ; } return strategy ; } else if ( isDelete ) { return new DeleteFileProcessStrategy ( isLock ) ; } else { return new RenameFileProcessStrategy ( isLock ) ; } } } 	1
package org . apache . camel . component . cxf . util ; import java . util . logging . Logger ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . stream . XMLStreamWriter ; import javax . xml . transform . Source ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . AbstractOutDatabindingInterceptor ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . staxutils . StaxUtils ; public class DataOutInterceptor extends AbstractOutDatabindingInterceptor { private static final Logger LOG = LogUtils . getL7dLogger ( DataOutInterceptor . class ) ; public DataOutInterceptor ( ) { super ( Phase . MARSHAL ) ; } public void handleMessage ( Message message ) throws Fault { XMLStreamWriter xmlWriter = getXMLStreamWriter ( message ) ; try { Source source = message . getContent ( Source . class ) ; if ( source != null ) { XMLStreamReader xmlReader = StaxUtils . createXMLStreamReader ( source ) ; StaxUtils . copy ( xmlReader , xmlWriter ) ; } } catch ( XMLStreamException e ) { throw new Fault ( new org . apache . cxf . common . i18n . Message ( "XMLSTREAM_EXCEPTION" , LOG , e ) , e ) ; } } } 	0
package org . apache . camel . converter . stream ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . Reader ; import java . io . StringReader ; import javax . xml . transform . TransformerException ; import javax . xml . transform . sax . SAXSource ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . jaxp . BytesSource ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public class StreamCacheConverter { private static final transient Log LOG = LogFactory . getLog ( StreamCacheConverter . class ) ; private XmlConverter converter = new XmlConverter ( ) ; @ Converter public StreamCache convertToStreamCache ( StreamSource source ) throws TransformerException { return new SourceCache ( converter . toString ( source ) ) ; } @ Converter public StreamCache convertToStreamCache ( StringSource source ) throws TransformerException { return null ; } @ Converter public StreamCache convertToStreamCache ( BytesSource source ) throws TransformerException { return null ; } @ Converter public StreamCache convertToStreamCache ( SAXSource source ) throws TransformerException { return new SourceCache ( converter . toString ( source ) ) ; } @ Converter public StreamCache convertToStreamCache ( InputStream stream ) throws IOException { return new InputStreamCache ( IOConverter . toBytes ( stream ) ) ; } @ Converter public StreamCache convertToStreamCache ( Reader reader ) throws IOException { return new ReaderCache ( IOConverter . toString ( reader ) ) ; } private class SourceCache extends StringSource implements StreamCache { private static final long serialVersionUID = 4147248494104812945L ; public SourceCache ( ) { } public SourceCache ( String text ) { super ( text ) ; } public void reset ( ) { } } private class InputStreamCache extends ByteArrayInputStream implements StreamCache { public InputStreamCache ( byte [ ] data ) { super ( data ) ; } } private class ReaderCache extends StringReader implements StreamCache { public ReaderCache ( String s ) { super ( s ) ; } public void reset ( ) { try { super . reset ( ) ; } catch ( IOException e ) { LOG . warn ( "Exception is thrown when resets the ReaderCache" , e ) ; } } public void close ( ) { } } } 	1
package org . apache . camel . converter . jaxb ; import java . util . HashMap ; import java . util . Map ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; import javax . xml . bind . Marshaller ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . util . JAXBSource ; import javax . xml . parsers . ParserConfigurationException ; import org . w3c . dom . Document ; import org . apache . camel . Converter ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . converter . HasAnnotation ; import org . apache . camel . converter . jaxp . XmlConverter ; public final class JaxbConverter { private XmlConverter jaxbConverter ; private Map < Class , JAXBContext > contexts = new HashMap < Class , JAXBContext > ( ) ; public XmlConverter getJaxbConverter ( ) { if ( jaxbConverter == null ) { jaxbConverter = new XmlConverter ( ) ; } return jaxbConverter ; } public void setJaxbConverter ( XmlConverter jaxbConverter ) { this . jaxbConverter = jaxbConverter ; } @ Converter public JAXBSource toSource ( @ HasAnnotation ( XmlRootElement . class ) Object value ) throws JAXBException { JAXBContext context = getJaxbContext ( value ) ; return new JAXBSource ( context , value ) ; } @ Converter public Document toDocument ( @ HasAnnotation ( XmlRootElement . class ) Object value ) throws JAXBException , ParserConfigurationException { JAXBContext context = getJaxbContext ( value ) ; Marshaller marshaller = context . createMarshaller ( ) ; Document doc = getJaxbConverter ( ) . createDocument ( ) ; marshaller . marshal ( value , doc ) ; return doc ; } @ Converter public static MessageType toMessageType ( Exchange exchange ) { return toMessageType ( exchange . getIn ( ) ) ; } @ Converter public static MessageType toMessageType ( Message in ) { MessageType answer = new MessageType ( ) ; answer . copyFrom ( in ) ; return answer ; } private synchronized JAXBContext getJaxbContext ( Object value ) throws JAXBException { JAXBContext context = contexts . get ( value . getClass ( ) ) ; if ( context == null ) { context = createJaxbContext ( value ) ; contexts . put ( value . getClass ( ) , context ) ; } return context ; } private JAXBContext createJaxbContext ( Object value ) throws JAXBException { if ( value == null ) { throw new IllegalArgumentException ( "Cannot convert from null value to JAXBSource" ) ; } return JAXBContext . newInstance ( value . getClass ( ) ) ; } } 	0
package org . apache . camel . impl ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class DefaultConsumer < E extends Exchange > extends ServiceSupport implements Consumer < E > { private Endpoint < E > endpoint ; private Processor processor ; private AsyncProcessor asyncProcessor ; private ExceptionHandler exceptionHandler ; public DefaultConsumer ( Endpoint < E > endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; } @ Override public String toString ( ) { return "Consumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } public AsyncProcessor getAsyncProcessor ( ) { if ( asyncProcessor == null ) { asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; } return asyncProcessor ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void handleException ( Throwable t ) { Throwable newt = ( t == null ) ? new Throwable ( "Handling [null] exception" ) : t ; getExceptionHandler ( ) . handleException ( newt ) ; } } 	1
package org . apache . camel . component . mina ; import java . net . SocketAddress ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangeTimedOutException ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . mina . common . ConnectFuture ; import org . apache . mina . common . IoConnector ; import org . apache . mina . common . IoHandler ; import org . apache . mina . common . IoHandlerAdapter ; import org . apache . mina . common . IoSession ; import org . apache . mina . transport . socket . nio . SocketConnector ; public class MinaProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( MinaProducer . class ) ; private IoSession session ; private MinaEndpoint endpoint ; private CountDownLatch latch ; private boolean lazySessionCreation ; private long timeout ; private IoConnector connector ; private boolean sync ; public MinaProducer ( MinaEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; this . lazySessionCreation = endpoint . isLazySessionCreation ( ) ; this . timeout = endpoint . getTimeout ( ) ; this . sync = endpoint . isSync ( ) ; } public void process ( Exchange exchange ) throws Exception { if ( session == null && ! lazySessionCreation ) { throw new IllegalStateException ( "Not started yet!" ) ; } if ( session == null || ! session . isConnected ( ) ) { openConnection ( ) ; } if ( endpoint . getCharsetName ( ) != null ) { exchange . setProperty ( Exchange . CHARSET_NAME , endpoint . getCharsetName ( ) ) ; } Object body = MinaPayloadHelper . getIn ( endpoint , exchange ) ; if ( body == null ) { LOG . warn ( "No payload to send for exchange: " + exchange ) ; return ; } if ( sync ) { latch = new CountDownLatch ( 1 ) ; ResponseHandler handler = ( ResponseHandler ) session . getHandler ( ) ; handler . reset ( ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Writing body: " + body ) ; } MinaHelper . writeBody ( session , body , exchange ) ; if ( sync ) { LOG . debug ( "Waiting for response" ) ; latch . await ( timeout , TimeUnit . MILLISECONDS ) ; if ( latch . getCount ( ) == 1 ) { throw new ExchangeTimedOutException ( exchange , timeout ) ; } ResponseHandler handler = ( ResponseHandler ) session . getHandler ( ) ; if ( handler . getCause ( ) != null ) { throw new CamelExchangeException ( "Response Handler had an exception" , exchange , handler . getCause ( ) ) ; } else if ( ! handler . isMessageRecieved ( ) ) { throw new CamelExchangeException ( "No response received from remote server: " + endpoint . getEndpointUri ( ) , exchange ) ; } else { if ( ExchangeHelper . isOutCapable ( exchange ) ) { MinaPayloadHelper . setOut ( exchange , handler . getMessage ( ) ) ; } else { MinaPayloadHelper . setIn ( exchange , handler . getMessage ( ) ) ; } } } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( ! lazySessionCreation ) { openConnection ( ) ; } } @ Override protected void doStop ( ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Stopping connector: " + connector + " at address: " + endpoint . getAddress ( ) ) ; } if ( connector instanceof SocketConnector ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Setting SocketConnector WorkerTimeout=0 to force MINA stopping its resources faster" ) ; } ( ( SocketConnector ) connector ) . setWorkerTimeout ( 0 ) ; } if ( session != null ) { session . close ( ) ; } super . doStop ( ) ; } private void openConnection ( ) { SocketAddress address = endpoint . getAddress ( ) ; connector = endpoint . getConnector ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating connector to address: " + address + " using connector: " + connector + " timeout: " + timeout + " millis." ) ; } IoHandler ioHandler = new ResponseHandler ( endpoint ) ; ConnectFuture future = connector . connect ( address , ioHandler , endpoint . getConnectorConfig ( ) ) ; future . join ( ) ; session = future . getSession ( ) ; } private final class ResponseHandler extends IoHandlerAdapter { private MinaEndpoint endpoint ; private Object message ; private Throwable cause ; private boolean messageRecieved ; private ResponseHandler ( MinaEndpoint endpoint ) { this . endpoint = endpoint ; } public void reset ( ) { this . message = null ; this . cause = null ; this . messageRecieved = false ; } @ Override public void messageReceived ( IoSession ioSession , Object message ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message received: " + message ) ; } this . message = message ; messageRecieved = true ; cause = null ; countDown ( ) ; } protected void countDown ( ) { CountDownLatch downLatch = latch ; if ( downLatch != null ) { downLatch . countDown ( ) ; } } @ Override public void sessionClosed ( IoSession session ) throws Exception { if ( sync && message == null ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Session closed but no message received from address: " + this . endpoint . getAddress ( ) ) ; } countDown ( ) ; } } @ Override public void exceptionCaught ( IoSession ioSession , Throwable cause ) { LOG . error ( "Exception on receiving message from address: " + this . endpoint . getAddress ( ) + " using connector: " + this . endpoint . getConnector ( ) , cause ) ; this . message = null ; this . messageRecieved = false ; this . cause = cause ; if ( ioSession != null ) { ioSession . close ( ) ; } } public Throwable getCause ( ) { return this . cause ; } public Object getMessage ( ) { return this . message ; } public boolean isMessageRecieved ( ) { return messageRecieved ; } } } 	0
package org . apache . camel . view ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . util . List ; import java . util . Properties ; import javax . xml . bind . Binder ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Result ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . stream . StreamResult ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . RuntimeTransformException ; import org . apache . camel . builder . xml . Namespaces ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . RoutesType ; import org . apache . camel . util . ObjectHelper ; public class ModelFileGenerator { private static final String DEFAULT_ROOT_ELEMENT_NAME = "routes" ; private final JAXBContext jaxbContext ; private Binder < Node > binder ; public ModelFileGenerator ( JAXBContext jaxbContext ) { this . jaxbContext = jaxbContext ; } public void marshalRoutesUsingJaxb ( String fileName , List < RouteType > routeTypes ) throws IOException { OutputStream outputStream = outputStream ( fileName ) ; try { XmlConverter converter = converter ( ) ; Document doc = converter . createDocument ( ) ; Element root = doc . createElement ( rootElementName ( ) ) ; root . setAttribute ( "xmlns" , Namespaces . DEFAULT_NAMESPACE ) ; doc . appendChild ( root ) ; for ( RouteType routeType : routeTypes ) { addJaxbElementToNode ( root , routeType ) ; } Result result = new StreamResult ( new OutputStreamWriter ( outputStream , XmlConverter . defaultCharset ) ) ; copyToResult ( converter , doc , result ) ; } catch ( ParserConfigurationException e ) { throw new RuntimeTransformException ( e ) ; } catch ( TransformerException e ) { throw new RuntimeTransformException ( e ) ; } finally { outputStream . close ( ) ; } } private XmlConverter converter ( ) { XmlConverter converter = new XmlConverter ( ) ; TransformerFactory transformerFactory = converter . getTransformerFactory ( ) ; transformerFactory . setAttribute ( "indent-number" , new Integer ( 2 ) ) ; return converter ; } private void copyToResult ( XmlConverter converter , Document doc , Result result ) throws TransformerException { Properties outputProperties = converter . defaultOutputProperties ( ) ; outputProperties . put ( OutputKeys . OMIT_XML_DECLARATION , "no" ) ; outputProperties . put ( OutputKeys . INDENT , "yes" ) ; converter . toResult ( converter . toSource ( doc ) , result , outputProperties ) ; } private void addJaxbElementToNode ( Node node , Object jaxbElement ) { try { if ( binder == null ) { binder = jaxbContext . createBinder ( ) ; } binder . marshal ( jaxbElement , node ) ; } catch ( JAXBException e ) { throw new RuntimeCamelException ( e ) ; } } private String rootElementName ( ) { XmlRootElement annotation = ( RoutesType . class ) . getAnnotation ( XmlRootElement . class ) ; if ( annotation != null ) { String elementName = annotation . name ( ) ; if ( ObjectHelper . isNotNullAndNonEmpty ( elementName ) ) { return elementName ; } } return DEFAULT_ROOT_ELEMENT_NAME ; } private OutputStream outputStream ( String fileName ) throws FileNotFoundException { File file = new File ( fileName ) ; if ( ! file . exists ( ) ) { File parentFile = file . getParentFile ( ) ; if ( parentFile != null ) { parentFile . mkdirs ( ) ; } } return new FileOutputStream ( file ) ; } } 	1
package org . apache . camel . builder . xml ; public class StringResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new StringResultHandler ( ) ; } } 	0
package org . apache . camel . util ; import org . apache . camel . Message ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . converter . stream . StreamCache ; public final class MessageHelper { private MessageHelper ( ) { } public static String extractBodyAsString ( Message message ) { if ( message == null ) { return null ; } StreamCache newBody = null ; try { newBody = message . getBody ( StreamCache . class ) ; if ( newBody != null ) { message . setBody ( newBody ) ; } } catch ( NoTypeConversionAvailableException ex ) { } Object answer ; try { answer = message . getBody ( String . class ) ; } catch ( NoTypeConversionAvailableException ex ) { answer = message . getBody ( ) ; } if ( newBody != null ) { newBody . reset ( ) ; } return answer != null ? answer . toString ( ) : null ; } public static String getBodyTypeName ( Message message ) { if ( message == null ) { return null ; } String answer = ObjectHelper . classCanonicalName ( message . getBody ( ) ) ; if ( answer != null && answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } public static void resetStreamCache ( Message message ) { if ( message == null ) { return ; } if ( message . getBody ( ) instanceof StreamCache ) { ( ( StreamCache ) message . getBody ( ) ) . reset ( ) ; } } } 	1
package org . apache . camel . component . jms ; import java . io . File ; import java . util . Map ; import javax . jms . Destination ; import javax . jms . JMSException ; import javax . jms . Message ; import javax . jms . Queue ; import javax . jms . Topic ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultMessage ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JmsMessage extends DefaultMessage { private static final transient Log LOG = LogFactory . getLog ( JmsMessage . class ) ; private Message jmsMessage ; private JmsBinding binding ; public JmsMessage ( ) { } public JmsMessage ( Message jmsMessage ) { setJmsMessage ( jmsMessage ) ; } public JmsMessage ( Message jmsMessage , JmsBinding binding ) { this ( jmsMessage ) ; setBinding ( binding ) ; } @ Override public String toString ( ) { if ( jmsMessage != null ) { return "JmsMessage: " + jmsMessage ; } else { return "JmsMessage: " + getBody ( ) ; } } @ Override public void copyFrom ( org . apache . camel . Message that ) { boolean copyMessageId = true ; if ( that instanceof JmsMessage ) { JmsMessage thatMessage = ( JmsMessage ) that ; this . jmsMessage = thatMessage . jmsMessage ; if ( this . jmsMessage != null ) { copyMessageId = false ; } } if ( copyMessageId ) { setMessageId ( that . getMessageId ( ) ) ; } setBody ( that . getBody ( ) ) ; getHeaders ( ) . putAll ( that . getHeaders ( ) ) ; } public Message getJmsMessage ( ) { return jmsMessage ; } public JmsBinding getBinding ( ) { if ( binding == null ) { Exchange exchange = getExchange ( ) ; if ( exchange instanceof JmsExchange ) { JmsExchange jmsExchange = ( JmsExchange ) exchange ; return jmsExchange . getBinding ( ) ; } else { return new JmsBinding ( ) ; } } return binding ; } public void setBinding ( JmsBinding binding ) { this . binding = binding ; } public void setJmsMessage ( Message jmsMessage ) { try { setMessageId ( jmsMessage . getJMSMessageID ( ) ) ; } catch ( JMSException e ) { LOG . warn ( "Unable to retrieve JMSMessageID from JMS Message" , e ) ; } this . jmsMessage = jmsMessage ; } public Object getHeader ( String name ) { Object answer = null ; if ( jmsMessage != null && ! name . startsWith ( "JMS" ) ) { try { answer = jmsMessage . getObjectProperty ( name ) ; } catch ( JMSException e ) { throw new MessagePropertyAccessException ( name , e ) ; } } if ( answer == null ) { answer = super . getHeader ( name ) ; } return answer ; } @ Override public JmsMessage newInstance ( ) { return new JmsMessage ( ) ; } public boolean shouldCreateNewMessage ( ) { return super . hasPopulatedHeaders ( ) ; } @ Override protected Object createBody ( ) { if ( jmsMessage != null ) { return getBinding ( ) . extractBodyFromJms ( getExchange ( ) , jmsMessage ) ; } return null ; } @ Override protected void populateInitialHeaders ( Map < String , Object > map ) { if ( jmsMessage != null && map != null ) { map . putAll ( getBinding ( ) . extractHeadersFromJms ( jmsMessage ) ) ; } } @ Override protected String createMessageId ( ) { if ( jmsMessage == null ) { LOG . info ( "The jmsMessage is not set yet, call the super's createMessageId" ) ; return super . createMessageId ( ) ; } try { String id = getDestinationAsString ( jmsMessage . getJMSDestination ( ) ) + jmsMessage . getJMSMessageID ( ) ; return getSanitizedString ( id ) ; } catch ( JMSException e ) { LOG . error ( "Failed to get message id from message " + jmsMessage , e ) ; return super . createMessageId ( ) ; } } private String getDestinationAsString ( Destination destination ) throws JMSException { String result ; if ( destination == null ) { result = "null destination!" + File . separator ; } else if ( destination instanceof Topic ) { result = "topic" + File . separator + ( ( Topic ) destination ) . getTopicName ( ) + File . separator ; } else { result = "queue" + File . separator + ( ( Queue ) destination ) . getQueueName ( ) + File . separator ; } return result ; } private String getSanitizedString ( Object value ) { return value != null ? value . toString ( ) . replaceAll ( "[^a-zA-Z0-9\\.\\_\\-]" , "_" ) : "" ; } } 	0
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . ObjectInput ; import java . io . ObjectInputStream ; import java . io . ObjectOutput ; import java . io . ObjectOutputStream ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . Reader ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import java . io . Writer ; import java . net . URL ; import javax . xml . transform . TransformerException ; import javax . xml . transform . dom . DOMSource ; import org . apache . camel . Converter ; import org . apache . camel . Exchange ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class IOConverter { private static final transient Log LOG = LogFactory . getLog ( IOConverter . class ) ; private static XmlConverter xmlConverter ; private IOConverter ( ) { } @ Converter public static InputStream toInputStream ( URL url ) throws IOException { return url . openStream ( ) ; } @ Converter public static InputStream toInputStream ( File file ) throws FileNotFoundException { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } @ Converter public static BufferedReader toReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new FileReader ( file ) ) ; } @ Converter public static File toFile ( String name ) throws FileNotFoundException { return new File ( name ) ; } @ Converter public static OutputStream toOutputStream ( File file ) throws FileNotFoundException { return new BufferedOutputStream ( new FileOutputStream ( file ) ) ; } @ Converter public static BufferedWriter toWriter ( File file ) throws IOException { return new BufferedWriter ( new FileWriter ( file ) ) ; } @ Converter public static Reader toReader ( InputStream in ) throws FileNotFoundException { return new InputStreamReader ( in ) ; } @ Converter public static Writer toWriter ( OutputStream out ) throws FileNotFoundException { return new OutputStreamWriter ( out ) ; } @ Converter public static StringReader toReader ( String text ) { return new StringReader ( text ) ; } @ Converter public static InputStream toInputStream ( String text , Exchange exchange ) { if ( exchange != null ) { String charsetName = exchange . getProperty ( Exchange . CHARSET_NAME , String . class ) ; if ( charsetName != null ) { try { return toInputStream ( text . getBytes ( charsetName ) ) ; } catch ( UnsupportedEncodingException e ) { LOG . warn ( "Can't convert the String into the bytes with the charset " + charsetName , e ) ; } } } return toInputStream ( text . getBytes ( ) ) ; } @ Converter public static InputStream toInputStream ( BufferedReader buffer , Exchange exchange ) throws IOException { return toInputStream ( toString ( buffer ) , exchange ) ; } @ Converter public static InputStream toInputStrean ( DOMSource source ) throws TransformerException , IOException { XmlConverter xmlConverter = createXmlConverter ( ) ; ByteArrayInputStream bais = new ByteArrayInputStream ( xmlConverter . toString ( source ) . getBytes ( ) ) ; return bais ; } private static XmlConverter createXmlConverter ( ) { if ( xmlConverter == null ) { xmlConverter = new XmlConverter ( ) ; } return xmlConverter ; } @ Converter public static String toString ( byte [ ] data , Exchange exchange ) { if ( exchange != null ) { String charsetName = exchange . getProperty ( Exchange . CHARSET_NAME , String . class ) ; if ( charsetName != null ) { try { return new String ( data , charsetName ) ; } catch ( UnsupportedEncodingException e ) { LOG . warn ( "Can't convert the byte to String with the charset " + charsetName , e ) ; } } } return new String ( data ) ; } @ Converter public static String toString ( File file ) throws IOException { return toString ( toReader ( file ) ) ; } @ Converter public static byte [ ] toByteArray ( File file ) throws IOException { return toBytes ( toInputStream ( file ) ) ; } @ Converter public static byte [ ] toByteArray ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toByteArray ( ( BufferedReader ) reader ) ; } else { return toByteArray ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( URL url ) throws IOException { return toString ( toInputStream ( url ) ) ; } @ Converter public static String toString ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toString ( ( BufferedReader ) reader ) ; } else { return toString ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } try { CollectionStringBuffer builder = new CollectionStringBuffer ( "\n" ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { return builder . toString ( ) ; } builder . append ( line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } } @ Converter public static byte [ ] toByteArray ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } StringBuilder sb = new StringBuilder ( 1024 ) ; char [ ] buf = new char [ 1024 ] ; try { int len = reader . read ( buf ) ; if ( len != - 1 ) { sb . append ( buf , 0 , len ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } return sb . toString ( ) . getBytes ( ) ; } @ Converter public static String toString ( InputStream in ) throws IOException { return toString ( toReader ( in ) ) ; } @ Converter public static InputStream toInputStream ( byte [ ] data ) { return new ByteArrayInputStream ( data ) ; } @ Converter public static ObjectOutput toObjectOutput ( OutputStream stream ) throws IOException { if ( stream instanceof ObjectOutput ) { return ( ObjectOutput ) stream ; } else { return new ObjectOutputStream ( stream ) ; } } @ Converter public static ObjectInput toObjectInput ( InputStream stream ) throws IOException { if ( stream instanceof ObjectInput ) { return ( ObjectInput ) stream ; } else { return new ObjectInputStream ( stream ) ; } } @ Converter public static byte [ ] toBytes ( InputStream stream ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; copy ( stream , bos ) ; return bos . toByteArray ( ) ; } public static void copy ( InputStream stream , OutputStream os ) throws IOException { byte [ ] data = new byte [ 4096 ] ; int read = stream . read ( data ) ; while ( read != - 1 ) { os . write ( data , 0 , read ) ; read = stream . read ( data ) ; } os . flush ( ) ; } } 	1
package org . apache . camel . component . spring . integration ; public final class SpringIntegrationHelper { private SpringIntegrationHelper ( ) { } public static void checkSpringBeanInstance ( Object bean , String name ) { if ( bean == null ) { throw new IllegalArgumentException ( "Can't find the bean: " + name + " from the Spring context" ) ; } } } 	0
package org . apache . camel . spi ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Intercept ; import org . apache . camel . Processor ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . dataformat . DataFormatType ; public interface RouteContext { Endpoint < ? extends Exchange > getEndpoint ( ) ; FromType getFrom ( ) ; RouteType getRoute ( ) ; CamelContext getCamelContext ( ) ; Processor createProcessor ( ProcessorType node ) throws Exception ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri ) ; Endpoint < ? extends Exchange > resolveEndpoint ( String uri , String ref ) ; < T > T lookup ( String name , Class < T > type ) ; void commit ( ) ; void addEventDrivenProcessor ( Processor processor ) ; void intercept ( Intercept interceptor ) ; Processor createProceedProcessor ( ) ; List < InterceptStrategy > getInterceptStrategies ( ) ; void setInterceptStrategies ( List < InterceptStrategy > interceptStrategies ) ; void addInterceptStrategy ( InterceptStrategy interceptStrategy ) ; ErrorHandlerWrappingStrategy getErrorHandlerWrappingStrategy ( ) ; void setErrorHandlerWrappingStrategy ( ErrorHandlerWrappingStrategy strategy ) ; void setIsRouteAdded ( boolean value ) ; boolean isRouteAdded ( ) ; DataFormatType getDataFormat ( String ref ) ; } 	1
package org . apache . camel . component . http . helper ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; public class LoadingByteArrayOutputStream extends ByteArrayOutputStream { public LoadingByteArrayOutputStream ( ) { super ( 1024 ) ; } public LoadingByteArrayOutputStream ( int i ) { super ( i ) ; } public ByteArrayInputStream createInputStream ( ) { return new ByteArrayInputStream ( buf , 0 , count ) ; } public byte [ ] toByteArray ( ) { if ( count != buf . length ) { buf = super . toByteArray ( ) ; } return buf ; } } 	0
package org . apache . camel . processor . validation ; import java . util . ArrayList ; import java . util . List ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultValidationErrorHandler implements ValidatorErrorHandler { private static final transient Log LOG = LogFactory . getLog ( DefaultValidationErrorHandler . class ) ; private List < SAXParseException > warnings = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > errors = new ArrayList < SAXParseException > ( ) ; private List < SAXParseException > fatalErrors = new ArrayList < SAXParseException > ( ) ; public void warning ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "warning: " + e , e ) ; } warnings . add ( e ) ; } public void error ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "error: " + e , e ) ; } errors . add ( e ) ; } public void fatalError ( SAXParseException e ) throws SAXException { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "fatalError: " + e , e ) ; } fatalErrors . add ( e ) ; } public void reset ( ) { warnings . clear ( ) ; errors . clear ( ) ; fatalErrors . clear ( ) ; } public boolean isValid ( ) { return errors . isEmpty ( ) && fatalErrors . isEmpty ( ) ; } public void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } public void handleErrors ( Exchange exchange , Object schema ) throws ValidationException { if ( ! isValid ( ) ) { throw new SchemaValidationException ( exchange , schema , fatalErrors , errors , warnings ) ; } } } 	1
package org . apache . camel . dataformat . xstream ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . HashMap ; import javax . xml . stream . XMLStreamException ; import com . thoughtworks . xstream . io . HierarchicalStreamReader ; import com . thoughtworks . xstream . io . HierarchicalStreamWriter ; import com . thoughtworks . xstream . io . xml . QNameMap ; import com . thoughtworks . xstream . io . xml . StaxReader ; import com . thoughtworks . xstream . io . xml . StaxWriter ; import org . apache . camel . Exchange ; import org . apache . camel . spi . DataFormat ; import org . codehaus . jettison . mapped . MappedXMLInputFactory ; import org . codehaus . jettison . mapped . MappedXMLOutputFactory ; public class JsonDataFormat extends AbstractXStreamWrapper { private final MappedXMLOutputFactory mof ; private final MappedXMLInputFactory mif ; public JsonDataFormat ( ) { final HashMap nstjsons = new HashMap ( ) ; mof = new MappedXMLOutputFactory ( nstjsons ) ; mif = new MappedXMLInputFactory ( nstjsons ) ; } protected HierarchicalStreamWriter createHierarchicalStreamWriter ( Exchange exchange , Object body , OutputStream stream ) throws XMLStreamException { return new StaxWriter ( new QNameMap ( ) , mof . createXMLStreamWriter ( stream ) ) ; } protected HierarchicalStreamReader createHierarchicalStreamReader ( Exchange exchange , InputStream stream ) throws XMLStreamException { return new StaxReader ( new QNameMap ( ) , mif . createXMLStreamReader ( stream ) ) ; } } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import javax . activation . DataHandler ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; public class DefaultMessage extends MessageSupport { private Map < String , Object > headers ; private Map < String , DataHandler > attachments ; @ Override public String toString ( ) { return "Message: " + getBody ( ) ; } public Object getHeader ( String name ) { return getHeaders ( ) . get ( name ) ; } public < T > T getHeader ( String name , Class < T > type ) { Object value = getHeader ( name ) ; Exchange e = getExchange ( ) ; return e . getContext ( ) . getTypeConverter ( ) . convertTo ( type , e , value ) ; } public void setHeader ( String name , Object value ) { if ( headers == null ) { headers = createHeaders ( ) ; } headers . put ( name , value ) ; } public Object removeHeader ( String name ) { if ( headers != null ) { return headers . remove ( name ) ; } else { return null ; } } public Map < String , Object > getHeaders ( ) { if ( headers == null ) { headers = createHeaders ( ) ; } return headers ; } public void setHeaders ( Map < String , Object > headers ) { this . headers = headers ; } public DefaultMessage newInstance ( ) { return new DefaultMessage ( ) ; } protected Map < String , Object > createHeaders ( ) { HashMap < String , Object > map = new HashMap < String , Object > ( ) ; populateInitialHeaders ( map ) ; return map ; } protected void populateInitialHeaders ( Map < String , Object > map ) { } protected Map < String , DataHandler > createAttachments ( ) { HashMap < String , DataHandler > map = new HashMap < String , DataHandler > ( ) ; populateInitialAttachments ( map ) ; return map ; } protected void populateInitialAttachments ( Map < String , DataHandler > map ) { } public void addAttachment ( String id , DataHandler content ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } attachments . put ( id , content ) ; } public DataHandler getAttachment ( String id ) { return getAttachments ( ) . get ( id ) ; } public Set < String > getAttachmentNames ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments . keySet ( ) ; } public void removeAttachment ( String id ) { if ( attachments != null && attachments . containsKey ( id ) ) { attachments . remove ( id ) ; } } public Map < String , DataHandler > getAttachments ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return attachments ; } public void setAttachments ( Map < String , DataHandler > attachments ) { this . attachments = attachments ; } public boolean hasAttachments ( ) { if ( attachments == null ) { attachments = createAttachments ( ) ; } return this . attachments != null && this . attachments . size ( ) > 0 ; } protected boolean hasPopulatedHeaders ( ) { return headers != null ; } } 	1
package org . apache . camel . processor ; import java . util . Collection ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public class CompositeProcessor extends ServiceSupport implements Processor { private final Collection < Processor > processors ; public CompositeProcessor ( Collection < Processor > processors ) { this . processors = processors ; } public void process ( Exchange exchange ) throws Exception { for ( Processor processor : processors ) { processor . process ( exchange ) ; } } @ Override public String toString ( ) { StringBuilder builder = new StringBuilder ( "[ " ) ; boolean first = true ; for ( Processor processor : processors ) { if ( first ) { first = false ; } else { builder . append ( ", " ) ; } builder . append ( processor . toString ( ) ) ; } builder . append ( " ]" ) ; return builder . toString ( ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processors ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processors ) ; } } 	0
package org . apache . camel . processor ; import java . io . Serializable ; import java . util . Random ; import org . apache . camel . model . LoggingLevel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RedeliveryPolicy extends DelayPolicy { protected static transient Random randomNumberGenerator ; private static final transient Log LOG = LogFactory . getLog ( RedeliveryPolicy . class ) ; protected int maximumRedeliveries = 5 ; protected long maximumRedeliveryDelay = 60 * 1000L ; protected double backOffMultiplier = 2 ; protected boolean useExponentialBackOff ; protected double collisionAvoidanceFactor = 0.15d ; protected boolean useCollisionAvoidance ; protected LoggingLevel retriesExhaustedLogLevel = LoggingLevel . ERROR ; protected LoggingLevel retryAttemptedLogLevel = LoggingLevel . ERROR ; public RedeliveryPolicy ( ) { } @ Override public String toString ( ) { return "RedeliveryPolicy[maximumRedeliveries=" + maximumRedeliveries + ", initialRedeliveryDelay=" + delay + ", maximumRedeliveryDelay=" + maximumRedeliveryDelay + ", retriesExhaustedLogLevel=" + retriesExhaustedLogLevel + ", retryAttemptedLogLevel=" + retryAttemptedLogLevel + ", useExponentialBackOff=" + useExponentialBackOff + ", backOffMultiplier=" + backOffMultiplier + ", useCollisionAvoidance=" + useCollisionAvoidance + ", collisionAvoidanceFactor=" + collisionAvoidanceFactor + "]" ; } public RedeliveryPolicy copy ( ) { try { return ( RedeliveryPolicy ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( "Could not clone: " + e , e ) ; } } public boolean shouldRedeliver ( int redeliveryCounter ) { if ( getMaximumRedeliveries ( ) < 0 ) { return true ; } return redeliveryCounter <= getMaximumRedeliveries ( ) ; } public long sleep ( long redeliveryDelay ) { redeliveryDelay = getRedeliveryDelay ( redeliveryDelay ) ; if ( redeliveryDelay > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + redeliveryDelay + " millis until attempting redelivery" ) ; } try { Thread . sleep ( redeliveryDelay ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Thread interrupted: " + e , e ) ; } } } return redeliveryDelay ; } public long getRedeliveryDelay ( long previousDelay ) { long redeliveryDelay ; if ( previousDelay == 0 ) { redeliveryDelay = delay ; } else if ( useExponentialBackOff && backOffMultiplier > 1 ) { redeliveryDelay = Math . round ( backOffMultiplier * previousDelay ) ; } else { redeliveryDelay = previousDelay ; } if ( useCollisionAvoidance ) { Random random = getRandomNumberGenerator ( ) ; double variance = ( random . nextBoolean ( ) ? collisionAvoidanceFactor : - collisionAvoidanceFactor ) * random . nextDouble ( ) ; redeliveryDelay += redeliveryDelay * variance ; } if ( maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay ) { redeliveryDelay = maximumRedeliveryDelay ; } return redeliveryDelay ; } public RedeliveryPolicy maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicy initialRedeliveryDelay ( long initialRedeliveryDelay ) { setDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicy useCollisionAvoidance ( ) { setUseCollisionAvoidance ( true ) ; return this ; } public RedeliveryPolicy useExponentialBackOff ( ) { setUseExponentialBackOff ( true ) ; return this ; } public RedeliveryPolicy backOffMultiplier ( double multiplier ) { useExponentialBackOff ( ) ; setBackOffMultiplier ( multiplier ) ; return this ; } public RedeliveryPolicy collisionAvoidancePercent ( double collisionAvoidancePercent ) { useCollisionAvoidance ( ) ; setCollisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public RedeliveryPolicy maximumRedeliveryDelay ( long maximumRedeliveryDelay ) { setMaximumRedeliveryDelay ( maximumRedeliveryDelay ) ; return this ; } public RedeliveryPolicy retriesExhaustedLogLevel ( LoggingLevel retriesExhaustedLogLevel ) { setRetriesExhaustedLogLevel ( retriesExhaustedLogLevel ) ; return this ; } public RedeliveryPolicy retryAttemptedLogLevel ( LoggingLevel retryAttemptedLogLevel ) { setRetryAttemptedLogLevel ( retryAttemptedLogLevel ) ; return this ; } public double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public short getCollisionAvoidancePercent ( ) { return ( short ) Math . round ( collisionAvoidanceFactor * 100 ) ; } public void setCollisionAvoidancePercent ( double collisionAvoidancePercent ) { this . collisionAvoidanceFactor = collisionAvoidancePercent * 0.01d ; } public double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public long getInitialRedeliveryDelay ( ) { return getDelay ( ) ; } public void setInitialRedeliveryDelay ( long initialRedeliveryDelay ) { setDelay ( initialRedeliveryDelay ) ; } public int getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( int maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public long getMaximumRedeliveryDelay ( ) { return maximumRedeliveryDelay ; } public void setMaximumRedeliveryDelay ( long maximumRedeliveryDelay ) { this . maximumRedeliveryDelay = maximumRedeliveryDelay ; } public boolean isUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public boolean isUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } protected static synchronized Random getRandomNumberGenerator ( ) { if ( randomNumberGenerator == null ) { randomNumberGenerator = new Random ( ) ; } return randomNumberGenerator ; } public void setRetriesExhaustedLogLevel ( LoggingLevel retriesExhaustedLogLevel ) { this . retriesExhaustedLogLevel = retriesExhaustedLogLevel ; } public LoggingLevel getRetriesExhaustedLogLevel ( ) { return retriesExhaustedLogLevel ; } public void setRetryAttemptedLogLevel ( LoggingLevel retryAttemptedLogLevel ) { this . retryAttemptedLogLevel = retryAttemptedLogLevel ; } public LoggingLevel getRetryAttemptedLogLevel ( ) { return retryAttemptedLogLevel ; } } 	1
package org . apache . camel . component . xquery ; import java . lang . annotation . Annotation ; import net . sf . saxon . functions . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . component . bean . DefaultAnnotationExpressionFactory ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . language . NamespacePrefix ; public class XQueryAnnotationExpressionFactory extends DefaultAnnotationExpressionFactory { @ Override public Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) { String xQuery = getExpressionFromAnnotation ( annotation ) ; XQueryBuilder builder = XQueryBuilder . xquery ( xQuery ) ; if ( annotation instanceof XQuery ) { XQuery xQueryAnnotation = ( XQuery ) annotation ; NamespacePrefix [ ] namespaces = xQueryAnnotation . namespaces ( ) ; if ( namespaces != null ) { for ( NamespacePrefix namespacePrefix : namespaces ) { } } } if ( expressionReturnType . isAssignableFrom ( String . class ) ) { builder . setResultsFormat ( ResultFormat . String ) ; } else if ( expressionReturnType . isAssignableFrom ( Collection . class ) ) { builder . setResultsFormat ( ResultFormat . List ) ; } return builder ; } } 	0
package org . apache . camel . builder ; import java . util . zip . Deflater ; import org . w3c . dom . Node ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . dataformat . ArtixDSContentType ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . CsvDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . HL7DataFormat ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . JsonDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . StringDataFormat ; import org . apache . camel . model . dataformat . TidyMarkupDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . model . dataformat . XStreamDataFormat ; import org . apache . camel . model . dataformat . ZipDataFormat ; import org . apache . camel . spi . DataFormat ; public class DataFormatClause < T extends ProcessorType > { private final T processorType ; private final Operation operation ; public enum Operation { Marshal , Unmarshal } public DataFormatClause ( T processorType , Operation operation ) { this . processorType = processorType ; this . operation = operation ; } public T artixDS ( ) { return dataFormat ( new ArtixDSDataFormat ( ) ) ; } public T artixDS ( Class < ? > dataObjectType ) { return dataFormat ( new ArtixDSDataFormat ( dataObjectType ) ) ; } public T artixDS ( Class < ? > elementType , ArtixDSContentType contentType ) { return dataFormat ( new ArtixDSDataFormat ( elementType , contentType ) ) ; } public T artixDS ( ArtixDSContentType contentType ) { return dataFormat ( new ArtixDSDataFormat ( contentType ) ) ; } public T csv ( ) { return dataFormat ( new CsvDataFormat ( ) ) ; } public T hl7 ( ) { return dataFormat ( new HL7DataFormat ( ) ) ; } public T jaxb ( ) { return dataFormat ( new JaxbDataFormat ( ) ) ; } public T jaxb ( boolean prettyPrint ) { return dataFormat ( new JaxbDataFormat ( prettyPrint ) ) ; } public T serialization ( ) { return dataFormat ( new SerializationDataFormat ( ) ) ; } public T string ( ) { return string ( null ) ; } public T string ( String charset ) { StringDataFormat sdf = new StringDataFormat ( ) ; sdf . setCharset ( charset ) ; return dataFormat ( sdf ) ; } public T xmlBeans ( ) { return dataFormat ( new XMLBeansDataFormat ( ) ) ; } public T tidyMarkup ( Class < ? > dataObjectType ) { return dataFormat ( new TidyMarkupDataFormat ( dataObjectType ) ) ; } public T tidyMarkup ( ) { return dataFormat ( new TidyMarkupDataFormat ( Node . class ) ) ; } public T xstream ( ) { return dataFormat ( new XStreamDataFormat ( ) ) ; } public T json ( ) { return dataFormat ( new JsonDataFormat ( ) ) ; } private T dataFormat ( DataFormatType dataFormatType ) { switch ( operation ) { case Unmarshal : return ( T ) processorType . unmarshal ( dataFormatType ) ; case Marshal : return ( T ) processorType . marshal ( dataFormatType ) ; default : throw new IllegalArgumentException ( "Unknown DataFormat operation: " + operation ) ; } } public T zip ( ) { ZipDataFormat zdf = new ZipDataFormat ( Deflater . DEFAULT_COMPRESSION ) ; return dataFormat ( zdf ) ; } public T zip ( int compressionLevel ) { ZipDataFormat zdf = new ZipDataFormat ( compressionLevel ) ; return dataFormat ( zdf ) ; } } 	1
@ javax . xml . bind . annotation . XmlSchema ( namespace = "http://activemq.apache.org/camel/schema/spring" , elementFormDefault = javax . xml . bind . annotation . XmlNsForm . QUALIFIED ) package org . apache . camel . model . dataformat ; 	0
package org . apache . camel . model ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Intercept ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "intercept" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class InterceptType extends OutputType < ProcessorType > { @ XmlTransient private ProceedType proceed = new ProceedType ( ) ; @ XmlTransient private Boolean stopIntercept = Boolean . FALSE ; @ XmlTransient private Boolean usePredicate = Boolean . FALSE ; @ Override public String toString ( ) { return "Intercept[" + getOutputs ( ) + "]" ; } @ Override public String getShortName ( ) { return "intercept" ; } @ Override public String getLabel ( ) { return "intercept" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Interceptor interceptor = new Interceptor ( ) ; routeContext . intercept ( interceptor ) ; final Processor interceptRoute = createOutputsProcessor ( routeContext ) ; interceptor . setInterceptorLogic ( interceptRoute ) ; return interceptor ; } public ChoiceType when ( Predicate predicate ) { usePredicate = Boolean . TRUE ; ChoiceType choice = choice ( ) . when ( PredicateBuilder . not ( predicate ) ) ; choice . addOutput ( proceed ) ; return choice . otherwise ( ) ; } public ProceedType getProceed ( ) { return proceed ; } public void stopIntercept ( ) { setStopIntercept ( Boolean . TRUE ) ; } @ XmlElement ( name = "stop" , required = false ) public void setStop ( String elementValue ) { stopIntercept ( ) ; } public InterceptType createProxy ( ) { InterceptType answer = new InterceptType ( ) ; answer . getOutputs ( ) . addAll ( this . getOutputs ( ) ) ; answer . setStopIntercept ( getStopIntercept ( ) ) ; if ( answer . getOutputs ( ) . size ( ) > 0 ) { ChoiceType choice = null ; for ( ProcessorType processor : answer . getOutputs ( ) ) { if ( processor instanceof ChoiceType ) { choice = ( ChoiceType ) processor ; if ( usePredicate . booleanValue ( ) && getStopIntercept ( ) . booleanValue ( ) ) { WhenType when = choice . getWhenClauses ( ) . get ( 0 ) ; when . getOutputs ( ) . remove ( this . getProceed ( ) ) ; } addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , choice . getWhenClauses ( ) . get ( choice . getWhenClauses ( ) . size ( ) - 1 ) , usePredicate . booleanValue ( ) && ! getStopIntercept ( ) . booleanValue ( ) ) ; addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , choice . getOtherwise ( ) , ! getStopIntercept ( ) . booleanValue ( ) ) ; if ( getStopIntercept ( ) . booleanValue ( ) ) { addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , choice . getWhenClauses ( ) . get ( choice . getWhenClauses ( ) . size ( ) - 1 ) , usePredicate . booleanValue ( ) ) ; } break ; } } if ( choice == null ) { addProceedProxy ( this . getProceed ( ) , answer . getProceed ( ) , answer , ! getStopIntercept ( ) . booleanValue ( ) ) ; } } return answer ; } private void addProceedProxy ( ProceedType orig , ProceedType proxy , ProcessorType < ? > processor , boolean force ) { int index = processor . getOutputs ( ) . indexOf ( orig ) ; if ( index >= 0 ) { processor . addOutput ( proxy ) ; List < ProcessorType < ? > > outs = processor . getOutputs ( ) ; outs . remove ( proxy ) ; outs . set ( index , proxy ) ; } else if ( force ) { processor . addOutput ( proxy ) ; } } public void setStopIntercept ( Boolean stop ) { this . stopIntercept = stop ; } public Boolean getStopIntercept ( ) { return stopIntercept ; } } 	1
package org . apache . camel . component . cxf . interceptors ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . cxf . binding . soap . SoapFault ; import org . apache . cxf . binding . soap . SoapMessage ; import org . apache . cxf . binding . xml . XMLFault ; import org . apache . cxf . common . logging . LogUtils ; import org . apache . cxf . interceptor . Fault ; import org . apache . cxf . message . Message ; import org . apache . cxf . message . XMLMessage ; import org . apache . cxf . phase . AbstractPhaseInterceptor ; import org . apache . cxf . phase . Phase ; import org . apache . cxf . service . model . BindingOperationInfo ; public class FaultOutInterceptor extends AbstractPhaseInterceptor < Message > { private static final Logger LOG = LogUtils . getL7dLogger ( FaultOutInterceptor . class ) ; public FaultOutInterceptor ( ) { super ( Phase . PREPARE_SEND ) ; } @ SuppressWarnings ( "unchecked" ) public void handleMessage ( Message message ) throws Fault { checkBindingOperationInfor ( message ) ; Throwable ex = message . getContent ( Throwable . class ) ; if ( ex != null ) { if ( ! ( ex instanceof Fault ) ) { ex = new Fault ( ex ) ; } if ( message instanceof XMLMessage ) { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "FaultOutInterceptor Creating XMLFault" ) ; } ex = XMLFault . createFault ( ( Fault ) ex ) ; } else if ( message instanceof SoapMessage ) { if ( LOG . isLoggable ( Level . INFO ) ) { LOG . info ( "FaultOutInterceptor Creating SoapFault" ) ; } SoapMessage sm = ( SoapMessage ) message ; ex = SoapFault . createFault ( ( Fault ) ex , sm . getVersion ( ) ) ; } message . setContent ( Throwable . class , ex ) ; } } private void checkBindingOperationInfor ( Message message ) { BindingOperationInfo bop = message . getExchange ( ) . get ( BindingOperationInfo . class ) ; if ( bop == null ) { bop = new FakeBindingOperationInfo ( ) ; message . getExchange ( ) . put ( BindingOperationInfo . class , bop ) ; } } } 	0
package org . apache . camel . util ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . InvalidPayloadException ; import org . apache . camel . InvalidTypeException ; import org . apache . camel . Message ; import org . apache . camel . NoSuchBeanException ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . NoSuchHeaderException ; import org . apache . camel . NoSuchPropertyException ; import org . apache . camel . NoTypeConversionAvailableException ; public final class ExchangeHelper { private ExchangeHelper ( ) { } public static < T > T getExchangeProperty ( Exchange exchange , String propertyName , Class < T > type , T defaultValue ) { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { return defaultValue ; } return answer ; } @ SuppressWarnings ( { "unchecked" } ) public static < E extends Exchange > Endpoint < E > resolveEndpoint ( E exchange , Object value ) throws NoSuchEndpointException { Endpoint < E > endpoint ; if ( value instanceof Endpoint ) { endpoint = ( Endpoint < E > ) value ; } else { String uri = value . toString ( ) ; endpoint = CamelContextHelper . getMandatoryEndpoint ( exchange . getContext ( ) , uri ) ; } return endpoint ; } public static < T > T getMandatoryProperty ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchPropertyException { try { T result = exchange . getProperty ( propertyName , type ) ; if ( result != null ) { return result ; } } catch ( NoTypeConversionAvailableException ex ) { } throw new NoSuchPropertyException ( exchange , propertyName , type ) ; } public static < T > T getMandatoryHeader ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchHeaderException { T answer = exchange . getIn ( ) . getHeader ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchHeaderException ( exchange , propertyName , type ) ; } return answer ; } public static Object getMandatoryInBody ( Exchange exchange ) throws InvalidPayloadException { Object answer = exchange . getIn ( ) . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class ) ; } return answer ; } public static < T > T getMandatoryInBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { T answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type ) ; } return answer ; } public static Object getMandatoryOutBody ( Exchange exchange ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; Object answer = out . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class , out ) ; } return answer ; } public static < T > T getMandatoryOutBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { Message out = exchange . getOut ( ) ; T answer = out . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type , out ) ; } return answer ; } public static < T > T convertToMandatoryType ( Exchange exchange , Class < T > type , Object value ) throws InvalidTypeException { T answer = convertToType ( exchange , type , value ) ; if ( answer == null ) { throw new InvalidTypeException ( exchange , value , type ) ; } return answer ; } public static < T > T convertToType ( Exchange exchange , Class < T > type , Object value ) { return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , exchange , value ) ; } public static void copyResults ( Exchange result , Exchange source ) { if ( result != source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } Message out = source . getOut ( false ) ; if ( out != null ) { result . getOut ( true ) . copyFrom ( out ) ; } else { if ( result . getPattern ( ) . isOutCapable ( ) ) { result . getOut ( true ) . copyFrom ( source . getIn ( ) ) ; } else { result . getIn ( ) . copyFrom ( source . getIn ( ) ) ; } } result . getProperties ( ) . clear ( ) ; result . getProperties ( ) . putAll ( source . getProperties ( ) ) ; } } public static boolean isInCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isInCapable ( ) ; } public static boolean isOutCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isOutCapable ( ) ; } public static < T > T newInstance ( Exchange exchange , Class < T > type ) { return exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } public static Map createVariableMap ( Exchange exchange ) { Map answer = new HashMap ( ) ; populateVariableMap ( exchange , answer ) ; return answer ; } public static void populateVariableMap ( Exchange exchange , Map map ) { map . put ( "exchange" , exchange ) ; Message in = exchange . getIn ( ) ; map . put ( "in" , in ) ; map . put ( "request" , in ) ; map . put ( "headers" , in . getHeaders ( ) ) ; map . put ( "body" , in . getBody ( ) ) ; if ( isOutCapable ( exchange ) ) { Message out = exchange . getOut ( true ) ; map . put ( "out" , out ) ; map . put ( "response" , out ) ; } map . put ( "camelContext" , exchange . getContext ( ) ) ; } public static String getContentType ( Exchange exchange ) { return exchange . getIn ( ) . getHeader ( "Content-Type" , String . class ) ; } public static Object lookupMandatoryBean ( Exchange exchange , String name ) { Object value = lookupBean ( exchange , name ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static < T > T lookupMandatoryBean ( Exchange exchange , String name , Class < T > type ) { T value = lookupBean ( exchange , name , type ) ; if ( value == null ) { throw new NoSuchBeanException ( name ) ; } return value ; } public static Object lookupBean ( Exchange exchange , String name ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name ) ; } public static < T > T lookupBean ( Exchange exchange , String name , Class < T > type ) { return exchange . getContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } } 	1
package org . apache . camel . component . bean ; import java . lang . reflect . Proxy ; import org . apache . camel . Endpoint ; import org . apache . camel . Producer ; public final class ProxyHelper { private ProxyHelper ( ) { } @ SuppressWarnings ( "unchecked" ) public static Object createProxyObject ( Endpoint endpoint , Producer producer , ClassLoader classLoader , Class [ ] interfaces , MethodInfoCache methodCache ) { return Proxy . newProxyInstance ( classLoader , interfaces . clone ( ) , new CamelInvocationHandler ( endpoint , producer , methodCache ) ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , ClassLoader cl , Class [ ] interfaces , MethodInfoCache methodCache ) throws Exception { return ( T ) createProxyObject ( endpoint , endpoint . createProducer ( ) , cl , interfaces , methodCache ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , ClassLoader cl , Class < T > ... interfaceClasses ) throws Exception { return ( T ) createProxy ( endpoint , cl , interfaceClasses , createMethodInfoCache ( endpoint ) ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , Class < T > ... interfaceClasses ) throws Exception { return ( T ) createProxy ( endpoint , getClassLoader ( interfaceClasses ) , interfaceClasses ) ; } @ SuppressWarnings ( "unchecked" ) public static < T > T createProxy ( Endpoint endpoint , Producer producer , Class < T > ... interfaceClasses ) throws Exception { return ( T ) createProxyObject ( endpoint , producer , getClassLoader ( interfaceClasses ) , interfaceClasses , createMethodInfoCache ( endpoint ) ) ; } protected static ClassLoader getClassLoader ( Class ... interfaces ) { if ( interfaces == null || interfaces . length < 1 ) { throw new IllegalArgumentException ( "You must provide at least 1 interface class." ) ; } return interfaces [ 0 ] . getClassLoader ( ) ; } protected static MethodInfoCache createMethodInfoCache ( Endpoint endpoint ) { return new MethodInfoCache ( endpoint . getCamelContext ( ) ) ; } } 	0
package org . apache . camel . util ; import java . io . IOException ; public final class IOHelper { private IOHelper ( ) { } public static IOException createIOException ( Throwable cause ) { return createIOException ( cause . getMessage ( ) , cause ) ; } public static IOException createIOException ( String message , Throwable cause ) { IOException answer = new IOException ( message ) ; answer . initCause ( cause ) ; return answer ; } } 	1
package org . apache . camel . component . jmx ; import javax . management . Notification ; import javax . management . NotificationListener ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class JMXConsumer extends DefaultConsumer implements NotificationListener { private JMXEndpoint jmxEndpoint ; public JMXConsumer ( JMXEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . jmxEndpoint = endpoint ; } public void handleNotification ( Notification notification , Object handback ) { try { getProcessor ( ) . process ( jmxEndpoint . createExchange ( notification ) ) ; } catch ( Throwable e ) { handleException ( e ) ; } } } 	0
package org . apache . camel ; public class NoSuchEndpointException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String uri ; public NoSuchEndpointException ( String uri ) { super ( "No endpoint could be found for: " + uri + ", please check your classpath contains the needed camel component jar." ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	1
package org . apache . camel . component . atom ; import org . apache . abdera . model . Document ; import org . apache . abdera . model . Entry ; import org . apache . abdera . model . Feed ; public interface EntryFilter { boolean isValidEntry ( AtomEndpoint endpoint , Document < Feed > feed , Entry entry ) ; } 	0
package org . apache . camel ; public class InvalidPayloadRuntimeException extends RuntimeExchangeException { private final Class < ? > type ; public InvalidPayloadRuntimeException ( Exchange exchange , Class < ? > type ) { super ( "No in body available of type: " + type . getName ( ) + NoSuchPropertyException . valueDescription ( exchange . getIn ( ) . getBody ( ) ) , exchange ) ; this . type = type ; } public Class < ? > getType ( ) { return type ; } } 	1
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlElements ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . model . loadbalancer . LoadBalancerType ; import org . apache . camel . model . loadbalancer . RandomLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . RoundRobinLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . StickyLoadBalanceStrategy ; import org . apache . camel . model . loadbalancer . TopicLoadBalanceStrategy ; import org . apache . camel . processor . SendProcessor ; import org . apache . camel . processor . loadbalancer . LoadBalancer ; import org . apache . camel . processor . loadbalancer . RandomLoadBalancer ; import org . apache . camel . processor . loadbalancer . RoundRobinLoadBalancer ; import org . apache . camel . processor . loadbalancer . StickyLoadBalancer ; import org . apache . camel . processor . loadbalancer . TopicLoadBalancer ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . CollectionStringBuffer ; @ XmlRootElement ( name = "loadBalance" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class LoadBalanceType extends ProcessorType < LoadBalanceType > { @ XmlAttribute ( required = false ) private String ref ; @ XmlElements ( { @ XmlElement ( required = false , name = "roundRobin" , type = RoundRobinLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "random" , type = RandomLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "sticky" , type = StickyLoadBalanceStrategy . class ) , @ XmlElement ( required = false , name = "topic" , type = TopicLoadBalanceStrategy . class ) } ) private LoadBalancerType loadBalancerType ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; public LoadBalanceType ( ) { } @ Override public String getShortName ( ) { return "loadbalance" ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { configureChild ( output ) ; } } } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public LoadBalancerType getLoadBalancerType ( ) { return loadBalancerType ; } public void setLoadBalancerType ( LoadBalancerType loadbalancer ) { loadBalancerType = loadbalancer ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : outputs ) { SendProcessor processor = ( SendProcessor ) processorType . createProcessor ( routeContext ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { LoadBalancer loadBalancer = LoadBalancerType . getLoadBalancer ( routeContext , loadBalancerType , ref ) ; for ( ProcessorType processorType : getOutputs ( ) ) { Processor processor = processorType . createProcessor ( routeContext ) ; processor = processorType . wrapProcessorInInterceptors ( routeContext , processor ) ; loadBalancer . addProcessor ( processor ) ; } return loadBalancer ; } public LoadBalanceType setLoadBalancer ( LoadBalancer loadBalancer ) { loadBalancerType = new LoadBalancerType ( loadBalancer ) ; return this ; } public LoadBalanceType roundRobin ( ) { loadBalancerType = new LoadBalancerType ( new RoundRobinLoadBalancer ( ) ) ; return this ; } public LoadBalanceType random ( ) { loadBalancerType = new LoadBalancerType ( new RandomLoadBalancer ( ) ) ; return this ; } public LoadBalanceType sticky ( Expression < Exchange > correlationExpression ) { loadBalancerType = new LoadBalancerType ( new StickyLoadBalancer ( correlationExpression ) ) ; return this ; } public LoadBalanceType topic ( ) { loadBalancerType = new LoadBalancerType ( new TopicLoadBalancer ( ) ) ; return this ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < ProcessorType < ? > > list = getOutputs ( ) ; for ( ProcessorType < ? > processorType : list ) { buffer . append ( processorType . getLabel ( ) ) ; } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( loadBalancerType != null ) { return "LoadBalanceType[" + loadBalancerType + ", " + getOutputs ( ) + "]" ; } else { return "LoadBalanceType[ref: " + ref + ", " + getOutputs ( ) + "]" ; } } } 	0
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . processor . resequencer . ResequencerEngine ; import org . apache . camel . processor . resequencer . SequenceElementComparator ; import org . apache . camel . processor . resequencer . SequenceSender ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class StreamResequencer extends ServiceSupport implements SequenceSender < Exchange > , Processor { private static final long DELIVERY_ATTEMPT_INTERVAL = 1000L ; private ExceptionHandler exceptionHandler ; private ResequencerEngine < Exchange > engine ; private Processor processor ; private Delivery delivery ; private int capacity ; public StreamResequencer ( Processor processor , SequenceElementComparator < Exchange > comparator ) { this . exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; this . engine = new ResequencerEngine < Exchange > ( comparator ) ; this . engine . setSequenceSender ( this ) ; this . processor = processor ; } public ExceptionHandler getExceptionHandler ( ) { return exceptionHandler ; } public Processor getProcessor ( ) { return processor ; } public int getCapacity ( ) { return capacity ; } public long getTimeout ( ) { return engine . getTimeout ( ) ; } public void setCapacity ( int capacity ) { this . capacity = capacity ; } public void setTimeout ( long timeout ) { engine . setTimeout ( timeout ) ; } @ Override public String toString ( ) { return "StreamResequencer[to: " + processor + "]" ; } @ Override protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; delivery = new Delivery ( ) ; engine . start ( ) ; delivery . start ( ) ; } @ Override protected void doStop ( ) throws Exception { engine . stop ( ) ; ServiceHelper . stopServices ( processor ) ; } public void sendElement ( Exchange o ) throws Exception { processor . process ( o ) ; } public void process ( Exchange exchange ) throws Exception { while ( engine . size ( ) >= capacity ) { Thread . sleep ( getTimeout ( ) ) ; } engine . insert ( exchange ) ; delivery . request ( ) ; } private class Delivery extends Thread { private volatile boolean cancelRequested ; public Delivery ( ) { super ( "Delivery Thread" ) ; } @ Override public void run ( ) { while ( true ) { try { Thread . sleep ( DELIVERY_ATTEMPT_INTERVAL ) ; } catch ( InterruptedException e ) { if ( cancelRequested ) { return ; } } try { engine . deliver ( ) ; } catch ( Exception e ) { exceptionHandler . handleException ( e ) ; } } } public void cancel ( ) { cancelRequested = true ; interrupt ( ) ; } public void request ( ) { interrupt ( ) ; } } } 	1
package org . apache . camel . bam ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Endpoint ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . bam . model . ActivityDefinition ; import org . apache . camel . bam . model . ProcessDefinition ; import org . apache . camel . bam . model . ProcessInstance ; import org . apache . camel . bam . processor . ActivityMonitorEngine ; import org . apache . camel . bam . processor . JpaBamProcessor ; import org . apache . camel . bam . rules . ProcessRules ; import org . apache . camel . builder . RouteBuilder ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallbackWithoutResult ; import org . springframework . transaction . support . TransactionTemplate ; import static org . apache . camel . util . ObjectHelper . notNull ; public abstract class ProcessBuilder extends RouteBuilder { private static int processCounter ; private JpaTemplate jpaTemplate ; private final TransactionTemplate transactionTemplate ; private final String processName ; private List < ActivityBuilder > activityBuilders = new ArrayList < ActivityBuilder > ( ) ; private Class entityType = ProcessInstance . class ; private ProcessRules processRules = new ProcessRules ( ) ; private ProcessDefinition processDefinition ; protected ProcessBuilder ( JpaTemplate jpaTemplate , TransactionTemplate transactionTemplate ) { this ( jpaTemplate , transactionTemplate , createProcessName ( ) ) ; } protected ProcessBuilder ( JpaTemplate jpaTemplate , TransactionTemplate transactionTemplate , String processName ) { this . jpaTemplate = jpaTemplate ; this . transactionTemplate = transactionTemplate ; this . processName = processName ; } protected static synchronized String createProcessName ( ) { return "Process-" + ( ++ processCounter ) ; } public ActivityBuilder activity ( String endpointUri ) { return activity ( endpoint ( endpointUri ) ) ; } public ActivityBuilder activity ( Endpoint endpoint ) { ActivityBuilder answer = new ActivityBuilder ( this , endpoint ) ; activityBuilders . add ( answer ) ; return answer ; } public ProcessBuilder entityType ( Class entityType ) { this . entityType = entityType ; return this ; } public Processor createActivityProcessor ( ActivityBuilder activityBuilder ) { notNull ( jpaTemplate , "jpaTemplate" ) ; transactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { protected void doInTransactionWithoutResult ( TransactionStatus status ) { processRules . setProcessDefinition ( getProcessDefinition ( ) ) ; } } ) ; return new JpaBamProcessor ( getTransactionTemplate ( ) , getJpaTemplate ( ) , activityBuilder . getCorrelationExpression ( ) , activityBuilder . getActivityRules ( ) , getEntityType ( ) ) ; } public List < ActivityBuilder > getActivityBuilders ( ) { return activityBuilders ; } public Class getEntityType ( ) { return entityType ; } public JpaTemplate getJpaTemplate ( ) { return jpaTemplate ; } public void setJpaTemplate ( JpaTemplate jpaTemplate ) { this . jpaTemplate = jpaTemplate ; } public TransactionTemplate getTransactionTemplate ( ) { return transactionTemplate ; } public ProcessRules getProcessRules ( ) { return processRules ; } public String getProcessName ( ) { return processName ; } public ProcessDefinition getProcessDefinition ( ) { if ( processDefinition == null ) { processDefinition = findOrCreateProcessDefinition ( ) ; } return processDefinition ; } public void setProcessDefinition ( ProcessDefinition processDefinition ) { this . processDefinition = processDefinition ; } protected void populateRoutes ( List < Route > routes ) throws Exception { boolean first = true ; for ( ActivityBuilder builder : activityBuilders ) { Route route = builder . createRoute ( ) ; if ( first ) { route . getServices ( ) . add ( new ActivityMonitorEngine ( getJpaTemplate ( ) , getTransactionTemplate ( ) , getProcessRules ( ) ) ) ; first = false ; } routes . add ( route ) ; } } public ActivityDefinition findOrCreateActivityDefinition ( String activityName ) { ProcessDefinition definition = getProcessDefinition ( ) ; List < ActivityDefinition > list = jpaTemplate . find ( "select x from " + ActivityDefinition . class . getName ( ) + " x where x.processDefinition = ?1 and x.name = ?2" , definition , activityName ) ; if ( ! list . isEmpty ( ) ) { return list . get ( 0 ) ; } else { ActivityDefinition answer = new ActivityDefinition ( ) ; answer . setName ( activityName ) ; answer . setProcessDefinition ( ProcessDefinition . getRefreshedProcessDefinition ( jpaTemplate , definition ) ) ; jpaTemplate . persist ( answer ) ; return answer ; } } protected ProcessDefinition findOrCreateProcessDefinition ( ) { List < ProcessDefinition > list = jpaTemplate . find ( "select x from " + ProcessDefinition . class . getName ( ) + " x where x.name = ?1" , processName ) ; if ( ! list . isEmpty ( ) ) { return list . get ( 0 ) ; } else { ProcessDefinition answer = new ProcessDefinition ( ) ; answer . setName ( processName ) ; jpaTemplate . persist ( answer ) ; return answer ; } } } 	0
package org . apache . camel ; public interface CamelContextAware { void setCamelContext ( CamelContext camelContext ) ; } 	1
package org . apache . camel . component . sql ; import java . sql . PreparedStatement ; import java . sql . SQLException ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . impl . DefaultProducer ; import org . springframework . dao . DataAccessException ; import org . springframework . jdbc . core . ColumnMapRowMapper ; import org . springframework . jdbc . core . JdbcTemplate ; import org . springframework . jdbc . core . PreparedStatementCallback ; import org . springframework . jdbc . core . RowMapperResultSetExtractor ; public class SqlProducer extends DefaultProducer { public static final String UPDATE_COUNT = "org.apache.camel.sql.update-count" ; private String query ; private JdbcTemplate jdbcTemplate ; public SqlProducer ( SqlEndpoint endpoint , String query , JdbcTemplate jdbcTemplate ) { super ( endpoint ) ; this . jdbcTemplate = jdbcTemplate ; this . query = query ; } public void process ( final Exchange exchange ) throws Exception { jdbcTemplate . execute ( query , new PreparedStatementCallback ( ) { public Object doInPreparedStatement ( PreparedStatement ps ) throws SQLException , DataAccessException { int argNumber = 1 ; try { Iterator < ? > iterator = exchange . getIn ( ) . getBody ( Iterator . class ) ; while ( iterator != null && iterator . hasNext ( ) ) { ps . setObject ( argNumber ++ , iterator . next ( ) ) ; } } catch ( NoTypeConversionAvailableException e ) { } int expected = ps . getParameterMetaData ( ) . getParameterCount ( ) ; if ( argNumber - 1 != expected ) { throw new SQLException ( "Number of parameters mismatch. Expected: " + expected + ", was:" + ( argNumber - 1 ) ) ; } boolean isResultSet = ps . execute ( ) ; if ( isResultSet ) { RowMapperResultSetExtractor mapper = new RowMapperResultSetExtractor ( new ColumnMapRowMapper ( ) ) ; List < ? > result = ( List < ? > ) mapper . extractData ( ps . getResultSet ( ) ) ; exchange . getOut ( ) . setBody ( result ) ; exchange . getOut ( ) . setHeaders ( exchange . getIn ( ) . getHeaders ( ) ) ; } else { exchange . getIn ( ) . setHeader ( UPDATE_COUNT , ps . getUpdateCount ( ) ) ; } return null ; } } ) ; } } 	0
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . ErrorHandlerSupport ; public abstract class ErrorHandlerBuilderSupport implements ErrorHandlerBuilder { private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; public void addErrorHandlers ( ExceptionType exception ) { exceptions . add ( exception ) ; } protected void configure ( ErrorHandlerSupport handler ) { for ( ExceptionType exception : exceptions ) { handler . addExceptionPolicy ( exception ) ; } } public List < ExceptionType > getExceptions ( ) { return exceptions ; } public void setErrorHandlers ( List < ExceptionType > exceptions ) { this . exceptions . clear ( ) ; this . exceptions . addAll ( exceptions ) ; } } 	1
package org . apache . camel ; public interface PollingConsumer < E extends Exchange > extends Consumer < E > { E receive ( ) ; E receiveNoWait ( ) ; E receive ( long timeout ) ; } 	0
package org . apache . camel . processor ; import java . io . InputStream ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ExchangeHelper ; public class UnmarshalProcessor implements Processor { private final DataFormat dataFormat ; public UnmarshalProcessor ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } public void process ( Exchange exchange ) throws Exception { InputStream stream = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; try { Message out = exchange . getOut ( true ) ; out . copyFrom ( exchange . getIn ( ) ) ; Object result = dataFormat . unmarshal ( exchange , stream ) ; out . setBody ( result ) ; } finally { if ( stream != null ) { stream . close ( ) ; } } } } 	1
package org . apache . camel . component . xquery ; public enum ResultFormat { Bytes , BytesSource , DOM , DOMSource , List , String , StringSource } 	0
package org . apache . camel . impl ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . util . ObjectHelper ; public abstract class DefaultEndpoint < E extends Exchange > implements Endpoint < E > , CamelContextAware { private String endpointUri ; private CamelContext camelContext ; private Component component ; private ScheduledExecutorService executorService ; private ExchangePattern exchangePattern = ExchangePattern . InOnly ; protected DefaultEndpoint ( String endpointUri , Component component ) { this ( endpointUri , component . getCamelContext ( ) ) ; this . component = component ; } protected DefaultEndpoint ( String endpointUri , CamelContext camelContext ) { this ( endpointUri ) ; this . camelContext = camelContext ; } protected DefaultEndpoint ( String endpointUri ) { this . setEndpointUri ( endpointUri ) ; } protected DefaultEndpoint ( ) { } public int hashCode ( ) { return getEndpointUri ( ) . hashCode ( ) * 37 + 1 ; } @ Override public boolean equals ( Object object ) { if ( object instanceof DefaultEndpoint ) { DefaultEndpoint that = ( DefaultEndpoint ) object ; return ObjectHelper . equal ( this . getEndpointUri ( ) , that . getEndpointUri ( ) ) ; } return false ; } @ Override public String toString ( ) { return "Endpoint[" + getEndpointUri ( ) + "]" ; } public String getEndpointUri ( ) { if ( endpointUri == null ) { endpointUri = createEndpointUri ( ) ; if ( endpointUri == null ) { throw new IllegalArgumentException ( "endpointUri is not specified and " + getClass ( ) . getName ( ) + " does not implement createEndpointUri() to create a default value" ) ; } } return endpointUri ; } public CamelContext getCamelContext ( ) { return camelContext ; } public Component getComponent ( ) { return component ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public synchronized ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { Component c = getComponent ( ) ; if ( c != null && c instanceof DefaultComponent ) { DefaultComponent dc = ( DefaultComponent ) c ; executorService = dc . getExecutorService ( ) ; } if ( executorService == null ) { executorService = createExecutorService ( ) ; } } return executorService ; } public synchronized void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } public PollingConsumer < E > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < E > ( this ) ; } public E convertTo ( Class < E > type , Exchange exchange ) { if ( type . isInstance ( exchange ) ) { return type . cast ( exchange ) ; } return getCamelContext ( ) . getExchangeConverter ( ) . convertTo ( type , exchange ) ; } public E createExchange ( Exchange exchange ) { Class < E > exchangeType = getExchangeType ( ) ; if ( exchangeType != null ) { if ( exchangeType . isInstance ( exchange ) ) { return exchangeType . cast ( exchange ) ; } } E answer = createExchange ( ) ; answer . copyFrom ( exchange ) ; return answer ; } public Class < E > getExchangeType ( ) { Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { return ( Class < E > ) argumentType ; } } } return null ; } public E createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public E createExchange ( ExchangePattern pattern ) { return ( E ) new DefaultExchange ( getCamelContext ( ) , pattern ) ; } public ExchangePattern getExchangePattern ( ) { return exchangePattern ; } public void setExchangePattern ( ExchangePattern exchangePattern ) { this . exchangePattern = exchangePattern ; } protected ScheduledThreadPoolExecutor createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( 10 ) ; } public void configureProperties ( Map options ) { } protected String createEndpointUri ( ) { return null ; } protected void setEndpointUri ( String endpointUri ) { this . endpointUri = endpointUri ; } @ Deprecated public CamelContext getContext ( ) { return getCamelContext ( ) ; } @ Deprecated public void setContext ( CamelContext context ) { setCamelContext ( context ) ; } public boolean isLenientProperties ( ) { return false ; } } 	1
package org . apache . camel ; public interface Processor { void process ( Exchange exchange ) throws Exception ; } 	0
package org . apache . camel . impl ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . FailedToCreateProducerException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ObjectHelper . wrapRuntimeCamelException ; public class ProducerCache < E extends Exchange > extends ServiceSupport { private static final transient Log LOG = LogFactory . getLog ( ProducerCache . class ) ; private Map < String , Producer < E > > producers = new HashMap < String , Producer < E > > ( ) ; public synchronized Producer < E > getProducer ( Endpoint < E > endpoint ) { String key = endpoint . getEndpointUri ( ) ; Producer < E > answer = producers . get ( key ) ; if ( answer == null ) { try { answer = endpoint . createProducer ( ) ; answer . start ( ) ; } catch ( Exception e ) { throw new FailedToCreateProducerException ( endpoint , e ) ; } producers . put ( key , answer ) ; } return answer ; } public void send ( Endpoint < E > endpoint , E exchange ) { try { Producer < E > producer = getProducer ( endpoint ) ; producer . process ( exchange ) ; } catch ( Exception e ) { throw wrapRuntimeCamelException ( e ) ; } } public E send ( Endpoint < E > endpoint , Processor processor ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( ) ; return sendExchange ( endpoint , producer , processor , exchange ) ; } catch ( Exception e ) { throw wrapRuntimeCamelException ( e ) ; } } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( ) ; boolean sync = sendExchange ( endpoint , producer , processor , exchange , callback ) ; setProcessedSync ( exchange , sync ) ; return exchange ; } catch ( Exception e ) { throw wrapRuntimeCamelException ( e ) ; } } public static boolean isProcessedSync ( Exchange exchange ) { Boolean rc = exchange . getProperty ( ProducerCache . class . getName ( ) + ".SYNC" , Boolean . class ) ; return rc == null ? false : rc ; } public static void setProcessedSync ( Exchange exchange , boolean b ) { exchange . setProperty ( ProducerCache . class . getName ( ) + ".SYNC" , b ? Boolean . TRUE : Boolean . FALSE ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( pattern ) ; return sendExchange ( endpoint , producer , processor , exchange ) ; } catch ( Exception e ) { throw wrapRuntimeCamelException ( e ) ; } } protected E sendExchange ( Endpoint < E > endpoint , Producer < E > producer , Processor processor , E exchange ) throws Exception { processor . process ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> " + endpoint + " " + exchange ) ; } producer . process ( exchange ) ; return exchange ; } protected boolean sendExchange ( Endpoint < E > endpoint , Producer < E > producer , Processor processor , E exchange , AsyncCallback callback ) throws Exception { processor . process ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> " + endpoint + " " + exchange ) ; } return AsyncProcessorTypeConverter . convert ( producer ) . process ( exchange , callback ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( producers . values ( ) ) ; producers . clear ( ) ; } protected void doStart ( ) throws Exception { } } 	1
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . spi . RouteContext ; @ XmlRootElement ( name = "setBody" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SetBodyType extends ExpressionNode { public SetBodyType ( ) { } public SetBodyType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "SetBody[" + getExpression ( ) + "]" ; } @ Override public String getShortName ( ) { return "setBody" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Expression expr = getExpression ( ) . createExpression ( routeContext ) ; return ProcessorBuilder . setBody ( expr ) ; } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; @ XmlRootElement ( name = "xstream" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class XStreamDataFormat extends DataFormatType { @ XmlAttribute ( required = false ) private Boolean prettyPrint ; public XStreamDataFormat ( ) { super ( "org.apache.camel.dataformat.xstream.XStreamDataFormat" ) ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } } 	1
package org . apache . camel . dataformat . tagsoup ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . StringWriter ; import java . io . Writer ; import java . util . Map ; import java . util . Map . Entry ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . sax . SAXSource ; import org . w3c . dom . Node ; import org . xml . sax . ContentHandler ; import org . xml . sax . InputSource ; import org . xml . sax . XMLReader ; import org . apache . camel . CamelException ; import org . apache . camel . Exchange ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . ccil . cowan . tagsoup . HTMLSchema ; import org . ccil . cowan . tagsoup . Parser ; import org . ccil . cowan . tagsoup . Schema ; import org . ccil . cowan . tagsoup . XMLWriter ; public class TidyMarkupDataFormat implements DataFormat { private static final transient Log LOG = LogFactory . getLog ( TidyMarkupDataFormat . class ) ; private static final String NO = "no" ; private static final String YES = "yes" ; private static final String XML = "xml" ; private boolean isOmitXmlDeclaration ; private Class dataObjectType ; private String method ; private Schema parsingSchema ; private Map < String , Boolean > parserFeatures ; private Map < String , Object > parserPropeties ; public void marshal ( Exchange exchange , Object object , OutputStream outputStream ) throws Exception { throw new CamelException ( "Marshalling from Well Formed HTML to ugly HTML is not supported." + " Only unmarshal is supported" ) ; } public Object unmarshal ( Exchange exchange , InputStream inputStream ) throws Exception { ObjectHelper . notNull ( dataObjectType , "dataObjectType" , this ) ; if ( dataObjectType . isAssignableFrom ( Node . class ) ) { return asNodeTidyMarkup ( inputStream ) ; } else if ( dataObjectType . isAssignableFrom ( String . class ) ) { return asStringTidyMarkup ( inputStream ) ; } else { throw new IllegalArgumentException ( "The return type [" + dataObjectType . getCanonicalName ( ) + "] is unsupported" ) ; } } public String asStringTidyMarkup ( InputStream inputStream ) throws CamelException { XMLReader parser = createTagSoupParser ( ) ; StringWriter w = new StringWriter ( ) ; parser . setContentHandler ( createContentHandler ( w ) ) ; try { parser . parse ( new InputSource ( inputStream ) ) ; return w . toString ( ) ; } catch ( Exception e ) { throw new CamelException ( "Failed to convert the HTML to tidy Markup" , e ) ; } finally { try { inputStream . close ( ) ; } catch ( Exception e ) { LOG . warn ( "Failed to close the inputStream" ) ; } } } public Node asNodeTidyMarkup ( InputStream inputStream ) throws CamelException { XMLReader parser = createTagSoupParser ( ) ; StringWriter w = new StringWriter ( ) ; parser . setContentHandler ( createContentHandler ( w ) ) ; try { Transformer transformer = TransformerFactory . newInstance ( ) . newTransformer ( ) ; DOMResult result = new DOMResult ( ) ; transformer . transform ( new SAXSource ( parser , new InputSource ( inputStream ) ) , result ) ; return result . getNode ( ) ; } catch ( Exception e ) { throw new CamelException ( "Failed to convert the HTML to tidy Markup" , e ) ; } } protected XMLReader createTagSoupParser ( ) throws CamelException { XMLReader reader = new Parser ( ) ; try { reader . setFeature ( Parser . namespacesFeature , false ) ; reader . setFeature ( Parser . namespacePrefixesFeature , false ) ; if ( getParserFeatures ( ) != null ) { for ( Entry < String , Boolean > e : getParserFeatures ( ) . entrySet ( ) ) { reader . setFeature ( e . getKey ( ) , e . getValue ( ) ) ; } } if ( getParserPropeties ( ) != null ) { for ( Entry < String , Object > e : getParserPropeties ( ) . entrySet ( ) ) { reader . setProperty ( e . getKey ( ) , e . getValue ( ) ) ; } } if ( this . getParsingSchema ( ) != null ) { reader . setProperty ( Parser . schemaProperty , getParsingSchema ( ) ) ; } } catch ( Exception e ) { throw new IllegalArgumentException ( "Problem configuring the parser" , e ) ; } return reader ; } public void setParsingSchema ( Schema schema ) { this . parsingSchema = schema ; } public Schema getParsingSchema ( ) { if ( parsingSchema == null ) { this . parsingSchema = new HTMLSchema ( ) ; } return parsingSchema ; } protected ContentHandler createContentHandler ( Writer w ) { XMLWriter xmlWriter = new XMLWriter ( w ) ; if ( getMethod ( ) != null ) { xmlWriter . setOutputProperty ( XMLWriter . METHOD , getMethod ( ) ) ; } else { xmlWriter . setOutputProperty ( XMLWriter . METHOD , XML ) ; } if ( isOmitXmlDeclaration ) { xmlWriter . setOutputProperty ( XMLWriter . OMIT_XML_DECLARATION , YES ) ; } else { xmlWriter . setOutputProperty ( XMLWriter . OMIT_XML_DECLARATION , NO ) ; } return xmlWriter ; } public void setParserFeatures ( Map < String , Boolean > parserFeatures ) { this . parserFeatures = parserFeatures ; } public Map < String , Boolean > getParserFeatures ( ) { return parserFeatures ; } public void setParserPropeties ( Map < String , Object > parserPropeties ) { this . parserPropeties = parserPropeties ; } public Map < String , Object > getParserPropeties ( ) { return parserPropeties ; } public void setMethod ( String method ) { this . method = method ; } public String getMethod ( ) { return method ; } public Class getDataObjectType ( ) { return dataObjectType ; } public void setDataObjectType ( Class dataObjectType ) { this . dataObjectType = dataObjectType ; } } 	0
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "jaxb" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class JaxbDataFormat extends DataFormatType { @ XmlAttribute ( required = false ) private String contextPath ; @ XmlAttribute ( required = false ) private Boolean prettyPrint ; @ XmlAttribute ( required = false ) private Boolean ignoreJAXBElement ; public JaxbDataFormat ( ) { super ( "org.apache.camel.converter.jaxb.JaxbDataFormat" ) ; } public JaxbDataFormat ( boolean prettyPrint ) { this ( ) ; setPrettyPrint ( prettyPrint ) ; } public String getContextPath ( ) { return contextPath ; } public void setContextPath ( String contextPath ) { this . contextPath = contextPath ; } public Boolean getPrettyPrint ( ) { return prettyPrint ; } public void setPrettyPrint ( Boolean prettyPrint ) { this . prettyPrint = prettyPrint ; } public Boolean getIgnoreJAXBElement ( ) { return ignoreJAXBElement ; } public void setIgnoreJAXBElement ( Boolean ignoreJAXBElement ) { this . ignoreJAXBElement = ignoreJAXBElement ; } @ Override protected void configureDataFormat ( DataFormat dataFormat ) { Boolean answer = ObjectHelper . toBoolean ( getPrettyPrint ( ) ) ; if ( answer != null && ! answer . booleanValue ( ) ) { setProperty ( dataFormat , "prettyPrint" , Boolean . FALSE ) ; } else { setProperty ( dataFormat , "prettyPrint" , Boolean . TRUE ) ; } answer = ObjectHelper . toBoolean ( getIgnoreJAXBElement ( ) ) ; if ( answer != null && ! answer . booleanValue ( ) ) { setProperty ( dataFormat , "ignoreJAXBElement" , Boolean . FALSE ) ; } else { setProperty ( dataFormat , "ignoreJAXBElement" , Boolean . TRUE ) ; } setProperty ( dataFormat , "contextPath" , contextPath ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . net . URI ; import org . apache . camel . Expression ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . language . simple . FileLanguage ; import org . apache . commons . net . ftp . FTPClientConfig ; public class RemoteFileConfiguration implements Cloneable { private String protocol ; private String username ; private String host ; private int port ; private String password ; private String file ; private boolean binary ; private boolean directory = true ; private FTPClientConfig ftpClientConfig ; private Expression expression ; private boolean passiveMode ; private String knownHosts ; private String privateKeyFile ; private String privateKeyFilePassphrase ; public RemoteFileConfiguration ( ) { } public RemoteFileConfiguration ( URI uri ) { configure ( uri ) ; } public RemoteFileConfiguration copy ( ) { try { return ( RemoteFileConfiguration ) clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeCamelException ( e ) ; } } public String toString ( ) { return remoteServerInformation ( ) + "/" + file ; } public String remoteServerInformation ( ) { return protocol + "://" + ( username != null ? username : "anonymous" ) + "@" + host + ":" + port ; } public void configure ( URI uri ) { setProtocol ( uri . getScheme ( ) ) ; setDefaultPort ( ) ; setUsername ( uri . getUserInfo ( ) ) ; setHost ( uri . getHost ( ) ) ; setPort ( uri . getPort ( ) ) ; setFile ( uri . getPath ( ) ) ; } protected void setDefaultPort ( ) { if ( "ftp" . equalsIgnoreCase ( protocol ) ) { setPort ( 21 ) ; } else if ( "sftp" . equalsIgnoreCase ( protocol ) ) { setPort ( 22 ) ; } } public String getFile ( ) { return file ; } public void setFile ( String file ) { if ( file . startsWith ( "/" ) ) { file = file . substring ( 1 ) ; } this . file = file ; } public String getKnownHosts ( ) { return knownHosts ; } public void setKnownHosts ( String knownHosts ) { this . knownHosts = knownHosts ; } public String getHost ( ) { return host ; } public void setHost ( String host ) { this . host = host ; } public int getPort ( ) { return port ; } public void setPort ( int port ) { if ( port != - 1 ) { this . port = port ; } } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getProtocol ( ) { return protocol ; } public void setProtocol ( String protocol ) { this . protocol = protocol ; } public String getUsername ( ) { return username ; } public void setUsername ( String username ) { this . username = username ; } public boolean isBinary ( ) { return binary ; } public void setBinary ( boolean binary ) { this . binary = binary ; } public boolean isDirectory ( ) { return directory ; } public void setDirectory ( boolean directory ) { this . directory = directory ; } public FTPClientConfig getFtpClientConfig ( ) { return ftpClientConfig ; } public void setFtpClientConfig ( FTPClientConfig ftpClientConfig ) { this . ftpClientConfig = ftpClientConfig ; } public Expression getExpression ( ) { return expression ; } public void setExpression ( Expression expression ) { this . expression = expression ; } public void setExpression ( String fileLanguageExpression ) { this . expression = FileLanguage . file ( fileLanguageExpression ) ; } public boolean isPassiveMode ( ) { return passiveMode ; } public void setPassiveMode ( boolean passiveMode ) { this . passiveMode = passiveMode ; } public String getPrivateKeyFile ( ) { return privateKeyFile ; } public void setPrivateKeyFile ( String privateKeyFile ) { this . privateKeyFile = privateKeyFile ; } public String getPrivateKeyFilePassphrase ( ) { return privateKeyFilePassphrase ; } public void setPrivateKeyFilePassphrase ( String privateKeyFilePassphrase ) { this . privateKeyFilePassphrase = privateKeyFilePassphrase ; } } 	0
package org . apache . camel . component . log ; import java . io . InputStream ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . converter . stream . StreamCache ; import org . apache . camel . processor . interceptor . ExchangeFormatter ; import org . apache . camel . util . ObjectHelper ; public class LogFormatter implements ExchangeFormatter { private boolean showExchangeId ; private boolean showProperties ; private boolean showHeaders ; private boolean showBodyType = true ; private boolean showBody = true ; private boolean showOut ; private boolean showAll ; private boolean multiline ; public Object format ( Exchange exchange ) { Message in = exchange . getIn ( ) ; StringBuilder sb = new StringBuilder ( "" ) ; if ( showAll || showExchangeId ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", Id:" ) . append ( exchange . getExchangeId ( ) ) ; } if ( showAll || showProperties ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", Properties:" ) . append ( exchange . getProperties ( ) ) ; } if ( showAll || showHeaders ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", Headers:" ) . append ( in . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", BodyType:" ) . append ( getBodyTypeAsString ( in ) ) ; } if ( showAll || showBody ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", Body:" ) . append ( getBodyAsString ( in ) ) ; } Message out = exchange . getOut ( false ) ; if ( showAll || showOut ) { if ( out != null ) { if ( showAll || showHeaders ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", OutHeaders:" ) . append ( out . getHeaders ( ) ) ; } if ( showAll || showBodyType ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", OutBodyType:" ) . append ( getBodyTypeAsString ( out ) ) ; } if ( showAll || showBody ) { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", OutBody:" ) . append ( getBodyAsString ( out ) ) ; } } else { if ( multiline ) { sb . append ( '\n' ) ; } sb . append ( ", Out: null" ) ; } } return "Exchange[" + ( multiline ? sb . append ( ']' ) . toString ( ) : sb . toString ( ) . substring ( 2 ) + "]" ) ; } public boolean isShowExchangeId ( ) { return showExchangeId ; } public void setShowExchangeId ( boolean showExchangeId ) { this . showExchangeId = showExchangeId ; } public boolean isShowProperties ( ) { return showProperties ; } public void setShowProperties ( boolean showProperties ) { this . showProperties = showProperties ; } public boolean isShowHeaders ( ) { return showHeaders ; } public void setShowHeaders ( boolean showHeaders ) { this . showHeaders = showHeaders ; } public boolean isShowBodyType ( ) { return showBodyType ; } public void setShowBodyType ( boolean showBodyType ) { this . showBodyType = showBodyType ; } public boolean isShowBody ( ) { return showBody ; } public void setShowBody ( boolean showBody ) { this . showBody = showBody ; } public boolean isShowOut ( ) { return showOut ; } public void setShowOut ( boolean showOut ) { this . showOut = showOut ; } public boolean isShowAll ( ) { return showAll ; } public void setShowAll ( boolean showAll ) { this . showAll = showAll ; } public boolean isMultiline ( ) { return multiline ; } public void setMultiline ( boolean multiline ) { this . multiline = multiline ; } protected Object getBodyAsString ( Message message ) { StreamCache newBody = null ; try { newBody = message . getBody ( StreamCache . class ) ; if ( newBody != null ) { message . setBody ( newBody ) ; } } catch ( NoTypeConversionAvailableException ex ) { } Object answer = null ; try { answer = message . getBody ( String . class ) ; } catch ( NoTypeConversionAvailableException ex ) { answer = message . getBody ( ) ; } if ( newBody != null ) { newBody . reset ( ) ; } return answer ; } protected Object getBodyTypeAsString ( Message message ) { String answer = ObjectHelper . classCanonicalName ( message . getBody ( ) ) ; if ( answer != null && answer . startsWith ( "java.lang." ) ) { return answer . substring ( 10 ) ; } return answer ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import java . io . InterruptedIOException ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . util . concurrent . ThreadFactory ; import javax . net . ssl . SSLContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . http . impl . nio . DefaultServerIOEventDispatch ; import org . apache . http . impl . nio . reactor . DefaultListeningIOReactor ; import org . apache . http . impl . nio . reactor . SSLServerIOEventDispatch ; import org . apache . http . nio . reactor . IOEventDispatch ; import org . apache . http . nio . reactor . IOReactorException ; import org . apache . http . nio . reactor . ListeningIOReactor ; import org . apache . http . params . HttpParams ; import org . apache . http . protocol . HttpRequestHandlerRegistry ; public class JhcServerEngine { private static final Log LOG = LogFactory . getLog ( JhcServerEngine . class ) ; private final HttpParams params ; private int port ; private String protocol ; private int nbThreads = 2 ; private ListeningIOReactor ioReactor ; private ThreadFactory threadFactory ; private Thread runner ; private SSLContext sslContext ; private AsyncBufferingHttpServiceHandler serviceHandler ; private HttpRequestHandlerRegistry handlerRegistry ; private boolean isStarted ; private int referenceCounter ; JhcServerEngine ( HttpParams params , int port , String protocol ) { this . params = params ; serviceHandler = new AsyncBufferingHttpServiceHandler ( params ) ; handlerRegistry = new HttpRequestHandlerRegistry ( ) ; serviceHandler . setHandlerResolver ( handlerRegistry ) ; this . port = port ; this . protocol = protocol ; } public int getPort ( ) { return port ; } public String getProtocol ( ) { return this . protocol ; } public void setSslContext ( SSLContext sslContext ) { this . sslContext = sslContext ; } public SSLContext getSslContext ( ) { return this . sslContext ; } public synchronized void register ( String pattern , AsyncHttpRequestHandler handler ) { handlerRegistry . register ( pattern , handler ) ; referenceCounter ++ ; } public synchronized void unregister ( String pattern ) { handlerRegistry . unregister ( pattern ) ; referenceCounter -- ; } public int getReferenceCounter ( ) { return referenceCounter ; } public boolean isStarted ( ) { return isStarted ; } public void start ( ) throws IOReactorException { final SocketAddress addr = new InetSocketAddress ( port ) ; ioReactor = new DefaultListeningIOReactor ( nbThreads , threadFactory , params ) ; final IOEventDispatch ioEventDispatch ; if ( "https" . equals ( protocol ) ) { ioEventDispatch = new SSLServerIOEventDispatch ( serviceHandler , sslContext , params ) ; } else { ioEventDispatch = new DefaultServerIOEventDispatch ( serviceHandler , params ) ; } runner = new Thread ( ) { public void run ( ) { try { ioReactor . listen ( addr ) ; isStarted = true ; ioReactor . execute ( ioEventDispatch ) ; } catch ( InterruptedIOException ex ) { LOG . info ( "Interrupted" ) ; } catch ( IOException e ) { LOG . warn ( "I/O error: " + e . getMessage ( ) ) ; } LOG . debug ( "Shutdown" ) ; } } ; runner . start ( ) ; } public void stop ( ) throws IOException { LOG . debug ( "Stopping the jhc ioReactor " ) ; ioReactor . shutdown ( ) ; LOG . debug ( "Waiting the runner" ) ; try { runner . join ( ) ; } catch ( InterruptedException e ) { } isStarted = false ; LOG . debug ( "Runner stopped" ) ; } } 	0
package org . apache . camel ; import java . util . List ; public interface Routes { CamelContext getContext ( ) ; void setContext ( CamelContext context ) ; List < Route > getRouteList ( ) throws Exception ; } 	1
package org . apache . camel . osgi ; import java . util . HashSet ; import java . util . Set ; import javax . xml . bind . JAXBContext ; import javax . xml . bind . JAXBException ; public class CamelNamespaceHandler extends org . apache . camel . spring . handler . CamelNamespaceHandler { public void init ( ) { super . init ( ) ; registerParser ( "camelContext" , new CamelContextBeanDefinitionParser ( CamelContextFactoryBean . class ) ) ; } protected JAXBContext createJaxbContext ( ) throws JAXBException { StringBuilder packages = new StringBuilder ( ) ; for ( Class cl : getJaxbPackages ( ) ) { if ( packages . length ( ) > 0 ) { packages . append ( ":" ) ; } packages . append ( cl . getName ( ) . substring ( 0 , cl . getName ( ) . lastIndexOf ( '.' ) ) ) ; } return JAXBContext . newInstance ( packages . toString ( ) , getClass ( ) . getClassLoader ( ) ) ; } protected Set < Class > getJaxbPackages ( ) { Set < Class > classes = new HashSet < Class > ( ) ; classes . add ( org . apache . camel . osgi . CamelContextFactoryBean . class ) ; classes . add ( org . apache . camel . spring . CamelContextFactoryBean . class ) ; classes . add ( org . apache . camel . model . RouteType . class ) ; classes . add ( org . apache . camel . model . config . StreamResequencerConfig . class ) ; classes . add ( org . apache . camel . model . dataformat . DataFormatType . class ) ; classes . add ( org . apache . camel . model . language . ExpressionType . class ) ; classes . add ( org . apache . camel . model . loadbalancer . LoadBalancerType . class ) ; return classes ; } } 	0
package org . apache . camel . builder . xml ; import java . io . StringReader ; import java . util . List ; import java . util . Map ; import javax . xml . namespace . QName ; import javax . xml . transform . dom . DOMSource ; import javax . xml . xpath . XPath ; import javax . xml . xpath . XPathConstants ; import javax . xml . xpath . XPathExpression ; import javax . xml . xpath . XPathExpressionException ; import javax . xml . xpath . XPathFactory ; import javax . xml . xpath . XPathFactoryConfigurationException ; import javax . xml . xpath . XPathFunction ; import javax . xml . xpath . XPathFunctionException ; import javax . xml . xpath . XPathFunctionResolver ; import org . w3c . dom . Document ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . xml . sax . InputSource ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . RuntimeExpressionException ; import org . apache . camel . spi . NamespaceAware ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . builder . xml . Namespaces . DEFAULT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . IN_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . OUT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . isMatchingNamespaceOrEmptyNamespace ; import static org . apache . camel . converter . ObjectConverter . toBoolean ; public class XPathBuilder < E extends Exchange > implements Expression < E > , Predicate < E > , NamespaceAware { private final String text ; private XPathFactory xpathFactory ; private Class documentType = Document . class ; private Class resultType ; private QName resultQName = XPathConstants . NODESET ; private String objectModelUri ; private DefaultNamespaceContext namespaceContext ; private XPathFunctionResolver functionResolver ; private XPathExpression expression ; private MessageVariableResolver variableResolver = new MessageVariableResolver ( ) ; private E exchange ; private XPathFunction bodyFunction ; private XPathFunction headerFunction ; private XPathFunction outBodyFunction ; private XPathFunction outHeaderFunction ; public XPathBuilder ( String text ) { this . text = text ; } public static XPathBuilder xpath ( String text ) { return new XPathBuilder ( text ) ; } @ Override public String toString ( ) { return "XPath: " + text ; } public boolean matches ( E exchange ) { Object booleanResult = evaluateAs ( exchange , XPathConstants . BOOLEAN ) ; return toBoolean ( booleanResult ) ; } public void assertMatches ( String text , E exchange ) throws AssertionError { Object booleanResult = evaluateAs ( exchange , XPathConstants . BOOLEAN ) ; if ( ! toBoolean ( booleanResult ) ) { throw new AssertionError ( this + " failed on " + exchange + " as returned <" + booleanResult + ">" ) ; } } public Object evaluate ( E exchange ) { Object answer = evaluateAs ( exchange , resultQName ) ; if ( resultType != null ) { return ExchangeHelper . convertToType ( exchange , resultType , answer ) ; } return answer ; } public XPathBuilder < E > booleanResult ( ) { resultQName = XPathConstants . BOOLEAN ; return this ; } public XPathBuilder < E > nodeResult ( ) { resultQName = XPathConstants . NODE ; return this ; } public XPathBuilder < E > nodeSetResult ( ) { resultQName = XPathConstants . NODESET ; return this ; } public XPathBuilder < E > numberResult ( ) { resultQName = XPathConstants . NUMBER ; return this ; } public XPathBuilder < E > stringResult ( ) { resultQName = XPathConstants . STRING ; return this ; } public XPathBuilder < E > resultType ( Class resultType ) { setResultType ( resultType ) ; return this ; } public XPathBuilder < E > objectModel ( String uri ) { this . objectModelUri = uri ; return this ; } public XPathBuilder < E > functionResolver ( XPathFunctionResolver functionResolver ) { this . functionResolver = functionResolver ; return this ; } public XPathBuilder < E > namespace ( String prefix , String uri ) { getNamespaceContext ( ) . add ( prefix , uri ) ; return this ; } public XPathBuilder < E > namespaces ( Namespaces namespaces ) { namespaces . configure ( this ) ; return this ; } public XPathBuilder < E > variable ( String name , Object value ) { variableResolver . addVariable ( name , value ) ; return this ; } public XPathFactory getXPathFactory ( ) throws XPathFactoryConfigurationException { if ( xpathFactory == null ) { if ( objectModelUri != null ) { xpathFactory = XPathFactory . newInstance ( objectModelUri ) ; } xpathFactory = XPathFactory . newInstance ( ) ; } return xpathFactory ; } public void setXPathFactory ( XPathFactory xpathFactory ) { this . xpathFactory = xpathFactory ; } public Class getDocumentType ( ) { return documentType ; } public void setDocumentType ( Class documentType ) { this . documentType = documentType ; } public String getText ( ) { return text ; } public QName getResultQName ( ) { return resultQName ; } public void setResultQName ( QName resultQName ) { this . resultQName = resultQName ; } public DefaultNamespaceContext getNamespaceContext ( ) { if ( namespaceContext == null ) { try { DefaultNamespaceContext defaultNamespaceContext = new DefaultNamespaceContext ( getXPathFactory ( ) ) ; populateDefaultNamespaces ( defaultNamespaceContext ) ; namespaceContext = defaultNamespaceContext ; } catch ( XPathFactoryConfigurationException e ) { throw new RuntimeExpressionException ( e ) ; } } return namespaceContext ; } public void setNamespaceContext ( DefaultNamespaceContext namespaceContext ) { this . namespaceContext = namespaceContext ; } public XPathFunctionResolver getFunctionResolver ( ) { return functionResolver ; } public void setFunctionResolver ( XPathFunctionResolver functionResolver ) { this . functionResolver = functionResolver ; } public XPathExpression getExpression ( ) throws XPathFactoryConfigurationException , XPathExpressionException { if ( expression == null ) { expression = createXPathExpression ( ) ; } return expression ; } public void setNamespaces ( Map < String , String > namespaces ) { getNamespaceContext ( ) . setNamespaces ( namespaces ) ; } public XPathFunction getBodyFunction ( ) { if ( bodyFunction == null ) { bodyFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange == null ) { return null ; } return exchange . getIn ( ) . getBody ( ) ; } } ; } return bodyFunction ; } public void setBodyFunction ( XPathFunction bodyFunction ) { this . bodyFunction = bodyFunction ; } public XPathFunction getHeaderFunction ( ) { if ( headerFunction == null ) { headerFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null && ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value != null ) { return exchange . getIn ( ) . getHeader ( value . toString ( ) ) ; } } return null ; } } ; } return headerFunction ; } public void setHeaderFunction ( XPathFunction headerFunction ) { this . headerFunction = headerFunction ; } public XPathFunction getOutBodyFunction ( ) { if ( outBodyFunction == null ) { outBodyFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null ) { Message out = exchange . getOut ( false ) ; if ( out != null ) { return out . getBody ( ) ; } } return null ; } } ; } return outBodyFunction ; } public void setOutBodyFunction ( XPathFunction outBodyFunction ) { this . outBodyFunction = outBodyFunction ; } public XPathFunction getOutHeaderFunction ( ) { if ( outHeaderFunction == null ) { outHeaderFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null && ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value != null ) { return exchange . getOut ( ) . getHeader ( value . toString ( ) ) ; } } return null ; } } ; } return outHeaderFunction ; } public void setOutHeaderFunction ( XPathFunction outHeaderFunction ) { this . outHeaderFunction = outHeaderFunction ; } public Class getResultType ( ) { return resultType ; } public void setResultType ( Class resultType ) { this . resultType = resultType ; if ( Number . class . isAssignableFrom ( resultType ) ) { numberResult ( ) ; } else if ( String . class . isAssignableFrom ( resultType ) ) { stringResult ( ) ; } else if ( Boolean . class . isAssignableFrom ( resultType ) ) { booleanResult ( ) ; } else if ( Node . class . isAssignableFrom ( resultType ) ) { nodeResult ( ) ; } else if ( NodeList . class . isAssignableFrom ( resultType ) ) { nodeSetResult ( ) ; } } protected synchronized Object evaluateAs ( E exchange , QName resultQName ) { this . exchange = exchange ; variableResolver . setExchange ( exchange ) ; try { Object document = getDocument ( exchange ) ; if ( resultQName != null ) { if ( document instanceof InputSource ) { InputSource inputSource = ( InputSource ) document ; return getExpression ( ) . evaluate ( inputSource , resultQName ) ; } else if ( document instanceof DOMSource ) { DOMSource source = ( DOMSource ) document ; return getExpression ( ) . evaluate ( source . getNode ( ) , resultQName ) ; } else { return getExpression ( ) . evaluate ( document , resultQName ) ; } } else { if ( document instanceof InputSource ) { InputSource inputSource = ( InputSource ) document ; return getExpression ( ) . evaluate ( inputSource ) ; } else if ( document instanceof DOMSource ) { DOMSource source = ( DOMSource ) document ; return getExpression ( ) . evaluate ( source . getNode ( ) ) ; } else { return getExpression ( ) . evaluate ( document ) ; } } } catch ( XPathExpressionException e ) { throw new InvalidXPathExpression ( getText ( ) , e ) ; } catch ( XPathFactoryConfigurationException e ) { throw new InvalidXPathExpression ( getText ( ) , e ) ; } } protected XPathExpression createXPathExpression ( ) throws XPathExpressionException , XPathFactoryConfigurationException { XPath xPath = getXPathFactory ( ) . newXPath ( ) ; xpathFactory = null ; xPath . setNamespaceContext ( getNamespaceContext ( ) ) ; xPath . setXPathVariableResolver ( variableResolver ) ; XPathFunctionResolver parentResolver = getFunctionResolver ( ) ; if ( parentResolver == null ) { parentResolver = xPath . getXPathFunctionResolver ( ) ; } xPath . setXPathFunctionResolver ( createDefaultFunctionResolver ( parentResolver ) ) ; return xPath . compile ( text ) ; } protected void populateDefaultNamespaces ( DefaultNamespaceContext context ) { setNamespaceIfNotPresent ( context , "in" , IN_NAMESPACE ) ; setNamespaceIfNotPresent ( context , "out" , OUT_NAMESPACE ) ; setNamespaceIfNotPresent ( context , "env" , Namespaces . ENVIRONMENT_VARIABLES ) ; setNamespaceIfNotPresent ( context , "system" , Namespaces . SYSTEM_PROPERTIES_NAMESPACE ) ; } protected void setNamespaceIfNotPresent ( DefaultNamespaceContext context , String prefix , String uri ) { if ( context != null ) { String current = context . getNamespaceURI ( prefix ) ; if ( current == null ) { context . add ( prefix , uri ) ; } } } protected XPathFunctionResolver createDefaultFunctionResolver ( final XPathFunctionResolver parent ) { return new XPathFunctionResolver ( ) { public XPathFunction resolveFunction ( QName qName , int argumentCount ) { XPathFunction answer = null ; if ( parent != null ) { answer = parent . resolveFunction ( qName , argumentCount ) ; } if ( answer == null ) { if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , IN_NAMESPACE ) || isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , DEFAULT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "body" ) && argumentCount == 0 ) { return getBodyFunction ( ) ; } if ( localPart . equals ( "header" ) && argumentCount == 1 ) { return getHeaderFunction ( ) ; } } if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , OUT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "body" ) && argumentCount == 0 ) { return getOutBodyFunction ( ) ; } if ( localPart . equals ( "header" ) && argumentCount == 1 ) { return getOutHeaderFunction ( ) ; } } } return answer ; } } ; } protected Object getDocument ( E exchange ) { Message in = exchange . getIn ( ) ; Class type = getDocumentType ( ) ; Object answer = null ; if ( type != null ) { answer = in . getBody ( type ) ; } if ( answer == null ) { answer = in . getBody ( ) ; } if ( answer instanceof String ) { answer = new InputSource ( new StringReader ( answer . toString ( ) ) ) ; } return answer ; } } 	1
package org . apache . camel . component . cxf . util ; import org . apache . cxf . endpoint . ConduitSelector ; import org . apache . cxf . endpoint . Endpoint ; import org . apache . cxf . message . Exchange ; import org . apache . cxf . message . Message ; import org . apache . cxf . transport . Conduit ; public class NullConduitSelector implements ConduitSelector { private Endpoint endpoint ; private NullConduit nullConduit ; public NullConduitSelector ( ) { nullConduit = new NullConduit ( ) ; } public void complete ( Exchange exchange ) { } public Endpoint getEndpoint ( ) { return endpoint ; } public void prepare ( Message message ) { } public Conduit selectConduit ( Message message ) { return nullConduit ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } } 	0
package org . apache . camel . util ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . lang . annotation . Annotation ; import java . lang . reflect . AnnotatedElement ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . Scanner ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . apache . camel . RuntimeCamelException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public final class ObjectHelper { private static final transient Log LOG = LogFactory . getLog ( ObjectHelper . class ) ; private ObjectHelper ( ) { } @ Deprecated public static boolean equals ( Object a , Object b ) { return equal ( a , b ) ; } public static boolean equal ( Object a , Object b ) { if ( a == b ) { return true ; } if ( a instanceof byte [ ] && b instanceof byte [ ] ) { return equalByteArray ( ( byte [ ] ) a , ( byte [ ] ) b ) ; } return a != null && b != null && a . equals ( b ) ; } public static boolean equalByteArray ( byte [ ] a , byte [ ] b ) { if ( a == b ) { return true ; } if ( a != null && b != null && a . length == b . length ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] != b [ i ] ) { return false ; } } return true ; } return false ; } public static boolean isEqualToAny ( Object object , Object ... values ) { for ( Object value : values ) { if ( equal ( object , value ) ) { return true ; } } return false ; } public static int compare ( Object a , Object b ) { if ( a == b ) { return 0 ; } if ( a == null ) { return - 1 ; } if ( b == null ) { return 1 ; } if ( a instanceof Comparable ) { Comparable comparable = ( Comparable ) a ; return comparable . compareTo ( b ) ; } else { int answer = a . getClass ( ) . getName ( ) . compareTo ( b . getClass ( ) . getName ( ) ) ; if ( answer == 0 ) { answer = a . hashCode ( ) - b . hashCode ( ) ; } return answer ; } } public static Boolean toBoolean ( Object value ) { if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return "true" . equalsIgnoreCase ( value . toString ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } if ( value instanceof Integer ) { return ( Integer ) value > 0 ? Boolean . TRUE : Boolean . FALSE ; } return null ; } public static void notNull ( Object value , String name ) { if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified" ) ; } } public static void notNull ( Object value , String name , Object on ) { if ( on == null ) { notNull ( value , name ) ; } else if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified on: " + on ) ; } } public static void notEmpty ( String value , String name ) { if ( isEmpty ( value ) ) { throw new IllegalArgumentException ( name + " must be specified and not empty" ) ; } } public static void notEmpty ( String value , String name , Object on ) { if ( on == null ) { notNull ( value , name ) ; } else if ( isEmpty ( value ) ) { throw new IllegalArgumentException ( name + " must be specified and not empty on: " + on ) ; } } public static String [ ] splitOnCharacter ( String value , String needle , int count ) { String rc [ ] = new String [ count ] ; rc [ 0 ] = value ; for ( int i = 1 ; i < count ; i ++ ) { String v = rc [ i - 1 ] ; int p = v . indexOf ( needle ) ; if ( p < 0 ) { return rc ; } rc [ i - 1 ] = v . substring ( 0 , p ) ; rc [ i ] = v . substring ( p + 1 ) ; } return rc ; } public static String removeStartingCharacters ( String text , char ch ) { int idx = 0 ; while ( text . charAt ( idx ) == ch ) { idx ++ ; } if ( idx > 0 ) { return text . substring ( idx ) ; } return text ; } public static String capitalize ( String text ) { if ( text == null ) { return null ; } int length = text . length ( ) ; if ( length == 0 ) { return text ; } String answer = text . substring ( 0 , 1 ) . toUpperCase ( ) ; if ( length > 1 ) { answer += text . substring ( 1 , length ) ; } return answer ; } @ SuppressWarnings ( "unchecked" ) public static boolean contains ( Object collectionOrArray , Object value ) { if ( collectionOrArray instanceof Collection ) { Collection collection = ( Collection ) collectionOrArray ; return collection . contains ( value ) ; } else if ( collectionOrArray instanceof String && value instanceof String ) { String str = ( String ) collectionOrArray ; String subStr = ( String ) value ; return str . contains ( subStr ) ; } else { Iterator iter = createIterator ( collectionOrArray ) ; while ( iter . hasNext ( ) ) { if ( equal ( value , iter . next ( ) ) ) { return true ; } } } return false ; } @ SuppressWarnings ( "unchecked" ) public static Iterator createIterator ( Object value ) { if ( value == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else if ( value instanceof Iterator ) { return ( Iterator ) value ; } else if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . iterator ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { List < Object > list = Arrays . asList ( ( Object [ ] ) value ) ; return list . iterator ( ) ; } else if ( value instanceof NodeList ) { final NodeList nodeList = ( NodeList ) value ; return new Iterator < Node > ( ) { int idx = - 1 ; public boolean hasNext ( ) { return ++ idx < nodeList . getLength ( ) ; } public Node next ( ) { return nodeList . item ( idx ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } else if ( value instanceof String ) { Scanner scanner = new Scanner ( ( String ) value ) ; scanner . useDelimiter ( "," ) ; return scanner ; } else { return Collections . singletonList ( value ) . iterator ( ) ; } } public static boolean matches ( List list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof Boolean ) { Boolean flag = ( Boolean ) value ; return flag . booleanValue ( ) ; } else { return true ; } } return false ; } public static boolean isNotNullAndNonEmpty ( String text ) { return isNotEmpty ( text ) ; } public static boolean isNullOrBlank ( String text ) { return isEmpty ( text ) ; } public static boolean isEmpty ( Object value ) { return ! isNotEmpty ( value ) ; } public static boolean isNotEmpty ( Object value ) { if ( value == null ) { return false ; } else if ( value instanceof String ) { String text = ( String ) value ; return text . trim ( ) . length ( ) > 0 ; } else { return true ; } } public static String getSystemProperty ( String name , String defaultValue ) { try { return System . getProperty ( name , defaultValue ) ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Caught security exception accessing system property: " + name + ". Reason: " + e , e ) ; } return defaultValue ; } } public static boolean getSystemProperty ( String name , Boolean defaultValue ) { String result = getSystemProperty ( name , defaultValue . toString ( ) ) ; return Boolean . parseBoolean ( result ) ; } public static String name ( Class type ) { return type != null ? type . getName ( ) : null ; } public static String className ( Object value ) { return name ( value != null ? value . getClass ( ) : null ) ; } public static String classCanonicalName ( Object value ) { if ( value != null ) { return value . getClass ( ) . getCanonicalName ( ) ; } else { return null ; } } public static Class < ? > loadClass ( String name ) { return loadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } public static Class < ? > loadClass ( String name , ClassLoader loader ) { Class clazz = doLoadClass ( name , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; if ( clazz == null ) { clazz = doLoadClass ( name , loader ) ; } if ( clazz == null ) { clazz = doLoadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } if ( clazz == null ) { LOG . warn ( "Could not find class: " + name ) ; } return clazz ; } private static Class < ? > doLoadClass ( String name , ClassLoader loader ) { ObjectHelper . notEmpty ( name , "name" ) ; if ( loader == null ) { return null ; } try { return loader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Can not load class: " + name + " using classloader: " + loader , e ) ; } } return null ; } public static InputStream loadResourceAsStream ( String name ) { InputStream in = null ; ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { in = contextClassLoader . getResourceAsStream ( name ) ; } if ( in == null ) { in = ObjectHelper . class . getClassLoader ( ) . getResourceAsStream ( name ) ; } return in ; } public static Object invokeMethod ( Method method , Object instance , Object ... parameters ) { try { return method . invoke ( instance , parameters ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType ) { return findMethodsWithAnnotation ( type , annotationType , false ) ; } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType , boolean checkMetaAnnotations ) { List < Method > answer = new ArrayList < Method > ( ) ; do { Method [ ] methods = type . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( hasAnnotation ( method , annotationType , checkMetaAnnotations ) ) { answer . add ( method ) ; } } type = type . getSuperclass ( ) ; } while ( type != null ) ; return answer ; } public static boolean hasAnnotation ( AnnotatedElement elem , Class < ? extends Annotation > annotationType , boolean checkMetaAnnotations ) { if ( elem . isAnnotationPresent ( annotationType ) ) { return true ; } if ( checkMetaAnnotations ) { for ( Annotation a : elem . getAnnotations ( ) ) { for ( Annotation meta : a . annotationType ( ) . getAnnotations ( ) ) { if ( meta . annotationType ( ) . getName ( ) . equals ( annotationType . getName ( ) ) ) { return true ; } } } } return false ; } public static String asString ( Object [ ] objects ) { if ( objects == null ) { return "null" ; } else { StringBuffer buffer = new StringBuffer ( "{" ) ; int counter = 0 ; for ( Object object : objects ) { if ( counter ++ > 0 ) { buffer . append ( ", " ) ; } String text = ( object == null ) ? "null" : object . toString ( ) ; buffer . append ( text ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } } public static boolean isAssignableFrom ( Class a , Class b ) { a = convertPrimitiveTypeToWrapperType ( a ) ; b = convertPrimitiveTypeToWrapperType ( b ) ; return a . isAssignableFrom ( b ) ; } public static Class convertPrimitiveTypeToWrapperType ( Class type ) { Class rc = type ; if ( type . isPrimitive ( ) ) { if ( type == int . class ) { rc = Integer . class ; } else if ( type == long . class ) { rc = Long . class ; } else if ( type == double . class ) { rc = Double . class ; } else if ( type == float . class ) { rc = Float . class ; } else if ( type == short . class ) { rc = Short . class ; } else if ( type == byte . class ) { rc = Byte . class ; } } return rc ; } public static String getDefaultCharacterSet ( ) { return Charset . defaultCharset ( ) . name ( ) ; } public static String getPropertyName ( Method method ) { String propertyName = method . getName ( ) ; if ( propertyName . startsWith ( "set" ) && method . getParameterTypes ( ) . length == 1 ) { propertyName = propertyName . substring ( 3 , 4 ) . toLowerCase ( ) + propertyName . substring ( 4 ) ; } return propertyName ; } public static boolean hasAnnotation ( Annotation [ ] annotations , Class < ? > type ) { for ( Annotation annotation : annotations ) { if ( type . isInstance ( annotation ) ) { return true ; } } return false ; } public static void close ( Closeable closeable , String name , Log log ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException e ) { if ( log != null ) { log . warn ( "Could not close: " + name + ". Reason: " + e , e ) ; } } } } public static < T > T cast ( Class < T > toType , Object value ) { if ( toType == boolean . class ) { return ( T ) cast ( Boolean . class , value ) ; } else if ( toType . isPrimitive ( ) ) { Class newType = convertPrimitiveTypeToWrapperType ( toType ) ; if ( newType != toType ) { return ( T ) cast ( newType , value ) ; } } try { return toType . cast ( value ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( "Failed to convert: " + value + " to type: " + toType . getName ( ) + " due to: " + e , e ) ; } } public static < T > T newInstance ( Class < T > type ) { try { return type . newInstance ( ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static < T > T newInstance ( Class < ? > actualType , Class < T > expectedType ) { try { Object value = actualType . newInstance ( ) ; return cast ( expectedType , value ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isJavaIdentifier ( String name ) { if ( name == null ) { return false ; } int size = name . length ( ) ; if ( size < 1 ) { return false ; } if ( Character . isJavaIdentifierStart ( name . charAt ( 0 ) ) ) { for ( int i = 1 ; i < size ; i ++ ) { if ( ! Character . isJavaIdentifierPart ( name . charAt ( i ) ) ) { return false ; } } return true ; } return false ; } public static Object type ( Object bean ) { return bean != null ? bean . getClass ( ) : null ; } public static boolean evaluateValuePredicate ( Object value ) { if ( value instanceof Boolean ) { Boolean aBoolean = ( Boolean ) value ; return aBoolean . booleanValue ( ) ; } else if ( value instanceof String ) { if ( "true" . equals ( value ) ) { return true ; } else if ( "false" . equals ( value ) ) { return false ; } } return value != null ; } public static RuntimeCamelException wrapRuntimeCamelException ( Throwable e ) { if ( e instanceof RuntimeCamelException ) { return ( RuntimeCamelException ) e ; } else { return new RuntimeCamelException ( e ) ; } } } 	1
package org . apache . camel . component . cxf . util ; import java . io . IOException ; import java . io . OutputStream ; import org . apache . cxf . io . CachedOutputStream ; import org . apache . cxf . message . Message ; import org . apache . cxf . transport . Conduit ; import org . apache . cxf . transport . Destination ; import org . apache . cxf . transport . MessageObserver ; import org . apache . cxf . ws . addressing . EndpointReferenceType ; public class NullConduit implements Conduit { public void close ( ) { } public void close ( Message message ) throws IOException { OutputStream outputStream = message . getContent ( OutputStream . class ) ; if ( outputStream != null ) { outputStream . close ( ) ; } } public Destination getBackChannel ( ) { return null ; } public EndpointReferenceType getTarget ( ) { return null ; } public void prepare ( Message message ) throws IOException { CachedOutputStream outputStream = new CachedOutputStream ( ) ; message . setContent ( OutputStream . class , outputStream ) ; } public void setMessageObserver ( MessageObserver observer ) { } } 	0
package org . apache . camel . impl ; import java . util . HashSet ; import java . util . Set ; import java . util . regex . Pattern ; import org . apache . camel . spi . HeaderFilterStrategy ; public class DefaultHeaderFilterStrategy implements HeaderFilterStrategy { protected enum Direction { IN , OUT } private Set < String > inFilter ; private Pattern inFilterPattern ; private Set < String > outFilter ; private Pattern outFilterPattern ; private boolean isLowercase ; private boolean allowNullValues ; public boolean applyFilterToCamelHeaders ( String headerName , Object headerValue ) { return doFiltering ( Direction . OUT , headerName , headerValue ) ; } public boolean applyFilterToExternalHeaders ( String headerName , Object headerValue ) { return doFiltering ( Direction . IN , headerName , headerValue ) ; } public Set < String > getOutFilter ( ) { if ( outFilter == null ) { outFilter = new HashSet < String > ( ) ; } return outFilter ; } public void setOutFilter ( Set < String > value ) { outFilter = value ; } public String getOutFilterPattern ( ) { return outFilterPattern == null ? null : outFilterPattern . pattern ( ) ; } public void setOutFilterPattern ( String value ) { if ( value == null ) { outFilterPattern = null ; } else { outFilterPattern = Pattern . compile ( value ) ; } } public Set < String > getInFilter ( ) { if ( inFilter == null ) { inFilter = new HashSet < String > ( ) ; } return inFilter ; } public void setInFilter ( Set < String > value ) { inFilter = value ; } public String getInFilterPattern ( ) { return inFilterPattern == null ? null : inFilterPattern . pattern ( ) ; } public void setInFilterPattern ( String value ) { if ( value == null ) { inFilterPattern = null ; } else { inFilterPattern = Pattern . compile ( value ) ; } } public boolean getIsLowercase ( ) { return isLowercase ; } public void setIsLowercase ( boolean value ) { isLowercase = value ; } public boolean getAllowNullValues ( ) { return allowNullValues ; } public void setAllowNullValues ( boolean value ) { allowNullValues = value ; } protected boolean extendedFilter ( Direction direction , String key , Object value ) { return false ; } private boolean doFiltering ( Direction direction , String headerName , Object headerValue ) { if ( headerName == null ) { return true ; } if ( headerValue == null && ! allowNullValues ) { return true ; } Pattern pattern = null ; Set < String > filter = null ; if ( Direction . OUT == direction ) { pattern = outFilterPattern ; filter = outFilter ; } else if ( Direction . IN == direction ) { pattern = inFilterPattern ; filter = inFilter ; } if ( pattern != null && pattern . matcher ( headerName ) . matches ( ) ) { return true ; } if ( filter != null ) { if ( isLowercase ) { if ( filter . contains ( headerName . toLowerCase ( ) ) ) { return true ; } } else { if ( filter . contains ( headerName ) ) { return true ; } } } if ( extendedFilter ( direction , headerName , headerValue ) ) { return true ; } return false ; } } 	1
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "ognl" ) public class OgnlExpression extends ExpressionType { public OgnlExpression ( ) { } public OgnlExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "ognl" ; } } 	0
package org . apache . camel . processor . validation ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . ErrorHandler ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; public interface ValidatorErrorHandler extends ErrorHandler { void reset ( ) ; void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException ; } 	1
package org . apache . camel . builder . script ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import org . apache . camel . language . LanguageAnnotation ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER } ) @ LanguageAnnotation ( language = "jruby" ) public @ interface Ruby { String value ( ) ; } 	0
package org . apache . camel . processor . idempotent ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ExpressionHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class IdempotentConsumer extends ServiceSupport implements Processor { private static final transient Log LOG = LogFactory . getLog ( IdempotentConsumer . class ) ; private Expression < Exchange > messageIdExpression ; private Processor nextProcessor ; private MessageIdRepository messageIdRepository ; public IdempotentConsumer ( Expression < Exchange > messageIdExpression , MessageIdRepository messageIdRepository , Processor nextProcessor ) { this . messageIdExpression = messageIdExpression ; this . messageIdRepository = messageIdRepository ; this . nextProcessor = nextProcessor ; } @ Override public String toString ( ) { return "IdempotentConsumer[expression=" + messageIdExpression + ", repository=" + messageIdRepository + ", processor=" + nextProcessor + "]" ; } public void process ( Exchange exchange ) throws Exception { String messageId = ExpressionHelper . evaluateAsString ( messageIdExpression , exchange ) ; if ( messageId == null ) { throw new NoMessageIdException ( exchange , messageIdExpression ) ; } if ( ! messageIdRepository . contains ( messageId ) ) { nextProcessor . process ( exchange ) ; } else { onDuplicateMessage ( exchange , messageId ) ; } } public Expression < Exchange > getMessageIdExpression ( ) { return messageIdExpression ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public Processor getNextProcessor ( ) { return nextProcessor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( nextProcessor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( nextProcessor ) ; } protected void onDuplicateMessage ( Exchange exchange , String messageId ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Ignoring duplicate message with id: " + messageId + " for exchange: " + exchange ) ; } } } 	1
package org . apache . camel ; public interface Service { void start ( ) throws Exception ; void stop ( ) throws Exception ; } 	0
package org . apache . camel . impl ; import java . net . URI ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import java . util . concurrent . ThreadFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . URISupport ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class DefaultComponent < E extends Exchange > extends ServiceSupport implements Component < E > { private static final transient Log LOG = LogFactory . getLog ( DefaultComponent . class ) ; private int defaultThreadPoolSize = 5 ; private CamelContext camelContext ; private ScheduledExecutorService executorService ; public DefaultComponent ( ) { } public DefaultComponent ( CamelContext context ) { this . camelContext = context ; } public Endpoint < E > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; if ( path . startsWith ( "//" ) ) { path = path . substring ( 2 ) ; } int idx = path . indexOf ( '?' ) ; if ( idx > 0 ) { path = path . substring ( 0 , idx ) ; } Map parameters = URISupport . parseParameters ( u ) ; validateURI ( uri , path , parameters ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Creating endpoint uri=[" + uri + "], path=[" + path + "], parameters=[" + parameters + "]" ) ; } Endpoint < E > endpoint = createEndpoint ( uri , path , parameters ) ; if ( endpoint == null ) { return null ; } if ( parameters != null ) { endpoint . configureProperties ( parameters ) ; if ( useIntrospectionOnEndpoint ( ) ) { setProperties ( endpoint , parameters ) ; } if ( ! endpoint . isLenientProperties ( ) && parameters . size ( ) > 0 ) { throw new ResolveEndpointFailedException ( uri , "There are " + parameters . size ( ) + " parameters that couldn't be set on the endpoint." + " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint." + " Unknown parameters=[" + parameters + "]" ) ; } } return endpoint ; } protected void validateURI ( String uri , String path , Map parameters ) throws ResolveEndpointFailedException { if ( uri . contains ( "&" ) && ! uri . contains ( "?" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: no ? marker however the uri " + "has & parameter separators. Check the uri if its missing a ? marker." ) ; } if ( uri . contains ( "&&" ) ) { throw new ResolveEndpointFailedException ( uri , "Invalid uri syntax: Double && marker found. " + "Check the uri and remove the duplicate & marker." ) ; } } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext context ) { this . camelContext = context ; } public ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { executorService = createExecutorService ( ) ; } return executorService ; } public void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } protected ScheduledExecutorService createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( defaultThreadPoolSize , new ThreadFactory ( ) { int counter ; public synchronized Thread newThread ( Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "Thread: " + ( ++ counter ) + " " + DefaultComponent . this . toString ( ) ) ; return thread ; } } ) ; } protected void doStart ( ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; } protected void doStop ( ) throws Exception { if ( executorService != null ) { executorService . shutdown ( ) ; } } protected abstract Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception ; protected void setProperties ( Object bean , Map parameters ) throws Exception { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , bean , parameters ) ; } protected boolean useIntrospectionOnEndpoint ( ) { return true ; } public < T > T convertTo ( Class < T > type , Object value ) { return CamelContextHelper . convertTo ( getCamelContext ( ) , type , value ) ; } public < T > T mandatoryConvertTo ( Class < T > type , Object value ) { return CamelContextHelper . mandatoryConvertTo ( getCamelContext ( ) , type , value ) ; } public < T > T newInstance ( Class < T > beanType ) { return getCamelContext ( ) . getInjector ( ) . newInstance ( beanType ) ; } public Object lookup ( String name ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name ) ; } public < T > T lookup ( String name , Class < T > beanType ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , beanType ) ; } public Object mandatoryLookup ( String name ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name ) ; } public < T > T mandatoryLookup ( String name , Class < T > beanType ) { return CamelContextHelper . mandatoryLookup ( getCamelContext ( ) , name , beanType ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type ) { return getAndRemoveParameter ( parameters , key , type , null ) ; } public < T > T getAndRemoveParameter ( Map parameters , String key , Class < T > type , T defaultValue ) { Object value = parameters . remove ( key ) ; if ( value == null ) { value = defaultValue ; } if ( value == null ) { return null ; } return convertTo ( type , value ) ; } } 	1
package org . apache . camel . component . restlet ; import java . io . IOException ; import java . util . Map ; import javax . xml . transform . dom . DOMSource ; import org . apache . camel . Exchange ; import org . apache . camel . HeaderFilterStrategyAware ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . converter . jaxp . StringSource ; import org . apache . camel . spi . HeaderFilterStrategy ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . restlet . data . ChallengeResponse ; import org . restlet . data . ChallengeScheme ; import org . restlet . data . Form ; import org . restlet . data . MediaType ; import org . restlet . data . Parameter ; import org . restlet . data . Request ; import org . restlet . data . Response ; import org . restlet . data . Status ; public class DefaultRestletBinding implements RestletBinding , HeaderFilterStrategyAware { private static final Log LOG = LogFactory . getLog ( DefaultRestletBinding . class ) ; private HeaderFilterStrategy headerFilterStrategy ; public void populateExchangeFromRestletRequest ( Request request , Exchange exchange ) throws Exception { Message inMessage = exchange . getIn ( ) ; for ( Map . Entry < String , Object > entry : request . getAttributes ( ) . entrySet ( ) ) { if ( ! headerFilterStrategy . applyFilterToExternalHeaders ( entry . getKey ( ) , entry . getValue ( ) ) ) { inMessage . setHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate exchange from Restlet request header: " + entry . getKey ( ) + " value: " + entry . getValue ( ) ) ; } } } String query = request . getResourceRef ( ) . getQuery ( ) ; if ( null != query ) { inMessage . setHeader ( RestletConstants . QUERY_STRING , query ) ; } if ( ! request . isEntityAvailable ( ) ) { return ; } Form form = new Form ( request . getEntity ( ) ) ; if ( form != null ) { for ( Map . Entry < String , String > entry : form . getValuesMap ( ) . entrySet ( ) ) { if ( entry . getValue ( ) == null ) { inMessage . setBody ( entry . getKey ( ) ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate exchange from Restlet request body: " + entry . getValue ( ) ) ; } } else { if ( ! headerFilterStrategy . applyFilterToExternalHeaders ( entry . getKey ( ) , entry . getValue ( ) ) ) { inMessage . setHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate exchange from Restlet request user header: " + entry . getKey ( ) + " value: " + entry . getValue ( ) ) ; } } } } } } public void populateRestletRequestFromExchange ( Request request , Exchange exchange ) { request . setReferrerRef ( "camel-restlet" ) ; String body = exchange . getIn ( ) . getBody ( String . class ) ; Form form = new Form ( ) ; form . add ( body , null ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate Restlet request from exchange body: " + body ) ; } String login = ( String ) exchange . getIn ( ) . getHeader ( RestletConstants . LOGIN ) ; String password = ( String ) exchange . getIn ( ) . getHeader ( RestletConstants . PASSWORD ) ; if ( login != null && password != null ) { ChallengeResponse authentication = new ChallengeResponse ( ChallengeScheme . HTTP_BASIC , login , password ) ; request . setChallengeResponse ( authentication ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Basic HTTP Authentication has been applied" ) ; } } for ( Map . Entry < String , Object > entry : exchange . getIn ( ) . getHeaders ( ) . entrySet ( ) ) { if ( ! headerFilterStrategy . applyFilterToCamelHeaders ( entry . getKey ( ) , entry . getValue ( ) ) ) { if ( entry . getKey ( ) . startsWith ( "org.restlet." ) ) { request . getAttributes ( ) . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } else { form . add ( entry . getKey ( ) , entry . getValue ( ) . toString ( ) ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate Restlet request from exchange header: " + entry . getKey ( ) + " value: " + entry . getValue ( ) ) ; } } } request . setEntity ( form . getWebRepresentation ( ) ) ; } public void populateRestletResponseFromExchange ( Exchange exchange , Response response ) { Message out = exchange . getOut ( ) ; MediaType mediaType = out . getHeader ( RestletConstants . MEDIA_TYPE , MediaType . class ) ; if ( mediaType == null ) { Object body = out . getBody ( ) ; mediaType = MediaType . TEXT_PLAIN ; if ( body instanceof String ) { mediaType = MediaType . TEXT_PLAIN ; } else if ( body instanceof StringSource || body instanceof DOMSource ) { mediaType = MediaType . TEXT_XML ; } } Integer responseCode = out . getHeader ( RestletConstants . RESPONSE_CODE , Integer . class ) ; if ( responseCode != null ) { response . setStatus ( Status . valueOf ( responseCode ) ) ; } for ( Map . Entry < String , Object > entry : out . getHeaders ( ) . entrySet ( ) ) { if ( ! headerFilterStrategy . applyFilterToCamelHeaders ( entry . getKey ( ) , entry . getValue ( ) ) ) { response . getAttributes ( ) . put ( entry . getKey ( ) , entry . getValue ( ) ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate Restlet response from exchange header: " + entry . getKey ( ) + " value: " + entry . getValue ( ) ) ; } } } String text = out . getBody ( String . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate Restlet response from exchange body: " + text ) ; } response . setEntity ( text , mediaType ) ; } public void populateExchangeFromRestletResponse ( Exchange exchange , Response response ) throws IOException { for ( Map . Entry < String , Object > entry : response . getAttributes ( ) . entrySet ( ) ) { if ( ! headerFilterStrategy . applyFilterToExternalHeaders ( entry . getKey ( ) , entry . getValue ( ) ) ) { exchange . getOut ( ) . setHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate exchange from Restlet response header: " + entry . getKey ( ) + " value: " + entry . getValue ( ) ) ; } } } String text = response . getEntity ( ) . getText ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Populate exchange from Restlet response: " + text ) ; } if ( exchange . getPattern ( ) . isOutCapable ( ) ) { exchange . getOut ( ) . setBody ( text ) ; } else { throw new RuntimeCamelException ( "Exchange is incapable of receiving response: " + exchange ) ; } } public HeaderFilterStrategy getHeaderFilterStrategy ( ) { return headerFilterStrategy ; } public void setHeaderFilterStrategy ( HeaderFilterStrategy strategy ) { headerFilterStrategy = strategy ; } } 	0
package org . apache . camel . builder ; import org . apache . camel . Processor ; import org . apache . camel . model . LoggingLevel ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingErrorHandler ; import org . apache . camel . spi . RouteContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandlerBuilder extends ErrorHandlerBuilderSupport { private Log log = LogFactory . getLog ( Logger . class ) ; private LoggingLevel level = LoggingLevel . ERROR ; public LoggingErrorHandlerBuilder ( ) { } public LoggingErrorHandlerBuilder ( final Log log ) { this . log = log ; } public LoggingErrorHandlerBuilder ( final Log log , final LoggingLevel level ) { this . log = log ; this . level = level ; } public ErrorHandlerBuilder copy ( ) { LoggingErrorHandlerBuilder answer = new LoggingErrorHandlerBuilder ( ) ; answer . setLog ( getLog ( ) ) ; answer . setLevel ( getLevel ( ) ) ; return answer ; } public Processor createErrorHandler ( final RouteContext routeContext , final Processor processor ) { LoggingErrorHandler handler = new LoggingErrorHandler ( processor , log , level ) ; configure ( handler ) ; return handler ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( final LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( final Log log ) { this . log = log ; } public LoggingErrorHandlerBuilder level ( final LoggingLevel level ) { this . level = level ; return this ; } public LoggingErrorHandlerBuilder log ( final Log log ) { this . log = log ; return this ; } } 	1
package org . apache . camel . builder . sql ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . RuntimeExpressionException ; import org . apache . camel . util . ObjectHelper ; import org . josql . Query ; import org . josql . QueryExecutionException ; import org . josql . QueryParseException ; public class SqlBuilder < E extends Exchange > implements Expression < E > , Predicate < E > { private Query query ; private Map < String , Object > variables = new HashMap < String , Object > ( ) ; public SqlBuilder ( Query query ) { this . query = query ; } public Object evaluate ( E exchange ) { return evaluateQuery ( exchange ) ; } public boolean matches ( E exchange ) { List list = evaluateQuery ( exchange ) ; return matches ( exchange , list ) ; } public void assertMatches ( String text , E exchange ) throws AssertionError { List list = evaluateQuery ( exchange ) ; if ( ! matches ( exchange , list ) ) { throw new AssertionError ( this + " failed on " + exchange + " as found " + list ) ; } } public static < E extends Exchange > SqlBuilder < E > sql ( String sql ) throws QueryParseException { Query q = new Query ( ) ; q . parse ( sql ) ; return new SqlBuilder ( q ) ; } public SqlBuilder < E > variable ( String name , Object value ) { getVariables ( ) . put ( name , value ) ; return this ; } public Map < String , Object > getVariables ( ) { return variables ; } public void setVariables ( Map < String , Object > properties ) { this . variables = properties ; } protected boolean matches ( E exchange , List list ) { return ObjectHelper . matches ( list ) ; } protected List evaluateQuery ( E exchange ) { configureQuery ( exchange ) ; Message in = exchange . getIn ( ) ; List list = in . getBody ( List . class ) ; if ( list == null ) { list = Collections . singletonList ( in . getBody ( ) ) ; } try { return query . execute ( list ) . getResults ( ) ; } catch ( QueryExecutionException e ) { throw new RuntimeExpressionException ( e ) ; } } protected void configureQuery ( E exchange ) { addVariables ( exchange . getProperties ( ) ) ; addVariables ( exchange . getIn ( ) . getHeaders ( ) ) ; addVariables ( getVariables ( ) ) ; query . setVariable ( "exchange" , exchange ) ; query . setVariable ( "in" , exchange . getIn ( ) ) ; query . setVariable ( "out" , exchange . getOut ( ) ) ; } protected void addVariables ( Map < String , Object > map ) { Set < Map . Entry < String , Object > > propertyEntries = map . entrySet ( ) ; for ( Map . Entry < String , Object > entry : propertyEntries ) { query . setVariable ( entry . getKey ( ) , entry . getValue ( ) ) ; } } } 	0
package org . apache . camel . management ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationProcessor extends DelegateProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private PerformanceCounter counter ; public InstrumentationProcessor ( PerformanceCounter counter ) { this . counter = counter ; } public InstrumentationProcessor ( ) { } @ Override public String toString ( ) { return "Instrumentation(" + processor + ")" ; } public void setCounter ( PerformanceCounter counter ) { this . counter = counter ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( processor == null ) { callback . done ( true ) ; return true ; } final long startTime = System . nanoTime ( ) ; if ( processor instanceof AsyncProcessor ) { return ( ( AsyncProcessor ) processor ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean doneSynchronously ) { if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( doneSynchronously ) ; } } ) ; } try { processor . process ( exchange ) ; } catch ( Throwable e ) { exchange . setException ( e ) ; } if ( counter != null ) { recordTime ( exchange , ( System . nanoTime ( ) - startTime ) / 1000000.0 ) ; } callback . done ( true ) ; return true ; } protected void recordTime ( Exchange exchange , double duration ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Recording duration: " + duration + " millis for exchange: " + exchange ) ; } if ( ! exchange . isFailed ( ) && exchange . getException ( ) == null ) { counter . completedExchange ( duration ) ; } else { counter . failedExchange ( ) ; } } } 	1
package org . apache . camel . component . quartz ; import org . apache . camel . CamelContext ; import org . quartz . JobExecutionContext ; import org . quartz . JobExecutionException ; import org . quartz . SchedulerContext ; import org . quartz . SchedulerException ; import org . quartz . StatefulJob ; public class StatefulCamelJob implements StatefulJob { public void execute ( final JobExecutionContext context ) throws JobExecutionException { SchedulerContext schedulerContext ; try { schedulerContext = context . getScheduler ( ) . getContext ( ) ; } catch ( SchedulerException e ) { throw new JobExecutionException ( "Failed to obtain scheduler context for job " + context . getJobDetail ( ) . getName ( ) ) ; } CamelContext camelContext = ( CamelContext ) schedulerContext . get ( QuartzEndpoint . CONTEXT_KEY ) ; String endpointUri = ( String ) context . getJobDetail ( ) . getJobDataMap ( ) . get ( QuartzEndpoint . ENDPOINT_KEY ) ; QuartzEndpoint quartzEndpoint = ( QuartzEndpoint ) camelContext . getEndpoint ( endpointUri ) ; quartzEndpoint . onJobExecute ( context ) ; } } 	0
package org . apache . camel . impl . converter ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; import static java . lang . reflect . Modifier . isAbstract ; import static java . lang . reflect . Modifier . isPublic ; import static java . lang . reflect . Modifier . isStatic ; import org . apache . camel . Converter ; import org . apache . camel . Exchange ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ResolverUtil ; import org . apache . camel . util . WebSphereResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AnnotationTypeConverterLoader implements TypeConverterLoader { public static final String META_INF_SERVICES = "META-INF/services/org/apache/camel/TypeConverter" ; private static final transient Log LOG = LogFactory . getLog ( AnnotationTypeConverterLoader . class ) ; private ResolverUtil resolver ; private Set < Class > visitedClasses = new HashSet < Class > ( ) ; public AnnotationTypeConverterLoader ( ) { if ( WebSphereResolverUtil . isWebSphereClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ) { LOG . info ( "Using WebSphere specific ResolverUtil" ) ; resolver = new WebSphereResolverUtil ( META_INF_SERVICES ) ; } else { resolver = new ResolverUtil ( ) ; } } public AnnotationTypeConverterLoader ( ResolverUtil resolverUtil ) { this . resolver = resolverUtil ; } public void load ( TypeConverterRegistry registry ) throws Exception { String [ ] packageNames = findPackageNames ( ) ; resolver . findAnnotated ( Converter . class , packageNames ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class type : classes ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading converter class: " + ObjectHelper . name ( type ) ) ; } loadConverterMethods ( registry , type ) ; } } protected String [ ] findPackageNames ( ) throws IOException { Set < String > packages = new HashSet < String > ( ) ; ClassLoader ccl = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( ccl != null ) { findPackages ( packages , ccl ) ; } findPackages ( packages , getClass ( ) . getClassLoader ( ) ) ; return packages . toArray ( new String [ packages . size ( ) ] ) ; } protected void findPackages ( Set < String > packages , ClassLoader classLoader ) throws IOException { Enumeration < URL > resources = classLoader . getResources ( META_INF_SERVICES ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; if ( url != null ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ; try { while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } finally { ObjectHelper . close ( reader , null , LOG ) ; } } } } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected void loadConverterMethods ( TypeConverterRegistry registry , Class type ) { if ( visitedClasses . contains ( type ) ) { return ; } visitedClasses . add ( type ) ; try { Method [ ] methods = type . getDeclaredMethods ( ) ; CachingInjector injector = null ; for ( Method method : methods ) { if ( ObjectHelper . hasAnnotation ( method , Converter . class , true ) ) { if ( isValidConverterMethod ( method ) ) { int modifiers = method . getModifiers ( ) ; if ( isAbstract ( modifiers ) || ! isPublic ( modifiers ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method is not a public and concrete method" ) ; } else { Class < ? > toType = method . getReturnType ( ) ; if ( toType . equals ( Void . class ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method returns a void method" ) ; } else { Class < ? > fromType = method . getParameterTypes ( ) [ 0 ] ; if ( isStatic ( modifiers ) ) { registerTypeConverter ( registry , method , toType , fromType , new StaticMethodTypeConverter ( method ) ) ; } else { if ( injector == null ) { injector = new CachingInjector ( registry , type ) ; } registerTypeConverter ( registry , method , toType , fromType , new InstanceMethodTypeConverter ( injector , method ) ) ; } } } } else { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method should have one parameter" ) ; } } } Class superclass = type . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { loadConverterMethods ( registry , superclass ) ; } } catch ( NoClassDefFoundError e ) { LOG . warn ( "Ignoring converter type: " + type . getName ( ) + " as a dependent class could not be found: " + e , e ) ; } } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { registry . addTypeConverter ( toType , fromType , typeConverter ) ; } protected boolean isValidConverterMethod ( Method method ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; return ( parameterTypes != null ) && ( parameterTypes . length == 1 || ( parameterTypes . length == 2 && Exchange . class . isAssignableFrom ( parameterTypes [ 1 ] ) ) ) ; } } 	1
package org . apache . camel . converter . jaxb ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAnyElement ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "property" ) @ XmlAccessorType ( value = XmlAccessType . FIELD ) public class PropertyType { @ XmlAttribute private String key ; @ XmlAnyElement ( lax = true ) private Object value ; public String getKey ( ) { return key ; } public void setKey ( String key ) { this . key = key ; } public Object getValue ( ) { return value ; } public void setValue ( Object value ) { this . value = value ; } } 	0
package org . apache . camel . spi ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public interface Synchronization { void onComplete ( Exchange exchange ) ; void onFailure ( Exchange exchange ) ; } 	1
package org . apache . camel . component . xslt ; import java . util . Map ; import javax . xml . transform . TransformerFactory ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . builder . xml . XsltBuilder ; import org . apache . camel . component . ResourceBasedComponent ; import org . apache . camel . converter . jaxp . XmlConverter ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . util . ObjectHelper ; import org . springframework . core . io . Resource ; public class XsltComponent extends ResourceBasedComponent { private XmlConverter xmlConverter ; public XmlConverter getXmlConverter ( ) { return xmlConverter ; } public void setXmlConverter ( XmlConverter xmlConverter ) { this . xmlConverter = xmlConverter ; } protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { Resource resource = resolveMandatoryResource ( remaining ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( this + " using schema resource: " + resource ) ; } XsltBuilder xslt = newInstance ( XsltBuilder . class ) ; XmlConverter converter = null ; String converterName = getAndRemoveParameter ( parameters , "converter" , String . class ) ; if ( converterName != null ) { converter = mandatoryLookup ( converterName , XmlConverter . class ) ; } if ( converter == null ) { converter = getXmlConverter ( ) ; } if ( converter != null ) { xslt . setConverter ( converter ) ; } String transformerFactoryClassName = getAndRemoveParameter ( parameters , "transformerFactoryClass" , String . class ) ; TransformerFactory factory = null ; if ( transformerFactoryClassName != null ) { Class factoryClass = ObjectHelper . loadClass ( transformerFactoryClassName ) ; if ( factoryClass != null ) { factory = ( TransformerFactory ) newInstance ( factoryClass ) ; } else { log . warn ( "Can't find the TransformerFactoryClass with the class name " + transformerFactoryClassName ) ; } } String transformerFactoryName = getAndRemoveParameter ( parameters , "transformerFactory" , String . class ) ; if ( transformerFactoryName != null ) { factory = mandatoryLookup ( transformerFactoryName , TransformerFactory . class ) ; } if ( factory != null ) { xslt . getConverter ( ) . setTransformerFactory ( factory ) ; } xslt . setTransformerInputStream ( resource . getInputStream ( ) ) ; configureXslt ( xslt , uri , remaining , parameters ) ; return new ProcessorEndpoint ( uri , this , xslt ) ; } protected void configureXslt ( XsltBuilder xslt , String uri , String remaining , Map parameters ) throws Exception { setProperties ( xslt , parameters ) ; } } 	0
package org . apache . camel . util ; import java . net . InetAddress ; import java . net . ServerSocket ; import java . util . logging . Level ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class UuidGenerator { private static final transient Log LOG = LogFactory . getLog ( UuidGenerator . class ) ; private static final String UNIQUE_STUB ; private static int instanceCount ; private static String hostName ; private String seed ; private long sequence ; static { String stub = "" ; boolean canAccessSystemProps = true ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPropertiesAccess ( ) ; } } catch ( SecurityException se ) { canAccessSystemProps = false ; } if ( canAccessSystemProps ) { try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; ServerSocket ss = new ServerSocket ( 0 ) ; stub = "/" + ss . getLocalPort ( ) + "-" + System . currentTimeMillis ( ) + "/" ; Thread . sleep ( 100 ) ; ss . close ( ) ; } catch ( Exception ioe ) { LOG . warn ( "Could not generate unique stub" , ioe ) ; } } else { hostName = "localhost" ; stub = "-1-" + System . currentTimeMillis ( ) + "-" ; } UNIQUE_STUB = stub ; } public UuidGenerator ( String prefix ) { synchronized ( UNIQUE_STUB ) { this . seed = prefix + UNIQUE_STUB + ( instanceCount ++ ) + "-" ; } } public UuidGenerator ( ) { this ( "ID-" + hostName ) ; } public static String getHostName ( ) { return hostName ; } public synchronized String generateId ( ) { return this . seed + ( this . sequence ++ ) ; } public String generateSanitizedId ( ) { return generateSanitizedId ( generateId ( ) ) ; } public static String generateSanitizedId ( String id ) { id = id . replace ( ':' , '-' ) ; id = id . replace ( '_' , '-' ) ; id = id . replace ( '.' , '-' ) ; return id ; } } 	1
package org . apache . camel . osgi ; import java . io . BufferedInputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Properties ; import java . util . Set ; import java . util . StringTokenizer ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . osgi . framework . Bundle ; import org . osgi . framework . BundleActivator ; import org . osgi . framework . BundleContext ; import org . osgi . framework . BundleEvent ; import org . osgi . framework . SynchronousBundleListener ; import org . springframework . osgi . util . BundleDelegatingClassLoader ; public class Activator implements BundleActivator , SynchronousBundleListener { public static final String META_INF_TYPE_CONVERTER = "META-INF/services/org/apache/camel/TypeConverter" ; public static final String META_INF_COMPONENT = "META-INF/services/org/apache/camel/component/" ; public static final String META_INF_LANGUAGE = "META-INF/services/org/apache/camel/language/" ; private static final transient Log LOG = LogFactory . getLog ( Activator . class ) ; private static final Map < String , ComponentEntry > COMPONENTS = new HashMap < String , ComponentEntry > ( ) ; private static final Map < URL , TypeConverterEntry > TYPE_CONVERTERS = new HashMap < URL , TypeConverterEntry > ( ) ; private static final Map < String , ComponentEntry > LANGUAGES = new HashMap < String , ComponentEntry > ( ) ; private static Bundle bundle ; private class ComponentEntry { Bundle bundle ; String path ; String name ; Class type ; } private class TypeConverterEntry { Bundle bundle ; URL resource ; Set < String > converterPackages ; } public void bundleChanged ( BundleEvent event ) { try { Bundle bundle = event . getBundle ( ) ; if ( event . getType ( ) == BundleEvent . RESOLVED ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Bundle resolved: " + bundle . getSymbolicName ( ) ) ; } mayBeAddComponentAndLanguageFor ( bundle ) ; mayBeAddTypeConverterFor ( bundle ) ; } else if ( event . getType ( ) == BundleEvent . UNRESOLVED ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Bundle unresolved: " + bundle . getSymbolicName ( ) ) ; } mayBeRemoveComponentAndLanguageFor ( bundle ) ; mayBeRemoveTypeConverterFor ( bundle ) ; } } catch ( Throwable e ) { LOG . fatal ( "Exception handing bundle changed event" , e ) ; } } protected synchronized void addComponentEntry ( String entryPath , Bundle bundle , Map < String , ComponentEntry > entries ) { Enumeration e = bundle . getEntryPaths ( entryPath ) ; if ( e != null ) { while ( e . hasMoreElements ( ) ) { String path = ( String ) e . nextElement ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found entry: " + path + " in bundle " + bundle . getSymbolicName ( ) ) ; } ComponentEntry entry = new ComponentEntry ( ) ; entry . bundle = bundle ; entry . path = path ; entry . name = path . substring ( path . lastIndexOf ( "/" ) + 1 ) ; entries . put ( entry . name , entry ) ; } } } protected void mayBeAddComponentAndLanguageFor ( Bundle bundle ) { addComponentEntry ( META_INF_COMPONENT , bundle , COMPONENTS ) ; addComponentEntry ( META_INF_LANGUAGE , bundle , LANGUAGES ) ; } protected synchronized void mayBeAddTypeConverterFor ( Bundle bundle ) { try { Enumeration e = bundle . getResources ( META_INF_TYPE_CONVERTER ) ; if ( e != null ) { while ( e . hasMoreElements ( ) ) { URL resource = ( URL ) e . nextElement ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found entry: " + resource + " in bundle " + bundle . getSymbolicName ( ) ) ; } TypeConverterEntry entry = new TypeConverterEntry ( ) ; entry . bundle = bundle ; entry . resource = resource ; entry . converterPackages = getConverterPackages ( resource ) ; TYPE_CONVERTERS . put ( resource , entry ) ; } } } catch ( IOException ignore ) { } } protected void mayBeRemoveComponentAndLanguageFor ( Bundle bundle ) { removeComponentEntry ( bundle , COMPONENTS ) ; removeComponentEntry ( bundle , LANGUAGES ) ; } protected void removeComponentEntry ( Bundle bundle , Map < String , ComponentEntry > entries ) { ComponentEntry [ ] entriesArray = entries . values ( ) . toArray ( new ComponentEntry [ 0 ] ) ; for ( ComponentEntry entry : entriesArray ) { if ( entry . bundle == bundle ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Removing entry: " + entry . path + " in bundle " + bundle . getSymbolicName ( ) ) ; } entries . remove ( entry . name ) ; } } } protected synchronized void mayBeRemoveTypeConverterFor ( Bundle bundle ) { TypeConverterEntry [ ] entriesArray = TYPE_CONVERTERS . values ( ) . toArray ( new TypeConverterEntry [ 0 ] ) ; for ( TypeConverterEntry entry : entriesArray ) { if ( entry . bundle == bundle ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Removing entry: " + entry . resource + " in bundle " + bundle . getSymbolicName ( ) ) ; } COMPONENTS . remove ( entry . resource ) ; } } } public void start ( BundleContext context ) throws Exception { bundle = context . getBundle ( ) ; context . addBundleListener ( this ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "checking existing bundles" ) ; } for ( Bundle bundle : context . getBundles ( ) ) { if ( bundle . getState ( ) == Bundle . RESOLVED || bundle . getState ( ) == Bundle . STARTING || bundle . getState ( ) == Bundle . ACTIVE || bundle . getState ( ) == Bundle . STOPPING ) { mayBeAddComponentAndLanguageFor ( bundle ) ; mayBeAddTypeConverterFor ( bundle ) ; } } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "actived" ) ; } } public void stop ( BundleContext context ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "removing the components of existing bundles" ) ; } for ( Bundle bundle : context . getBundles ( ) ) { if ( bundle . getState ( ) == Bundle . RESOLVED || bundle . getState ( ) == Bundle . STARTING || bundle . getState ( ) == Bundle . ACTIVE || bundle . getState ( ) == Bundle . STOPPING ) { mayBeRemoveComponentAndLanguageFor ( bundle ) ; mayBeRemoveTypeConverterFor ( bundle ) ; } } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "stopped" ) ; } } protected Set < String > getConverterPackages ( URL resource ) { Set < String > packages = new HashSet < String > ( ) ; if ( resource != null ) { BufferedReader reader = null ; try { reader = new BufferedReader ( new InputStreamReader ( resource . openStream ( ) ) ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } catch ( Exception ignore ) { } finally { if ( reader != null ) { ObjectHelper . close ( reader , null , LOG ) ; } } } return packages ; } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected static Bundle getBundle ( ) { return bundle ; } protected static synchronized String [ ] findTypeConverterPackageNames ( ) { Set < String > packages = new HashSet < String > ( ) ; for ( TypeConverterEntry entry : TYPE_CONVERTERS . values ( ) ) { for ( String packageName : entry . converterPackages ) { packages . add ( packageName ) ; } } return packages . toArray ( new String [ packages . size ( ) ] ) ; } public static synchronized Class getComponent ( String name ) throws Exception { return getClassFromEntries ( name , COMPONENTS ) ; } public static synchronized Class getLanguage ( String name ) throws Exception { return getClassFromEntries ( name , LANGUAGES ) ; } protected static synchronized Class getClassFromEntries ( String name , Map < String , ComponentEntry > entries ) throws Exception { ComponentEntry entry = entries . get ( name ) ; if ( entry == null ) { return null ; } if ( entry . type == null ) { URL url = entry . bundle . getEntry ( entry . path ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "The entry " + name + "'s url is" + url ) ; } Properties properties = new Properties ( ) ; BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( url . openStream ( ) ) ; properties . load ( reader ) ; } finally { try { if ( reader != null ) { reader . close ( ) ; } } catch ( Exception ignore ) { } } String classname = ( String ) properties . get ( "class" ) ; ClassLoader loader = BundleDelegatingClassLoader . createBundleClassLoaderFor ( entry . bundle ) ; entry . type = loader . loadClass ( classname ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found entry: " + name + " via type: " + entry . type . getName ( ) ) ; } return entry . type ; } } 	0
package org . apache . camel . util ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLConnection ; import java . net . URLDecoder ; import java . util . Arrays ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . jar . JarEntry ; import java . util . jar . JarInputStream ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResolverUtil < T > { protected static final transient Log LOG = LogFactory . getLog ( ResolverUtil . class ) ; public static interface Test { boolean matches ( Class type ) ; } public static class IsA implements Test { private Class parent ; public IsA ( Class parentType ) { this . parent = parentType ; } public boolean matches ( Class type ) { return type != null && parent . isAssignableFrom ( type ) ; } @ Override public String toString ( ) { return "is assignable to " + parent . getSimpleName ( ) ; } } public static class AnnotatedWith implements Test { private Class < ? extends Annotation > annotation ; private boolean checkMetaAnnotations ; public AnnotatedWith ( Class < ? extends Annotation > annotation ) { this ( annotation , false ) ; } public AnnotatedWith ( Class < ? extends Annotation > annotation , boolean checkMetaAnnotations ) { this . annotation = annotation ; this . checkMetaAnnotations = checkMetaAnnotations ; } public boolean matches ( Class type ) { return type != null && ObjectHelper . hasAnnotation ( type , annotation , checkMetaAnnotations ) ; } @ Override public String toString ( ) { return "annotated with @" + annotation . getSimpleName ( ) ; } } private Set < Class < ? extends T > > matches = new HashSet < Class < ? extends T > > ( ) ; private Set < ClassLoader > classLoaders ; public Set < Class < ? extends T > > getClasses ( ) { return matches ; } public Set < ClassLoader > getClassLoaders ( ) { if ( classLoaders == null ) { classLoaders = new HashSet < ClassLoader > ( ) ; ClassLoader ccl = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( ccl != null ) { classLoaders . add ( ccl ) ; } classLoaders . add ( ResolverUtil . class . getClassLoader ( ) ) ; } return classLoaders ; } public void setClassLoaders ( Set < ClassLoader > classLoaders ) { this . classLoaders = classLoaders ; } public void findImplementations ( Class parent , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for implementations of " + parent . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new IsA ( parent ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void findAnnotated ( Class < ? extends Annotation > annotation , String ... packageNames ) { if ( packageNames == null ) { return ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Searching for annotations of " + annotation . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; } Test test = new AnnotatedWith ( annotation , true ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found: " + getClasses ( ) ) ; } } public void find ( Test test , String packageName ) { packageName = packageName . replace ( '.' , '/' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; LOG . debug ( "Using only regular classloaders" ) ; for ( ClassLoader classLoader : set ) { find ( test , packageName , classLoader ) ; } } protected void find ( Test test , String packageName , ClassLoader loader ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Searching for: " + test + " in package: " + packageName + " using classloader: " + loader . getClass ( ) . getName ( ) ) ; } Enumeration < URL > urls ; try { urls = getResources ( loader , packageName ) ; if ( ! urls . hasMoreElements ( ) ) { LOG . trace ( "No URLs returned by classloader" ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read package: " + packageName , ioe ) ; return ; } while ( urls . hasMoreElements ( ) ) { URL url = null ; try { url = urls . nextElement ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "URL from classloader: " + url ) ; } String urlPath = url . getFile ( ) ; urlPath = URLDecoder . decode ( urlPath , "UTF-8" ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Decoded urlPath: " + urlPath ) ; } if ( urlPath . startsWith ( "file:" ) ) { urlPath = urlPath . substring ( 5 ) ; } if ( url . toString ( ) . startsWith ( "bundle:" ) || urlPath . startsWith ( "bundle:" ) ) { LOG . trace ( "It's a virtual osgi bundle, skipping" ) ; continue ; } if ( urlPath . indexOf ( '!' ) > 0 ) { urlPath = urlPath . substring ( 0 , urlPath . indexOf ( '!' ) ) ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Scanning for classes in [" + urlPath + "] matching criteria: " + test ) ; } File file = new File ( urlPath ) ; if ( file . isDirectory ( ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from directory: " + file ) ; } loadImplementationsInDirectory ( test , packageName , file ) ; } else { InputStream stream ; if ( urlPath . startsWith ( "http:" ) ) { LOG . debug ( "The current jar is accessed via http" ) ; URL urlStream = new URL ( urlPath ) ; URLConnection con = urlStream . openConnection ( ) ; con . setUseCaches ( false ) ; stream = con . getInputStream ( ) ; } else { stream = new FileInputStream ( file ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading from jar: " + file ) ; } loadImplementationsInJar ( test , packageName , stream , urlPath ) ; } } catch ( IOException ioe ) { LOG . warn ( "Could not read entries in url: " + url , ioe ) ; } } } protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Getting resource URL for package: " + packageName + " with classloader: " + loader ) ; } return loader . getResources ( packageName ) ; } private void loadImplementationsInDirectory ( Test test , String parent , File location ) { File [ ] files = location . listFiles ( ) ; StringBuilder builder = null ; for ( File file : files ) { builder = new StringBuilder ( 100 ) ; String name = file . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; builder . append ( parent ) . append ( "/" ) . append ( name ) ; String packageOrClass = parent == null ? name : builder . toString ( ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageOrClass , file ) ; } else if ( name . endsWith ( ".class" ) ) { addIfMatching ( test , packageOrClass ) ; } } } } private void loadImplementationsInJar ( Test test , String parent , InputStream stream , String urlPath ) { JarInputStream jarStream = null ; try { jarStream = new JarInputStream ( stream ) ; JarEntry entry ; while ( ( entry = jarStream . getNextJarEntry ( ) ) != null ) { String name = entry . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; if ( ! entry . isDirectory ( ) && name . startsWith ( parent ) && name . endsWith ( ".class" ) ) { addIfMatching ( test , name ) ; } } } } catch ( IOException ioe ) { LOG . error ( "Could not search jar file '" + urlPath + "' for classes matching criteria: " + test + " due to an IOException: " + ioe . getMessage ( ) , ioe ) ; } finally { ObjectHelper . close ( jarStream , urlPath , LOG ) ; } } protected void addIfMatching ( Test test , String fqn ) { try { String externalName = fqn . substring ( 0 , fqn . indexOf ( '.' ) ) . replace ( '/' , '.' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; boolean found = false ; for ( ClassLoader classLoader : set ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Testing for class " + externalName + " matches criteria [" + test + "]" ) ; } try { Class type = classLoader . loadClass ( externalName ) ; if ( test . matches ( type ) ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Found class: " + type + " in classloader: " + classLoader ) ; } matches . add ( ( Class < T > ) type ) ; } found = true ; break ; } catch ( ClassNotFoundException e ) { LOG . debug ( "Could not find class '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } catch ( NoClassDefFoundError e ) { LOG . debug ( "Could not find the class defintion '" + fqn + "' in classloader: " + classLoader + ". Reason: " + e , e ) ; } } if ( ! found ) { LOG . warn ( "Could not find class '" + fqn + "' in any classloaders: " + set ) ; } } catch ( Throwable t ) { LOG . warn ( "Could not examine class '" + fqn + "' due to a " + t . getClass ( ) . getName ( ) + " with message: " + t . getMessage ( ) , t ) ; } } } 	1
package org . apache . camel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . PARAMETER } ) public @ interface Body { } 	0
package org . apache . camel . component . file ; import java . io . File ; import java . util . Map ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; public class FileComponent extends DefaultComponent < FileExchange > { public static final String HEADER_FILE_NAME = "org.apache.camel.file.name" ; public static final String HEADER_FILE_NAME_PRODUCED = "org.apache.camel.file.name.produced" ; public FileComponent ( ) { } public FileComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < FileExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { File file = new File ( remaining ) ; FileEndpoint result = new FileEndpoint ( file , uri , this ) ; setProperties ( result , parameters ) ; return result ; } } 	1
package org . apache . camel . bam . processor ; import java . util . Date ; import java . util . List ; import javax . persistence . EntityManager ; import javax . persistence . LockModeType ; import javax . persistence . PersistenceException ; import org . apache . camel . bam . model . ActivityState ; import org . apache . camel . bam . rules . ProcessRules ; import org . apache . camel . impl . ServiceSupport ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . orm . jpa . JpaCallback ; import org . springframework . orm . jpa . JpaTemplate ; import org . springframework . transaction . TransactionStatus ; import org . springframework . transaction . support . TransactionCallbackWithoutResult ; import org . springframework . transaction . support . TransactionTemplate ; public class ActivityMonitorEngine extends ServiceSupport implements Runnable { private static final Log LOG = LogFactory . getLog ( ActivityMonitorEngine . class ) ; private JpaTemplate template ; private TransactionTemplate transactionTemplate ; private ProcessRules rules ; private int escalateLevel ; private long windowMillis = 1000L ; private Thread thread ; private boolean useLocking ; public ActivityMonitorEngine ( JpaTemplate template , TransactionTemplate transactionTemplate , ProcessRules rules ) { this . template = template ; this . transactionTemplate = transactionTemplate ; this . rules = rules ; } public boolean isUseLocking ( ) { return useLocking ; } public void setUseLocking ( boolean useLocking ) { this . useLocking = useLocking ; } public void run ( ) { LOG . debug ( "Starting to poll for timeout events" ) ; while ( ! isStopped ( ) ) { try { long now = System . currentTimeMillis ( ) ; long nextPoll = now + windowMillis ; final Date timeNow = new Date ( now ) ; transactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { protected void doInTransactionWithoutResult ( TransactionStatus status ) { List < ActivityState > list = template . find ( "select x from " + ActivityState . class . getName ( ) + " x where x.timeOverdue < ?1" , timeNow ) ; for ( ActivityState activityState : list ) { fireExpiredEvent ( activityState ) ; } } } ) ; long timeToSleep = nextPoll - System . currentTimeMillis ( ) ; if ( timeToSleep > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for " + timeToSleep + " millis" ) ; } try { Thread . sleep ( timeToSleep ) ; } catch ( InterruptedException e ) { LOG . debug ( "Caught: " + e , e ) ; } } } catch ( Exception e ) { LOG . error ( "Caught: " + e , e ) ; } } } protected void fireExpiredEvent ( final ActivityState activityState ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Trying to fire expiration of: " + activityState ) ; } template . execute ( new JpaCallback ( ) { public Object doInJpa ( EntityManager entityManager ) throws PersistenceException { if ( isUseLocking ( ) ) { LOG . info ( "Attempting to lock: " + activityState ) ; entityManager . lock ( activityState , LockModeType . WRITE ) ; LOG . info ( "Grabbed lock: " + activityState ) ; } try { rules . processExpired ( activityState ) ; } catch ( Exception e ) { LOG . error ( "Failed to process expiration of: " + activityState + ". Reason: " + e , e ) ; } activityState . setTimeOverdue ( null ) ; return null ; } } ) ; } protected void doStart ( ) throws Exception { rules . start ( ) ; thread = new Thread ( this , "ActivityMonitorEngine" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { if ( thread != null ) { thread = null ; } rules . stop ( ) ; } } 	0
package org . apache . camel . util . jndi ; import java . util . Hashtable ; import javax . naming . Context ; import javax . naming . NamingException ; import javax . naming . spi . InitialContextFactory ; public class CamelInitialContextFactory implements InitialContextFactory { public Context getInitialContext ( Hashtable environment ) throws NamingException { try { return new JndiContext ( environment ) ; } catch ( NamingException e ) { throw e ; } catch ( Exception e ) { NamingException exception = new NamingException ( e . getMessage ( ) ) ; exception . initCause ( e ) ; throw exception ; } } } 	1
package org . apache . camel ; public interface Expression < E extends Exchange > { Object evaluate ( E exchange ) ; } 	0
package org . apache . camel . util ; import java . io . IOException ; import java . net . URL ; import java . util . Enumeration ; public class WebSphereResolverUtil extends ResolverUtil { private String resourcePath ; public WebSphereResolverUtil ( String resourcePath ) { this . resourcePath = resourcePath ; } public static boolean isWebSphereClassLoader ( ClassLoader loader ) { return loader . getClass ( ) . getName ( ) . startsWith ( "com.ibm" ) ; } @ Override protected Enumeration < URL > getResources ( ClassLoader loader , String packageName ) throws IOException { Enumeration < URL > enumeration = super . getResources ( loader , packageName ) ; if ( ! enumeration . hasMoreElements ( ) ) { LOG . trace ( "Using WebSphere workaround to load the camel jars with the annotated converters." ) ; enumeration = loader . getResources ( resourcePath ) ; } return enumeration ; } } 	1
package org . apache . camel . converter ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import java . nio . ByteBuffer ; import org . apache . camel . Converter ; import org . apache . camel . Exchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ Converter public final class NIOConverter { private static final transient Log LOG = LogFactory . getLog ( NIOConverter . class ) ; private NIOConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { return buffer . array ( ) ; } @ Converter public static String toString ( ByteBuffer buffer , Exchange exchange ) { return IOConverter . toString ( buffer . array ( ) , exchange ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; } @ Converter public static ByteBuffer toByteBuffer ( File file ) throws IOException { InputStream in = null ; try { byte [ ] buf = new byte [ ( int ) file . length ( ) ] ; in = new BufferedInputStream ( new FileInputStream ( file ) ) ; int sizeLeft = ( int ) file . length ( ) ; int offset = 0 ; while ( sizeLeft > 0 ) { int readSize = in . read ( buf , offset , sizeLeft ) ; sizeLeft -= readSize ; offset += readSize ; } return ByteBuffer . wrap ( buf ) ; } finally { try { if ( in != null ) { in . close ( ) ; } } catch ( IOException e ) { LOG . warn ( "Failed to close file stream: " + file . getPath ( ) , e ) ; } } } @ Converter public static ByteBuffer toByteBuffer ( String value , Exchange exchange ) { ByteBuffer buf = ByteBuffer . allocate ( value . length ( ) ) ; byte [ ] bytes = null ; if ( exchange != null ) { String charsetName = exchange . getProperty ( Exchange . CHARSET_NAME , String . class ) ; if ( charsetName != null ) { try { bytes = value . getBytes ( charsetName ) ; } catch ( UnsupportedEncodingException e ) { LOG . warn ( "Can't convert the byte to String with the charset " + charsetName , e ) ; } } } if ( bytes == null ) { bytes = value . getBytes ( ) ; } buf . put ( bytes ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Short value ) { ByteBuffer buf = ByteBuffer . allocate ( 2 ) ; buf . putShort ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Integer value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Long value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putLong ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Float value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putFloat ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Double value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putDouble ( value ) ; return buf ; } @ Converter public static InputStream toInputStream ( ByteBuffer bufferbuffer ) { return IOConverter . toInputStream ( toByteArray ( bufferbuffer ) ) ; } } 	0
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Body ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Header ; import org . apache . camel . Headers ; import org . apache . camel . Message ; import org . apache . camel . NoTypeConversionAvailableException ; import org . apache . camel . OutHeaders ; import org . apache . camel . Properties ; import org . apache . camel . Property ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . util . ExchangeHelper . convertToType ; public class BeanInfo { private static final transient Log LOG = LogFactory . getLog ( BeanInfo . class ) ; private final CamelContext camelContext ; private Class type ; private ParameterMappingStrategy strategy ; private Map < String , MethodInfo > operations = new ConcurrentHashMap < String , MethodInfo > ( ) ; private MethodInfo defaultMethod ; private List < MethodInfo > operationsWithBody = new ArrayList < MethodInfo > ( ) ; private List < MethodInfo > operationsWithCustomAnnotation = new ArrayList < MethodInfo > ( ) ; private Map < Method , MethodInfo > methodMap = new HashMap < Method , MethodInfo > ( ) ; private BeanInfo superBeanInfo ; public BeanInfo ( CamelContext camelContext , Class type ) { this ( camelContext , type , createParameterMappingStrategy ( camelContext ) ) ; } public BeanInfo ( CamelContext camelContext , Class type , ParameterMappingStrategy strategy ) { this . camelContext = camelContext ; this . type = type ; this . strategy = strategy ; introspect ( getType ( ) ) ; if ( operations . size ( ) == 1 ) { Collection < MethodInfo > methodInfos = operations . values ( ) ; for ( MethodInfo methodInfo : methodInfos ) { defaultMethod = methodInfo ; } } } public Class getType ( ) { return type ; } public CamelContext getCamelContext ( ) { return camelContext ; } public MethodInvocation createInvocation ( Method method , Object pojo , Exchange exchange ) throws RuntimeCamelException { MethodInfo methodInfo = introspect ( type , method ) ; if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } public MethodInvocation createInvocation ( Object pojo , Exchange exchange ) throws RuntimeCamelException , AmbiguousMethodCallException { MethodInfo methodInfo = null ; String name = exchange . getIn ( ) . getHeader ( BeanProcessor . METHOD_NAME , String . class ) ; if ( name != null ) { methodInfo = operations . get ( name ) ; } if ( methodInfo == null ) { methodInfo = chooseMethod ( pojo , exchange ) ; } if ( methodInfo == null ) { methodInfo = defaultMethod ; } if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } protected void introspect ( Class clazz ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Introspecting class: " + clazz ) ; } Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( isValidMethod ( clazz , method ) ) { introspect ( clazz , method ) ; } } Class superclass = clazz . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { introspect ( superclass ) ; } } protected MethodInfo introspect ( Class clazz , Method method ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Introspecting class: " + clazz + ", method: " + method ) ; } String opName = method . getName ( ) ; MethodInfo methodInfo = createMethodInfo ( clazz , method ) ; MethodInfo existingMethodInfo = overridesExistingMethod ( methodInfo ) ; if ( existingMethodInfo != null ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "This method is already overriden in a subclass, so the method from the sub class is prefered: " + existingMethodInfo ) ; } return existingMethodInfo ; } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Adding operation: " + opName + " for method: " + methodInfo ) ; } operations . put ( opName , methodInfo ) ; if ( methodInfo . hasBodyParameter ( ) ) { operationsWithBody . add ( methodInfo ) ; } if ( methodInfo . isHasCustomAnnotation ( ) && ! methodInfo . hasBodyParameter ( ) ) { operationsWithCustomAnnotation . add ( methodInfo ) ; } methodMap . put ( method , methodInfo ) ; return methodInfo ; } private MethodInfo overridesExistingMethod ( MethodInfo methodInfo ) { for ( MethodInfo info : methodMap . values ( ) ) { if ( ! info . getMethod ( ) . getName ( ) . equals ( methodInfo . getMethod ( ) . getName ( ) ) ) { continue ; } if ( info . getMethod ( ) . getParameterTypes ( ) . length != methodInfo . getMethod ( ) . getParameterTypes ( ) . length ) { continue ; } for ( int i = 0 ; i < info . getMethod ( ) . getParameterTypes ( ) . length ; i ++ ) { Class type1 = info . getMethod ( ) . getParameterTypes ( ) [ i ] ; Class type2 = methodInfo . getMethod ( ) . getParameterTypes ( ) [ i ] ; if ( ! type1 . equals ( type2 ) ) { continue ; } } return info ; } return null ; } public MethodInfo getMethodInfo ( Method method ) { MethodInfo answer = methodMap . get ( method ) ; if ( answer == null ) { if ( superBeanInfo == null && type != Object . class ) { Class superclass = type . getSuperclass ( ) ; if ( superclass != null && superclass != Object . class ) { superBeanInfo = new BeanInfo ( camelContext , superclass , strategy ) ; return superBeanInfo . getMethodInfo ( method ) ; } } } return answer ; } protected MethodInfo createMethodInfo ( Class clazz , Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; Annotation [ ] [ ] parametersAnnotations = method . getParameterAnnotations ( ) ; List < ParameterInfo > parameters = new ArrayList < ParameterInfo > ( ) ; List < ParameterInfo > bodyParameters = new ArrayList < ParameterInfo > ( ) ; boolean hasCustomAnnotation = false ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { Class parameterType = parameterTypes [ i ] ; Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] ; Expression expression = createParameterUnmarshalExpression ( clazz , method , parameterType , parameterAnnotations ) ; hasCustomAnnotation |= expression != null ; ParameterInfo parameterInfo = new ParameterInfo ( i , parameterType , parameterAnnotations , expression ) ; parameters . add ( parameterInfo ) ; if ( expression == null ) { hasCustomAnnotation |= ObjectHelper . hasAnnotation ( parameterAnnotations , Body . class ) ; if ( bodyParameters . isEmpty ( ) ) { if ( Exchange . class . isAssignableFrom ( parameterType ) ) { expression = ExpressionBuilder . exchangeExpression ( ) ; } else { expression = ExpressionBuilder . bodyExpression ( parameterType ) ; } parameterInfo . setExpression ( expression ) ; bodyParameters . add ( parameterInfo ) ; } else { } } } MethodInfo methodInfo = new MethodInfo ( clazz , method , parameters , bodyParameters , hasCustomAnnotation ) ; return methodInfo ; } protected MethodInfo chooseMethod ( Object pojo , Exchange exchange ) throws AmbiguousMethodCallException { if ( operationsWithBody . size ( ) == 1 ) { return operationsWithBody . get ( 0 ) ; } else if ( ! operationsWithBody . isEmpty ( ) ) { return chooseMethodWithMatchingBody ( exchange , operationsWithBody ) ; } else if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return null ; } protected MethodInfo chooseMethodWithMatchingBody ( Exchange exchange , Collection < MethodInfo > operationList ) throws AmbiguousMethodCallException { Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; if ( body != null ) { Class bodyType = body . getClass ( ) ; if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Matching for method with a single parameter that matches type: " + bodyType . getCanonicalName ( ) ) ; } List < MethodInfo > possibles = new ArrayList < MethodInfo > ( ) ; for ( MethodInfo methodInfo : operationList ) { boolean out = exchange . getPattern ( ) . isOutCapable ( ) ; if ( out && methodInfo . isReturnTypeVoid ( ) ) { continue ; } if ( methodInfo . bodyParameterMatches ( bodyType ) ) { possibles . add ( methodInfo ) ; } } if ( possibles . size ( ) == 1 ) { return possibles . get ( 0 ) ; } else if ( possibles . isEmpty ( ) ) { Object newBody = null ; MethodInfo matched = null ; for ( MethodInfo methodInfo : operationList ) { Object value = null ; try { value = convertToType ( exchange , methodInfo . getBodyParameterType ( ) , body ) ; if ( value != null ) { if ( newBody != null ) { throw new AmbiguousMethodCallException ( exchange , Arrays . asList ( matched , methodInfo ) ) ; } else { newBody = value ; matched = methodInfo ; } } } catch ( NoTypeConversionAvailableException e ) { } } if ( matched != null ) { in . setBody ( newBody ) ; return matched ; } } else { if ( operationsWithCustomAnnotation . size ( ) == 1 ) { return operationsWithCustomAnnotation . get ( 0 ) ; } return chooseMethodWithCustomAnnotations ( exchange , possibles ) ; } } return null ; } protected MethodInfo chooseMethodWithCustomAnnotations ( Exchange exchange , Collection < MethodInfo > possibles ) throws AmbiguousMethodCallException { MethodInfo chosen = null ; for ( MethodInfo possible : possibles ) { if ( possible . isHasCustomAnnotation ( ) ) { if ( chosen != null ) { chosen = null ; break ; } else { chosen = possible ; } } } if ( chosen != null ) { return chosen ; } throw new AmbiguousMethodCallException ( exchange , possibles ) ; } protected Expression createParameterUnmarshalExpression ( Class clazz , Method method , Class parameterType , Annotation [ ] parameterAnnotation ) { for ( Annotation annotation : parameterAnnotation ) { Expression answer = createParameterUnmarshalExpressionForAnnotation ( clazz , method , parameterType , annotation ) ; if ( answer != null ) { return answer ; } } return strategy . getDefaultParameterTypeExpression ( parameterType ) ; } protected boolean isPossibleBodyParameter ( Annotation [ ] annotations ) { if ( annotations != null ) { for ( Annotation annotation : annotations ) { if ( ( annotation instanceof Property ) || ( annotation instanceof Header ) || ( annotation instanceof Headers ) || ( annotation instanceof OutHeaders ) || ( annotation instanceof Properties ) ) { return false ; } LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { return false ; } } } return true ; } protected Expression createParameterUnmarshalExpressionForAnnotation ( Class clazz , Method method , Class parameterType , Annotation annotation ) { if ( annotation instanceof Property ) { Property propertyAnnotation = ( Property ) annotation ; return ExpressionBuilder . propertyExpression ( propertyAnnotation . name ( ) ) ; } else if ( annotation instanceof Properties ) { return ExpressionBuilder . propertiesExpression ( ) ; } else if ( annotation instanceof Header ) { Header headerAnnotation = ( Header ) annotation ; return ExpressionBuilder . headerExpression ( headerAnnotation . name ( ) ) ; } else if ( annotation instanceof Headers ) { return ExpressionBuilder . headersExpression ( ) ; } else if ( annotation instanceof OutHeaders ) { return ExpressionBuilder . outHeadersExpression ( ) ; } else { LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { Class < ? > type = languageAnnotation . factory ( ) ; Object object = camelContext . getInjector ( ) . newInstance ( type ) ; if ( object instanceof AnnotationExpressionFactory ) { AnnotationExpressionFactory expressionFactory = ( AnnotationExpressionFactory ) object ; return expressionFactory . createExpression ( camelContext , annotation , languageAnnotation , parameterType ) ; } else { LOG . error ( "Ignoring bad annotation: " + languageAnnotation + "on method: " + method + " which declares a factory: " + type . getName ( ) + " which does not implement " + AnnotationExpressionFactory . class . getName ( ) ) ; } } } return null ; } protected boolean isValidMethod ( Class clazz , Method method ) { if ( ! Modifier . isPublic ( method . getModifiers ( ) ) ) { return false ; } if ( method . getReturnType ( ) != null && Exchange . class . isAssignableFrom ( method . getReturnType ( ) ) ) { return false ; } return true ; } public static ParameterMappingStrategy createParameterMappingStrategy ( CamelContext camelContext ) { Registry registry = camelContext . getRegistry ( ) ; ParameterMappingStrategy answer = registry . lookup ( ParameterMappingStrategy . class . getName ( ) , ParameterMappingStrategy . class ) ; if ( answer == null ) { answer = new DefaultParameterMappingStrategy ( ) ; } return answer ; } } 	1
package org . apache . camel . component . jms ; import javax . jms . JMSException ; public class MessageJMSPropertyAccessException extends RuntimeJmsException { private static final long serialVersionUID = - 6744171518099741324L ; public MessageJMSPropertyAccessException ( JMSException e ) { super ( "Failed to access a JMS property: " + e , e ) ; } } 	0
package org . apache . camel ; import org . apache . camel . util . ExchangeHelper ; public class NoSuchPropertyException extends CamelExchangeException { private static final long serialVersionUID = - 8721487431101572630L ; private final String propertyName ; private final Class < ? > type ; public NoSuchPropertyException ( Exchange exchange , String propertyName , Class < ? > type ) { super ( "No '" + propertyName + "' property available of type: " + type . getName ( ) + reason ( exchange , propertyName ) , exchange ) ; this . propertyName = propertyName ; this . type = type ; } public String getPropertyName ( ) { return propertyName ; } public Class < ? > getType ( ) { return type ; } protected static String reason ( Exchange exchange , String propertyName ) { Object value = exchange . getProperty ( propertyName ) ; return valueDescription ( value ) ; } static String valueDescription ( Object value ) { if ( value == null ) { return "" ; } return " but has value: " + value + " of type: " + value . getClass ( ) . getName ( ) ; } } 	1
package org . apache . camel . component . file . remote ; import java . io . OutputStream ; public class RemoteFileBinding { public Object extractBodyFromOutputStream ( RemoteFileExchange exchange , OutputStream outputStream ) { return outputStream ; } } 	0
package org . apache . camel . component . dataset ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . camel . processor . ThroughputLogger ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DataSetConsumer extends DefaultConsumer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( DataSetConsumer . class ) ; private DataSetEndpoint endpoint ; private Processor reporter ; public DataSetConsumer ( DataSetEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; if ( reporter == null ) { reporter = createReporter ( ) ; } final DataSet dataSet = endpoint . getDataSet ( ) ; final long preloadSize = endpoint . getPreloadSize ( ) ; sendMessages ( 0 , preloadSize ) ; endpoint . getExecutorService ( ) . execute ( new Runnable ( ) { public void run ( ) { sendMessages ( preloadSize , dataSet . getSize ( ) ) ; } } ) ; } protected void sendMessages ( long startIndex , long endIndex ) { try { for ( long i = startIndex ; i < endIndex ; i ++ ) { Exchange exchange = endpoint . createExchange ( i ) ; getProcessor ( ) . process ( exchange ) ; try { long delay = endpoint . getProduceDelay ( ) ; if ( delay < 3 ) { delay = 3 ; } Thread . sleep ( delay ) ; } catch ( InterruptedException e ) { LOG . debug ( e ) ; } if ( reporter != null ) { reporter . process ( exchange ) ; } } } catch ( Exception e ) { LOG . error ( e ) ; } } protected ThroughputLogger createReporter ( ) { ThroughputLogger answer = new ThroughputLogger ( endpoint . getEndpointUri ( ) , ( int ) endpoint . getDataSet ( ) . getReportCount ( ) ) ; answer . setAction ( "Sent" ) ; return answer ; } } 	1
package org . apache . camel . component . jhc ; import java . io . IOException ; import java . io . OutputStream ; import org . apache . http . ConnectionReuseStrategy ; import org . apache . http . HttpEntity ; import org . apache . http . HttpEntityEnclosingRequest ; import org . apache . http . HttpException ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . HttpResponseFactory ; import org . apache . http . HttpStatus ; import org . apache . http . HttpVersion ; import org . apache . http . MethodNotSupportedException ; import org . apache . http . ProtocolException ; import org . apache . http . ProtocolVersion ; import org . apache . http . UnsupportedHttpVersionException ; import org . apache . http . entity . ByteArrayEntity ; import org . apache . http . nio . ContentDecoder ; import org . apache . http . nio . ContentEncoder ; import org . apache . http . nio . NHttpServerConnection ; import org . apache . http . nio . NHttpServiceHandler ; import org . apache . http . nio . entity . ContentBufferEntity ; import org . apache . http . nio . entity . ContentOutputStream ; import org . apache . http . nio . protocol . NHttpServiceHandlerBase ; import org . apache . http . nio . util . ByteBufferAllocator ; import org . apache . http . nio . util . ContentInputBuffer ; import org . apache . http . nio . util . ContentOutputBuffer ; import org . apache . http . nio . util . HeapByteBufferAllocator ; import org . apache . http . nio . util . SimpleInputBuffer ; import org . apache . http . nio . util . SimpleOutputBuffer ; import org . apache . http . params . HttpParams ; import org . apache . http . protocol . ExecutionContext ; import org . apache . http . protocol . HttpContext ; import org . apache . http . protocol . HttpProcessor ; import org . apache . http . protocol . HttpRequestHandler ; import org . apache . http . util . EncodingUtils ; public class BufferingHttpServiceHandler extends NHttpServiceHandlerBase implements NHttpServiceHandler { public BufferingHttpServiceHandler ( final HttpProcessor httpProcessor , final HttpResponseFactory responseFactory , final ConnectionReuseStrategy connStrategy , final ByteBufferAllocator allocator , final HttpParams params ) { super ( httpProcessor , responseFactory , connStrategy , allocator , params ) ; } public BufferingHttpServiceHandler ( final HttpProcessor httpProcessor , final HttpResponseFactory responseFactory , final ConnectionReuseStrategy connStrategy , final HttpParams params ) { this ( httpProcessor , responseFactory , connStrategy , new HeapByteBufferAllocator ( ) , params ) ; } public void connected ( final NHttpServerConnection conn ) { HttpContext context = conn . getContext ( ) ; ServerConnState connState = new ServerConnState ( allocator ) ; context . setAttribute ( CONN_STATE , connState ) ; if ( this . eventListener != null ) { this . eventListener . connectionOpen ( conn ) ; } } public void requestReceived ( final NHttpServerConnection conn ) { HttpContext context = conn . getContext ( ) ; HttpRequest request = conn . getHttpRequest ( ) ; request . setParams ( this . params ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; connState . resetInput ( ) ; connState . setRequest ( request ) ; connState . setInputState ( ServerConnState . REQUEST_RECEIVED ) ; ProtocolVersion ver = request . getRequestLine ( ) . getProtocolVersion ( ) ; if ( ! ver . lessEquals ( HttpVersion . HTTP_1_1 ) ) { ver = HttpVersion . HTTP_1_1 ; } HttpResponse response ; try { if ( request instanceof HttpEntityEnclosingRequest ) { if ( ( ( HttpEntityEnclosingRequest ) request ) . expectContinue ( ) ) { response = this . responseFactory . newHttpResponse ( ver , HttpStatus . SC_CONTINUE , context ) ; request . setParams ( this . params ) ; if ( this . expectationVerifier != null ) { try { this . expectationVerifier . verify ( request , response , context ) ; } catch ( HttpException ex ) { response = this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , context ) ; request . setParams ( this . params ) ; handleException ( ex , response ) ; } } if ( response . getStatusLine ( ) . getStatusCode ( ) < 200 ) { conn . submitResponse ( response ) ; } else { conn . resetInput ( ) ; connState . resetInput ( ) ; sendResponse ( conn , response ) ; } } } else { conn . suspendInput ( ) ; processRequest ( conn , request ) ; } } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } catch ( HttpException ex ) { closeConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalProtocolException ( ex , conn ) ; } } } public void closed ( final NHttpServerConnection conn ) { if ( this . eventListener != null ) { this . eventListener . connectionClosed ( conn ) ; } } public void exception ( final NHttpServerConnection conn , final HttpException httpex ) { HttpContext context = conn . getContext ( ) ; try { HttpResponse response = this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , context ) ; response . setParams ( this . params ) ; handleException ( httpex , response ) ; response . setEntity ( null ) ; sendResponse ( conn , response ) ; } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } catch ( HttpException ex ) { closeConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalProtocolException ( ex , conn ) ; } } } public void inputReady ( final NHttpServerConnection conn , final ContentDecoder decoder ) { HttpContext context = conn . getContext ( ) ; HttpRequest request = conn . getHttpRequest ( ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; ContentInputBuffer buffer = connState . getInbuffer ( ) ; connState . setInputState ( ServerConnState . REQUEST_BODY_STREAM ) ; try { buffer . consumeContent ( decoder ) ; if ( decoder . isCompleted ( ) ) { connState . setInputState ( ServerConnState . REQUEST_BODY_DONE ) ; HttpEntityEnclosingRequest entityReq = ( HttpEntityEnclosingRequest ) request ; if ( entityReq . getEntity ( ) != null ) { entityReq . setEntity ( new ContentBufferEntity ( entityReq . getEntity ( ) , connState . getInbuffer ( ) ) ) ; } conn . suspendInput ( ) ; processRequest ( conn , request ) ; } } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } catch ( HttpException ex ) { closeConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalProtocolException ( ex , conn ) ; } } } public void responseReady ( final NHttpServerConnection conn ) { } public void outputReady ( final NHttpServerConnection conn , final ContentEncoder encoder ) { HttpContext context = conn . getContext ( ) ; HttpResponse response = conn . getHttpResponse ( ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; ContentOutputBuffer buffer = connState . getOutbuffer ( ) ; connState . setOutputState ( ServerConnState . RESPONSE_BODY_STREAM ) ; try { buffer . produceContent ( encoder ) ; if ( encoder . isCompleted ( ) ) { connState . setOutputState ( ServerConnState . RESPONSE_BODY_DONE ) ; connState . resetOutput ( ) ; if ( ! this . connStrategy . keepAlive ( response , context ) ) { conn . close ( ) ; } else { conn . requestInput ( ) ; } } } catch ( IOException ex ) { shutdownConnection ( conn , ex ) ; if ( this . eventListener != null ) { this . eventListener . fatalIOException ( ex , conn ) ; } } } protected void handleException ( final HttpException ex , final HttpResponse response ) { int code = HttpStatus . SC_INTERNAL_SERVER_ERROR ; if ( ex instanceof MethodNotSupportedException ) { code = HttpStatus . SC_NOT_IMPLEMENTED ; } else if ( ex instanceof UnsupportedHttpVersionException ) { code = HttpStatus . SC_HTTP_VERSION_NOT_SUPPORTED ; } else if ( ex instanceof ProtocolException ) { code = HttpStatus . SC_BAD_REQUEST ; } response . setStatusCode ( code ) ; byte [ ] msg = EncodingUtils . getAsciiBytes ( ex . getMessage ( ) ) ; ByteArrayEntity entity = new ByteArrayEntity ( msg ) ; entity . setContentType ( "text/plain; charset=US-ASCII" ) ; response . setEntity ( entity ) ; } protected void processRequest ( final NHttpServerConnection conn , final HttpRequest request ) throws IOException , HttpException { HttpContext context = conn . getContext ( ) ; ProtocolVersion ver = request . getRequestLine ( ) . getProtocolVersion ( ) ; if ( ! ver . lessEquals ( HttpVersion . HTTP_1_1 ) ) { ver = HttpVersion . HTTP_1_1 ; } HttpResponse response = this . responseFactory . newHttpResponse ( ver , HttpStatus . SC_OK , conn . getContext ( ) ) ; request . setParams ( this . params ) ; context . setAttribute ( ExecutionContext . HTTP_REQUEST , request ) ; context . setAttribute ( ExecutionContext . HTTP_CONNECTION , conn ) ; context . setAttribute ( ExecutionContext . HTTP_RESPONSE , response ) ; try { this . httpProcessor . process ( request , context ) ; HttpRequestHandler handler = null ; if ( this . handlerResolver != null ) { String requestURI = request . getRequestLine ( ) . getUri ( ) ; handler = this . handlerResolver . lookup ( requestURI ) ; } if ( handler != null ) { handler . handle ( request , response , context ) ; } else { response . setStatusCode ( HttpStatus . SC_NOT_IMPLEMENTED ) ; } } catch ( HttpException ex ) { response = this . responseFactory . newHttpResponse ( HttpVersion . HTTP_1_0 , HttpStatus . SC_INTERNAL_SERVER_ERROR , context ) ; request . setParams ( this . params ) ; handleException ( ex , response ) ; } sendResponse ( conn , response ) ; } protected void sendResponse ( final NHttpServerConnection conn , final HttpResponse response ) throws IOException , HttpException { HttpContext context = conn . getContext ( ) ; ServerConnState connState = ( ServerConnState ) context . getAttribute ( CONN_STATE ) ; ContentOutputBuffer buffer = connState . getOutbuffer ( ) ; this . httpProcessor . process ( response , context ) ; if ( ! canResponseHaveBody ( connState . getRequest ( ) , response ) ) { response . setEntity ( null ) ; } conn . submitResponse ( response ) ; connState . setOutputState ( ServerConnState . RESPONSE_SENT ) ; HttpEntity entity = response . getEntity ( ) ; if ( entity != null ) { OutputStream outstream = new ContentOutputStream ( buffer ) ; entity . writeTo ( outstream ) ; outstream . flush ( ) ; outstream . close ( ) ; } else { connState . resetOutput ( ) ; if ( ! this . connStrategy . keepAlive ( response , context ) ) { conn . close ( ) ; } else { conn . requestInput ( ) ; } } } static class ServerConnState { public static final int READY = 0 ; public static final int REQUEST_RECEIVED = 1 ; public static final int REQUEST_BODY_STREAM = 2 ; public static final int REQUEST_BODY_DONE = 4 ; public static final int RESPONSE_SENT = 8 ; public static final int RESPONSE_BODY_STREAM = 16 ; public static final int RESPONSE_BODY_DONE = 32 ; private SimpleInputBuffer inbuffer ; private ContentOutputBuffer outbuffer ; private int inputState ; private int outputState ; private HttpRequest request ; private final ByteBufferAllocator allocator ; public ServerConnState ( final ByteBufferAllocator allocator ) { super ( ) ; this . inputState = READY ; this . outputState = READY ; this . allocator = allocator ; } public ContentInputBuffer getInbuffer ( ) { if ( this . inbuffer == null ) { this . inbuffer = new SimpleInputBuffer ( 2048 , allocator ) ; } return this . inbuffer ; } public ContentOutputBuffer getOutbuffer ( ) { if ( this . outbuffer == null ) { this . outbuffer = new SimpleOutputBuffer ( 2048 , allocator ) ; } return this . outbuffer ; } public int getInputState ( ) { return this . inputState ; } public void setInputState ( int inputState ) { this . inputState = inputState ; } public int getOutputState ( ) { return this . outputState ; } public void setOutputState ( int outputState ) { this . outputState = outputState ; } public HttpRequest getRequest ( ) { return this . request ; } public void setRequest ( final HttpRequest request ) { this . request = request ; } public void resetInput ( ) { this . inbuffer = null ; this . request = null ; this . inputState = READY ; } public void resetOutput ( ) { this . outbuffer = null ; this . outputState = READY ; } } } 	0
package org . apache . camel ; import java . util . Map ; public interface Endpoint < E extends Exchange > { boolean isSingleton ( ) ; String getEndpointUri ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( Exchange exchange ) ; CamelContext getCamelContext ( ) ; Producer < E > createProducer ( ) throws Exception ; Consumer < E > createConsumer ( Processor processor ) throws Exception ; PollingConsumer < E > createPollingConsumer ( ) throws Exception ; void configureProperties ( Map options ) ; void setCamelContext ( CamelContext context ) ; @ Deprecated CamelContext getContext ( ) ; @ Deprecated void setContext ( CamelContext context ) ; boolean isLenientProperties ( ) ; } 	1
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class JMXExchange extends DefaultExchange { public JMXExchange ( CamelContext camelContext , ExchangePattern pattern , Notification notification ) { super ( camelContext , pattern ) ; setIn ( new JMXMessage ( notification ) ) ; } } 	0
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Pipeline extends MulticastProcessor implements AsyncProcessor { private static final transient Log LOG = LogFactory . getLog ( Pipeline . class ) ; public Pipeline ( Collection < Processor > processors ) { super ( processors ) ; } public static Processor newInstance ( List < Processor > processors ) { if ( processors . isEmpty ( ) ) { return null ; } else if ( processors . size ( ) == 1 ) { return processors . get ( 0 ) ; } return new Pipeline ( processors ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( Exchange original , AsyncCallback callback ) { Iterator < Processor > processors = getProcessors ( ) . iterator ( ) ; Exchange nextExchange = original ; boolean first = true ; while ( true ) { boolean exceptionHandled = hasExceptionBeenHandled ( nextExchange ) ; if ( nextExchange . isFailed ( ) || exceptionHandled ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) + ( exceptionHandled ? " handled by the error handler" : "" ) ) ; } break ; } if ( ! processors . hasNext ( ) ) { break ; } AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; if ( first ) { first = false ; } else { nextExchange = createNextExchange ( processor , nextExchange ) ; } boolean sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return false ; } } if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Processing compelete for exchangeId: " + original . getExchangeId ( ) + " >>> " + nextExchange ) ; } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( true ) ; return true ; } private boolean process ( final Exchange original , final Exchange exchange , final AsyncCallback callback , final Iterator < Processor > processors , AsyncProcessor processor ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( "Processing exchangeId: " + exchange . getExchangeId ( ) + " >>> " + exchange ) ; } return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } Exchange nextExchange = exchange ; while ( processors . hasNext ( ) ) { AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( processors . next ( ) ) ; boolean exceptionHandled = hasExceptionBeenHandled ( nextExchange ) ; if ( nextExchange . isFailed ( ) || exceptionHandled ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Message exchange has failed so breaking out of pipeline: " + nextExchange + " exception: " + nextExchange . getException ( ) + " fault: " + nextExchange . getFault ( false ) + ( exceptionHandled ? " handled by the error handler" : "" ) ) ; } break ; } nextExchange = createNextExchange ( processor , nextExchange ) ; sync = process ( original , nextExchange , callback , processors , processor ) ; if ( ! sync ) { return ; } } ExchangeHelper . copyResults ( original , nextExchange ) ; callback . done ( false ) ; } } ) ; } private static boolean hasExceptionBeenHandled ( Exchange nextExchange ) { return Boolean . TRUE . equals ( nextExchange . getProperty ( Exchange . EXCEPTION_HANDLED_PROPERTY ) ) ; } protected Exchange createNextExchange ( Processor producer , Exchange previousExchange ) { Exchange answer = previousExchange . newInstance ( ) ; answer . setExchangeId ( previousExchange . getExchangeId ( ) ) ; answer . getProperties ( ) . putAll ( previousExchange . getProperties ( ) ) ; Message previousOut = previousExchange . getOut ( false ) ; Message in = answer . getIn ( ) ; if ( previousOut != null ) { in . copyFrom ( previousOut ) ; } else { in . copyFrom ( previousExchange . getIn ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Pipeline" + getProcessors ( ) ; } } 	1
package org . apache . camel . spi ; public interface Injector { < T > T newInstance ( Class < T > type ) ; } 	0
package org . apache . camel ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class ExchangeProperty < T > { private static final List < ExchangeProperty < ? > > VALUES = new ArrayList < ExchangeProperty < ? > > ( ) ; private static final Map < String , ExchangeProperty < ? > > LITERAL_MAP = new HashMap < String , ExchangeProperty < ? > > ( ) ; private static final Map < String , ExchangeProperty < ? > > NAME_MAP = new HashMap < String , ExchangeProperty < ? > > ( ) ; private final String literal ; private final String name ; private final Class < T > type ; public ExchangeProperty ( String literal , String name , Class < T > type ) { this . literal = literal ; this . name = name ; this . type = type ; register ( this ) ; } public String literal ( ) { return literal ; } public String name ( ) { return name ; } public Class < T > type ( ) { return type ; } public T get ( Exchange exchange ) { return exchange . getProperty ( name , type ) ; } public static ExchangeProperty < ? > get ( String literal ) { return LITERAL_MAP . get ( literal ) ; } public static ExchangeProperty < ? > getByName ( String name ) { return NAME_MAP . get ( name ) ; } public T set ( Exchange exchange , T value ) { T oldValue = get ( exchange ) ; exchange . setProperty ( name , value ) ; return oldValue ; } public T remove ( Exchange exchange ) { T oldValue = get ( exchange ) ; exchange . removeProperty ( name ) ; return oldValue ; } @ Override public String toString ( ) { return type ( ) . getCanonicalName ( ) + " " + name + " (" + literal ( ) + ")" ; } public static synchronized void register ( ExchangeProperty < ? > property ) { ExchangeProperty < ? > existingProperty = LITERAL_MAP . get ( property . literal ( ) ) ; if ( existingProperty != null && existingProperty != property ) { throw new RuntimeCamelException ( "An Exchange Property '" + property . literal ( ) + "' has already been registered; its traits are: " + existingProperty . toString ( ) ) ; } VALUES . add ( property ) ; LITERAL_MAP . put ( property . literal ( ) , property ) ; NAME_MAP . put ( property . name ( ) , property ) ; } public static synchronized void deregister ( ExchangeProperty < ? > property ) { if ( property != null ) { VALUES . remove ( property ) ; LITERAL_MAP . remove ( property . literal ( ) ) ; NAME_MAP . put ( property . name ( ) , property ) ; } } public static synchronized void deregister ( String literal ) { ExchangeProperty < ? > property = LITERAL_MAP . get ( literal ) ; if ( property != null ) { VALUES . remove ( property ) ; LITERAL_MAP . remove ( property . literal ( ) ) ; NAME_MAP . put ( property . name ( ) , property ) ; } } public static synchronized ExchangeProperty < ? > [ ] values ( ) { return VALUES . toArray ( new ExchangeProperty [ 0 ] ) ; } } 	1
package org . apache . camel . component . mail ; import java . text . DateFormat ; import java . util . Date ; import javax . mail . Address ; import javax . mail . Message ; import javax . mail . MessagingException ; public final class MailUtils { public static final int DEFAULT_PORT_SMTP = 25 ; public static final int DEFAULT_PORT_SMTPS = 465 ; public static final int DEFAULT_PORT_POP3 = 110 ; public static final int DEFAULT_PORT_POP3S = 995 ; public static final int DEFAULT_PORT_NNTP = 119 ; public static final int DEFAULT_PORT_IMAP = 143 ; public static final int DEFAULT_PORT_IMAPS = 993 ; public static final String PROTOCOL_SMTP = "smtp" ; public static final String PROTOCOL_SMTPS = "smtps" ; public static final String PROTOCOL_POP3 = "pop3" ; public static final String PROTOCOL_POP3S = "pop3s" ; public static final String PROTOCOL_NNTP = "nntp" ; public static final String PROTOCOL_IMAP = "imap" ; public static final String PROTOCOL_IMAPS = "imaps" ; private MailUtils ( ) { } public static int getDefaultPortForProtocol ( final String protocol ) { int port = DEFAULT_PORT_SMTP ; if ( protocol != null ) { if ( protocol . equalsIgnoreCase ( PROTOCOL_IMAP ) ) { port = DEFAULT_PORT_IMAP ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_IMAPS ) ) { port = DEFAULT_PORT_IMAPS ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_NNTP ) ) { port = DEFAULT_PORT_NNTP ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_POP3 ) ) { port = DEFAULT_PORT_POP3 ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_POP3S ) ) { port = DEFAULT_PORT_POP3S ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_SMTP ) ) { port = DEFAULT_PORT_SMTP ; } else if ( protocol . equalsIgnoreCase ( PROTOCOL_SMTPS ) ) { port = DEFAULT_PORT_SMTPS ; } else { port = DEFAULT_PORT_SMTP ; } } return port ; } public static String dumpMessage ( Message message ) { try { StringBuilder sb = new StringBuilder ( ) ; int number = message . getMessageNumber ( ) ; sb . append ( "messageNumber=[" ) . append ( number ) . append ( "]" ) ; Address [ ] from = message . getFrom ( ) ; if ( from != null ) { for ( Address adr : from ) { sb . append ( ", from=[" ) . append ( adr ) . append ( "]" ) ; } } Address [ ] to = message . getRecipients ( Message . RecipientType . TO ) ; if ( to != null ) { for ( Address adr : to ) { sb . append ( ", to=[" ) . append ( adr ) . append ( "]" ) ; } } String subject = message . getSubject ( ) ; if ( subject != null ) { sb . append ( ", subject=[" ) . append ( subject ) . append ( "]" ) ; } Date sentDate = message . getSentDate ( ) ; if ( sentDate != null ) { sb . append ( ", sentDate=[" ) . append ( DateFormat . getDateTimeInstance ( ) . format ( sentDate ) ) . append ( "]" ) ; } Date receivedDate = message . getReceivedDate ( ) ; if ( receivedDate != null ) { sb . append ( ", receivedDate=[" ) . append ( DateFormat . getDateTimeInstance ( ) . format ( receivedDate ) ) . append ( "]" ) ; } return sb . toString ( ) ; } catch ( MessagingException e ) { return message . toString ( ) ; } } } 	0
package org . apache . camel . processor ; import java . util . List ; import org . apache . camel . Processor ; public class CatchProcessor extends DelegateProcessor { private List < Class > exceptions ; public CatchProcessor ( List < Class > exceptions , Processor processor ) { super ( processor ) ; this . exceptions = exceptions ; } @ Override public String toString ( ) { return "Catch[" + exceptions + " -> " + getProcessor ( ) + "]" ; } public boolean catches ( Throwable e ) { for ( Class type : exceptions ) { if ( type . isInstance ( e ) ) { return true ; } } return false ; } public List < Class > getExceptions ( ) { return exceptions ; } } 	1
package org . apache . camel . component . uface . swing ; import java . awt . * ; import javax . swing . * ; import org . apache . camel . component . uface . UFaceBrowser ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . spring . Main ; import org . ufacekit . ui . UIComposite ; import org . ufacekit . ui . swing . SwingComposite ; import org . ufacekit . ui . swing . SwingFactory ; import org . ufacekit . ui . swing . databinding . swing . SwingRealm ; public class SwingBrowser extends UFaceBrowser { static { SwingRealm . createDefault ( ) ; } public SwingBrowser ( DefaultCamelContext camelContext ) { super ( camelContext ) ; } public void run ( ) { JFrame frame = new JFrame ( ) ; frame . setTitle ( "Camel Browser" ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; Container container = frame . getContentPane ( ) ; UIComposite composite = new SwingComposite ( container , new SwingFactory ( ) . newFillLayout ( ) ) ; createBrowserUI ( composite ) ; frame . pack ( ) ; frame . setSize ( 650 , 500 ) ; frame . setVisible ( true ) ; } } 	0
package org . apache . camel . util ; public class CollectionStringBuffer { private StringBuffer buffer = new StringBuffer ( ) ; private String separator ; private boolean first = true ; public CollectionStringBuffer ( ) { this ( ", " ) ; } public CollectionStringBuffer ( String separator ) { this . separator = separator ; } @ Override public String toString ( ) { return buffer . toString ( ) ; } public void append ( Object value ) { if ( first ) { first = false ; } else { buffer . append ( separator ) ; } buffer . append ( value ) ; } public String getSeparator ( ) { return separator ; } public void setSeparator ( String separator ) { this . separator = separator ; } } 	1
package org . apache . camel . component . jpa ; import java . util . Arrays ; import java . util . Collection ; import java . util . Map ; import java . util . Set ; import javax . persistence . EntityManager ; import javax . persistence . Query ; public abstract class QueryBuilder implements QueryFactory { ParameterBuilder parameterBuilder ; public static QueryBuilder query ( final String query ) { return new QueryBuilder ( ) { protected Query makeQueryObject ( EntityManager entityManager ) { return entityManager . createQuery ( query ) ; } @ Override public String toString ( ) { return "Query: " + query + " params: " + getParameterDescription ( ) ; } } ; } public static QueryBuilder namedQuery ( final String namedQuery ) { return new QueryBuilder ( ) { protected Query makeQueryObject ( EntityManager entityManager ) { return entityManager . createNamedQuery ( namedQuery ) ; } @ Override public String toString ( ) { return "Named: " + namedQuery + getParameterDescription ( ) ; } } ; } public static QueryBuilder nativeQuery ( final String nativeQuery ) { return new QueryBuilder ( ) { protected Query makeQueryObject ( EntityManager entityManager ) { return entityManager . createNativeQuery ( nativeQuery ) ; } @ Override public String toString ( ) { return "NativeQuery: " + nativeQuery + getParameterDescription ( ) ; } } ; } public QueryBuilder parameters ( Object ... parameters ) { return parameters ( Arrays . asList ( parameters ) ) ; } public QueryBuilder parameters ( final Collection parameters ) { checkNoParametersConfigured ( ) ; parameterBuilder = new ParameterBuilder ( ) { public void populateQuery ( EntityManager entityManager , Query query ) { int counter = 0 ; for ( Object parameter : parameters ) { query . setParameter ( counter ++ , parameter ) ; } } @ Override public String toString ( ) { return "Parameters: " + parameters ; } } ; return this ; } public QueryBuilder parameters ( final Map < String , Object > parameterMap ) { checkNoParametersConfigured ( ) ; parameterBuilder = new ParameterBuilder ( ) { public void populateQuery ( EntityManager entityManager , Query query ) { Set < Map . Entry < String , Object > > entries = parameterMap . entrySet ( ) ; for ( Map . Entry < String , Object > entry : entries ) { query . setParameter ( entry . getKey ( ) , entry . getValue ( ) ) ; } } @ Override public String toString ( ) { return "Parameters: " + parameterMap ; } } ; return this ; } protected void checkNoParametersConfigured ( ) { if ( parameterBuilder != null ) { throw new IllegalArgumentException ( "Cannot add parameters to a QueryBuilder which already has parameters configured" ) ; } } public Query createQuery ( EntityManager entityManager ) { Query query = makeQueryObject ( entityManager ) ; populateQuery ( entityManager , query ) ; return query ; } protected String getParameterDescription ( ) { if ( parameterBuilder == null ) { return "" ; } else { return " " + parameterBuilder . toString ( ) ; } } protected void populateQuery ( EntityManager entityManager , Query query ) { if ( parameterBuilder != null ) { parameterBuilder . populateQuery ( entityManager , query ) ; } } protected abstract Query makeQueryObject ( EntityManager entityManager ) ; protected abstract static class ParameterBuilder { public abstract void populateQuery ( EntityManager entityManager , Query query ) ; } } 	0
package org . apache . camel . model . dataformat ; import java . io . InputStream ; import java . io . OutputStream ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . Exchange ; import org . apache . camel . model . IdentifiedType ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . RouteContext ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlType ( name = "dataFormatType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DataFormatType extends IdentifiedType implements DataFormat { @ XmlTransient private DataFormat dataFormat ; @ XmlTransient private String dataFormatTypeName ; public DataFormatType ( ) { } public DataFormatType ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } protected DataFormatType ( String dataFormatTypeName ) { this . dataFormatTypeName = dataFormatTypeName ; } public static DataFormat getDataFormat ( RouteContext routeContext , DataFormatType type , String ref ) { if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; DataFormat dataFormat = routeContext . lookup ( ref , DataFormat . class ) ; if ( dataFormat == null ) { dataFormat = routeContext . getDataFormat ( ref ) ; } if ( dataFormat instanceof DataFormatType ) { type = ( DataFormatType ) dataFormat ; } else { return dataFormat ; } } return type . getDataFormat ( routeContext ) ; } public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; dataFormat . marshal ( exchange , graph , stream ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws Exception { ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; return dataFormat . unmarshal ( exchange , stream ) ; } public DataFormat getDataFormat ( RouteContext routeContext ) { if ( dataFormat == null ) { dataFormat = createDataFormat ( routeContext ) ; ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; configureDataFormat ( dataFormat ) ; } return dataFormat ; } protected DataFormat createDataFormat ( RouteContext routeContext ) { if ( dataFormatTypeName != null ) { Class type = ObjectHelper . loadClass ( dataFormatTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + dataFormatTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } return ( DataFormat ) ObjectHelper . newInstance ( type ) ; } return null ; } protected void configureDataFormat ( DataFormat dataFormat ) { } protected void setProperty ( Object bean , String name , Object value ) { try { IntrospectionSupport . setProperty ( bean , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + bean + ". Reason: " + e , e ) ; } } } 	1
package org . apache . camel . processor . interceptor ; import org . apache . camel . Exchange ; public class ExceptionEvent { private final DebugInterceptor interceptor ; private final Exchange exchange ; private final Throwable exception ; public ExceptionEvent ( DebugInterceptor interceptor , Exchange exchange , Throwable exception ) { this . interceptor = interceptor ; this . exchange = exchange ; this . exception = exception ; } public Throwable getException ( ) { return exception ; } public Exchange getExchange ( ) { return exchange ; } public DebugInterceptor getInterceptor ( ) { return interceptor ; } } 	0
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . util . ObjectHelper ; public class BytesSource extends StreamSource { private byte [ ] data ; public BytesSource ( byte [ ] data ) { ObjectHelper . notNull ( data , "data" ) ; this . data = data ; } public BytesSource ( byte [ ] data , String systemId ) { ObjectHelper . notNull ( data , "data" ) ; this . data = data ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { return new ByteArrayInputStream ( data ) ; } public Reader getReader ( ) { return new InputStreamReader ( getInputStream ( ) ) ; } public byte [ ] getData ( ) { return data ; } public String toString ( ) { return "BytesSource[" + new String ( data ) + "]" ; } } 	1
